<Type Name="Pattern" FullName="Java.Util.Regex.Pattern">
  <TypeSignature Language="C#" Value="public sealed class Pattern : Java.Lang.Object, IDisposable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pattern extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/regex/Pattern", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Patterns are compiled regular expressions.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Patterns are compiled regular expressions. In many cases, convenience methods such as
 <c><see cref="M:Java.Lang.String.Matches(System.String)" /></c>, <c><see cref="M:Java.Lang.String.ReplaceAll(System.String,System.String)" /></c> and
 <c><see cref="M:Java.Lang.String.Split(System.String)" /></c> will be preferable, but if you need to do a lot of work
 with the same regular expression, it may be more efficient to compile it once and reuse it.
 The <c>Pattern</c> class and its companion, <c><see cref="T:Java.Util.Regex.Matcher" /></c>, also offer more functionality
 than the small amount exposed by <c>String</c>.

 <example><code lang="java">
 // String convenience methods:
 boolean sawFailures = s.matches("Failures: \\d+");
 String farewell = s.replaceAll("Hello, (\\S+)", "Goodbye, $1");
 String[] fields = s.split(":");

 // Direct use of Pattern:
 Pattern p = Pattern.compile("Hello, (\\S+)");
 Matcher m = p.matcher(inputString);
 while (m.find()) { // Find each match in turn; String can't do this.
     String name = m.group(1); // Access a submatch group; String can't do this.
 }
 </code></example><format type="text/html"><h3>Regular expression syntax</h3></format><format type="text/html"><style type="text/css">
//<![CDATA[

 .datatable td { padding-right: 20px; }
 
//]]>//
</style></format></para>
      <para tool="javadoc-to-mdoc">Java supports a subset of Perl 5 regular expression syntax. An important gotcha is that Java
 has no regular expression literals, and uses plain old string literals instead. This means that
 you need an extra level of escaping. For example, the regular expression <c>\s+</c> has to
 be represented as the string <c>"\\s+"</c>.

 <format type="text/html"><h3>Escape sequences</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td> \ </td>
              <td>Quote the following metacharacter (so <c>\.</c> matches a literal <c>.</c>).</td>
            </tr>
            <tr>
              <td> \Q </td>
              <td>Quote all following metacharacters until <c>\E</c>.</td>
            </tr>
            <tr>
              <td> \E </td>
              <td>Stop quoting metacharacters (started by <c>\Q</c>).</td>
            </tr>
            <tr>
              <td> \\ </td>
              <td>A literal backslash.</td>
            </tr>
            <tr>
              <td> &amp;#x005c;u<i>hhhh</i></td>
              <td>The Unicode character U+hhhh (in hex).</td>
            </tr>
            <tr>
              <td> &amp;#x005c;x<i>hh</i></td>
              <td>The Unicode character U+00hh (in hex).</td>
            </tr>
            <tr>
              <td> \c<i>x</i></td>
              <td>The ASCII control character ^x (so <c>\cH</c> would be ^H, U+0008).</td>
            </tr>
            <tr>
              <td> \a </td>
              <td>The ASCII bell character (U+0007).</td>
            </tr>
            <tr>
              <td> \e </td>
              <td>The ASCII ESC character (U+001b).</td>
            </tr>
            <tr>
              <td> \f </td>
              <td>The ASCII form feed character (U+000c).</td>
            </tr>
            <tr>
              <td> \n </td>
              <td>The ASCII newline character (U+000a).</td>
            </tr>
            <tr>
              <td> \r </td>
              <td>The ASCII carriage return character (U+000d).</td>
            </tr>
            <tr>
              <td> \t </td>
              <td>The ASCII tab character (U+0009).</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <h3>Character classes</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">It's possible to construct arbitrary character classes using set operations:
 <format type="text/html"><table><tr><td> [abc] </td><td>Any one of <c>a</c>, <c>b</c>, or <c>c</c>. (Enumeration.)</td></tr><tr><td> [a-c] </td><td>Any one of <c>a</c>, <c>b</c>, or <c>c</c>. (Range.)</td></tr><tr><td> [^abc] </td><td>Any character <i>except</i><c>a</c>, <c>b</c>, or <c>c</c>. (Negation.)</td></tr><tr><td> [[a-f][0-9]] </td><td>Any character in either range. (Union.)</td></tr><tr><td> [[a-z]&amp;&amp;[jkl]] </td><td>Any character in both ranges. (Intersection.)</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">Most of the time, the built-in character classes are more useful:
 <format type="text/html"><table><tr><td> \d </td><td>Any digit character (see note below).</td></tr><tr><td> \D </td><td>Any non-digit character (see note below).</td></tr><tr><td> \s </td><td>Any whitespace character (see note below).</td></tr><tr><td> \S </td><td>Any non-whitespace character (see note below).</td></tr><tr><td> \w </td><td>Any word character (see note below).</td></tr><tr><td> \W </td><td>Any non-word character (see note below).</td></tr><tr><td> \p{<i>NAME</i>} </td><td> Any character in the class with the given <i>NAME</i>. </td></tr><tr><td> \P{<i>NAME</i>} </td><td> Any character <i>not</i> in the named class. </td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">Note that these built-in classes don't just cover the traditional ASCII range. For example,
 <c>\w</c> is equivalent to the character class <c>[\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}]</c>.
 For more details see ,
 and bear in mind that the set of characters in each class can vary between Unicode releases.
 If you actually want to match only ASCII characters, specify the explicit characters you want;
 if you mean 0-9 use <c>[0-9]</c> rather than <c>\d</c>, which would also include
 Gurmukhi digits and so forth.
 </para>
      <para tool="javadoc-to-mdoc">There are also a variety of named classes:
 <list type="bullet"><item><term><format type="text/html"><a href="http://developer.android.com/reference/../lang/Character.html#unicode_categories">Unicode category names</a></format>,
 prefixed by <c>Is</c>. For example <c>\p{IsLu</c>} for all uppercase letters.
 </term></item><item><term>POSIX class names. These are 'Alnum', 'Alpha', 'ASCII', 'Blank', 'Cntrl', 'Digit',
 'Graph', 'Lower', 'Print', 'Punct', 'Upper', 'XDigit'.
 </term></item><item><term>Unicode block names, as accepted as input to <c><see cref="!:NoType:java/lang/Character$UnicodeBlock;Href=../../../../reference/java/lang/Character.UnicodeBlock.html#forName(java.lang.String)" /></c>,
 prefixed by <c>In</c>. For example <c>\p{InHebrew</c>} for all characters in the Hebrew block.
 </term></item><item><term>Character method names. These are all non-deprecated methods from <c><see cref="T:Java.Lang.Character" /></c>
 whose name starts with <c>is</c>, but with the <c>is</c> replaced by <c>java</c>.
 For example, <c>\p{javaLowerCase</c>}.
 </term></item></list><format type="text/html"><h3>Quantifiers</h3></format></para>
      <para tool="javadoc-to-mdoc">Quantifiers match some number of instances of the preceding regular expression.
 <format type="text/html"><table><tr><td> * </td><td>Zero or more.</td></tr><tr><td> ? </td><td>Zero or one.</td></tr><tr><td> + </td><td>One or more.</td></tr><tr><td> {<i>n</i>} </td><td>Exactly <i>n</i>.</td></tr><tr><td> {<i>n,</i>} </td><td>At least <i>n</i>.</td></tr><tr><td> {<i>n</i>,<i>m</i>} </td><td>At least <i>n</i> but not more than <i>m</i>.</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">Quantifiers are "greedy" by default, meaning that they will match the longest possible input
 sequence. There are also non-greedy quantifiers that match the shortest possible input sequence.
 They're same as the greedy ones but with a trailing <c>?</c>:
 <format type="text/html"><table><tr><td> *? </td><td>Zero or more (non-greedy).</td></tr><tr><td> ?? </td><td>Zero or one (non-greedy).</td></tr><tr><td> +? </td><td>One or more (non-greedy).</td></tr><tr><td> {<i>n</i>}? </td><td>Exactly <i>n</i> (non-greedy).</td></tr><tr><td> {<i>n,</i>}? </td><td>At least <i>n</i> (non-greedy).</td></tr><tr><td> {<i>n</i>,<i>m</i>}? </td><td>At least <i>n</i> but not more than <i>m</i> (non-greedy).</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">Quantifiers allow backtracking by default. There are also possessive quantifiers to prevent
 backtracking. They're same as the greedy ones but with a trailing <c>+</c>:
 <format type="text/html"><table><tr><td> *+ </td><td>Zero or more (possessive).</td></tr><tr><td> ?+ </td><td>Zero or one (possessive).</td></tr><tr><td> ++ </td><td>One or more (possessive).</td></tr><tr><td> {<i>n</i>}+ </td><td>Exactly <i>n</i> (possessive).</td></tr><tr><td> {<i>n,</i>}+ </td><td>At least <i>n</i> (possessive).</td></tr><tr><td> {<i>n</i>,<i>m</i>}+ </td><td>At least <i>n</i> but not more than <i>m</i> (possessive).</td></tr></table></format><format type="text/html"><h3>Zero-width assertions</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td> ^ </td>
              <td>At beginning of line.</td>
            </tr>
            <tr>
              <td> $ </td>
              <td>At end of line.</td>
            </tr>
            <tr>
              <td> \A </td>
              <td>At beginning of input.</td>
            </tr>
            <tr>
              <td> \b </td>
              <td>At word boundary.</td>
            </tr>
            <tr>
              <td> \B </td>
              <td>At non-word boundary.</td>
            </tr>
            <tr>
              <td> \G </td>
              <td>At end of previous match.</td>
            </tr>
            <tr>
              <td> \z </td>
              <td>At end of input.</td>
            </tr>
            <tr>
              <td> \Z </td>
              <td>At end of input, or before newline at end.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <h3>Look-around assertions</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">Look-around assertions assert that the subpattern does (positive) or doesn't (negative) match
 after (look-ahead) or before (look-behind) the current position, without including the matched
 text in the containing match. The maximum length of possible matches for look-behind patterns
 must not be unbounded.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td> (?=<i>a</i>) </td>
              <td>Zero-width positive look-ahead.</td>
            </tr>
            <tr>
              <td> (?!<i>a</i>) </td>
              <td>Zero-width negative look-ahead.</td>
            </tr>
            <tr>
              <td> (?&lt;=<i>a</i>) </td>
              <td>Zero-width positive look-behind.</td>
            </tr>
            <tr>
              <td> (?&lt;!<i>a</i>) </td>
              <td>Zero-width negative look-behind.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <h3>Groups</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td> (<i>a</i>) </td>
              <td>A capturing group.</td>
            </tr>
            <tr>
              <td> (?:<i>a</i>) </td>
              <td>A non-capturing group.</td>
            </tr>
            <tr>
              <td> (?&gt;<i>a</i>) </td>
              <td>An independent non-capturing group. (The first match of the subgroup is the only match tried.)</td>
            </tr>
            <tr>
              <td> \<i>n</i></td>
              <td>The text already matched by capturing group <i>n</i>.</td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">See <c><see cref="M:Java.Util.Regex.Matcher.Group" /></c> for details of how capturing groups are numbered and accessed.

 <format type="text/html"><h3>Operators</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td>
                <i>ab</i>
              </td>
              <td>Expression <i>a</i> followed by expression <i>b</i>.</td>
            </tr>
            <tr>
              <td>
                <i>a</i>|<i>b</i></td>
              <td>Either expression <i>a</i> or expression <i>b</i>.</td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <h3>Flags</h3>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td> (?dimsux-dimsux:<i>a</i>) </td>
              <td>Evaluates the expression <i>a</i> with the given flags enabled/disabled.</td>
            </tr>
            <tr>
              <td> (?dimsux-dimsux) </td>
              <td>Evaluates the rest of the pattern with the given flags enabled/disabled.</td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">The flags are:
 <format type="text/html"><table><tr><td><c>i</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.CaseInsensitive" /></c></td><td>case insensitive matching</td></tr><tr><td><c>d</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.UnixLines" /></c></td><td>only accept <c>'\n'</c> as a line terminator</td></tr><tr><td><c>m</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.Multiline" /></c></td><td>allow <c>^</c> and <c>$</c> to match beginning/end of any line</td></tr><tr><td><c>s</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.Dotall" /></c></td><td>allow <c>.</c> to match <c>'\n'</c> ("s" for "single line")</td></tr><tr><td><c>u</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.UnicodeCase" /></c></td><td>enable Unicode case folding</td></tr><tr><td><c>x</c></td><td><c><see cref="F:Java.Util.Regex.Pattern.Comments" /></c></td><td>allow whitespace and comments</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">Either set of flags may be empty. For example, <c>(?i-m)</c> would turn on case-insensitivity
 and turn off multiline mode, <c>(?i)</c> would just turn on case-insensitivity,
 and <c>(?-m)</c> would just turn off multiline mode.
 </para>
      <para tool="javadoc-to-mdoc">Note that on Android, <c>UNICODE_CASE</c> is always on: case-insensitive matching will
 always be Unicode-aware.
 </para>
      <para tool="javadoc-to-mdoc">There are two other flags not settable via this mechanism: <c><see cref="F:Java.Util.Regex.Pattern.CanonEq" /></c> and
 <c><see cref="F:Java.Util.Regex.Pattern.Literal" /></c>. Attempts to use <c><see cref="F:Java.Util.Regex.Pattern.CanonEq" /></c> on Android will throw an exception.
 <format type="text/html"><h3>Implementation notes</h3></format></para>
      <para tool="javadoc-to-mdoc">The regular expression implementation used in Android is provided by
 . The notation for the regular
 expressions is mostly a superset of those used in other Java language
 implementations. This means that existing applications will normally work as
 expected, but in rare cases Android may accept a regular expression that is
 not accepted by other implementations.

 </para>
      <para tool="javadoc-to-mdoc">In some cases, Android will recognize that a regular expression is a simple
 special case that can be handled more efficiently. This is true of both the convenience methods
 in <c>String</c> and the methods in <c>Pattern</c>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Regex.Matcher" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/regex/Pattern.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="CanonEq">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions CanonEq = 128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions CanonEq = (128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CANON_EQ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>This constant specifies that a character in a <c>Pattern</c> and a
 character in the input string only match if they are canonically
 equivalent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that a character in a <c>Pattern</c> and a
 character in the input string only match if they are canonically
 equivalent. It is (currently) not supported in Android.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#CANON_EQ" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CaseInsensitive">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions CaseInsensitive = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions CaseInsensitive = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CASE_INSENSITIVE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This constant specifies that a <c>Pattern</c> is matched
 case-insensitively.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that a <c>Pattern</c> is matched
 case-insensitively. That is, the patterns "a+" and "A+" would both match
 the string "aAaAaA". See <c><see cref="F:Java.Util.Regex.Pattern.UnicodeCase" /></c>. Corresponds to <c>(?i)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#CASE_INSENSITIVE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Comments = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Comments = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("COMMENTS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This constant specifies that a <c>Pattern</c> may contain whitespace or
 comments.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that a <c>Pattern</c> may contain whitespace or
 comments. Otherwise comments and whitespace are taken as literal
 characters. Corresponds to <c>(?x)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#COMMENTS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public static Java.Util.Regex.Pattern Compile (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Regex.Pattern Compile(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Pattern</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary tool="true">Equivalent to <c>Pattern.compile(pattern, 0)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to <c>Pattern.compile(pattern, 0)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#compile(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public static Java.Util.Regex.Pattern Compile (string regularExpression, Java.Util.Regex.RegexOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Regex.Pattern Compile(string regularExpression, valuetype Java.Util.Regex.RegexOptions flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compile", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Pattern</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="flags" Type="Java.Util.Regex.RegexOptions">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="regularExpression">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Returns a compiled form of the given <c>regularExpression</c>, as modified by the
 given <c>flags</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a compiled form of the given <c>regularExpression</c>, as modified by the
 given <c>flags</c>. See the  for more on flags.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#compile(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Regex.PatternSyntaxException">if the regular expression is syntactically incorrect.</exception>
        <altmember cref="F:Java.Util.Regex.Pattern.CanonEq" />
        <altmember cref="F:Java.Util.Regex.Pattern.CaseInsensitive" />
        <altmember cref="F:Java.Util.Regex.Pattern.Comments" />
        <altmember cref="F:Java.Util.Regex.Pattern.Dotall" />
        <altmember cref="F:Java.Util.Regex.Pattern.Literal" />
        <altmember cref="F:Java.Util.Regex.Pattern.Multiline" />
        <altmember cref="F:Java.Util.Regex.Pattern.UnicodeCase" />
        <altmember cref="F:Java.Util.Regex.Pattern.UnixLines" />
      </Docs>
    </Member>
    <Member MemberName="Dotall">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Dotall = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Dotall = (32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DOTALL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>This constant specifies that the '.' meta character matches arbitrary
 characters, including line endings, which is normally not the case.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that the '.' meta character matches arbitrary
 characters, including line endings, which is normally not the case.
 Corresponds to <c>(?s)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#DOTALL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public Java.Util.Regex.RegexOptions Flags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Java.Util.Regex.RegexOptions Flags() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flags", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the flags supplied to <c>compile</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the flags supplied to <c>compile</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#flags()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvokePattern">
      <MemberSignature Language="C#" Value="public string InvokePattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string InvokePattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pattern", "()Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the regular expression supplied to <c>compile</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the regular expression supplied to <c>compile</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#pattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Literal = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Literal = (16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LITERAL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>This constant specifies that the whole <c>Pattern</c> is to be taken
 literally, that is, all meta characters lose their meanings.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that the whole <c>Pattern</c> is to be taken
 literally, that is, all meta characters lose their meanings.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#LITERAL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Matcher">
      <MemberSignature Language="C#" Value="public Java.Util.Regex.Matcher Matcher (Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.Matcher Matcher(class Java.Lang.ICharSequence input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Matcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>Returns a <c><see cref="T:Java.Util.Regex.Matcher" /></c> for this pattern applied to the given <c>input</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a <c><see cref="T:Java.Util.Regex.Matcher" /></c> for this pattern applied to the given <c>input</c>.
 The <c>Matcher</c> can be used to match the <c>Pattern</c> against the
 whole input, find occurrences of the <c>Pattern</c> in the input, or
 replace parts of the input.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Matcher">
      <MemberSignature Language="C#" Value="public Java.Util.Regex.Matcher Matcher (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.Matcher Matcher(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Matcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static bool Matches (string regularExpression, Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Matches(string regularExpression, class Java.Lang.ICharSequence input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("matches", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="regularExpression">To be added.</param>
        <param name="input">To be added.</param>
        <summary>Tests whether the given <c>regularExpression</c> matches the given <c>input</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tests whether the given <c>regularExpression</c> matches the given <c>input</c>.
 Equivalent to <c>Pattern.compile(regularExpression).matcher(input).matches()</c>.
 If the same regular expression is to be used for multiple operations, it may be more
 efficient to reuse a compiled <c>Pattern</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#matches(java.lang.String, java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Util.Regex.Pattern.Compile(System.String, Java.Util.Regex.RegexOptions)" />
        <altmember cref="M:Java.Util.Regex.Matcher.Matches" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static bool Matches (string regularExpression, string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Matches(string regularExpression, string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regularExpression">To be added.</param>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Multiline = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Multiline = (8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MULTILINE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>This constant specifies that the meta characters '^' and '$' match only
 the beginning and end of an input line, respectively.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that the meta characters '^' and '$' match only
 the beginning and end of an input line, respectively. Normally, they
 match the beginning and the end of the complete input. Corresponds to <c>(?m)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#MULTILINE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static string Quote (string string);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Quote(string string) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("quote", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string">To be added.</param>
        <summary>Quotes the given <c>string</c> using "\Q" and "\E", so that all
 meta-characters lose their special meaning.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Quotes the given <c>string</c> using "\Q" and "\E", so that all
 meta-characters lose their special meaning. This method correctly
 escapes embedded instances of "\Q" or "\E". If the entire result
 is to be passed verbatim to <c><see cref="M:Java.Util.Regex.Pattern.Compile(System.String)" /></c>, it's usually clearer
 to use the <c><see cref="F:Java.Util.Regex.Pattern.Literal" /></c> flag instead.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#quote(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(class Java.Lang.ICharSequence input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("split", "(Ljava/lang/CharSequence;)[Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>Equivalent to <c>split(input, 0)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to <c>split(input, 0)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#split(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (Java.Lang.ICharSequence input, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(class Java.Lang.ICharSequence input, int32 limit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("split", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeq" Type="Java.Lang.ICharSequence" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="limit">Determines the maximum number of entries in the resulting
            array, and the treatment of trailing empty strings.
            <list type="bullet"><item><term>For n &gt; 0, the resulting array contains at most n
            entries. If this is fewer than the number of matches, the
            final entry will contain all remaining input.
            <item><term>For n &lt; 0, the length of the resulting array is
            exactly the number of occurrences of the <c>Pattern</c>
            plus one for the text after the final separator.
            All entries are included.
            <item><term>For n == 0, the result is as for n &lt; 0, except
            trailing empty strings will not be returned. (Note that
            the case where the input is itself an empty string is
            special, as described above, and the limit parameter does
            not apply there.)
            </term></item></term></item></term></item></list></param>
        <summary>Splits the given <c>input</c> at occurrences of this pattern.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Splits the given <c>input</c> at occurrences of this pattern.

 </para>
          <para tool="javadoc-to-mdoc">If this pattern does not occur in the input, the result is an
 array containing the input (converted from a <c>CharSequence</c> to
 a <c>String</c>).

 </para>
          <para tool="javadoc-to-mdoc">Otherwise, the <c>limit</c> parameter controls the contents of the
 returned array as described below.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#split(java.lang.CharSequence, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 limit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeq" Type="System.String" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="limit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnicodeCase">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions UnicodeCase = 64;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions UnicodeCase = (64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("UNICODE_CASE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>This constant specifies that a <c>Pattern</c> that uses case-insensitive matching
 will use Unicode case folding.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that a <c>Pattern</c> that uses case-insensitive matching
 will use Unicode case folding. On Android, <c>UNICODE_CASE</c> is always on:
 case-insensitive matching will always be Unicode-aware. If your code is intended to
 be portable and uses case-insensitive matching on non-ASCII characters, you should
 use this flag. Corresponds to <c>(?u)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#UNICODE_CASE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeCharacterClass">
      <MemberSignature Language="C#" Value="public static int UnicodeCharacterClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UnicodeCharacterClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("UNICODE_CHARACTER_CLASS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnixLines">
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions UnixLines = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions UnixLines = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("UNIX_LINES")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This constant specifies that a pattern matches Unix line endings ('\n')
 only against the '.', '^', and '$' meta characters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant specifies that a pattern matches Unix line endings ('\n')
 only against the '.', '^', and '$' meta characters. Corresponds to <c>(?d)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/regex/Pattern.html#UNIX_LINES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
