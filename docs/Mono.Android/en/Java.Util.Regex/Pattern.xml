<Type Name="Pattern" FullName="Java.Util.Regex.Pattern">
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Pattern&#xA;Inherits Object&#xA;Implements IDisposable, IJavaPeerable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Pattern sealed : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::IO::ISerializable" />
  <TypeSignature Language="C#" Value="public sealed class Pattern : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Pattern extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Regex.Pattern" />
  <TypeSignature Language="F#" Value="type Pattern = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/regex/Pattern", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/regex/Pattern", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A compiled representation of a regular expression.</summary>
    <remarks>
      <para>A compiled representation of a regular expression.</para>
      <para>A regular expression, specified as a string, must first be compiled into
            an instance of this class.  The resulting pattern can then be used to create
            a <c>Matcher</c> object that can match arbitrary java.lang.CharSequence character sequences against the regular
            expression.  All of the state involved in performing a match resides in the
            matcher, so many matchers can share the same pattern.</para>
      <para>A typical invocation sequence is thus
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">Pattern p = Pattern.{@link #compile compile}("a*b");
            Matcher m = p.{@link #matcher matcher}("aaaaab");
            boolean b = m.{@link Matcher#matches matches}();</code>
      <para>&lt;/blockquote&gt;</para>
      <para>A <c>#matches matches</c> method is defined by this class as a
            convenience for when a regular expression is used just once.  This method
            compiles an expression and matches an input sequence against it in a single
            invocation.  The statement
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">boolean b = Pattern.matches("a*b", "aaaaab");</code>
      <para>&lt;/blockquote&gt;
            
            is equivalent to the three statements above, though for repeated matches it
            is less efficient since it does not allow the compiled pattern to be reused.</para>
      <para>Instances of this class are immutable and are safe for use by multiple
            concurrent threads.  Instances of the <c>Matcher</c> class are not safe for
            such use.
            
            
            &lt;h2&gt;"sum"&gt;Summary of regular-expression constructs&lt;/h2&gt;
            
            &lt;table class="borderless"&gt;
            &lt;caption style="display:none"&gt;Regular expression constructs, and what they match&lt;/caption&gt;
            &lt;thead style="text-align:left"&gt;
            &lt;tr&gt;
            &lt;th id="construct"&gt;Construct&lt;/th&gt;
            &lt;th id="matches"&gt;Matches&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody style="text-align:left"&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="characters"&gt;Characters&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="x"&gt;<i>x</i>&lt;/th&gt;
                &lt;td headers="matches characters x"&gt;The character <i>x</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="backslash"&gt;<c>\\</c>&lt;/th&gt;
                &lt;td headers="matches characters backslash"&gt;The backslash character&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="octal_n"&gt;<c>\0</c><i>n</i>&lt;/th&gt;
                &lt;td headers="matches characters octal_n"&gt;The character with octal value <c>0</c><i>n</i>
                    (0&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;7)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="octal_nn"&gt;<c>\0</c><i>nn</i>&lt;/th&gt;
                &lt;td headers="matches characters octal_nn"&gt;The character with octal value <c>0</c><i>nn</i>
                    (0&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;7)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="octal_nnn"&gt;<c>\0</c><i>mnn</i>&lt;/th&gt;
                &lt;td headers="matches characters octal_nnn"&gt;The character with octal value <c>0</c><i>mnn</i>
                    (0&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>m</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;3,
                    0&amp;nbsp;<c>&lt;=</c>&amp;nbsp;<i>n</i>&amp;nbsp;<c>&lt;=</c>&amp;nbsp;7)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="hex_hh"&gt;<c>\x</c><i>hh</i>&lt;/th&gt;
                &lt;td headers="matches characters hex_hh"&gt;The character with hexadecimal value <c>0x</c><i>hh</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="hex_hhhh"&gt;<c>&amp;#92;u</c><i>hhhh</i>&lt;/th&gt;
                &lt;td headers="matches characters hex_hhhh"&gt;The character with hexadecimal&amp;nbsp;value&amp;nbsp;<c>0x</c><i>hhhh</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="hex_h_h"&gt;<c>&amp;#92;x</c><i>{h...h}</i>&lt;/th&gt;
                &lt;td headers="matches characters hex_h_h"&gt;The character with hexadecimal value <c>0x</c><i>h...h</i>
                    (<c>java.lang.Character#MIN_CODE_POINT Character.MIN_CODE_POINT</c>
                    &amp;nbsp;&amp;lt;=&amp;nbsp;<c>0x</c><i>h...h</i>&amp;nbsp;&amp;lt;=&amp;nbsp;
                     <c>java.lang.Character#MAX_CODE_POINT Character.MAX_CODE_POINT</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight: normal" id="unicode_name"&gt;<c>&amp;#92;N{</c><i>name</i><c>}</c>&lt;/th&gt;
                &lt;td headers="matches characters unicode_name"&gt;The character with Unicode character name <i>'name'</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="tab"&gt;<c>\t</c>&lt;/th&gt;
                &lt;td headers="matches characters tab"&gt;The tab character (<c>'&amp;#92;u0009'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="newline"&gt;<c>\n</c>&lt;/th&gt;
                &lt;td headers="matches characters newline"&gt;The newline (line feed) character (<c>'&amp;#92;u000A'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="return"&gt;<c>\r</c>&lt;/th&gt;
                &lt;td headers="matches characters return"&gt;The carriage-return character (<c>'&amp;#92;u000D'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="form_feed"&gt;<c>\f</c>&lt;/th&gt;
                &lt;td headers="matches characters form_feed"&gt;The form-feed character (<c>'&amp;#92;u000C'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="bell"&gt;<c>\a</c>&lt;/th&gt;
                &lt;td headers="matches characters bell"&gt;The alert (bell) character (<c>'&amp;#92;u0007'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="escape"&gt;<c>\e</c>&lt;/th&gt;
                &lt;td headers="matches characters escape"&gt;The escape character (<c>'&amp;#92;u001B'</c>)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="ctrl_x"&gt;<c>\c</c><i>x</i>&lt;/th&gt;
                &lt;td headers="matches characters ctrl_x"&gt;The control character corresponding to <i>x</i>&lt;/td&gt;&lt;/tr&gt;
            
             &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="classes"&gt;Character classes&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="simple"&gt;<c>[abc]</c>&lt;/th&gt;
                &lt;td headers="matches classes simple"&gt;<c>a</c>, <c>b</c>, or <c>c</c> (simple class)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="negation"&gt;<c>[^abc]</c>&lt;/th&gt;
                &lt;td headers="matches classes negation"&gt;Any character except <c>a</c>, <c>b</c>, or <c>c</c> (negation)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="range"&gt;<c>[a-zA-Z]</c>&lt;/th&gt;
                &lt;td headers="matches classes range"&gt;<c>a</c> through <c>z</c>
                    or <c>A</c> through <c>Z</c>, inclusive (range)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="union"&gt;<c>[a-d[m-p]]</c>&lt;/th&gt;
                &lt;td headers="matches classes union"&gt;<c>a</c> through <c>d</c>,
                 or <c>m</c> through <c>p</c>: <c>[a-dm-p]</c> (union)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="intersection"&gt;<c>[a-z&amp;&amp;[def]]</c>&lt;/th&gt;
                &lt;td headers="matches classes intersection"&gt;<c>d</c>, <c>e</c>, or <c>f</c> (intersection)&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="subtraction1"&gt;<c>[a-z&amp;&amp;[^bc]]</c>&lt;/th&gt;
                &lt;td headers="matches classes subtraction1"&gt;<c>a</c> through <c>z</c>,
                    except for <c>b</c> and <c>c</c>: <c>[ad-z]</c> (subtraction)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="subtraction2"&gt;<c>[a-z&amp;&amp;[^m-p]]</c>&lt;/th&gt;
                &lt;td headers="matches classes subtraction2"&gt;<c>a</c> through <c>z</c>,
                     and not <c>m</c> through <c>p</c>: <c>[a-lq-z]</c>(subtraction)&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="predef"&gt;Predefined character classes&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="any"&gt;<c>.</c>&lt;/th&gt;
                &lt;td headers="matches predef any"&gt;Any character (may or may not match line terminators)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="digit"&gt;<c>\d</c>&lt;/th&gt;
                &lt;td headers="matches predef digit"&gt;A digit: <c>\p{IsDigit</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_digit"&gt;<c>\D</c>&lt;/th&gt;
                &lt;td headers="matches predef non_digit"&gt;A non-digit: <c>[^\d]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="horiz_white"&gt;<c>\h</c>&lt;/th&gt;
                &lt;td headers="matches predef horiz_white"&gt;A horizontal whitespace character:
                <c>[ \t\xA0&amp;#92;u1680&amp;#92;u180e&amp;#92;u2000-&amp;#92;u200a&amp;#92;u202f&amp;#92;u205f&amp;#92;u3000]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_horiz_white"&gt;<c>\H</c>&lt;/th&gt;
                &lt;td headers="matches predef non_horiz_white"&gt;A non-horizontal whitespace character: <c>[^\h]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="white"&gt;<c>\s</c>&lt;/th&gt;
                &lt;td headers="matches predef white"&gt;A whitespace character: <c>\p{IsWhite_Space</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_white"&gt;<c>\S</c>&lt;/th&gt;
                &lt;td headers="matches predef non_white"&gt;A non-whitespace character: <c>[^\s]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="vert_white"&gt;<c>\v</c>&lt;/th&gt;
                &lt;td headers="matches predef vert_white"&gt;A vertical whitespace character: <c>[\n\x0B\f\r\x85&amp;#92;u2028&amp;#92;u2029]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_vert_white"&gt;<c>\V</c>&lt;/th&gt;
                &lt;td headers="matches predef non_vert_white"&gt;A non-vertical whitespace character: <c>[^\v]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="word"&gt;<c>\w</c>&lt;/th&gt;
                &lt;td headers="matches predef word"&gt;A word character: <c>[\p{alpha</c>\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_word"&gt;<c>\W</c>&lt;/th&gt;
                &lt;td headers="matches predef non_word"&gt;A non-word character: <c>[^\w]</c>&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="posix"&gt;&lt;b&gt;POSIX character classes (Unicode-aware)&lt;/b&gt;&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Lower"&gt;<c>\p{Lower</c>}&lt;/th&gt;
                &lt;td headers="matches posix Lower"&gt;A lower-case alphabetic character: <c>\p{IsLowercase</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Upper"&gt;<c>\p{Upper</c>}&lt;/th&gt;
                &lt;td headers="matches posix Upper"&gt;An upper-case alphabetic character:<c>\p{IsUppercase</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="ASCII"&gt;<c>\p{ASCII</c>}&lt;/th&gt;
                &lt;td headers="matches posix ASCII"&gt;All ASCII:<c>[\x00-\x7F]</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Alpha"&gt;<c>\p{Alpha</c>}&lt;/th&gt;
                &lt;td headers="matches posix Alpha"&gt;An alphabetic character:<c>[\p{IsAlphabetic</c>]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Digit"&gt;<c>\p{IsDigit</c>}&lt;/th&gt;
                &lt;td headers="matches posix Digit"&gt;A decimal digit: <c>\p{gc=Decimal_Number</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Alnum"&gt;<c>\p{Alnum</c>}&lt;/th&gt;
                &lt;td headers="matches posix Alnum"&gt;An alphanumeric character:<c>[\p{Alpha</c>\p{Digit}]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Punct"&gt;<c>\p{Punct</c>}&lt;/th&gt;
                &lt;td headers="matches posix Punct"&gt;Punctuation: <c>\p{IsPunctuation</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Graph"&gt;<c>\p{Graph</c>}&lt;/th&gt;
                &lt;td headers="matches posix Graph"&gt;A visible character:
                <c>[^p{space</c>\p{gc=Control}\p{gc=Surrogate}\p{gc=Unassigned}]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Print"&gt;<c>\p{Print</c>}&lt;/th&gt;
                &lt;td headers="matches posix Print"&gt;A printable character: <c>[\p{Graph</c>\p{Blank}&amp;&amp;[^\p{Cntrl}]]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Blank"&gt;<c>\p{Blank</c>}&lt;/th&gt;
                &lt;td headers="matches posix Blank"&gt;A space or a tab: <c>[\p{gc=Space_Separator</c>\N{CHARACTER TABULATION}]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Cntrl"&gt;<c>\p{Cntrl</c>}&lt;/th&gt;
                &lt;td headers="matches posix Cntrl"&gt;A control character: <c>\p{gc=Control</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="XDigit"&gt;<c>\p{XDigit</c>}&lt;/th&gt;
                &lt;td headers="matches posix XDigit"&gt;A hexadecimal digit: <c>[\p{gc=Decimal_Number</c>\p{IsHex_Digit}]}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Space"&gt;<c>\p{Space</c>}&lt;/th&gt;
                &lt;td headers="matches posix Space"&gt;A whitespace character: <c>\p{IsWhite_Space</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="PosixCompatible"&gt;POSIX-Compatible expression&lt;/th&gt;
                &lt;td headers="matches posix PosixCompatible"&gt;See <see href="http://www.unicode.org/reports/tr18/#Compatibility_Properties">Unicode documentation</see>&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="java"&gt;java.lang.Character classes (simple java character type)&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="javaLowerCase"&gt;<c>\p{javaLowerCase</c>}&lt;/th&gt;
                &lt;td headers="matches java javaLowerCase"&gt;Equivalent to java.lang.Character.isLowerCase()&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="javaUpperCase"&gt;<c>\p{javaUpperCase</c>}&lt;/th&gt;
                &lt;td headers="matches java javaUpperCase"&gt;Equivalent to java.lang.Character.isUpperCase()&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="javaWhitespace"&gt;<c>\p{javaWhitespace</c>}&lt;/th&gt;
                &lt;td headers="matches java javaWhitespace"&gt;Equivalent to java.lang.Character.isWhitespace()&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="javaMirrored"&gt;<c>\p{javaMirrored</c>}&lt;/th&gt;
                &lt;td headers="matches java javaMirrored"&gt;Equivalent to java.lang.Character.isMirrored()&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px"  id="unicode"&gt;Classes for Unicode scripts, blocks, categories and binary properties&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="IsLatin"&gt;<c>\p{IsLatin</c>}&lt;/th&gt;
                &lt;td headers="matches unicode IsLatin"&gt;A Latin&amp;nbsp;script character (script)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="InGreek"&gt;<c>\p{InGreek</c>}&lt;/th&gt;
                &lt;td headers="matches unicode InGreek"&gt;A character in the Greek&amp;nbsp;block (block)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Lu"&gt;<c>\p{Lu</c>}&lt;/th&gt;
                &lt;td headers="matches unicode Lu"&gt;An uppercase letter (category)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="IsAlphabetic"&gt;<c>\p{IsAlphabetic</c>}&lt;/th&gt;
                &lt;td headers="matches unicode IsAlphabetic"&gt;An alphabetic character (binary property)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="Sc"&gt;<c>\p{Sc</c>}&lt;/th&gt;
                &lt;td headers="matches unicode Sc"&gt;A currency symbol&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="not_InGreek"&gt;<c>\P{InGreek</c>}&lt;/th&gt;
                &lt;td headers="matches unicode not_InGreek"&gt;Any character except one in the Greek block (negation)&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="not_uppercase"&gt;<c>[\p{L</c>&amp;&amp;[^\p{Lu}]]}&lt;/th&gt;
                &lt;td headers="matches unicode not_uppercase"&gt;Any letter except an uppercase letter (subtraction)&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="bounds"&gt;Boundary matchers&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="begin_line"&gt;<c>^</c>&lt;/th&gt;
                &lt;td headers="matches bounds begin_line"&gt;The beginning of a line&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="end_line"&gt;<c>$</c>&lt;/th&gt;
                &lt;td headers="matches bounds end_line"&gt;The end of a line&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="word_boundary"&gt;<c>\b</c>&lt;/th&gt;
                &lt;td headers="matches bounds word_boundary"&gt;A word boundary&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_word_boundary"&gt;<c>\B</c>&lt;/th&gt;
                &lt;td headers="matches bounds non_word_boundary"&gt;A non-word boundary&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="begin_input"&gt;<c>\A</c>&lt;/th&gt;
                &lt;td headers="matches bounds begin_input"&gt;The beginning of the input&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="end_prev_match"&gt;<c>\G</c>&lt;/th&gt;
                &lt;td headers="matches bounds end_prev_match"&gt;The end of the previous match&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="end_input_except_term"&gt;<c>\Z</c>&lt;/th&gt;
                &lt;td headers="matches bounds end_input_except_term"&gt;The end of the input but for the final
                    terminator, if&amp;nbsp;any&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="end_input"&gt;<c>\z</c>&lt;/th&gt;
                &lt;td headers="matches bounds end_input"&gt;The end of the input&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="linebreak"&gt;Linebreak matcher&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="any_unicode_linebreak"&gt;<c>\R</c>&lt;/th&gt;
                &lt;td headers="matches linebreak any_unicode_linebreak"&gt;Any Unicode linebreak sequence, is equivalent to
                <c>&amp;#92;u000D&amp;#92;u000A|[&amp;#92;u000A&amp;#92;u000B&amp;#92;u000C&amp;#92;u000D&amp;#92;u0085&amp;#92;u2028&amp;#92;u2029]
                </c>&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="grapheme"&gt;Unicode Extended Grapheme matcher&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="grapheme_any"&gt;<c>\X</c>&lt;/th&gt;
                &lt;td headers="matches grapheme grapheme_any"&gt;Any Unicode extended grapheme cluster&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="greedy"&gt;Greedy quantifiers&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_once_or_not"&gt;<i>X</i><c>?</c>&lt;/th&gt;
                &lt;td headers="matches greedy greedy_once_or_not"&gt;<i>X</i>, once or not at all&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_zero_or_more"&gt;<i>X</i><c>*</c>&lt;/th&gt;
                &lt;td headers="matches greedy greedy_zero_or_more"&gt;<i>X</i>, zero or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_one_or_more"&gt;<i>X</i><c>+</c>&lt;/th&gt;
                &lt;td headers="matches greedy greedy_one_or_more"&gt;<i>X</i>, one or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_exactly"&gt;<i>X</i><c>{</c><i>n</i><c>}</c>&lt;/th&gt;
                &lt;td headers="matches greedy greedy_exactly"&gt;<i>X</i>, exactly <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_at_least"&gt;<i>X</i><c>{</c><i>n</i><c>,</c>}&lt;/th&gt;
                &lt;td headers="matches greedy greedy_at_least"&gt;<i>X</i>, at least <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="greedy_at_least_up_to"&gt;<i>X</i><c>{</c><i>n</i><c>,</c><i>m</i><c>}</c>&lt;/th&gt;
                &lt;td headers="matches greedy greedy_at_least_up_to"&gt;<i>X</i>, at least <i>n</i> but not more than <i>m</i> times&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="reluc"&gt;Reluctant quantifiers&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_once_or_not"&gt;<i>X</i><c>??</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_once_or_not"&gt;<i>X</i>, once or not at all&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_zero_or_more"&gt;<i>X</i><c>*?</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_zero_or_more"&gt;<i>X</i>, zero or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_one_or_more"&gt;<i>X</i><c>+?</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_one_or_more"&gt;<i>X</i>, one or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_exactly"&gt;<i>X</i><c>{</c><i>n</i><c>}?</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_exactly"&gt;<i>X</i>, exactly <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_at_least"&gt;<i>X</i><c>{</c><i>n</i><c>,}?</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_at_least"&gt;<i>X</i>, at least <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="reluc_at_least_up_to"&gt;<i>X</i><c>{</c><i>n</i><c>,</c><i>m</i><c>}?</c>&lt;/th&gt;
                &lt;td headers="matches reluc reluc_at_least_up_to"&gt;<i>X</i>, at least <i>n</i> but not more than <i>m</i> times&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="poss"&gt;Possessive quantifiers&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_once_or_not"&gt;<i>X</i><c>?+</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_once_or_not"&gt;<i>X</i>, once or not at all&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_zero_or_more"&gt;<i>X</i><c>*+</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_zero_or_more"&gt;<i>X</i>, zero or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_one_or_more"&gt;<i>X</i><c>++</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_one_or_more"&gt;<i>X</i>, one or more times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_exactly"&gt;<i>X</i><c>{</c><i>n</i><c>}+</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_exactly"&gt;<i>X</i>, exactly <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_at_least"&gt;<i>X</i><c>{</c><i>n</i><c>,}+</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_at_least"&gt;<i>X</i>, at least <i>n</i> times&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="poss_at_least_up_to"&gt;<i>X</i><c>{</c><i>n</i><c>,</c><i>m</i><c>}+</c>&lt;/th&gt;
                &lt;td headers="matches poss poss_at_least_up_to"&gt;<i>X</i>, at least <i>n</i> but not more than <i>m</i> times&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="logical"&gt;Logical operators&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="concat"&gt;<i>XY</i>&lt;/th&gt;
                &lt;td headers="matches logical concat"&gt;<i>X</i> followed by <i>Y</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="alternate"&gt;<i>X</i><c>|</c><i>Y</i>&lt;/th&gt;
                &lt;td headers="matches logical alternate"&gt;Either <i>X</i> or <i>Y</i>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="group"&gt;<c>(</c><i>X</i><c>)</c>&lt;/th&gt;
                &lt;td headers="matches logical group"&gt;X, as a capturing group&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="backref"&gt;Back references&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="back_nth"&gt;<c>\</c><i>n</i>&lt;/th&gt;
                &lt;td headers="matches backref back_nth"&gt;Whatever the <i>n</i>&lt;sup&gt;th&lt;/sup&gt;
                capturing group matched&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="back_named"&gt;<c>\</c><i>k</i>&amp;lt;<i>name</i>&amp;gt;&lt;/th&gt;
                &lt;td headers="matches backref back_named"&gt;Whatever the
                named-capturing group "name" matched. Only available for API 26 or above&lt;/td&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="quote"&gt;Quotation&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="quote_follow"&gt;<c>\</c>&lt;/th&gt;
                &lt;td headers="matches quote quote_follow"&gt;Nothing, but quotes the following character&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="quote_begin"&gt;<c>\Q</c>&lt;/th&gt;
                &lt;td headers="matches quote quote_begin"&gt;Nothing, but quotes all characters until <c>\E</c>&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="quote_end"&gt;<c>\E</c>&lt;/th&gt;
                &lt;td headers="matches quote quote_end"&gt;Nothing, but ends quoting started by <c>\Q</c>&lt;/td&gt;&lt;/tr&gt;
                &lt;!-- Metachars: !$()*+.&lt;&gt;?[\]^{|} --&gt;
            
            &lt;tr&gt;&lt;th colspan="2" style="padding-top:20px" id="special"&gt;Special constructs (named-capturing and non-capturing)&lt;/th&gt;&lt;/tr&gt;
            
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="named_group"&gt;<c>(?&amp;lt;&lt;a href="#groupname"&gt;name&lt;/a&gt;&amp;gt;</c><i>X</i><c>)</c>&lt;/th&gt;
                &lt;td headers="matches special named_group"&gt;<i>X</i>, as a named-capturing group. Only available for API 26 or above.&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_capture_group"&gt;<c>(?:</c><i>X</i><c>)</c>&lt;/th&gt;
                &lt;td headers="matches special non_capture_group"&gt;<i>X</i>, as a non-capturing group&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="flags"&gt;<c>(?idmsux-idmsux)&amp;nbsp;</c>&lt;/th&gt;
            sU
            on - off&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="non_capture_group_flags"&gt;<c>(?idmsuxU-idmsuxU:</c><i>X</i><c>)</c>&amp;nbsp;&amp;nbsp;&lt;/th&gt;
                &lt;td headers="matches special non_capture_group_flags"&gt;<i>X</i>, as a non-capturing group with the
                    given flags du&lt;/a &gt;
            U on - off&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="pos_lookahead"&gt;&lt;c&gt;(?=&lt;/c&gt;&lt;i&gt;X&lt;/i&gt;&lt;c&gt;)&lt;/c&gt;&lt;/th&gt;
                &lt;td headers="matches special pos_lookahead"&gt;&lt;i&gt;X&lt;/i&gt;, via zero-width positive lookahead&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="neg_lookahead"&gt;&lt;c&gt;(?!&lt;/c&gt;&lt;i&gt;X&lt;/i&gt;&lt;c&gt;)&lt;/c&gt;&lt;/th&gt;
                &lt;td headers="matches special neg_lookahead"&gt;&lt;i&gt;X&lt;/i&gt;, via zero-width negative lookahead&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="pos_lookbehind"&gt;&lt;c&gt;(?&amp;lt;=&lt;/c&gt;&lt;i&gt;X&lt;/i&gt;&lt;c&gt;)&lt;/c&gt;&lt;/th&gt;
                &lt;td headers="matches special pos_lookbehind"&gt;&lt;i&gt;X&lt;/i&gt;, via zero-width positive lookbehind&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="neg_lookbehind"&gt;&lt;c&gt;(?&amp;lt;!&lt;/c&gt;&lt;i&gt;X&lt;/i&gt;&lt;c&gt;)&lt;/c&gt;&lt;/th&gt;
                &lt;td headers="matches special neg_lookbehind"&gt;&lt;i&gt;X&lt;/i&gt;, via zero-width negative lookbehind&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th style="vertical-align:top; font-weight:normal" id="indep_non_capture_group"&gt;&lt;c&gt;(?&amp;gt;&lt;/c&gt;&lt;i&gt;X&lt;/i&gt;&lt;c&gt;)&lt;/c&gt;&lt;/th&gt;
                &lt;td headers="matches special indep_non_capture_group"&gt;&lt;i&gt;X&lt;/i&gt;, as an independent, non-capturing group&lt;/td&gt;&lt;/tr&gt;
            
            &lt;/tbody&gt;
            &lt;/table&gt;
            
            &lt;hr&gt;
            
            
            &lt;h2&gt;"bs"&amp;gt;Backslashes, escapes, and quoting&lt;/h2&gt;
            
            </para>
      <para>The backslash character (<c>'\'</c>) serves to introduce escaped
            constructs, as defined in the table above, as well as to quote characters
            that otherwise would be interpreted as unescaped constructs.  Thus the
            expression <c>\\</c> matches a single backslash and <c>\{</c> matches a
            left brace.</para>
      <para>It is an error to use a backslash prior to any alphabetic character that
            does not denote an escaped construct; these are reserved for future
            extensions to the regular-expression language.  A backslash may be used
            prior to a non-alphabetic character regardless of whether that character is
            part of an unescaped construct.</para>
      <para>Backslashes within string literals in Java source code are interpreted
            as required by
            &lt;cite&gt;The Java Language Specification&lt;/cite&gt;
            as either Unicode escapes (section {</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/regex/Pattern" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="AsMatchPredicate">
      <MemberSignature Language="VB.NET" Value="Public Function AsMatchPredicate () As IPredicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::Functions::IPredicate ^ AsMatchPredicate();" />
      <MemberSignature Language="C#" Value="public Java.Util.Functions.IPredicate AsMatchPredicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Functions.IPredicate AsMatchPredicate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.AsMatchPredicate" />
      <MemberSignature Language="F#" Value="member this.AsMatchPredicate : unit -&gt; Java.Util.Functions.IPredicate" Usage="pattern.AsMatchPredicate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("asMatchPredicate", "()Ljava/util/function/Predicate;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("asMatchPredicate", "()Ljava/util/function/Predicate;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Functions.IPredicate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a predicate that tests if this pattern matches a given input string.</summary>
        <returns>The predicate which can be used for matching an input string
                     against this pattern.</returns>
        <remarks>
          <para>Creates a predicate that tests if this pattern matches a given input string.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#asMatchPredicate()" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.asMatchPredicate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPredicate">
      <MemberSignature Language="VB.NET" Value="Public Function AsPredicate () As IPredicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::Functions::IPredicate ^ AsPredicate();" />
      <MemberSignature Language="C#" Value="public Java.Util.Functions.IPredicate AsPredicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Functions.IPredicate AsPredicate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.AsPredicate" />
      <MemberSignature Language="F#" Value="member this.AsPredicate : unit -&gt; Java.Util.Functions.IPredicate" Usage="pattern.AsPredicate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("asPredicate", "()Ljava/util/function/Predicate;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("asPredicate", "()Ljava/util/function/Predicate;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Functions.IPredicate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a predicate that tests if this pattern is found in a given input
            string.</summary>
        <returns>The predicate which can be used for finding a match on a
                     subsequence of a string</returns>
        <remarks>
          <para>Creates a predicate that tests if this pattern is found in a given input
            string.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#asPredicate()" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.asPredicate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanonEq">
      <MemberSignature Language="VB.NET" Value="Public Const CanonEq As RegexOptions  = 128" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions CanonEq = 128;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions CanonEq = 128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions CanonEq = (128)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.CanonEq" />
      <MemberSignature Language="F#" Value="val mutable CanonEq : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.CanonEq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CANON_EQ")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CANON_EQ")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>This flag is not supported on Android.</summary>
        <remarks>
          <para>This flag is not supported on Android.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#CANON_EQ" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.CANON_EQ</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CaseInsensitive">
      <MemberSignature Language="VB.NET" Value="Public Const CaseInsensitive As RegexOptions  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions CaseInsensitive = 2;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions CaseInsensitive = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions CaseInsensitive = (2)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.CaseInsensitive" />
      <MemberSignature Language="F#" Value="val mutable CaseInsensitive : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.CaseInsensitive" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CASE_INSENSITIVE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CASE_INSENSITIVE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Enables case-insensitive matching.</summary>
        <remarks>
          <para>Enables case-insensitive matching.</para>
          <para>Case-insensitive matching is Unicode-aware on Android.</para>
          <para>Case-insensitive matching can also be enabled via the embedded flag
            expression&amp;nbsp;<c>(?i)</c>.</para>
          <para>Specifying this flag may impose a slight performance penalty.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#CASE_INSENSITIVE" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.CASE_INSENSITIVE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="VB.NET" Value="Public Const Comments As RegexOptions  = 4" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions Comments = 4;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Comments = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Comments = (4)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.Comments" />
      <MemberSignature Language="F#" Value="val mutable Comments : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.Comments" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("COMMENTS")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("COMMENTS")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Permits whitespace and comments in pattern.</summary>
        <remarks>
          <para>Permits whitespace and comments in pattern.</para>
          <para>In this mode, whitespace is ignored, and embedded comments starting
            with <c>#</c> are ignored until the end of a line.</para>
          <para>Comments mode can also be enabled via the embedded flag
            expression&amp;nbsp;<c>(?x)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#COMMENTS" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.COMMENTS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compile (regex As String) As Pattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::Regex::Pattern ^ Compile(System::String ^ regex);" />
      <MemberSignature Language="C#" Value="public static Java.Util.Regex.Pattern Compile (string regex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Regex.Pattern Compile(string regex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Compile(System.String)" />
      <MemberSignature Language="F#" Value="static member Compile : string -&gt; Java.Util.Regex.Pattern" Usage="Java.Util.Regex.Pattern.Compile regex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Pattern</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regex">The expression to be compiled</param>
        <summary>Compiles the given regular expression into a pattern.</summary>
        <returns>the given regular expression compiled into a pattern</returns>
        <remarks>
          <para>Compiles the given regular expression into a pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#compile(java.lang.String)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.compile(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compile (regex As String, flags As RegexOptions) As Pattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::Regex::Pattern ^ Compile(System::String ^ regex, Java::Util::Regex::RegexOptions flags);" />
      <MemberSignature Language="C#" Value="public static Java.Util.Regex.Pattern Compile (string regex, Java.Util.Regex.RegexOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Regex.Pattern Compile(string regex, valuetype Java.Util.Regex.RegexOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Compile(System.String,Java.Util.Regex.RegexOptions)" />
      <MemberSignature Language="F#" Value="static member Compile : string * Java.Util.Regex.RegexOptions -&gt; Java.Util.Regex.Pattern" Usage="Java.Util.Regex.Pattern.Compile (regex, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compile", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compile", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Pattern</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
        <Parameter Name="flags" Type="Java.Util.Regex.RegexOptions">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="regex">The expression to be compiled</param>
        <param name="flags">Match flags, a bit mask that may include
                    <c>#CASE_INSENSITIVE</c>, <c>#MULTILINE</c>, <c>#DOTALL</c>,
                    <c>#UNICODE_CASE</c>, <c>#UNIX_LINES</c>, <c>#LITERAL</c>,
                    and <c>#COMMENTS</c></param>
        <summary>Compiles the given regular expression into a pattern with the given
            flags.</summary>
        <returns>the given regular expression compiled into a pattern with the given flags</returns>
        <remarks>
          <para>Compiles the given regular expression into a pattern with the given
            flags.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#compile(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.compile(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Regex.PatternSyntaxException">if the regular expression is syntactically incorrect.</exception>
        <altmember cref="F:Java.Util.Regex.Pattern.CanonEq" />
        <altmember cref="F:Java.Util.Regex.Pattern.CaseInsensitive" />
        <altmember cref="F:Java.Util.Regex.Pattern.Comments" />
        <altmember cref="F:Java.Util.Regex.Pattern.Dotall" />
        <altmember cref="F:Java.Util.Regex.Pattern.Literal" />
        <altmember cref="F:Java.Util.Regex.Pattern.Multiline" />
        <altmember cref="F:Java.Util.Regex.Pattern.UnicodeCase" />
        <altmember cref="F:Java.Util.Regex.Pattern.UnixLines" />
      </Docs>
    </Member>
    <Member MemberName="Dotall">
      <MemberSignature Language="VB.NET" Value="Public Const Dotall As RegexOptions  = 32" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions Dotall = 32;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Dotall = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Dotall = (32)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.Dotall" />
      <MemberSignature Language="F#" Value="val mutable Dotall : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.Dotall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DOTALL")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DOTALL")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>Enables dotall mode.</summary>
        <remarks>
          <para>Enables dotall mode.</para>
          <para>In dotall mode, the expression <c>.</c> matches any character,
            including a line terminator.  By default this expression does not match
            line terminators.</para>
          <para>Dotall mode can also be enabled via the embedded flag
            expression&amp;nbsp;<c>(?s)</c>.  (The <c>s</c> is a mnemonic for
            "single-line" mode, which is what this is called in Perl.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#DOTALL" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.DOTALL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="VB.NET" Value="Public Function Flags () As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::Regex::RegexOptions Flags();" />
      <MemberSignature Language="C#" Value="public Java.Util.Regex.RegexOptions Flags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Java.Util.Regex.RegexOptions Flags() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Flags" />
      <MemberSignature Language="F#" Value="member this.Flags : unit -&gt; Java.Util.Regex.RegexOptions" Usage="pattern.Flags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("flags", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("flags", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this pattern's match flags.</summary>
        <returns>The match flags specified when this pattern was compiled</returns>
        <remarks>
          <para>Returns this pattern's match flags.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#flags()" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.flags()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvokePattern">
      <MemberSignature Language="VB.NET" Value="Public Function InvokePattern () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ InvokePattern();" />
      <MemberSignature Language="C#" Value="public string InvokePattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string InvokePattern() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.InvokePattern" />
      <MemberSignature Language="F#" Value="member this.InvokePattern : unit -&gt; string" Usage="pattern.InvokePattern " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pattern", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pattern", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the regular expression from which this pattern was compiled.</summary>
        <returns>The source of this pattern</returns>
        <remarks>
          <para>Returns the regular expression from which this pattern was compiled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#pattern()" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.pattern()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Regex.Pattern.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Regex.Pattern.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="VB.NET" Value="Public Const Literal As RegexOptions  = 16" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions Literal = 16;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Literal = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Literal = (16)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.Literal" />
      <MemberSignature Language="F#" Value="val mutable Literal : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.Literal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LITERAL")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("LITERAL")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Enables literal parsing of the pattern.</summary>
        <remarks>
          <para>Enables literal parsing of the pattern.</para>
          <para>When this flag is specified then the input string that specifies
            the pattern is treated as a sequence of literal characters.
            Metacharacters or escape sequences in the input sequence will be
            given no special meaning.</para>
          <para>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on
            matching when used in conjunction with this flag. The other flags
            become superfluous.</para>
          <para>There is no embedded flag character for enabling literal parsing.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#LITERAL" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.LITERAL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Matcher">
      <MemberSignature Language="VB.NET" Value="Public Function Matcher (input As ICharSequence) As Matcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::Regex::Matcher ^ Matcher(Java::Lang::ICharSequence ^ input);" />
      <MemberSignature Language="C#" Value="public Java.Util.Regex.Matcher Matcher (Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.Matcher Matcher(class Java.Lang.ICharSequence input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Matcher(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="member this.Matcher : Java.Lang.ICharSequence -&gt; Java.Util.Regex.Matcher" Usage="pattern.Matcher input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Matcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be matched</param>
        <summary>Creates a matcher that will match the given input against this pattern.</summary>
        <returns>A new matcher for this pattern</returns>
        <remarks>
          <para>Creates a matcher that will match the given input against this pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#matcher(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.matcher(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Matcher">
      <MemberSignature Language="VB.NET" Value="Public Function Matcher (input As String) As Matcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::Regex::Matcher ^ Matcher(System::String ^ input);" />
      <MemberSignature Language="C#" Value="public Java.Util.Regex.Matcher Matcher (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.Matcher Matcher(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Matcher(System.String)" />
      <MemberSignature Language="F#" Value="member this.Matcher : string -&gt; Java.Util.Regex.Matcher" Usage="pattern.Matcher input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Matcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be matched</param>
        <summary>Creates a matcher that will match the given input against this pattern.</summary>
        <returns>A new matcher for this pattern</returns>
        <remarks>
          <para>Creates a matcher that will match the given input against this pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#matcher(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.matcher(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (regex As String, input As ICharSequence) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Matches(System::String ^ regex, Java::Lang::ICharSequence ^ input);" />
      <MemberSignature Language="C#" Value="public static bool Matches (string regex, Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Matches(string regex, class Java.Lang.ICharSequence input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Matches(System.String,Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="static member Matches : string * Java.Lang.ICharSequence -&gt; bool" Usage="Java.Util.Regex.Pattern.Matches (regex, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("matches", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("matches", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="regex">The expression to be compiled</param>
        <param name="input">The character sequence to be matched</param>
        <summary>Compiles the given regular expression and attempts to match the given
            input against it.</summary>
        <returns>whether or not the regular expression matches on the input</returns>
        <remarks>
          <para>Compiles the given regular expression and attempts to match the given
            input against it.</para>
          <para>An invocation of this convenience method of the form
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">Pattern.matches(regex, input);</code>
          <para>&lt;/blockquote&gt;
            
            behaves in exactly the same way as the expression
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">Pattern.compile(regex).matcher(input).matches()</code>
          <para>&lt;/blockquote&gt;</para>
          <para>If a pattern is to be used multiple times, compiling it once and reusing
            it will be more efficient than invoking this method each time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#matches(java.lang.String,%20java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.matches(java.lang.String, java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Util.Regex.Pattern.Compile(System.String, Java.Util.Regex.RegexOptions)" />
        <altmember cref="M:Java.Util.Regex.Matcher.Matches" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Matches (regex As String, input As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Matches(System::String ^ regex, System::String ^ input);" />
      <MemberSignature Language="C#" Value="public static bool Matches (string regex, string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Matches(string regex, string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Matches(System.String,System.String)" />
      <MemberSignature Language="F#" Value="static member Matches : string * string -&gt; bool" Usage="Java.Util.Regex.Pattern.Matches (regex, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regex">The expression to be compiled</param>
        <param name="input">The character sequence to be matched</param>
        <summary>Compiles the given regular expression and attempts to match the given
            input against it.</summary>
        <returns>whether or not the regular expression matches on the input</returns>
        <remarks>
          <para>Compiles the given regular expression and attempts to match the given
            input against it.</para>
          <para>An invocation of this convenience method of the form
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">Pattern.matches(regex, input);</code>
          <para>&lt;/blockquote&gt;
            
            behaves in exactly the same way as the expression
            
            &lt;blockquote&gt;</para>
          <code lang="text/java">Pattern.compile(regex).matcher(input).matches()</code>
          <para>&lt;/blockquote&gt;</para>
          <para>If a pattern is to be used multiple times, compiling it once and reusing
            it will be more efficient than invoking this method each time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#matches(java.lang.String,%20java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.matches(java.lang.String, java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="VB.NET" Value="Public Const Multiline As RegexOptions  = 8" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions Multiline = 8;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions Multiline = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions Multiline = (8)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.Multiline" />
      <MemberSignature Language="F#" Value="val mutable Multiline : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.Multiline" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MULTILINE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MULTILINE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Enables multiline mode.</summary>
        <remarks>
          <para>Enables multiline mode.</para>
          <para>In multiline mode the expressions <c>^</c> and <c>$</c> match
            just after or just before, respectively, a line terminator or the end of
            the input sequence.  By default these expressions only match at the
            beginning and the end of the entire input sequence.</para>
          <para>Multiline mode can also be enabled via the embedded flag
            expression&amp;nbsp;<c>(?m)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#MULTILINE" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.MULTILINE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Quote (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Quote(System::String ^ s);" />
      <MemberSignature Language="C#" Value="public static string Quote (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Quote(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Quote(System.String)" />
      <MemberSignature Language="F#" Value="static member Quote : string -&gt; string" Usage="Java.Util.Regex.Pattern.Quote s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("quote", "(Ljava/lang/String;)Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("quote", "(Ljava/lang/String;)Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to be literalized</param>
        <summary>Returns a literal pattern <c>String</c> for the specified
            <c>String</c>.</summary>
        <returns>A literal string replacement</returns>
        <remarks>
          <para>Returns a literal pattern <c>String</c> for the specified
            <c>String</c>.</para>
          <para>This method produces a <c>String</c> that can be used to
            create a <c>Pattern</c> that would match the string
            <c>s</c> as if it were a literal pattern.</para>
          <para>Metacharacters
            or escape sequences in the input sequence will be given no special
            meaning.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#quote(java.lang.String)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.quote(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As ICharSequence) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(Java::Lang::ICharSequence ^ input);" />
      <MemberSignature Language="C#" Value="public string[] Split (Java.Lang.ICharSequence input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(class Java.Lang.ICharSequence input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Split(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="member this.Split : Java.Lang.ICharSequence -&gt; string[]" Usage="pattern.Split input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("split", "(Ljava/lang/CharSequence;)[Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("split", "(Ljava/lang/CharSequence;)[Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be split</param>
        <summary>Splits the given input sequence around matches of this pattern.</summary>
        <returns>The array of strings computed by splitting the input
                     around matches of this pattern</returns>
        <remarks>
          <para>Splits the given input sequence around matches of this pattern.</para>
          <para>This method works as if by invoking the two-argument <c>#split(java.lang.CharSequence, int) split</c> method with the given input
            sequence and a limit argument of zero.  Trailing empty strings are
            therefore not included in the resulting array.</para>
          <para>The input <c>"boo:and:foo"</c>, for example, yields the following
            results with these expressions:
            
            &lt;table class="plain" style="margin-left:2em"&gt;
            &lt;caption style="display:none"&gt;Split examples showing regex and result&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;
             &lt;th scope="col"&gt;Regex&lt;/th&gt;
             &lt;th scope="col"&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;&lt;th scope="row" style="text-weight:normal"&gt;:&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th scope="row" style="text-weight:normal"&gt;o&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#split(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.split(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input);" />
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Split(System.String)" />
      <MemberSignature Language="F#" Value="member this.Split : string -&gt; string[]" Usage="pattern.Split input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be split</param>
        <summary>Splits the given input sequence around matches of this pattern.</summary>
        <returns>The array of strings computed by splitting the input
                     around matches of this pattern</returns>
        <remarks>
          <para>Splits the given input sequence around matches of this pattern.</para>
          <para>This method works as if by invoking the two-argument <c>#split(java.lang.CharSequence, int) split</c> method with the given input
            sequence and a limit argument of zero.  Trailing empty strings are
            therefore not included in the resulting array.</para>
          <para>The input <c>"boo:and:foo"</c>, for example, yields the following
            results with these expressions:
            
            &lt;table class="plain" style="margin-left:2em"&gt;
            &lt;caption style="display:none"&gt;Split examples showing regex and result&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;
             &lt;th scope="col"&gt;Regex&lt;/th&gt;
             &lt;th scope="col"&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;&lt;th scope="row" style="text-weight:normal"&gt;:&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th scope="row" style="text-weight:normal"&gt;o&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#split(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.split(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As ICharSequence, limit As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(Java::Lang::ICharSequence ^ input, int limit);" />
      <MemberSignature Language="C#" Value="public string[] Split (Java.Lang.ICharSequence input, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(class Java.Lang.ICharSequence input, int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Split(Java.Lang.ICharSequence,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Split : Java.Lang.ICharSequence * int -&gt; string[]" Usage="pattern.Split (input, limit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("split", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("split", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Java.Lang.ICharSequence" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be split</param>
        <param name="limit">The result threshold, as described above</param>
        <summary>Splits the given input sequence around matches of this pattern.</summary>
        <returns>The array of strings computed by splitting the input
                     around matches of this pattern</returns>
        <remarks>
          <para>Splits the given input sequence around matches of this pattern.</para>
          <para>The array returned by this method contains each substring of the
            input sequence that is terminated by another subsequence that matches
            this pattern or is terminated by the end of the input sequence.  The
            substrings in the array are in the order in which they occur in the
            input. If this pattern does not match any subsequence of the input then
            the resulting array has just one element, namely the input sequence in
            string form.</para>
          <para>When there is a positive-width match at the beginning of the input
            sequence then an empty leading substring is included at the beginning
            of the resulting array. A zero-width match at the beginning however
            can only produce such an empty leading substring for apps running on or
            targeting API versions &lt;= 28.</para>
          <para>The <c>limit</c> parameter controls the number of times the
            pattern is applied and therefore affects the length of the resulting
            array.
            &lt;ul&gt;
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is positive then the pattern will be applied
               at most <i>limit</i>&amp;nbsp;-&amp;nbsp;1 times, the array's length will be
               no greater than <i>limit</i>, and the array's last entry will contain
               all input beyond the last matched delimiter.</para>
          <para>&lt;/li&gt;
            
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is zero then the pattern will be applied as
               many times as possible, the array can have any length, and trailing
               empty strings will be discarded.</para>
          <para>&lt;/li&gt;
            
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is negative then the pattern will be applied
               as many times as possible and the array can have any length.</para>
          <para>&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>The input <c>"boo:and:foo"</c>, for example, yields the following
            results with these parameters:
            
            &lt;table class="plain" style="margin-left:2em;"&gt;
            &lt;caption style="display:none"&gt;Split example showing regex, limit, and result&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;
                &lt;th scope="col"&gt;Regex&lt;/th&gt;
                &lt;th scope="col"&gt;Limit&lt;/th&gt;
                &lt;th scope="col"&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;&lt;th scope="row" rowspan="3" style="font-weight:normal"&gt;:&lt;/th&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;2&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and:foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- : --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;5&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- : --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;-2&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th scope="row" rowspan="3" style="font-weight:normal"&gt;o&lt;/th&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;5&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f", "", ""</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- o --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;-2&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f", "", ""</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- o --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;0&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#split(java.lang.CharSequence,%20int)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.split(java.lang.CharSequence, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="VB.NET" Value="Public Function Split (input As String, limit As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(System::String ^ input, int limit);" />
      <MemberSignature Language="C#" Value="public string[] Split (string input, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Regex.Pattern.Split(System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Split : string * int -&gt; string[]" Usage="pattern.Split (input, limit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">The character sequence to be split</param>
        <param name="limit">The result threshold, as described above</param>
        <summary>Splits the given input sequence around matches of this pattern.</summary>
        <returns>The array of strings computed by splitting the input
                     around matches of this pattern</returns>
        <remarks>
          <para>Splits the given input sequence around matches of this pattern.</para>
          <para>The array returned by this method contains each substring of the
            input sequence that is terminated by another subsequence that matches
            this pattern or is terminated by the end of the input sequence.  The
            substrings in the array are in the order in which they occur in the
            input. If this pattern does not match any subsequence of the input then
            the resulting array has just one element, namely the input sequence in
            string form.</para>
          <para>When there is a positive-width match at the beginning of the input
            sequence then an empty leading substring is included at the beginning
            of the resulting array. A zero-width match at the beginning however
            can only produce such an empty leading substring for apps running on or
            targeting API versions &lt;= 28.</para>
          <para>The <c>limit</c> parameter controls the number of times the
            pattern is applied and therefore affects the length of the resulting
            array.
            &lt;ul&gt;
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is positive then the pattern will be applied
               at most <i>limit</i>&amp;nbsp;-&amp;nbsp;1 times, the array's length will be
               no greater than <i>limit</i>, and the array's last entry will contain
               all input beyond the last matched delimiter.</para>
          <para>&lt;/li&gt;
            
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is zero then the pattern will be applied as
               many times as possible, the array can have any length, and trailing
               empty strings will be discarded.</para>
          <para>&lt;/li&gt;
            
               &lt;li&gt;</para>
          <para>If the <i>limit</i> is negative then the pattern will be applied
               as many times as possible and the array can have any length.</para>
          <para>&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>The input <c>"boo:and:foo"</c>, for example, yields the following
            results with these parameters:
            
            &lt;table class="plain" style="margin-left:2em;"&gt;
            &lt;caption style="display:none"&gt;Split example showing regex, limit, and result&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;
                &lt;th scope="col"&gt;Regex&lt;/th&gt;
                &lt;th scope="col"&gt;Limit&lt;/th&gt;
                &lt;th scope="col"&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;&lt;th scope="row" rowspan="3" style="font-weight:normal"&gt;:&lt;/th&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;2&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and:foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- : --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;5&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- : --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;-2&lt;/th&gt;
                &lt;td&gt;<c>{ "boo", "and", "foo"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th scope="row" rowspan="3" style="font-weight:normal"&gt;o&lt;/th&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;5&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f", "", ""</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- o --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;-2&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f", "", ""</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;!-- o --&gt;
                &lt;th scope="row" style="font-weight:normal; text-align:right; padding-right:1em"&gt;0&lt;/th&gt;
                &lt;td&gt;<c>{ "b", "", ":and:f"</c>}&lt;/td&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#split(java.lang.CharSequence,%20int)" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.split(java.lang.CharSequence, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Regex.Pattern.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Regex.Pattern.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Regex.Pattern.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Regex.Pattern.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnicodeCase">
      <MemberSignature Language="VB.NET" Value="Public Const UnicodeCase As RegexOptions  = 64" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions UnicodeCase = 64;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions UnicodeCase = 64;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions UnicodeCase = (64)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.UnicodeCase" />
      <MemberSignature Language="F#" Value="val mutable UnicodeCase : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.UnicodeCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("UNICODE_CASE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("UNICODE_CASE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>Enables Unicode-aware case folding.</summary>
        <remarks>
          <para>Enables Unicode-aware case folding. This flag is ignoredon Android.
            When <c>#CASE_INSENSITIVE</c> flag is provided, case-insensitive
            matching is always done in a manner consistent with the Unicode Standard.</para>
          <para>The embedded flag &amp;nbsp;<c>(?u)</c> is ignored.</para>
          <para>Specifying this flag may impose a performance penalty.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#UNICODE_CASE" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.UNICODE_CASE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeCharacterClass">
      <MemberSignature Language="VB.NET" Value="Public Const UnicodeCharacterClass As RegexOptions  = 256" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions UnicodeCharacterClass = 256;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions UnicodeCharacterClass = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions UnicodeCharacterClass = (256)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.UnicodeCharacterClass" />
      <MemberSignature Language="F#" Value="val mutable UnicodeCharacterClass : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.UnicodeCharacterClass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("UNICODE_CHARACTER_CLASS", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("UNICODE_CHARACTER_CLASS", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>This flag is not supported on Android, and Unicode character classes are always
            used.</summary>
        <remarks>
          <para>This flag is not supported on Android, and Unicode character classes are always
            used.</para>
          <para>See the Unicode version of
            <i>Predefined character classes</i> and <i>POSIX character classes</i>
            are in conformance with
            <see href="http://www.unicode.org/reports/tr18/"><i>Unicode Technical
            Standard #18: Unicode Regular Expressions</i></see><i>Annex C: Compatibility Properties</i>.</para>
          <para />
          <para>Added in 1.7.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#UNICODE_CHARACTER_CLASS" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.UNICODE_CHARACTER_CLASS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnixLines">
      <MemberSignature Language="VB.NET" Value="Public Const UnixLines As RegexOptions  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: Java::Util::Regex::RegexOptions UnixLines = 1;" />
      <MemberSignature Language="C#" Value="public const Java.Util.Regex.RegexOptions UnixLines = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Java.Util.Regex.RegexOptions UnixLines = (1)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.Regex.Pattern.UnixLines" />
      <MemberSignature Language="F#" Value="val mutable UnixLines : Java.Util.Regex.RegexOptions" Usage="Java.Util.Regex.Pattern.UnixLines" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("UNIX_LINES")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("UNIX_LINES")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Java.Util.Regex.RegexOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.RegexOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Enables Unix lines mode.</summary>
        <remarks>
          <para>Enables Unix lines mode.</para>
          <para>In this mode, only the <c>'\n'</c> line terminator is recognized
            in the behavior of <c>.</c>, <c>^</c>, and <c>$</c>.</para>
          <para>Unix lines mode can also be enabled via the embedded flag
            expression&amp;nbsp;<c>(?d)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/regex/Pattern#UNIX_LINES" title="Reference documentation">Java documentation for <code>java.util.regex.Pattern.UNIX_LINES</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
