<Type Name="PrintDocumentAdapter" FullName="Android.Print.PrintDocumentAdapter">
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PrintDocumentAdapter&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintDocumentAdapter abstract : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public abstract class PrintDocumentAdapter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PrintDocumentAdapter extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Print.PrintDocumentAdapter" />
  <TypeSignature Language="F#" Value="type PrintDocumentAdapter = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/print/PrintDocumentAdapter", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/print/PrintDocumentAdapter", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Base class that provides the content of a document to be printed.</summary>
    <remarks>
      <para>Base class that provides the content of a document to be printed.
            
            &lt;h3&gt;Lifecycle&lt;/h3&gt;</para>
      <para>&lt;ul&gt;
            &lt;li&gt;
            Initially, you will receive a call to <c>#onStart()</c>. This callback
            can be used to allocate resources.
            &lt;/li&gt;
            &lt;li&gt;
            Next, you will get one or more calls to <c>#onLayout(PrintAttributes,
            PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle)</c> to
            inform you that the print attributes (page size, density, etc) changed
            giving you an opportunity to layout the content to match the new constraints.
            &lt;/li&gt;
            &lt;li&gt;
            After every call to <c>#onLayout(PrintAttributes, PrintAttributes,
            CancellationSignal, LayoutResultCallback, Bundle)</c>, you &lt;strong&gt;may&lt;/strong&gt; get
            a call to <c>#onWrite(PageRange[], ParcelFileDescriptor, CancellationSignal,
            WriteResultCallback)</c> asking you to write a PDF file with the content for
            specific pages.
            &lt;/li&gt;
            &lt;li&gt;
            Finally, you will receive a call to <c>#onFinish()</c>. You can use this
            callback to release resources allocated in <c>#onStart()</c>.
            &lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>The <c>#onStart()</c> callback is always the first call you will receive and
            is useful for doing one time setup or resource allocation before printing. You
            will not receive a subsequent call here.</para>
      <para>The <c>#onLayout(PrintAttributes, PrintAttributes, CancellationSignal,
            LayoutResultCallback, Bundle)</c> callback requires that you layout the content
            based on the current <c>PrintAttributes</c>. The execution of this method is
            not considered completed until you invoke one of the methods on the passed in
            callback instance. Hence, you will not receive a subsequent call to any other
            method of this class until the execution of this method is complete by invoking
            one of the callback methods.</para>
      <para>The <c>#onWrite(PageRange[], ParcelFileDescriptor, CancellationSignal,
            WriteResultCallback)</c> requires that you render and write the content of some
            pages to the provided destination. The execution of this method is not
            considered complete until you invoke one of the methods on the passed in
            callback instance. Hence, you will not receive a subsequent call to any other
            method of this class until the execution of this method is complete by invoking
            one of the callback methods. You will never receive a sequence of one or more
            calls to this method without a previous call to <c>#onLayout(PrintAttributes,
            PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle)</c>.</para>
      <para>The <c>#onFinish()</c> callback is always the last call you will receive and
            is useful for doing one time cleanup or resource deallocation after printing.
            You will not receive a subsequent call here.</para>
      <para>&lt;/p&gt;
            &lt;h3&gt;Implementation&lt;/h3&gt;</para>
      <para>The APIs defined in this class are designed to enable doing part or all
            of the work on an arbitrary thread. For example, if the printed content
            does not depend on the UI state, i.e. on what is shown on the screen, then
            you can offload the entire work on a dedicated thread, thus making your
            application interactive while the print work is being performed. Note that
            while your activity is covered by the system print UI and a user cannot
            interact with it, doing the printing work on the main application thread
            may affect the performance of your other application components as they
            are also executed on that thread.</para>
      <para>You can also do work on different threads, for example if you print UI
            content, you can handle <c>#onStart()</c> and <c>#onLayout(PrintAttributes,
            PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle)</c> on
            the UI thread (assuming onStart initializes resources needed for layout).
            This will ensure that the UI does not change while you are laying out the
            printed content. Then you can handle <c>#onWrite(PageRange[], ParcelFileDescriptor,
            CancellationSignal, WriteResultCallback)</c> and <c>#onFinish()</c> on another
            thread. This will ensure that the main thread is busy for a minimal amount of
            time. Also this assumes that you will generate the printed content in
            <c>#onLayout(PrintAttributes, PrintAttributes, CancellationSignal,
            LayoutResultCallback, Bundle)</c> which is not mandatory. If you use multiple
            threads, you are responsible for proper synchronization.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintDocumentAdapter();" />
      <MemberSignature Language="C#" Value="public PrintDocumentAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PrintDocumentAdapter(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected PrintDocumentAdapter (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Print.PrintDocumentAdapter : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Print.PrintDocumentAdapter" Usage="new Android.Print.PrintDocumentAdapter (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraPrintPreview">
      <MemberSignature Language="VB.NET" Value="Public Const ExtraPrintPreview As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ExtraPrintPreview;" />
      <MemberSignature Language="C#" Value="public const string ExtraPrintPreview;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraPrintPreview" />
      <MemberSignature Language="DocId" Value="F:Android.Print.PrintDocumentAdapter.ExtraPrintPreview" />
      <MemberSignature Language="F#" Value="val mutable ExtraPrintPreview : string" Usage="Android.Print.PrintDocumentAdapter.ExtraPrintPreview" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("EXTRA_PRINT_PREVIEW")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("EXTRA_PRINT_PREVIEW")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra: mapped to a boolean value that is <c>true</c> if
            the current layout is for a print preview, <c>false</c> otherwise.</summary>
        <remarks>
          <para>Extra: mapped to a boolean value that is <c>true</c> if
            the current layout is for a print preview, <c>false</c> otherwise.
            This extra is provided in the <c>Bundle</c> argument of the <c>#onLayout(PrintAttributes, PrintAttributes, CancellationSignal,
            LayoutResultCallback, Bundle)</c> callback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter#EXTRA_PRINT_PREVIEW" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter.EXTRA_PRINT_PREVIEW</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes)" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Print.PrintDocumentAdapter.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Print.PrintDocumentAdapter.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFinish">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnFinish ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnFinish();" />
      <MemberSignature Language="C#" Value="public virtual void OnFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnFinish() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.OnFinish" />
      <MemberSignature Language="F#" Value="abstract member OnFinish : unit -&gt; unit&#xA;override this.OnFinish : unit -&gt; unit" Usage="printDocumentAdapter.OnFinish " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onFinish", "()V", "GetOnFinishHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onFinish", "()V", "GetOnFinishHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when printing finishes.</summary>
        <remarks>
          <para>Called when printing finishes. You can use this callback to release
            resources acquired in <c>#onStart()</c>. This method is invoked on
            the main thread.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter#onFinish()" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter.onFinish()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub OnLayout (oldAttributes As PrintAttributes, newAttributes As PrintAttributes, cancellationSignal As CancellationSignal, callback As PrintDocumentAdapter.LayoutResultCallback, extras As Bundle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void OnLayout(Android::Print::PrintAttributes ^ oldAttributes, Android::Print::PrintAttributes ^ newAttributes, Android::OS::CancellationSignal ^ cancellationSignal, Android::Print::PrintDocumentAdapter::LayoutResultCallback ^ callback, Android::OS::Bundle ^ extras);" />
      <MemberSignature Language="C#" Value="public abstract void OnLayout (Android.Print.PrintAttributes? oldAttributes, Android.Print.PrintAttributes? newAttributes, Android.OS.CancellationSignal? cancellationSignal, Android.Print.PrintDocumentAdapter.LayoutResultCallback? callback, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLayout(class Android.Print.PrintAttributes oldAttributes, class Android.Print.PrintAttributes newAttributes, class Android.OS.CancellationSignal cancellationSignal, class Android.Print.PrintDocumentAdapter/LayoutResultCallback callback, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.OS.CancellationSignal,Android.Print.PrintDocumentAdapter.LayoutResultCallback,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnLayout : Android.Print.PrintAttributes * Android.Print.PrintAttributes * Android.OS.CancellationSignal * Android.Print.PrintDocumentAdapter.LayoutResultCallback * Android.OS.Bundle -&gt; unit" Usage="printDocumentAdapter.OnLayout (oldAttributes, newAttributes, cancellationSignal, callback, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLayout", "(Landroid/print/PrintAttributes;Landroid/print/PrintAttributes;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$LayoutResultCallback;Landroid/os/Bundle;)V", "GetOnLayout_Landroid_print_PrintAttributes_Landroid_print_PrintAttributes_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_LayoutResultCallback_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onLayout", "(Landroid/print/PrintAttributes;Landroid/print/PrintAttributes;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$LayoutResultCallback;Landroid/os/Bundle;)V", "GetOnLayout_Landroid_print_PrintAttributes_Landroid_print_PrintAttributes_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_LayoutResultCallback_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldAttributes" Type="Android.Print.PrintAttributes" />
        <Parameter Name="newAttributes" Type="Android.Print.PrintAttributes" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="callback" Type="Android.Print.PrintDocumentAdapter+LayoutResultCallback" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="oldAttributes">The old print attributes.</param>
        <param name="newAttributes">The new print attributes.</param>
        <param name="cancellationSignal">Signal for observing cancel layout requests.</param>
        <param name="callback">Callback to inform the system for the layout result.</param>
        <param name="extras">Additional information about how to layout the content.</param>
        <summary>Called when the print attributes (page size, density, etc) changed
            giving you a chance to layout the content such that it matches the
            new constraints.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter#onLayout(android.print.PrintAttributes,%20android.print.PrintAttributes,%20android.os.CancellationSignal,%20android.print.LayoutResultCallback,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter.onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.LayoutResultCallback, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="T:Android.OS.CancellationSignal" />
        <altmember cref="F:Android.Print.PrintDocumentAdapter.ExtraPrintPreview" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnStart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnStart();" />
      <MemberSignature Language="C#" Value="public virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.OnStart" />
      <MemberSignature Language="F#" Value="abstract member OnStart : unit -&gt; unit&#xA;override this.OnStart : unit -&gt; unit" Usage="printDocumentAdapter.OnStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when printing starts.</summary>
        <remarks>
          <para>Called when printing starts. You can use this callback to allocate
            resources. This method is invoked on the main thread.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter#onStart()" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter.onStart()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWrite">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub OnWrite (pages As PageRange(), destination As ParcelFileDescriptor, cancellationSignal As CancellationSignal, callback As PrintDocumentAdapter.WriteResultCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void OnWrite(cli::array &lt;Android::Print::PageRange ^&gt; ^ pages, Android::OS::ParcelFileDescriptor ^ destination, Android::OS::CancellationSignal ^ cancellationSignal, Android::Print::PrintDocumentAdapter::WriteResultCallback ^ callback);" />
      <MemberSignature Language="C#" Value="public abstract void OnWrite (Android.Print.PageRange[]? pages, Android.OS.ParcelFileDescriptor? destination, Android.OS.CancellationSignal? cancellationSignal, Android.Print.PrintDocumentAdapter.WriteResultCallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWrite(class Android.Print.PageRange[] pages, class Android.OS.ParcelFileDescriptor destination, class Android.OS.CancellationSignal cancellationSignal, class Android.Print.PrintDocumentAdapter/WriteResultCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Print.PrintDocumentAdapter.OnWrite(Android.Print.PageRange[],Android.OS.ParcelFileDescriptor,Android.OS.CancellationSignal,Android.Print.PrintDocumentAdapter.WriteResultCallback)" />
      <MemberSignature Language="F#" Value="abstract member OnWrite : Android.Print.PageRange[] * Android.OS.ParcelFileDescriptor * Android.OS.CancellationSignal * Android.Print.PrintDocumentAdapter.WriteResultCallback -&gt; unit" Usage="printDocumentAdapter.OnWrite (pages, destination, cancellationSignal, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onWrite", "([Landroid/print/PageRange;Landroid/os/ParcelFileDescriptor;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$WriteResultCallback;)V", "GetOnWrite_arrayLandroid_print_PageRange_Landroid_os_ParcelFileDescriptor_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_WriteResultCallback_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onWrite", "([Landroid/print/PageRange;Landroid/os/ParcelFileDescriptor;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$WriteResultCallback;)V", "GetOnWrite_arrayLandroid_print_PageRange_Landroid_os_ParcelFileDescriptor_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_WriteResultCallback_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pages" Type="Android.Print.PageRange[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="Android.OS.ParcelFileDescriptor" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="callback" Type="Android.Print.PrintDocumentAdapter+WriteResultCallback" />
      </Parameters>
      <Docs>
        <param name="pages">The pages whose content to print - non-overlapping in ascending order.</param>
        <param name="destination">The destination file descriptor to which to write.</param>
        <param name="cancellationSignal">Signal for observing cancel writing requests.</param>
        <param name="callback">Callback to inform the system for the write result.</param>
        <summary>Called when specific pages of the content should be written in the
            form of a PDF file to the given file descriptor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter#onWrite(android.print.PageRange[],%20android.os.ParcelFileDescriptor,%20android.os.CancellationSignal,%20android.print.WriteResultCallback)" title="Reference documentation">Java documentation for <code>android.print.PrintDocumentAdapter.onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.WriteResultCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="T:Android.OS.CancellationSignal" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Print.PrintDocumentAdapter.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Print.PrintDocumentAdapter.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Print.PrintDocumentAdapter.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Print.PrintDocumentAdapter.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
