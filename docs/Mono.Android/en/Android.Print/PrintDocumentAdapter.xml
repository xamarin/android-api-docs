<Type Name="PrintDocumentAdapter" FullName="Android.Print.PrintDocumentAdapter">
  <TypeSignature Language="C#" Value="public abstract class PrintDocumentAdapter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PrintDocumentAdapter extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/print/PrintDocumentAdapter", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Base class that provides the content of a document to be printed.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Base class that provides the content of a document to be printed.

 <format type="text/html"><h3>Lifecycle</h3></format><format type="text/html"><h3>Implementation</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <list type="bullet">
          <item>
            <term>
 Initially, you will receive a call to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnStart" /></c>. This callback
 can be used to allocate resources.
 </term>
          </item>
          <item>
            <term>
 Next, you will get one or more calls to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c> to
 inform you that the print attributes (page size, density, etc) changed
 giving you an opportunity to layout the content to match the new constraints.
 </term>
          </item>
          <item>
            <term>
 After every call to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c>, you <i>may</i> get
 a call to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnWrite(Android.Print.PageRange[],Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor)" /></c> asking you to write a PDF file with the content for
 specific pages.
 </term>
          </item>
          <item>
            <term>
 Finally, you will receive a call to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnFinish" /></c>. You can use this
 callback to release resources allocated in <c><see cref="M:Android.Print.PrintDocumentAdapter.OnStart" /></c>.
 </term>
          </item>
        </list>
      </para>
      <para tool="javadoc-to-mdoc">
 The <c><see cref="M:Android.Print.PrintDocumentAdapter.OnStart" /></c> callback is always the first call you will receive and
 is useful for doing one time setup or resource allocation before printing. You
 will not receive a subsequent call here.
 </para>
      <para tool="javadoc-to-mdoc">
 The <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c> callback requires that you layout the content
 based on the current <c><see cref="T:Android.Print.PrintAttributes" /></c>. The execution of this method is
 not considered completed until you invoke one of the methods on the passed in
 callback instance. Hence, you will not receive a subsequent call to any other
 method of this class until the execution of this method is complete by invoking
 one of the callback methods.
 </para>
      <para tool="javadoc-to-mdoc">
 The <c><see cref="M:Android.Print.PrintDocumentAdapter.OnWrite(Android.Print.PageRange[],Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor)" /></c> requires that you render and write the content of some
 pages to the provided destination. The execution of this method is not
 considered complete until you invoke one of the methods on the passed in
 callback instance. Hence, you will not receive a subsequent call to any other
 method of this class until the execution of this method is complete by invoking
 one of the callback methods. You will never receive a sequence of one or more
 calls to this method without a previous call to <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The <c><see cref="M:Android.Print.PrintDocumentAdapter.OnFinish" /></c> callback is always the last call you will receive and
 is useful for doing one time cleanup or resource deallocation after printing.
 You will not receive a subsequent call here.
 </para>
      <para tool="javadoc-to-mdoc">
 The APIs defined in this class are designed to enable doing part or all
 of the work on an arbitrary thread. For example, if the printed content
 does not depend on the UI state, i.e. on what is shown on the screen, then
 you can offload the entire work on a dedicated thread, thus making your
 application interactive while the print work is being performed. Note that
 while your activity is covered by the system print UI and a user cannot
 interact with it, doing the printing work on the main application thread
 may affect the performance of your other application components as they
 are also executed on that thread.
 </para>
      <para tool="javadoc-to-mdoc">
 You can also do work on different threads, for example if you print UI
 content, you can handle <c><see cref="M:Android.Print.PrintDocumentAdapter.OnStart" /></c> and <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c> on
 the UI thread (assuming onStart initializes resources needed for layout).
 This will ensure that the UI does not change while you are laying out the
 printed content. Then you can handle <c><see cref="M:Android.Print.PrintDocumentAdapter.OnWrite(Android.Print.PageRange[],Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor,Android.OS.ParcelFileDescriptor)" /></c> and <c><see cref="M:Android.Print.PrintDocumentAdapter.OnFinish" /></c> on another
 thread. This will ensure that the main thread is busy for a minimal amount of
 time. Also this assumes that you will generate the printed content in
 <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c> which is not mandatory. If you use multiple
 threads, you are responsible for proper synchronization.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintDocumentAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#PrintDocumentAdapter()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrintDocumentAdapter (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraPrintPreview">
      <MemberSignature Language="C#" Value="public const string ExtraPrintPreview;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraPrintPreview" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PRINT_PREVIEW")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra: mapped to a boolean value that is <c>true</c> if
 the current layout is for a print preview, <c>false</c> otherwise.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Extra: mapped to a boolean value that is <c>true</c> if
 the current layout is for a print preview, <c>false</c> otherwise.
 This extra is provided in the <c><see cref="T:Android.OS.Bundle" /></c> argument of the <c><see cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes,Android.Print.PrintAttributes)" /></c> callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#EXTRA_PRINT_PREVIEW" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Print.PrintDocumentAdapter.OnLayout(Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes, Android.Print.PrintAttributes)" />
      </Docs>
    </Member>
    <Member MemberName="OnFinish">
      <MemberSignature Language="C#" Value="public virtual void OnFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnFinish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onFinish", "()V", "GetOnFinishHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when printing finishes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when printing finishes. You can use this callback to release
 resources acquired in <c><see cref="M:Android.Print.PrintDocumentAdapter.OnStart" /></c>. This method is invoked on
 the main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onFinish()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="public abstract void OnLayout (Android.Print.PrintAttributes oldAttributes, Android.Print.PrintAttributes newAttributes, Android.OS.CancellationSignal cancellationSignal, Android.Print.PrintDocumentAdapter.LayoutResultCallback callback, Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLayout(class Android.Print.PrintAttributes oldAttributes, class Android.Print.PrintAttributes newAttributes, class Android.OS.CancellationSignal cancellationSignal, class Android.Print.PrintDocumentAdapter/LayoutResultCallback callback, class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLayout", "(Landroid/print/PrintAttributes;Landroid/print/PrintAttributes;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$LayoutResultCallback;Landroid/os/Bundle;)V", "GetOnLayout_Landroid_print_PrintAttributes_Landroid_print_PrintAttributes_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_LayoutResultCallback_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldAttributes" Type="Android.Print.PrintAttributes" />
        <Parameter Name="newAttributes" Type="Android.Print.PrintAttributes" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="callback" Type="Android.Print.PrintDocumentAdapter+LayoutResultCallback" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="oldAttributes">The old print attributes.</param>
        <param name="newAttributes">The new print attributes.</param>
        <param name="cancellationSignal">Signal for observing cancel layout requests.</param>
        <param name="callback">Callback to inform the system for the layout result.</param>
        <param name="extras">Additional information about how to layout the content.</param>
        <summary>Called when the print attributes (page size, density, etc) changed
 giving you a chance to layout the content such that it matches the
 new constraints.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the print attributes (page size, density, etc) changed
 giving you a chance to layout the content such that it matches the
 new constraints. This method is invoked on the main thread.
 <example><code lang="java">
 cancellationSignal.setOnCancelListener(new OnCancelListener() {
     &amp;#064;Override
     public void onCancel() {
         // Cancel layout
     }
 });
 </code></example></para>
          <para tool="javadoc-to-mdoc">
 After you are done laying out, you <i>must</i> invoke: <c><see cref="!:NoType:android/print/PrintDocumentAdapter$LayoutResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo,boolean)" /></c> with
 the last argument <c>true</c> or <c>false</c> depending on
 whether the layout changed the content or not, respectively; or <c><see cref="!:NoType:android/print/PrintDocumentAdapter$LayoutResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFailed(java.lang.CharSequence)" /></c>, if an error occurred;
 or <c><see cref="!:NoType:android/print/PrintDocumentAdapter$LayoutResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutCancelled()" /></c> if layout was
 cancelled in a response to a cancellation request via the passed in
 <c><see cref="T:Android.OS.CancellationSignal" /></c>. Note that you <i>must</i> call one of
 the methods of the given callback for this method to be considered complete
 which is you will not receive any calls to this adapter until the current
 layout operation is complete by invoking a method on the callback instance.
 The callback methods can be invoked from an arbitrary thread.
 </para>
          <para tool="javadoc-to-mdoc">
 One of the arguments passed to this method is a <c><see cref="T:Android.OS.CancellationSignal" /></c>
 which is used to propagate requests from the system to your application for
 canceling the current layout operation. For example, a cancellation may be
 requested if the user changes a print option that may affect layout while
 you are performing a layout operation. In such a case the system will make
 an attempt to cancel the current layout as another one will have to be performed.
 Typically, you should register a cancellation callback in the cancellation
 signal. The cancellation callback <i>will not</i> be made on the
 main thread and can be registered as follows:
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> If the content is large and a layout will be
 performed, it is a good practice to schedule the work on a dedicated
 thread and register an observer in the provided <c><see cref="T:Android.OS.CancellationSignal" /></c> upon invocation of which you should stop the
 layout.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.OS.CancellationSignal" />
        <altmember cref="F:Android.Print.PrintDocumentAdapter.ExtraPrintPreview" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="public virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when printing starts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when printing starts. You can use this callback to allocate
 resources. This method is invoked on the main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWrite">
      <MemberSignature Language="C#" Value="public abstract void OnWrite (Android.Print.PageRange[] pages, Android.OS.ParcelFileDescriptor destination, Android.OS.CancellationSignal cancellationSignal, Android.Print.PrintDocumentAdapter.WriteResultCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWrite(class Android.Print.PageRange[] pages, class Android.OS.ParcelFileDescriptor destination, class Android.OS.CancellationSignal cancellationSignal, class Android.Print.PrintDocumentAdapter/WriteResultCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWrite", "([Landroid/print/PageRange;Landroid/os/ParcelFileDescriptor;Landroid/os/CancellationSignal;Landroid/print/PrintDocumentAdapter$WriteResultCallback;)V", "GetOnWrite_arrayLandroid_print_PageRange_Landroid_os_ParcelFileDescriptor_Landroid_os_CancellationSignal_Landroid_print_PrintDocumentAdapter_WriteResultCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pages" Type="Android.Print.PageRange[]" />
        <Parameter Name="destination" Type="Android.OS.ParcelFileDescriptor" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="callback" Type="Android.Print.PrintDocumentAdapter+WriteResultCallback" />
      </Parameters>
      <Docs>
        <param name="pages">The pages whose content to print - non-overlapping in ascending order.</param>
        <param name="destination">The destination file descriptor to which to write.</param>
        <param name="cancellationSignal">Signal for observing cancel writing requests.</param>
        <param name="callback">Callback to inform the system for the write result.</param>
        <summary>Called when specific pages of the content should be written in the
 form of a PDF file to the given file descriptor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when specific pages of the content should be written in the
 form of a PDF file to the given file descriptor. This method is invoked
 on the main thread.
<example><code lang="java">
 cancellationSignal.setOnCancelListener(new OnCancelListener() {
     &amp;#064;Override
     public void onCancel() {
         // Cancel write
     }
 });
 </code></example></para>
          <para tool="javadoc-to-mdoc">
 After you are done writing, you should close the file descriptor and
 invoke <c><see cref="!:NoType:android/print/PrintDocumentAdapter$WriteResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.WriteResultCallback.html#onWriteFinished(android.print.PageRange[])" /></c>, if writing
 completed successfully; or <c><see cref="!:NoType:android/print/PrintDocumentAdapter$WriteResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.WriteResultCallback.html#onWriteFailed(java.lang.CharSequence)" /></c>, if an error occurred; or <c><see cref="!:NoType:android/print/PrintDocumentAdapter$WriteResultCallback;Href=../../../reference/android/print/PrintDocumentAdapter.WriteResultCallback.html#onWriteCancelled()" /></c>,
 if writing was cancelled in a response to a cancellation request via the passed
 in <c><see cref="T:Android.OS.CancellationSignal" /></c>. Note that you <i>must</i> call one of
 the methods of the given callback for this method to be considered complete which
 is you will not receive any calls to this adapter until the current write
 operation is complete by invoking a method on the callback instance. The callback
 methods can be invoked from an arbitrary thread.
 </para>
          <para tool="javadoc-to-mdoc">
 One of the arguments passed to this method is a <c><see cref="T:Android.OS.CancellationSignal" /></c>
 which is used to propagate requests from the system to your application for
 canceling the current write operation. For example, a cancellation may be
 requested if the user changes a print option that may affect layout while
 you are performing a write operation. In such a case the system will make
 an attempt to cancel the current write as a layout will have to be performed
 which then may be followed by a write. Typically, you should register a
 cancellation callback in the cancellation signal. The cancellation callback
 <i>will not</i> be made on the main thread and can be registered
 as follows:
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> If the printed content is large, it is a good
 practice to schedule writing it on a dedicated thread and register an
 observer in the provided <c><see cref="T:Android.OS.CancellationSignal" /></c> upon invocation of
 which you should stop writing.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.OS.CancellationSignal" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
