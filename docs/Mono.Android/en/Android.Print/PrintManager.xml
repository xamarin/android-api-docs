<Type Name="PrintManager" FullName="Android.Print.PrintManager">
  <TypeSignature Language="C#" Value="public sealed class PrintManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PrintManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/print/PrintManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>System level service for accessing the printing capabilities of the platform.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">System level service for accessing the printing capabilities of the platform.
 <example><code lang="java">
 PrintManager printManager =
         (PrintManager) context.getSystemService(Context.PRINT_SERVICE);
 </code></example><format type="text/html"><h3>Print mechanics</h3></format><format type="text/html"><h3>Print jobs</h3></format></para>
      <para tool="javadoc-to-mdoc">
 To obtain a handle to the print manager do the following:
 </para>
      <para tool="javadoc-to-mdoc">
 The key idea behind printing on the platform is that the content to be printed
 should be laid out for the currently selected print options resulting in an
 optimized output and higher user satisfaction. To achieve this goal the platform
 declares a contract that the printing application has to follow which is defined
 by the <c><see cref="T:Android.Print.PrintDocumentAdapter" /></c> class. At a higher level the contract is that
 when the user selects some options from the print UI that may affect the way
 content is laid out, for example page size, the application receives a callback
 allowing it to layout the content to better fit these new constraints. After a
 layout pass the system may ask the application to render one or more pages one
 or more times. For example, an application may produce a single column list for
 smaller page sizes and a multi-column table for larger page sizes.
 </para>
      <para tool="javadoc-to-mdoc">
 Print jobs are started by calling the <c><see cref="M:Android.Print.PrintManager.Print(System.String,Android.Print.PrintDocumentAdapter,Android.Print.PrintDocumentAdapter)" /></c> from an activity which results in bringing up the system print
 UI. Once the print UI is up, when the user changes a selected print option that
 affects the way content is laid out the system starts to interact with the
 application following the mechanics described the section above.
 </para>
      <para tool="javadoc-to-mdoc">
 Print jobs can be in <c><see cref="F:Android.Print.PrintJobInfo.StateCreated" /></c>, <c><see cref="F:Android.Print.PrintJobInfo.StateQueued" /></c>, <c><see cref="F:Android.Print.PrintJobInfo.StateStarted" /></c>,
 <c><see cref="F:Android.Print.PrintJobInfo.StateBlocked" /></c>, <c><see cref="F:Android.Print.PrintJobInfo.StateCompleted" /></c>, <c><see cref="F:Android.Print.PrintJobInfo.StateFailed" /></c>, and <c><see cref="F:Android.Print.PrintJobInfo.StateCanceled" /></c> state. Print jobs are stored in dedicated
 system spooler until they are handled which is they are cancelled or completed.
 Active print jobs, ones that are not cancelled or completed, are considered failed
 if the device reboots as the new boot may be after a very long time. The user may
 choose to restart such print jobs. Once a print job is queued all relevant content
 is stored in the system spooler and its lifecycle becomes detached from this of
 the application that created it.
 </para>
      <para tool="javadoc-to-mdoc">
 An applications can query the print spooler for current print jobs it created
 but not print jobs created by other applications.
 <format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Android.Print.PrintJob" /></c></term></item><item><term><c><see cref="T:Android.Print.PrintJobInfo" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/print/PrintManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public Android.Print.PrintJob Print (string printJobName, Android.Print.PrintDocumentAdapter documentAdapter, Android.Print.PrintAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Print.PrintJob Print(string printJobName, class Android.Print.PrintDocumentAdapter documentAdapter, class Android.Print.PrintAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("print", "(Ljava/lang/String;Landroid/print/PrintDocumentAdapter;Landroid/print/PrintAttributes;)Landroid/print/PrintJob;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Print.PrintJob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printJobName" Type="System.String" />
        <Parameter Name="documentAdapter" Type="Android.Print.PrintDocumentAdapter" />
        <Parameter Name="attributes" Type="Android.Print.PrintAttributes" />
      </Parameters>
      <Docs>
        <param name="printJobName">A name for the new print job which is shown to the user.</param>
        <param name="documentAdapter">An adapter that emits the document to print.</param>
        <param name="attributes">The default print job attributes or <c>null</c>.</param>
        <summary>Creates a print job for printing a <c><see cref="T:Android.Print.PrintDocumentAdapter" /></c> with
 default print attributes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a print job for printing a <c><see cref="T:Android.Print.PrintDocumentAdapter" /></c> with
 default print attributes.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method brings the print UI allowing the user to customize
 the print job and returns a <c><see cref="T:Android.Print.PrintJob" /></c> object without waiting for the
 user to customize or confirm the print job. The returned print job instance
 is in a <c><see cref="F:Android.Print.PrintJobInfo.StateCreated" /></c> state.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called only from an <c><see cref="T:Android.App.Activity" /></c>. The rationale is that
 printing from a service will create an inconsistent user experience as the print
 UI would appear without any context.
 </para>
          <para tool="javadoc-to-mdoc">
 Also the passed in <c><see cref="T:Android.Print.PrintDocumentAdapter" /></c> will be considered invalid if
 your activity is finished. The rationale is that once the activity that
 initiated printing is finished, the provided adapter may be in an inconsistent
 state as it may depend on the UI presented by the activity.
 </para>
          <para tool="javadoc-to-mdoc">
 The default print attributes are a hint to the system how the data is to
 be printed. For example, a photo editor may look at the photo aspect ratio
 to determine the default orientation and provide a hint whether the printing
 should be in portrait or landscape. The system will do a best effort to
 selected the hinted options in the print dialog, given the current printer
 supports them.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Calling this method will bring the print dialog and
 the system will connect to the provided <c><see cref="T:Android.Print.PrintDocumentAdapter" /></c>. If a
 configuration change occurs that you application does not handle, for example
 a rotation change, the system will drop the connection to the adapter as the
 activity has to be recreated and the old adapter may be invalid in this context,
 hence a new adapter instance is required. As a consequence, if your activity
 does not handle configuration changes (default behavior), you have to save the
 state that you were printing and call this method again when your activity
 is recreated.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintManager.html#print(java.lang.String, android.print.PrintDocumentAdapter, android.print.PrintAttributes)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">If not called from an <c><see cref="T:Android.App.Activity" /></c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">If the print job name is empty or the
 document adapter is null.</exception>
        <altmember cref="T:Android.Print.PrintJob" />
      </Docs>
    </Member>
    <Member MemberName="PrintJobs">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Android.Print.PrintJob&gt; PrintJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Print.PrintJob&gt; PrintJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPrintJobs", "()Ljava/util/List;", "GetGetPrintJobsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Print.PrintJob&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the print jobs for this application.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the print jobs for this application.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/PrintManager.html#getPrintJobs()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Print.PrintJob" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
