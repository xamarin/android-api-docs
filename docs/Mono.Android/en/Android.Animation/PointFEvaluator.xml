<Type Name="PointFEvaluator" FullName="Android.Animation.PointFEvaluator">
  <TypeSignature Language="C#" Value="public class PointFEvaluator : Java.Lang.Object, Android.Animation.ITypeEvaluator, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PointFEvaluator extends Java.Lang.Object implements class Android.Animation.ITypeEvaluator, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Animation.ITypeEvaluator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/animation/PointFEvaluator", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This evaluator can be used to perform type interpolation between <c>PointF</c> values.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This evaluator can be used to perform type interpolation between <c>PointF</c> values.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/animation/PointFEvaluator.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PointFEvaluator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct a PointFEvaluator that returns a new PointF on every evaluate call.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a PointFEvaluator that returns a new PointF on every evaluate call.
 To avoid creating an object for each evaluate call,
 <c><see cref="C:Android.Animation.PointFEvaluator(Android.Graphics.PointF)" /></c> should be used
 whenever possible.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/PointFEvaluator.html#PointFEvaluator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PointFEvaluator (Android.Graphics.PointF reuse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Graphics.PointF reuse) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/graphics/PointF;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="reuse" Type="Android.Graphics.PointF" />
      </Parameters>
      <Docs>
        <param name="reuse">To be added.</param>
        <summary>Constructs a PointFEvaluator that modifies and returns <c>reuse</c>
 in <c><see cref="M:Android.Animation.PointFEvaluator.Evaluate(System.Single,Android.Graphics.PointF,Android.Graphics.PointF)" /></c> calls.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a PointFEvaluator that modifies and returns <c>reuse</c>
 in <c><see cref="M:Android.Animation.PointFEvaluator.Evaluate(System.Single,Android.Graphics.PointF,Android.Graphics.PointF)" /></c> calls.
 The value returned from
 <c><see cref="M:Android.Animation.PointFEvaluator.Evaluate(System.Single,Android.Graphics.PointF,Android.Graphics.PointF)" /></c> should
 not be cached because it will change over time as the object is reused on each
 call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/PointFEvaluator.html#PointFEvaluator(android.graphics.PointF)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PointFEvaluator (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Android.Animation.ITypeEvaluator.Evaluate">
      <MemberSignature Language="C#" Value="Java.Lang.Object ITypeEvaluator.Evaluate (float fraction, Java.Lang.Object startValue, Java.Lang.Object endValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.Object Android.Animation.ITypeEvaluator.Evaluate(float32 fraction, class Java.Lang.Object startValue, class Java.Lang.Object endValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fraction" Type="System.Single" />
        <Parameter Name="startValue" Type="Java.Lang.Object" />
        <Parameter Name="endValue" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="fraction">To be added.</param>
        <param name="startValue">To be added.</param>
        <param name="endValue">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.PointF Evaluate (float fraction, Android.Graphics.PointF startValue, Android.Graphics.PointF endValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.PointF Evaluate(float32 fraction, class Android.Graphics.PointF startValue, class Android.Graphics.PointF endValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("evaluate", "(FLandroid/graphics/PointF;Landroid/graphics/PointF;)Landroid/graphics/PointF;", "GetEvaluate_FLandroid_graphics_PointF_Landroid_graphics_PointF_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fraction" Type="System.Single" />
        <Parameter Name="startValue" Type="Android.Graphics.PointF" />
        <Parameter Name="endValue" Type="Android.Graphics.PointF" />
      </Parameters>
      <Docs>
        <param name="fraction">The fraction from the starting to the ending values</param>
        <param name="startValue">The start PointF</param>
        <param name="endValue">The end PointF</param>
        <summary>This function returns the result of linearly interpolating the start and
 end PointF values, with <c>fraction</c> representing the proportion
 between the start and end values.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This function returns the result of linearly interpolating the start and
 end PointF values, with <c>fraction</c> representing the proportion
 between the start and end values. The calculation is a simple parametric
 calculation on each of the separate components in the PointF objects
 (x, y).

 </para>
          <para tool="javadoc-to-mdoc">If <c><see cref="C:Android.Animation.PointFEvaluator(Android.Graphics.PointF)" /></c> was used to construct
 this PointFEvaluator, the object returned will be the <c>reuse</c>
 passed into the constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/PointFEvaluator.html#evaluate(float, android.graphics.PointF, android.graphics.PointF)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
