<Type Name="LayoutTransition" FullName="Android.Animation.LayoutTransition">
  <TypeSignature Language="C#" Value="public class LayoutTransition : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LayoutTransition extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Animation.LayoutTransition" />
  <TypeSignature Language="F#" Value="type LayoutTransition = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/animation/LayoutTransition", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/animation/LayoutTransition", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>This class enables automatic animations on layout changes in ViewGroup objects.</summary>
    <remarks>
      <para>This class enables automatic animations on layout changes in ViewGroup objects. To enable
            transitions for a layout container, create a LayoutTransition object and set it on any
            ViewGroup by calling <c>ViewGroup#setLayoutTransition(LayoutTransition)</c>. This will cause
            default animations to run whenever items are added to or removed from that container. To specify
            custom animations, use the <c>LayoutTransition#setAnimator(int, Animator)
            setAnimator()</c> method.</para>
      <para>One of the core concepts of these transition animations is that there are two types of
            changes that cause the transition and four different animations that run because of
            those changes. The changes that trigger the transition are items being added to a container
            (referred to as an "appearing" transition) or removed from a container (also known as
            "disappearing"). Setting the visibility of views (between GONE and VISIBLE) will trigger
            the same add/remove logic. The animations that run due to those events are one that animates
            items being added, one that animates items being removed, and two that animate the other
            items in the container that change due to the add/remove occurrence. Users of
            the transition may want different animations for the changing items depending on whether
            they are changing due to an appearing or disappearing event, so there is one animation for
            each of these variations of the changing event. Most of the API of this class is concerned
            with setting up the basic properties of the animations used in these four situations,
            or with setting up custom animations for any or all of the four.</para>
      <para>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING
            animation. The other animations begin after a delay that is set to the default duration
            of the animations. This behavior facilitates a sequence of animations in transitions as
            follows: when an item is being added to a layout, the other children of that container will
            move first (thus creating space for the new item), then the appearing animation will run to
            animate the item being added. Conversely, when an item is removed from a container, the
            animation to remove it will run first, then the animations of the other children in the
            layout will run (closing the gap created in the layout when the item was removed). If this
            default choreography behavior is not desired, the <c>#setDuration(int, long)</c> and
            <c>#setStartDelay(int, long)</c> of any or all of the animations can be changed as
            appropriate. Keep in mind, however, that if you start an APPEARING animation before a
            DISAPPEARING animation is completed, the DISAPPEARING animation stops, and any effects from
            the DISAPPEARING animation are reverted. If you instead start a DISAPPEARING animation
            before an APPEARING animation is completed, a similar set of effects occurs for the
            APPEARING animation.</para>
      <para>The animations specified for the transition, both the defaults and any custom animations
            set on the transition object, are templates only. That is, these animations exist to hold the
            basic animation properties, such as the duration, start delay, and properties being animated.
            But the actual target object, as well as the start and end values for those properties, are
            set automatically in the process of setting up the transition each time it runs. Each of the
            animations is cloned from the original copy and the clone is then populated with the dynamic
            values of the target being animated (such as one of the items in a layout container that is
            moving as a result of the layout event) as well as the values that are changing (such as the
            position and size of that object). The actual values that are pushed to each animation
            depends on what properties are specified for the animation. For example, the default
            CHANGE_APPEARING animation animates the <c>left</c>, <c>top</c>, <c>right</c>,
            <c>bottom</c>, <c>scrollX</c>, and <c>scrollY</c> properties.
            Values for these properties are updated with the pre- and post-layout
            values when the transition begins. Custom animations will be similarly populated with
            the target and values being animated, assuming they use ObjectAnimator objects with
            property names that are known on the target object.</para>
      <para>This class, and the associated XML flag for containers, animateLayoutChanges="true",
            provides a simple utility meant for automating changes in straightforward situations.
            Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the
            interrelationship of the various levels of layout. Also, a container that is being scrolled
            at the same time as items are being added or removed is probably not a good candidate for
            this utility, because the before/after locations calculated by LayoutTransition
            may not match the actual locations when the animations finish due to the container
            being scrolled as the animations are running. You can work around that
            particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING
            and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the
            other animations appropriately.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/animation/LayoutTransition" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LayoutTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a LayoutTransition object.</summary>
        <remarks>
          <para>Constructs a LayoutTransition object. By default, the object will listen to layout
            events on any ViewGroup that it is set on and will run default animations for each
            type of layout event.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#LayoutTransition()" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.LayoutTransition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutTransition (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Animation.LayoutTransition : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Animation.LayoutTransition" Usage="new Android.Animation.LayoutTransition (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (Android.Views.ViewGroup? parent, Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.AddChild(Android.Views.ViewGroup,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member AddChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit&#xA;override this.AddChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit" Usage="layoutTransition.AddChild (parent, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetAddChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetAddChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup to which the View is being added.</param>
        <param name="child">The View being added to the ViewGroup.</param>
        <summary>This method is called by ViewGroup when a child view is about to be added to the
            container.</summary>
        <remarks>
          <para>This method is called by ViewGroup when a child view is about to be added to the
            container. This callback starts the process of a transition; we grab the starting
            values, listen for changes to all of the children of the container, and start appropriate
            animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#addChild(android.view.ViewGroup,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.addChild(android.view.ViewGroup, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddTransitionListener">
      <MemberSignature Language="C#" Value="public virtual void AddTransitionListener (Android.Animation.LayoutTransition.ITransitionListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTransitionListener(class Android.Animation.LayoutTransition/ITransitionListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.AddTransitionListener(Android.Animation.LayoutTransition.ITransitionListener)" />
      <MemberSignature Language="F#" Value="abstract member AddTransitionListener : Android.Animation.LayoutTransition.ITransitionListener -&gt; unit&#xA;override this.AddTransitionListener : Android.Animation.LayoutTransition.ITransitionListener -&gt; unit" Usage="layoutTransition.AddTransitionListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetAddTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetAddTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Animation.LayoutTransition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be called when layout bounds change.</param>
        <summary>Add a listener that will be called when the bounds of the view change due to
            layout processing.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#addTransitionListener(android.animation.TransitionListener)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.addTransitionListener(android.animation.TransitionListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Appearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Appearing = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Appearing = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Animation.LayoutTransition.Appearing" />
      <MemberSignature Language="F#" Value="val mutable Appearing : Android.Animation.LayoutTransitionType" Usage="Android.Animation.LayoutTransition.Appearing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("APPEARING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("APPEARING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are appearing
            in the container.</summary>
        <remarks>
          <para>A flag indicating the animation that runs on those items that are appearing
            in the container.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#APPEARING" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.APPEARING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeAppearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType ChangeAppearing = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType ChangeAppearing = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Animation.LayoutTransition.ChangeAppearing" />
      <MemberSignature Language="F#" Value="val mutable ChangeAppearing : Android.Animation.LayoutTransitionType" Usage="Android.Animation.LayoutTransition.ChangeAppearing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CHANGE_APPEARING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CHANGE_APPEARING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
            due to a new item appearing in the container.</summary>
        <remarks>
          <para>A flag indicating the animation that runs on those items that are changing
            due to a new item appearing in the container.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#CHANGE_APPEARING" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.CHANGE_APPEARING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeDisappearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType ChangeDisappearing = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType ChangeDisappearing = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Animation.LayoutTransition.ChangeDisappearing" />
      <MemberSignature Language="F#" Value="val mutable ChangeDisappearing : Android.Animation.LayoutTransitionType" Usage="Android.Animation.LayoutTransition.ChangeDisappearing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CHANGE_DISAPPEARING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CHANGE_DISAPPEARING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
            due to an item disappearing from the container.</summary>
        <remarks>
          <para>A flag indicating the animation that runs on those items that are changing
            due to an item disappearing from the container.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#CHANGE_DISAPPEARING" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.CHANGE_DISAPPEARING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Changing = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Changing = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Animation.LayoutTransition.Changing" />
      <MemberSignature Language="F#" Value="val mutable Changing : Android.Animation.LayoutTransitionType" Usage="Android.Animation.LayoutTransition.Changing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CHANGING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CHANGING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
            due to a layout change not caused by items being added to or removed
            from the container.</summary>
        <remarks>
          <para>A flag indicating the animation that runs on those items that are changing
            due to a layout change not caused by items being added to or removed
            from the container. This transition type is not enabled by default; it can be
            enabled via <c>#enableTransitionType(int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#CHANGING" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.CHANGING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableTransitionType">
      <MemberSignature Language="C#" Value="public virtual void DisableTransitionType (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableTransitionType(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.DisableTransitionType(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member DisableTransitionType : Android.Animation.LayoutTransitionType -&gt; unit&#xA;override this.DisableTransitionType : Android.Animation.LayoutTransitionType -&gt; unit" Usage="layoutTransition.DisableTransitionType transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("disableTransitionType", "(I)V", "GetDisableTransitionType_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("disableTransitionType", "(I)V", "GetDisableTransitionType_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>.</param>
        <summary>Disables the specified transitionType for this LayoutTransition object.</summary>
        <remarks>
          <para>Disables the specified transitionType for this LayoutTransition object.
            By default, all transition types except <c>#CHANGING</c> are enabled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#disableTransitionType(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.disableTransitionType(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Disappearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Disappearing = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Disappearing = (3)" />
      <MemberSignature Language="DocId" Value="F:Android.Animation.LayoutTransition.Disappearing" />
      <MemberSignature Language="F#" Value="val mutable Disappearing : Android.Animation.LayoutTransitionType" Usage="Android.Animation.LayoutTransition.Disappearing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DISAPPEARING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DISAPPEARING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are disappearing
            from the container.</summary>
        <remarks>
          <para>A flag indicating the animation that runs on those items that are disappearing
            from the container.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#DISAPPEARING" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.DISAPPEARING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTransitionType">
      <MemberSignature Language="C#" Value="public virtual void EnableTransitionType (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableTransitionType(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.EnableTransitionType(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member EnableTransitionType : Android.Animation.LayoutTransitionType -&gt; unit&#xA;override this.EnableTransitionType : Android.Animation.LayoutTransitionType -&gt; unit" Usage="layoutTransition.EnableTransitionType transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("enableTransitionType", "(I)V", "GetEnableTransitionType_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("enableTransitionType", "(I)V", "GetEnableTransitionType_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>.</param>
        <summary>Enables the specified transitionType for this LayoutTransition object.</summary>
        <remarks>
          <para>Enables the specified transitionType for this LayoutTransition object.
            By default, a LayoutTransition listens for changes in children being
            added/remove/hidden/shown in the container, and runs the animations associated with
            those events. That is, all transition types besides <c>#CHANGING</c> are enabled by default.
            You can also enable <c>#CHANGING</c> animations by calling this method with the
            <c>#CHANGING</c> transitionType.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#enableTransitionType(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.enableTransitionType(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="EndTransition">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Animation.LayoutTransition.EndTransitionEventArgs&gt; EndTransition;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Animation.LayoutTransition/EndTransitionEventArgs&gt; EndTransition" />
      <MemberSignature Language="DocId" Value="E:Android.Animation.LayoutTransition.EndTransition" />
      <MemberSignature Language="F#" Value="member this.EndTransition : EventHandler&lt;Android.Animation.LayoutTransition.EndTransitionEventArgs&gt; " Usage="member this.EndTransition : System.EventHandler&lt;Android.Animation.LayoutTransition.EndTransitionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Animation.LayoutTransition+EndTransitionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator? GetAnimator (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator GetAnimator(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.GetAnimator(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member GetAnimator : Android.Animation.LayoutTransitionType -&gt; Android.Animation.Animator&#xA;override this.GetAnimator : Android.Animation.LayoutTransitionType -&gt; Android.Animation.Animator" Usage="layoutTransition.GetAnimator transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAnimator", "(I)Landroid/animation/Animator;", "GetGetAnimator_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAnimator", "(I)Landroid/animation/Animator;", "GetGetAnimator_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose animator is being returned.</param>
        <summary>Gets the animation used during one of the transition types that may run.</summary>
        <returns>Animator The animation being used for the given transition type.</returns>
        <remarks>
          <para>Gets the animation used during one of the transition types that may run.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getAnimator(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getAnimator(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.LayoutTransition.SetAnimator(Android.Animation.LayoutTransitionType, Android.Animation.Animator)" />
      </Docs>
    </Member>
    <Member MemberName="GetDuration">
      <MemberSignature Language="C#" Value="public virtual long GetDuration (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetDuration(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.GetDuration(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member GetDuration : Android.Animation.LayoutTransitionType -&gt; int64&#xA;override this.GetDuration : Android.Animation.LayoutTransitionType -&gt; int64" Usage="layoutTransition.GetDuration transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDuration", "(I)J", "GetGetDuration_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDuration", "(I)J", "GetGetDuration_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose duration is returned.</param>
        <summary>Gets the duration on one of the animation objects used by this transition.</summary>
        <returns>long The duration of the specified animation.</returns>
        <remarks>
          <para>Gets the duration on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose duration
            is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getDuration(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getDuration(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.Duration" />
      </Docs>
    </Member>
    <Member MemberName="GetInterpolator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.ITimeInterpolator? GetInterpolator (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.ITimeInterpolator GetInterpolator(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.GetInterpolator(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member GetInterpolator : Android.Animation.LayoutTransitionType -&gt; Android.Animation.ITimeInterpolator&#xA;override this.GetInterpolator : Android.Animation.LayoutTransitionType -&gt; Android.Animation.ITimeInterpolator" Usage="layoutTransition.GetInterpolator transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getInterpolator", "(I)Landroid/animation/TimeInterpolator;", "GetGetInterpolator_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getInterpolator", "(I)Landroid/animation/TimeInterpolator;", "GetGetInterpolator_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.ITimeInterpolator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose interpolator is being returned.</param>
        <summary>Gets the interpolator on one of the animation objects used by this transition.</summary>
        <returns>TimeInterpolator The interpolator that the specified animation uses.</returns>
        <remarks>
          <para>Gets the interpolator on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose interpolator
            is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getInterpolator(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getInterpolator(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetInterpolator(Android.Animation.ITimeInterpolator)" />
      </Docs>
    </Member>
    <Member MemberName="GetStagger">
      <MemberSignature Language="C#" Value="public virtual long GetStagger (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetStagger(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.GetStagger(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member GetStagger : Android.Animation.LayoutTransitionType -&gt; int64&#xA;override this.GetStagger : Android.Animation.LayoutTransitionType -&gt; int64" Usage="layoutTransition.GetStagger transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getStagger", "(I)J", "GetGetStagger_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getStagger", "(I)J", "GetGetStagger_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">A value of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>, or
            <c>#CHANGING</c>.</param>
        <summary>Gets the length of time to delay between starting each animation during one of the
            change animations.</summary>
        <returns>long The length of time, in milliseconds, to delay before launching the next
            animation in the sequence.</returns>
        <remarks>
          <para>Gets the length of time to delay between starting each animation during one of the
            change animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getStagger(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getStagger(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetStartDelay">
      <MemberSignature Language="C#" Value="public virtual long GetStartDelay (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetStartDelay(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.GetStartDelay(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member GetStartDelay : Android.Animation.LayoutTransitionType -&gt; int64&#xA;override this.GetStartDelay : Android.Animation.LayoutTransitionType -&gt; int64" Usage="layoutTransition.GetStartDelay transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getStartDelay", "(I)J", "GetGetStartDelay_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getStartDelay", "(I)J", "GetGetStartDelay_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose start delay is returned.</param>
        <summary>Gets the start delay on one of the animation objects used by this transition.</summary>
        <returns>long The start delay of the specified animation.</returns>
        <remarks>
          <para>Gets the start delay on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose start delay
            is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getStartDelay(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getStartDelay(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.StartDelay" />
      </Docs>
    </Member>
    <Member MemberName="HideChild">
      <MemberSignature Language="C#" Value="public virtual void HideChild (Android.Views.ViewGroup? parent, Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HideChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.HideChild(Android.Views.ViewGroup,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member HideChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit&#xA;override this.HideChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit" Usage="layoutTransition.HideChild (parent, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="child">To be added.</param>
        <summary>This member is deprecated.</summary>
        <remarks>
          <para>This member is deprecated. Use <c>#hideChild(android.view.ViewGroup, android.view.View, int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#hideChild(android.view.ViewGroup,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.hideChild(android.view.ViewGroup, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="HideChild">
      <MemberSignature Language="C#" Value="public virtual void HideChild (Android.Views.ViewGroup? parent, Android.Views.View? child, Android.Views.ViewStates newVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HideChild(class Android.Views.ViewGroup parent, class Android.Views.View child, valuetype Android.Views.ViewStates newVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.HideChild(Android.Views.ViewGroup,Android.Views.View,Android.Views.ViewStates)" />
      <MemberSignature Language="F#" Value="abstract member HideChild : Android.Views.ViewGroup * Android.Views.View * Android.Views.ViewStates -&gt; unit&#xA;override this.HideChild : Android.Views.ViewGroup * Android.Views.View * Android.Views.ViewStates -&gt; unit" Usage="layoutTransition.HideChild (parent, child, newVisibility)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="newVisibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parent">The parent ViewGroup of the View being hidden.</param>
        <param name="child">The View being hidden.</param>
        <param name="newVisibility">The new visibility value of the child View, either
            <c>View#GONE</c> or <c>View#INVISIBLE</c>.</param>
        <summary>This method is called by ViewGroup when a child view is about to be hidden in
            container.</summary>
        <remarks>
          <para>This method is called by ViewGroup when a child view is about to be hidden in
            container. This callback starts the process of a transition; we grab the starting
            values, listen for changes to all of the children of the container, and start appropriate
            animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#hideChild(android.view.ViewGroup,%20android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.hideChild(android.view.ViewGroup, android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="IsChangingLayout">
      <MemberSignature Language="C#" Value="public virtual bool IsChangingLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChangingLayout" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.IsChangingLayout" />
      <MemberSignature Language="F#" Value="member this.IsChangingLayout : bool" Usage="Android.Animation.LayoutTransition.IsChangingLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isChangingLayout", "()Z", "GetIsChangingLayoutHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isChangingLayout", "()Z", "GetIsChangingLayoutHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if animations are running which animate layout-related properties.</summary>
        <value>true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently
            running.</value>
        <remarks>
          <para>Returns true if animations are running which animate layout-related properties. This
            essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations
            are running, since these animations operate on layout-related properties.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#isChangingLayout()" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.isChangingLayout()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public virtual bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.IsRunning" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="Android.Animation.LayoutTransition.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isRunning", "()Z", "GetIsRunningHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isRunning", "()Z", "GetIsRunningHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if any of the animations in this transition are currently running.</summary>
        <value>true if any animations in the transition are running.</value>
        <remarks>
          <para>Returns true if any of the animations in this transition are currently running.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#isRunning()" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.isRunning()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsTransitionTypeEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsTransitionTypeEnabled (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsTransitionTypeEnabled(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.IsTransitionTypeEnabled(Android.Animation.LayoutTransitionType)" />
      <MemberSignature Language="F#" Value="abstract member IsTransitionTypeEnabled : Android.Animation.LayoutTransitionType -&gt; bool&#xA;override this.IsTransitionTypeEnabled : Android.Animation.LayoutTransitionType -&gt; bool" Usage="layoutTransition.IsTransitionTypeEnabled transitionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isTransitionTypeEnabled", "(I)Z", "GetIsTransitionTypeEnabled_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isTransitionTypeEnabled", "(I)Z", "GetIsTransitionTypeEnabled_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>.</param>
        <summary>Returns whether the specified transitionType is enabled for this LayoutTransition object.</summary>
        <returns>true if the specified transitionType is currently enabled, false otherwise.</returns>
        <remarks>
          <para>Returns whether the specified transitionType is enabled for this LayoutTransition object.
            By default, all transition types except <c>#CHANGING</c> are enabled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#isTransitionTypeEnabled(int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.isTransitionTypeEnabled(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Animation.LayoutTransition.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual void RemoveChild (Android.Views.ViewGroup? parent, Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.RemoveChild(Android.Views.ViewGroup,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RemoveChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit&#xA;override this.RemoveChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit" Usage="layoutTransition.RemoveChild (parent, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetRemoveChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetRemoveChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup from which the View is being removed.</param>
        <param name="child">The View being removed from the ViewGroup.</param>
        <summary>This method is called by ViewGroup when a child view is about to be removed from the
            container.</summary>
        <remarks>
          <para>This method is called by ViewGroup when a child view is about to be removed from the
            container. This callback starts the process of a transition; we grab the starting
            values, listen for changes to all of the children of the container, and start appropriate
            animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#removeChild(android.view.ViewGroup,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.removeChild(android.view.ViewGroup, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RemoveTransitionListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveTransitionListener (Android.Animation.LayoutTransition.ITransitionListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTransitionListener(class Android.Animation.LayoutTransition/ITransitionListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.RemoveTransitionListener(Android.Animation.LayoutTransition.ITransitionListener)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTransitionListener : Android.Animation.LayoutTransition.ITransitionListener -&gt; unit&#xA;override this.RemoveTransitionListener : Android.Animation.LayoutTransition.ITransitionListener -&gt; unit" Usage="layoutTransition.RemoveTransitionListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetRemoveTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetRemoveTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Animation.LayoutTransition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener for layout bounds change.</param>
        <summary>Remove a listener for layout changes.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#removeTransitionListener(android.animation.TransitionListener)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.removeTransitionListener(android.animation.TransitionListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetAnimateParentHierarchy">
      <MemberSignature Language="C#" Value="public virtual void SetAnimateParentHierarchy (bool animateParentHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAnimateParentHierarchy(bool animateParentHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetAnimateParentHierarchy(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetAnimateParentHierarchy : bool -&gt; unit&#xA;override this.SetAnimateParentHierarchy : bool -&gt; unit" Usage="layoutTransition.SetAnimateParentHierarchy animateParentHierarchy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAnimateParentHierarchy", "(Z)V", "GetSetAnimateParentHierarchy_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAnimateParentHierarchy", "(Z)V", "GetSetAnimateParentHierarchy_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animateParentHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animateParentHierarchy">A boolean value indicating whether the parents of
            transitioning views should also be animated during the transition. Default value is true.</param>
        <summary>This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
            cause the default changing animation to be run on the parent hierarchy as well.</summary>
        <remarks>
          <para>This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
            cause the default changing animation to be run on the parent hierarchy as well. This allows
            containers of transitioning views to also transition, which may be necessary in situations
            where the containers bounds change between the before/after states and may clip their
            children during the transition animations. For example, layouts with wrap_content will
            adjust their bounds according to the dimensions of their children.</para>
          <para>The default changing transitions animate the bounds and scroll positions of the
            target views. These are the animations that will run on the parent hierarchy, not
            the custom animations that happen to be set on the transition. This allows custom
            behavior for the children of the transitioning container, but uses standard behavior
            of resizing/rescrolling on any changing parents.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setAnimateParentHierarchy(boolean)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setAnimateParentHierarchy(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetAnimator">
      <MemberSignature Language="C#" Value="public virtual void SetAnimator (Android.Animation.LayoutTransitionType transitionType, Android.Animation.Animator? animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAnimator(valuetype Android.Animation.LayoutTransitionType transitionType, class Android.Animation.Animator animator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetAnimator(Android.Animation.LayoutTransitionType,Android.Animation.Animator)" />
      <MemberSignature Language="F#" Value="abstract member SetAnimator : Android.Animation.LayoutTransitionType * Android.Animation.Animator -&gt; unit&#xA;override this.SetAnimator : Android.Animation.LayoutTransitionType * Android.Animation.Animator -&gt; unit" Usage="layoutTransition.SetAnimator (transitionType, animator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAnimator", "(ILandroid/animation/Animator;)V", "GetSetAnimator_ILandroid_animation_Animator_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAnimator", "(ILandroid/animation/Animator;)V", "GetSetAnimator_ILandroid_animation_Animator_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="animator" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines the
            animation whose animator is being set.</param>
        <param name="animator">The animation being assigned. A value of <c>null</c> means that no
            animation will be run for the specified transitionType.</param>
        <summary>Sets the animation used during one of the transition types that may run.</summary>
        <remarks>
          <para>Sets the animation used during one of the transition types that may run. Any
            Animator object can be used, but to be most useful in the context of layout
            transitions, the animation should either be a ObjectAnimator or a AnimatorSet
            of animations including PropertyAnimators. Also, these ObjectAnimator objects
            should be able to get and set values on their target objects automatically. For
            example, a ObjectAnimator that animates the property "left" is able to set and get the
            <c>left</c> property from the View objects being animated by the layout
            transition. The transition works by setting target objects and properties
            dynamically, according to the pre- and post-layoout values of those objects, so
            having animations that can handle those properties appropriately will work best
            for custom animation. The dynamic setting of values is only the case for the
            CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with
            the values they have.</para>
          <para>It is also worth noting that any and all animations (and their underlying
            PropertyValuesHolder objects) will have their start and end values set according
            to the pre- and post-layout values. So, for example, a custom animation on "alpha"
            as the CHANGE_APPEARING animation will inherit the real value of alpha on the target
            object (presumably 1) as its starting and ending value when the animation begins.
            Animations which need to use values at the beginning and end that may not match the
            values queried when the transition begins may need to use a different mechanism
            than a standard ObjectAnimator object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setAnimator(int,%20android.animation.Animator)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setAnimator(int, android.animation.Animator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public virtual void SetDuration (long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDuration(int64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetDuration(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetDuration : int64 -&gt; unit&#xA;override this.SetDuration : int64 -&gt; unit" Usage="layoutTransition.SetDuration duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDuration", "(J)V", "GetSetDuration_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDuration", "(J)V", "GetSetDuration_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="duration">The length of time, in milliseconds, that the transition animations
            should last.</param>
        <summary>Sets the duration to be used by all animations of this transition object.</summary>
        <remarks>
          <para>Sets the duration to be used by all animations of this transition object. If you want to
            set the duration of just one of the animations in particular, use the
            <c>#setDuration(int, long)</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setDuration(long)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setDuration(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public virtual void SetDuration (Android.Animation.LayoutTransitionType transitionType, long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDuration(valuetype Android.Animation.LayoutTransitionType transitionType, int64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetDuration(Android.Animation.LayoutTransitionType,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetDuration : Android.Animation.LayoutTransitionType * int64 -&gt; unit&#xA;override this.SetDuration : Android.Animation.LayoutTransitionType * int64 -&gt; unit" Usage="layoutTransition.SetDuration (transitionType, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDuration", "(IJ)V", "GetSetDuration_IJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDuration", "(IJ)V", "GetSetDuration_IJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose duration is being set.</param>
        <param name="duration">The length of time, in milliseconds, that the specified animation should run.</param>
        <summary>Sets the duration on one of the animation objects used by this transition.</summary>
        <remarks>
          <para>Sets the duration on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose duration
            is being set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setDuration(int,%20long)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setDuration(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetDuration(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="SetInterpolator">
      <MemberSignature Language="C#" Value="public virtual void SetInterpolator (Android.Animation.LayoutTransitionType transitionType, Android.Animation.ITimeInterpolator? interpolator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInterpolator(valuetype Android.Animation.LayoutTransitionType transitionType, class Android.Animation.ITimeInterpolator interpolator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetInterpolator(Android.Animation.LayoutTransitionType,Android.Animation.ITimeInterpolator)" />
      <MemberSignature Language="F#" Value="abstract member SetInterpolator : Android.Animation.LayoutTransitionType * Android.Animation.ITimeInterpolator -&gt; unit&#xA;override this.SetInterpolator : Android.Animation.LayoutTransitionType * Android.Animation.ITimeInterpolator -&gt; unit" Usage="layoutTransition.SetInterpolator (transitionType, interpolator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInterpolator", "(ILandroid/animation/TimeInterpolator;)V", "GetSetInterpolator_ILandroid_animation_TimeInterpolator_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInterpolator", "(ILandroid/animation/TimeInterpolator;)V", "GetSetInterpolator_ILandroid_animation_TimeInterpolator_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="interpolator" Type="Android.Animation.ITimeInterpolator" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose interpolator is being set.</param>
        <param name="interpolator">The interpolator that the specified animation should use.</param>
        <summary>Sets the interpolator on one of the animation objects used by this transition.</summary>
        <remarks>
          <para>Sets the interpolator on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose interpolator
            is being set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setInterpolator(int,%20android.animation.TimeInterpolator)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setInterpolator(int, android.animation.TimeInterpolator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetInterpolator(Android.Animation.ITimeInterpolator)" />
      </Docs>
    </Member>
    <Member MemberName="SetStagger">
      <MemberSignature Language="C#" Value="public virtual void SetStagger (Android.Animation.LayoutTransitionType transitionType, long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStagger(valuetype Android.Animation.LayoutTransitionType transitionType, int64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetStagger(Android.Animation.LayoutTransitionType,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetStagger : Android.Animation.LayoutTransitionType * int64 -&gt; unit&#xA;override this.SetStagger : Android.Animation.LayoutTransitionType * int64 -&gt; unit" Usage="layoutTransition.SetStagger (transitionType, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStagger", "(IJ)V", "GetSetStagger_IJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setStagger", "(IJ)V", "GetSetStagger_IJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">A value of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>, or
            <c>#CHANGING</c>.</param>
        <param name="duration">The length of time, in milliseconds, to delay before launching the next
            animation in the sequence.</param>
        <summary>Sets the length of time to delay between starting each animation during one of the
            change animations.</summary>
        <remarks>
          <para>Sets the length of time to delay between starting each animation during one of the
            change animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setStagger(int,%20long)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setStagger(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetStartDelay">
      <MemberSignature Language="C#" Value="public virtual void SetStartDelay (Android.Animation.LayoutTransitionType transitionType, long delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStartDelay(valuetype Android.Animation.LayoutTransitionType transitionType, int64 delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.SetStartDelay(Android.Animation.LayoutTransitionType,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetStartDelay : Android.Animation.LayoutTransitionType * int64 -&gt; unit&#xA;override this.SetStartDelay : Android.Animation.LayoutTransitionType * int64 -&gt; unit" Usage="layoutTransition.SetStartDelay (transitionType, delay)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStartDelay", "(IJ)V", "GetSetStartDelay_IJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setStartDelay", "(IJ)V", "GetSetStartDelay_IJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="delay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c>#CHANGE_APPEARING</c>, <c>#CHANGE_DISAPPEARING</c>,
            <c>#CHANGING</c>, <c>#APPEARING</c>, or <c>#DISAPPEARING</c>, which determines
            the animation whose start delay is being set.</param>
        <param name="delay">The length of time, in milliseconds, to delay before starting the animation.</param>
        <summary>Sets the start delay on one of the animation objects used by this transition.</summary>
        <remarks>
          <para>Sets the start delay on one of the animation objects used by this transition. The
            <c>transitionType</c> parameter determines the animation whose start delay
            is being set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#setStartDelay(int,%20long)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.setStartDelay(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.StartDelay" />
      </Docs>
    </Member>
    <Member MemberName="ShowChild">
      <MemberSignature Language="C#" Value="public virtual void ShowChild (Android.Views.ViewGroup? parent, Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.ShowChild(Android.Views.ViewGroup,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ShowChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit&#xA;override this.ShowChild : Android.Views.ViewGroup * Android.Views.View -&gt; unit" Usage="layoutTransition.ShowChild (parent, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="child">To be added.</param>
        <summary>This member is deprecated.</summary>
        <remarks>
          <para>This member is deprecated. Use <c>#showChild(android.view.ViewGroup, android.view.View, int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#showChild(android.view.ViewGroup,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.showChild(android.view.ViewGroup, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ShowChild">
      <MemberSignature Language="C#" Value="public virtual void ShowChild (Android.Views.ViewGroup? parent, Android.Views.View? child, Android.Views.ViewStates oldVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowChild(class Android.Views.ViewGroup parent, class Android.Views.View child, valuetype Android.Views.ViewStates oldVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Animation.LayoutTransition.ShowChild(Android.Views.ViewGroup,Android.Views.View,Android.Views.ViewStates)" />
      <MemberSignature Language="F#" Value="abstract member ShowChild : Android.Views.ViewGroup * Android.Views.View * Android.Views.ViewStates -&gt; unit&#xA;override this.ShowChild : Android.Views.ViewGroup * Android.Views.View * Android.Views.ViewStates -&gt; unit" Usage="layoutTransition.ShowChild (parent, child, oldVisibility)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="oldVisibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup in which the View is being made visible.</param>
        <param name="child">The View being made visible.</param>
        <param name="oldVisibility">The previous visibility value of the child View, either
            <c>View#GONE</c> or <c>View#INVISIBLE</c>.</param>
        <summary>This method is called by ViewGroup when a child view is about to be made visible in the
            container.</summary>
        <remarks>
          <para>This method is called by ViewGroup when a child view is about to be made visible in the
            container. This callback starts the process of a transition; we grab the starting
            values, listen for changes to all of the children of the container, and start appropriate
            animations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#showChild(android.view.ViewGroup,%20android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.showChild(android.view.ViewGroup, android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartTransition">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Animation.LayoutTransition.StartTransitionEventArgs&gt; StartTransition;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Animation.LayoutTransition/StartTransitionEventArgs&gt; StartTransition" />
      <MemberSignature Language="DocId" Value="E:Android.Animation.LayoutTransition.StartTransition" />
      <MemberSignature Language="F#" Value="member this.StartTransition : EventHandler&lt;Android.Animation.LayoutTransition.StartTransitionEventArgs&gt; " Usage="member this.StartTransition : System.EventHandler&lt;Android.Animation.LayoutTransition.StartTransitionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Animation.LayoutTransition+StartTransitionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Animation.LayoutTransition.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Animation.LayoutTransition.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionListeners">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Animation.LayoutTransition.ITransitionListener&gt;? TransitionListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Animation.LayoutTransition/ITransitionListener&gt; TransitionListeners" />
      <MemberSignature Language="DocId" Value="P:Android.Animation.LayoutTransition.TransitionListeners" />
      <MemberSignature Language="F#" Value="member this.TransitionListeners : System.Collections.Generic.IList&lt;Android.Animation.LayoutTransition.ITransitionListener&gt;" Usage="Android.Animation.LayoutTransition.TransitionListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTransitionListeners", "()Ljava/util/List;", "GetGetTransitionListenersHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTransitionListeners", "()Ljava/util/List;", "GetGetTransitionListenersHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Animation.LayoutTransition+ITransitionListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current list of listeners for layout changes.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Gets the current list of listeners for layout changes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/animation/LayoutTransition#getTransitionListeners()" title="Reference documentation">Java documentation for <code>android.animation.LayoutTransition.getTransitionListeners()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
