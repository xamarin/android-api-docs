<Type Name="LayoutTransition" FullName="Android.Animation.LayoutTransition">
  <TypeSignature Language="C#" Value="public class LayoutTransition : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LayoutTransition extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/animation/LayoutTransition", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>This class enables automatic animations on layout changes in ViewGroup objects.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class enables automatic animations on layout changes in ViewGroup objects. To enable
 transitions for a layout container, create a LayoutTransition object and set it on any
 ViewGroup by calling <c><see cref="P:Android.Views.ViewGroup.LayoutTransition" /></c>. This will cause
 default animations to run whenever items are added to or removed from that container. To specify
 custom animations, use the <c><see cref="M:Android.Animation.LayoutTransition.SetAnimator(Android.Animation.LayoutTransitionType,Android.Animation.Animator)" /></c> method.

 </para>
      <para tool="javadoc-to-mdoc">One of the core concepts of these transition animations is that there are two types of
 changes that cause the transition and four different animations that run because of
 those changes. The changes that trigger the transition are items being added to a container
 (referred to as an "appearing" transition) or removed from a container (also known as
 "disappearing"). Setting the visibility of views (between GONE and VISIBLE) will trigger
 the same add/remove logic. The animations that run due to those events are one that animates
 items being added, one that animates items being removed, and two that animate the other
 items in the container that change due to the add/remove occurrence. Users of
 the transition may want different animations for the changing items depending on whether
 they are changing due to an appearing or disappearing event, so there is one animation for
 each of these variations of the changing event. Most of the API of this class is concerned
 with setting up the basic properties of the animations used in these four situations,
 or with setting up custom animations for any or all of the four.</para>
      <para tool="javadoc-to-mdoc">By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING
 animation. The other animations begin after a delay that is set to the default duration
 of the animations. This behavior facilitates a sequence of animations in transitions as
 follows: when an item is being added to a layout, the other children of that container will
 move first (thus creating space for the new item), then the appearing animation will run to
 animate the item being added. Conversely, when an item is removed from a container, the
 animation to remove it will run first, then the animations of the other children in the
 layout will run (closing the gap created in the layout when the item was removed). If this
 default choreography behavior is not desired, the <c><see cref="M:Android.Animation.LayoutTransition.SetDuration(Android.Animation.LayoutTransitionType,System.Int64)" /></c> and
 <c><see cref="M:Android.Animation.LayoutTransition.SetStartDelay(Android.Animation.LayoutTransitionType,System.Int64)" /></c> of any or all of the animations can be changed as
 appropriate.</para>
      <para tool="javadoc-to-mdoc">The animations specified for the transition, both the defaults and any custom animations
 set on the transition object, are templates only. That is, these animations exist to hold the
 basic animation properties, such as the duration, start delay, and properties being animated.
 But the actual target object, as well as the start and end values for those properties, are
 set automatically in the process of setting up the transition each time it runs. Each of the
 animations is cloned from the original copy and the clone is then populated with the dynamic
 values of the target being animated (such as one of the items in a layout container that is
 moving as a result of the layout event) as well as the values that are changing (such as the
 position and size of that object). The actual values that are pushed to each animation
 depends on what properties are specified for the animation. For example, the default
 CHANGE_APPEARING animation animates the <c>left</c>, <c>top</c>, <c>right</c>,
 <c>bottom</c>, <c>scrollX</c>, and <c>scrollY</c> properties.
 Values for these properties are updated with the pre- and post-layout
 values when the transition begins. Custom animations will be similarly populated with
 the target and values being animated, assuming they use ObjectAnimator objects with
 property names that are known on the target object.</para>
      <para tool="javadoc-to-mdoc">This class, and the associated XML flag for containers, animateLayoutChanges="true",
 provides a simple utility meant for automating changes in straightforward situations.
 Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the
 interrelationship of the various levels of layout. Also, a container that is being scrolled
 at the same time as items are being added or removed is probably not a good candidate for
 this utility, because the before/after locations calculated by LayoutTransition
 may not match the actual locations when the animations finish due to the container
 being scrolled as the animations are running. You can work around that
 particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING
 and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the
 other animations appropriately.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LayoutTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a LayoutTransition object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a LayoutTransition object. By default, the object will listen to layout
 events on any ViewGroup that it is set on and will run default animations for each
 type of layout event.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#LayoutTransition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LayoutTransition (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (Android.Views.ViewGroup parent, Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetAddChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup to which the View is being added.</param>
        <param name="child">The View being added to the ViewGroup.
</param>
        <summary>This method is called by ViewGroup when a child view is about to be added to the
 container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called by ViewGroup when a child view is about to be added to the
 container. This callback starts the process of a transition; we grab the starting
 values, listen for changes to all of the children of the container, and start appropriate
 animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#addChild(android.view.ViewGroup, android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddTransitionListener">
      <MemberSignature Language="C#" Value="public virtual void AddTransitionListener (Android.Animation.LayoutTransition.ITransitionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTransitionListener(class Android.Animation.LayoutTransition/ITransitionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetAddTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Animation.LayoutTransition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be called when layout bounds change.
</param>
        <summary>Add a listener that will be called when the bounds of the view change due to
 layout processing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a listener that will be called when the bounds of the view change due to
 layout processing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#addTransitionListener(android.animation.LayoutTransition.TransitionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Appearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Appearing = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Appearing = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("APPEARING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are appearing
 in the container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A flag indicating the animation that runs on those items that are appearing
 in the container.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#APPEARING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeAppearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType ChangeAppearing = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType ChangeAppearing = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CHANGE_APPEARING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
 due to a new item appearing in the container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A flag indicating the animation that runs on those items that are changing
 due to a new item appearing in the container.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#CHANGE_APPEARING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeDisappearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType ChangeDisappearing = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType ChangeDisappearing = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CHANGE_DISAPPEARING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
 due to an item disappearing from the container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A flag indicating the animation that runs on those items that are changing
 due to an item disappearing from the container.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#CHANGE_DISAPPEARING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Changing = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Changing = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CHANGING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are changing
 due to a layout change not caused by items being added to or removed
 from the container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A flag indicating the animation that runs on those items that are changing
 due to a layout change not caused by items being added to or removed
 from the container. This transition type is not enabled by default; it can be
 enabled via <c><see cref="M:Android.Animation.LayoutTransition.EnableTransitionType(Android.Animation.LayoutTransitionType)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#CHANGING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableTransitionType">
      <MemberSignature Language="C#" Value="public virtual void DisableTransitionType (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableTransitionType(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disableTransitionType", "(I)V", "GetDisableTransitionType_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>.
</param>
        <summary>Disables the specified transitionType for this LayoutTransition object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the specified transitionType for this LayoutTransition object.
 By default, all transition types except <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c> are enabled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#disableTransitionType(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Disappearing">
      <MemberSignature Language="C#" Value="public const Android.Animation.LayoutTransitionType Disappearing = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Animation.LayoutTransitionType Disappearing = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DISAPPEARING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Animation.LayoutTransitionType enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransitionType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>A flag indicating the animation that runs on those items that are disappearing
 from the container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A flag indicating the animation that runs on those items that are disappearing
 from the container.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#DISAPPEARING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTransitionType">
      <MemberSignature Language="C#" Value="public virtual void EnableTransitionType (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableTransitionType(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableTransitionType", "(I)V", "GetEnableTransitionType_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>.
</param>
        <summary>Enables the specified transitionType for this LayoutTransition object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enables the specified transitionType for this LayoutTransition object.
 By default, a LayoutTransition listens for changes in children being
 added/remove/hidden/shown in the container, and runs the animations associated with
 those events. That is, all transition types besides <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c> are enabled by default.
 You can also enable <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c> animations by calling this method with the
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c> transitionType.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#enableTransitionType(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="EndTransition">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Animation.LayoutTransition.EndTransitionEventArgs&gt; EndTransition;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Animation.LayoutTransition/EndTransitionEventArgs&gt; EndTransition" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Animation.LayoutTransition+EndTransitionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator GetAnimator (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator GetAnimator(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAnimator", "(I)Landroid/animation/Animator;", "GetGetAnimator_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose animator is being returned.</param>
        <summary>Gets the animation used during one of the transition types that may run.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the animation used during one of the transition types that may run.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getAnimator(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.LayoutTransition.SetAnimator(Android.Animation.LayoutTransitionType, Android.Animation.Animator)" />
      </Docs>
    </Member>
    <Member MemberName="GetDuration">
      <MemberSignature Language="C#" Value="public virtual long GetDuration (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetDuration(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDuration", "(I)J", "GetGetDuration_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose duration is returned.</param>
        <summary>Gets the duration on one of the animation objects used by this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the duration on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose duration
 is returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getDuration(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.Duration" />
      </Docs>
    </Member>
    <Member MemberName="GetInterpolator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.ITimeInterpolator GetInterpolator (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.ITimeInterpolator GetInterpolator(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInterpolator", "(I)Landroid/animation/TimeInterpolator;", "GetGetInterpolator_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.ITimeInterpolator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose interpolator is being returned.</param>
        <summary>Gets the interpolator on one of the animation objects used by this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the interpolator on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose interpolator
 is returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getInterpolator(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetInterpolator(Android.Animation.ITimeInterpolator)" />
      </Docs>
    </Member>
    <Member MemberName="GetStagger">
      <MemberSignature Language="C#" Value="public virtual long GetStagger (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetStagger(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStagger", "(I)J", "GetGetStagger_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">A value of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>, or
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>.</param>
        <summary>Gets the length of time to delay between starting each animation during one of the
 change animations.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the length of time to delay between starting each animation during one of the
 change animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getStagger(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetStartDelay">
      <MemberSignature Language="C#" Value="public virtual long GetStartDelay (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetStartDelay(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStartDelay", "(I)J", "GetGetStartDelay_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose start delay is returned.</param>
        <summary>Gets the start delay on one of the animation objects used by this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the start delay on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose start delay
 is returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getStartDelay(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.StartDelay" />
      </Docs>
    </Member>
    <Member MemberName="HideChild">
      <MemberSignature Language="C#" Value="public virtual void HideChild (Android.Views.ViewGroup parent, Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HideChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="child">To be added.</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#hideChild(android.view.ViewGroup, android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="HideChild">
      <MemberSignature Language="C#" Value="public virtual void HideChild (Android.Views.ViewGroup parent, Android.Views.View child, Android.Views.ViewStates newVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HideChild(class Android.Views.ViewGroup parent, class Android.Views.View child, valuetype Android.Views.ViewStates newVisibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hideChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetHideChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="newVisibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parent">The parent ViewGroup of the View being hidden.</param>
        <param name="child">The View being hidden.</param>
        <param name="newVisibility">The new visibility value of the child View, either
 <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>This method is called by ViewGroup when a child view is about to be hidden in
 container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called by ViewGroup when a child view is about to be hidden in
 container. This callback starts the process of a transition; we grab the starting
 values, listen for changes to all of the children of the container, and start appropriate
 animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#hideChild(android.view.ViewGroup, android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="IsChangingLayout">
      <MemberSignature Language="C#" Value="public virtual bool IsChangingLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChangingLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isChangingLayout", "()Z", "GetIsChangingLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if animations are running which animate layout-related properties.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if animations are running which animate layout-related properties. This
 essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations
 are running, since these animations operate on layout-related properties.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#isChangingLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public virtual bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRunning", "()Z", "GetIsRunningHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if any of the animations in this transition are currently running.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if any of the animations in this transition are currently running.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#isRunning()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsTransitionTypeEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsTransitionTypeEnabled (Android.Animation.LayoutTransitionType transitionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsTransitionTypeEnabled(valuetype Android.Animation.LayoutTransitionType transitionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isTransitionTypeEnabled", "(I)Z", "GetIsTransitionTypeEnabled_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>.</param>
        <summary>Returns whether the specified transitionType is enabled for this LayoutTransition object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the specified transitionType is enabled for this LayoutTransition object.
 By default, all transition types except <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c> are enabled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#isTransitionTypeEnabled(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual void RemoveChild (Android.Views.ViewGroup parent, Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetRemoveChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup from which the View is being removed.</param>
        <param name="child">The View being removed from the ViewGroup.
</param>
        <summary>This method is called by ViewGroup when a child view is about to be removed from the
 container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called by ViewGroup when a child view is about to be removed from the
 container. This callback starts the process of a transition; we grab the starting
 values, listen for changes to all of the children of the container, and start appropriate
 animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#removeChild(android.view.ViewGroup, android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RemoveTransitionListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveTransitionListener (Android.Animation.LayoutTransition.ITransitionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTransitionListener(class Android.Animation.LayoutTransition/ITransitionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeTransitionListener", "(Landroid/animation/LayoutTransition$TransitionListener;)V", "GetRemoveTransitionListener_Landroid_animation_LayoutTransition_TransitionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Animation.LayoutTransition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener for layout bounds change.
</param>
        <summary>Remove a listener for layout changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a listener for layout changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#removeTransitionListener(android.animation.LayoutTransition.TransitionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetAnimateParentHierarchy">
      <MemberSignature Language="C#" Value="public virtual void SetAnimateParentHierarchy (bool animateParentHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAnimateParentHierarchy(bool animateParentHierarchy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAnimateParentHierarchy", "(Z)V", "GetSetAnimateParentHierarchy_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animateParentHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animateParentHierarchy">A boolean value indicating whether the parents of
 transitioning views should also be animated during the transition. Default value is true.
</param>
        <summary>This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
 cause the default changing animation to be run on the parent hierarchy as well.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will
 cause the default changing animation to be run on the parent hierarchy as well. This allows
 containers of transitioning views to also transition, which may be necessary in situations
 where the containers bounds change between the before/after states and may clip their
 children during the transition animations. For example, layouts with wrap_content will
 adjust their bounds according to the dimensions of their children.

 </para>
          <para tool="javadoc-to-mdoc">The default changing transitions animate the bounds and scroll positions of the
 target views. These are the animations that will run on the parent hierarchy, not
 the custom animations that happen to be set on the transition. This allows custom
 behavior for the children of the transitioning container, but uses standard behavior
 of resizing/rescrolling on any changing parents.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setAnimateParentHierarchy(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetAnimator">
      <MemberSignature Language="C#" Value="public virtual void SetAnimator (Android.Animation.LayoutTransitionType transitionType, Android.Animation.Animator animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAnimator(valuetype Android.Animation.LayoutTransitionType transitionType, class Android.Animation.Animator animator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAnimator", "(ILandroid/animation/Animator;)V", "GetSetAnimator_ILandroid_animation_Animator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="animator" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines the
 animation whose animator is being set.</param>
        <param name="animator">The animation being assigned. A value of <c>null</c> means that no
 animation will be run for the specified transitionType.
</param>
        <summary>Sets the animation used during one of the transition types that may run.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the animation used during one of the transition types that may run. Any
 Animator object can be used, but to be most useful in the context of layout
 transitions, the animation should either be a ObjectAnimator or a AnimatorSet
 of animations including PropertyAnimators. Also, these ObjectAnimator objects
 should be able to get and set values on their target objects automatically. For
 example, a ObjectAnimator that animates the property "left" is able to set and get the
 <c>left</c> property from the View objects being animated by the layout
 transition. The transition works by setting target objects and properties
 dynamically, according to the pre- and post-layoout values of those objects, so
 having animations that can handle those properties appropriately will work best
 for custom animation. The dynamic setting of values is only the case for the
 CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with
 the values they have.

 </para>
          <para tool="javadoc-to-mdoc">It is also worth noting that any and all animations (and their underlying
 PropertyValuesHolder objects) will have their start and end values set according
 to the pre- and post-layout values. So, for example, a custom animation on "alpha"
 as the CHANGE_APPEARING animation will inherit the real value of alpha on the target
 object (presumably 1) as its starting and ending value when the animation begins.
 Animations which need to use values at the beginning and end that may not match the
 values queried when the transition begins may need to use a different mechanism
 than a standard ObjectAnimator object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setAnimator(int, android.animation.Animator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public virtual void SetDuration (long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDuration(int64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDuration", "(J)V", "GetSetDuration_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="duration">The length of time, in milliseconds, that the transition animations
 should last.
</param>
        <summary tool="true">Sets the duration to be used by all animations of this transition object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the duration to be used by all animations of this transition object. If you want to
 set the duration of just one of the animations in particular, use the
 <c><see cref="M:Android.Animation.LayoutTransition.SetDuration(Android.Animation.LayoutTransitionType,System.Int64)" /></c> method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setDuration(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public virtual void SetDuration (Android.Animation.LayoutTransitionType transitionType, long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDuration(valuetype Android.Animation.LayoutTransitionType transitionType, int64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDuration", "(IJ)V", "GetSetDuration_IJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose duration is being set.</param>
        <param name="duration">The length of time, in milliseconds, that the specified animation should run.</param>
        <summary>Sets the duration on one of the animation objects used by this transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the duration on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose duration
 is being set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setDuration(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetDuration(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="SetInterpolator">
      <MemberSignature Language="C#" Value="public virtual void SetInterpolator (Android.Animation.LayoutTransitionType transitionType, Android.Animation.ITimeInterpolator interpolator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInterpolator(valuetype Android.Animation.LayoutTransitionType transitionType, class Android.Animation.ITimeInterpolator interpolator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInterpolator", "(ILandroid/animation/TimeInterpolator;)V", "GetSetInterpolator_ILandroid_animation_TimeInterpolator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="interpolator" Type="Android.Animation.ITimeInterpolator" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose interpolator is being set.</param>
        <param name="interpolator">The interpolator that the specified animation should use.</param>
        <summary>Sets the interpolator on one of the animation objects used by this transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the interpolator on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose interpolator
 is being set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setInterpolator(int, android.animation.TimeInterpolator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Animation.Animator.SetInterpolator(Android.Animation.ITimeInterpolator)" />
      </Docs>
    </Member>
    <Member MemberName="SetStagger">
      <MemberSignature Language="C#" Value="public virtual void SetStagger (Android.Animation.LayoutTransitionType transitionType, long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStagger(valuetype Android.Animation.LayoutTransitionType transitionType, int64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStagger", "(IJ)V", "GetSetStagger_IJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">A value of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>, or
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>.</param>
        <param name="duration">The length of time, in milliseconds, to delay before launching the next
 animation in the sequence.
</param>
        <summary>Sets the length of time to delay between starting each animation during one of the
 change animations.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the length of time to delay between starting each animation during one of the
 change animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setStagger(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetStartDelay">
      <MemberSignature Language="C#" Value="public virtual void SetStartDelay (Android.Animation.LayoutTransitionType transitionType, long delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStartDelay(valuetype Android.Animation.LayoutTransitionType transitionType, int64 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStartDelay", "(IJ)V", "GetSetStartDelay_IJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionType" Type="Android.Animation.LayoutTransitionType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="delay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transitionType">One of <c><see cref="F:Android.Animation.LayoutTransition.ChangeAppearing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.ChangeDisappearing" /></c>,
 <c><see cref="F:Android.Animation.LayoutTransition.Changing" /></c>, <c><see cref="F:Android.Animation.LayoutTransition.Appearing" /></c>, or <c><see cref="F:Android.Animation.LayoutTransition.Disappearing" /></c>, which determines
 the animation whose start delay is being set.</param>
        <param name="delay">The length of time, in milliseconds, to delay before starting the animation.</param>
        <summary>Sets the start delay on one of the animation objects used by this transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the start delay on one of the animation objects used by this transition. The
 <c>transitionType</c> parameter determines the animation whose start delay
 is being set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#setStartDelay(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="P:Android.Animation.Animator.StartDelay" />
      </Docs>
    </Member>
    <Member MemberName="ShowChild">
      <MemberSignature Language="C#" Value="public virtual void ShowChild (Android.Views.ViewGroup parent, Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowChild(class Android.Views.ViewGroup parent, class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="child">To be added.</param>
        <summary tool="true">
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#showChild(android.view.ViewGroup, android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ShowChild">
      <MemberSignature Language="C#" Value="public virtual void ShowChild (Android.Views.ViewGroup parent, Android.Views.View child, Android.Views.ViewStates oldVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowChild(class Android.Views.ViewGroup parent, class Android.Views.View child, valuetype Android.Views.ViewStates oldVisibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showChild", "(Landroid/view/ViewGroup;Landroid/view/View;I)V", "GetShowChild_Landroid_view_ViewGroup_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.ViewGroup" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="oldVisibility" Type="Android.Views.ViewStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parent">The ViewGroup in which the View is being made visible.</param>
        <param name="child">The View being made visible.</param>
        <param name="oldVisibility">The previous visibility value of the child View, either
 <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>This method is called by ViewGroup when a child view is about to be made visible in the
 container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called by ViewGroup when a child view is about to be made visible in the
 container. This callback starts the process of a transition; we grab the starting
 values, listen for changes to all of the children of the container, and start appropriate
 animations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#showChild(android.view.ViewGroup, android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartTransition">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Animation.LayoutTransition.StartTransitionEventArgs&gt; StartTransition;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Animation.LayoutTransition/StartTransitionEventArgs&gt; StartTransition" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Animation.LayoutTransition+StartTransitionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionListeners">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Animation.LayoutTransition.ITransitionListener&gt; TransitionListeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Animation.LayoutTransition/ITransitionListener&gt; TransitionListeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTransitionListeners", "()Ljava/util/List;", "GetGetTransitionListenersHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Animation.LayoutTransition+ITransitionListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current list of listeners for layout changes.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the current list of listeners for layout changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/LayoutTransition.html#getTransitionListeners()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
