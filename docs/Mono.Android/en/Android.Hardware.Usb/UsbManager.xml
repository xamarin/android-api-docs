<Type Name="UsbManager" FullName="Android.Hardware.Usb.UsbManager">
  <TypeSignature Language="C#" Value="public class UsbManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UsbManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/usb/UsbManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="12">
    <summary>This class allows you to access the state of USB and communicate with USB devices.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class allows you to access the state of USB and communicate with USB devices.
 Currently only host mode is supported in the public API.

 </para>
      <para tool="javadoc-to-mdoc">You can obtain an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>.

 <example><code lang="java">UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);</code></example><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about communicating with USB hardware, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/usb/index.html">USB</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 12" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UsbManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionUsbAccessoryAttached">
      <MemberSignature Language="C#" Value="public const string ActionUsbAccessoryAttached;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionUsbAccessoryAttached" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_USB_ACCESSORY_ATTACHED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A broadcast for USB accessory attached event.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A broadcast for USB accessory attached event.

 This intent is sent when a USB accessory is attached.
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraAccessory" /></c> containing the <c><see cref="T:Android.Hardware.Usb.UsbAccessory" /></c>
 for the attached accessory
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#ACTION_USB_ACCESSORY_ATTACHED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ActionUsbAccessoryDetached">
      <MemberSignature Language="C#" Value="public const string ActionUsbAccessoryDetached;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionUsbAccessoryDetached" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_USB_ACCESSORY_DETACHED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A broadcast for USB accessory detached event.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A broadcast for USB accessory detached event.

 This intent is sent when a USB accessory is detached.
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraAccessory" /></c> containing the <c><see cref="T:Android.Hardware.Usb.UsbAccessory" /></c>
 for the attached accessory that was detached
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#ACTION_USB_ACCESSORY_DETACHED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ActionUsbDeviceAttached">
      <MemberSignature Language="C#" Value="public const string ActionUsbDeviceAttached;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionUsbDeviceAttached" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_USB_DEVICE_ATTACHED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A broadcast for USB device attached event.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A broadcast for USB device attached event.

 This intent is sent when a USB device is attached to the USB bus when in host mode.
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraDevice" /></c> containing the <c><see cref="T:Android.Hardware.Usb.UsbDevice" /></c>
 for the attached device
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#ACTION_USB_DEVICE_ATTACHED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ActionUsbDeviceDetached">
      <MemberSignature Language="C#" Value="public const string ActionUsbDeviceDetached;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionUsbDeviceDetached" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_USB_DEVICE_DETACHED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A broadcast for USB device detached event.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A broadcast for USB device detached event.

 This intent is sent when a USB device is detached from the USB bus when in host mode.
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraDevice" /></c> containing the <c><see cref="T:Android.Hardware.Usb.UsbDevice" /></c>
 for the detached device
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#ACTION_USB_DEVICE_DETACHED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="DeviceList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;string,Android.Hardware.Usb.UsbDevice&gt; DeviceList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class Android.Hardware.Usb.UsbDevice&gt; DeviceList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDeviceList", "()Ljava/util/HashMap;", "GetGetDeviceListHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Android.Hardware.Usb.UsbDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a HashMap containing all USB devices currently attached.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a HashMap containing all USB devices currently attached.
 USB device name is the key for the returned HashMap.
 The result will be empty if no devices are attached, or if
 USB host mode is inactive or unsupported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#getDeviceList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ExtraAccessory">
      <MemberSignature Language="C#" Value="public const string ExtraAccessory;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAccessory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ACCESSORY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of extra for <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbAccessoryAttached" /></c> and
 <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbAccessoryDetached" /></c> broadcasts
 containing the <c><see cref="T:Android.Hardware.Usb.UsbAccessory" /></c> object for the accessory.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name of extra for <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbAccessoryAttached" /></c> and
 <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbAccessoryDetached" /></c> broadcasts
 containing the <c><see cref="T:Android.Hardware.Usb.UsbAccessory" /></c> object for the accessory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#EXTRA_ACCESSORY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ExtraDevice">
      <MemberSignature Language="C#" Value="public const string ExtraDevice;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraDevice" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_DEVICE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of extra for <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbDeviceAttached" /></c> and
 <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbDeviceDetached" /></c> broadcasts
 containing the <c><see cref="T:Android.Hardware.Usb.UsbDevice" /></c> object for the device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name of extra for <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbDeviceAttached" /></c> and
 <c><see cref="F:Android.Hardware.Usb.UsbManager.ActionUsbDeviceDetached" /></c> broadcasts
 containing the <c><see cref="T:Android.Hardware.Usb.UsbDevice" /></c> object for the device.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#EXTRA_DEVICE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ExtraPermissionGranted">
      <MemberSignature Language="C#" Value="public const string ExtraPermissionGranted;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraPermissionGranted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PERMISSION_GRANTED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of extra added to the <c><see cref="T:Android.App.PendingIntent" /></c>
 passed into <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbDevice,Android.App.PendingIntent)" /></c>
 or <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbAccessory,Android.App.PendingIntent)" /></c>
 containing a boolean value indicating whether the user granted permission or not.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name of extra added to the <c><see cref="T:Android.App.PendingIntent" /></c>
 passed into <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbDevice,Android.App.PendingIntent)" /></c>
 or <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbAccessory,Android.App.PendingIntent)" /></c>
 containing a boolean value indicating whether the user granted permission or not.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#EXTRA_PERMISSION_GRANTED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessoryList">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Usb.UsbAccessory[] GetAccessoryList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Usb.UsbAccessory[] GetAccessoryList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAccessoryList", "()[Landroid/hardware/usb/UsbAccessory;", "GetGetAccessoryListHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Usb.UsbAccessory[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns a list of currently attached USB accessories.
 (in the current implementation there can be at most one)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a list of currently attached USB accessories.
 (in the current implementation there can be at most one)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#getAccessoryList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="HasPermission">
      <MemberSignature Language="C#" Value="public virtual bool HasPermission (Android.Hardware.Usb.UsbAccessory accessory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasPermission(class Android.Hardware.Usb.UsbAccessory accessory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasPermission", "(Landroid/hardware/usb/UsbAccessory;)Z", "GetHasPermission_Landroid_hardware_usb_UsbAccessory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="Android.Hardware.Usb.UsbAccessory" />
      </Parameters>
      <Docs>
        <param name="accessory">to check permissions for</param>
        <summary tool="true">Returns true if the caller has permission to access the accessory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the caller has permission to access the accessory.
 Permission might have been granted temporarily via
 <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbAccessory,Android.App.PendingIntent)" /></c> or
 by the user choosing the caller as the default application for the accessory.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#hasPermission(android.hardware.usb.UsbAccessory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="HasPermission">
      <MemberSignature Language="C#" Value="public virtual bool HasPermission (Android.Hardware.Usb.UsbDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasPermission(class Android.Hardware.Usb.UsbDevice device) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasPermission", "(Landroid/hardware/usb/UsbDevice;)Z", "GetHasPermission_Landroid_hardware_usb_UsbDevice_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Android.Hardware.Usb.UsbDevice" />
      </Parameters>
      <Docs>
        <param name="device">to check permissions for</param>
        <summary>Returns true if the caller has permission to access the device.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the caller has permission to access the device.
 Permission might have been granted temporarily via
 <c><see cref="M:Android.Hardware.Usb.UsbManager.RequestPermission(Android.Hardware.Usb.UsbDevice,Android.App.PendingIntent)" /></c> or
 by the user choosing the caller as the default application for the device.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#hasPermission(android.hardware.usb.UsbDevice)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OpenAccessory">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenAccessory (Android.Hardware.Usb.UsbAccessory accessory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenAccessory(class Android.Hardware.Usb.UsbAccessory accessory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAccessory", "(Landroid/hardware/usb/UsbAccessory;)Landroid/os/ParcelFileDescriptor;", "GetOpenAccessory_Landroid_hardware_usb_UsbAccessory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="Android.Hardware.Usb.UsbAccessory" />
      </Parameters>
      <Docs>
        <param name="accessory">the USB accessory to open</param>
        <summary>Opens a file descriptor for reading and writing data to the USB accessory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Opens a file descriptor for reading and writing data to the USB accessory.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#openAccessory(android.hardware.usb.UsbAccessory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OpenDevice">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Usb.UsbDeviceConnection OpenDevice (Android.Hardware.Usb.UsbDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Usb.UsbDeviceConnection OpenDevice(class Android.Hardware.Usb.UsbDevice device) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDevice", "(Landroid/hardware/usb/UsbDevice;)Landroid/hardware/usb/UsbDeviceConnection;", "GetOpenDevice_Landroid_hardware_usb_UsbDevice_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Usb.UsbDeviceConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Android.Hardware.Usb.UsbDevice" />
      </Parameters>
      <Docs>
        <param name="device">the device to open</param>
        <summary>Opens the device so it can be used to send and receive
 data using <c><see cref="T:Android.Hardware.Usb.UsbRequest" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Opens the device so it can be used to send and receive
 data using <c><see cref="T:Android.Hardware.Usb.UsbRequest" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#openDevice(android.hardware.usb.UsbDevice)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="RequestPermission">
      <MemberSignature Language="C#" Value="public virtual void RequestPermission (Android.Hardware.Usb.UsbAccessory accessory, Android.App.PendingIntent pi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestPermission(class Android.Hardware.Usb.UsbAccessory accessory, class Android.App.PendingIntent pi) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestPermission", "(Landroid/hardware/usb/UsbAccessory;Landroid/app/PendingIntent;)V", "GetRequestPermission_Landroid_hardware_usb_UsbAccessory_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="Android.Hardware.Usb.UsbAccessory" />
        <Parameter Name="pi" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="accessory">to request permissions for</param>
        <param name="pi">PendingIntent for returning result
</param>
        <summary tool="true">Requests temporary permission for the given package to access the accessory.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Requests temporary permission for the given package to access the accessory.
 This may result in a system dialog being displayed to the user
 if permission had not already been granted.
 Success or failure is returned via the <c><see cref="T:Android.App.PendingIntent" /></c> pi.
 If successful, this grants the caller permission to access the accessory only
 until the device is disconnected.

 The following extras will be added to pi:
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraAccessory" /></c> containing the accessory passed into this call
 </term></item><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraPermissionGranted" /></c> containing boolean indicating whether
 permission was granted by the user
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#requestPermission(android.hardware.usb.UsbAccessory, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="RequestPermission">
      <MemberSignature Language="C#" Value="public virtual void RequestPermission (Android.Hardware.Usb.UsbDevice device, Android.App.PendingIntent pi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestPermission(class Android.Hardware.Usb.UsbDevice device, class Android.App.PendingIntent pi) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestPermission", "(Landroid/hardware/usb/UsbDevice;Landroid/app/PendingIntent;)V", "GetRequestPermission_Landroid_hardware_usb_UsbDevice_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Android.Hardware.Usb.UsbDevice" />
        <Parameter Name="pi" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="device">to request permissions for</param>
        <param name="pi">PendingIntent for returning result
</param>
        <summary>Requests temporary permission for the given package to access the device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Requests temporary permission for the given package to access the device.
 This may result in a system dialog being displayed to the user
 if permission had not already been granted.
 Success or failure is returned via the <c><see cref="T:Android.App.PendingIntent" /></c> pi.
 If successful, this grants the caller permission to access the device only
 until the device is disconnected.

 The following extras will be added to pi:
 <list type="bullet"><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraDevice" /></c> containing the device passed into this call
 </term></item><item><term><c><see cref="F:Android.Hardware.Usb.UsbManager.ExtraPermissionGranted" /></c> containing boolean indicating whether
 permission was granted by the user
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/usb/UsbManager.html#requestPermission(android.hardware.usb.UsbDevice, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
