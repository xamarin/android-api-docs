<Type Name="RippleDrawable" FullName="Android.Graphics.Drawables.RippleDrawable">
  <TypeSignature Language="C#" Value="public class RippleDrawable : Android.Graphics.Drawables.LayerDrawable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RippleDrawable extends Android.Graphics.Drawables.LayerDrawable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.LayerDrawable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/drawable/RippleDrawable", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Drawable that shows a ripple effect in response to state changes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Drawable that shows a ripple effect in response to state changes. The
 anchoring position of the ripple for a given state may be specified by
 calling <c><see cref="!:Android.Graphics.Drawables.RippleDrawable.setHotspot(float,float)" /></c> with the corresponding state
 attribute identifier.
 </para>
      <para tool="javadoc-to-mdoc">
 A touch feedback drawable may contain multiple child layers, including a
 special mask layer that is not drawn to the screen. A single layer may be
 set as the mask from XML by specifying its <c>android:id</c> value as
 <c><see cref="!:NoType:android/R$id;Href=../../../../reference/android/R.id.html#mask" /></c>. At run time, a single layer may be set as the
 mask using <c>setId(..., android.R.id.mask)</c> or an existing mask layer
 may be replaced using <c>setDrawableByLayerId(android.R.id.mask, ...)</c>.
 <sample external-id="35D9F77687AAC49DAD0EB22C0F951D42" /></para>
      <para tool="javadoc-to-mdoc">
 If a mask layer is set, the ripple effect will be masked against that layer
 before it is drawn over the composite of the remaining child layers.
 </para>
      <para tool="javadoc-to-mdoc">
 If no mask layer is set, the ripple effect is masked against the composite
 of the child layers.
 <sample external-id="B14D80CD602C1E9B8FA38B58BBF5C3B7" /></para>
      <para tool="javadoc-to-mdoc">
 If no child layers or mask is specified and the ripple is set as a View
 background, the ripple will be drawn atop the first available parent
 background within the View's hierarchy. In this case, the drawing region
 may extend outside of the Drawable bounds.
 <sample external-id="E7CB83B7A6F411B20A8EE3638C58D1C5" /></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RippleDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RippleDrawable (Android.Content.Res.ColorStateList color, Android.Graphics.Drawables.Drawable content, Android.Graphics.Drawables.Drawable mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Res.ColorStateList color, class Android.Graphics.Drawables.Drawable content, class Android.Graphics.Drawables.Drawable mask) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/res/ColorStateList;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="Android.Content.Res.ColorStateList" />
        <Parameter Name="content" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="mask" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="color">The ripple color.</param>
        <param name="content">The content drawable, may be <c>null</c>.</param>
        <param name="mask">The mask drawable, may be <c>null</c>.</param>
        <summary>Creates a new ripple drawable with the specified ripple color and
 optional content and mask drawables.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new ripple drawable with the specified ripple color and
 optional content and mask drawables.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html#RippleDrawable(android.content.res.ColorStateList, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColor">
      <MemberSignature Language="C#" Value="public virtual void SetColor (Android.Content.Res.ColorStateList color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColor(class Android.Content.Res.ColorStateList color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setColor", "(Landroid/content/res/ColorStateList;)V", "GetSetColor_Landroid_content_res_ColorStateList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="Android.Content.Res.ColorStateList" />
      </Parameters>
      <Docs>
        <param name="color">Ripple color as a color state list.</param>
        <summary>Sets the ripple color.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the ripple color.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html#setColor(android.content.res.ColorStateList)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
