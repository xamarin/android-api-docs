<Type Name="VectorDrawable" FullName="Android.Graphics.Drawables.VectorDrawable">
  <TypeSignature Language="C#" Value="public class VectorDrawable : Android.Graphics.Drawables.Drawable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorDrawable extends Android.Graphics.Drawables.Drawable" />
  <TypeSignature Language="DocId" Value="T:Android.Graphics.Drawables.VectorDrawable" />
  <TypeSignature Language="F#" Value="type VectorDrawable = class&#xA;    inherit Drawable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.Drawable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/graphics/drawable/VectorDrawable", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/graphics/drawable/VectorDrawable", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This lets you create a drawable based on an XML vector graphic.</summary>
    <remarks>
      <para>This lets you create a drawable based on an XML vector graphic.
            &lt;p/&gt;
            &lt;strong&gt;Note:&lt;/strong&gt; To optimize for the re-drawing performance, one bitmap cache is created
            for each VectorDrawable. Therefore, referring to the same VectorDrawable means sharing the same
            bitmap cache. If these references don't agree upon on the same size, the bitmap will be recreated
            and redrawn every time size is changed. In other words, if a VectorDrawable is used for
            different sizes, it is more efficient to create multiple VectorDrawables, one for each size.
            &lt;p/&gt;
            VectorDrawable can be defined in an XML file with the <c>&amp;lt;vector&gt;</c> element.
            &lt;p/&gt;
            The vector drawable has the following elements:
            &lt;p/&gt;
            &lt;dt&gt;<c>&amp;lt;vector&gt;</c>&lt;/dt&gt;
            &lt;dl&gt;
            &lt;dd&gt;Used to define a vector drawable
            &lt;dl&gt;
            &lt;dt&gt;<c>android:name</c>&lt;/dt&gt;
            &lt;dd&gt;Defines the name of this vector drawable.&lt;/dd&gt;
            &lt;dt&gt;<c>android:width</c>&lt;/dt&gt;
            &lt;dd&gt;Used to define the intrinsic width of the drawable.
            This supports all the dimension units, normally specified with dp.&lt;/dd&gt;
            &lt;dt&gt;<c>android:height</c>&lt;/dt&gt;
            &lt;dd&gt;Used to define the intrinsic height of the drawable.
            This supports all the dimension units, normally specified with dp.&lt;/dd&gt;
            &lt;dt&gt;<c>android:viewportWidth</c>&lt;/dt&gt;
            &lt;dd&gt;Used to define the width of the viewport space. Viewport is basically
            the virtual canvas where the paths are drawn on.&lt;/dd&gt;
            &lt;dt&gt;<c>android:viewportHeight</c>&lt;/dt&gt;
            &lt;dd&gt;Used to define the height of the viewport space. Viewport is basically
            the virtual canvas where the paths are drawn on.&lt;/dd&gt;
            &lt;dt&gt;<c>android:tint</c>&lt;/dt&gt;
            &lt;dd&gt;The color to apply to the drawable as a tint. By default, no tint is applied.&lt;/dd&gt;
            &lt;dt&gt;<c>android:tintMode</c>&lt;/dt&gt;
            &lt;dd&gt;The Porter-Duff blending mode for the tint color. Default is src_in.&lt;/dd&gt;
            &lt;dt&gt;<c>android:autoMirrored</c>&lt;/dt&gt;
            &lt;dd&gt;Indicates if the drawable needs to be mirrored when its layout direction is
            RTL (right-to-left). Default is false.&lt;/dd&gt;
            &lt;dt&gt;<c>android:alpha</c>&lt;/dt&gt;
            &lt;dd&gt;The opacity of this drawable. Default is 1.0.&lt;/dd&gt;
            &lt;/dl&gt;&lt;/dd&gt;
            &lt;/dl&gt;
            
            &lt;dl&gt;
            &lt;dt&gt;<c>&amp;lt;group&gt;</c>&lt;/dt&gt;
            &lt;dd&gt;Defines a group of paths or subgroups, plus transformation information.
            The transformations are defined in the same coordinates as the viewport.
            And the transformations are applied in the order of scale, rotate then translate.
            &lt;dl&gt;
            &lt;dt&gt;<c>android:name</c>&lt;/dt&gt;
            &lt;dd&gt;Defines the name of the group.&lt;/dd&gt;
            &lt;dt&gt;<c>android:rotation</c>&lt;/dt&gt;
            &lt;dd&gt;The degrees of rotation of the group. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:pivotX</c>&lt;/dt&gt;
            &lt;dd&gt;The X coordinate of the pivot for the scale and rotation of the group.
            This is defined in the viewport space. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:pivotY</c>&lt;/dt&gt;
            &lt;dd&gt;The Y coordinate of the pivot for the scale and rotation of the group.
            This is defined in the viewport space. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:scaleX</c>&lt;/dt&gt;
            &lt;dd&gt;The amount of scale on the X Coordinate. Default is 1.&lt;/dd&gt;
            &lt;dt&gt;<c>android:scaleY</c>&lt;/dt&gt;
            &lt;dd&gt;The amount of scale on the Y coordinate. Default is 1.&lt;/dd&gt;
            &lt;dt&gt;<c>android:translateX</c>&lt;/dt&gt;
            &lt;dd&gt;The amount of translation on the X coordinate.
            This is defined in the viewport space. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:translateY</c>&lt;/dt&gt;
            &lt;dd&gt;The amount of translation on the Y coordinate.
            This is defined in the viewport space. Default is 0.&lt;/dd&gt;
            &lt;/dl&gt;&lt;/dd&gt;
            &lt;/dl&gt;
            
            &lt;dl&gt;
            &lt;dt&gt;<c>&amp;lt;path&gt;</c>&lt;/dt&gt;
            &lt;dd&gt;Defines paths to be drawn.
            &lt;dl&gt;
            &lt;dt&gt;<c>android:name</c>&lt;/dt&gt;
            &lt;dd&gt;Defines the name of the path.&lt;/dd&gt;
            &lt;dt&gt;<c>android:pathData</c>&lt;/dt&gt;
            &lt;dd&gt;Defines path data using exactly same format as "d" attribute
            in the SVG's path data. This is defined in the viewport space.&lt;/dd&gt;
            &lt;dt&gt;<c>android:fillColor</c>&lt;/dt&gt;
            &lt;dd&gt;Specifies the color used to fill the path. May be a color or, for SDK 24+, a color state list
            or a gradient color (See <c>android.R.styleable#GradientColor</c>
            and <c>android.R.styleable#GradientColorItem</c>).
            If this property is animated, any value set by the animation will override the original value.
            No path fill is drawn if this property is not specified.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeColor</c>&lt;/dt&gt;
            &lt;dd&gt;Specifies the color used to draw the path outline. May be a color or, for SDK 24+, a color
            state list or a gradient color (See <c>android.R.styleable#GradientColor</c>
            and <c>android.R.styleable#GradientColorItem</c>).
            If this property is animated, any value set by the animation will override the original value.
            No path outline is drawn if this property is not specified.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeWidth</c>&lt;/dt&gt;
            &lt;dd&gt;The width a path stroke. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeAlpha</c>&lt;/dt&gt;
            &lt;dd&gt;The opacity of a path stroke. Default is 1.&lt;/dd&gt;
            &lt;dt&gt;<c>android:fillAlpha</c>&lt;/dt&gt;
            &lt;dd&gt;The opacity to fill the path with. Default is 1.&lt;/dd&gt;
            &lt;dt&gt;<c>android:trimPathStart</c>&lt;/dt&gt;
            &lt;dd&gt;The fraction of the path to trim from the start, in the range from 0 to 1. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:trimPathEnd</c>&lt;/dt&gt;
            &lt;dd&gt;The fraction of the path to trim from the end, in the range from 0 to 1. Default is 1.&lt;/dd&gt;
            &lt;dt&gt;<c>android:trimPathOffset</c>&lt;/dt&gt;
            &lt;dd&gt;Shift trim region (allows showed region to include the start and end), in the range
            from 0 to 1. Default is 0.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeLineCap</c>&lt;/dt&gt;
            &lt;dd&gt;Sets the linecap for a stroked path: butt, round, square. Default is butt.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeLineJoin</c>&lt;/dt&gt;
            &lt;dd&gt;Sets the lineJoin for a stroked path: miter,round,bevel. Default is miter.&lt;/dd&gt;
            &lt;dt&gt;<c>android:strokeMiterLimit</c>&lt;/dt&gt;
            &lt;dd&gt;Sets the Miter limit for a stroked path. Default is 4.&lt;/dd&gt;
            &lt;dt&gt;<c>android:fillType</c>&lt;/dt&gt;
            &lt;dd&gt;For SDK 24+, sets the fillType for a path. The types can be either "evenOdd" or "nonZero". They behave the
            same as SVG's "fill-rule" properties. Default is nonZero. For more details, see
            <see href="https://www.w3.org/TR/SVG/painting.html#FillRuleProperty">FillRuleProperty</see>&lt;/dd&gt;
            &lt;/dl&gt;&lt;/dd&gt;
            
            &lt;/dl&gt;
            
            &lt;dl&gt;
            &lt;dt&gt;<c>&amp;lt;clip-path&gt;</c>&lt;/dt&gt;
            &lt;dd&gt;Defines path to be the current clip. Note that the clip path only apply to
            the current group and its children.
            &lt;dl&gt;
            &lt;dt&gt;<c>android:name</c>&lt;/dt&gt;
            &lt;dd&gt;Defines the name of the clip path.&lt;/dd&gt;
            &lt;dd&gt;Animatable : No.&lt;/dd&gt;
            &lt;dt&gt;<c>android:pathData</c>&lt;/dt&gt;
            &lt;dd&gt;Defines clip path using the same format as "d" attribute
            in the SVG's path data.&lt;/dd&gt;
            &lt;dd&gt;Animatable : Yes.&lt;/dd&gt;
            &lt;/dl&gt;&lt;/dd&gt;
            &lt;/dl&gt;
            &lt;li&gt;Here is a simple VectorDrawable in this vectordrawable.xml file.</para>
      <code lang="text/java">&amp;lt;vector xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
                android:height=&amp;quot;64dp&amp;quot;
                android:width=&amp;quot;64dp&amp;quot;
                android:viewportHeight=&amp;quot;600&amp;quot;
                android:viewportWidth=&amp;quot;600&amp;quot; &amp;gt;
                &amp;lt;group
                    android:name=&amp;quot;rotationGroup&amp;quot;
                    android:pivotX=&amp;quot;300.0&amp;quot;
                    android:pivotY=&amp;quot;300.0&amp;quot;
                    android:rotation=&amp;quot;45.0&amp;quot; &amp;gt;
                    &amp;lt;path
                        android:name=&amp;quot;v&amp;quot;
                        android:fillColor=&amp;quot;#000000&amp;quot;
                        android:pathData=&amp;quot;M300,70 l 0,-70 70,70 0,0 -70,70z&amp;quot; /&amp;gt;
                &amp;lt;/group&amp;gt;
            &amp;lt;/vector&amp;gt;
            </code>
      <para>&lt;/li&gt;
            &lt;h4&gt;Gradient support&lt;/h4&gt;
            We support 3 types of gradients: <c>android.graphics.LinearGradient</c>,
            <c>android.graphics.RadialGradient</c>, or <c>android.graphics.SweepGradient</c>.
            &lt;p/&gt;
            And we support all of 3 types of tile modes <c>android.graphics.Shader.TileMode</c>:
            CLAMP, REPEAT, MIRROR.
            &lt;p/&gt;
            All of the attributes are listed in <c>android.R.styleable#GradientColor</c>.
            Note that different attributes are relevant for different types of gradient.
            &lt;table border="2" align="center" cellpadding="5"&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;LinearGradient&lt;/th&gt;
                        &lt;th&gt;RadialGradient&lt;/th&gt;
                        &lt;th&gt;SweepGradient&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tr&gt;
                    &lt;td&gt;startColor &lt;/td&gt;
                    &lt;td&gt;startColor&lt;/td&gt;
                    &lt;td&gt;startColor&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;centerColor&lt;/td&gt;
                    &lt;td&gt;centerColor&lt;/td&gt;
                    &lt;td&gt;centerColor&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;endColor&lt;/td&gt;
                    &lt;td&gt;endColor&lt;/td&gt;
                    &lt;td&gt;endColor&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;type&lt;/td&gt;
                    &lt;td&gt;type&lt;/td&gt;
                    &lt;td&gt;type&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;tileMode&lt;/td&gt;
                    &lt;td&gt;tileMode&lt;/td&gt;
                    &lt;td&gt;tileMode&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;startX&lt;/td&gt;
                    &lt;td&gt;centerX&lt;/td&gt;
                    &lt;td&gt;centerX&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;startY&lt;/td&gt;
                    &lt;td&gt;centerY&lt;/td&gt;
                    &lt;td&gt;centerY&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;endX&lt;/td&gt;
                    &lt;td&gt;gradientRadius&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;endY&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
            &lt;p/&gt;
            Also note that if any color item <c>android.R.styleable#GradientColorItem</c> is defined, then
            startColor, centerColor and endColor will be ignored.
            &lt;p/&gt;
            See more details in <c>android.R.styleable#GradientColor</c> and
            <c>android.R.styleable#GradientColorItem</c>.
            &lt;p/&gt;
            Here is a simple example that defines a linear gradient.</para>
      <code lang="text/java">&amp;lt;gradient xmlns:android="http://schemas.android.com/apk/res/android"
                android:startColor="?android:attr/colorPrimary"
                android:endColor="?android:attr/colorControlActivated"
                android:centerColor="#f00"
                android:startX="0"
                android:startY="0"
                android:endX="100"
                android:endY="100"
                android:type="linear"&amp;gt;
            &amp;lt;/gradient&amp;gt;
            </code>
      <para>And here is a simple example that defines a radial gradient using color items.</para>
      <code lang="text/java">&amp;lt;gradient xmlns:android="http://schemas.android.com/apk/res/android"
                android:centerX="300"
                android:centerY="300"
                android:gradientRadius="100"
                android:type="radial"&amp;gt;
                &amp;lt;item android:offset="0.1" android:color="#0ff"/&amp;gt;
                &amp;lt;item android:offset="0.4" android:color="#fff"/&amp;gt;
                &amp;lt;item android:offset="0.9" android:color="#ff0"/&amp;gt;
            &amp;lt;/gradient&amp;gt;
            </code>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable" title="Reference documentation">Java documentation for <code>android.graphics.drawable.VectorDrawable</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Drawables.VectorDrawable.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>The one constructor to rule them all.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable#VectorDrawable(android.graphics.drawable.VectorDrawableState,%20android.content.res.Resources)" title="Reference documentation">Java documentation for <code>android.graphics.drawable.VectorDrawable.VectorDrawable(android.graphics.drawable.VectorDrawableState, android.content.res.Resources)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VectorDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Drawables.VectorDrawable.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Graphics.Drawables.VectorDrawable : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Graphics.Drawables.VectorDrawable" Usage="new Android.Graphics.Drawables.VectorDrawable (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override void Draw (Android.Graphics.Canvas? canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Drawables.VectorDrawable.Draw(Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="override this.Draw : Android.Graphics.Canvas -&gt; unit" Usage="vectorDrawable.Draw canvas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The canvas to draw into
</param>
        <summary>Draw in its bounds (set via setBounds) respecting optional effects such
 as alpha (set via setAlpha) and color filter (set via setColorFilter).</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Drawables.VectorDrawable.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Graphics.Drawables.VectorDrawable.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public override int Opacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Opacity" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Drawables.VectorDrawable.Opacity" />
      <MemberSignature Language="F#" Value="member this.Opacity : int" Usage="Android.Graphics.Drawables.VectorDrawable.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getOpacity", "()I", "GetGetOpacityHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getOpacity", "()I", "GetGetOpacityHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the opacity/transparency of this Drawable.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlpha">
      <MemberSignature Language="C#" Value="public override void SetAlpha (int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetAlpha(int32 alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Drawables.VectorDrawable.SetAlpha(System.Int32)" />
      <MemberSignature Language="F#" Value="override this.SetAlpha : int -&gt; unit" Usage="vectorDrawable.SetAlpha alpha" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAlpha", "(I)V", "GetSetAlpha_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAlpha", "(I)V", "GetSetAlpha_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="alpha">To be added.</param>
        <summary tool="true">Specify an alpha value for the drawable. 0 means fully transparent, and
 255 means fully opaque.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorFilter">
      <MemberSignature Language="C#" Value="public override void SetColorFilter (Android.Graphics.ColorFilter? colorFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetColorFilter(class Android.Graphics.ColorFilter colorFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Graphics.Drawables.VectorDrawable.SetColorFilter(Android.Graphics.ColorFilter)" />
      <MemberSignature Language="F#" Value="override this.SetColorFilter : Android.Graphics.ColorFilter -&gt; unit" Usage="vectorDrawable.SetColorFilter colorFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorFilter" Type="Android.Graphics.ColorFilter" />
      </Parameters>
      <Docs>
        <param name="colorFilter">The color filter to apply, or <c>null</c> to remove the
            existing color filter
</param>
        <summary>Specify an optional color filter for the drawable.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Drawables.VectorDrawable.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Graphics.Drawables.VectorDrawable.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Graphics.Drawables.VectorDrawable.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Graphics.Drawables.VectorDrawable.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
