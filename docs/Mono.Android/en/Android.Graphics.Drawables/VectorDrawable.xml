<Type Name="VectorDrawable" FullName="Android.Graphics.Drawables.VectorDrawable">
  <TypeSignature Language="C#" Value="public class VectorDrawable : Android.Graphics.Drawables.Drawable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorDrawable extends Android.Graphics.Drawables.Drawable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.Drawable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/drawable/VectorDrawable", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This lets you create a drawable based on an XML vector graphic.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This lets you create a drawable based on an XML vector graphic. It can be
 defined in an XML file with the <c>&lt;vector&gt;</c> element.
 </para>
      <para tool="javadoc-to-mdoc">
 The vector drawable has the following elements:
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <dt>
            <c>&lt;vector&gt;</c>
          </dt>
        </format>
        <format type="text/html">
          <dl>
            <dd>Used to define a vector drawable
 <dl><dt><c>android:name</c></dt><dd>Defines the name of this vector drawable.</dd><dt><c>android:width</c></dt><dd>Used to define the intrinsic width of the drawable.
 This support all the dimension units, normally specified with dp.</dd><dt><c>android:height</c></dt><dd>Used to define the intrinsic height the drawable.
 This support all the dimension units, normally specified with dp.</dd><dt><c>android:viewportWidth</c></dt><dd>Used to define the width of the viewport space. Viewport is basically
 the virtual canvas where the paths are drawn on.</dd><dt><c>android:viewportHeight</c></dt><dd>Used to define the height of the viewport space. Viewport is basically
 the virtual canvas where the paths are drawn on.</dd><dt><c>android:tint</c></dt><dd>The color to apply to the drawable as a tint. By default, no tint is applied.</dd><dt><c>android:tintMode</c></dt><dd>The Porter-Duff blending mode for the tint color. The default value is src_in.</dd><dt><c>android:autoMirrored</c></dt><dd>Indicates if the drawable needs to be mirrored when its layout direction is
 RTL (right-to-left).</dd><dt><c>android:alpha</c></dt><dd>The opacity of this drawable.</dd></dl></dd>
          </dl>
        </format>
        <format type="text/html">
          <dl>
            <dt>
              <c>&lt;group&gt;</c>
            </dt>
            <dd>Defines a group of paths or subgroups, plus transformation information.
 The transformations are defined in the same coordinates as the viewport.
 And the transformations are applied in the order of scale, rotate then translate.
 <dl><dt><c>android:name</c></dt><dd>Defines the name of the group.</dd><dt><c>android:rotation</c></dt><dd>The degrees of rotation of the group.</dd><dt><c>android:pivotX</c></dt><dd>The X coordinate of the pivot for the scale and rotation of the group.
 This is defined in the viewport space.</dd><dt><c>android:pivotY</c></dt><dd>The Y coordinate of the pivot for the scale and rotation of the group.
 This is defined in the viewport space.</dd><dt><c>android:scaleX</c></dt><dd>The amount of scale on the X Coordinate.</dd><dt><c>android:scaleY</c></dt><dd>The amount of scale on the Y coordinate.</dd><dt><c>android:translateX</c></dt><dd>The amount of translation on the X coordinate.
 This is defined in the viewport space.</dd><dt><c>android:translateY</c></dt><dd>The amount of translation on the Y coordinate.
 This is defined in the viewport space.</dd></dl></dd>
          </dl>
        </format>
        <format type="text/html">
          <dl>
            <dt>
              <c>&lt;path&gt;</c>
            </dt>
            <dd>Defines paths to be drawn.
 <dl><dt><c>android:name</c></dt><dd>Defines the name of the path.</dd><dt><c>android:pathData</c></dt><dd>Defines path data using exactly same format as "d" attribute
 in the SVG's path data. This is defined in the viewport space.</dd><dt><c>android:fillColor</c></dt><dd>Defines the color to fill the path (none if not present).</dd><dt><c>android:strokeColor</c></dt><dd>Defines the color to draw the path outline (none if not present).</dd><dt><c>android:strokeWidth</c></dt><dd>The width a path stroke.</dd><dt><c>android:strokeAlpha</c></dt><dd>The opacity of a path stroke.</dd><dt><c>android:fillAlpha</c></dt><dd>The opacity to fill the path with.</dd><dt><c>android:trimPathStart</c></dt><dd>The fraction of the path to trim from the start, in the range from 0 to 1.</dd><dt><c>android:trimPathEnd</c></dt><dd>The fraction of the path to trim from the end, in the range from 0 to 1.</dd><dt><c>android:trimPathOffset</c></dt><dd>Shift trim region (allows showed region to include the start and end), in the range
 from 0 to 1.</dd><dt><c>android:strokeLineCap</c></dt><dd>Sets the linecap for a stroked path: butt, round, square.</dd><dt><c>android:strokeLineJoin</c></dt><dd>Sets the lineJoin for a stroked path: miter,round,bevel.</dd><dt><c>android:strokeMiterLimit</c></dt><dd>Sets the Miter limit for a stroked path.</dd></dl></dd>
          </dl>
        </format>
        <format type="text/html">
          <dl>
            <dt>
              <c>&lt;clip-path&gt;</c>
            </dt>
            <dd>Defines path to be the current clip. Note that the clip path only apply to
 the current group and its children.
 <dl><dt><c>android:name</c></dt><dd>Defines the name of the clip path.</dd><dt><c>android:pathData</c></dt><dd>Defines clip path using the same format as "d" attribute
 in the SVG's path data.</dd></dl></dd>
          </dl>
        </format>
        <item>
          <term>Here is a simple VectorDrawable in this vectordrawable.xml file.
 <example><code lang="java">
 &lt;vector xmlns:android="http://schemas.android.com/apk/res/android"
     android:height="64dp"
     android:width="64dp"
     android:viewportHeight="600"
     android:viewportWidth="600" &gt;
     &lt;group
         android:name="rotationGroup"
         android:pivotX="300.0"
         android:pivotY="300.0"
         android:rotation="45.0" &gt;
         &lt;path
             android:name="v"
             android:fillColor="#000000"
             android:pathData="M300,70 l 0,-70 70,70 0,0 -70,70z" /&gt;
     &lt;/group&gt;
 &lt;/vector&gt;
 </code></example></term>
        </item>
      </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html#VectorDrawable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VectorDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public override void Draw (Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Draw(class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("draw", "(Landroid/graphics/Canvas;)V", "GetDraw_Landroid_graphics_Canvas_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="canvas">The canvas to draw into
</param>
        <summary>Draw in its bounds (set via setBounds) respecting optional effects such
 as alpha (set via setAlpha) and color filter (set via setColorFilter).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Draw in its bounds (set via setBounds) respecting optional effects such
 as alpha (set via setAlpha) and color filter (set via setColorFilter).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html#draw(android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public override int Opacity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOpacity", "()I", "GetGetOpacityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the opacity/transparency of this Drawable.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the opacity/transparency of this Drawable.  The returned value is
 one of the abstract format constants in
 <c><see cref="T:Android.Graphics.PixelFormat" /></c>:
 <c><see cref="F:Android.Graphics.Format.Unknown" tool="ReplaceLinkValue" /></c>,
 <c><see cref="F:Android.Graphics.Format.Translucent" tool="ReplaceLinkValue" /></c>,
 <c><see cref="F:Android.Graphics.Format.Transparent" tool="ReplaceLinkValue" /></c>, or
 <c><see cref="F:Android.Graphics.Format.Opaque" tool="ReplaceLinkValue" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">An OPAQUE drawable is one that draws all all content within its bounds, completely
 covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing
 within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable
 is a drawable in any other state, where the drawable will draw some, but not all,
 of the content within its bounds and at least some content behind the drawable will
 be visible. If the visibility of the drawable's contents cannot be determined, the
 safest/best return value is TRANSLUCENT.

 </para>
          <para tool="javadoc-to-mdoc">Generally a Drawable should be as conservative as possible with the
 value it returns.  For example, if it contains multiple child drawables
 and only shows one of them at a time, if only one of the children is
 TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be
 returned.  You can use the method <c><see cref="M:Android.Graphics.Drawables.Drawable.ResolveOpacity(System.Int32,System.Int32)" /></c> to perform a
 standard reduction of two opacities to the appropriate single output.

 </para>
          <para tool="javadoc-to-mdoc">Note that the returned value does not necessarily take into account a
 custom alpha or color filter that has been applied by the client through
 the <c><see cref="M:Android.Graphics.Drawables.Drawable.SetAlpha(System.Int32)" /></c> or <c><see cref="M:Android.Graphics.Drawables.Drawable.SetColorFilter(Android.Graphics.ColorFilter)" /></c> methods. Some subclasses,
 such as <c><see cref="T:Android.Graphics.Drawables.BitmapDrawable" /></c>, <c><see cref="T:Android.Graphics.Drawables.ColorDrawable" /></c>, and <c><see cref="T:Android.Graphics.Drawables.GradientDrawable" /></c>,
 do account for the value of <c><see cref="M:Android.Graphics.Drawables.Drawable.SetAlpha(System.Int32)" /></c>, but the general behavior is dependent
 upon the implementation of the subclass.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html#getOpacity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlpha">
      <MemberSignature Language="C#" Value="public override void SetAlpha (int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetAlpha(int32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAlpha", "(I)V", "GetSetAlpha_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="alpha">To be added.</param>
        <summary tool="true">Specify an alpha value for the drawable. 0 means fully transparent, and
 255 means fully opaque.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Specify an alpha value for the drawable. 0 means fully transparent, and
 255 means fully opaque.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html#setAlpha(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColorFilter">
      <MemberSignature Language="C#" Value="public override void SetColorFilter (Android.Graphics.ColorFilter colorFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetColorFilter(class Android.Graphics.ColorFilter colorFilter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setColorFilter", "(Landroid/graphics/ColorFilter;)V", "GetSetColorFilter_Landroid_graphics_ColorFilter_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colorFilter" Type="Android.Graphics.ColorFilter" />
      </Parameters>
      <Docs>
        <param name="colorFilter">The color filter to apply, or <c>null</c> to remove the
            existing color filter
</param>
        <summary>Specify an optional color filter for the drawable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Specify an optional color filter for the drawable.
 </para>
          <para tool="javadoc-to-mdoc">
 If a Drawable has a ColorFilter, each output pixel of the Drawable's
 drawing contents will be modified by the color filter before it is
 blended onto the render target of a Canvas.
 </para>
          <para tool="javadoc-to-mdoc">
 Pass <c>null</c> to remove any existing color filter.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Setting a non-<c>null</c> color
 filter disables <c><see cref="M:Android.Graphics.Drawables.Drawable.SetTintList(Android.Content.Res.ColorStateList)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html#setColorFilter(android.graphics.ColorFilter)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
