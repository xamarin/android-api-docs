<Type Name="AlwaysOnHotwordDetector" FullName="Android.Service.Voice.AlwaysOnHotwordDetector">
  <TypeSignature Language="C#" Value="public class AlwaysOnHotwordDetector : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AlwaysOnHotwordDetector extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/service/voice/AlwaysOnHotwordDetector", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A class that lets a VoiceInteractionService implementation interact with
 always-on keyphrase detection APIs.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A class that lets a VoiceInteractionService implementation interact with
 always-on keyphrase detection APIs.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AlwaysOnHotwordDetector (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEnrollIntent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent CreateEnrollIntent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Intent CreateEnrollIntent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createEnrollIntent", "()Landroid/content/Intent;", "GetCreateEnrollIntentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an intent to start the enrollment for the associated keyphrase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an intent to start the enrollment for the associated keyphrase.
 This intent must be invoked using <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.
 Starting re-enrollment is only valid if the keyphrase is un-enrolled,
 i.e. <c><see cref="!:Android.Service.Voice.AlwaysOnHotwordDetector.STATE_KEYPHRASE_UNENROLLED" /></c>,
 otherwise <c><see cref="M:Android.Service.Voice.AlwaysOnHotwordDetector.CreateReEnrollIntent" /></c> should be preferred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html#createEnrollIntent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 21" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if managing they keyphrase isn't supported.
         Callers should only call this method after a supported state callback on
         <c><see cref="!:NoType:android/service/voice/AlwaysOnHotwordDetector$Callback;Href=../../../../reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onAvailabilityChanged(int)" /></c> to avoid this exception.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the detector is in an invalid state.
         This may happen if another detector has been instantiated or the
         <c><see cref="T:Android.Service.Voice.VoiceInteractionService" /></c> hosting this detector has been shut down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReEnrollIntent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent CreateReEnrollIntent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Intent CreateReEnrollIntent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createReEnrollIntent", "()Landroid/content/Intent;", "GetCreateReEnrollIntentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an intent to start the re-enrollment for the associated keyphrase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an intent to start the re-enrollment for the associated keyphrase.
 This intent must be invoked using <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.
 Starting re-enrollment is only valid if the keyphrase is already enrolled,
 i.e. <c><see cref="!:Android.Service.Voice.AlwaysOnHotwordDetector.STATE_KEYPHRASE_ENROLLED" /></c>, otherwise invoking this may result in an error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html#createReEnrollIntent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if managing they keyphrase isn't supported.
         Callers should only call this method after a supported state callback on
         <c><see cref="!:NoType:android/service/voice/AlwaysOnHotwordDetector$Callback;Href=../../../../reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onAvailabilityChanged(int)" /></c> to avoid this exception.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the detector is in an invalid state.
         This may happen if another detector has been instantiated or the
         <c><see cref="T:Android.Service.Voice.VoiceInteractionService" /></c> hosting this detector has been shut down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUnEnrollIntent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent CreateUnEnrollIntent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Intent CreateUnEnrollIntent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createUnEnrollIntent", "()Landroid/content/Intent;", "GetCreateUnEnrollIntentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an intent to start the un-enrollment for the associated keyphrase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an intent to start the un-enrollment for the associated keyphrase.
 This intent must be invoked using <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.
 Starting re-enrollment is only valid if the keyphrase is already enrolled,
 i.e. <c><see cref="!:Android.Service.Voice.AlwaysOnHotwordDetector.STATE_KEYPHRASE_ENROLLED" /></c>, otherwise invoking this may result in an error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html#createUnEnrollIntent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if managing they keyphrase isn't supported.
         Callers should only call this method after a supported state callback on
         <c><see cref="!:NoType:android/service/voice/AlwaysOnHotwordDetector$Callback;Href=../../../../reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onAvailabilityChanged(int)" /></c> to avoid this exception.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the detector is in an invalid state.
         This may happen if another detector has been instantiated or the
         <c><see cref="T:Android.Service.Voice.VoiceInteractionService" /></c> hosting this detector has been shut down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="StartRecognition">
      <MemberSignature Language="C#" Value="public virtual bool StartRecognition (Android.Service.Voice.RecognitionFlag recognitionFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartRecognition(valuetype Android.Service.Voice.RecognitionFlag recognitionFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startRecognition", "(I)Z", "GetStartRecognition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognitionFlags" Type="Android.Service.Voice.RecognitionFlag">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="recognitionFlags">The flags to control the recognition properties.</param>
        <summary>Starts recognition for the associated keyphrase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts recognition for the associated keyphrase.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html#startRecognition(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if the recognition isn't supported.
         Callers should only call this method after a supported state callback on
         <c><see cref="!:NoType:android/service/voice/AlwaysOnHotwordDetector$Callback;Href=../../../../reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onAvailabilityChanged(int)" /></c> to avoid this exception.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the detector is in an invalid state.
         This may happen if another detector has been instantiated or the
         <c><see cref="T:Android.Service.Voice.VoiceInteractionService" /></c> hosting this detector has been shut down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="StopRecognition">
      <MemberSignature Language="C#" Value="public virtual bool StopRecognition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StopRecognition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopRecognition", "()Z", "GetStopRecognitionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops recognition for the associated keyphrase.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops recognition for the associated keyphrase.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html#stopRecognition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if the recognition isn't supported.
         Callers should only call this method after a supported state callback on
         <c><see cref="!:NoType:android/service/voice/AlwaysOnHotwordDetector$Callback;Href=../../../../reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onAvailabilityChanged(int)" /></c> to avoid this exception.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the detector is in an invalid state.
         This may happen if another detector has been instantiated or the
         <c><see cref="T:Android.Service.Voice.VoiceInteractionService" /></c> hosting this detector has been shut down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
