<Type Name="DeviceAdminReceiver" FullName="Android.App.Admin.DeviceAdminReceiver">
  <TypeSignature Language="C#" Value="public class DeviceAdminReceiver : Android.Content.BroadcastReceiver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DeviceAdminReceiver extends Android.Content.BroadcastReceiver" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Content.BroadcastReceiver</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/admin/DeviceAdminReceiver", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>Base class for implementing a device administration component.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Base class for implementing a device administration component.  This
 class provides a convenience for interpreting the raw intent actions
 that are sent by the system.

 </para>
      <para tool="javadoc-to-mdoc">The callback methods, like the base
 <c><see cref="M:Android.Content.BroadcastReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>
 method, happen on the main thread of the process.  Thus long running
 operations must be done on another thread.  Note that because a receiver
 is done once returning from its receive function, such long-running operations
 should probably be done in a <c><see cref="T:Android.App.Service" /></c>.

 <example><code lang="xml">&lt;receiver android:name=".app.DeviceAdminSample$DeviceAdminSampleReceiver"
        android:label="@string/sample_device_admin"
        android:description="@string/sample_device_admin_description"
        android:permission="android.permission.BIND_DEVICE_ADMIN"&gt;
    &lt;meta-data android:name="android.app.device_admin"
               android:resource="@xml/device_admin_sample" /&gt;
    &lt;intent-filter&gt;
        &lt;action android:name="android.app.action.DEVICE_ADMIN_ENABLED" /&gt;
    &lt;/intent-filter&gt;
&lt;/receiver&gt;</code></example><example><code lang="xml">&lt;device-admin xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;uses-policies&gt;
        &lt;limit-password /&gt;
        &lt;watch-login /&gt;
        &lt;reset-password /&gt;
        &lt;force-lock /&gt;
        &lt;wipe-data /&gt;
        &lt;expire-password /&gt;
        &lt;encrypted-storage /&gt;
        &lt;disable-camera /&gt;
        &lt;disable-keyguard-features /&gt;
    &lt;/uses-policies&gt;
&lt;/device-admin&gt;</code></example><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">When publishing your DeviceAdmin subclass as a receiver, it must
 handle <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminEnabled" /></c> and require the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BIND_DEVICE_ADMIN" /></c> permission.  A typical
 manifest entry would look like:</para>
      <para tool="javadoc-to-mdoc">The meta-data referenced here provides addition information specific
 to the device administrator, as parsed by the <c><see cref="T:Android.App.Admin.DeviceAdminInfo" /></c> class.
 A typical file would be:</para>
      <para tool="javadoc-to-mdoc">For more information about device administration, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/admin/device-admin.html">Device Administration</a></format>
 developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DeviceAdminReceiver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#DeviceAdminReceiver()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DeviceAdminReceiver (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionDeviceAdminDisabled">
      <MemberSignature Language="C#" Value="public const string ActionDeviceAdminDisabled;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionDeviceAdminDisabled" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_DEVICE_ADMIN_DISABLED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator when the user has disabled
 it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator when the user has disabled
 it.  Upon return, the application no longer has access to the
 protected device policy manager APIs.  You will generally
 handle this in <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnDisabled(Android.Content.Context,Android.Content.Intent)" /></c>.  Note
 that this action will be
 sent the receiver regardless of whether it is explicitly listed in
 its intent filter.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_DISABLED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionDeviceAdminDisableRequested">
      <MemberSignature Language="C#" Value="public const string ActionDeviceAdminDisableRequested;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionDeviceAdminDisableRequested" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_DEVICE_ADMIN_DISABLE_REQUESTED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator when the user has requested to
 disable it, but before this has actually been done.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator when the user has requested to
 disable it, but before this has actually been done.  This gives you
 a chance to supply a message to the user about the impact of
 disabling your admin, by setting the extra field
 <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ExtraDisableWarning" /></c> in the result Intent.  If not set,
 no warning will be displayed.  If set, the given text will be shown
 to the user before they disable your admin.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_DISABLE_REQUESTED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionDeviceAdminEnabled">
      <MemberSignature Language="C#" Value="public const string ActionDeviceAdminEnabled;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionDeviceAdminEnabled" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_DEVICE_ADMIN_ENABLED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the primary action that a device administrator must implement to be
 allowed to manage a device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is the primary action that a device administrator must implement to be
 allowed to manage a device.  This will be set to the receiver
 when the user enables it for administration.  You will generally
 handle this in <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnEnabled(Android.Content.Context,Android.Content.Intent)" /></c>.  To be
 supported, the receiver must also require the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BIND_DEVICE_ADMIN" /></c> permission so
 that other applications can not abuse it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_ENABLED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionLockTaskEntering">
      <MemberSignature Language="C#" Value="public const string ActionLockTaskEntering;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionLockTaskEntering" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_LOCK_TASK_ENTERING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator to notify that the device is entering
 lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator to notify that the device is entering
 lock task mode.  The extra <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ExtraLockTaskPackage" /></c>
 will describe the package using lock task mode.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be the device owner or profile
 owner to receive this broadcast.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_LOCK_TASK_ENTERING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.IsLockTaskPermitted(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ActionLockTaskExiting">
      <MemberSignature Language="C#" Value="public const string ActionLockTaskExiting;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionLockTaskExiting" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_LOCK_TASK_EXITING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator to notify that the device is exiting
 lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator to notify that the device is exiting
 lock task mode.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be the device owner or profile
 owner to receive this broadcast.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_LOCK_TASK_EXITING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.IsLockTaskPermitted(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ActionPasswordChanged">
      <MemberSignature Language="C#" Value="public const string ActionPasswordChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPasswordChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PASSWORD_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator when the user has changed the
 password of their device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator when the user has changed the
 password of their device.  You can at this point check the characteristics
 of the new password with <c><see cref="P:Android.App.Admin.DevicePolicyManager.IsActivePasswordSufficient" /></c>.
 You will generally
 handle this in <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnPasswordChanged(Android.Content.Context,Android.Content.Intent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to receive
 this broadcast.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionPasswordExpiring">
      <MemberSignature Language="C#" Value="public const string ActionPasswordExpiring;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPasswordExpiring" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PASSWORD_EXPIRING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action periodically sent to a device administrator when the device password
 is expiring.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action periodically sent to a device administrator when the device password
 is expiring.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyExpirePassword" /></c> to receive
 this broadcast.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_EXPIRING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ActionPasswordFailed">
      <MemberSignature Language="C#" Value="public const string ActionPasswordFailed;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPasswordFailed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PASSWORD_FAILED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator when the user has failed at
 attempted to enter the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator when the user has failed at
 attempted to enter the password.  You can at this point check the
 number of failed password attempts there have been with
 <c><see cref="P:Android.App.Admin.DevicePolicyManager.CurrentFailedPasswordAttempts" /></c>.  You will generally
 handle this in <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnPasswordFailed(Android.Content.Context,Android.Content.Intent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> to receive
 this broadcast.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_FAILED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionPasswordSucceeded">
      <MemberSignature Language="C#" Value="public const string ActionPasswordSucceeded;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPasswordSucceeded" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PASSWORD_SUCCEEDED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Action sent to a device administrator when the user has successfully
 entered their password, after failing one or more times.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Action sent to a device administrator when the user has successfully
 entered their password, after failing one or more times.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> to receive
 this broadcast.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_SUCCEEDED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionProfileProvisioningComplete">
      <MemberSignature Language="C#" Value="public const string ActionProfileProvisioningComplete;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionProfileProvisioningComplete" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PROFILE_PROVISIONING_COMPLETE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile
 or managed device has completed successfully.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile
 or managed device has completed successfully.

 </para>
          <para tool="javadoc-to-mdoc">The broadcast is limited to the profile that will be managed by the application that
 requested provisioning. In the device owner case the profile is the primary user.
 The broadcast will also be limited to the <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> component
 specified in the original intent or NFC bump that started the provisioning process
 (see <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c>).

 </para>
          <para tool="javadoc-to-mdoc">A device admin application which listens to this intent can find out if the device was
 provisioned for the device owner or profile owner case by calling respectively
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.IsDeviceOwnerApp(System.String)" /></c> and
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.IsProfileOwnerApp(System.String)" /></c>. You will generally handle
 this in <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnProfileProvisioningComplete(Android.Content.Context,Android.Content.Intent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Input: Nothing.</para>
          <para tool="javadoc-to-mdoc">Output: Nothing</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PROFILE_PROVISIONING_COMPLETE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceAdminMetaData">
      <MemberSignature Language="C#" Value="public const string DeviceAdminMetaData;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DeviceAdminMetaData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DEVICE_ADMIN_META_DATA")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name under which a DevicePolicy component publishes information
 about itself.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name under which a DevicePolicy component publishes information
 about itself.  This meta-data must reference an XML resource containing
 a device-admin tag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#DEVICE_ADMIN_META_DATA" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ExtraDisableWarning">
      <MemberSignature Language="C#" Value="public const string ExtraDisableWarning;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraDisableWarning" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_DISABLE_WARNING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A CharSequence that can be shown to the user informing them of the
 impact of disabling your admin.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A CharSequence that can be shown to the user informing them of the
 impact of disabling your admin.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#EXTRA_DISABLE_WARNING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminDisableRequested" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLockTaskPackage">
      <MemberSignature Language="C#" Value="public const string ExtraLockTaskPackage;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLockTaskPackage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_LOCK_TASK_PACKAGE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A string containing the name of the package entering lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A string containing the name of the package entering lock task mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#EXTRA_LOCK_TASK_PACKAGE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.App.Admin.DeviceAdminReceiver.ActionLockTaskEntering" />
      </Docs>
    </Member>
    <Member MemberName="GetManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.DevicePolicyManager GetManager (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Admin.DevicePolicyManager GetManager(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getManager", "(Landroid/content/Context;)Landroid/app/admin/DevicePolicyManager;", "GetGetManager_Landroid_content_Context_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.DevicePolicyManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Retrieve the DevicePolicyManager interface for this administrator to work
 with the system.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the DevicePolicyManager interface for this administrator to work
 with the system.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#getManager(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetWho">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName GetWho (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ComponentName GetWho(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getWho", "(Landroid/content/Context;)Landroid/content/ComponentName;", "GetGetWho_Landroid_content_Context_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Retrieve the ComponentName describing who this device administrator is, for
 use in <c><see cref="T:Android.App.Admin.DevicePolicyManager" /></c> APIs that require the administrator to
 identify itself.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the ComponentName describing who this device administrator is, for
 use in <c><see cref="T:Android.App.Admin.DevicePolicyManager" /></c> APIs that require the administrator to
 identify itself.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#getWho(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnDisabled">
      <MemberSignature Language="C#" Value="public virtual void OnDisabled (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDisabled(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisabled", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnDisabled_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called prior to the administrator being disabled, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminDisabled" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called prior to the administrator being disabled, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminDisabled" /></c>.  Upon return, you
 can no longer use the protected parts of the <c><see cref="T:Android.App.Admin.DevicePolicyManager" /></c>
 API.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onDisabled(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnDisableRequested">
      <MemberSignature Language="C#" Value="public string OnDisableRequested (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string OnDisableRequested(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisableRequestedFormatted">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ICharSequence OnDisableRequestedFormatted (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence OnDisableRequestedFormatted(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisableRequested", "(Landroid/content/Context;Landroid/content/Intent;)Ljava/lang/CharSequence;", "GetOnDisableRequested_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <summary>Called when the user has asked to disable the administrator, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminDisableRequested" /></c>, giving you
 a chance to present a warning message to them.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the user has asked to disable the administrator, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminDisableRequested" /></c>, giving you
 a chance to present a warning message to them.  The message is returned
 as the result; if null is returned (the default implementation), no
 message will be displayed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onDisableRequested(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabled">
      <MemberSignature Language="C#" Value="public virtual void OnEnabled (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnabled(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onEnabled", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnEnabled_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called after the administrator is first enabled, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminEnabled" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after the administrator is first enabled, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionDeviceAdminEnabled" /></c>.  At this point you
 can use <c><see cref="T:Android.App.Admin.DevicePolicyManager" /></c> to set your desired policies.

 </para>
          <para tool="javadoc-to-mdoc"> If the admin is activated by a device owner, then the intent
 may contain private extras that are relevant to user setup.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onEnabled(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnLockTaskModeEntering">
      <MemberSignature Language="C#" Value="public virtual void OnLockTaskModeEntering (Android.Content.Context context, Android.Content.Intent intent, string pkg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLockTaskModeEntering(class Android.Content.Context context, class Android.Content.Intent intent, string pkg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLockTaskModeEntering", "(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;)V", "GetOnLockTaskModeEntering_Landroid_content_Context_Landroid_content_Intent_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="pkg" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="pkg">If entering, the authorized package using lock task mode, otherwise null.
</param>
        <summary>Called when a device is entering lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a device is entering lock task mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onLockTaskModeEntering(android.content.Context, android.content.Intent, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLockTaskModeExiting">
      <MemberSignature Language="C#" Value="public virtual void OnLockTaskModeExiting (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLockTaskModeExiting(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLockTaskModeExiting", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnLockTaskModeExiting_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called when a device is exiting lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a device is exiting lock task mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onLockTaskModeExiting(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPasswordChanged">
      <MemberSignature Language="C#" Value="public virtual void OnPasswordChanged (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPasswordChanged(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPasswordChanged", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnPasswordChanged_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called after the user has changed their password, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordChanged" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after the user has changed their password, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordChanged" /></c>.  At this point you
 can use <c><see cref="P:Android.App.Admin.DevicePolicyManager.CurrentFailedPasswordAttempts" /></c>
 to retrieve the active password characteristics.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordChanged(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnPasswordExpiring">
      <MemberSignature Language="C#" Value="public virtual void OnPasswordExpiring (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPasswordExpiring(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPasswordExpiring", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnPasswordExpiring_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called periodically when the password is about to expire or has expired.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called periodically when the password is about to expire or has expired.  It will typically
 be called at these times: on device boot, once per day before the password expires,
 and at the time when the password expires.

 </para>
          <para tool="javadoc-to-mdoc">If the password is not updated by the user, this method will continue to be called
 once per day until the password is changed or the device admin disables password expiration.

 </para>
          <para tool="javadoc-to-mdoc">The admin will typically post a notification requesting the user to change their password
 in response to this call. The actual password expiration time can be obtained by calling
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetPasswordExpiration(Android.Content.ComponentName)" /></c></para>
          <para tool="javadoc-to-mdoc">The admin should be sure to take down any notifications it posted in response to this call
 when it receives <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnPasswordChanged(Android.Content.Context,Android.Content.Intent)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordExpiring(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnPasswordFailed">
      <MemberSignature Language="C#" Value="public virtual void OnPasswordFailed (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPasswordFailed(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPasswordFailed", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnPasswordFailed_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called after the user has failed at entering their current password, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordFailed" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after the user has failed at entering their current password, as a result of
 receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordFailed" /></c>.  At this point you
 can use <c><see cref="T:Android.App.Admin.DevicePolicyManager" /></c> to retrieve the number of failed
 password attempts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordFailed(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnPasswordSucceeded">
      <MemberSignature Language="C#" Value="public virtual void OnPasswordSucceeded (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPasswordSucceeded(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPasswordSucceeded", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnPasswordSucceeded_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called after the user has succeeded at entering their current password,
 as a result of receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordSucceeded" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after the user has succeeded at entering their current password,
 as a result of receiving <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionPasswordSucceeded" /></c>.  This will
 only be received the first time they succeed after having previously
 failed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordSucceeded(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="OnProfileProvisioningComplete">
      <MemberSignature Language="C#" Value="public virtual void OnProfileProvisioningComplete (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnProfileProvisioningComplete(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onProfileProvisioningComplete", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnProfileProvisioningComplete_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The running context as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.</param>
        <param name="intent">The received intent as per <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c>.
</param>
        <summary>Called when provisioning of a managed profile or managed device has completed successfully.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when provisioning of a managed profile or managed device has completed successfully.

 </para>
          <para tool="javadoc-to-mdoc"> As a prerequisite for the execution of this callback the <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> has
 to declare an intent filter for <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionProfileProvisioningComplete" /></c>.
 Its component must also be specified in the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraDeviceAdmin" /></c>
 of the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c> intent that started the
 managed provisioning.

 </para>
          <para tool="javadoc-to-mdoc">When provisioning of a managed profile is complete, the managed profile is hidden until
 the profile owner calls {DevicePolicyManager#setProfileEnabled(ComponentName admin)}.
 Typically a profile owner will enable the profile when it has finished any additional setup
 such as adding an account by using the <c><see cref="T:Android.Accounts.AccountManager" /></c> and calling apis to bring the
 profile into the desired state.

 </para>
          <para tool="javadoc-to-mdoc"> Note that provisioning completes without waiting for any server interactions, so the
 profile owner needs to wait for data to be available if required (e.g. android device ids or
 other data that is set as a result of server interactions).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onProfileProvisioningComplete(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReceive">
      <MemberSignature Language="C#" Value="public override void OnReceive (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnReceive(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceive", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnReceive_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The Context in which the receiver is running.</param>
        <param name="intent">The Intent being received.
</param>
        <summary>Intercept standard device administrator broadcasts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intercept standard device administrator broadcasts.  Implementations
 should not override this method; it is better to implement the
 convenience callbacks for each action.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onReceive(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
