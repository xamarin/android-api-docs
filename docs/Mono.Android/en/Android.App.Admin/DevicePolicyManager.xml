<Type Name="DevicePolicyManager" FullName="Android.App.Admin.DevicePolicyManager">
  <TypeSignature Language="C#" Value="public class DevicePolicyManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DevicePolicyManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/admin/DevicePolicyManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>Public interface for managing policies enforced on a device.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Public interface for managing policies enforced on a device. Most clients of this class must be
 registered with the system as a
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/admin/device-admin.html">device administrator</a></format>. Additionally,
 a device administrator may be registered as either a profile or device owner. A given method is
 accessible to all device administrators unless the documentation for that method specifies that
 it is restricted to either device or profile owners.

 <format type="text/html"><h3>Developer Guides</h3></format>For more information about managing policies for device administration, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/admin/device-admin.html">Device Administration</a></format>
 developer guide.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DevicePolicyManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionAddDeviceAdmin">
      <MemberSignature Language="C#" Value="public const string ActionAddDeviceAdmin;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionAddDeviceAdmin" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_ADD_DEVICE_ADMIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: ask the user to add a new device administrator to the system.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activity action: ask the user to add a new device administrator to the system.
 The desired policy is the ComponentName of the policy in the
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraDeviceAdmin" /></c> extra field.  This will invoke a UI to
 bring the user through adding the device administrator to the system (or
 allowing them to reject it).

 </para>
          <para tool="javadoc-to-mdoc">You can optionally include the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraAddExplanation" /></c>
 field to provide the user with additional explanation (in addition
 to your component's description) about what is being added.

 </para>
          <para tool="javadoc-to-mdoc">If your administrator is already active, this will ordinarily return immediately (without
 user intervention).  However, if your administrator has been updated and is requesting
 additional uses-policy flags, the user will be presented with the new list.  New policies
 will not be available to the updated administrator until the user has accepted the new list.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADD_DEVICE_ADMIN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionProvisionManagedProfile">
      <MemberSignature Language="C#" Value="public const string ActionProvisionManagedProfile;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionProvisionManagedProfile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_PROVISION_MANAGED_PROFILE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: Starts the provisioning flow which sets up a managed profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activity action: Starts the provisioning flow which sets up a managed profile.

 </para>
          <para tool="javadoc-to-mdoc">A managed profile allows data separation for example for the usage of a
 device as a personal and corporate device. The user which provisioning is started from and
 the managed profile share a launcher.

 </para>
          <para tool="javadoc-to-mdoc">This intent will typically be sent by a mobile device management application (MDM).
 Provisioning adds a managed profile and sets the MDM as the profile owner who has full
 control over the profile.

 In version <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP" /></c>, this intent must contain the
 extra <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageName" /></c>.
 As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, it should contain the extra
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminComponentName" /></c> instead, although specifying only
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageName" /></c> is still supported.

 </para>
          <para tool="javadoc-to-mdoc"> When managed provisioning has completed, broadcasts are sent to the application specified
 in the provisioning intent. The
 <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionProfileProvisioningComplete" /></c> broadcast is sent in the
 managed profile and the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionManagedProfileProvisioned" /></c> broadcast is sent in
 the primary profile.

 </para>
          <para tool="javadoc-to-mdoc"> If provisioning fails, the managedProfile is removed so the device returns to its
 previous state.

 </para>
          <para tool="javadoc-to-mdoc">If launched with <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> a
 result code of <c><see cref="F:Android.App.Result.Ok" tool="ReplaceLinkValue" /></c> implies that the synchronous part of
 the provisioning flow was successful, although this doesn't guarantee the full flow will
 succeed. Conversely a result code of <c><see cref="F:Android.App.Result.Canceled" tool="ReplaceLinkValue" /></c> implies
 that the user backed-out of provisioning, or some precondition for provisioning wasn't met.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionSetNewPassword">
      <MemberSignature Language="C#" Value="public const string ActionSetNewPassword;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionSetNewPassword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_SET_NEW_PASSWORD")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: have the user enter a new password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activity action: have the user enter a new password. This activity should
 be launched after using <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>,
 or <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLength(Android.Content.ComponentName,System.Int32)" /></c> to have the user
 enter a new password that meets the current requirements. You can use
 <c><see cref="P:Android.App.Admin.DevicePolicyManager.IsActivePasswordSufficient" /></c> to determine whether you need to
 have the user select a new password in order to meet the current
 constraints. Upon being resumed from this activity, you can check the new
 password characteristics to see if they are sufficient.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PASSWORD" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionStartEncryption">
      <MemberSignature Language="C#" Value="public const string ActionStartEncryption;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionStartEncryption" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_START_ENCRYPTION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: begin the process of encrypting data on the device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activity action: begin the process of encrypting data on the device.  This activity should
 be launched after using <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetStorageEncryption(Android.Content.ComponentName,System.Boolean)" /></c> to request encryption be activated.
 After resuming from this activity, use <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetStorageEncryption(Android.Content.ComponentName)" /></c>
 to check encryption status.  However, on some devices this activity may never return, as
 it may trigger a reboot and in some cases a complete data wipe of the device.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_START_ENCRYPTION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ActiveAdmins">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Content.ComponentName&gt; ActiveAdmins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Content.ComponentName&gt; ActiveAdmins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActiveAdmins", "()Ljava/util/List;", "GetGetActiveAdminsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Content.ComponentName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a list of all currently active device administrators' component
 names.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a list of all currently active device administrators' component
 names.  If there are no administrators <c>null</c> may be
 returned.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getActiveAdmins()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AddCrossProfileIntentFilter">
      <MemberSignature Language="C#" Value="public virtual void AddCrossProfileIntentFilter (Android.Content.ComponentName admin, Android.Content.IntentFilter filter, Android.App.Admin.DevicePolicyManagerFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCrossProfileIntentFilter(class Android.Content.ComponentName admin, class Android.Content.IntentFilter filter, valuetype Android.App.Admin.DevicePolicyManagerFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addCrossProfileIntentFilter", "(Landroid/content/ComponentName;Landroid/content/IntentFilter;I)V", "GetAddCrossProfileIntentFilter_Landroid_content_ComponentName_Landroid_content_IntentFilter_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="filter" Type="Android.Content.IntentFilter" />
        <Parameter Name="flags" Type="Android.App.Admin.DevicePolicyManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="filter">The <c><see cref="T:Android.Content.IntentFilter" /></c> the intent has to match to be also resolved in the
 other profile</param>
        <param name="flags">
          <c>
            <see cref="F:Android.App.Admin.DevicePolicyManager.FlagManagedCanAccessParent" />
          </c> and
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.FlagParentCanAccessManaged" /></c> are supported.
</param>
        <summary>Called by the profile owner of a managed profile so that some intents sent in the managed
 profile can also be resolved in the parent, or vice versa.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the profile owner of a managed profile so that some intents sent in the managed
 profile can also be resolved in the parent, or vice versa.
 Only activity intents are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossProfileWidgetProvider">
      <MemberSignature Language="C#" Value="public virtual bool AddCrossProfileWidgetProvider (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddCrossProfileWidgetProvider(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addCrossProfileWidgetProvider", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", "GetAddCrossProfileWidgetProvider_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The package from which widget providers are white-listed.</param>
        <summary>Called by the profile owner of a managed profile to enable widget providers from a
 given package to be available in the parent profile.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the profile owner of a managed profile to enable widget providers from a
 given package to be available in the parent profile. As a result the user will be able to
 add widgets from the white-listed package running under the profile to a widget
 host which runs under the parent profile, for example the home screen. Note that
 a package may have zero or more provider components, where each component
 provides a different widget type.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> By default no widget provider package is white-listed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.RemoveCrossProfileWidgetProvider(Android.Content.ComponentName, System.String)" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.GetCrossProfileWidgetProviders(Android.Content.ComponentName)" />
      </Docs>
    </Member>
    <Member MemberName="AddPersistentPreferredActivity">
      <MemberSignature Language="C#" Value="public virtual void AddPersistentPreferredActivity (Android.Content.ComponentName admin, Android.Content.IntentFilter filter, Android.Content.ComponentName activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddPersistentPreferredActivity(class Android.Content.ComponentName admin, class Android.Content.IntentFilter filter, class Android.Content.ComponentName activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addPersistentPreferredActivity", "(Landroid/content/ComponentName;Landroid/content/IntentFilter;Landroid/content/ComponentName;)V", "GetAddPersistentPreferredActivity_Landroid_content_ComponentName_Landroid_content_IntentFilter_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="filter" Type="Android.Content.IntentFilter" />
        <Parameter Name="activity" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="filter">The IntentFilter for which a default handler is added.</param>
        <param name="activity">The Activity that is added as default intent handler.
</param>
        <summary>Called by a profile owner or device owner to add a default intent handler activity for
 intents that match a certain intent filter.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile owner or device owner to add a default intent handler activity for
 intents that match a certain intent filter. This activity will remain the default intent
 handler even if the set of potential event handlers for the intent filter changes and if
 the intent preferences are reset.

 </para>
          <para tool="javadoc-to-mdoc">The default disambiguation mechanism takes over if the activity is not installed
 (anymore). When the activity is (re)installed, it is automatically reset as default
 intent handler for the filter.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile owner or device owner. If it is not, a
 security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUserRestriction">
      <MemberSignature Language="C#" Value="public virtual void AddUserRestriction (Android.Content.ComponentName admin, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddUserRestriction(class Android.Content.ComponentName admin, string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addUserRestriction", "(Landroid/content/ComponentName;Ljava/lang/String;)V", "GetAddUserRestriction_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="key">The key of the restriction. See the constants in
            <c><see cref="T:Android.OS.UserManager" /></c> for the list of keys.
</param>
        <summary>Called by a profile or device owner to set a user restriction specified by the key.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile or device owner to set a user restriction specified by the key.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must be a profile or device owner; if it is not,
 a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestriction(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoTimeRequired">
      <MemberSignature Language="C#" Value="public virtual bool AutoTimeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoTimeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAutoTimeRequired", "()Z", "GetGetAutoTimeRequiredHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAutoTimeRequired()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCrossProfileIntentFilters">
      <MemberSignature Language="C#" Value="public virtual void ClearCrossProfileIntentFilters (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearCrossProfileIntentFilters(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearCrossProfileIntentFilters", "(Landroid/content/ComponentName;)V", "GetClearCrossProfileIntentFilters_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.
</param>
        <summary>Called by a profile owner of a managed profile to remove the cross-profile intent filters
 that go from the managed profile to the parent, or from the parent to the managed profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile owner of a managed profile to remove the cross-profile intent filters
 that go from the managed profile to the parent, or from the parent to the managed profile.
 Only removes those that have been set by the profile owner.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearCrossProfileIntentFilters(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDeviceOwnerApp">
      <MemberSignature Language="C#" Value="public virtual void ClearDeviceOwnerApp (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearDeviceOwnerApp(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearDeviceOwnerApp", "(Ljava/lang/String;)V", "GetClearDeviceOwnerApp_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">The package name of the device owner.
</param>
        <summary>Clears the current device owner.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Clears the current device owner.  The caller must be the device owner.

 This function should be used cautiously as once it is called it cannot
 be undone.  The device owner can only be set as a part of device setup
 before setup completes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearDeviceOwnerApp(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPackagePersistentPreferredActivities">
      <MemberSignature Language="C#" Value="public virtual void ClearPackagePersistentPreferredActivities (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearPackagePersistentPreferredActivities(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearPackagePersistentPreferredActivities", "(Landroid/content/ComponentName;Ljava/lang/String;)V", "GetClearPackagePersistentPreferredActivities_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The name of the package for which preferences are removed.
</param>
        <summary>Called by a profile owner or device owner to remove all persistent intent handler preferences
 associated with the given package that were set by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddPersistentPreferredActivity(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile owner or device owner to remove all persistent intent handler preferences
 associated with the given package that were set by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddPersistentPreferredActivity(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile owner. If it is not, a security
 exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearUserRestriction">
      <MemberSignature Language="C#" Value="public virtual void ClearUserRestriction (Android.Content.ComponentName admin, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearUserRestriction(class Android.Content.ComponentName admin, string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearUserRestriction", "(Landroid/content/ComponentName;Ljava/lang/String;)V", "GetClearUserRestriction_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="key">The key of the restriction. See the constants in
            <c><see cref="T:Android.OS.UserManager" /></c> for the list of keys.
</param>
        <summary>Called by a profile or device owner to clear a user restriction specified by the key.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile or device owner to clear a user restriction specified by the key.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must be a profile or device owner; if it is not,
 a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearUserRestriction(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAndInitializeUser">
      <MemberSignature Language="C#" Value="public virtual Android.OS.UserHandle CreateAndInitializeUser (Android.Content.ComponentName admin, string name, string ownerName, Android.Content.ComponentName profileOwnerComponent, Android.OS.Bundle adminExtras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.UserHandle CreateAndInitializeUser(class Android.Content.ComponentName admin, string name, string ownerName, class Android.Content.ComponentName profileOwnerComponent, class Android.OS.Bundle adminExtras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createAndInitializeUser", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/Bundle;)Landroid/os/UserHandle;", "GetCreateAndInitializeUser_Landroid_content_ComponentName_Ljava_lang_String_Ljava_lang_String_Landroid_content_ComponentName_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerName" Type="System.String" />
        <Parameter Name="profileOwnerComponent" Type="Android.Content.ComponentName" />
        <Parameter Name="adminExtras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="name">the user's name</param>
        <param name="ownerName">the human readable name of the organisation associated with this DPM.</param>
        <param name="profileOwnerComponent">The <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> that will be an active admin on
      the user.</param>
        <param name="adminExtras">Extras that will be passed to onEnable of the admin receiver
      on the new user.</param>
        <summary>Called by a device owner to create a user with the specified name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner to create a user with the specified name. The UserHandle returned
 by this method should not be persisted as user handles are recycled as users are removed and
 created. If you need to persist an identifier for this user, use
 <c><see cref="M:Android.OS.UserManager.GetSerialNumberForUser(Android.OS.UserHandle)" /></c>.  The new user will be started in the background
 immediately.

 </para>
          <para tool="javadoc-to-mdoc"> profileOwnerComponent is the <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> to be the profile owner as well
 as registered as an active admin on the new user.  The profile owner package will be
 installed on the new user if it already is installed on the device.

 </para>
          <para tool="javadoc-to-mdoc">If the optionalInitializeData is not null, then the extras will be passed to the
 profileOwnerComponent when onEnable is called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createAndInitializeUser(android.content.ComponentName, java.lang.String, java.lang.String, android.content.ComponentName, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.OS.UserHandle" />
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public virtual Android.OS.UserHandle CreateUser (Android.Content.ComponentName admin, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.UserHandle CreateUser(class Android.Content.ComponentName admin, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createUser", "(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/UserHandle;", "GetCreateUser_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="name">the user's name</param>
        <summary>Called by a device owner to create a user with the specified name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner to create a user with the specified name. The UserHandle returned
 by this method should not be persisted as user handles are recycled as users are removed and
 created. If you need to persist an identifier for this user, use
 <c><see cref="M:Android.OS.UserManager.GetSerialNumberForUser(Android.OS.UserHandle)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createUser(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.OS.UserHandle" />
      </Docs>
    </Member>
    <Member MemberName="CurrentFailedPasswordAttempts">
      <MemberSignature Language="C#" Value="public virtual int CurrentFailedPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentFailedPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentFailedPasswordAttempts", "()I", "GetGetCurrentFailedPasswordAttemptsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the number of times the user has failed at entering a
 password since that last successful password entry.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the number of times the user has failed at entering a
 password since that last successful password entry.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCurrentFailedPasswordAttempts()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="EnableSystemApp">
      <MemberSignature Language="C#" Value="public virtual int EnableSystemApp (Android.Content.ComponentName admin, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EnableSystemApp(class Android.Content.ComponentName admin, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableSystemApp", "(Landroid/content/ComponentName;Landroid/content/Intent;)I", "GetEnableSystemApp_Landroid_content_ComponentName_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="intent">An intent matching the app(s) to be installed. All apps that resolve for this
               intent will be re-enabled in the current profile.</param>
        <summary tool="true">Called by profile or device owners to re-enable system apps by intent that were disabled
 by default when the user was initialized.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to re-enable system apps by intent that were disabled
 by default when the user was initialized.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSystemApp">
      <MemberSignature Language="C#" Value="public virtual void EnableSystemApp (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableSystemApp(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableSystemApp", "(Landroid/content/ComponentName;Ljava/lang/String;)V", "GetEnableSystemApp_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The package to be re-enabled in the current profile.
</param>
        <summary>Called by profile or device owners to re-enable a system app that was disabled by default
 when the user was initialized.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to re-enable a system app that was disabled by default
 when the user was initialized.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraAddExplanation">
      <MemberSignature Language="C#" Value="public const string ExtraAddExplanation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAddExplanation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADD_EXPLANATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An optional CharSequence providing additional explanation for why the
 admin is being added.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">An optional CharSequence providing additional explanation for why the
 admin is being added.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_ADD_EXPLANATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="F:Android.App.Admin.DevicePolicyManager.ActionAddDeviceAdmin" />
      </Docs>
    </Member>
    <Member MemberName="ExtraDeviceAdmin">
      <MemberSignature Language="C#" Value="public const string ExtraDeviceAdmin;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraDeviceAdmin" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_DEVICE_ADMIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ComponentName of the administrator component.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The ComponentName of the administrator component.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DEVICE_ADMIN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="F:Android.App.Admin.DevicePolicyManager.ActionAddDeviceAdmin" />
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningAdminExtrasBundle">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningAdminExtrasBundle;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningAdminExtrasBundle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <c><see cref="T:Android.OS.Parcelable" /></c> extra of type <c><see cref="T:Android.OS.PersistableBundle" /></c> that
 allows a mobile device management application or NFC programmer application which starts
 managed provisioning to pass data to the management application instance after provisioning.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A <c><see cref="T:Android.OS.Parcelable" /></c> extra of type <c><see cref="T:Android.OS.PersistableBundle" /></c> that
 allows a mobile device management application or NFC programmer application which starts
 managed provisioning to pass data to the management application instance after provisioning.
 </para>
          <para tool="javadoc-to-mdoc">
 If used with <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c> it can be used by the application that
 sends the intent to pass data to itself on the newly created profile.
 If used with <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedDevice" /></c> it allows passing data to the same
 instance of the app on the primary user.
 Starting from <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, if used with
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> as part of NFC managed device provisioning, the NFC
 message should contain a stringified <c><see cref="T:Java.Util.Properties" /></c> instance, whose string
 properties will be converted into a <c><see cref="T:Android.OS.PersistableBundle" /></c> and passed to the
 management application after provisioning.

 </para>
          <para tool="javadoc-to-mdoc">
 In both cases the application receives the data in
 <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnProfileProvisioningComplete(Android.Content.Context,Android.Content.Intent)" /></c> via an intent with the action
 <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionProfileProvisioningComplete" /></c>. The bundle is not changed
 during the managed provisioning.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningDeviceAdminPackageChecksum">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningDeviceAdminPackageChecksum;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningDeviceAdminPackageChecksum" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the URL-safe base64 encoded SHA-256 or SHA-1 hash (see notes below) of
 the file at download location specified in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadLocation" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the URL-safe base64 encoded SHA-256 or SHA-1 hash (see notes below) of
 the file at download location specified in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadLocation" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Either this extra or <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminSignatureChecksum" /></c> should be
 present. The provided checksum should match the checksum of the file at the download
 location. If the checksum doesn't match an error will be shown to the user and the user will
 be asked to factory reset the device.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> for devices running <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP" /></c>
 and <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP_MR1" /></c> only SHA-1 hash is supported.
 Starting from <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, this parameter accepts SHA-256 in
 addition to SHA-1. Support for SHA-1 is likely to be removed in future OS releases.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningDeviceAdminPackageDownloadCookieHeader">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningDeviceAdminPackageDownloadCookieHeader;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningDeviceAdminPackageDownloadCookieHeader" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding a http cookie header which should be used in the http request to the
 url specified in <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadLocation" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding a http cookie header which should be used in the http request to the
 url specified in <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadLocation" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningDeviceAdminPackageDownloadLocation">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningDeviceAdminPackageDownloadLocation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningDeviceAdminPackageDownloadLocation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding a url that specifies the download location of the device admin
 package.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding a url that specifies the download location of the device admin
 package. When not provided it is assumed that the device admin package is already installed.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningDeviceAdminPackageName">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningDeviceAdminPackageName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningDeviceAdminPackageName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the package name of the mobile device management application that
 will be set as the profile owner or device owner.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the package name of the mobile device management application that
 will be set as the profile owner or device owner.

 </para>
          <para tool="javadoc-to-mdoc">If an application starts provisioning directly via an intent with action
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c> this package has to match the package name of the
 application that started provisioning. The package will be set as profile owner in that case.

 </para>
          <para tool="javadoc-to-mdoc">This package is set as device owner when device owner provisioning is started by an NFC
 message containing an NFC record with MIME type <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> When this extra is set, the application must have exactly one device admin receiver.
 This receiver will be set as the profile or device owner and active admin.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.App.Admin.DeviceAdminReceiver" />
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningEmailAddress">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningEmailAddress;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningEmailAddress" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_EMAIL_ADDRESS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra that, holds the email address of the account which a managed profile is
 created for.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra that, holds the email address of the account which a managed profile is
 created for. Used with <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c> and
 <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionProfileProvisioningComplete" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> This extra is part of the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningAdminExtrasBundle" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> If the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionProvisionManagedProfile" /></c> intent that starts managed provisioning
 contains this extra, it is forwarded in the
 <c><see cref="F:Android.App.Admin.DeviceAdminReceiver.ActionProfileProvisioningComplete" /></c> intent to the mobile
 device management application that was set as the profile owner during provisioning.
 It is usually used to avoid that the user has to enter their email address twice.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_EMAIL_ADDRESS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningLocale">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningLocale;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningLocale" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_LOCALE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the <c><see cref="T:Java.Util.Locale" /></c> that the device will be set to.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the <c><see cref="T:Java.Util.Locale" /></c> that the device will be set to.
 Format: xx_yy, where xx is the language code, and yy the country code.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCALE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningLocalTime">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningLocalTime;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningLocalTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_LOCAL_TIME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Long extra holding the wall clock time (in milliseconds) to be set on the device's
 <c><see cref="T:Android.App.AlarmManager" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A Long extra holding the wall clock time (in milliseconds) to be set on the device's
 <c><see cref="T:Android.App.AlarmManager" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCAL_TIME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningTimeZone">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningTimeZone;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningTimeZone" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_TIME_ZONE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the time zone <c><see cref="T:Android.App.AlarmManager" /></c> that the device
 will be set to.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the time zone <c><see cref="T:Android.App.AlarmManager" /></c> that the device
 will be set to.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_TIME_ZONE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiHidden">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiHidden;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiHidden" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_HIDDEN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A boolean extra indicating whether the wifi network in <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>
 is hidden or not.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A boolean extra indicating whether the wifi network in <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>
 is hidden or not.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_HIDDEN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiPacUrl">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiPacUrl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiPacUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_PAC_URL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the proxy auto-config (PAC) URL for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the proxy auto-config (PAC) URL for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PAC_URL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiPassword">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiPassword;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiPassword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_PASSWORD")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the password of the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the password of the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PASSWORD" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiProxyBypass">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiProxyBypass;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiProxyBypass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_PROXY_BYPASS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the proxy bypass for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the proxy bypass for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_BYPASS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiProxyHost">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiProxyHost;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiProxyHost" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_PROXY_HOST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the proxy host for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the proxy host for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_HOST" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiProxyPort">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiProxyPort;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiProxyPort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_PROXY_PORT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An int extra holding the proxy port for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">An int extra holding the proxy port for the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_PORT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiSecurityType">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiSecurityType;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiSecurityType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_SECURITY_TYPE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra indicating the security type of the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra indicating the security type of the wifi network in
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SECURITY_TYPE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraProvisioningWifiSsid">
      <MemberSignature Language="C#" Value="public const string ExtraProvisioningWifiSsid;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraProvisioningWifiSsid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_PROVISIONING_WIFI_SSID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A String extra holding the ssid of the wifi network that should be used during nfc device
 owner provisioning for downloading the mobile device management application.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A String extra holding the ssid of the wifi network that should be used during nfc device
 owner provisioning for downloading the mobile device management application.

 </para>
          <para tool="javadoc-to-mdoc">Use in an NFC record with <c><see cref="F:Android.App.Admin.DevicePolicyManager.MimeTypeProvisioningNfc" /></c> that starts device owner
 provisioning via an NFC bump.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SSID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagManagedCanAccessParent">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.DevicePolicyManagerFlags FlagManagedCanAccessParent = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.DevicePolicyManagerFlags FlagManagedCanAccessParent = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_MANAGED_CAN_ACCESS_PARENT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.DevicePolicyManagerFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.DevicePolicyManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Flag used by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileIntentFilter(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c> to allow activities in
 the managed profile to access intents sent from the parent profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag used by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileIntentFilter(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c> to allow activities in
 the managed profile to access intents sent from the parent profile.
 That is, when an app in the parent profile calls
 <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>, the intent can be resolved by a
 matching activity in the managed profile.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_MANAGED_CAN_ACCESS_PARENT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagParentCanAccessManaged">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.DevicePolicyManagerFlags FlagParentCanAccessManaged = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.DevicePolicyManagerFlags FlagParentCanAccessManaged = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_PARENT_CAN_ACCESS_MANAGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.DevicePolicyManagerFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.DevicePolicyManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag used by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileIntentFilter(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c> to allow activities in
 the parent profile to access intents sent from the managed profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag used by <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileIntentFilter(Android.Content.ComponentName,Android.Content.IntentFilter,Android.Content.IntentFilter)" /></c> to allow activities in
 the parent profile to access intents sent from the managed profile.
 That is, when an app in the managed profile calls
 <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>, the intent can be resolved by a
 matching activity in the parent profile.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_PARENT_CAN_ACCESS_MANAGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.App.Admin.DevicePolicyManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.Admin.DevicePolicyManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.Admin.DevicePolicyManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountTypesWithManagementDisabled">
      <MemberSignature Language="C#" Value="public virtual string[] GetAccountTypesWithManagementDisabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetAccountTypesWithManagementDisabled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAccountTypesWithManagementDisabled", "()[Ljava/lang/String;", "GetGetAccountTypesWithManagementDisabledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the array of accounts for which account management is disabled by the profile owner.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the array of accounts for which account management is disabled by the profile owner.

 </para>
          <para tool="javadoc-to-mdoc"> Account management can be disabled/enabled by calling
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetAccountManagementDisabled(Android.Content.ComponentName,System.String,System.String)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAccountTypesWithManagementDisabled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.SetAccountManagementDisabled(Android.Content.ComponentName, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetApplicationRestrictions">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle GetApplicationRestrictions (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle GetApplicationRestrictions(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getApplicationRestrictions", "(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/Bundle;", "GetGetApplicationRestrictions_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The name of the package to fetch restricted settings of.</param>
        <summary>Called by a profile or device owner to get the application restrictions for a given target
 application running in the profile.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile or device owner to get the application restrictions for a given target
 application running in the profile.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile or device owner; if it is not, a security
 exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getApplicationRestrictions(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCameraDisabled">
      <MemberSignature Language="C#" Value="public virtual bool GetCameraDisabled (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetCameraDisabled(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCameraDisabled", "(Landroid/content/ComponentName;)Z", "GetGetCameraDisabled_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to check whether any admins
 have disabled the camera
</param>
        <summary>Determine whether or not the device's cameras have been disabled for this user,
 either by the current admin, if specified, or all admins.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether or not the device's cameras have been disabled for this user,
 either by the current admin, if specified, or all admins.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCameraDisabled(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="GetCrossProfileCallerIdDisabled">
      <MemberSignature Language="C#" Value="public virtual bool GetCrossProfileCallerIdDisabled (Android.Content.ComponentName who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetCrossProfileCallerIdDisabled(class Android.Content.ComponentName who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCrossProfileCallerIdDisabled", "(Landroid/content/ComponentName;)Z", "GetGetCrossProfileCallerIdDisabled_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="who">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.
</param>
        <summary>Called by a profile owner of a managed profile to determine whether or not caller-Id
 information has been disabled.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile owner of a managed profile to determine whether or not caller-Id
 information has been disabled.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile owner. If it is not, a
 security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileCallerIdDisabled(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCrossProfileWidgetProviders">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetCrossProfileWidgetProviders (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetCrossProfileWidgetProviders(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCrossProfileWidgetProviders", "(Landroid/content/ComponentName;)Ljava/util/List;", "GetGetCrossProfileWidgetProviders_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <summary>Called by the profile owner of a managed profile to query providers from which packages are
 available in the parent profile.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the profile owner of a managed profile to query providers from which packages are
 available in the parent profile.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileWidgetProviders(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileWidgetProvider(Android.Content.ComponentName, System.String)" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.RemoveCrossProfileWidgetProvider(Android.Content.ComponentName, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledCaCerts">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;byte[]&gt; GetInstalledCaCerts (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;unsigned int8[]&gt; GetInstalledCaCerts(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstalledCaCerts", "(Landroid/content/ComponentName;)Ljava/util/List;", "GetGetInstalledCaCerts_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with, or
              <c>null</c> if calling from a delegated certificate installer.</param>
        <summary>Returns all CA certificates that are currently trusted, excluding system CA certificates.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns all CA certificates that are currently trusted, excluding system CA certificates.
 If a user has installed any certificates by other means than device policy these will be
 included too.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getInstalledCaCerts(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyguardDisabledFeatures">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.KeyguardDisable GetKeyguardDisabledFeatures (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.KeyguardDisable GetKeyguardDisabledFeatures(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getKeyguardDisabledFeatures", "(Landroid/content/ComponentName;)I", "GetGetKeyguardDisabledFeatures_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to check whether any admins
 have disabled features in keyguard.</param>
        <summary>Determine whether or not features have been disabled in keyguard either by the current
 admin, if specified, or all admins.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether or not features have been disabled in keyguard either by the current
 admin, if specified, or all admins.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeyguardDisabledFeatures(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetMaximumFailedPasswordsForWipe">
      <MemberSignature Language="C#" Value="public virtual int GetMaximumFailedPasswordsForWipe (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaximumFailedPasswordsForWipe(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMaximumFailedPasswordsForWipe", "(Landroid/content/ComponentName;)I", "GetGetMaximumFailedPasswordsForWipe_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate
 all admins.
</param>
        <summary>Retrieve the current maximum number of login attempts that are allowed
 before the device wipes itself, for all admins of this user and its profiles
 or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current maximum number of login attempts that are allowed
 before the device wipes itself, for all admins of this user and its profiles
 or a particular one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumFailedPasswordsForWipe(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetMaximumTimeToLock">
      <MemberSignature Language="C#" Value="public virtual long GetMaximumTimeToLock (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetMaximumTimeToLock(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMaximumTimeToLock", "(Landroid/content/ComponentName;)J", "GetGetMaximumTimeToLock_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate
 all admins.</param>
        <summary>Retrieve the current maximum time to unlock for all admins of this user
 and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current maximum time to unlock for all admins of this user
 and its profiles or a particular one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumTimeToLock(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordExpiration">
      <MemberSignature Language="C#" Value="public virtual long GetPasswordExpiration (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetPasswordExpiration(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordExpiration", "(Landroid/content/ComponentName;)J", "GetGetPasswordExpiration_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate all admins.</param>
        <summary>Get the current password expiration time for the given admin or an aggregate of
 all admins of this user and its profiles if admin is null.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the current password expiration time for the given admin or an aggregate of
 all admins of this user and its profiles if admin is null. If the password is
 expired, this will return the time since the password expired as a negative number.
 If admin is null, then a composite of all expiration timeouts is returned
 - which will be the minimum of all timeouts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpiration(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordExpirationTimeout">
      <MemberSignature Language="C#" Value="public virtual long GetPasswordExpirationTimeout (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetPasswordExpirationTimeout(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordExpirationTimeout", "(Landroid/content/ComponentName;)J", "GetGetPasswordExpirationTimeout_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate all admins.</param>
        <summary>Get the password expiration timeout for the given admin.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the password expiration timeout for the given admin. The expiration timeout is the
 recurring expiration timeout provided in the call to
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordExpirationTimeout(Android.Content.ComponentName,System.Int64)" /></c> for the given admin or the
 aggregate of all policy administrators if <c>admin</c> is null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpirationTimeout(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordHistoryLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordHistoryLength (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordHistoryLength(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordHistoryLength", "(Landroid/content/ComponentName;)I", "GetGetPasswordHistoryLength_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate
 all admins.</param>
        <summary>Retrieve the current password history length for all admins of this
 user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current password history length for all admins of this
 user and its profiles or a particular one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordHistoryLength(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMaximumLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMaximumLength (Android.App.Admin.PasswordQuality quality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMaximumLength(valuetype Android.App.Admin.PasswordQuality quality) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMaximumLength", "(I)I", "GetGetPasswordMaximumLength_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quality" Type="Android.App.Admin.PasswordQuality">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="quality">The quality being interrogated.</param>
        <summary>Return the maximum password length that the device supports for a
 particular password quality.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the maximum password length that the device supports for a
 particular password quality.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMaximumLength(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLength (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLength(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLength", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLength_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate
 all admins.
</param>
        <summary>Retrieve the current minimum password length for all admins of this
 user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current minimum password length for all admins of this
 user and its profiles or a particular one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLength(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLetters">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLetters (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLetters(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLetters", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLetters_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of letters required in the password for all
 admins or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of letters required in the password for all
 admins or a particular one. This is the same value as
 set by {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLetters(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLetters(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLowerCase">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLowerCase (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLowerCase(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLowerCase", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLowerCase_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of lower case letters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of lower case letters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLowerCase(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLowerCase(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumNonLetter">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumNonLetter (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumNonLetter(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumNonLetter", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumNonLetter_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of non-letter characters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of non-letter characters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumNonLetter(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNonLetter(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumNumeric">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumNumeric (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumNumeric(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumNumeric", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumNumeric_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of numerical digits required in the password
 for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of numerical digits required in the password
 for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumNumeric(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNumeric(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumSymbols">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumSymbols (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumSymbols(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumSymbols", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumSymbols_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of symbols required in the password for all
 admins or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of symbols required in the password for all
 admins or a particular one. This is the same value as
 set by {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumSymbols(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumSymbols(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumUpperCase">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumUpperCase (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumUpperCase(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumUpperCase", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumUpperCase_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to
            aggregate all admins.</param>
        <summary>Retrieve the current number of upper case letters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current number of upper case letters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumUpperCase(Android.Content.ComponentName,System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumUpperCase(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordQuality">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.PasswordQuality GetPasswordQuality (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.PasswordQuality GetPasswordQuality(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordQuality", "(Landroid/content/ComponentName;)I", "GetGetPasswordQuality_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.PasswordQuality</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to aggregate
 all admins.
</param>
        <summary>Retrieve the current minimum password quality for all admins of this user
 and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current minimum password quality for all admins of this user
 and its profiles or a particular one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordQuality(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPermittedAccessibilityServices">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetPermittedAccessibilityServices (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetPermittedAccessibilityServices(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPermittedAccessibilityServices", "(Landroid/content/ComponentName;)Ljava/util/List;", "GetGetPermittedAccessibilityServices_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <summary>Returns the list of permitted accessibility services set by this device or profile owner.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of permitted accessibility services set by this device or profile owner.

 </para>
          <para tool="javadoc-to-mdoc">An empty list means no accessibility services except system services are allowed.
 Null means all accessibility services are allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedAccessibilityServices(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPermittedInputMethods">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetPermittedInputMethods (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetPermittedInputMethods(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPermittedInputMethods", "(Landroid/content/ComponentName;)Ljava/util/List;", "GetGetPermittedInputMethods_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <summary>Returns the list of permitted input methods set by this device or profile owner.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of permitted input methods set by this device or profile owner.

 </para>
          <para tool="javadoc-to-mdoc">An empty list means no input methods except system input methods are allowed.
 Null means all input methods are allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedInputMethods(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScreenCaptureDisabled">
      <MemberSignature Language="C#" Value="public virtual bool GetScreenCaptureDisabled (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetScreenCaptureDisabled(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getScreenCaptureDisabled", "(Landroid/content/ComponentName;)Z", "GetGetScreenCaptureDisabled_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or <c>null</c> to check whether any admins
 have disabled screen capture.
</param>
        <summary>Determine whether or not screen capture has been disabled by the current
 admin, if specified, or all admins.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether or not screen capture has been disabled by the current
 admin, if specified, or all admins.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getScreenCaptureDisabled(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStorageEncryption">
      <MemberSignature Language="C#" Value="public virtual bool GetStorageEncryption (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetStorageEncryption(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStorageEncryption", "(Landroid/content/ComponentName;)Z", "GetGetStorageEncryption_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.  If null,
 this will return the requested encryption setting as an aggregate of all active
 administrators.</param>
        <summary>Called by an application that is administering the device to
 determine the requested setting for secure storage.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 determine the requested setting for secure storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryption(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="HasCaCertInstalled">
      <MemberSignature Language="C#" Value="public virtual bool HasCaCertInstalled (Android.Content.ComponentName admin, byte[] certBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasCaCertInstalled(class Android.Content.ComponentName admin, unsigned int8[] certBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasCaCertInstalled", "(Landroid/content/ComponentName;[B)Z", "GetHasCaCertInstalled_Landroid_content_ComponentName_arrayBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="certBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with, or
              <c>null</c> if calling from a delegated certificate installer.</param>
        <param name="certBuffer">encoded form of the certificate to look up.
</param>
        <summary>Returns whether this certificate is installed as a trusted CA.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this certificate is installed as a trusted CA.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasCaCertInstalled(android.content.ComponentName, byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasGrantedPolicy">
      <MemberSignature Language="C#" Value="public virtual bool HasGrantedPolicy (Android.Content.ComponentName admin, Android.App.Admin.DeviceAdminUses usesPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasGrantedPolicy(class Android.Content.ComponentName admin, valuetype Android.App.Admin.DeviceAdminUses usesPolicy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasGrantedPolicy", "(Landroid/content/ComponentName;I)Z", "GetHasGrantedPolicy_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="usesPolicy" Type="Android.App.Admin.DeviceAdminUses">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.  Must be
 an active administrator, or an exception will be thrown.</param>
        <param name="usesPolicy">Which uses-policy to check, as defined in <c><see cref="T:Android.App.Admin.DeviceAdminInfo" /></c>.
</param>
        <summary>Returns true if an administrator has been granted a particular device policy.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if an administrator has been granted a particular device policy.  This can
 be used to check whether the administrator was activated under an earlier set of policies,
 but requires additional policies after an upgrade.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasGrantedPolicy(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="InstallCaCert">
      <MemberSignature Language="C#" Value="public virtual bool InstallCaCert (Android.Content.ComponentName admin, byte[] certBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InstallCaCert(class Android.Content.ComponentName admin, unsigned int8[] certBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("installCaCert", "(Landroid/content/ComponentName;[B)Z", "GetInstallCaCert_Landroid_content_ComponentName_arrayBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="certBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with, or
              <c>null</c> if calling from a delegated certificate installer.</param>
        <param name="certBuffer">encoded form of the certificate to install.</param>
        <summary>Installs the given certificate as a user CA.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Installs the given certificate as a user CA.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installCaCert(android.content.ComponentName, byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstallKeyPair">
      <MemberSignature Language="C#" Value="public virtual bool InstallKeyPair (Android.Content.ComponentName who, Java.Security.IPrivateKey privKey, Java.Security.Cert.Certificate cert, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InstallKeyPair(class Android.Content.ComponentName who, class Java.Security.IPrivateKey privKey, class Java.Security.Cert.Certificate cert, string alias) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("installKeyPair", "(Landroid/content/ComponentName;Ljava/security/PrivateKey;Ljava/security/cert/Certificate;Ljava/lang/String;)Z", "GetInstallKeyPair_Landroid_content_ComponentName_Ljava_security_PrivateKey_Ljava_security_cert_Certificate_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
        <Parameter Name="privKey" Type="Java.Security.IPrivateKey" />
        <Parameter Name="cert" Type="Java.Security.Cert.Certificate" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="who">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="privKey">The private key to install.</param>
        <param name="cert">The certificate to install.</param>
        <param name="alias">The private key alias under which to install the certificate. If a certificate
 with that alias already exists, it will be overwritten.</param>
        <summary>Called by a device or profile owner to install a certificate and private key pair.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device or profile owner to install a certificate and private key pair. The
 keypair will be visible to all apps within the profile.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActivePasswordSufficient">
      <MemberSignature Language="C#" Value="public virtual bool IsActivePasswordSufficient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActivePasswordSufficient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isActivePasswordSufficient", "()Z", "GetIsActivePasswordSufficientHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determine whether the current password the user has set is sufficient
 to meet the policy requirements (quality, minimum length) that have been
 requested by the admins of this user and its profiles.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the current password the user has set is sufficient
 to meet the policy requirements (quality, minimum length) that have been
 requested by the admins of this user and its profiles.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isActivePasswordSufficient()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="IsAdminActive">
      <MemberSignature Language="C#" Value="public virtual bool IsAdminActive (Android.Content.ComponentName who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAdminActive(class Android.Content.ComponentName who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isAdminActive", "(Landroid/content/ComponentName;)Z", "GetIsAdminActive_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <summary>Return true if the given administrator component is currently
 active (enabled) in the system.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the given administrator component is currently
 active (enabled) in the system.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAdminActive(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="IsApplicationHidden">
      <MemberSignature Language="C#" Value="public virtual bool IsApplicationHidden (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsApplicationHidden(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isApplicationHidden", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", "GetIsApplicationHidden_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The name of the package to retrieve the hidden status of.</param>
        <summary>Called by profile or device owners to determine if a package is hidden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to determine if a package is hidden.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isApplicationHidden(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeviceOwnerApp">
      <MemberSignature Language="C#" Value="public virtual bool IsDeviceOwnerApp (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDeviceOwnerApp(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isDeviceOwnerApp", "(Ljava/lang/String;)Z", "GetIsDeviceOwnerApp_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">the package name of the app, to compare with the registered device owner
 app, if any.</param>
        <summary>Used to determine if a particular package has been registered as a Device Owner app.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Used to determine if a particular package has been registered as a Device Owner app.
 A device owner app is a special device admin that cannot be deactivated by the user, once
 activated as a device admin. It also cannot be uninstalled. To check whether a particular
 package is currently registered as the device owner app, pass in the package name from
 <c><see cref="P:Android.Content.Context.PackageName" /></c> to this method.</para>
          <para tool="javadoc-to-mdoc">This is useful for device
 admin apps that want to check whether they are also registered as the device owner app. The
 exact mechanism by which a device admin app is registered as a device owner app is defined by
 the setup process.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceOwnerApp(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsLockTaskPermitted">
      <MemberSignature Language="C#" Value="public virtual bool IsLockTaskPermitted (string pkg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLockTaskPermitted(string pkg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isLockTaskPermitted", "(Ljava/lang/String;)Z", "GetIsLockTaskPermitted_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pkg" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pkg">The package to check
</param>
        <summary>This function lets the caller know whether the given component is allowed to start the
 lock task mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This function lets the caller know whether the given component is allowed to start the
 lock task mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isLockTaskPermitted(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMasterVolumeMuted">
      <MemberSignature Language="C#" Value="public virtual bool IsMasterVolumeMuted (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsMasterVolumeMuted(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isMasterVolumeMuted", "(Landroid/content/ComponentName;)Z", "GetIsMasterVolumeMuted_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <summary>Called by profile or device owners to check whether the master volume mute is on or off.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to check whether the master volume mute is on or off.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isMasterVolumeMuted(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProfileOwnerApp">
      <MemberSignature Language="C#" Value="public virtual bool IsProfileOwnerApp (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProfileOwnerApp(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isProfileOwnerApp", "(Ljava/lang/String;)Z", "GetIsProfileOwnerApp_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">The package name of the app to compare with the registered profile owner.</param>
        <summary>Used to determine if a particular package is registered as the profile owner for the
 current user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Used to determine if a particular package is registered as the profile owner for the
 current user. A profile owner is a special device admin that has additional privileges
 within the profile.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProfileOwnerApp(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUninstallBlocked">
      <MemberSignature Language="C#" Value="public virtual bool IsUninstallBlocked (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUninstallBlocked(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isUninstallBlocked", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", "GetIsUninstallBlocked_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component whose blocking policy will be checked, or
              <c>null</c> to check whether any admin has blocked the uninstallation.</param>
        <param name="packageName">package to check.</param>
        <summary tool="true">Check whether the current user has been blocked by device policy from uninstalling a package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check whether the current user has been blocked by device policy from uninstalling a package.
 Requires the caller to be the profile owner if checking a specific admin's policy.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Starting from <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP_MR1" /></c>, the
 behavior of this API is changed such that passing <c>null</c> as the <c>admin</c>
 parameter will return if any admin has blocked the uninstallation. Before L MR1, passing
 <c>null</c> will cause a NullPointerException to be raised.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUninstallBlocked(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableFeaturesAll">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesAll = 2147483647;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesAll = (2147483647)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_FEATURES_ALL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>2147483647</MemberValue>
      <Docs>
        <summary>Disable all current and future keyguard customizations.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable all current and future keyguard customizations.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_ALL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableFeaturesNone">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesNone = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_FEATURES_NONE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Widgets are enabled in keyguard
</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Widgets are enabled in keyguard
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_NONE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableFingerprint">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableFingerprint = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableFingerprint = (32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_FINGERPRINT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>Disable fingerprint sensor on keyguard secure screens (e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable fingerprint sensor on keyguard secure screens (e.g. PIN/Pattern/Password).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FINGERPRINT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableSecureCamera">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableSecureCamera = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableSecureCamera = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_SECURE_CAMERA")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Disable the camera on secure keyguard screens (e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable the camera on secure keyguard screens (e.g. PIN/Pattern/Password)
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_CAMERA" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableSecureNotifications">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableSecureNotifications = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableSecureNotifications = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_SECURE_NOTIFICATIONS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Disable showing all notifications on secure keyguard screens (e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable showing all notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_NOTIFICATIONS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableTrustAgents">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableTrustAgents = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableTrustAgents = (16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_TRUST_AGENTS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Ignore trust agent state on secure keyguard screens
 (e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Ignore trust agent state on secure keyguard screens
 (e.g. PIN/Pattern/Password).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_TRUST_AGENTS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableUnredactedNotifications">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableUnredactedNotifications = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableUnredactedNotifications = (8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Only allow redacted notifications on secure keyguard screens (e.g.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only allow redacted notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableWidgetsAll">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableWidgetsAll = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableWidgetsAll = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_WIDGETS_ALL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Disable all keyguard widgets.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable all keyguard widgets. Has no effect.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_WIDGETS_ALL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LockNow">
      <MemberSignature Language="C#" Value="public virtual void LockNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockNow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockNow", "()V", "GetLockNowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make the device lock immediately, as if the lock screen timeout has
 expired at the point of this call.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Make the device lock immediately, as if the lock screen timeout has
 expired at the point of this call.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyForceLock" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="MimeTypeProvisioningNfc">
      <MemberSignature Language="C#" Value="public const string MimeTypeProvisioningNfc;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MimeTypeProvisioningNfc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MIME_TYPE_PROVISIONING_NFC")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This MIME type is used for starting the Device Owner provisioning.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This MIME type is used for starting the Device Owner provisioning.

 </para>
          <para tool="javadoc-to-mdoc">During device owner provisioning a device admin app is set as the owner of the device.
 A device owner has full control over the device. The device owner can not be modified by the
 user and the only way of resetting the device is if the device owner app calls a factory
 reset.

 </para>
          <para tool="javadoc-to-mdoc"> A typical use case would be a device that is owned by a company, but used by either an
 employee or client.

 </para>
          <para tool="javadoc-to-mdoc"> The NFC message should be send to an unprovisioned device.

 </para>
          <para tool="javadoc-to-mdoc">The NFC record must contain a serialized <c><see cref="T:Java.Util.Properties" /></c> object which
 contains the following properties:
 <list type="bullet"><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageName" /></c></term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadLocation" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageDownloadCookieHeader" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageChecksum" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningLocalTime" /></c> (convert to String), optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningTimeZone" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningLocale" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSsid" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiHidden" /></c> (convert to String), optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiSecurityType" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiPassword" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiProxyHost" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiProxyPort" /></c> (convert to String), optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiProxyBypass" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningWifiPacUrl" /></c>, optional</term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningAdminExtrasBundle" /></c>, optional, supported from
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, the properties should contain
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminComponentName" /></c> instead of
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageName" /></c>, (although specifying only
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraProvisioningDeviceAdminPackageName" /></c> is still supported).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MIME_TYPE_PROVISIONING_NFC" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveActiveAdmin">
      <MemberSignature Language="C#" Value="public virtual void RemoveActiveAdmin (Android.Content.ComponentName who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveActiveAdmin(class Android.Content.ComponentName who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeActiveAdmin", "(Landroid/content/ComponentName;)V", "GetRemoveActiveAdmin_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <summary>Remove a current administration component.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a current administration component.  This can only be called
 by the application that owns the administration component; if you
 try to remove someone else's component, a security exception will be
 thrown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeActiveAdmin(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCrossProfileWidgetProvider">
      <MemberSignature Language="C#" Value="public virtual bool RemoveCrossProfileWidgetProvider (Android.Content.ComponentName admin, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveCrossProfileWidgetProvider(class Android.Content.ComponentName admin, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeCrossProfileWidgetProvider", "(Landroid/content/ComponentName;Ljava/lang/String;)Z", "GetRemoveCrossProfileWidgetProvider_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The package from which widget providers are no longer
     white-listed.</param>
        <summary>Called by the profile owner of a managed profile to disable widget providers from a given
 package to be available in the parent profile.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the profile owner of a managed profile to disable widget providers from a given
 package to be available in the parent profile. For this method to take effect the
 package should have been added via <c><see cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileWidgetProvider(Android.Content.ComponentName,System.String)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> By default no widget provider package is white-listed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.AddCrossProfileWidgetProvider(Android.Content.ComponentName, System.String)" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.GetCrossProfileWidgetProviders(Android.Content.ComponentName)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveUser">
      <MemberSignature Language="C#" Value="public virtual bool RemoveUser (Android.Content.ComponentName admin, Android.OS.UserHandle userHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveUser(class Android.Content.ComponentName admin, class Android.OS.UserHandle userHandle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeUser", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z", "GetRemoveUser_Landroid_content_ComponentName_Landroid_os_UserHandle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="userHandle" Type="Android.OS.UserHandle" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="userHandle">the user to remove.</param>
        <summary>Called by a device owner to remove a user and all associated data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner to remove a user and all associated data. The primary user can
 not be removed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeUser(android.content.ComponentName, android.os.UserHandle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPassword">
      <MemberSignature Language="C#" Value="public virtual bool ResetPassword (string password, Android.App.Admin.ResetPasswordFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ResetPassword(string password, valuetype Android.App.Admin.ResetPasswordFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resetPassword", "(Ljava/lang/String;I)Z", "GetResetPassword_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="flags" Type="Android.App.Admin.ResetPasswordFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="password">The new password for the user. Null or empty clears the password.</param>
        <param name="flags">May be 0 or combination of <c><see cref="F:Android.App.Admin.DevicePolicyManager.ResetPasswordRequireEntry" /></c> and
              <c><see cref="F:Android.App.Admin.DevicePolicyManager.ResetPasswordDoNotAskCredentialsOnBoot" /></c>.</param>
        <summary>Force a new device unlock password (the password needed to access the
 entire device, not for individual accounts) on the user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Force a new device unlock password (the password needed to access the
 entire device, not for individual accounts) on the user.  This takes
 effect immediately.
 The given password must be sufficient for the
 current password quality and length constraints as returned by
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetPasswordQuality(Android.Content.ComponentName)" /></c> and
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetPasswordMinimumLength(Android.Content.ComponentName)" /></c>; if it does not meet
 these constraints, then it will be rejected and false returned.  Note
 that the password may be a stronger quality (containing alphanumeric
 characters when the requested quality is only numeric), in which case
 the currently active quality will be increased to match.

 </para>
          <para tool="javadoc-to-mdoc">Calling with a null or empty password will clear any existing PIN,
 pattern or password if the current password constraints allow it.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyResetPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.

 </para>
          <para tool="javadoc-to-mdoc">Calling this from a managed profile will throw a security exception.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPassword(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ResetPasswordRequireEntry">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.ResetPasswordFlags ResetPasswordRequireEntry = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.ResetPasswordFlags ResetPasswordRequireEntry = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RESET_PASSWORD_REQUIRE_ENTRY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.ResetPasswordFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.ResetPasswordFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.ResetPassword(System.String,Android.App.Admin.ResetPasswordFlags)" /></c>: don't allow other admins to change
 the password again until the user has entered it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.ResetPassword(System.String,Android.App.Admin.ResetPasswordFlags)" /></c>: don't allow other admins to change
 the password again until the user has entered it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_REQUIRE_ENTRY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetAccountManagementDisabled">
      <MemberSignature Language="C#" Value="public virtual void SetAccountManagementDisabled (Android.Content.ComponentName admin, string accountType, bool disabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAccountManagementDisabled(class Android.Content.ComponentName admin, string accountType, bool disabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAccountManagementDisabled", "(Landroid/content/ComponentName;Ljava/lang/String;Z)V", "GetSetAccountManagementDisabled_Landroid_content_ComponentName_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="accountType" Type="System.String" />
        <Parameter Name="disabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="accountType">For which account management is disabled or enabled.</param>
        <param name="disabled">The boolean indicating that account management will be disabled (true) or
 enabled (false).
</param>
        <summary>Called by a device owner or profile owner to disable account management for a specific type
 of account.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner or profile owner to disable account management for a specific type
 of account.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a device owner or profile owner. If it is not, a
 security exception will be thrown.

 </para>
          <para tool="javadoc-to-mdoc">When account management is disabled for an account type, adding or removing an account
 of that type will not be possible.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetApplicationHidden">
      <MemberSignature Language="C#" Value="public virtual bool SetApplicationHidden (Android.Content.ComponentName admin, string packageName, bool hidden);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetApplicationHidden(class Android.Content.ComponentName admin, string packageName, bool hidden) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setApplicationHidden", "(Landroid/content/ComponentName;Ljava/lang/String;Z)Z", "GetSetApplicationHidden_Landroid_content_ComponentName_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
        <Parameter Name="hidden" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The name of the package to hide or unhide.</param>
        <param name="hidden">
          <c>true</c> if the package should be hidden, <c>false</c> if it should be
                 unhidden.</param>
        <summary>Called by profile or device owners to hide or unhide packages.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to hide or unhide packages. When a package is hidden it
 is unavailable for use, but the data and actual package file remain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationHidden(android.content.ComponentName, java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetApplicationRestrictions">
      <MemberSignature Language="C#" Value="public virtual void SetApplicationRestrictions (Android.Content.ComponentName admin, string packageName, Android.OS.Bundle settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetApplicationRestrictions(class Android.Content.ComponentName admin, string packageName, class Android.OS.Bundle settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setApplicationRestrictions", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)V", "GetSetApplicationRestrictions_Landroid_content_ComponentName_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
        <Parameter Name="settings" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">The name of the package to update restricted settings for.</param>
        <param name="settings">A <c><see cref="T:Android.OS.Bundle" /></c> to be parsed by the receiving application, conveying a new
 set of active restrictions.</param>
        <summary>Called by a profile or device owner to set the application restrictions for a given target
 application running in the profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile or device owner to set the application restrictions for a given target
 application running in the profile.

 </para>
          <para tool="javadoc-to-mdoc">The provided <c><see cref="T:Android.OS.Bundle" /></c> consists of key-value pairs, where the types of values may be:
 <list type="bullet"><item><term><c>boolean</c></term></item><item><term><c>int</c></term></item><item><term><c>String</c> or <c>String[]</c></term></item><item><term>From <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, <c>Bundle</c> or <c>Bundle[]</c></term></item></list></para>
          <para tool="javadoc-to-mdoc">The application restrictions are only made visible to the target application and the
 profile or device owner.

 </para>
          <para tool="javadoc-to-mdoc">If the restrictions are not available yet, but may be applied in the near future,
 the admin can notify the target application of that by adding
 <c><see cref="F:Android.OS.UserManager.KeyRestrictionsPending" /></c> to the settings parameter.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile or device owner; if it is not, a security
 exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.OS.UserManager.KeyRestrictionsPending" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoTimeRequired">
      <MemberSignature Language="C#" Value="public virtual void SetAutoTimeRequired (Android.Content.ComponentName admin, bool required);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAutoTimeRequired(class Android.Content.ComponentName admin, bool required) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAutoTimeRequired", "(Landroid/content/ComponentName;Z)V", "GetSetAutoTimeRequired_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="required" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="required">Whether auto time is set required or not.
</param>
        <summary>Called by a device owner to set whether auto time is required.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner to set whether auto time is required. If auto time is
 required the user cannot set the date and time, but has to use network date and time.

 </para>
          <para tool="javadoc-to-mdoc">Note: if auto time is required the user can still manually set the time zone.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a device owner. If it is not, a security exception will
 be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAutoTimeRequired(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCameraDisabled">
      <MemberSignature Language="C#" Value="public virtual void SetCameraDisabled (Android.Content.ComponentName admin, bool disabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCameraDisabled(class Android.Content.ComponentName admin, bool disabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCameraDisabled", "(Landroid/content/ComponentName;Z)V", "GetSetCameraDisabled_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="disabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="disabled">Whether or not the camera should be disabled.
</param>
        <summary>Called by an application that is administering the device to disable all cameras
 on the device, for this user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to disable all cameras
 on the device, for this user. After setting this, no applications running as this user
 will be able to access any cameras on the device.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyDisableCamera" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCameraDisabled(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetCrossProfileCallerIdDisabled">
      <MemberSignature Language="C#" Value="public virtual void SetCrossProfileCallerIdDisabled (Android.Content.ComponentName who, bool disabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCrossProfileCallerIdDisabled(class Android.Content.ComponentName who, bool disabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCrossProfileCallerIdDisabled", "(Landroid/content/ComponentName;Z)V", "GetSetCrossProfileCallerIdDisabled_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
        <Parameter Name="disabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="who">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="disabled">If true caller-Id information in the managed profile is not displayed.
</param>
        <summary>Called by a profile owner of a managed profile to set whether caller-Id information from
 the managed profile will be shown in the parent profile, for incoming calls.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a profile owner of a managed profile to set whether caller-Id information from
 the managed profile will be shown in the parent profile, for incoming calls.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a profile owner. If it is not, a
 security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGlobalSetting">
      <MemberSignature Language="C#" Value="public virtual void SetGlobalSetting (Android.Content.ComponentName admin, string setting, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetGlobalSetting(class Android.Content.ComponentName admin, string setting, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setGlobalSetting", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V", "GetSetGlobalSetting_Landroid_content_ComponentName_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="setting" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="setting">The name of the setting to update.</param>
        <param name="value">The value to update the setting to.
</param>
        <summary>Called by device owners to update <c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html" /></c> settings.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by device owners to update <c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html" /></c> settings. Validation that the value
 of the setting is in the correct form for the setting type should be performed by the caller.
 </para>
          <para tool="javadoc-to-mdoc">The settings that can be updated with this method are:
 <list type="bullet"><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#ADB_ENABLED" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#AUTO_TIME" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#AUTO_TIME_ZONE" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#DATA_ROAMING" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#USB_MASS_STORAGE_ENABLED" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#STAY_ON_WHILE_PLUGGED_IN" /></c>
   This setting is only available from <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> onwards
   and can only be set if <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetMaximumTimeToLock(Android.Content.ComponentName,System.Int64)" /></c> is not used to set a timeout.</term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN" /></c></term></item>
   This setting is only available from <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> onwards.
   
 </list></para>
          <para tool="javadoc-to-mdoc">Changing the following settings has no effect as of
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>:
 <list type="bullet"><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#BLUETOOTH_ON" /></c>.
   Use <c><see cref="M:Android.Bluetooth.BluetoothAdapter.Enable" /></c> and
   <c><see cref="M:Android.Bluetooth.BluetoothAdapter.Disable" /></c> instead.</term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#DEVELOPMENT_SETTINGS_ENABLED" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#MODE_RINGER" /></c>.
   Use <c><see cref="P:Android.Media.AudioManager.RingerMode" /></c> instead.</term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#NETWORK_PREFERENCE" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Global;Href=../../../../reference/android/provider/Settings.Global.html#WIFI_ON" /></c>.
   Use <c><see cref="M:Android.Net.Wifi.WifiManager.SetWifiEnabled(System.Boolean)" /></c> instead.</term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetKeyguardDisabledFeatures">
      <MemberSignature Language="C#" Value="public virtual void SetKeyguardDisabledFeatures (Android.Content.ComponentName admin, Android.App.Admin.KeyguardDisable which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetKeyguardDisabledFeatures(class Android.Content.ComponentName admin, valuetype Android.App.Admin.KeyguardDisable which) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setKeyguardDisabledFeatures", "(Landroid/content/ComponentName;I)V", "GetSetKeyguardDisabledFeatures_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="which" Type="Android.App.Admin.KeyguardDisable">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="which">
          <c>
            <see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFeaturesNone" />
          </c> (default),
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableWidgetsAll" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableSecureCamera" /></c>,
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableSecureNotifications" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableTrustAgents" /></c>,
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableUnredactedNotifications" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFingerprint" /></c>,
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFeaturesAll" /></c></param>
        <summary>Called by an application that is administering the device to disable keyguard customizations,
 such as widgets.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to disable keyguard customizations,
 such as widgets. After setting this, keyguard features will be disabled according to the
 provided feature list.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyDisableKeyguardFeatures" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.

 </para>
          <para tool="javadoc-to-mdoc">Calling this from a managed profile before version
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> will throw a security exception.

 </para>
          <para tool="javadoc-to-mdoc">From version <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> a profile owner can set:
 <list type="bullet"><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableTrustAgents" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFingerprint" /></c>
      these will affect the profile's parent user.
 </term></item><item><term><c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableUnredactedNotifications" /></c> this will affect notifications
 generated by applications in the managed profile.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">Requests to disable other features on a managed profile will be ignored. The admin
 can check which features have been disabled by calling
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetKeyguardDisabledFeatures(Android.Content.ComponentName)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabledFeatures(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SetLockTaskPackages">
      <MemberSignature Language="C#" Value="public virtual void SetLockTaskPackages (Android.Content.ComponentName admin, string[] packages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLockTaskPackages(class Android.Content.ComponentName admin, string[] packages) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLockTaskPackages", "(Landroid/content/ComponentName;[Ljava/lang/String;)V", "GetSetLockTaskPackages_Landroid_content_ComponentName_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packages" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packages">The list of packages allowed to enter lock task mode</param>
        <summary>Sets which packages may enter lock task mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets which packages may enter lock task mode.

 </para>
          <para tool="javadoc-to-mdoc">Any packages that shares uid with an allowed package will also be allowed
 to activate lock task.

 From <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> removing packages from the lock task
 package list results in locked tasks belonging to those packages to be finished.

 This function can only be called by the device owner.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages(android.content.ComponentName, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.SecurityException" />
        <altmember cref="M:Android.App.Activity.StartLockTask" />
        <altmember cref="M:Android.App.Admin.DeviceAdminReceiver.OnLockTaskModeEntering(Android.Content.Context, Android.Content.Intent, Android.Content.Intent)" />
        <altmember cref="M:Android.App.Admin.DeviceAdminReceiver.OnLockTaskModeExiting(Android.Content.Context, Android.Content.Intent)" />
        <altmember cref="F:Android.OS.UserManager.DisallowCreateWindows" />
      </Docs>
    </Member>
    <Member MemberName="SetMasterVolumeMuted">
      <MemberSignature Language="C#" Value="public virtual void SetMasterVolumeMuted (Android.Content.ComponentName admin, bool on);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMasterVolumeMuted(class Android.Content.ComponentName admin, bool on) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMasterVolumeMuted", "(Landroid/content/ComponentName;Z)V", "GetSetMasterVolumeMuted_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="on" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="on">
          <c>true</c> to mute master volume, <c>false</c> to turn mute off.
</param>
        <summary>Called by profile or device owners to set the master volume mute on or off.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to set the master volume mute on or off.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMasterVolumeMuted(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaximumFailedPasswordsForWipe">
      <MemberSignature Language="C#" Value="public virtual void SetMaximumFailedPasswordsForWipe (Android.Content.ComponentName admin, int num);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaximumFailedPasswordsForWipe(class Android.Content.ComponentName admin, int32 num) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaximumFailedPasswordsForWipe", "(Landroid/content/ComponentName;I)V", "GetSetMaximumFailedPasswordsForWipe_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="num" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="num">The number of failed password attempts at which point the
 device will wipe its data.
</param>
        <summary>Setting this to a value greater than zero enables a built-in policy
 that will perform a device wipe after too many incorrect
 device-unlock passwords have been entered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Setting this to a value greater than zero enables a built-in policy
 that will perform a device wipe after too many incorrect
 device-unlock passwords have been entered.  This built-in policy combines
 watching for failed passwords and wiping the device, and requires
 that you request both <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> and
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWipeData" /></c>}.

 </para>
          <para tool="javadoc-to-mdoc">To implement any other policy (e.g. wiping data for a particular
 application only, erasing or revoking credentials, or reporting the
 failure to a server), you should implement
 <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnPasswordFailed(Android.Content.Context,Android.Content.Intent)" /></c>
 instead.  Do not use this API, because if the maximum count is reached,
 the device will be wiped immediately, and your callback will not be invoked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumFailedPasswordsForWipe(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetMaximumTimeToLock">
      <MemberSignature Language="C#" Value="public virtual void SetMaximumTimeToLock (Android.Content.ComponentName admin, long timeMs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaximumTimeToLock(class Android.Content.ComponentName admin, int64 timeMs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaximumTimeToLock", "(Landroid/content/ComponentName;J)V", "GetSetMaximumTimeToLock_Landroid_content_ComponentName_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="timeMs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="timeMs">The new desired maximum time to lock in milliseconds.
 A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 maximum time for user activity until the device will lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 maximum time for user activity until the device will lock.  This limits
 the length that the user can set.  It takes effect immediately.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyForceLock" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumTimeToLock(android.content.ComponentName, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordExpirationTimeout">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordExpirationTimeout (Android.Content.ComponentName admin, long timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordExpirationTimeout(class Android.Content.ComponentName admin, int64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordExpirationTimeout", "(Landroid/content/ComponentName;J)V", "GetSetPasswordExpirationTimeout_Landroid_content_ComponentName_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="timeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="timeout">The limit (in ms) that a password can remain in effect. A value of 0
        means there is no restriction (unlimited).
</param>
        <summary>Called by a device admin to set the password expiration timeout.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device admin to set the password expiration timeout. Calling this method
 will restart the countdown for password expiration for the given admin, as will changing
 the device password (for all admins).

 </para>
          <para tool="javadoc-to-mdoc">The provided timeout is the time delta in ms and will be added to the current time.
 For example, to have the password expire 5 days from now, timeout would be
 5 * 86400 * 1000 = 432000000 ms for timeout.

 </para>
          <para tool="javadoc-to-mdoc">To disable password expiration, a value of 0 may be used for timeout.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyExpirePassword" /></c> to be able to call this
 method; if it has not, a security exception will be thrown.

 </para>
          <para tool="javadoc-to-mdoc"> Note that setting the password will automatically reset the expiration time for all
 active admins. Active admins do not need to explicitly call this method in that case.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordExpirationTimeout(android.content.ComponentName, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordHistoryLength">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordHistoryLength (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordHistoryLength(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordHistoryLength", "(Landroid/content/ComponentName;I)V", "GetSetPasswordHistoryLength_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
        with.</param>
        <param name="length">The new desired length of password history. A value of 0
        means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the length
 of the password history.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the length
 of the password history. After setting this, the user will not be able to
 enter a new password that is the same as any password in the history. Note
 that the current password will remain until the user has set a new one, so
 the change does not take place immediately. To prompt the user for a new
 password, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.
 This constraint is only imposed if the administrator has also requested
 either <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c><c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, or <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>
 with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call this
 method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordHistoryLength(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLength">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLength (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLength(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLength", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLength_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="length">The new desired minimum password length.  A value of 0
 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum allowed password length.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum allowed password length.  After setting this, the user
 will not be able to enter a new password that is not at least as
 restrictive as what has been set.  Note that the current password
 will remain until the user has set a new one, so the change does not
 take place immediately.  To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.  This
 constraint is only imposed if the administrator has also requested either
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>,
 or <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLength(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLetters">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLetters (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLetters(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLetters", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLetters_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of letters required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of letters required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of letters required in the password. After setting this,
 the user will not be able to enter a new password that is not at least as
 restrictive as what has been set. Note that the current password will
 remain until the user has set a new one, so the change does not take
 place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLetters(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLowerCase">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLowerCase (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLowerCase(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLowerCase", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLowerCase_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of lower case letters
            required in the password. A value of 0 means there is no
            restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of lower case letters required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of lower case letters required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 0.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLowerCase(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumNonLetter">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumNonLetter (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumNonLetter(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumNonLetter", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumNonLetter_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of letters required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of non-letter characters (numerical digits or symbols)
 required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of non-letter characters (numerical digits or symbols)
 required in the password. After setting this, the user will not be able
 to enter a new password that is not at least as restrictive as what has
 been set. Note that the current password will remain until the user has
 set a new one, so the change does not take place immediately. To prompt
 the user for a new password, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after
 setting this value. This constraint is only imposed if the administrator
 has also requested <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The default value is 0.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNonLetter(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumNumeric">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumNumeric (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumNumeric(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumNumeric", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumNumeric_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of numerical digits required
            in the password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of numerical digits required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of numerical digits required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNumeric(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumSymbols">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumSymbols (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumSymbols(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumSymbols", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumSymbols_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of symbols required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of symbols required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of symbols required in the password. After setting this,
 the user will not be able to enter a new password that is not at least as
 restrictive as what has been set. Note that the current password will
 remain until the user has set a new one, so the change does not take
 place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumSymbols(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumUpperCase">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumUpperCase (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumUpperCase(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumUpperCase", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumUpperCase_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of upper case letters
            required in the password. A value of 0 means there is no
            restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of upper case letters required in the password.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of upper case letters required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName,Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 0.
 </para>
          <para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumUpperCase(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordQuality">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordQuality (Android.Content.ComponentName admin, Android.App.Admin.PasswordQuality quality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordQuality(class Android.Content.ComponentName admin, valuetype Android.App.Admin.PasswordQuality quality) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordQuality", "(Landroid/content/ComponentName;I)V", "GetSetPasswordQuality_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="quality" Type="Android.App.Admin.PasswordQuality">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="quality">The new desired quality.  One of
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_SOMETHING" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>
 or <c><see cref="F:Android.App.Admin.PasswordQuality.Complex" tool="ReplaceLinkValue" /></c>.
</param>
        <summary>Called by an application that is administering the device to set the
 password restrictions it is imposing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 password restrictions it is imposing.  After setting this, the user
 will not be able to enter a new password that is not at least as
 restrictive as what has been set.  Note that the current password
 will remain until the user has set a new one, so the change does not
 take place immediately.  To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.

 </para>
          <para tool="javadoc-to-mdoc">Quality constants are ordered so that higher values are more restrictive;
 thus the highest requested quality constant (between the policy set here,
 the user's preference, and any other considerations) is the one that
 is in effect.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordQuality(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetPermittedAccessibilityServices">
      <MemberSignature Language="C#" Value="public virtual bool SetPermittedAccessibilityServices (Android.Content.ComponentName admin, System.Collections.Generic.IList&lt;string&gt; packageNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetPermittedAccessibilityServices(class Android.Content.ComponentName admin, class System.Collections.Generic.IList`1&lt;string&gt; packageNames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPermittedAccessibilityServices", "(Landroid/content/ComponentName;Ljava/util/List;)Z", "GetSetPermittedAccessibilityServices_Landroid_content_ComponentName_Ljava_util_List_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageNames" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="admin">To be added.</param>
        <param name="packageNames">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPermittedInputMethods">
      <MemberSignature Language="C#" Value="public virtual bool SetPermittedInputMethods (Android.Content.ComponentName admin, System.Collections.Generic.IList&lt;string&gt; packageNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetPermittedInputMethods(class Android.Content.ComponentName admin, class System.Collections.Generic.IList`1&lt;string&gt; packageNames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPermittedInputMethods", "(Landroid/content/ComponentName;Ljava/util/List;)Z", "GetSetPermittedInputMethods_Landroid_content_ComponentName_Ljava_util_List_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageNames" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="admin">To be added.</param>
        <param name="packageNames">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProfileEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetProfileEnabled (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProfileEnabled(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProfileEnabled", "(Landroid/content/ComponentName;)V", "GetSetProfileEnabled_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.
</param>
        <summary>Sets the enabled state of the profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the enabled state of the profile. A profile should be enabled only once it is ready to
 be used. Only the profile owner can call this.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.IsProfileOwnerApp(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetProfileName">
      <MemberSignature Language="C#" Value="public virtual void SetProfileName (Android.Content.ComponentName who, string profileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProfileName(class Android.Content.ComponentName who, string profileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProfileName", "(Landroid/content/ComponentName;Ljava/lang/String;)V", "GetSetProfileName_Landroid_content_ComponentName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
        <Parameter Name="profileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <param name="profileName">The name of the profile.
</param>
        <summary>Sets the name of the profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the name of the profile. In the device owner case it sets the name of the user
 which it is called from. Only a profile owner or device owner can call this. If this is
 never called by the profile or device owner, the name will be set to default values.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileName(android.content.ComponentName, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.IsProfileOwnerApp(System.String)" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.IsDeviceOwnerApp(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetRecommendedGlobalProxy">
      <MemberSignature Language="C#" Value="public virtual void SetRecommendedGlobalProxy (Android.Content.ComponentName admin, Android.Net.ProxyInfo proxyInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRecommendedGlobalProxy(class Android.Content.ComponentName admin, class Android.Net.ProxyInfo proxyInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRecommendedGlobalProxy", "(Landroid/content/ComponentName;Landroid/net/ProxyInfo;)V", "GetSetRecommendedGlobalProxy_Landroid_content_ComponentName_Landroid_net_ProxyInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="proxyInfo" Type="Android.Net.ProxyInfo" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="proxyInfo">The a <c><see cref="T:Android.Net.ProxyInfo" /></c> object defining the new global
        HTTP proxy.  A <c>null</c> value will clear the global HTTP proxy.
</param>
        <summary>Set a network-independent global HTTP proxy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a network-independent global HTTP proxy.  This is not normally what you want
 for typical HTTP proxies - they are generally network dependent.  However if you're
 doing something unusual like general internal filtering this may be useful.  On
 a private network where the proxy is not accessible, you may break HTTP using this.

 </para>
          <para tool="javadoc-to-mdoc">This method requires the caller to be the device owner.

 </para>
          <para tool="javadoc-to-mdoc">This proxy is only a recommendation and it is possible that some apps will ignore it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Net.ProxyInfo" />
      </Docs>
    </Member>
    <Member MemberName="SetRestrictionsProvider">
      <MemberSignature Language="C#" Value="public virtual void SetRestrictionsProvider (Android.Content.ComponentName admin, Android.Content.ComponentName provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRestrictionsProvider(class Android.Content.ComponentName admin, class Android.Content.ComponentName provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRestrictionsProvider", "(Landroid/content/ComponentName;Landroid/content/ComponentName;)V", "GetSetRestrictionsProvider_Landroid_content_ComponentName_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="provider" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="provider">The component name of the service that implements
 <c><see cref="T:Android.Service.Restrictions.RestrictionsReceiver" /></c>. If this param is null,
 it removes the restrictions provider previously assigned.
</param>
        <summary>Designates a specific service component as the provider for
 making permission requests of a local or remote administrator of the user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Designates a specific service component as the provider for
 making permission requests of a local or remote administrator of the user.
 </para>
          <para tool="javadoc-to-mdoc">
 Only a profile owner can designate the restrictions provider.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScreenCaptureDisabled">
      <MemberSignature Language="C#" Value="public virtual void SetScreenCaptureDisabled (Android.Content.ComponentName admin, bool disabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScreenCaptureDisabled(class Android.Content.ComponentName admin, bool disabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setScreenCaptureDisabled", "(Landroid/content/ComponentName;Z)V", "GetSetScreenCaptureDisabled_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="disabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="disabled">Whether screen capture is disabled or not.
</param>
        <summary>Called by a device/profile owner to set whether the screen capture is disabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device/profile owner to set whether the screen capture is disabled. Disabling
 screen capture also prevents the content from being shown on display devices that do not have
 a secure video output. See <c><see cref="F:Android.Views.Display.FlagSecure" /></c> for more details about
 secure surfaces and secure displays.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must be a device or profile owner. If it is not, a
 security exception will be thrown.

 </para>
          <para tool="javadoc-to-mdoc">From version <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#M" /></c> disabling screen capture also
 blocks assist requests for all activities of the relevant user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setScreenCaptureDisabled(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSecureSetting">
      <MemberSignature Language="C#" Value="public virtual void SetSecureSetting (Android.Content.ComponentName admin, string setting, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSecureSetting(class Android.Content.ComponentName admin, string setting, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSecureSetting", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V", "GetSetSecureSetting_Landroid_content_ComponentName_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="setting" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="setting">The name of the setting to update.</param>
        <param name="value">The value to update the setting to.
</param>
        <summary>Called by profile or device owners to update <c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html" /></c> settings.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to update <c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html" /></c> settings. Validation
 that the value of the setting is in the correct form for the setting type should be performed
 by the caller.
 </para>
          <para tool="javadoc-to-mdoc">The settings that can be updated by a profile or device owner with this method are:
 <list type="bullet"><item><term><c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html#DEFAULT_INPUT_METHOD" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html#INSTALL_NON_MARKET_APPS" /></c></term></item><item><term><c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html#SKIP_FIRST_USE_HINTS" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">A device owner can additionally update the following settings:
 <list type="bullet"><item><term><c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../../reference/android/provider/Settings.Secure.html#LOCATION_MODE" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStorageEncryption">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.EncryptionStatus SetStorageEncryption (Android.Content.ComponentName admin, bool encrypt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.EncryptionStatus SetStorageEncryption(class Android.Content.ComponentName admin, bool encrypt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStorageEncryption", "(Landroid/content/ComponentName;Z)I", "GetSetStorageEncryption_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.EncryptionStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="encrypt" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="encrypt">true to request encryption, false to release any previous request</param>
        <summary>Called by an application that is administering the device to
 request that the storage system be encrypted.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 request that the storage system be encrypted.

 </para>
          <para tool="javadoc-to-mdoc">When multiple device administrators attempt to control device
 encryption, the most secure, supported setting will always be
 used.  If any device administrator requests device encryption,
 it will be enabled;  Conversely, if a device administrator
 attempts to disable device encryption while another
 device administrator has enabled it, the call to disable will
 fail (most commonly returning <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE" /></c>).

 </para>
          <para tool="javadoc-to-mdoc">This policy controls encryption of the secure (application data) storage area.  Data
 written to other storage areas may or may not be encrypted, and this policy does not require
 or control the encryption of any other storage areas.
 There is one exception:  If <c><see cref="P:Android.OS.Environment.IsExternalStorageEmulated" /></c> is
 <c>true</c>, then the directory returned by
 <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c> must be written to disk
 within the encrypted storage area.

 </para>
          <para tool="javadoc-to-mdoc">Important Note:  On some devices, it is possible to encrypt storage without requiring
 the user to create a device PIN or Password.  In this case, the storage is encrypted, but
 the encryption key may not be fully secured.  For maximum security, the administrator should
 also require (and check for) a pattern, PIN, or password.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStorageEncryption(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetUninstallBlocked">
      <MemberSignature Language="C#" Value="public virtual void SetUninstallBlocked (Android.Content.ComponentName admin, string packageName, bool uninstallBlocked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUninstallBlocked(class Android.Content.ComponentName admin, string packageName, bool uninstallBlocked) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setUninstallBlocked", "(Landroid/content/ComponentName;Ljava/lang/String;Z)V", "GetSetUninstallBlocked_Landroid_content_ComponentName_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="packageName" Type="System.String" />
        <Parameter Name="uninstallBlocked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="packageName">package to change.</param>
        <param name="uninstallBlocked">true if the user shouldn't be able to uninstall the package.
</param>
        <summary>Called by profile or device owners to change whether a user can uninstall
 a package.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by profile or device owners to change whether a user can uninstall
 a package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageEncryptionStatus">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.EncryptionStatus StorageEncryptionStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.App.Admin.EncryptionStatus StorageEncryptionStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStorageEncryptionStatus", "()I", "GetGetStorageEncryptionStatusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.EncryptionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Called by an application that is administering the device to
 determine the current encryption status of the device.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 determine the current encryption status of the device.

 Depending on the returned status code, the caller may proceed in different
 ways.  If the result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED" /></c>, the
 storage system does not support encryption.  If the
 result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE" /></c>, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionStartEncryption" /></c> to begin the process of encrypting or decrypting the
 storage.  If the result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY" /></c>, the
 storage system has enabled encryption but no password is set so further action
 may be required.  If the result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING" /></c> or
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE" /></c>, no further action is required.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryptionStatus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SwitchUser">
      <MemberSignature Language="C#" Value="public virtual bool SwitchUser (Android.Content.ComponentName admin, Android.OS.UserHandle userHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SwitchUser(class Android.Content.ComponentName admin, class Android.OS.UserHandle userHandle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("switchUser", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z", "GetSwitchUser_Landroid_content_ComponentName_Landroid_os_UserHandle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="userHandle" Type="Android.OS.UserHandle" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="userHandle">the user to switch to; null will switch to primary.</param>
        <summary>Called by a device owner to switch the specified user to the foreground.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a device owner to switch the specified user to the foreground.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#switchUser(android.content.ComponentName, android.os.UserHandle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Content.Intent.ActionUserForeground" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UninstallAllUserCaCerts">
      <MemberSignature Language="C#" Value="public virtual void UninstallAllUserCaCerts (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UninstallAllUserCaCerts(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("uninstallAllUserCaCerts", "(Landroid/content/ComponentName;)V", "GetUninstallAllUserCaCerts_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with, or
              <c>null</c> if calling from a delegated certificate installer.
</param>
        <summary>Uninstalls all custom trusted CA certificates from the profile.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uninstalls all custom trusted CA certificates from the profile. Certificates installed by
 means other than device policy will also be removed, except for system CA certificates.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallAllUserCaCerts(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UninstallCaCert">
      <MemberSignature Language="C#" Value="public virtual void UninstallCaCert (Android.Content.ComponentName admin, byte[] certBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UninstallCaCert(class Android.Content.ComponentName admin, unsigned int8[] certBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("uninstallCaCert", "(Landroid/content/ComponentName;[B)V", "GetUninstallCaCert_Landroid_content_ComponentName_arrayBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="certBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with, or
              <c>null</c> if calling from a delegated certificate installer.</param>
        <param name="certBuffer">encoded form of the certificate to remove.
</param>
        <summary>Uninstalls the given certificate from trusted user CAs, if present.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uninstalls the given certificate from trusted user CAs, if present.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallCaCert(android.content.ComponentName, byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WipeData">
      <MemberSignature Language="C#" Value="public virtual void WipeData (Android.App.Admin.WipeDataFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WipeData(valuetype Android.App.Admin.WipeDataFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wipeData", "(I)V", "GetWipeData_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.App.Admin.WipeDataFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">Bit mask of additional options: currently supported flags
 are <c><see cref="F:Android.App.Admin.DevicePolicyManager.WipeExternalStorage" /></c> and
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.WipeResetProtectionData" /></c>.
</param>
        <summary>Ask the user data be wiped.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Ask the user data be wiped.  Wiping the primary user will cause the
 device to reboot, erasing all user data while next booting up.

 </para>
          <para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWipeData" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="WipeExternalStorage">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.WipeDataFlags WipeExternalStorage = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.WipeDataFlags WipeExternalStorage = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("WIPE_EXTERNAL_STORAGE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.WipeDataFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.WipeDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.WipeData(Android.App.Admin.WipeDataFlags)" /></c>: also erase the device's external
 storage (such as SD cards).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.WipeData(Android.App.Admin.WipeDataFlags)" /></c>: also erase the device's external
 storage (such as SD cards).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EXTERNAL_STORAGE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
  </Members>
</Type>
