<Type Name="Camera" FullName="Android.Hardware.Camera">
  <TypeSignature Language="C#" Value="public class Camera : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Camera extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/Camera", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This class is obsoleted in this android platform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The Camera class is used to set image capture settings, start/stop preview,
 snap pictures, and retrieve frames for encoding for video.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The Camera class is used to set image capture settings, start/stop preview,
 snap pictures, and retrieve frames for encoding for video.  This class is a
 client for the Camera service, which manages the actual camera hardware.

 <example><code lang="xml"> &lt;uses-permission android:name="android.permission.CAMERA" /&gt;
 &lt;uses-feature android:name="android.hardware.camera" /&gt;
 &lt;uses-feature android:name="android.hardware.camera.autofocus" /&gt;</code></example><list type="number"><item><term>Obtain an instance of Camera from <c><see cref="M:Android.Hardware.Camera.Open(System.Int32)" /></c>.

 </term></item><item><term>Get existing (default) settings with <c><see cref="M:Android.Hardware.Camera.GetParameters" /></c>.

 </term></item><item><term>If necessary, modify the returned <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html" /></c> object and call
 <c><see cref="M:Android.Hardware.Camera.SetParameters(.Parameters)" /></c>.

 </term></item><item><term>If desired, call <c><see cref="M:Android.Hardware.Camera.SetDisplayOrientation(System.Int32)" /></c>.

 </term></item><item><term><format type="text/html"><b>Important</b></format>: Pass a fully initialized <c><see cref="T:Android.Views.ISurfaceHolder" /></c> to
 <c><see cref="M:Android.Hardware.Camera.SetPreviewDisplay(Android.Views.ISurfaceHolder)" /></c>.  Without a surface, the camera
 will be unable to start the preview.

 </term></item><item><term><format type="text/html"><b>Important</b></format>: Call <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c> to start updating the
 preview surface.  Preview must be started before you can take a picture.

 </term></item><item><term>When you want, call <c><see cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback,.IPictureCallback,.IPictureCallback,.IPictureCallback)" /></c> to
 capture a photo.  Wait for the callbacks to provide the actual image data.

 </term></item><item><term>After taking a picture, preview display will have stopped.  To take more
 photos, call <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c> again first.

 </term></item><item><term>Call <c><see cref="M:Android.Hardware.Camera.StopPreview" /></c> to stop updating the preview surface.

 </term></item><item><term><format type="text/html"><b>Important:</b></format> Call <c><see cref="M:Android.Hardware.Camera.Release" /></c> to release the camera for
 use by other applications.  Applications should release the camera
 immediately in <c><see cref="M:Android.App.Activity.OnPause" /></c> (and re-<c><see cref="M:Android.Hardware.Camera.Open" /></c>
 it in <c><see cref="M:Android.App.Activity.OnResume" /></c>).
 </term></item></list><list type="number"><item><term>Obtain and initialize a Camera and start preview as described above.

 </term></item><item><term>Call <c><see cref="M:Android.Hardware.Camera.Unlock" /></c> to allow the media process to access the camera.

 </term></item><item><term>Pass the camera to <c><see cref="M:Android.Media.MediaRecorder.SetCamera(Android.Hardware.Camera)" /></c>.
 See <c><see cref="T:Android.Media.MediaRecorder" /></c> information about video recording.

 </term></item><item><term>When finished recording, call <c><see cref="M:Android.Hardware.Camera.Reconnect" /></c> to re-acquire
 and re-lock the camera.

 </term></item><item><term>If desired, restart preview and take more photos or videos.

 </term></item><item><term>Call <c><see cref="M:Android.Hardware.Camera.StopPreview" /></c> and <c><see cref="M:Android.Hardware.Camera.Release" /></c> as described above.
 </term></item></list><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">To access the device camera, you must declare the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#CAMERA" /></c> permission in your Android
 Manifest. Also be sure to include the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></format>
 manifest element to declare camera features used by your application.
 For example, if you use the camera and auto-focus feature, your Manifest
 should include the following:</para>
      <para tool="javadoc-to-mdoc">To take pictures with this class, use the following steps:</para>
      <para tool="javadoc-to-mdoc">To quickly switch to video recording mode, use these steps:</para>
      <para tool="javadoc-to-mdoc">This class is not thread-safe, and is meant for use from one event thread.
 Most long-running operations (preview, focus, photo capture, etc) happen
 asynchronously and invoke callbacks as necessary.  Callbacks will be invoked
 on the event thread <c><see cref="M:Android.Hardware.Camera.Open(System.Int32)" /></c> was called from.  This class's methods
 must never be called from multiple threads at once.</para>
      <para tool="javadoc-to-mdoc">
        <i>Caution:</i> Different Android-powered devices
 may have different hardware specifications, such as megapixel ratings and
 auto-focus capabilities. In order for your application to be compatible with
 more devices, you should not make assumptions about the device camera
 specifications.</para>
      <para tool="javadoc-to-mdoc">For more information about using cameras, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/media/camera.html">Camera</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/Camera.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Camera (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionNewPicture">
      <MemberSignature Language="C#" Value="public const string ActionNewPicture;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNewPicture" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_NEW_PICTURE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A new picture is taken by the camera, and the entry of
 the picture has been added to the media store.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A new picture is taken by the camera, and the entry of
 the picture has been added to the media store.
 <c><see cref="P:Android.Content.Intent.Data" /></c> is URI of the picture.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#ACTION_NEW_PICTURE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ActionNewVideo">
      <MemberSignature Language="C#" Value="public const string ActionNewVideo;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNewVideo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_NEW_VIDEO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action:  A new video is recorded by the camera, and the entry
 of the video has been added to the media store.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action:  A new video is recorded by the camera, and the entry
 of the video has been added to the media store.
 <c><see cref="P:Android.Content.Intent.Data" /></c> is URI of the video.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#ACTION_NEW_VIDEO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="AddCallbackBuffer">
      <MemberSignature Language="C#" Value="public void AddCallbackBuffer (byte[] callbackBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCallbackBuffer(unsigned int8[] callbackBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addCallbackBuffer", "([B)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callbackBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="callbackBuffer">the buffer to add to the queue. The size of the
   buffer must match the values described above.</param>
        <summary>Adds a pre-allocated buffer to the preview callback buffer queue.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds a pre-allocated buffer to the preview callback buffer queue.
 Applications can add one or more buffers to the queue. When a preview
 frame arrives and there is still at least one available buffer, the
 buffer will be used and removed from the queue. Then preview callback is
 invoked with the buffer. If a frame arrives and there is no buffer left,
 the frame is discarded. Applications should add buffers back when they
 finish processing the data in them.

 </para>
          <para tool="javadoc-to-mdoc">For formats besides YV12, the size of the buffer is determined by
 multiplying the preview image width, height, and bytes per pixel. The
 width and height can be read from
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getPreviewSize()" /></c>. Bytes per pixel can be
 computed from <c><see cref="M:Android.Graphics.ImageFormat.GetBitsPerPixel(Android.Graphics.ImageFormatType)" /></c> /
 8, using the image format from
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getPreviewFormat()" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If using the <c><see cref="F:Android.Graphics.ImageFormat.Yv12" /></c> format, the
 size can be calculated using the equations listed in
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#setPreviewFormat(int)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method is only necessary when
 <c><see cref="M:Android.Hardware.Camera.SetPreviewCallbackWithBuffer(.IPreviewCallback)" /></c> is used. When
 <c><see cref="M:Android.Hardware.Camera.SetPreviewCallback(.IPreviewCallback)" /></c> or
 <c><see cref="M:Android.Hardware.Camera.SetOneShotPreviewCallback(.IPreviewCallback)" /></c> are used, buffers
 are automatically allocated. When a supplied buffer is too small to
 hold the preview frame data, preview callback will return null and
 the buffer will be removed from the buffer queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#addCallbackBuffer(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Hardware.Camera.SetPreviewCallbackWithBuffer(.IPreviewCallback)" />
      </Docs>
    </Member>
    <Member MemberName="AutoFocus">
      <MemberSignature Language="C#" Value="public void AutoFocus (Android.Hardware.Camera.IAutoFocusCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoFocus(class Android.Hardware.Camera/IAutoFocusCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("autoFocus", "(Landroid/hardware/Camera$AutoFocusCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IAutoFocusCallback" />
      </Parameters>
      <Docs>
        <param name="cb">the callback to run</param>
        <summary>Starts camera auto-focus and registers a callback function to run when
 the camera is focused.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts camera auto-focus and registers a callback function to run when
 the camera is focused.  This method is only valid when preview is active
 (between <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c> and before <c><see cref="M:Android.Hardware.Camera.StopPreview" /></c>).

 </para>
          <para tool="javadoc-to-mdoc">Callers should check
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getFocusMode()" /></c> to determine if
 this method should be called. If the camera does not support auto-focus,
 it is a no-op and <c><see cref="!:NoType:android/hardware/Camera$AutoFocusCallback;Href=../../../reference/android/hardware/Camera.AutoFocusCallback.html#onAutoFocus(boolean,android.hardware.Camera)" /></c>
 callback will be called immediately.

 </para>
          <para tool="javadoc-to-mdoc">If your application should not be installed
 on devices without auto-focus, you must declare that your application
 uses auto-focus with the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></format>
 manifest element.</para>
          <para tool="javadoc-to-mdoc">If the current flash mode is not
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#FLASH_MODE_OFF" /></c>, flash may be
 fired during auto-focus, depending on the driver and camera hardware.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Auto-exposure lock <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getAutoExposureLock()" /></c>
 and auto-white balance locks <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getAutoWhiteBalanceLock()" /></c>
 do not change during and after autofocus. But auto-focus routine may stop
 auto-exposure and auto-white balance transiently during focusing.

 </para>
          <para tool="javadoc-to-mdoc">Stopping preview with <c><see cref="M:Android.Hardware.Camera.StopPreview" /></c>, or triggering still
 image capture with <c><see cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback,.IPictureCallback,.IPictureCallback)" /></c>, will not change the
 the focus position. Applications must call cancelAutoFocus to reset the
 focus.</para>
          <para tool="javadoc-to-mdoc">If autofocus is successful, consider using
 <c><see cref="T:Android.Media.MediaActionSound" /></c> to properly play back an autofocus
 success sound to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#autoFocus(android.hardware.Camera.AutoFocusCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Hardware.Camera.CancelAutoFocus" />
        <altmember cref="T:Android.Media.MediaActionSound" />
      </Docs>
    </Member>
    <Member MemberName="CancelAutoFocus">
      <MemberSignature Language="C#" Value="public void CancelAutoFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAutoFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelAutoFocus", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels any auto-focus function in progress.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels any auto-focus function in progress.
 Whether or not auto-focus is currently in progress,
 this function will return the focus position to the default.
 If the camera does not support auto-focus, this is a no-op.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#cancelAutoFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Hardware.Camera.AutoFocus(.IAutoFocusCallback)" />
      </Docs>
    </Member>
    <Member MemberName="EnableShutterSound">
      <MemberSignature Language="C#" Value="public bool EnableShutterSound (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnableShutterSound(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableShutterSound", "(Z)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">whether the camera should play the system shutter sound
                when <c><see cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback,.IPictureCallback,.IPictureCallback)" /></c> is called.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Enable or disable the default shutter sound when taking a picture.</para>
          <para tool="javadoc-to-mdoc">By default, the camera plays the system-defined camera shutter sound
 when <c><see cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback,.IPictureCallback,.IPictureCallback)" /></c> is called. Using this method, the shutter sound
 can be disabled. It is strongly recommended that an alternative shutter
 sound is played in the <c><see cref="!:NoType:android/hardware/Camera$ShutterCallback;Href=../../../reference/android/hardware/Camera.ShutterCallback.html" /></c> when the system shutter
 sound is disabled.</para>
          <para tool="javadoc-to-mdoc">Note that devices may not always allow disabling the camera shutter
 sound. If the shutter sound state cannot be set to the desired value,
 this method will return false. <c><see cref="!:NoType:android/hardware/Camera$CameraInfo;Href=../../../reference/android/hardware/Camera.CameraInfo.html#canDisableShutterSound" /></c>
 can be used to determine whether the device will allow the shutter sound
 to be disabled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#enableShutterSound(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback, .IPictureCallback, .IPictureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="FaceDetection">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Hardware.Camera.FaceDetectionEventArgs&gt; FaceDetection;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Hardware.Camera/FaceDetectionEventArgs&gt; FaceDetection" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Hardware.Camera+FaceDetectionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCameraInfo">
      <MemberSignature Language="C#" Value="public static void GetCameraInfo (int cameraId, Android.Hardware.Camera.CameraInfo cameraInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetCameraInfo(int32 cameraId, class Android.Hardware.Camera/CameraInfo cameraInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCameraInfo", "(ILandroid/hardware/Camera$CameraInfo;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cameraId" Type="System.Int32" />
        <Parameter Name="cameraInfo" Type="Android.Hardware.Camera+CameraInfo" />
      </Parameters>
      <Docs>
        <param name="cameraId">To be added.</param>
        <param name="cameraInfo">To be added.</param>
        <summary>Returns the information about a particular camera.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the information about a particular camera.
 If <c><see cref="P:Android.Hardware.Camera.NumberOfCameras" /></c> returns N, the valid id is 0 to N-1.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#getCameraInfo(int, android.hardware.Camera.CameraInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Camera.Parameters GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Camera/Parameters GetParameters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getParameters", "()Landroid/hardware/Camera$Parameters;", "GetGetParametersHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera+Parameters</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current settings for this Camera service.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current settings for this Camera service.
 If modifications are made to the returned Parameters, they must be passed
 to <c><see cref="M:Android.Hardware.Camera.SetParameters(.Parameters)" /></c> to take effect.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#getParameters()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Hardware.Camera.SetParameters(.Parameters)" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Re-locks the camera to prevent other processes from accessing it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Re-locks the camera to prevent other processes from accessing it.
 Camera objects are locked by default unless <c><see cref="M:Android.Hardware.Camera.Unlock" /></c> is
 called.  Normally <c><see cref="M:Android.Hardware.Camera.Reconnect" /></c> is used instead.

 </para>
          <para tool="javadoc-to-mdoc">Since API level 14, camera is automatically locked for applications in
 <c><see cref="M:Android.Media.MediaRecorder.Start" /></c>. Applications can use the
 camera (ex: zoom) after recording starts. There is no need to call this
 after recording starts or stops.

 </para>
          <para tool="javadoc-to-mdoc">If you are not recording video, you probably do not need this method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#lock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.RuntimeException">if the camera cannot be re-locked (for
     example, if the camera is still in use by another process).
</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberOfCameras">
      <MemberSignature Language="C#" Value="public static int NumberOfCameras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 NumberOfCameras" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNumberOfCameras", "()I", "GetGetNumberOfCamerasHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of physical cameras available on this device.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of physical cameras available on this device.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#getNumberOfCameras()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Android.Hardware.Camera Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Hardware.Camera Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "()Landroid/hardware/Camera;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new Camera object to access the first back-facing camera on the
 device.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new Camera object to access the first back-facing camera on the
 device. If the device does not have a back-facing camera, this returns
 null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#open()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Android.Hardware.Camera.Open(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Android.Hardware.Camera Open (int cameraId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Hardware.Camera Open(int32 cameraId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "(I)Landroid/hardware/Camera;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cameraId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cameraId">the hardware camera to access, between 0 and
     <c><see cref="P:Android.Hardware.Camera.NumberOfCameras" /></c>-1.</param>
        <summary>Creates a new Camera object to access a particular hardware camera.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new Camera object to access a particular hardware camera. If
 the same camera is opened by other applications, this will throw a
 RuntimeException.

 </para>
          <para tool="javadoc-to-mdoc">You must call <c><see cref="M:Android.Hardware.Camera.Release" /></c> when you are done using the camera,
 otherwise it will remain locked and be unavailable to other applications.

 </para>
          <para tool="javadoc-to-mdoc">Your application should only have one Camera object active at a time
 for a particular hardware camera.

 </para>
          <para tool="javadoc-to-mdoc">Callbacks from other methods are delivered to the event loop of the
 thread which called open().  If this thread has no event loop, then
 callbacks are delivered to the main application event loop.  If there
 is no main application event loop, callbacks are not delivered.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Caution:</b>
            </format> On some devices, this method may
 take a long time to complete.  It is best to call this method from a
 worker thread (possibly using <c><see cref="T:Android.OS.AsyncTask`3" /></c>) to avoid
 blocking the main application UI thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#open(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.RuntimeException">if opening the camera fails (for example, if the
     camera is in use by another process or device policy manager has
     disabled the camera).</exception>
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.GetCameraDisabled(Android.Content.ComponentName)" />
      </Docs>
    </Member>
    <Member MemberName="Reconnect">
      <MemberSignature Language="C#" Value="public void Reconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reconnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reconnect", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reconnects to the camera service after another process used it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reconnects to the camera service after another process used it.
 After <c><see cref="M:Android.Hardware.Camera.Unlock" /></c> is called, another process may use the
 camera; when the process is done, you must reconnect to the camera,
 which will re-acquire the lock and allow you to continue using the
 camera.

 </para>
          <para tool="javadoc-to-mdoc">Since API level 14, camera is automatically locked for applications in
 <c><see cref="M:Android.Media.MediaRecorder.Start" /></c>. Applications can use the
 camera (ex: zoom) after recording starts. There is no need to call this
 after recording starts or stops.

 </para>
          <para tool="javadoc-to-mdoc">If you are not recording video, you probably do not need this method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#reconnect()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if a connection cannot be re-established (for
     example, if the camera is still in use by another process).
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disconnects and releases the Camera object resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disconnects and releases the Camera object resources.

 </para>
          <para tool="javadoc-to-mdoc">You must call this as soon as you're done with the Camera object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoFocusMoveCallback">
      <MemberSignature Language="C#" Value="public virtual void SetAutoFocusMoveCallback (Android.Hardware.Camera.IAutoFocusMoveCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAutoFocusMoveCallback(class Android.Hardware.Camera/IAutoFocusMoveCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAutoFocusMoveCallback", "(Landroid/hardware/Camera$AutoFocusMoveCallback;)V", "GetSetAutoFocusMoveCallback_Landroid_hardware_Camera_AutoFocusMoveCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IAutoFocusMoveCallback" />
      </Parameters>
      <Docs>
        <param name="cb">the callback to run
</param>
        <summary>Sets camera auto-focus move callback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets camera auto-focus move callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setAutoFocusMoveCallback(android.hardware.Camera.AutoFocusMoveCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetDisplayOrientation">
      <MemberSignature Language="C#" Value="public void SetDisplayOrientation (int degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDisplayOrientation(int32 degrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDisplayOrientation", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="degrees">the angle that the picture will be rotated clockwise.
                Valid values are 0, 90, 180, and 270. The starting
                position is 0 (landscape).</param>
        <summary>Set the clockwise rotation of preview display in degrees.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the clockwise rotation of preview display in degrees. This affects
 the preview frames and the picture displayed after snapshot. This method
 is useful for portrait mode applications. Note that preview display of
 front-facing cameras is flipped horizontally before the rotation, that
 is, the image is reflected along the central vertical axis of the camera
 sensor. So the users can see themselves as looking into a mirror.

 </para>
          <para tool="javadoc-to-mdoc">This does not affect the order of byte array passed in <c><see cref="!:NoType:android/hardware/Camera$PreviewCallback;Href=../../../reference/android/hardware/Camera.PreviewCallback.html#onPreviewFrame(byte[],android.hardware.Camera)" /></c>, JPEG pictures, or recorded videos. This
 method is not allowed to be called during preview.

 </para>
          <para tool="javadoc-to-mdoc">If you want to make the camera image show in the same orientation as
 the display, you can use the following code.
 <example><code lang="java">
 public static void setCameraDisplayOrientation(Activity activity,
         int cameraId, android.hardware.Camera camera) {
     android.hardware.Camera.CameraInfo info =
             new android.hardware.Camera.CameraInfo();
     android.hardware.Camera.getCameraInfo(cameraId, info);
     int rotation = activity.getWindowManager().getDefaultDisplay()
             .getRotation();
     int degrees = 0;
     switch (rotation) {
         case Surface.ROTATION_0: degrees = 0; break;
         case Surface.ROTATION_90: degrees = 90; break;
         case Surface.ROTATION_180: degrees = 180; break;
         case Surface.ROTATION_270: degrees = 270; break;
     }

     int result;
     if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
         result = (info.orientation + degrees) % 360;
         result = (360 - result) % 360;  // compensate the mirror
     } else {  // back-facing
         result = (info.orientation - degrees + 360) % 360;
     }
     camera.setDisplayOrientation(result);
 }
 </code></example></para>
          <para tool="javadoc-to-mdoc">Starting from API level 14, this method can be called when preview is
 active.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setDisplayOrientation(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Hardware.Camera.SetPreviewDisplay(Android.Views.ISurfaceHolder)" />
      </Docs>
    </Member>
    <Member MemberName="SetErrorCallback">
      <MemberSignature Language="C#" Value="public void SetErrorCallback (Android.Hardware.Camera.IErrorCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetErrorCallback(class Android.Hardware.Camera/IErrorCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setErrorCallback", "(Landroid/hardware/Camera$ErrorCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IErrorCallback" />
      </Parameters>
      <Docs>
        <param name="cb">The callback to run
</param>
        <summary>Registers a callback to be invoked when an error occurs.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a callback to be invoked when an error occurs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setErrorCallback(android.hardware.Camera.ErrorCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFaceDetectionListener">
      <MemberSignature Language="C#" Value="public void SetFaceDetectionListener (Android.Hardware.Camera.IFaceDetectionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFaceDetectionListener(class Android.Hardware.Camera/IFaceDetectionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFaceDetectionListener", "(Landroid/hardware/Camera$FaceDetectionListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Camera+IFaceDetectionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to notify</param>
        <summary>Registers a listener to be notified about the faces detected in the
 preview frame.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a listener to be notified about the faces detected in the
 preview frame.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setFaceDetectionListener(android.hardware.Camera.FaceDetectionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Hardware.Camera.StartFaceDetection" />
      </Docs>
    </Member>
    <Member MemberName="SetOneShotPreviewCallback">
      <MemberSignature Language="C#" Value="public void SetOneShotPreviewCallback (Android.Hardware.Camera.IPreviewCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOneShotPreviewCallback(class Android.Hardware.Camera/IPreviewCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOneShotPreviewCallback", "(Landroid/hardware/Camera$PreviewCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IPreviewCallback" />
      </Parameters>
      <Docs>
        <param name="cb">a callback object that receives a copy of the next preview frame,
     or null to stop receiving callbacks.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Installs a callback to be invoked for the next preview frame in
 addition to displaying it on the screen.  After one invocation, the
 callback is cleared. This method can be called any time, even when
 preview is live.  Any other preview callbacks are overridden.</para>
          <para tool="javadoc-to-mdoc">If you are using the preview data to create video or still images,
 strongly consider using <c><see cref="T:Android.Media.MediaActionSound" /></c> to
 properly indicate image capture or recording start/stop to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="T:Android.Media.MediaActionSound" />
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public virtual void SetParameters (Android.Hardware.Camera.Parameters params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParameters(class Android.Hardware.Camera/Parameters params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setParameters", "(Landroid/hardware/Camera$Parameters;)V", "GetSetParameters_Landroid_hardware_Camera_Parameters_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.Hardware.Camera+Parameters" />
      </Parameters>
      <Docs>
        <param name="params">the Parameters to use for this Camera service</param>
        <summary>Changes the settings for this Camera service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes the settings for this Camera service.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setParameters(android.hardware.Camera.Parameters)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.RuntimeException">if any parameter is invalid or not supported.</exception>
        <altmember cref="M:Android.Hardware.Camera.GetParameters" />
      </Docs>
    </Member>
    <Member MemberName="SetPreviewCallback">
      <MemberSignature Language="C#" Value="public void SetPreviewCallback (Android.Hardware.Camera.IPreviewCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPreviewCallback(class Android.Hardware.Camera/IPreviewCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreviewCallback", "(Landroid/hardware/Camera$PreviewCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IPreviewCallback" />
      </Parameters>
      <Docs>
        <param name="cb">a callback object that receives a copy of each preview frame,
     or null to stop receiving callbacks.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Installs a callback to be invoked for every preview frame in addition
 to displaying them on the screen.  The callback will be repeatedly called
 for as long as preview is active.  This method can be called at any time,
 even while preview is live.  Any other preview callbacks are
 overridden.</para>
          <para tool="javadoc-to-mdoc">If you are using the preview data to create video or still images,
 strongly consider using <c><see cref="T:Android.Media.MediaActionSound" /></c> to
 properly indicate image capture or recording start/stop to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setPreviewCallback(android.hardware.Camera.PreviewCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Media.MediaActionSound" />
      </Docs>
    </Member>
    <Member MemberName="SetPreviewCallbackWithBuffer">
      <MemberSignature Language="C#" Value="public void SetPreviewCallbackWithBuffer (Android.Hardware.Camera.IPreviewCallback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPreviewCallbackWithBuffer(class Android.Hardware.Camera/IPreviewCallback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreviewCallbackWithBuffer", "(Landroid/hardware/Camera$PreviewCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Hardware.Camera+IPreviewCallback" />
      </Parameters>
      <Docs>
        <param name="cb">a callback object that receives a copy of the preview frame,
     or null to stop receiving callbacks and clear the buffer queue.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Installs a callback to be invoked for every preview frame, using
 buffers supplied with <c><see cref="M:Android.Hardware.Camera.AddCallbackBuffer(System.Byte[])" /></c>, in addition to
 displaying them on the screen.  The callback will be repeatedly called
 for as long as preview is active and buffers are available.  Any other
 preview callbacks are overridden.</para>
          <para tool="javadoc-to-mdoc">The purpose of this method is to improve preview efficiency and frame
 rate by allowing preview frame memory reuse.  You must call
 <c><see cref="M:Android.Hardware.Camera.AddCallbackBuffer(System.Byte[])" /></c> at some point -- before or after
 calling this method -- or no callbacks will received.</para>
          <para tool="javadoc-to-mdoc">The buffer queue will be cleared if this method is called with a null
 callback, <c><see cref="M:Android.Hardware.Camera.SetPreviewCallback(.IPreviewCallback)" /></c> is called,
 or <c><see cref="M:Android.Hardware.Camera.SetOneShotPreviewCallback(.IPreviewCallback)" /></c> is
 called.</para>
          <para tool="javadoc-to-mdoc">If you are using the preview data to create video or still images,
 strongly consider using <c><see cref="T:Android.Media.MediaActionSound" /></c> to
 properly indicate image capture or recording start/stop to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Hardware.Camera.AddCallbackBuffer(System.Byte[])" />
        <altmember cref="T:Android.Media.MediaActionSound" />
      </Docs>
    </Member>
    <Member MemberName="SetPreviewDisplay">
      <MemberSignature Language="C#" Value="public void SetPreviewDisplay (Android.Views.ISurfaceHolder holder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPreviewDisplay(class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreviewDisplay", "(Landroid/view/SurfaceHolder;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="holder">containing the Surface on which to place the preview,
     or null to remove the preview surface</param>
        <summary>Sets the <c><see cref="T:Android.Views.Surface" /></c> to be used for live preview.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the <c><see cref="T:Android.Views.Surface" /></c> to be used for live preview.
 Either a surface or surface texture is necessary for preview, and
 preview is necessary to take pictures.  The same surface can be re-set
 without harm.  Setting a preview surface will un-set any preview surface
 texture that was set via <c><see cref="M:Android.Hardware.Camera.SetPreviewTexture(Android.Graphics.SurfaceTexture)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The <c><see cref="T:Android.Views.ISurfaceHolder" /></c> must already contain a surface when this
 method is called.  If you are using <c><see cref="T:Android.Views.SurfaceView" /></c>,
 you will need to register a <c><see cref="T:Android.Views.ISurfaceHolderCallback" /></c> with
 <c><see cref="M:Android.Views.ISurfaceHolder.AddCallback(Android.Views.ISurfaceHolderCallback)" /></c> and wait for
 <c><see cref="M:Android.Views.ISurfaceHolderCallback.SurfaceCreated(Android.Views.ISurfaceHolder)" /></c> before
 calling setPreviewDisplay() or starting preview.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called before <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>.  The
 one exception is that if the preview surface is not set (or set to null)
 before startPreview() is called, then this method may be called once
 with a non-null parameter to set the preview surface.  (This allows
 camera setup and surface creation to happen in parallel, saving time.)
 The preview surface may not otherwise change while preview is running.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setPreviewDisplay(android.view.SurfaceHolder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the method fails (for example, if the surface
     is unavailable or unsuitable).
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPreviewTexture">
      <MemberSignature Language="C#" Value="public void SetPreviewTexture (Android.Graphics.SurfaceTexture surfaceTexture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPreviewTexture(class Android.Graphics.SurfaceTexture surfaceTexture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreviewTexture", "(Landroid/graphics/SurfaceTexture;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surfaceTexture" Type="Android.Graphics.SurfaceTexture" />
      </Parameters>
      <Docs>
        <param name="surfaceTexture">the <c><see cref="T:Android.Graphics.SurfaceTexture" /></c> to which the preview
     images are to be sent or null to remove the current preview surface
     texture</param>
        <summary>Sets the <c><see cref="T:Android.Graphics.SurfaceTexture" /></c> to be used for live preview.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the <c><see cref="T:Android.Graphics.SurfaceTexture" /></c> to be used for live preview.
 Either a surface or surface texture is necessary for preview, and
 preview is necessary to take pictures.  The same surface texture can be
 re-set without harm.  Setting a preview surface texture will un-set any
 preview surface that was set via <c><see cref="M:Android.Hardware.Camera.SetPreviewDisplay(Android.Views.ISurfaceHolder)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called before <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>.  The
 one exception is that if the preview surface texture is not set (or set
 to null) before startPreview() is called, then this method may be called
 once with a non-null parameter to set the preview surface.  (This allows
 camera setup and surface creation to happen in parallel, saving time.)
 The preview surface texture may not otherwise change while preview is
 running.

 </para>
          <para tool="javadoc-to-mdoc">The timestamps provided by <c><see cref="P:Android.Graphics.SurfaceTexture.Timestamp" /></c> for a
 SurfaceTexture set as the preview texture have an unspecified zero point,
 and cannot be directly compared between different cameras or different
 instances of the same camera, or across multiple runs of the same
 program.

 </para>
          <para tool="javadoc-to-mdoc">If you are using the preview data to create video or still images,
 strongly consider using <c><see cref="T:Android.Media.MediaActionSound" /></c> to
 properly indicate image capture or recording start/stop to the user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setPreviewTexture(android.graphics.SurfaceTexture)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.IO.IOException">if the method fails (for example, if the surface
     texture is unavailable or unsuitable).
</exception>
        <altmember cref="T:Android.Media.MediaActionSound" />
        <altmember cref="T:Android.Graphics.SurfaceTexture" />
        <altmember cref="T:Android.Views.TextureView" />
      </Docs>
    </Member>
    <Member MemberName="SetZoomChangeListener">
      <MemberSignature Language="C#" Value="public void SetZoomChangeListener (Android.Hardware.Camera.IOnZoomChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetZoomChangeListener(class Android.Hardware.Camera/IOnZoomChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setZoomChangeListener", "(Landroid/hardware/Camera$OnZoomChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Camera+IOnZoomChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to notify</param>
        <summary>Registers a listener to be notified when the zoom value is updated by the
 camera driver during smooth zoom.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a listener to be notified when the zoom value is updated by the
 camera driver during smooth zoom.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#setZoomChangeListener(android.hardware.Camera.OnZoomChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Hardware.Camera.StartSmoothZoom(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartFaceDetection">
      <MemberSignature Language="C#" Value="public void StartFaceDetection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartFaceDetection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startFaceDetection", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the face detection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts the face detection. This should be called after preview is started.
 The camera will notify <c><see cref="!:NoType:android/hardware/Camera$FaceDetectionListener;Href=../../../reference/android/hardware/Camera.FaceDetectionListener.html" /></c> of the detected
 faces in the preview frame. The detected faces may be the same as the
 previous ones. Applications should call <c><see cref="M:Android.Hardware.Camera.StopFaceDetection" /></c> to
 stop the face detection. This method is supported if <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getMaxNumDetectedFaces()" /></c> returns a number larger than 0.
 If the face detection has started, apps should not call this again.

 </para>
          <para tool="javadoc-to-mdoc">When the face detection is running, <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#setWhiteBalance(java.lang.String)" /></c>,
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#setFocusAreas(java.util.List&lt;android.hardware.Camera.Area&gt;)" /></c>, and <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#setMeteringAreas(java.util.List&lt;android.hardware.Camera.Area&gt;)" /></c>
 have no effect. The camera uses the detected faces to do auto-white balance,
 auto exposure, and autofocus.

 </para>
          <para tool="javadoc-to-mdoc">If the apps call <c><see cref="M:Android.Hardware.Camera.AutoFocus(.IAutoFocusCallback)" /></c>, the camera
 will stop sending face callbacks. The last face callback indicates the
 areas used to do autofocus. After focus completes, face detection will
 resume sending face callbacks. If the apps call <c><see cref="M:Android.Hardware.Camera.CancelAutoFocus" /></c>, the face callbacks will also resume.</para>
          <para tool="javadoc-to-mdoc">After calling <c><see cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback,.IPictureCallback,.IPictureCallback)" /></c> or <c><see cref="M:Android.Hardware.Camera.StopPreview" /></c>, and then resuming
 preview with <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>, the apps should call this method
 again to resume face detection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#startFaceDetection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the face detection is unsupported.</exception>
        <exception cref="T:Java.Lang.RuntimeException">if the method fails or the face detection is
         already running.</exception>
        <altmember cref="M:Android.Hardware.Camera.StopFaceDetection" />
      </Docs>
    </Member>
    <Member MemberName="StartPreview">
      <MemberSignature Language="C#" Value="public void StartPreview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartPreview() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPreview", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts capturing and drawing preview frames to the screen.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts capturing and drawing preview frames to the screen.
 Preview will not actually start until a surface is supplied
 with <c><see cref="M:Android.Hardware.Camera.SetPreviewDisplay(Android.Views.ISurfaceHolder)" /></c> or
 <c><see cref="M:Android.Hardware.Camera.SetPreviewTexture(Android.Graphics.SurfaceTexture)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If <c><see cref="M:Android.Hardware.Camera.SetPreviewCallback(.IPreviewCallback)" /></c>,
 <c><see cref="M:Android.Hardware.Camera.SetOneShotPreviewCallback(.IPreviewCallback)" /></c>, or
 <c><see cref="M:Android.Hardware.Camera.SetPreviewCallbackWithBuffer(.IPreviewCallback)" /></c> were
 called, <c><see cref="!:NoType:android/hardware/Camera$PreviewCallback;Href=../../../reference/android/hardware/Camera.PreviewCallback.html#onPreviewFrame(byte[],android.hardware.Camera)" /></c>
 will be called when preview data becomes available.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#startPreview()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartSmoothZoom">
      <MemberSignature Language="C#" Value="public void StartSmoothZoom (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSmoothZoom(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startSmoothZoom", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">zoom value. The valid range is 0 to <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getMaxZoom()" /></c>.</param>
        <summary>Zooms to the requested value smoothly.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Zooms to the requested value smoothly. The driver will notify <c><see cref="!:NoType:android/hardware/Camera$OnZoomChangeListener;Href=../../../reference/android/hardware/Camera.OnZoomChangeListener.html" /></c> of the zoom value and whether zoom is stopped at
 the time. For example, suppose the current zoom is 0 and startSmoothZoom
 is called with value 3. The
 <c><see cref="!:NoType:android/hardware/Camera$OnZoomChangeListener;Href=../../../reference/android/hardware/Camera.OnZoomChangeListener.html#onZoomChange(int,boolean,android.hardware.Camera)" /></c>
 method will be called three times with zoom values 1, 2, and 3.
 Applications can call <c><see cref="M:Android.Hardware.Camera.StopSmoothZoom" /></c> to stop the zoom earlier.
 Applications should not call startSmoothZoom again or change the zoom
 value before zoom stops. If the supplied zoom value equals to the current
 zoom value, no zoom callback will be generated. This method is supported
 if <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#isSmoothZoomSupported()" /></c>
 returns true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#startSmoothZoom(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the zoom value is invalid.</exception>
        <exception cref="T:Java.Lang.RuntimeException">if the method fails.</exception>
        <altmember cref="M:Android.Hardware.Camera.SetZoomChangeListener(.IOnZoomChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="StopFaceDetection">
      <MemberSignature Language="C#" Value="public void StopFaceDetection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopFaceDetection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopFaceDetection", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the face detection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops the face detection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#stopFaceDetection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Hardware.Camera.StartFaceDetection" />
      </Docs>
    </Member>
    <Member MemberName="StopPreview">
      <MemberSignature Language="C#" Value="public void StopPreview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopPreview() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopPreview", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops capturing and drawing preview frames to the surface, and
 resets the camera for a future call to <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops capturing and drawing preview frames to the surface, and
 resets the camera for a future call to <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#stopPreview()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StopSmoothZoom">
      <MemberSignature Language="C#" Value="public void StopSmoothZoom ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopSmoothZoom() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopSmoothZoom", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the smooth zoom.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops the smooth zoom. Applications should wait for the <c><see cref="!:NoType:android/hardware/Camera$OnZoomChangeListener;Href=../../../reference/android/hardware/Camera.OnZoomChangeListener.html" /></c> to know when the zoom is actually stopped. This
 method is supported if <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#isSmoothZoomSupported()" /></c> is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#stopSmoothZoom()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.RuntimeException">if the method fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TakePicture">
      <MemberSignature Language="C#" Value="public void TakePicture (Android.Hardware.Camera.IShutterCallback shutter, Android.Hardware.Camera.IPictureCallback raw, Android.Hardware.Camera.IPictureCallback jpeg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TakePicture(class Android.Hardware.Camera/IShutterCallback shutter, class Android.Hardware.Camera/IPictureCallback raw, class Android.Hardware.Camera/IPictureCallback jpeg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("takePicture", "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shutter" Type="Android.Hardware.Camera+IShutterCallback" />
        <Parameter Name="raw" Type="Android.Hardware.Camera+IPictureCallback" />
        <Parameter Name="jpeg" Type="Android.Hardware.Camera+IPictureCallback" />
      </Parameters>
      <Docs>
        <param name="shutter">To be added.</param>
        <param name="raw">To be added.</param>
        <param name="jpeg">To be added.</param>
        <summary>Equivalent to takePicture(shutter, raw, null, jpeg).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to takePicture(shutter, raw, null, jpeg).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Hardware.Camera.TakePicture(.IShutterCallback, .IPictureCallback, .IPictureCallback, .IPictureCallback)" />
      </Docs>
    </Member>
    <Member MemberName="TakePicture">
      <MemberSignature Language="C#" Value="public void TakePicture (Android.Hardware.Camera.IShutterCallback shutter, Android.Hardware.Camera.IPictureCallback raw, Android.Hardware.Camera.IPictureCallback postview, Android.Hardware.Camera.IPictureCallback jpeg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TakePicture(class Android.Hardware.Camera/IShutterCallback shutter, class Android.Hardware.Camera/IPictureCallback raw, class Android.Hardware.Camera/IPictureCallback postview, class Android.Hardware.Camera/IPictureCallback jpeg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("takePicture", "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shutter" Type="Android.Hardware.Camera+IShutterCallback" />
        <Parameter Name="raw" Type="Android.Hardware.Camera+IPictureCallback" />
        <Parameter Name="postview" Type="Android.Hardware.Camera+IPictureCallback" />
        <Parameter Name="jpeg" Type="Android.Hardware.Camera+IPictureCallback" />
      </Parameters>
      <Docs>
        <param name="shutter">the callback for image capture moment, or null</param>
        <param name="raw">the callback for raw (uncompressed) image data, or null</param>
        <param name="postview">callback with postview image data, may be null</param>
        <param name="jpeg">the callback for JPEG image data, or null
</param>
        <summary>Triggers an asynchronous image capture.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Triggers an asynchronous image capture. The camera service will initiate
 a series of callbacks to the application as the image capture progresses.
 The shutter callback occurs after the image is captured. This can be used
 to trigger a sound to let the user know that image has been captured. The
 raw callback occurs when the raw image data is available (NOTE: the data
 will be null if there is no raw image callback buffer available or the
 raw image callback buffer is not large enough to hold the raw image).
 The postview callback occurs when a scaled, fully processed postview
 image is available (NOTE: not all hardware supports this). The jpeg
 callback occurs when the compressed image is available. If the
 application does not need a particular callback, a null can be passed
 instead of a callback method.

 </para>
          <para tool="javadoc-to-mdoc">This method is only valid when preview is active (after
 <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>).  Preview will be stopped after the image is
 taken; callers must call <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c> again if they want to
 re-start preview or take more pictures. This should not be called between
 <c><see cref="M:Android.Media.MediaRecorder.Start" /></c> and
 <c><see cref="M:Android.Media.MediaRecorder.Stop" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">After calling this method, you must not call <c><see cref="M:Android.Hardware.Camera.StartPreview" /></c>
 or take another picture until the JPEG callback has returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unlock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlock", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unlocks the camera to allow another process to access it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unlocks the camera to allow another process to access it.
 Normally, the camera is locked to the process with an active Camera
 object until <c><see cref="M:Android.Hardware.Camera.Release" /></c> is called.  To allow rapid handoff
 between processes, you can call this method to release the camera
 temporarily for another process to use; once the other process is done
 you can call <c><see cref="M:Android.Hardware.Camera.Reconnect" /></c> to reclaim the camera.

 </para>
          <para tool="javadoc-to-mdoc">This must be done before calling
 <c><see cref="M:Android.Media.MediaRecorder.SetCamera(Android.Hardware.Camera)" /></c>. This cannot be
 called after recording starts.

 </para>
          <para tool="javadoc-to-mdoc">If you are not recording video, you probably do not need this method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/Camera.html#unlock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.RuntimeException">if the camera cannot be unlocked.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ZoomChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Hardware.Camera.ZoomChangeEventArgs&gt; ZoomChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Hardware.Camera/ZoomChangeEventArgs&gt; ZoomChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Hardware.Camera+ZoomChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
