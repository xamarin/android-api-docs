<Type Name="SensorManager" FullName="Android.Hardware.SensorManager">
  <TypeSignature Language="C#" Value="public abstract class SensorManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SensorManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/SensorManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary tool="true">
      <example>
        <code lang="java">
 public class SensorActivity extends Activity, implements SensorEventListener {
     private final SensorManager mSensorManager;
     private final Sensor mAccelerometer;

     public SensorActivity() {
         mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
         mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
     }

     protected void onResume() {
         super.onResume();
         mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
     }

     protected void onPause() {
         super.onPause();
         mSensorManager.unregisterListener(this);
     }

     public void onAccuracyChanged(Sensor sensor, int accuracy) {
     }

     public void onSensorChanged(SensorEvent event) {
     }
 }
 </code>
      </example>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <example>
          <code lang="java">
 public class SensorActivity extends Activity, implements SensorEventListener {
     private final SensorManager mSensorManager;
     private final Sensor mAccelerometer;

     public SensorActivity() {
         mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
         mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
     }

     protected void onResume() {
         super.onResume();
         mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
     }

     protected void onPause() {
         super.onPause();
         mSensorManager.unregisterListener(this);
     }

     public void onAccuracyChanged(Sensor sensor, int accuracy) {
     }

     public void onSensorChanged(SensorEvent event) {
     }
 }
 </code>
        </example>
      </para>
      <para tool="javadoc-to-mdoc">
 SensorManager lets you access the device's <c><see cref="T:Android.Hardware.Sensor" /></c>. Get an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c> with the argument
 <c><see cref="F:Android.Content.Context.SensorService" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Always make sure to disable sensors you don't need, especially when your
 activity is paused. Failing to do so can drain the battery in just a few
 hours. Note that the system will <format type="text/html"><i>not</i></format> disable sensors automatically when
 the screen turns off.
 </para>
      <para tool="javadoc-to-mdoc">
 Note: Don't use this mechanism with a Trigger Sensor, have a look
 at <c><see cref="T:Android.Hardware.TriggerEventListener" /></c>. <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>
 is an example of a trigger sensor.
 </para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Hardware.ISensorEventListener" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Android.Hardware.SensorEvent" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Android.Hardware.Sensor" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/SensorManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SensorManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTriggerSensor">
      <MemberSignature Language="C#" Value="public virtual bool CancelTriggerSensor (Android.Hardware.TriggerEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CancelTriggerSensor(class Android.Hardware.TriggerEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", "GetCancelTriggerSensor_Landroid_hardware_TriggerEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.TriggerEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">The listener on which the
        <c><see cref="M:Android.Hardware.TriggerEventListener.OnTrigger(Android.Hardware.TriggerEvent)" /></c>
        is delivered.It should be the same as the one used
        in <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c></param>
        <param name="sensor">The sensor for which the trigger request should be canceled.
        If null, it cancels receiving trigger for all sensors associated
        with the listener.</param>
        <summary>Cancels receiving trigger events for a trigger sensor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels receiving trigger events for a trigger sensor.

 </para>
          <para tool="javadoc-to-mdoc">
 Note that a Trigger sensor will be auto disabled if
 <c><see cref="M:Android.Hardware.TriggerEventListener.OnTrigger(Android.Hardware.TriggerEvent)" /></c> has triggered.
 This method is provided in case the user wants to explicitly cancel the request
 to receive trigger events.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is a trigger sensor.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual bool Flush (Android.Hardware.ISensorEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Flush(class Android.Hardware.ISensorEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "(Landroid/hardware/SensorEventListener;)Z", "GetFlush_Landroid_hardware_SensorEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
        which was previously used in a registerListener call.</param>
        <summary tool="true">Flushes the FIFO of all the sensors registered for this listener.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Flushes the FIFO of all the sensors registered for this listener. If there are events
 in the FIFO of the sensor, they are returned as if the maxReportLantecy of the FIFO has
 expired. Events are returned in the usual way through the SensorEventListener.
 This call doesn't affect the maxReportLantecy for this sensor. This call is asynchronous and
 returns immediately.
 <c><see cref="M:Android.Hardware.ISensorEventListener2.OnFlushCompleted(Android.Hardware.Sensor)" /></c> is called
 after all the events in the batch at the time of calling this method have been delivered
 successfully. If the hardware doesn't support flush, it still returns true and a trivial
 flush complete event is sent after the current event for all the clients registered for this
 sensor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#flush(android.hardware.SensorEventListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">when listener is null.
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.Hardware.SensorManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Hardware.SensorManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Hardware.SensorManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAltitude">
      <MemberSignature Language="C#" Value="public static float GetAltitude (float p0, float p);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 GetAltitude(float32 p0, float32 p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAltitude", "(FF)F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="System.Single" />
        <Parameter Name="p" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="p0">pressure at sea level</param>
        <param name="p">atmospheric pressure</param>
        <summary>Computes the Altitude in meters from the atmospheric pressure and the
 pressure at sea level.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Computes the Altitude in meters from the atmospheric pressure and the
 pressure at sea level.
 </para>
          <para tool="javadoc-to-mdoc">
 Typically the atmospheric pressure is read from a
 <c><see cref="!:Android.Hardware.Sensor.TYPE_PRESSURE" /></c> sensor. The pressure at sea level must be
 known, usually it can be retrieved from airport databases in the
 vicinity. If unknown, you can use <c><see cref="F:Android.Hardware.SensorManager.PressureStandardAtmosphere" /></c>
 as an approximation, but absolute altitudes won't be accurate.
 </para>
          <para tool="javadoc-to-mdoc">
 To calculate altitude differences, you must calculate the difference
 between the altitudes at both points. If you don't know the altitude
 as sea level, you can use <c><see cref="F:Android.Hardware.SensorManager.PressureStandardAtmosphere" /></c> instead,
 which will give good results considering the range of pressure typically
 involved.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <list type="bullet">
  float altitude_difference =
      getAltitude(SensorManager.PRESSURE_STANDARD_ATMOSPHERE, pressure_at_point2)
      - getAltitude(SensorManager.PRESSURE_STANDARD_ATMOSPHERE, pressure_at_point1);
 </list>
            </c>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getAltitude(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetAngleChange">
      <MemberSignature Language="C#" Value="public static void GetAngleChange (float[] angleChange, float[] R, float[] prevR);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAngleChange(float32[] angleChange, float32[] R, float32[] prevR) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAngleChange", "([F[F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angleChange" Type="System.Single[]" />
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="prevR" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="angleChange">an an array of floats (z, x, and y) in which the angle change
        (in radians) is stored
</param>
        <param name="R">current rotation matrix</param>
        <param name="prevR">previous rotation matrix</param>
        <summary>Helper function to compute the angle change between two rotation matrices.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Helper function to compute the angle change between two rotation matrices.
  Given a current rotation matrix (R) and a previous rotation matrix
  (prevR) computes the intrinsic rotation around the z, x, and y axes which
  transforms prevR to R.
  outputs a 3 element vector containing the z, x, and y angle
  change at indexes 0, 1, and 2 respectively.
 </para>
          <para tool="javadoc-to-mdoc"> Each input matrix is either as a 3x3 or 4x4 row-major matrix
 depending on the length of the passed array:
 </para>
          <para tool="javadoc-to-mdoc">If the array length is 9, then the array elements represent this matrix
 <example><code lang="java">
   /  R[ 0]   R[ 1]   R[ 2]   \
   |  R[ 3]   R[ 4]   R[ 5]   |
   \  R[ 6]   R[ 7]   R[ 8]   /
</code></example></para>
          <para tool="javadoc-to-mdoc">If the array length is 16, then the array elements represent this matrix
 <example><code lang="java">
   /  R[ 0]   R[ 1]   R[ 2]   R[ 3]  \
   |  R[ 4]   R[ 5]   R[ 6]   R[ 7]  |
   |  R[ 8]   R[ 9]   R[10]   R[11]  |
   \  R[12]   R[13]   R[14]   R[15]  /
</code></example>

 See <c><see cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[],System.Single[])" /></c> for more detailed definition of the output.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getAngleChange(float[], float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSensor">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Sensor GetDefaultSensor (Android.Hardware.SensorType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Sensor GetDefaultSensor(valuetype Android.Hardware.SensorType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultSensor", "(I)Landroid/hardware/Sensor;", "GetGetDefaultSensor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Sensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">of sensors requested</param>
        <summary tool="true">Use this method to get the default sensor for a given type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Use this method to get the default sensor for a given type. Note that the
 returned sensor could be a composite sensor, and its data could be
 averaged or filtered. If you need to access the raw sensors use
 <c><see cref="M:Android.Hardware.SensorManager.GetSensorList(Android.Hardware.SensorType)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getDefaultSensor(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetSensorList(Android.Hardware.SensorType)" />
        <altmember cref="T:Android.Hardware.Sensor" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSensor">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Sensor GetDefaultSensor (Android.Hardware.SensorType type, bool wakeUp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Sensor GetDefaultSensor(valuetype Android.Hardware.SensorType type, bool wakeUp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultSensor", "(IZ)Landroid/hardware/Sensor;", "GetGetDefaultSensor_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Sensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="wakeUp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">type of sensor requested</param>
        <param name="wakeUp">flag to indicate whether the Sensor is a wake-up or non wake-up sensor.</param>
        <summary>Return a Sensor with the given type and wakeUp properties.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a Sensor with the given type and wakeUp properties. If multiple sensors of this
 type exist, any one of them may be returned.
 </para>
          <para tool="javadoc-to-mdoc">
 For example,
 <list type="bullet"><item><term>getDefaultSensor(<c><see cref="!:Android.Hardware.Sensor.TYPE_ACCELEROMETER" /></c>, true) returns a wake-up accelerometer
     sensor if it exists. </term></item><item><term>getDefaultSensor(<c><see cref="!:Android.Hardware.Sensor.TYPE_PROXIMITY" /></c>, false) returns a non wake-up proximity
     sensor if it exists. </term></item><item><term>getDefaultSensor(<c><see cref="!:Android.Hardware.Sensor.TYPE_PROXIMITY" /></c>, true) returns a wake-up proximity sensor
     which is the same as the Sensor returned by <c><see cref="M:Android.Hardware.SensorManager.GetDefaultSensor(Android.Hardware.SensorType)" /></c>. </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 Note: Sensors like <c><see cref="!:Android.Hardware.Sensor.TYPE_PROXIMITY" /></c> and <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>
 are declared as wake-up sensors by default.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getDefaultSensor(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Hardware.Sensor.IsWakeUpSensor" />
      </Docs>
    </Member>
    <Member MemberName="GetInclination">
      <MemberSignature Language="C#" Value="public static float GetInclination (float[] I);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 GetInclination(float32[] I) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInclination", "([F)F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="I" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="I">inclination matrix see <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[],System.Single[],System.Single[],System.Single[])" /></c>.</param>
        <summary>Computes the geomagnetic inclination angle in radians from the
 inclination matrix <format type="text/html"><b>I</b></format> returned by <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[],System.Single[],System.Single[],System.Single[])" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Computes the geomagnetic inclination angle in radians from the
 inclination matrix <format type="text/html"><b>I</b></format> returned by <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[],System.Single[],System.Single[],System.Single[])" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getInclination(float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[], System.Single[])" />
        <altmember cref="T:Android.Hardware.GeomagneticField" />
      </Docs>
    </Member>
    <Member MemberName="GetOrientation">
      <MemberSignature Language="C#" Value="public static float[] GetOrientation (float[] R, float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] GetOrientation(float32[] R, float32[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOrientation", "([F[F)[F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">rotation matrix see <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[],System.Single[],System.Single[],System.Single[])" /></c>.</param>
        <param name="values">an array of 3 floats to hold the result.</param>
        <summary>Computes the device's orientation based on the rotation matrix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Computes the device's orientation based on the rotation matrix.
 </para>
          <para tool="javadoc-to-mdoc">
 When it returns, the array values is filled with the result:
 <list type="bullet"><item><term>values[0]: <format type="text/html"><i>azimuth</i></format>, rotation around the -Z axis,
                i.e. the opposite direction of Z axis.</term></item><item><term>values[1]: <format type="text/html"><i>pitch</i></format>, rotation around the -X axis,
                i.e the opposite direction of X axis.</term></item><item><term>values[2]: <format type="text/html"><i>roll</i></format>, rotation around the Y axis.</term></item></list></para>
          <para tool="javadoc-to-mdoc">
 Applying these three intrinsic rotations in azimuth, pitch and roll order transforms
 identity matrix to the rotation matrix given in input R.
 All three angles above are in <format type="text/html"><b>radians</b></format> and <format type="text/html"><b>positive</b></format> in the
 <format type="text/html"><b>counter-clockwise</b></format> direction. Range of output is: azimuth from -&amp;pi; to &amp;pi;,
 pitch from -&amp;pi;/2 to &amp;pi;/2 and roll from -&amp;pi; to &amp;pi;.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
        <altmember cref="T:Android.Hardware.GeomagneticField" />
      </Docs>
    </Member>
    <Member MemberName="GetQuaternionFromVector">
      <MemberSignature Language="C#" Value="public static void GetQuaternionFromVector (float[] Q, float[] rv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetQuaternionFromVector(float32[] Q, float32[] rv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getQuaternionFromVector", "([F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Q" Type="System.Single[]" />
        <Parameter Name="rv" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="Q">an array of floats in which to store the computed quaternion
</param>
        <param name="rv">the rotation vector to convert</param>
        <summary>Helper function to convert a rotation vector to a normalized quaternion.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Helper function to convert a rotation vector to a normalized quaternion.
  Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a normalized
  quaternion in the array Q.  The quaternion is stored as [w, x, y, z]</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getQuaternionFromVector(float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetRotationMatrix">
      <MemberSignature Language="C#" Value="public static bool GetRotationMatrix (float[] R, float[] I, float[] gravity, float[] geomagnetic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetRotationMatrix(float32[] R, float32[] I, float32[] gravity, float32[] geomagnetic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRotationMatrix", "([F[F[F[F)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="I" Type="System.Single[]" />
        <Parameter Name="gravity" Type="System.Single[]" />
        <Parameter Name="geomagnetic" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">is an array of 9 floats holding the rotation matrix <format type="text/html"><b>R</b></format> when
        this function returns. R can be null.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="I">is an array of 9 floats holding the rotation matrix <format type="text/html"><b>I</b></format> when
        this function returns. I can be null.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="gravity">is an array of 3 floats containing the gravity vector expressed in
        the device's coordinate. You can simply use the
        <c><see cref="P:Android.Hardware.SensorEvent.Values" /></c> returned by a
        <c><see cref="T:Android.Hardware.SensorEvent" /></c> of a
        <c><see cref="T:Android.Hardware.Sensor" /></c> of type
        <c><see cref="!:Android.Hardware.Sensor.TYPE_ACCELEROMETER" /></c>.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="geomagnetic">is an array of 3 floats containing the geomagnetic vector
        expressed in the device's coordinate. You can simply use the
        <c><see cref="P:Android.Hardware.SensorEvent.Values" /></c> returned by a
        <c><see cref="T:Android.Hardware.SensorEvent" /></c> of a
        <c><see cref="T:Android.Hardware.Sensor" /></c> of type
        <c><see cref="!:Android.Hardware.Sensor.TYPE_MAGNETIC_FIELD" /></c>.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Computes the inclination matrix <format type="text/html"><b>I</b></format> as well as the rotation matrix
 <format type="text/html"><b>R</b></format> transforming a vector from the device coordinate system to the
 world's coordinate system which is defined as a direct orthonormal basis,
 where:
 </para>
          <list type="bullet">
            <item>
              <term>X is defined as the vector product <format type="text/html"><b>Y.Z</b></format> (It is tangential to
 the ground at the device's current location and roughly points East).</term>
            </item>
            <item>
              <term>Y is tangential to the ground at the device's current location and
 points towards the magnetic North Pole.</term>
            </item>
            <item>
              <term>Z points towards the sky and is perpendicular to the ground.</term>
            </item>
          </list>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <center>
                <img src="../../../images/axis_globe.png" alt="World coordinate-system diagram." border="0" />
              </center>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <hr />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">
 By definition:
 </para>
          <para tool="javadoc-to-mdoc">
 [0 0 g] = <format type="text/html"><b>R</b></format> * <format type="text/html"><b>gravity</b></format> (g = magnitude of gravity)
 </para>
          <para tool="javadoc-to-mdoc">
 [0 m 0] = <format type="text/html"><b>I</b></format> * <format type="text/html"><b>R</b></format> * <format type="text/html"><b>geomagnetic</b></format> (m = magnitude of
 geomagnetic field)
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>R</b>
            </format> is the identity matrix when the device is aligned with the
 world's coordinate system, that is, when the device's X axis points
 toward East, the Y axis points to the North Pole and the device is facing
 the sky.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>I</b>
            </format> is a rotation matrix transforming the geomagnetic vector into
 the same coordinate space as gravity (the world's coordinate space).
 <format type="text/html"><b>I</b></format> is a simple rotation around the X axis. The inclination angle in
 radians can be computed with <c><see cref="M:Android.Hardware.SensorManager.GetInclination(System.Single[])" /></c>.
 <format type="text/html"><hr /></format></para>
          <para tool="javadoc-to-mdoc">
 Each matrix is returned either as a 3x3 or 4x4 row-major matrix depending
 on the length of the passed array:
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <u>If the array length is 16:</u>
            </format>
            <example>
              <code lang="java">
   /  M[ 0]   M[ 1]   M[ 2]   M[ 3]  \
   |  M[ 4]   M[ 5]   M[ 6]   M[ 7]  |
   |  M[ 8]   M[ 9]   M[10]   M[11]  |
   \  M[12]   M[13]   M[14]   M[15]  /
</code>
            </example>

 This matrix is ready to be used by OpenGL ES's
 <c><see cref="!:Javax.Microedition.Khronos.Opengles.GL10.glLoadMatrixf(float[],int)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that because OpenGL matrices are column-major matrices you must
 transpose the matrix before using it. However, since the matrix is a
 rotation matrix, its transpose is also its inverse, conveniently, it is
 often the inverse of the rotation that is needed for rendering; it can
 therefore be used with OpenGL ES directly.
 </para>
          <para tool="javadoc-to-mdoc">
 Also note that the returned matrices always have this form:

 <example><code lang="java">
   /  M[ 0]   M[ 1]   M[ 2]   0  \
   |  M[ 4]   M[ 5]   M[ 6]   0  |
   |  M[ 8]   M[ 9]   M[10]   0  |
   \      0       0       0   1  /
</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <u>If the array length is 9:</u>
            </format>
            <example>
              <code lang="java">
   /  M[ 0]   M[ 1]   M[ 2]  \
   |  M[ 3]   M[ 4]   M[ 5]  |
   \  M[ 6]   M[ 7]   M[ 8]  /
</code>
            </example>
            <format type="text/html">
              <hr />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">
 The inverse of each matrix can be computed easily by taking its
 transpose.

 </para>
          <para tool="javadoc-to-mdoc">
 The matrices returned by this function are meaningful only when the
 device is not free-falling and it is not close to the magnetic north. If
 the device is accelerating, or placed into a strong magnetic field, the
 returned matrices may be inaccurate.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[], float[], float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetInclination(System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[], System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.RemapCoordinateSystem(System.Single[], Android.Hardware.Axis, Android.Hardware.Axis, Android.Hardware.Axis)" />
      </Docs>
    </Member>
    <Member MemberName="GetRotationMatrixFromVector">
      <MemberSignature Language="C#" Value="public static void GetRotationMatrixFromVector (float[] R, float[] rotationVector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetRotationMatrixFromVector(float32[] R, float32[] rotationVector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRotationMatrixFromVector", "([F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="rotationVector" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">an array of floats in which to store the rotation matrix
</param>
        <param name="rotationVector">the rotation vector to convert</param>
        <summary>Helper function to convert a rotation vector to a rotation matrix.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Helper function to convert a rotation vector to a rotation matrix.
  Given a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a
  9  or 16 element rotation matrix in the array R.  R must have length 9 or 16.
  If R.length == 9, the following matrix is returned:
 <example><code lang="java">
   /  R[ 0]   R[ 1]   R[ 2]   \
   |  R[ 3]   R[ 4]   R[ 5]   |
   \  R[ 6]   R[ 7]   R[ 8]   /
</code></example>
 If R.length == 16, the following matrix is returned:
 <example><code lang="java">
   /  R[ 0]   R[ 1]   R[ 2]   0  \
   |  R[ 4]   R[ 5]   R[ 6]   0  |
   |  R[ 8]   R[ 9]   R[10]   0  |
   \  0       0       0       1  /
</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrixFromVector(float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetSensorList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Hardware.Sensor&gt; GetSensorList (Android.Hardware.SensorType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.Hardware.Sensor&gt; GetSensorList(valuetype Android.Hardware.SensorType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSensorList", "(I)Ljava/util/List;", "GetGetSensorList_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Hardware.Sensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">of sensors requested</param>
        <summary>Use this method to get the list of available sensors of a certain type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Use this method to get the list of available sensors of a certain type.
 Make multiple calls to get sensors of different types or use
 <c><see cref="!:Android.Hardware.Sensor.TYPE_ALL" /></c> to get all the
 sensors.

 </para>
          <para tool="javadoc-to-mdoc">
 NOTE: Both wake-up and non wake-up sensors matching the given type are
 returned. Check <c><see cref="P:Android.Hardware.Sensor.IsWakeUpSensor" /></c> to know the wake-up properties
 of the returned <c><see cref="T:Android.Hardware.Sensor" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getSensorList(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetDefaultSensor(Android.Hardware.SensorType)" />
        <altmember cref="T:Android.Hardware.Sensor" />
      </Docs>
    </Member>
    <Member MemberName="GravityDeathStarI">
      <MemberSignature Language="C#" Value="public const float GravityDeathStarI = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityDeathStarI = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_DEATH_STAR_I")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Gravity (estimate) on the first Death Star in Empire units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gravity (estimate) on the first Death Star in Empire units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_DEATH_STAR_I" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityEarth">
      <MemberSignature Language="C#" Value="public const float GravityEarth = 9.80665;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityEarth = (9.80665)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_EARTH")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>9.80665</MemberValue>
      <Docs>
        <summary>Earth's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Earth's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_EARTH" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityJupiter">
      <MemberSignature Language="C#" Value="public const float GravityJupiter = 23.12;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityJupiter = (23.12)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_JUPITER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>23.12</MemberValue>
      <Docs>
        <summary>Jupiter's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Jupiter's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_JUPITER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMars">
      <MemberSignature Language="C#" Value="public const float GravityMars = 3.71;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMars = (3.71)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MARS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.71</MemberValue>
      <Docs>
        <summary>Mars' gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mars' gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MARS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMercury">
      <MemberSignature Language="C#" Value="public const float GravityMercury = 3.7;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMercury = (3.7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MERCURY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.7</MemberValue>
      <Docs>
        <summary>Mercury's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mercury's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MERCURY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMoon">
      <MemberSignature Language="C#" Value="public const float GravityMoon = 1.6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMoon = (1.6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.6</MemberValue>
      <Docs>
        <summary>The Moon's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The Moon's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MOON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityNeptune">
      <MemberSignature Language="C#" Value="public const float GravityNeptune = 11;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityNeptune = (11)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_NEPTUNE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary>Neptune's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Neptune's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_NEPTUNE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityPluto">
      <MemberSignature Language="C#" Value="public const float GravityPluto = 0.6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityPluto = (0.6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_PLUTO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.6</MemberValue>
      <Docs>
        <summary>Pluto's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Pluto's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_PLUTO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravitySaturn">
      <MemberSignature Language="C#" Value="public const float GravitySaturn = 8.96;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravitySaturn = (8.96)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_SATURN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.96</MemberValue>
      <Docs>
        <summary>Saturn's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Saturn's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_SATURN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravitySun">
      <MemberSignature Language="C#" Value="public const float GravitySun = 275;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravitySun = (275)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_SUN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>275</MemberValue>
      <Docs>
        <summary>Sun's gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sun's gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_SUN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityTheIsland">
      <MemberSignature Language="C#" Value="public const float GravityTheIsland = 4.815162;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityTheIsland = (4.815162)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_THE_ISLAND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>4.815162</MemberValue>
      <Docs>
        <summary>Gravity on the island </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Gravity on the island </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_THE_ISLAND" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityUranus">
      <MemberSignature Language="C#" Value="public const float GravityUranus = 8.69;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityUranus = (8.69)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_URANUS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.69</MemberValue>
      <Docs>
        <summary>Uranus' gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uranus' gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_URANUS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityVenus">
      <MemberSignature Language="C#" Value="public const float GravityVenus = 8.87;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityVenus = (8.87)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_VENUS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.87</MemberValue>
      <Docs>
        <summary>Venus' gravity in SI units (m/s^2) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Venus' gravity in SI units (m/s^2) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_VENUS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightCloudy">
      <MemberSignature Language="C#" Value="public const float LightCloudy = 100;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightCloudy = (100)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_CLOUDY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>100</MemberValue>
      <Docs>
        <summary>luminance under a cloudy sky in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance under a cloudy sky in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_CLOUDY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightFullmoon">
      <MemberSignature Language="C#" Value="public const float LightFullmoon = 0.25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightFullmoon = (0.25)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_FULLMOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.25</MemberValue>
      <Docs>
        <summary>luminance at night with full moon in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance at night with full moon in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_FULLMOON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightNoMoon">
      <MemberSignature Language="C#" Value="public const float LightNoMoon = 0.001;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightNoMoon = (0.001)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_NO_MOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.001</MemberValue>
      <Docs>
        <summary>luminance at night with no moon in lux</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance at night with no moon in lux</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_NO_MOON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightOvercast">
      <MemberSignature Language="C#" Value="public const float LightOvercast = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightOvercast = (10000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_OVERCAST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>luminance under an overcast sky in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance under an overcast sky in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_OVERCAST" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightShade">
      <MemberSignature Language="C#" Value="public const float LightShade = 20000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightShade = (20000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SHADE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>20000</MemberValue>
      <Docs>
        <summary>luminance in shade in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance in shade in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SHADE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunlight">
      <MemberSignature Language="C#" Value="public const float LightSunlight = 110000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunlight = (110000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNLIGHT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>110000</MemberValue>
      <Docs>
        <summary>luminance of sunlight in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance of sunlight in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNLIGHT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunlightMax">
      <MemberSignature Language="C#" Value="public const float LightSunlightMax = 120000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunlightMax = (120000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNLIGHT_MAX")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>120000</MemberValue>
      <Docs>
        <summary>Maximum luminance of sunlight in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum luminance of sunlight in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNLIGHT_MAX" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunrise">
      <MemberSignature Language="C#" Value="public const float LightSunrise = 400;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunrise = (400)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNRISE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>400</MemberValue>
      <Docs>
        <summary>luminance at sunrise in lux </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">luminance at sunrise in lux </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNRISE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MagneticFieldEarthMax">
      <MemberSignature Language="C#" Value="public const float MagneticFieldEarthMax = 60;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MagneticFieldEarthMax = (60)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAGNETIC_FIELD_EARTH_MAX")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>60</MemberValue>
      <Docs>
        <summary>Maximum magnetic field on Earth's surface </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum magnetic field on Earth's surface </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#MAGNETIC_FIELD_EARTH_MAX" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MagneticFieldEarthMin">
      <MemberSignature Language="C#" Value="public const float MagneticFieldEarthMin = 30;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MagneticFieldEarthMin = (30)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAGNETIC_FIELD_EARTH_MIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>30</MemberValue>
      <Docs>
        <summary>Minimum magnetic field on Earth's surface </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Minimum magnetic field on Earth's surface </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#MAGNETIC_FIELD_EARTH_MIN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PressureStandardAtmosphere">
      <MemberSignature Language="C#" Value="public const float PressureStandardAtmosphere = 1013.25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PressureStandardAtmosphere = (1013.25)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSURE_STANDARD_ATMOSPHERE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1013.25</MemberValue>
      <Docs>
        <summary>Standard atmosphere, or average sea-level pressure in hPa (millibar) </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard atmosphere, or average sea-level pressure in hPa (millibar) </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#PRESSURE_STANDARD_ATMOSPHERE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorListener listener, int sensors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorListener listener, int32 sensors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorListener;I)Z", "GetRegisterListener_Landroid_hardware_SensorListener_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">sensor listener object</param>
        <param name="sensors">a bit masks of the sensors to register to</param>
        <summary tool="true">Registers a listener for given sensors.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a listener for given sensors.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorListener, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;I)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <param name="rate">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="F:Android.Hardware.SensorDelay.Normal" /></c>, <c><see cref="F:Android.Hardware.SensorDelay.Ui" /></c>,
        <c><see cref="F:Android.Hardware.SensorDelay.Game" /></c>, or <c><see cref="F:Android.Hardware.SensorDelay.Fastest" /></c>
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency.
 </para>
          <para tool="javadoc-to-mdoc">
 The events will be delivered to the provided <c>SensorEventListener</c> as soon as they are
 available. To reduce the power consumption, applications can use
 <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> instead and specify a
 positive non-zero maximum reporting latency.
 </para>
          <para tool="javadoc-to-mdoc">
 In the case of non-wake-up sensors, the events are only delivered while the Application
 Processor (AP) is not in suspend mode. See <c><see cref="P:Android.Hardware.Sensor.IsWakeUpSensor" /></c> for more details.
 To ensure delivery of events from non-wake-up sensors even when the screen is OFF, the
 application registering to the sensor must hold a partial wake-lock to keep the AP awake,
 otherwise some events might be lost while the AP is asleep. Note that although events might
 be lost while the AP is asleep, the sensor will still consume power if it is not explicitly
 deactivated by the application. Applications must unregister their <c>SensorEventListener</c>s in their activity's <c>onPause()</c> method to avoid consuming power
 while the device is inactive.  See <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> for more details on hardware FIFO (queueing) capabilities and when some sensor events
 might be lost.
 </para>
          <para tool="javadoc-to-mdoc">
 In the case of wake-up sensors, each event generated by the sensor will cause the AP to
 wake-up, ensuring that each event can be delivered. Because of this, registering to a wake-up
 sensor has very significant power implications. Call <c><see cref="P:Android.Hardware.Sensor.IsWakeUpSensor" /></c> to check
 whether a sensor is a wake-up sensor. See
 <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> for information on how to
 reduce the power impact of registering to wake-up sensors.
 </para>
          <para tool="javadoc-to-mdoc">
 Note: Don't use this method with one-shot trigger sensors such as
 <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>. Use
 <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c> instead. Use
 <c><see cref="P:Android.Hardware.Sensor.ReportingMode" /></c> to obtain the reporting mode of a given sensor.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or a trigger sensor
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorListener listener, int sensors, Android.Hardware.SensorDelay rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorListener listener, int32 sensors, valuetype Android.Hardware.SensorDelay rate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorListener;II)Z", "GetRegisterListener_Landroid_hardware_SensorListener_IIHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="listener">sensor listener object</param>
        <param name="sensors">a bit masks of the sensors to register to</param>
        <param name="rate">rate of events. This is only a hint to the system. events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>.</param>
        <summary>Registers a SensorListener for given sensors.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a SensorListener for given sensors.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorListener, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;ILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_ILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>.
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <param name="rate">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="F:Android.Hardware.SensorDelay.Normal" /></c>, <c><see cref="F:Android.Hardware.SensorDelay.Ui" /></c>,
        <c><see cref="F:Android.Hardware.SensorDelay.Game" /></c>, or <c><see cref="F:Android.Hardware.SensorDelay.Fastest" /></c>.
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor. Events are delivered in continuous mode as soon as they are available. To reduce the
 power consumption, applications can use
 <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> instead and specify a
 positive non-zero maximum reporting latency.
 
 Note: Don't use this method with a one shot trigger sensor such as
 <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>. Use
 <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c> instead. </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or a trigger sensor
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, int maxBatchReportLatencyUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, int32 maxBatchReportLatencyUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;II)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.
 
 Note: Don't use this method with one-shot trigger sensors such as
 <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>. Use
 <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c> instead. </para>
          <para tool="javadoc-to-mdoc">
 This function is similar to <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> but
 it allows events to stay temporarily in the hardware FIFO (queue) before being delivered. The
 events can be stored in the hardware FIFO up to <c>maxReportLatencyUs</c> microseconds. Once
 one of the events in the FIFO needs to be reported, all of the events in the FIFO are
 reported sequentially. This means that some events will be reported before the maximum
 reporting latency has elapsed.
 </para>
          <para tool="javadoc-to-mdoc">
 When <c>maxReportLatencyUs</c> is 0, the call is equivalent to a call to
 <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>, as it requires the events to be
 delivered as soon as possible.
 </para>
          <para tool="javadoc-to-mdoc">
 When <c>sensor.maxFifoEventCount()</c> is 0, the sensor does not use a FIFO, so the call
 will also be equivalent to <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting <c>maxReportLatencyUs</c> to a positive value allows to reduce the number of
 interrupts the AP (Application Processor) receives, hence reducing power consumption, as the
 AP can switch to a lower power state while the sensor is capturing the data. This is
 especially important when registering to wake-up sensors, for which each interrupt causes the
 AP to wake up if it was in suspend mode. See <c><see cref="P:Android.Hardware.Sensor.IsWakeUpSensor" /></c> for more
 information on wake-up sensors.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.Flush(Android.Hardware.ISensorEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, int rateUs, int maxBatchReportLatencyUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, int32 rateUs, int32 maxBatchReportLatencyUs) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;II)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="System.Int32" />
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.
 
 Note: Don't use this method with one-shot trigger sensors such as
 <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>. Use
 <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c> instead. </para>
          <para tool="javadoc-to-mdoc">
 This function is similar to <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c> but
 it allows events to stay temporarily in the hardware FIFO (queue) before being delivered. The
 events can be stored in the hardware FIFO up to <c>maxReportLatencyUs</c> microseconds. Once
 one of the events in the FIFO needs to be reported, all of the events in the FIFO are
 reported sequentially. This means that some events will be reported before the maximum
 reporting latency has elapsed.
 </para>
          <para tool="javadoc-to-mdoc">
 When <c>maxReportLatencyUs</c> is 0, the call is equivalent to a call to
 <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>, as it requires the events to be
 delivered as soon as possible.
 </para>
          <para tool="javadoc-to-mdoc">
 When <c>sensor.maxFifoEventCount()</c> is 0, the sensor does not use a FIFO, so the call
 will also be equivalent to <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting <c>maxReportLatencyUs</c> to a positive value allows to reduce the number of
 interrupts the AP (Application Processor) receives, hence reducing power consumption, as the
 AP can switch to a lower power state while the sensor is capturing the data. This is
 especially important when registering to wake-up sensors, for which each interrupt causes the
 AP to wake up if it was in suspend mode. See <c><see cref="P:Android.Hardware.Sensor.IsWakeUpSensor" /></c> for more
 information on wake-up sensors.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.Flush(Android.Hardware.ISensorEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, int maxBatchReportLatencyUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, int32 maxBatchReportLatencyUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;IILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, int rateUs, int maxBatchReportLatencyUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, int32 rateUs, int32 maxBatchReportLatencyUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;IILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="System.Int32" />
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener,Android.Hardware.Sensor,Android.Hardware.Sensor)" /></c>.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RemapCoordinateSystem">
      <MemberSignature Language="C#" Value="public static bool RemapCoordinateSystem (float[] inR, Android.Hardware.Axis X, Android.Hardware.Axis Y, float[] outR);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemapCoordinateSystem(float32[] inR, valuetype Android.Hardware.Axis X, valuetype Android.Hardware.Axis Y, float32[] outR) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("remapCoordinateSystem", "([FII[F)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inR" Type="System.Single[]" />
        <Parameter Name="X" Type="Android.Hardware.Axis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="Y" Type="Android.Hardware.Axis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outR" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="inR">the rotation matrix to be transformed. Usually it is the matrix
        returned by <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[],System.Single[],System.Single[],System.Single[])" /></c>.</param>
        <param name="X">defines the axis of the new cooridinate system that coincide with the X axis of the
        original coordinate system.</param>
        <param name="Y">defines the axis of the new cooridinate system that coincide with the Y axis of the
        original coordinate system.</param>
        <param name="outR">the transformed rotation matrix. inR and outR should not be the same
        array.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Rotates the supplied rotation matrix so it is expressed in a different
 coordinate system. This is typically used when an application needs to
 compute the three orientation angles of the device (see
 <c><see cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[],System.Single[])" /></c>) in a different coordinate system.
 </para>
          <para tool="javadoc-to-mdoc">
 When the rotation matrix is used for drawing (for instance with OpenGL
 ES), it usually <format type="text/html"><b>doesn't need</b></format> to be transformed by this function,
 unless the screen is physically rotated, in which case you can use
 <c><see cref="P:Android.Views.Display.Rotation" /></c> to
 retrieve the current rotation of the screen. Note that because the user
 is generally free to rotate their screen, you often should consider the
 rotation in deciding the parameters to use here.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <u>Examples:</u>
            </format>
          </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <item>
                <term>Using the camera (Y axis along the camera's axis) for an augmented
 reality application where the rotation angles are needed:</term>
              </item>
              <item>
                <term>Using the device as a mechanical compass when rotation is
 <c><see cref="!:Android.Views.Surface.ROTATION_90" /></c>:</term>
              </item>

 Beware of the above example. This call is needed only to account for a
 rotation from its natural orientation when calculating the rotation
 angles (see <c><see cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[],System.Single[])" /></c>). If the rotation matrix is also used
 for rendering, it may not need to be transformed, for instance if your
 <c><see cref="T:Android.App.Activity" /></c> is running in landscape mode.
 </list>
          </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <c>remapCoordinateSystem(inR, AXIS_X, AXIS_Z, outR);</c>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <c>remapCoordinateSystem(inR, AXIS_Y, AXIS_MINUS_X, outR);</c>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">
 Since the resulting coordinate system is orthonormal, only two axes need
 to be specified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#remapCoordinateSystem(float[], int, int, float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
      </Docs>
    </Member>
    <Member MemberName="RequestTriggerSensor">
      <MemberSignature Language="C#" Value="public virtual bool RequestTriggerSensor (Android.Hardware.TriggerEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestTriggerSensor(class Android.Hardware.TriggerEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", "GetRequestTriggerSensor_Landroid_hardware_TriggerEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.TriggerEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">The listener on which the
        <c><see cref="M:Android.Hardware.TriggerEventListener.OnTrigger(Android.Hardware.TriggerEvent)" /></c> will be delivered.</param>
        <param name="sensor">The sensor to be enabled.</param>
        <summary>Requests receiving trigger events for a trigger sensor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Requests receiving trigger events for a trigger sensor.

 </para>
          <para tool="javadoc-to-mdoc">
 When the sensor detects a trigger event condition, such as significant motion in
 the case of the <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>, the provided trigger listener
 will be invoked once and then its request to receive trigger events will be canceled.
 To continue receiving trigger events, the application must request to receive trigger
 events again.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or not a trigger sensor.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Sensors">
      <MemberSignature Language="C#" Value="public virtual int Sensors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sensors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSensors", "()I", "GetGetSensorsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#getSensors()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StandardGravity">
      <MemberSignature Language="C#" Value="public const float StandardGravity = 9.80665;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 StandardGravity = (9.80665)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STANDARD_GRAVITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>9.80665</MemberValue>
      <Docs>
        <summary>Standard gravity (g) on Earth.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard gravity (g) on Earth. This value is equivalent to 1G </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#STANDARD_GRAVITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorEventListener;)V", "GetUnregisterListener_Landroid_hardware_SensorEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object</param>
        <summary tool="true">Unregisters a listener for all sensors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a listener for all sensors.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorEventListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorListener;)V", "GetUnregisterListener_Landroid_hardware_SensorListener_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object
</param>
        <summary>Unregisters a listener for all sensors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a listener for all sensors.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;)V", "GetUnregisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorEventListener object</param>
        <param name="sensor">the sensor to unregister from</param>
        <summary>Unregisters a listener for the sensors with which it is registered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a listener for the sensors with which it is registered.

 </para>
          <para tool="javadoc-to-mdoc">
 Note: Don't use this method with a one shot trigger sensor such as
 <c><see cref="F:Android.Hardware.SensorType.SignificantMotion" tool="ReplaceLinkValue" /></c>.
 Use <c><see cref="M:Android.Hardware.SensorManager.CancelTriggerSensor(Android.Hardware.TriggerEventListener,Android.Hardware.Sensor)" /></c> instead.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is a trigger sensor.
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorListener listener, int sensors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorListener listener, int32 sensors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorListener;I)V", "GetUnregisterListener_Landroid_hardware_SensorListener_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object</param>
        <param name="sensors">a bit masks of the sensors to unregister from
</param>
        <summary>Unregisters a listener for the sensors with which it is registered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a listener for the sensors with which it is registered.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorListener, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
