<Type Name="NsdManager" FullName="Android.Net.Nsd.NsdManager">
  <TypeSignature Language="C#" Value="public sealed class NsdManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NsdManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/nsd/NsdManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="16">
    <summary>The Network Service Discovery Manager class provides the API to discover services
 on a network.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The Network Service Discovery Manager class provides the API to discover services
 on a network. As an example, if device A and device B are connected over a Wi-Fi
 network, a game registered on device A can be discovered by a game on device
 B. Another example use case is an application discovering printers on the network.

 </para>
      <para tool="javadoc-to-mdoc"> The API currently supports DNS based service discovery and discovery is currently
 limited to a local network over Multicast DNS. DNS service discovery is described at
 http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt

 </para>
      <para tool="javadoc-to-mdoc"> The API is asynchronous and responses to requests from an application are on listener
 callbacks on a seperate thread.

 </para>
      <para tool="javadoc-to-mdoc"> There are three main operations the API supports - registration, discovery and resolution.
 <example><code lang="java">
                          Application start
                                 |
                                 |
                                 |                  onServiceRegistered()
                     Register any local services  /
                      to be advertised with       \
                       registerService()            onRegistrationFailed()
                                 |
                                 |
                          discoverServices()
                                 |
                      Maintain a list to track
                        discovered services
                                 |
                                 |---------&gt;
                                 |          |
                                 |      onServiceFound()
                                 |          |
                                 |     add service to list
                                 |          |
                                 |&lt;----------
                                 |
                                 |---------&gt;
                                 |          |
                                 |      onServiceLost()
                                 |          |
                                 |   remove service from list
                                 |          |
                                 |&lt;----------
                                 |
                                 |
                                 | Connect to a service
                                 | from list ?
                                 |
                          resolveService()
                                 |
                         onServiceResolved()
                                 |
                     Establish connection to service
                     with the host and port information

 </code></example>
 An application that needs to advertise itself over a network for other applications to
 discover it can do so with a call to <c><see cref="M:Android.Net.Nsd.NsdManager.RegisterService(Android.Net.Nsd.NsdServiceInfo,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>. If Example is a http based
 application that can provide HTML data to peer services, it can register a name "Example"
 with service type "_http._tcp". A successful registration is notified with a callback to
 <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)" /></c> and a failure to register is notified
 over <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c></para>
      <para tool="javadoc-to-mdoc"> A peer application looking for http services can initiate a discovery for "_http._tcp"
 with a call to <c><see cref="M:Android.Net.Nsd.NsdManager.DiscoverServices(System.String,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>. A service found is notified with a callback
 to <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)" /></c> and a service lost is notified on
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)" /></c>.

 </para>
      <para tool="javadoc-to-mdoc"> Once the peer application discovers the "Example" http srevice, and needs to receive data
 from the "Example" application, it can initiate a resolve with <c><see cref="M:Android.Net.Nsd.NsdManager.ResolveService(Android.Net.Nsd.NsdServiceInfo,.IResolveListener)" /></c> to
 resolve the host and port details for the purpose of establishing a connection. A successful
 resolve is notified on <c><see cref="!:NoType:android/net/nsd/NsdManager$ResolveListener;Href=../../../../reference/android/net/nsd/NsdManager.ResolveListener.html#onServiceResolved(android.net.nsd.NsdServiceInfo)" /></c> and a failure is notified
 on <c><see cref="!:NoType:android/net/nsd/NsdManager$ResolveListener;Href=../../../../reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)" /></c>.

 Applications can reserve for a service type at
 http://www.iana.org/form/ports-service. Existing services can be found at
 http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml

 Get an instance of this class by calling <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>.

 
</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Net.Nsd.NsdServiceInfo" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="ActionNsdStateChanged">
      <MemberSignature Language="C#" Value="public const string ActionNsdStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNsdStateChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_NSD_STATE_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast intent action to indicate whether network service discovery is
 enabled or disabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast intent action to indicate whether network service discovery is
 enabled or disabled. An extra <c><see cref="F:Android.Net.Nsd.NsdManager.ExtraNsdState" /></c> provides the state
 information as int.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#ACTION_NSD_STATE_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Net.Nsd.NsdManager.ExtraNsdState" />
      </Docs>
    </Member>
    <Member MemberName="DiscoverServices">
      <MemberSignature Language="C#" Value="public void DiscoverServices (string serviceType, Android.Net.Nsd.NsdProtocol protocolType, Android.Net.Nsd.NsdManager.IDiscoveryListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscoverServices(string serviceType, valuetype Android.Net.Nsd.NsdProtocol protocolType, class Android.Net.Nsd.NsdManager/IDiscoveryListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("discoverServices", "(Ljava/lang/String;ILandroid/net/nsd/NsdManager$DiscoveryListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.String" />
        <Parameter Name="protocolType" Type="Android.Net.Nsd.NsdProtocol">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="listener" Type="Android.Net.Nsd.NsdManager+IDiscoveryListener" />
      </Parameters>
      <Docs>
        <param name="serviceType">The service type being discovered. Examples include "_http._tcp" for
 http services or "_ipp._tcp" for printers</param>
        <param name="protocolType">The service discovery protocol</param>
        <param name="listener">The listener notifies of a successful discovery and is used
 to stop discovery on this serviceType through a call on <c><see cref="M:Android.Net.Nsd.NsdManager.StopServiceDiscovery(.IDiscoveryListener)" /></c>.
 Cannot be null. Cannot be in use for an active service discovery.
</param>
        <summary>Initiate service discovery to browse for instances of a service type.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initiate service discovery to browse for instances of a service type. Service discovery
 consumes network bandwidth and will continue until the application calls
 <c><see cref="M:Android.Net.Nsd.NsdManager.StopServiceDiscovery(.IDiscoveryListener)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> The function call immediately returns after sending a request to start service
 discovery to the framework. The application is notified of a success to initiate
 discovery through the callback <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStarted(java.lang.String)" /></c> or a failure
 through <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> Upon successful start, application is notified when a service is found with
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)" /></c> or when a service is lost with
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> Upon failure to start, service discovery is not active and application does
 not need to invoke <c><see cref="M:Android.Net.Nsd.NsdManager.StopServiceDiscovery(.IDiscoveryListener)" /></c></para>
          <para tool="javadoc-to-mdoc"> The application should call <c><see cref="M:Android.Net.Nsd.NsdManager.StopServiceDiscovery(.IDiscoveryListener)" /></c> when discovery of this
 service type is no longer required, and/or whenever the application is paused or
 stopped.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String, int, android.net.nsd.NsdManager.DiscoveryListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ExtraNsdState">
      <MemberSignature Language="C#" Value="public const string ExtraNsdState;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraNsdState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_NSD_STATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The lookup key for an int that indicates whether network service discovery is enabled
 or disabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The lookup key for an int that indicates whether network service discovery is enabled
 or disabled. Retrieve it with <c><see cref="M:Android.Content.Intent.GetIntExtra(System.String,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#EXTRA_NSD_STATE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Net.Nsd.NsdManager.NsdStateDisabled" />
        <altmember cref="F:Android.Net.Nsd.NsdManager.NsdStateEnabled" />
      </Docs>
    </Member>
    <Member MemberName="FailureAlreadyActive">
      <MemberSignature Language="C#" Value="public const Android.Net.Nsd.NsdFailure FailureAlreadyActive = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Net.Nsd.NsdFailure FailureAlreadyActive = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FAILURE_ALREADY_ACTIVE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Net.Nsd.NsdFailure enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Nsd.NsdFailure</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Indicates that the operation failed because it is already active.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that the operation failed because it is already active.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_ALREADY_ACTIVE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FailureInternalError">
      <MemberSignature Language="C#" Value="public const Android.Net.Nsd.NsdFailure FailureInternalError = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Net.Nsd.NsdFailure FailureInternalError = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FAILURE_INTERNAL_ERROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Net.Nsd.NsdFailure enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Nsd.NsdFailure</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Failures are passed with <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)" /></c> or <c><see cref="!:NoType:android/net/nsd/NsdManager$ResolveListener;Href=../../../../reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Failures are passed with <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)" /></c>,
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)" /></c> or <c><see cref="!:NoType:android/net/nsd/NsdManager$ResolveListener;Href=../../../../reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)" /></c>.

 Indicates that the operation failed due to an internal error.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_INTERNAL_ERROR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FailureMaxLimit">
      <MemberSignature Language="C#" Value="public const Android.Net.Nsd.NsdFailure FailureMaxLimit = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Net.Nsd.NsdFailure FailureMaxLimit = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FAILURE_MAX_LIMIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Net.Nsd.NsdFailure enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Nsd.NsdFailure</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Indicates that the operation failed because the maximum outstanding
 requests from the applications have reached.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates that the operation failed because the maximum outstanding
 requests from the applications have reached.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_MAX_LIMIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="NsdStateDisabled">
      <MemberSignature Language="C#" Value="public const int NsdStateDisabled = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NsdStateDisabled = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NSD_STATE_DISABLED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Network service discovery is disabled</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Network service discovery is disabled</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_DISABLED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Net.Nsd.NsdManager.ActionNsdStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="NsdStateEnabled">
      <MemberSignature Language="C#" Value="public const int NsdStateEnabled = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NsdStateEnabled = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NSD_STATE_ENABLED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Network service discovery is enabled</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Network service discovery is enabled</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_ENABLED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Net.Nsd.NsdManager.ActionNsdStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolDnsSd">
      <MemberSignature Language="C#" Value="public const Android.Net.Nsd.NsdProtocol ProtocolDnsSd = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Net.Nsd.NsdProtocol ProtocolDnsSd = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PROTOCOL_DNS_SD")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Net.Nsd.NsdProtocol enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Nsd.NsdProtocol</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Dns based service discovery protocol </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dns based service discovery protocol </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#PROTOCOL_DNS_SD" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RegisterService">
      <MemberSignature Language="C#" Value="public void RegisterService (Android.Net.Nsd.NsdServiceInfo serviceInfo, Android.Net.Nsd.NsdProtocol protocolType, Android.Net.Nsd.NsdManager.IRegistrationListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterService(class Android.Net.Nsd.NsdServiceInfo serviceInfo, valuetype Android.Net.Nsd.NsdProtocol protocolType, class Android.Net.Nsd.NsdManager/IRegistrationListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerService", "(Landroid/net/nsd/NsdServiceInfo;ILandroid/net/nsd/NsdManager$RegistrationListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceInfo" Type="Android.Net.Nsd.NsdServiceInfo" />
        <Parameter Name="protocolType" Type="Android.Net.Nsd.NsdProtocol">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="listener" Type="Android.Net.Nsd.NsdManager+IRegistrationListener" />
      </Parameters>
      <Docs>
        <param name="serviceInfo">The service being registered</param>
        <param name="protocolType">The service discovery protocol</param>
        <param name="listener">The listener notifies of a successful registration and is used to
 unregister this service through a call on <c><see cref="M:Android.Net.Nsd.NsdManager.UnregisterService(.IRegistrationListener)" /></c>. Cannot be null.
 Cannot be in use for an active service registration.
</param>
        <summary>Register a service to be discovered by other services.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a service to be discovered by other services.

 </para>
          <para tool="javadoc-to-mdoc"> The function call immediately returns after sending a request to register service
 to the framework. The application is notified of a successful registration
 through the callback <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)" /></c> or a failure
 through <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> The application should call <c><see cref="M:Android.Net.Nsd.NsdManager.UnregisterService(.IRegistrationListener)" /></c> when the service
 registration is no longer required, and/or whenever the application is stopped.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#registerService(android.net.nsd.NsdServiceInfo, int, android.net.nsd.NsdManager.RegistrationListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ResolveService">
      <MemberSignature Language="C#" Value="public void ResolveService (Android.Net.Nsd.NsdServiceInfo serviceInfo, Android.Net.Nsd.NsdManager.IResolveListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolveService(class Android.Net.Nsd.NsdServiceInfo serviceInfo, class Android.Net.Nsd.NsdManager/IResolveListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveService", "(Landroid/net/nsd/NsdServiceInfo;Landroid/net/nsd/NsdManager$ResolveListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceInfo" Type="Android.Net.Nsd.NsdServiceInfo" />
        <Parameter Name="listener" Type="Android.Net.Nsd.NsdManager+IResolveListener" />
      </Parameters>
      <Docs>
        <param name="serviceInfo">service to be resolved</param>
        <param name="listener">to receive callback upon success or failure. Cannot be null.
 Cannot be in use for an active service resolution.
</param>
        <summary>Resolve a discovered service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Resolve a discovered service. An application can resolve a service right before
 establishing a connection to fetch the IP and port details on which to setup
 the connection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#resolveService(android.net.nsd.NsdServiceInfo, android.net.nsd.NsdManager.ResolveListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StopServiceDiscovery">
      <MemberSignature Language="C#" Value="public void StopServiceDiscovery (Android.Net.Nsd.NsdManager.IDiscoveryListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopServiceDiscovery(class Android.Net.Nsd.NsdManager/IDiscoveryListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopServiceDiscovery", "(Landroid/net/nsd/NsdManager$DiscoveryListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Net.Nsd.NsdManager+IDiscoveryListener" />
      </Parameters>
      <Docs>
        <param name="listener">This should be the listener object that was passed to <c><see cref="M:Android.Net.Nsd.NsdManager.DiscoverServices(System.String,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>.
 It identifies the discovery that should be stopped and notifies of a successful or
 unsuccessful stop.  In API versions 20 and above, the listener object may be used for
 another service discovery once the callback has been called.  In API versions &lt;= 19,
 there is no entirely reliable way to know when a listener may be re-used, and a new
 listener should be created for each service discovery request.
</param>
        <summary>Stop service discovery initiated with <c><see cref="M:Android.Net.Nsd.NsdManager.DiscoverServices(System.String,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stop service discovery initiated with <c><see cref="M:Android.Net.Nsd.NsdManager.DiscoverServices(System.String,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>.  An active service
 discovery is notified to the application with <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStarted(java.lang.String)" /></c>
 and it stays active until the application invokes a stop service discovery. A successful
 stop is notified to with a call to <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStopped(java.lang.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> Upon failure to stop service discovery, application is notified through
 <c><see cref="!:NoType:android/net/nsd/NsdManager$DiscoveryListener;Href=../../../../reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterService">
      <MemberSignature Language="C#" Value="public void UnregisterService (Android.Net.Nsd.NsdManager.IRegistrationListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterService(class Android.Net.Nsd.NsdManager/IRegistrationListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterService", "(Landroid/net/nsd/NsdManager$RegistrationListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Net.Nsd.NsdManager+IRegistrationListener" />
      </Parameters>
      <Docs>
        <param name="listener">This should be the listener object that was passed to
 <c><see cref="M:Android.Net.Nsd.NsdManager.RegisterService(Android.Net.Nsd.NsdServiceInfo,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>. It identifies the service that should be unregistered
 and notifies of a successful or unsuccessful unregistration via the listener
 callbacks.  In API versions 20 and above, the listener object may be used for
 another service registration once the callback has been called.  In API versions &lt;= 19,
 there is no entirely reliable way to know when a listener may be re-used, and a new
 listener should be created for each service registration request.
</param>
        <summary>Unregister a service registered through <c><see cref="M:Android.Net.Nsd.NsdManager.RegisterService(Android.Net.Nsd.NsdServiceInfo,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregister a service registered through <c><see cref="M:Android.Net.Nsd.NsdManager.RegisterService(Android.Net.Nsd.NsdServiceInfo,Android.Net.Nsd.NsdProtocol,Android.Net.Nsd.NsdProtocol)" /></c>. A successful
 unregister is notified to the application with a call to
 <c><see cref="!:NoType:android/net/nsd/NsdManager$RegistrationListener;Href=../../../../reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceUnregistered(android.net.nsd.NsdServiceInfo)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/nsd/NsdManager.html#unregisterService(android.net.nsd.NsdManager.RegistrationListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
