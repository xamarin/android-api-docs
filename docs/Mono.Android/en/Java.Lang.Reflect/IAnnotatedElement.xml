<Type Name="IAnnotatedElement" FullName="Java.Lang.Reflect.IAnnotatedElement">
  <TypeSignature Language="VB.NET" Value="Public Interface IAnnotatedElement&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAnnotatedElement : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface IAnnotatedElement : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IAnnotatedElement implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.Reflect.IAnnotatedElement" />
  <TypeSignature Language="F#" Value="type IAnnotatedElement = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/reflect/AnnotatedElement", "", "Java.Lang.Reflect.IAnnotatedElementInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/reflect/AnnotatedElement", "", "Java.Lang.Reflect.IAnnotatedElementInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Represents an annotated element of the program currently running in this
            VM.</summary>
    <remarks>
      <para>Represents an annotated element of the program currently running in this
            VM.  This interface allows annotations to be read reflectively.  All
            annotations returned by methods in this interface are immutable and
            serializable. The arrays returned by methods of this interface may be modified
            by callers without affecting the arrays returned to other callers.</para>
      <para>Android note: methods that return multiple annotations of different types such as
            <c>#getAnnotations()</c> and <c>#getDeclaredAnnotations()</c> can be affected
            by the explicit character-code ordering of annotations types specified by the DEX format.
            Annotations of different types on a single element are not guaranteed to be returned in the order
            they are declared in source.</para>
      <para>The <c>#getAnnotationsByType(Class)</c> and <c>#getDeclaredAnnotationsByType(Class)</c> methods support multiple
            annotations of the same type on an element. If the argument to
            either method is a repeatable annotation type (JLS 9.6), then the
            method will "look through" a container annotation (JLS 9.7), if
            present, and return any annotations inside the container. Container
            annotations may be generated at compile-time to wrap multiple
            annotations of the argument type.</para>
      <para>The terms &lt;em&gt;directly present&lt;/em&gt;, &lt;em&gt;indirectly present&lt;/em&gt;,
            &lt;em&gt;present&lt;/em&gt;, and &lt;em&gt;associated&lt;/em&gt; are used throughout this
            interface to describe precisely which annotations are returned by
            methods:
            
            &lt;ul&gt;
            
            &lt;li&gt; An annotation <i>A</i> is &lt;em&gt;directly present&lt;/em&gt; on an
            element <i>E</i> if <i>E</i> is annotated by <i>A</i> in the original source.
            
            &lt;li&gt;An annotation <i>A</i> is &lt;em&gt;indirectly present&lt;/em&gt; on an
            element <i>E</i> if <i>E</i> is annotated by a container annotation
            of <i>A</i>.
            
            &lt;li&gt;An annotation <i>A</i> is present on an element <i>E</i> if either:
            
            &lt;ul&gt;
            
            &lt;li&gt;<i>A</i> is directly present on <i>E</i>; or
            
            &lt;li&gt;No annotation of <i>A</i> 's type is directly present on
            <i>E</i>, and <i>E</i> is a class, and <i>A</i> 's type is
            inheritable, and <i>A</i> is present on the superclass of <i>E</i>.
            
            &lt;/ul&gt;
            
            &lt;li&gt;An annotation <i>A</i> is &lt;em&gt;associated&lt;/em&gt; with an element <i>E</i>
            if either:
            
            &lt;ul&gt;
            
            &lt;li&gt;<i>A</i> is directly or indirectly present on <i>E</i>; or
            
            &lt;li&gt;No annotation of <i>A</i> 's type is directly or indirectly
            present on <i>E</i>, and <i>E</i> is a class, and <i>A</i>'s type
            is inheritable, and <i>A</i> is associated with the superclass of
            <i>E</i>.
            
            &lt;/ul&gt;
            
            &lt;/ul&gt;</para>
      <para>The table below summarizes which kind of annotation presence
            different methods in this interface examine.
            
            &lt;table class="plain"&gt;
            &lt;caption&gt;Overview of kind of presence detected by different AnnotatedElement methods&lt;/caption&gt;
            &lt;thead&gt;
            &lt;tr&gt;&lt;th colspan=2 scope="col"&gt;Method&lt;/th&gt;
                &lt;th colspan=4 scope="col"&gt;Kind of Presence&lt;/th&gt;
            &lt;tr&gt;&lt;th scope="col"&gt;Return Type&lt;/th&gt;
                &lt;th scope="col"&gt;Signature&lt;/th&gt;
                &lt;th scope="col"&gt;Directly Present&lt;/th&gt;
                &lt;th scope="col"&gt;Indirectly Present&lt;/th&gt;
                &lt;th scope="col"&gt;Present&lt;/th&gt;
                &lt;th scope="col"&gt;Associated&lt;/th&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>T</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getAnnotation(Class) getAnnotation(Class&amp;lt;T&amp;gt;)</c>&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>Annotation[]</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getAnnotations getAnnotations()</c>&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>T[]</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getAnnotationsByType(Class) getAnnotationsByType(Class&amp;lt;T&amp;gt;)</c>&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td style="text-align:center"&gt;X&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>T</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getDeclaredAnnotation(Class) getDeclaredAnnotation(Class&amp;lt;T&amp;gt;)</c>&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>Annotation[]</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getDeclaredAnnotations getDeclaredAnnotations()</c>&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td style="text-align:right"&gt;<c>T[]</c>&lt;/td&gt;
            &lt;th scope="row" style="font-weight:normal; text-align:left"&gt;<c>#getDeclaredAnnotationsByType(Class) getDeclaredAnnotationsByType(Class&amp;lt;T&amp;gt;)</c>&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td style="text-align:center"&gt;X&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>For an invocation of <c>get[Declared]AnnotationsByType( Class &lt;
            T &gt;)</c>, the order of annotations which are directly or indirectly
            present on an element <i>E</i> is computed as if indirectly present
            annotations on <i>E</i> are directly present on <i>E</i> in place
            of their container annotation, in the order in which they appear in
            the value element of the container annotation.</para>
      <para>There are several compatibility concerns to keep in mind if an
            annotation type <i>T</i> is originally &lt;em&gt;not&lt;/em&gt; repeatable and
            later modified to be repeatable.
            
            The containing annotation type for <i>T</i> is <i>TC</i>.
            
            &lt;ul&gt;
            
            &lt;li&gt;Modifying <i>T</i> to be repeatable is source and binary
            compatible with existing uses of <i>T</i> and with existing uses
            of <i>TC</i>.
            
            That is, for source compatibility, source code with annotations of
            type <i>T</i> or of type <i>TC</i> will still compile. For binary
            compatibility, class files with annotations of type <i>T</i> or of
            type <i>TC</i> (or with other kinds of uses of type <i>T</i> or of
            type <i>TC</i>) will link against the modified version of <i>T</i>
            if they linked against the earlier version.
            
            (An annotation type <i>TC</i> may informally serve as an acting
            containing annotation type before <i>T</i> is modified to be
            formally repeatable. Alternatively, when <i>T</i> is made
            repeatable, <i>TC</i> can be introduced as a new type.)
            
            &lt;li&gt;If an annotation type <i>TC</i> is present on an element, and
            <i>T</i> is modified to be repeatable with <i>TC</i> as its
            containing annotation type then:
            
            &lt;ul&gt;
            
            &lt;li&gt;The change to <i>T</i> is behaviorally compatible with respect
            to the <c>get[Declared]Annotation(Class&lt;T&gt;)</c> (called with an
            argument of <i>T</i> or <i>TC</i>) and <c>get[Declared]Annotations()</c> methods because the results of the
            methods will not change due to <i>TC</i> becoming the containing
            annotation type for <i>T</i>.
            
            &lt;li&gt;The change to <i>T</i> changes the results of the <c>get[Declared]AnnotationsByType(Class&lt;T&gt;)</c> methods called with an
            argument of <i>T</i>, because those methods will now recognize an
            annotation of type <i>TC</i> as a container annotation for <i>T</i>
            and will "look through" it to expose annotations of type <i>T</i>.
            
            &lt;/ul&gt;
            
            &lt;li&gt;If an annotation of type <i>T</i> is present on an
            element and <i>T</i> is made repeatable and more annotations of
            type <i>T</i> are added to the element:
            
            &lt;ul&gt;
            
            &lt;li&gt; The addition of the annotations of type <i>T</i> is both
            source compatible and binary compatible.
            
            &lt;li&gt;The addition of the annotations of type <i>T</i> changes the results
            of the <c>get[Declared]Annotation(Class&lt;T&gt;)</c> methods and <c>get[Declared]Annotations()</c> methods, because those methods will now
            only see a container annotation on the element and not see an
            annotation of type <i>T</i>.
            
            &lt;li&gt;The addition of the annotations of type <i>T</i> changes the
            results of the <c>get[Declared]AnnotationsByType(Class&lt;T&gt;)</c>
            methods, because their results will expose the additional
            annotations of type <i>T</i> whereas previously they exposed only a
            single annotation of type <i>T</i>.
            
            &lt;/ul&gt;
            
            &lt;/ul&gt;</para>
      <para>If an annotation returned by a method in this interface contains
            (directly or indirectly) a <c>Class</c>-valued member referring to
            a class that is not accessible in this VM, attempting to read the class
            by calling the relevant Class-returning method on the returned annotation
            will result in a <c>TypeNotPresentException</c>.</para>
      <para>Similarly, attempting to read an enum-valued member will result in
            a <c>EnumConstantNotPresentException</c> if the enum constant in the
            annotation is no longer present in the enum type.</para>
      <para>If an annotation type <i>T</i> is (meta-)annotated with an
            <c>@Repeatable</c> annotation whose value element indicates a type
            <i>TC</i>, but <i>TC</i> does not declare a <c>value()</c> method
            with a return type of <i>T</i><c>[]</c>, then an exception of type
            <c>java.lang.annotation.AnnotationFormatError</c> is thrown.</para>
      <para>Finally, attempting to read a member whose definition has evolved
            incompatibly will result in a <c>java.lang.annotation.AnnotationTypeMismatchException</c> or an
            <c>java.lang.annotation.IncompleteAnnotationException</c>.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="GetAnnotation">
      <MemberSignature Language="VB.NET" Value="Public Function GetAnnotation (annotationClass As Class) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ GetAnnotation(Java::Lang::Class ^ annotationClass);" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? GetAnnotation (Java.Lang.Class annotationClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetAnnotation(class Java.Lang.Class annotationClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetAnnotation(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotation : Java.Lang.Class -&gt; Java.Lang.Object" Usage="iAnnotatedElement.GetAnnotation annotationClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", "GetGetAnnotation_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", "GetGetAnnotation_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotationClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the annotation to query for and return if present</param>
        <param name="annotationClass">the Class object corresponding to the
                   annotation type</param>
        <summary>Returns this element's annotation for the specified type if
            such an annotation is &lt;em&gt;present&lt;/em&gt;, else null.</summary>
        <returns>this element's annotation for the specified annotation type if
                present on this element, else null</returns>
        <remarks>
          <para>Returns this element's annotation for the specified type if
            such an annotation is &lt;em&gt;present&lt;/em&gt;, else null.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getAnnotation(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotations">
      <MemberSignature Language="VB.NET" Value="Public Function GetAnnotations () As IAnnotation()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Java::Lang::Annotation::IAnnotation ^&gt; ^ GetAnnotations();" />
      <MemberSignature Language="C#" Value="public Java.Lang.Annotation.IAnnotation[] GetAnnotations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Annotation.IAnnotation[] GetAnnotations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetAnnotations" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotations : unit -&gt; Java.Lang.Annotation.IAnnotation[]" Usage="iAnnotatedElement.GetAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAnnotations", "()[Ljava/lang/annotation/Annotation;", "GetGetAnnotationsHandler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAnnotations", "()[Ljava/lang/annotation/Annotation;", "GetGetAnnotationsHandler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Annotation.IAnnotation[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns annotations that are &lt;em&gt;present&lt;/em&gt; on this element.</summary>
        <returns>annotations present on this element</returns>
        <remarks>
          <para>Returns annotations that are &lt;em&gt;present&lt;/em&gt; on this element.
            
            If there are no annotations &lt;em&gt;present&lt;/em&gt; on this element, the return
            value is an array of length 0.
            
            The caller of this method is free to modify the returned array; it will
            have no effect on the arrays returned to other callers.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getAnnotations()" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getAnnotations()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAnnotationsByType">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAnnotationsByType (annotationClass As Class) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Java::Lang::Object ^&gt; ^ GetAnnotationsByType(Java::Lang::Class ^ annotationClass);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[]? GetAnnotationsByType (Java.Lang.Class annotationClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] GetAnnotationsByType(class Java.Lang.Class annotationClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetAnnotationsByType(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotationsByType : Java.Lang.Class -&gt; Java.Lang.Object[]&#xA;override this.GetAnnotationsByType : Java.Lang.Class -&gt; Java.Lang.Object[]" Usage="iAnnotatedElement.GetAnnotationsByType annotationClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAnnotationsByType", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;", "GetGetAnnotationsByType_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAnnotationsByType", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;", "GetGetAnnotationsByType_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotationClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the annotation to query for and return if present</param>
        <param name="annotationClass">the Class object corresponding to the
                   annotation type</param>
        <summary>Returns annotations that are &lt;em&gt;associated&lt;/em&gt; with this element.</summary>
        <returns>all this element's annotations for the specified annotation type if
                associated with this element, else an array of length zero</returns>
        <remarks>
          <para>Returns annotations that are &lt;em&gt;associated&lt;/em&gt; with this element.
            
            If there are no annotations &lt;em&gt;associated&lt;/em&gt; with this element, the return
            value is an array of length 0.
            
            The difference between this method and <c>#getAnnotation(Class)</c>
            is that this method detects if its argument is a &lt;em&gt;repeatable
            annotation type&lt;/em&gt; (JLS 9.6), and if so, attempts to find one or
            more annotations of that type by "looking through" a container
            annotation.
            
            The caller of this method is free to modify the returned array; it will
            have no effect on the arrays returned to other callers.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getAnnotationsByType(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredAnnotation">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredAnnotation (annotationClass As Class) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Object ^ GetDeclaredAnnotation(Java::Lang::Class ^ annotationClass);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? GetDeclaredAnnotation (Java.Lang.Class annotationClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetDeclaredAnnotation(class Java.Lang.Class annotationClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetDeclaredAnnotation(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredAnnotation : Java.Lang.Class -&gt; Java.Lang.Object&#xA;override this.GetDeclaredAnnotation : Java.Lang.Class -&gt; Java.Lang.Object" Usage="iAnnotatedElement.GetDeclaredAnnotation annotationClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDeclaredAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotation_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDeclaredAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotation_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotationClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the annotation to query for and return if directly present</param>
        <param name="annotationClass">the Class object corresponding to the
                   annotation type</param>
        <summary>Returns this element's annotation for the specified type if
            such an annotation is &lt;em&gt;directly present&lt;/em&gt;, else null.</summary>
        <returns>this element's annotation for the specified annotation type if
                directly present on this element, else null</returns>
        <remarks>
          <para>Returns this element's annotation for the specified type if
            such an annotation is &lt;em&gt;directly present&lt;/em&gt;, else null.
            
            This method ignores inherited annotations. (Returns null if no
            annotations are directly present on this element.)</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getDeclaredAnnotation(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredAnnotations">
      <MemberSignature Language="VB.NET" Value="Public Function GetDeclaredAnnotations () As IAnnotation()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Java::Lang::Annotation::IAnnotation ^&gt; ^ GetDeclaredAnnotations();" />
      <MemberSignature Language="C#" Value="public Java.Lang.Annotation.IAnnotation[] GetDeclaredAnnotations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Annotation.IAnnotation[] GetDeclaredAnnotations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetDeclaredAnnotations" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredAnnotations : unit -&gt; Java.Lang.Annotation.IAnnotation[]" Usage="iAnnotatedElement.GetDeclaredAnnotations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotationsHandler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDeclaredAnnotations", "()[Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotationsHandler:Java.Lang.Reflect.IAnnotatedElementInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Annotation.IAnnotation[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns annotations that are &lt;em&gt;directly present&lt;/em&gt; on this element.</summary>
        <returns>annotations directly present on this element</returns>
        <remarks>
          <para>Returns annotations that are &lt;em&gt;directly present&lt;/em&gt; on this element.
            This method ignores inherited annotations.
            
            If there are no annotations &lt;em&gt;directly present&lt;/em&gt; on this element,
            the return value is an array of length 0.
            
            The caller of this method is free to modify the returned array; it will
            have no effect on the arrays returned to other callers.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getDeclaredAnnotations()" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredAnnotationsByType">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeclaredAnnotationsByType (annotationClass As Class) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Java::Lang::Object ^&gt; ^ GetDeclaredAnnotationsByType(Java::Lang::Class ^ annotationClass);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[]? GetDeclaredAnnotationsByType (Java.Lang.Class annotationClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] GetDeclaredAnnotationsByType(class Java.Lang.Class annotationClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.GetDeclaredAnnotationsByType(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetDeclaredAnnotationsByType : Java.Lang.Class -&gt; Java.Lang.Object[]&#xA;override this.GetDeclaredAnnotationsByType : Java.Lang.Class -&gt; Java.Lang.Object[]" Usage="iAnnotatedElement.GetDeclaredAnnotationsByType annotationClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDeclaredAnnotationsByType", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotationsByType_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDeclaredAnnotationsByType", "(Ljava/lang/Class;)[Ljava/lang/annotation/Annotation;", "GetGetDeclaredAnnotationsByType_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.annotation.Annotation" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotationClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the annotation to query for and return
            if directly or indirectly present</param>
        <param name="annotationClass">the Class object corresponding to the
                   annotation type</param>
        <summary>Returns this element's annotation(s) for the specified type if
            such annotations are either &lt;em&gt;directly present&lt;/em&gt; or
            &lt;em&gt;indirectly present&lt;/em&gt;.</summary>
        <returns>all this element's annotations for the specified annotation type if
                directly or indirectly present on this element, else an array of length zero</returns>
        <remarks>
          <para>Returns this element's annotation(s) for the specified type if
            such annotations are either &lt;em&gt;directly present&lt;/em&gt; or
            &lt;em&gt;indirectly present&lt;/em&gt;. This method ignores inherited
            annotations.
            
            If there are no specified annotations directly or indirectly
            present on this element, the return value is an array of length
            0.
            
            The difference between this method and <c>#getDeclaredAnnotation(Class)</c> is that this method detects if its
            argument is a &lt;em&gt;repeatable annotation type&lt;/em&gt; (JLS 9.6), and if so,
            attempts to find one or more annotations of that type by "looking
            through" a container annotation if one is present.
            
            The caller of this method is free to modify the returned array; it will
            have no effect on the arrays returned to other callers.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#getDeclaredAnnotationsByType(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnnotationPresent">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAnnotationPresent (annotationClass As Class) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAnnotationPresent(Java::Lang::Class ^ annotationClass);" />
      <MemberSignature Language="C#" Value="public virtual bool IsAnnotationPresent (Java.Lang.Class annotationClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAnnotationPresent(class Java.Lang.Class annotationClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IAnnotatedElement.IsAnnotationPresent(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member IsAnnotationPresent : Java.Lang.Class -&gt; bool&#xA;override this.IsAnnotationPresent : Java.Lang.Class -&gt; bool" Usage="iAnnotatedElement.IsAnnotationPresent annotationClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isAnnotationPresent", "(Ljava/lang/Class;)Z", "GetIsAnnotationPresent_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isAnnotationPresent", "(Ljava/lang/Class;)Z", "GetIsAnnotationPresent_Ljava_lang_Class_Handler:Java.Lang.Reflect.IAnnotatedElement, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotationClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="annotationClass">the Class object corresponding to the
                   annotation type</param>
        <summary>Returns true if an annotation for the specified type
            is &lt;em&gt;present&lt;/em&gt; on this element, else false.</summary>
        <returns>true if an annotation for the specified annotation
                type is present on this element, else false</returns>
        <remarks>
          <para>Returns true if an annotation for the specified type
            is &lt;em&gt;present&lt;/em&gt; on this element, else false.  This method
            is designed primarily for convenient access to marker annotations.</para>
          <para>The truth value returned by this method is equivalent to:
            <c>getAnnotation(annotationClass) != null</c></para>
          <para>The body of the default method is specified to be the code
            above.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/AnnotatedElement#isAnnotationPresent(java.lang.Class%3C?%20extends%20java.lang.annotation.Annotation%3E)" title="Reference documentation">Java documentation for <code>java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
