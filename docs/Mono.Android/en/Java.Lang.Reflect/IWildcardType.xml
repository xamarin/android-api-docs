<Type Name="IWildcardType" FullName="Java.Lang.Reflect.IWildcardType">
  <TypeSignature Language="C#" Value="public interface IWildcardType : IDisposable, Java.Interop.IJavaPeerable, Java.Lang.Reflect.IType" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IWildcardType implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.Reflect.IType, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.Reflect.IWildcardType" />
  <TypeSignature Language="F#" Value="type IWildcardType = interface&#xA;    interface IType&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.Reflect.IType</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/reflect/WildcardType", "", "Java.Lang.Reflect.IWildcardTypeInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/reflect/WildcardType", "", "Java.Lang.Reflect.IWildcardTypeInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>WildcardType represents a wildcard type expression, such as
            <c>?</c>, <c>? extends Number</c>, or <c>? super Integer</c>.</summary>
    <remarks>
      <para>WildcardType represents a wildcard type expression, such as
            <c>?</c>, <c>? extends Number</c>, or <c>? super Integer</c>.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/reflect/WildcardType" title="Reference documentation">Java documentation for <code>java.lang.reflect.WildcardType</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="GetLowerBounds">
      <MemberSignature Language="C#" Value="public Java.Lang.Reflect.IType[] GetLowerBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Reflect.IType[] GetLowerBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IWildcardType.GetLowerBounds" />
      <MemberSignature Language="F#" Value="abstract member GetLowerBounds : unit -&gt; Java.Lang.Reflect.IType[]" Usage="iWildcardType.GetLowerBounds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLowerBounds", "()[Ljava/lang/reflect/Type;", "GetGetLowerBoundsHandler:Java.Lang.Reflect.IWildcardTypeInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLowerBounds", "()[Ljava/lang/reflect/Type;", "GetGetLowerBoundsHandler:Java.Lang.Reflect.IWildcardTypeInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Reflect.IType[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of <c>Type</c> objects representing the
            lower bound(s) of this type variable.</summary>
        <returns>an array of Types representing the lower bound(s) of this
                type variable</returns>
        <remarks>
          <para>Returns an array of <c>Type</c> objects representing the
            lower bound(s) of this type variable.  If no lower bound is
            explicitly declared, the lower bound is the type of <c>null</c>.
            In this case, a zero length array is returned.</para>
          <para>For each lower bound B :
            &lt;ul&gt;
              &lt;li&gt;if B is a parameterized type or a type variable, it is created,
             (see <c>java.lang.reflect.ParameterizedType ParameterizedType</c>
             for the details of the creation process for parameterized types).
              &lt;li&gt;Otherwise, B is resolved.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/WildcardType#getLowerBounds()" title="Reference documentation">Java documentation for <code>java.lang.reflect.WildcardType.getLowerBounds()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.TypeNotPresentException">if any of the bounds points to a missing type</exception>
        <exception cref="T:Java.Lang.Reflect.MalformedParameterizedTypeException">if any of the bounds points to a type that cannot be
             instantiated for some reason
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpperBounds">
      <MemberSignature Language="C#" Value="public Java.Lang.Reflect.IType[] GetUpperBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Reflect.IType[] GetUpperBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Reflect.IWildcardType.GetUpperBounds" />
      <MemberSignature Language="F#" Value="abstract member GetUpperBounds : unit -&gt; Java.Lang.Reflect.IType[]" Usage="iWildcardType.GetUpperBounds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getUpperBounds", "()[Ljava/lang/reflect/Type;", "GetGetUpperBoundsHandler:Java.Lang.Reflect.IWildcardTypeInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getUpperBounds", "()[Ljava/lang/reflect/Type;", "GetGetUpperBoundsHandler:Java.Lang.Reflect.IWildcardTypeInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Reflect.IType[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of <c>Type</c> objects representing the  upper
            bound(s) of this type variable.</summary>
        <returns>an array of Types representing the upper bound(s) of this
                type variable</returns>
        <remarks>
          <para>Returns an array of <c>Type</c> objects representing the  upper
            bound(s) of this type variable.  If no upper bound is
            explicitly declared, the upper bound is <c>Object</c>.</para>
          <para>For each upper bound B :
            &lt;ul&gt;
             &lt;li&gt;if B is a parameterized type or a type variable, it is created,
             (see <c>java.lang.reflect.ParameterizedType ParameterizedType</c>
             for the details of the creation process for parameterized types).
             &lt;li&gt;Otherwise, B is resolved.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/reflect/WildcardType#getUpperBounds()" title="Reference documentation">Java documentation for <code>java.lang.reflect.WildcardType.getUpperBounds()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.TypeNotPresentException">if any of the bounds points to a missing type</exception>
        <exception cref="T:Java.Lang.Reflect.MalformedParameterizedTypeException">if any bound points to a type that cannot be instantiated for
             some reason
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
