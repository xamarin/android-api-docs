<Type Name="MediaCodec" FullName="Android.Media.MediaCodec">
  <TypeSignature Language="C#" Value="public sealed class MediaCodec : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaCodec extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Media.MediaCodec" />
  <TypeSignature Language="F#" Value="type MediaCodec = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/MediaCodec", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/MediaCodec", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="16">
    <summary>MediaCodec class can be used to access low-level media codecs, i.</summary>
    <remarks>
      <para>MediaCodec class can be used to access low-level media codecs, i.e. encoder/decoder components.
             It is part of the Android low-level multimedia support infrastructure (normally used together
             with <c>MediaExtractor</c>, <c>MediaSync</c>, <c>MediaMuxer</c>, <c>MediaCrypto</c>,
             <c>MediaDrm</c>, <c>Image</c>, <c>Surface</c>, and <c>AudioTrack</c>.)</para>
      <para>&lt;center&gt;
               &lt;img src="../../../images/media/mediacodec_buffers.svg" style="width: 540px; height: 205px"
                   alt="MediaCodec buffer flow diagram"&gt;
             &lt;/center&gt;</para>
      <para>In broad terms, a codec processes input data to generate output data. It processes data
             asynchronously and uses a set of input and output buffers. At a simplistic level, you request
             (or receive) an empty input buffer, fill it up with data and send it to the codec for
             processing. The codec uses up the data and transforms it into one of its empty output buffers.
             Finally, you request (or receive) a filled output buffer, consume its contents and release it
             back to the codec.
            
             &lt;h3 id=qualityFloor&gt;"qualityFloor"&gt;Minimum Quality Floor for Video Encoding&lt;/h3&gt;
             </para>
      <para>Beginning with <c>android.os.Build.VERSION_CODES#S</c>, Android's Video MediaCodecs enforce a
             minimum quality floor. The intent is to eliminate poor quality video encodings. This quality
             floor is applied when the codec is in Variable Bitrate (VBR) mode; it is not applied when
             the codec is in Constant Bitrate (CBR) mode. The quality floor enforcement is also restricted
             to a particular size range; this size range is currently for video resolutions
             larger than 320x240 up through 1920x1080.</para>
      <para>When this quality floor is in effect, the codec and supporting framework code will work to
             ensure that the generated video is of at least a "fair" or "good" quality. The metric
             used to choose these targets is the VMAF (Video Multi-method Assessment Function) with a
             target score of 70 for selected test sequences.</para>
      <para>The typical effect is that
             some videos will generate a higher bitrate than originally configured. This will be most
             notable for videos which were configured with very low bitrates; the codec will use a bitrate
             that is determined to be more likely to generate an "fair" or "good" quality video. Another
             situation is where a video includes very complicated content (lots of motion and detail);
             in such configurations, the codec will use extra bitrate as needed to avoid losing all of
             the content's finer detail.</para>
      <para>This quality floor will not impact content captured at high bitrates (a high bitrate should
             already provide the codec with sufficient capacity to encode all of the detail).
             The quality floor does not operate on CBR encodings.
             The quality floor currently does not operate on resolutions of 320x240 or lower, nor on
             videos with resolution above 1920x1080.
            
             &lt;h3&gt;Data Types&lt;/h3&gt;</para>
      <para>Codecs operate on three kinds of data: compressed data, raw audio data and raw video data.
             All three kinds of data can be processed using <c>ByteBuffer ByteBuffers</c>, but you should use
             a <c>Surface</c> for raw video data to improve codec performance. Surface uses native video
             buffers without mapping or copying them to ByteBuffers; thus, it is much more efficient.
             You normally cannot access the raw video data when using a Surface, but you can use the
             <c>ImageReader</c> class to access unsecured decoded (raw) video frames. This may still be more
             efficient than using ByteBuffers, as some native buffers may be mapped into ByteBuffer#isDirect direct ByteBuffers. When using ByteBuffer mode, you can access raw video
             frames using the <c>Image</c> class and <c>#getInputImage getInput</c>/<c>#getOutputImage
             OutputImage(int)</c>.
            
             &lt;h4&gt;Compressed Buffers&lt;/h4&gt;</para>
      <para>Input buffers (for decoders) and output buffers (for encoders) contain compressed data according
             to the MediaFormat#KEY_MIME format's type. For video types this is normally a single
             compressed video frame. For audio data this is normally a single access unit (an encoded audio
             segment typically containing a few milliseconds of audio as dictated by the format type), but
             this requirement is slightly relaxed in that a buffer may contain multiple encoded access units
             of audio. In either case, buffers do not start or end on arbitrary byte boundaries, but rather on
             frame/access unit boundaries unless they are flagged with <c>#BUFFER_FLAG_PARTIAL_FRAME</c>.
            
             &lt;h4&gt;Raw Audio Buffers&lt;/h4&gt;</para>
      <para>Raw audio buffers contain entire frames of PCM audio data, which is one sample for each channel
             in channel order. Each PCM audio sample is either a 16 bit signed integer or a float,
             in native byte order.
             Raw audio buffers in the float PCM encoding are only possible
             if the MediaFormat's MediaFormat#KEY_PCM_ENCODING
             is set to AudioFormat#ENCODING_PCM_FLOAT during MediaCodec
             <c>#configure configure(&amp;hellip;)</c>
             and confirmed by <c>#getOutputFormat</c> for decoders
             or <c>#getInputFormat</c> for encoders.
             A sample method to check for float PCM in the MediaFormat is as follows:</para>
      <code lang="text/java">static boolean isPcmFloat(MediaFormat format) {
               return format.getInteger(MediaFormat.KEY_PCM_ENCODING, AudioFormat.ENCODING_PCM_16BIT)
                   == AudioFormat.ENCODING_PCM_FLOAT;
             }</code>
      <para>In order to extract, in a short array,
             one channel of a buffer containing 16 bit signed integer audio data,
             the following code may be used:</para>
      <code lang="text/java">// Assumes the buffer PCM encoding is 16 bit.
             short[] getSamplesForChannel(MediaCodec codec, int bufferId, int channelIx) {
               ByteBuffer outputBuffer = codec.getOutputBuffer(bufferId);
               MediaFormat format = codec.getOutputFormat(bufferId);
               ShortBuffer samples = outputBuffer.order(ByteOrder.nativeOrder()).asShortBuffer();
               int numChannels = format.getInteger(MediaFormat.KEY_CHANNEL_COUNT);
               if (channelIx &amp;lt; 0 || channelIx &amp;gt;= numChannels) {
                 return null;
               }
               short[] res = new short[samples.remaining() / numChannels];
               for (int i = 0; i &amp;lt; res.length; ++i) {
                 res[i] = samples.get(i * numChannels + channelIx);
               }
               return res;
             }</code>
      <para>&lt;h4&gt;Raw Video Buffers&lt;/h4&gt;</para>
      <para>In ByteBuffer mode video buffers are laid out according to their MediaFormat#KEY_COLOR_FORMAT color format. You can get the supported color formats as an array
             from <c>#getCodecInfo</c><c>.</c><c>MediaCodecInfo#getCapabilitiesForType
             getCapabilitiesForType(&amp;hellip;)</c><c>.</c><c>CodecCapabilities#colorFormats colorFormats</c>.
             Video codecs may support three kinds of color formats:
             &lt;ul&gt;
             &lt;li&gt;&lt;strong&gt;native raw video format:&lt;/strong&gt; This is marked by <c>CodecCapabilities#COLOR_FormatSurface</c> and it can be used with an input or output Surface.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;flexible YUV buffers&lt;/strong&gt; (such as <c>CodecCapabilities#COLOR_FormatYUV420Flexible</c>): These can be used with an input/output Surface,
             as well as in ByteBuffer mode, by using <c>#getInputImage getInput</c>/<c>#getOutputImage
             OutputImage(int)</c>.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;other, specific formats:&lt;/strong&gt; These are normally only supported in ByteBuffer
             mode. Some color formats are vendor specific. Others are defined in <c>CodecCapabilities</c>.
             For color formats that are equivalent to a flexible format, you can still use <c>#getInputImage getInput</c>/<c>#getOutputImage OutputImage(int)</c>.&lt;/li&gt;
             &lt;/ul&gt;</para>
      <para>All video codecs support flexible YUV 4:2:0 buffers since <c>android.os.Build.VERSION_CODES#LOLLIPOP_MR1</c>.
            
             &lt;h4&gt;Accessing Raw Video ByteBuffers on Older Devices&lt;/h4&gt;</para>
      <para>Prior to <c>android.os.Build.VERSION_CODES#LOLLIPOP</c> and <c>Image</c> support, you need to
             use the <c>MediaFormat#KEY_STRIDE</c> and <c>MediaFormat#KEY_SLICE_HEIGHT</c> output format
             values to understand the layout of the raw output buffers.
             &lt;p class=note&gt;
             Note that on some devices the slice-height is advertised as 0. This could mean either that the
             slice-height is the same as the frame height, or that the slice-height is the frame height
             aligned to some value (usually a power of 2). Unfortunately, there is no standard and simple way
             to tell the actual slice height in this case. Furthermore, the vertical stride of the <c>U</c>
             plane in planar formats is also not specified or defined, though usually it is half of the slice
             height.</para>
      <para>The <c>MediaFormat#KEY_WIDTH</c> and <c>MediaFormat#KEY_HEIGHT</c> keys specify the size of the
             video frames; however, for most encondings the video (picture) only occupies a portion of the
             video frame. This is represented by the 'crop rectangle'.</para>
      <para>You need to use the following keys to get the crop rectangle of raw output images from the
             #getOutputFormat output format. If these keys are not present, the video occupies the
             entire video frame.The crop rectangle is understood in the context of the output frame
             &lt;em&gt;before&lt;/em&gt; applying any MediaFormat#KEY_ROTATION rotation.
             &lt;table style="width: 0%"&gt;
              &lt;thead&gt;
               &lt;tr&gt;
                &lt;th&gt;Format Key&lt;/th&gt;
                &lt;th&gt;Type&lt;/th&gt;
                &lt;th&gt;Description&lt;/th&gt;
               &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody&gt;
               &lt;tr&gt;
                &lt;td&gt;<c>MediaFormat#KEY_CROP_LEFT</c>&lt;/td&gt;
                &lt;td&gt;Integer&lt;/td&gt;
                &lt;td&gt;The left-coordinate (x) of the crop rectangle&lt;/td&gt;
               &lt;/tr&gt;&lt;tr&gt;
                &lt;td&gt;<c>MediaFormat#KEY_CROP_TOP</c>&lt;/td&gt;
                &lt;td&gt;Integer&lt;/td&gt;
                &lt;td&gt;The top-coordinate (y) of the crop rectangle&lt;/td&gt;
               &lt;/tr&gt;&lt;tr&gt;
                &lt;td&gt;<c>MediaFormat#KEY_CROP_RIGHT</c>&lt;/td&gt;
                &lt;td&gt;Integer&lt;/td&gt;
                &lt;td&gt;The right-coordinate (x) &lt;strong&gt;MINUS 1&lt;/strong&gt; of the crop rectangle&lt;/td&gt;
               &lt;/tr&gt;&lt;tr&gt;
                &lt;td&gt;<c>MediaFormat#KEY_CROP_BOTTOM</c>&lt;/td&gt;
                &lt;td&gt;Integer&lt;/td&gt;
                &lt;td&gt;The bottom-coordinate (y) &lt;strong&gt;MINUS 1&lt;/strong&gt; of the crop rectangle&lt;/td&gt;
               &lt;/tr&gt;&lt;tr&gt;
                &lt;td colspan=3&gt;
                 The right and bottom coordinates can be understood as the coordinates of the right-most
                 valid column/bottom-most valid row of the cropped output image.
                &lt;/td&gt;
               &lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;</para>
      <para>The size of the video frame (before rotation) can be calculated as such:</para>
      <code lang="text/java">MediaFormat format = decoder.getOutputFormat(&amp;hellip;);
             int width = format.getInteger(MediaFormat.KEY_WIDTH);
             if (format.containsKey(MediaFormat.KEY_CROP_LEFT)
                     &amp;&amp; format.containsKey(MediaFormat.KEY_CROP_RIGHT)) {
                 width = format.getInteger(MediaFormat.KEY_CROP_RIGHT) + 1
                             - format.getInteger(MediaFormat.KEY_CROP_LEFT);
             }
             int height = format.getInteger(MediaFormat.KEY_HEIGHT);
             if (format.containsKey(MediaFormat.KEY_CROP_TOP)
                     &amp;&amp; format.containsKey(MediaFormat.KEY_CROP_BOTTOM)) {
                 height = format.getInteger(MediaFormat.KEY_CROP_BOTTOM) + 1
                              - format.getInteger(MediaFormat.KEY_CROP_TOP);
             }
             </code>
      <para>&lt;p class=note&gt;
             Also note that the meaning of <c>BufferInfo#offset BufferInfo.offset</c> was not consistent across
             devices. On some devices the offset pointed to the top-left pixel of the crop rectangle, while on
             most devices it pointed to the top-left pixel of the entire frame.
            
             &lt;h3&gt;States&lt;/h3&gt;</para>
      <para>During its life a codec conceptually exists in one of three states: Stopped, Executing or
             Released. The Stopped collective state is actually the conglomeration of three states:
             Uninitialized, Configured and Error, whereas the Executing state conceptually progresses through
             three sub-states: Flushed, Running and End-of-Stream.</para>
      <para>&lt;center&gt;
               &lt;img src="../../../images/media/mediacodec_states.svg" style="width: 519px; height: 356px"
                   alt="MediaCodec state diagram"&gt;
             &lt;/center&gt;</para>
      <para>When you create a codec using one of the factory methods, the codec is in the Uninitialized
             state. First, you need to configure it via <c>#configure configure(&amp;hellip;)</c>, which brings
             it to the Configured state, then call <c>#start</c> to move it to the Executing state. In this
             state you can process data through the buffer queue manipulation described above.</para>
      <para>The Executing state has three sub-states: Flushed, Running and End-of-Stream. Immediately after
             <c>#start</c> the codec is in the Flushed sub-state, where it holds all the buffers. As soon
             as the first input buffer is dequeued, the codec moves to the Running sub-state, where it spends
             most of its life. When you queue an input buffer with the #BUFFER_FLAG_END_OF_STREAM
             end-of-stream marker, the codec transitions to the End-of-Stream sub-state. In this state the
             codec no longer accepts further input buffers, but still generates output buffers until the
             end-of-stream is reached on the output. For decoders, you can move back to the Flushed sub-state
             at any time while in the Executing state using <c>#flush</c>.
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; Going back to Flushed state is only supported for decoders, and may not
             work for encoders (the behavior is undefined).</para>
      <para>Call <c>#stop</c> to return the codec to the Uninitialized state, whereupon it may be configured
             again. When you are done using a codec, you must release it by calling <c>#release</c>.</para>
      <para>On rare occasions the codec may encounter an error and move to the Error state. This is
             communicated using an invalid return value from a queuing operation, or sometimes via an
             exception. Call <c>#reset</c> to make the codec usable again. You can call it from any state to
             move the codec back to the Uninitialized state. Otherwise, call <c>#release</c> to move to the
             terminal Released state.
            
             &lt;h3&gt;Creation&lt;/h3&gt;</para>
      <para>Use <c>MediaCodecList</c> to create a MediaCodec for a specific <c>MediaFormat</c>. When
             decoding a file or a stream, you can get the desired format from <c>MediaExtractor#getTrackFormat MediaExtractor.getTrackFormat</c>. Inject any specific features that
             you want to add using <c>MediaFormat#setFeatureEnabled MediaFormat.setFeatureEnabled</c>, then
             call <c>MediaCodecList#findDecoderForFormat MediaCodecList.findDecoderForFormat</c> to get the
             name of a codec that can handle that specific media format. Finally, create the codec using
             <c>#createByCodecName</c>.
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; On <c>android.os.Build.VERSION_CODES#LOLLIPOP</c>, the format to
             <c>MediaCodecList.findDecoder</c>/<c>EncoderForFormat</c> must not contain a MediaFormat#KEY_FRAME_RATE frame rate. Use
             <c>format.setString(MediaFormat.KEY_FRAME_RATE, null)</c>
             to clear any existing frame rate setting in the format.</para>
      <para>You can also create the preferred codec for a specific MIME type using <c>#createDecoderByType createDecoder</c>/<c>#createEncoderByType EncoderByType(String)</c>.
             This, however, cannot be used to inject features, and may create a codec that cannot handle the
             specific desired media format.
            
             &lt;h4&gt;Creating secure decoders&lt;/h4&gt;</para>
      <para>On versions <c>android.os.Build.VERSION_CODES#KITKAT_WATCH</c> and earlier, secure codecs might
             not be listed in <c>MediaCodecList</c>, but may still be available on the system. Secure codecs
             that exist can be instantiated by name only, by appending <c>".secure"</c> to the name of a
             regular codec (the name of all secure codecs must end in <c>".secure"</c>.) <c>#createByCodecName</c> will throw an <c>IOException</c> if the codec is not present on the system.</para>
      <para>From <c>android.os.Build.VERSION_CODES#LOLLIPOP</c> onwards, you should use the <c>CodecCapabilities#FEATURE_SecurePlayback</c> feature in the media format to create a secure decoder.
            
             &lt;h3&gt;Initialization&lt;/h3&gt;</para>
      <para>After creating the codec, you can set a callback using <c>#setCallback setCallback</c> if you
             want to process data asynchronously. Then, #configure configure the codec using the
             specific media format. This is when you can specify the output <c>Surface</c> for video
             producers &amp;ndash; codecs that generate raw video data (e.g. video decoders). This is also when
             you can set the decryption parameters for secure codecs (see <c>MediaCrypto</c>). Finally, since
             some codecs can operate in multiple modes, you must specify whether you want it to work as a
             decoder or an encoder.</para>
      <para>Since <c>android.os.Build.VERSION_CODES#LOLLIPOP</c>, you can query the resulting input and
             output format in the Configured state. You can use this to verify the resulting configuration,
             e.g. color formats, before starting the codec.</para>
      <para>If you want to process raw input video buffers natively with a video consumer &amp;ndash; a codec
             that processes raw video input, such as a video encoder &amp;ndash; create a destination Surface for
             your input data using <c>#createInputSurface</c> after configuration. Alternately, set up the
             codec to use a previously created #createPersistentInputSurface persistent input
             surface by calling <c>#setInputSurface</c>.
            
             &lt;h4 id=CSD&gt;"CSD"&gt;Codec-specific Data&lt;/h4&gt;</para>
      <para>Some formats, notably AAC audio and MPEG4, H.264 and H.265 video formats require the actual data
             to be prefixed by a number of buffers containing setup data, or codec specific data. When
             processing such compressed formats, this data must be submitted to the codec after <c>#start</c> and before any frame data. Such data must be marked using the flag <c>#BUFFER_FLAG_CODEC_CONFIG</c> in a call to <c>#queueInputBuffer queueInputBuffer</c>.</para>
      <para>Codec-specific data can also be included in the format passed to <c>#configure configure</c> in
             ByteBuffer entries with keys "csd-0", "csd-1", etc. These keys are always included in the track
             <c>MediaFormat</c> obtained from the <c>MediaExtractor#getTrackFormat MediaExtractor</c>.
             Codec-specific data in the format is automatically submitted to the codec upon <c>#start</c>;
             you &lt;strong&gt;MUST NOT&lt;/strong&gt; submit this data explicitly. If the format did not contain codec
             specific data, you can choose to submit it using the specified number of buffers in the correct
             order, according to the format requirements. In case of H.264 AVC, you can also concatenate all
             codec-specific data and submit it as a single codec-config buffer.</para>
      <para>Android uses the following codec-specific data buffers. These are also required to be set in
             the track format for proper <c>MediaMuxer</c> track configuration. Each parameter set and the
             codec-specific-data sections marked with (&lt;sup&gt;*&lt;/sup&gt;) must start with a start code of
             <c>"\x00\x00\x00\x01"</c>.</para>
      <para>&lt;style&gt;td.NA { background: #ccc; } .mid &gt; tr &gt; td { vertical-align: middle; }&lt;/style&gt;
             &lt;table&gt;
              &lt;thead&gt;
               &lt;th&gt;Format&lt;/th&gt;
               &lt;th&gt;CSD buffer #0&lt;/th&gt;
               &lt;th&gt;CSD buffer #1&lt;/th&gt;
               &lt;th&gt;CSD buffer #2&lt;/th&gt;
              &lt;/thead&gt;
              &lt;tbody class=mid&gt;
               &lt;tr&gt;
                &lt;td&gt;AAC&lt;/td&gt;
                &lt;td&gt;Decoder-specific information from ESDS&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;VORBIS&lt;/td&gt;
                &lt;td&gt;Identification header&lt;/td&gt;
                &lt;td&gt;Setup header&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;OPUS&lt;/td&gt;
                &lt;td&gt;Identification header&lt;/td&gt;
                &lt;td&gt;Pre-skip in nanosecs&lt;br&gt;
                    (unsigned 64-bit ByteOrder#nativeOrder native-order integer.)&lt;br&gt;
                    This overrides the pre-skip value in the identification header.&lt;/td&gt;
                &lt;td&gt;Seek Pre-roll in nanosecs&lt;br&gt;
                    (unsigned 64-bit ByteOrder#nativeOrder native-order integer.)&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;FLAC&lt;/td&gt;
                &lt;td&gt;"fLaC", the FLAC stream marker in ASCII,&lt;br&gt;
                    followed by the STREAMINFO block (the mandatory metadata block),&lt;br&gt;
                    optionally followed by any number of other metadata blocks&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;MPEG-4&lt;/td&gt;
                &lt;td&gt;Decoder-specific information from ESDS&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;H.264 AVC&lt;/td&gt;
                &lt;td&gt;SPS (Sequence Parameter Sets&lt;sup&gt;*&lt;/sup&gt;)&lt;/td&gt;
                &lt;td&gt;PPS (Picture Parameter Sets&lt;sup&gt;*&lt;/sup&gt;)&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;H.265 HEVC&lt;/td&gt;
                &lt;td&gt;VPS (Video Parameter Sets&lt;sup&gt;*&lt;/sup&gt;) +&lt;br&gt;
                 SPS (Sequence Parameter Sets&lt;sup&gt;*&lt;/sup&gt;) +&lt;br&gt;
                 PPS (Picture Parameter Sets&lt;sup&gt;*&lt;/sup&gt;)&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;VP9&lt;/td&gt;
                &lt;td&gt;VP9 <see href="http://wiki.webmproject.org/vp9-codecprivate">CodecPrivate</see> Data
                    (optional)&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;AV1&lt;/td&gt;
                &lt;td&gt;AV1 <see href="https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax">
                    AV1CodecConfigurationRecord</see> Data (optional)
                &lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
                &lt;td class=NA&gt;Not Used&lt;/td&gt;
               &lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;
            
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; care must be taken if the codec is flushed immediately or shortly
             after start, before any output buffer or output format change has been returned, as the codec
             specific data may be lost during the flush. You must resubmit the data using buffers marked with
             <c>#BUFFER_FLAG_CODEC_CONFIG</c> after such flush to ensure proper codec operation.</para>
      <para>Encoders (or codecs that generate compressed data) will create and return the codec specific data
             before any valid output buffer in output buffers marked with the #BUFFER_FLAG_CODEC_CONFIG codec-config flag. Buffers containing codec-specific-data have no
             meaningful timestamps.
            
             &lt;h3&gt;Data Processing&lt;/h3&gt;</para>
      <para>Each codec maintains a set of input and output buffers that are referred to by a buffer-ID in
             API calls. After a successful call to <c>#start</c> the client "owns" neither input nor output
             buffers. In synchronous mode, call <c>#dequeueInputBuffer dequeueInput</c>/<c>#dequeueOutputBuffer OutputBuffer(&amp;hellip;)</c> to obtain (get ownership of) an input or output
             buffer from the codec. In asynchronous mode, you will automatically receive available buffers via
             the <c>Callback#onInputBufferAvailable MediaCodec.Callback.onInput</c>/<c>Callback#onOutputBufferAvailable OutputBufferAvailable(&amp;hellip;)</c> callbacks.</para>
      <para>Upon obtaining an input buffer, fill it with data and submit it to the codec using <c>#queueInputBuffer queueInputBuffer</c> &amp;ndash; or <c>#queueSecureInputBuffer
             queueSecureInputBuffer</c> if using decryption. Do not submit multiple input buffers with the same
             timestamp (unless it is codec-specific data marked as such).</para>
      <para>The codec in turn will return a read-only output buffer via the <c>Callback#onOutputBufferAvailable onOutputBufferAvailable</c> callback in asynchronous mode, or in
             response to a <c>#dequeueOutputBuffer dequeueOutputBuffer</c> call in synchronous mode. After the
             output buffer has been processed, call one of the <c>#releaseOutputBuffer
             releaseOutputBuffer</c> methods to return the buffer to the codec.</para>
      <para>While you are not required to resubmit/release buffers immediately to the codec, holding onto
             input and/or output buffers may stall the codec, and this behavior is device dependent.
             &lt;strong&gt;Specifically, it is possible that a codec may hold off on generating output buffers until
             &lt;em&gt;all&lt;/em&gt; outstanding buffers have been released/resubmitted.&lt;/strong&gt; Therefore, try to
             hold onto to available buffers as little as possible.</para>
      <para>Depending on the API version, you can process data in three ways:
             &lt;table&gt;
              &lt;thead&gt;
               &lt;tr&gt;
                &lt;th&gt;Processing Mode&lt;/th&gt;
                &lt;th&gt;API version &lt;= 20&lt;br&gt;Jelly Bean/KitKat&lt;/th&gt;
                &lt;th&gt;API version &gt;= 21&lt;br&gt;Lollipop and later&lt;/th&gt;
               &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody&gt;
               &lt;tr&gt;
                &lt;td&gt;Synchronous API using buffer arrays&lt;/td&gt;
                &lt;td&gt;Supported&lt;/td&gt;
                &lt;td&gt;Deprecated&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;Synchronous API using buffers&lt;/td&gt;
                &lt;td class=NA&gt;Not Available&lt;/td&gt;
                &lt;td&gt;Supported&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;Asynchronous API using buffers&lt;/td&gt;
                &lt;td class=NA&gt;Not Available&lt;/td&gt;
                &lt;td&gt;Supported&lt;/td&gt;
               &lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;
            
             &lt;h4&gt;Asynchronous Processing using Buffers&lt;/h4&gt;</para>
      <para>Since <c>android.os.Build.VERSION_CODES#LOLLIPOP</c>, the preferred method is to process data
             asynchronously by setting a callback before calling <c>#configure configure</c>. Asynchronous
             mode changes the state transitions slightly, because you must call <c>#start</c> after <c>#flush</c> to transition the codec to the Running sub-state and start receiving input buffers.
             Similarly, upon an initial call to <c>start</c> the codec will move directly to the Running
             sub-state and start passing available input buffers via the callback.</para>
      <para>&lt;center&gt;
               &lt;img src="../../../images/media/mediacodec_async_states.svg" style="width: 516px; height: 353px"
                   alt="MediaCodec state diagram for asynchronous operation"&gt;
             &lt;/center&gt;</para>
      <para>MediaCodec is typically used like this in asynchronous mode:</para>
      <code lang="text/java">MediaCodec codec = MediaCodec.createByCodecName(name);
             MediaFormat mOutputFormat; // member variable
             codec.setCallback(new MediaCodec.Callback() {
               {@literal @Override}
               void onInputBufferAvailable(MediaCodec mc, int inputBufferId) {
                 ByteBuffer inputBuffer = codec.getInputBuffer(inputBufferId);
                 // fill inputBuffer with valid data
                 &amp;hellip;
                 codec.queueInputBuffer(inputBufferId, &amp;hellip;);
               }
            
               {@literal @Override}
               void onOutputBufferAvailable(MediaCodec mc, int outputBufferId, &amp;hellip;) {
                 ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);
                 MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId); // option A
                 // bufferFormat is equivalent to mOutputFormat
                 // outputBuffer is ready to be processed or rendered.
                 &amp;hellip;
                 codec.releaseOutputBuffer(outputBufferId, &amp;hellip;);
               }
            
               {@literal @Override}
               void onOutputFormatChanged(MediaCodec mc, MediaFormat format) {
                 // Subsequent data will conform to new format.
                 // Can ignore if using getOutputFormat(outputBufferId)
                 mOutputFormat = format; // option B
               }
            
               {@literal @Override}
               void onError(&amp;hellip;) {
                 &amp;hellip;
               }
               {@literal @Override}
               void onCryptoError(&amp;hellip;) {
                 &amp;hellip;
               }
             });
             codec.configure(format, &amp;hellip;);
             mOutputFormat = codec.getOutputFormat(); // option B
             codec.start();
             // wait for processing to complete
             codec.stop();
             codec.release();</code>
      <para>&lt;h4&gt;Synchronous Processing using Buffers&lt;/h4&gt;</para>
      <para>Since <c>android.os.Build.VERSION_CODES#LOLLIPOP</c>, you should retrieve input and output
             buffers using <c>#getInputBuffer getInput</c>/<c>#getOutputBuffer OutputBuffer(int)</c> and/or
             <c>#getInputImage getInput</c>/<c>#getOutputImage OutputImage(int)</c> even when using the
             codec in synchronous mode. This allows certain optimizations by the framework, e.g. when
             processing dynamic content. This optimization is disabled if you call <c>#getInputBuffers
             getInput</c>/<c>#getOutputBuffers OutputBuffers()</c>.
            
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; do not mix the methods of using buffers and buffer arrays at the same
             time. Specifically, only call <c>getInput</c>/<c>OutputBuffers</c> directly after <c>#start</c> or after having dequeued an output buffer ID with the value of <c>#INFO_OUTPUT_FORMAT_CHANGED</c>.</para>
      <para>MediaCodec is typically used like this in synchronous mode:</para>
      <code lang="text/java">MediaCodec codec = MediaCodec.createByCodecName(name);
             codec.configure(format, &amp;hellip;);
             MediaFormat outputFormat = codec.getOutputFormat(); // option B
             codec.start();
             for (;;) {
               int inputBufferId = codec.dequeueInputBuffer(timeoutUs);
               if (inputBufferId &amp;gt;= 0) {
                 ByteBuffer inputBuffer = codec.getInputBuffer(&amp;hellip;);
                 // fill inputBuffer with valid data
                 &amp;hellip;
                 codec.queueInputBuffer(inputBufferId, &amp;hellip;);
               }
               int outputBufferId = codec.dequeueOutputBuffer(&amp;hellip;);
               if (outputBufferId &amp;gt;= 0) {
                 ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);
                 MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId); // option A
                 // bufferFormat is identical to outputFormat
                 // outputBuffer is ready to be processed or rendered.
                 &amp;hellip;
                 codec.releaseOutputBuffer(outputBufferId, &amp;hellip;);
               } else if (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                 // Subsequent data will conform to new format.
                 // Can ignore if using getOutputFormat(outputBufferId)
                 outputFormat = codec.getOutputFormat(); // option B
               }
             }
             codec.stop();
             codec.release();</code>
      <para>&lt;h4&gt;Synchronous Processing using Buffer Arrays (deprecated)&lt;/h4&gt;</para>
      <para>In versions <c>android.os.Build.VERSION_CODES#KITKAT_WATCH</c> and before, the set of input and
             output buffers are represented by the <c>ByteBuffer[]</c> arrays. After a successful call to
             <c>#start</c>, retrieve the buffer arrays using <c>#getInputBuffers getInput</c>/<c>#getOutputBuffers OutputBuffers()</c>. Use the buffer ID-s as indices into these arrays (when
             non-negative), as demonstrated in the sample below. Note that there is no inherent correlation
             between the size of the arrays and the number of input and output buffers used by the system,
             although the array size provides an upper bound.</para>
      <code lang="text/java">MediaCodec codec = MediaCodec.createByCodecName(name);
             codec.configure(format, &amp;hellip;);
             codec.start();
             ByteBuffer[] inputBuffers = codec.getInputBuffers();
             ByteBuffer[] outputBuffers = codec.getOutputBuffers();
             for (;;) {
               int inputBufferId = codec.dequeueInputBuffer(&amp;hellip;);
               if (inputBufferId &amp;gt;= 0) {
                 // fill inputBuffers[inputBufferId] with valid data
                 &amp;hellip;
                 codec.queueInputBuffer(inputBufferId, &amp;hellip;);
               }
               int outputBufferId = codec.dequeueOutputBuffer(&amp;hellip;);
               if (outputBufferId &amp;gt;= 0) {
                 // outputBuffers[outputBufferId] is ready to be processed or rendered.
                 &amp;hellip;
                 codec.releaseOutputBuffer(outputBufferId, &amp;hellip;);
               } else if (outputBufferId == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
                 outputBuffers = codec.getOutputBuffers();
               } else if (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                 // Subsequent data will conform to new format.
                 MediaFormat format = codec.getOutputFormat();
               }
             }
             codec.stop();
             codec.release();</code>
      <para>&lt;h4&gt;End-of-stream Handling&lt;/h4&gt;</para>
      <para>When you reach the end of the input data, you must signal it to the codec by specifying the
             <c>#BUFFER_FLAG_END_OF_STREAM</c> flag in the call to <c>#queueInputBuffer
             queueInputBuffer</c>. You can do this on the last valid input buffer, or by submitting an additional
             empty input buffer with the end-of-stream flag set. If using an empty buffer, the timestamp will
             be ignored.</para>
      <para>The codec will continue to return output buffers until it eventually signals the end of the
             output stream by specifying the same end-of-stream flag in the <c>BufferInfo</c> set in <c>#dequeueOutputBuffer dequeueOutputBuffer</c> or returned via <c>Callback#onOutputBufferAvailable
             onOutputBufferAvailable</c>. This can be set on the last valid output buffer, or on an empty buffer
             after the last valid output buffer. The timestamp of such empty buffer should be ignored.</para>
      <para>Do not submit additional input buffers after signaling the end of the input stream, unless the
             codec has been flushed, or stopped and restarted.
            
             &lt;h4&gt;Using an Output Surface&lt;/h4&gt;</para>
      <para>The data processing is nearly identical to the ByteBuffer mode when using an output <c>Surface</c>; however, the output buffers will not be accessible, and are represented as <c>null</c>
             values. E.g. <c>#getOutputBuffer getOutputBuffer</c>/<c>#getOutputImage Image(int)</c> will
             return <c>null</c> and <c>#getOutputBuffers</c> will return an array containing only <c>null</c>-s.</para>
      <para>When using an output Surface, you can select whether or not to render each output buffer on the
             surface. You have three choices:
             &lt;ul&gt;
             &lt;li&gt;&lt;strong&gt;Do not render the buffer:&lt;/strong&gt; Call <c>#releaseOutputBuffer(int, boolean)
             releaseOutputBuffer(bufferId, false)</c>.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;Render the buffer with the default timestamp:&lt;/strong&gt; Call <c>#releaseOutputBuffer(int, boolean) releaseOutputBuffer(bufferId, true)</c>.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;Render the buffer with a specific timestamp:&lt;/strong&gt; Call <c>#releaseOutputBuffer(int, long) releaseOutputBuffer(bufferId, timestamp)</c>.&lt;/li&gt;
             &lt;/ul&gt;</para>
      <para>Since <c>android.os.Build.VERSION_CODES#M</c>, the default timestamp is the BufferInfo#presentationTimeUs presentation timestamp of the buffer (converted to nanoseconds).
             It was not defined prior to that.</para>
      <para>Also since <c>android.os.Build.VERSION_CODES#M</c>, you can change the output Surface
             dynamically using <c>#setOutputSurface setOutputSurface</c>.</para>
      <para>When rendering output to a Surface, the Surface may be configured to drop excessive frames (that
             are not consumed by the Surface in a timely manner). Or it may be configured to not drop excessive
             frames. In the latter mode if the Surface is not consuming output frames fast enough, it will
             eventually block the decoder. Prior to <c>android.os.Build.VERSION_CODES#Q</c> the exact behavior
             was undefined, with the exception that View surfaces (SurfaceView or TextureView) always dropped
             excessive frames. Since <c>android.os.Build.VERSION_CODES#Q</c> the default behavior is to drop
             excessive frames. Applications can opt out of this behavior for non-View surfaces (such as
             ImageReader or SurfaceTexture) by targeting SDK <c>android.os.Build.VERSION_CODES#Q</c> and
             setting the key <c>MediaFormat#KEY_ALLOW_FRAME_DROP</c> to <c>0</c>
             in their configure format.
            
             &lt;h4&gt;Transformations When Rendering onto Surface&lt;/h4&gt;
            
             If the codec is configured into Surface mode, any crop rectangle, MediaFormat#KEY_ROTATION rotation and #setVideoScalingMode video scaling
             mode will be automatically applied with one exception:
             &lt;p class=note&gt;
             Prior to the <c>android.os.Build.VERSION_CODES#M</c> release, software decoders may not
             have applied the rotation when being rendered onto a Surface. Unfortunately, there is no standard
             and simple way to identify software decoders, or if they apply the rotation other than by trying
             it out.</para>
      <para>There are also some caveats.
             &lt;p class=note&gt;
             Note that the pixel aspect ratio is not considered when displaying the output onto the
             Surface. This means that if you are using <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT</c> mode, you
             must position the output Surface so that it has the proper final display aspect ratio. Conversely,
             you can only use <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</c> mode for content with
             square pixels (pixel aspect ratio or 1:1).
             &lt;p class=note&gt;
             Note also that as of <c>android.os.Build.VERSION_CODES#N</c> release, <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</c> mode may not work correctly for videos rotated
             by 90 or 270 degrees.
             &lt;p class=note&gt;
             When setting the video scaling mode, note that it must be reset after each time the output
             buffers change. Since the <c>#INFO_OUTPUT_BUFFERS_CHANGED</c> event is deprecated, you can
             do this after each time the output format changes.
            
             &lt;h4&gt;Using an Input Surface&lt;/h4&gt;</para>
      <para>When using an input Surface, there are no accessible input buffers, as buffers are automatically
             passed from the input surface to the codec. Calling <c>#dequeueInputBuffer
             dequeueInputBuffer</c> will throw an <c>IllegalStateException</c>, and <c>#getInputBuffers</c>
             returns a bogus <c>ByteBuffer[]</c> array that &lt;strong&gt;MUST NOT&lt;/strong&gt; be written into.</para>
      <para>Call <c>#signalEndOfInputStream</c> to signal end-of-stream. The input surface will stop
             submitting data to the codec immediately after this call.</para>
      <para>&lt;h3&gt;Seeking &amp;amp; Adaptive Playback Support&lt;/h3&gt;</para>
      <para>Video decoders (and in general codecs that consume compressed video data) behave differently
             regarding seek and format change whether or not they support and are configured for adaptive
             playback. You can check if a decoder supports CodecCapabilities#FEATURE_AdaptivePlayback adaptive playback via <c>CodecCapabilities#isFeatureSupported CodecCapabilities.isFeatureSupported(String)</c>. Adaptive
             playback support for video decoders is only activated if you configure the codec to decode onto a
             <c>Surface</c>.
            
             &lt;h4 id=KeyFrames&gt;"KeyFrames"&gt;Stream Boundary and Key Frames&lt;/h4&gt;</para>
      <para>It is important that the input data after <c>#start</c> or <c>#flush</c> starts at a suitable
             stream boundary: the first frame must be a key frame. A &lt;em&gt;key frame&lt;/em&gt; can be decoded
             completely on its own (for most codecs this means an I-frame), and no frames that are to be
             displayed after a key frame refer to frames before the key frame.</para>
      <para>The following table summarizes suitable key frames for various video formats.
             &lt;table&gt;
              &lt;thead&gt;
               &lt;tr&gt;
                &lt;th&gt;Format&lt;/th&gt;
                &lt;th&gt;Suitable key frame&lt;/th&gt;
               &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class=mid&gt;
               &lt;tr&gt;
                &lt;td&gt;VP9/VP8&lt;/td&gt;
                &lt;td&gt;a suitable intraframe where no subsequent frames refer to frames prior to this frame.&lt;br&gt;
                  <i>(There is no specific name for such key frame.)</i>&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;H.265 HEVC&lt;/td&gt;
                &lt;td&gt;IDR or CRA&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;H.264 AVC&lt;/td&gt;
                &lt;td&gt;IDR&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;MPEG-4&lt;br&gt;H.263&lt;br&gt;MPEG-2&lt;/td&gt;
                &lt;td&gt;a suitable I-frame where no subsequent frames refer to frames prior to this frame.&lt;br&gt;
                  <i>(There is no specific name for such key frame.)&lt;/td&gt;
               &lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;
            
             &lt;h4&gt;For decoders that do not support adaptive playback (including when not decoding onto a
             Surface)&lt;/h4&gt;
             </i></para>
      <para>In order to start decoding data that is not adjacent to previously submitted data (i.e. after a
             seek) you &lt;strong&gt;MUST&lt;/strong&gt; flush the decoder. Since all output buffers are immediately
             revoked at the point of the flush, you may want to first signal then wait for the end-of-stream
             before you call <c>flush</c>. It is important that the input data after a flush starts at a
             suitable stream boundary/key frame.
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; the format of the data submitted after a flush must not change; <c>#flush</c> does not support format discontinuities; for that, a full <c>#stop</c> - <c>#configure configure(&amp;hellip;)</c> - <c>#start</c> cycle is necessary.
            
             &lt;p class=note&gt;
             &lt;strong&gt;Also note:&lt;/strong&gt; if you flush the codec too soon after <c>#start</c> &amp;ndash;
             generally, before the first output buffer or output format change is received &amp;ndash; you
             will need to resubmit the codec-specific-data to the codec. See the codec-specific-data section for more info.
            
             &lt;h4&gt;For decoders that support and are configured for adaptive playback&lt;/h4&gt;</para>
      <para>In order to start decoding data that is not adjacent to previously submitted data (i.e. after a
             seek) it is &lt;em&gt;not necessary&lt;/em&gt; to flush the decoder; however, input data after the
             discontinuity must start at a suitable stream boundary/key frame.</para>
      <para>For some video formats - namely H.264, H.265, VP8 and VP9 - it is also possible to change the
             picture size or configuration mid-stream. To do this you must package the entire new
             codec-specific configuration data together with the key frame into a single buffer (including
             any start codes), and submit it as a &lt;strong&gt;regular&lt;/strong&gt; input buffer.</para>
      <para>You will receive an <c>#INFO_OUTPUT_FORMAT_CHANGED</c> return value from <c>#dequeueOutputBuffer dequeueOutputBuffer</c> or a <c>Callback#onOutputBufferAvailable
             onOutputFormatChanged</c> callback just after the picture-size change takes place and before any
             frames with the new size have been returned.
             &lt;p class=note&gt;
             &lt;strong&gt;Note:&lt;/strong&gt; just as the case for codec-specific data, be careful when calling
             <c>#flush</c> shortly after you have changed the picture size. If you have not received
             confirmation of the picture size change, you will need to repeat the request for the new picture
             size.
            
             &lt;h3&gt;Error handling&lt;/h3&gt;</para>
      <para>The factory methods <c>#createByCodecName createByCodecName</c> and <c>#createDecoderByType
             createDecoder</c>/<c>#createEncoderByType EncoderByType</c> throw <c>IOException</c> on failure
             which you must catch or declare to pass up. MediaCodec methods throw <c>IllegalStateException</c> when the method is called from a codec state that does not allow it; this
             is typically due to incorrect application API usage. Methods involving secure buffers may throw
             <c>CryptoException</c>, which has further error information obtainable from <c>CryptoException#getErrorCode</c>.</para>
      <para>Internal codec errors result in a <c>CodecException</c>, which may be due to media content
             corruption, hardware failure, resource exhaustion, and so forth, even when the application is
             correctly using the API. The recommended action when receiving a <c>CodecException</c>
             can be determined by calling <c>CodecException#isRecoverable</c> and <c>CodecException#isTransient</c>:
             &lt;ul&gt;
             &lt;li&gt;&lt;strong&gt;recoverable errors:&lt;/strong&gt; If <c>isRecoverable()</c> returns true, then call
             <c>#stop</c>, <c>#configure configure(&amp;hellip;)</c>, and <c>#start</c> to recover.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;transient errors:&lt;/strong&gt; If <c>isTransient()</c> returns true, then resources are
             temporarily unavailable and the method may be retried at a later time.&lt;/li&gt;
             &lt;li&gt;&lt;strong&gt;fatal errors:&lt;/strong&gt; If both <c>isRecoverable()</c> and <c>isTransient()</c>
             return false, then the <c>CodecException</c> is fatal and the codec must be #reset
             reset or #release released.&lt;/li&gt;
             &lt;/ul&gt;</para>
      <para>Both <c>isRecoverable()</c> and <c>isTransient()</c> do not return true at the same time.
            
             &lt;h2 id=History&gt;"History"&gt;Valid API Calls and API History&lt;/h2&gt;</para>
      <para>This sections summarizes the valid API calls in each state and the API history of the MediaCodec
             class. For API version numbers, see <c>android.os.Build.VERSION_CODES</c>.
            
             &lt;style&gt;
             .api &gt; tr &gt; th, .api &gt; tr &gt; td { text-align: center; padding: 4px 4px; }
             .api &gt; tr &gt; th     { vertical-align: bottom; }
             .api &gt; tr &gt; td     { vertical-align: middle; }
             .sml &gt; tr &gt; th, .sml &gt; tr &gt; td { text-align: center; padding: 2px 4px; }
             .fn { text-align: left; }
             .fn &gt; code &gt; a { font: 14px/19px Roboto Condensed, sans-serif; }
             .deg45 {
               white-space: nowrap; background: none; border: none; vertical-align: bottom;
               width: 30px; height: 83px;
             }
             .deg45 &gt; div {
               transform: skew(-45deg, 0deg) translate(1px, -67px);
               transform-origin: bottom left 0;
               width: 30px; height: 20px;
             }
             .deg45 &gt; div &gt; div { border: 1px solid #ddd; background: #999; height: 90px; width: 42px; }
             .deg45 &gt; div &gt; div &gt; div { transform: skew(45deg, 0deg) translate(-55px, 55px) rotate(-45deg); }&lt;/style&gt;
            
             &lt;table align="right" style="width: 0%"&gt;
              &lt;thead&gt;
               &lt;tr&gt;&lt;th&gt;Symbol&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class=sml&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9679;&lt;/td&gt;&lt;td&gt;Supported&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#8277;&lt;/td&gt;&lt;td&gt;Semantics changed&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9675;&lt;/td&gt;&lt;td&gt;Experimental support&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;[ ]&lt;/td&gt;&lt;td&gt;Deprecated&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9099;&lt;/td&gt;&lt;td&gt;Restricted to surface input mode&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9094;&lt;/td&gt;&lt;td&gt;Restricted to surface output mode&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9639;&lt;/td&gt;&lt;td&gt;Restricted to ByteBuffer input mode&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#8617;&lt;/td&gt;&lt;td&gt;Restricted to synchronous mode&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#8644;&lt;/td&gt;&lt;td&gt;Restricted to asynchronous mode&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;( )&lt;/td&gt;&lt;td&gt;Can be called, but shouldn't&lt;/td&gt;&lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;
            
             &lt;table style="width: 100%;"&gt;
              &lt;thead class=api&gt;
               &lt;tr&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#4285f4"&gt;&lt;div&gt;Uninitialized&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#f4b400"&gt;&lt;div&gt;Configured&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#e67c73"&gt;&lt;div&gt;Flushed&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#0f9d58"&gt;&lt;div&gt;Running&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#f7cb4d"&gt;&lt;div&gt;End of Stream&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#db4437"&gt;&lt;div&gt;Error&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th class=deg45&gt;&lt;div&gt;&lt;div style="background:#666"&gt;&lt;div&gt;Released&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th&gt;&lt;/th&gt;
                &lt;th colspan="8"&gt;SDK Version&lt;/th&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;th colspan="7"&gt;State&lt;/th&gt;
                &lt;th&gt;Method&lt;/th&gt;
                &lt;th&gt;16&lt;/th&gt;
                &lt;th&gt;17&lt;/th&gt;
                &lt;th&gt;18&lt;/th&gt;
                &lt;th&gt;19&lt;/th&gt;
                &lt;th&gt;20&lt;/th&gt;
                &lt;th&gt;21&lt;/th&gt;
                &lt;th&gt;22&lt;/th&gt;
                &lt;th&gt;23&lt;/th&gt;
               &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody class=api&gt;
               &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td class=fn&gt;<c>#createByCodecName createByCodecName</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td class=fn&gt;<c>#createDecoderByType createDecoderByType</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td class=fn&gt;<c>#createEncoderByType createEncoderByType</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td class=fn&gt;<c>#createPersistentInputSurface createPersistentInputSurface</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#configure configure</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#createInputSurface createInputSurface</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#dequeueInputBuffer dequeueInputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&amp;#9639;&amp;#8617;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&amp;#8617;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&amp;#8617;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#dequeueOutputBuffer dequeueOutputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&amp;#8617;&lt;/td&gt;
                &lt;td&gt;&amp;#8617;&lt;/td&gt;
                &lt;td&gt;&amp;#8617;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#flush flush</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getCodecInfo getCodecInfo</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getInputBuffer getInputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getInputBuffers getInputBuffers</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;[&amp;#8277;&amp;#8617;]&lt;/td&gt;
                &lt;td&gt;[&amp;#8617;]&lt;/td&gt;
                &lt;td&gt;[&amp;#8617;]&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getInputFormat getInputFormat</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getInputImage getInputImage</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getName getName</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getOutputBuffer getOutputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getOutputBuffers getOutputBuffers</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;[&amp;#8277;&amp;#8617;]&lt;/td&gt;
                &lt;td&gt;[&amp;#8617;]&lt;/td&gt;
                &lt;td&gt;[&amp;#8617;]&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getOutputFormat()</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getOutputFormat(int)</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(21+)&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#getOutputImage getOutputImage</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#queueInputBuffer queueInputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#queueSecureInputBuffer queueSecureInputBuffer</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td class=fn&gt;<c>#release release</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#releaseOutputBuffer(int, boolean)</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#releaseOutputBuffer(int, long)</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#reset reset</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;21+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setCallback(Callback) setCallback</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;<c>#setCallback(Callback, Handler) &amp;#8277;</c>&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setInputSurface setInputSurface</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;(23+)&lt;/td&gt;
                &lt;td&gt;(23+)&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setOnFrameRenderedListener setOnFrameRenderedListener</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9675; &amp;#9094;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;23+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setOutputSurface setOutputSurface</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;19+&lt;/td&gt;
                &lt;td&gt;19+&lt;/td&gt;
                &lt;td&gt;19+&lt;/td&gt;
                &lt;td&gt;19+&lt;/td&gt;
                &lt;td&gt;19+&lt;/td&gt;
                &lt;td&gt;(19+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setParameters setParameters</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;(16+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setVideoScalingMode setVideoScalingMode</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
                &lt;td&gt;&amp;#9094;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;(29+)&lt;/td&gt;
                &lt;td&gt;29+&lt;/td&gt;
                &lt;td&gt;29+&lt;/td&gt;
                &lt;td&gt;29+&lt;/td&gt;
                &lt;td&gt;(29+)&lt;/td&gt;
                &lt;td&gt;(29+)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#setAudioPresentation setAudioPresentation</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;18+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#signalEndOfInputStream signalEndOfInputStream</c>&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
                &lt;td&gt;&amp;#9099;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;21+(&amp;#8644;)&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#start start</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;16+&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td&gt;-&lt;/td&gt;
                &lt;td class=fn&gt;<c>#stop stop</c>&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/MediaCodec" title="Reference documentation">Java documentation for <code>android.media.MediaCodec</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="BufferFlagCodecConfig">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagCodecConfig" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagCodecConfig : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagCodecConfig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_CODEC_CONFIG")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_CODEC_CONFIG")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This indicated that the buffer marked as such contains codec
            initialization / codec specific data instead of media data.</summary>
        <remarks>
          <para>This indicated that the buffer marked as such contains codec
            initialization / codec specific data instead of media data.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_CODEC_CONFIG" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_CODEC_CONFIG</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagDecodeOnly">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagDecodeOnly = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagDecodeOnly = (32)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagDecodeOnly" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagDecodeOnly : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagDecodeOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_DECODE_ONLY", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_DECODE_ONLY", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>This indicates that the buffer is decoded and updates the internal state of the decoder,
            but does not produce any output buffer.</summary>
        <remarks>
          <para>This indicates that the buffer is decoded and updates the internal state of the decoder,
            but does not produce any output buffer.
            
            When a buffer has this flag set,
            <c>OnFrameRenderedListener#onFrameRendered(MediaCodec, long, long)</c> and
            <c>Callback#onOutputBufferAvailable(MediaCodec, int, BufferInfo)</c> will not be called for
            that given buffer.
            
            For example, when seeking to a certain frame, that frame may need to reference previous
            frames in order for it to produce output. The preceding frames can be marked with this flag
            so that they are only decoded and their data is used when decoding the latter frame that
            should be initially displayed post-seek.
            Another example would be trick play, trick play is when a video is fast-forwarded and only a
            subset of the frames is to be rendered on the screen. The frames not to be rendered can be
            marked with this flag for the same reason as the above one.
            Marking frames with this flag improves the overall performance of playing a video stream as
            fewer frames need to be passed back to the app.
            
            In <c>CodecCapabilities#FEATURE_TunneledPlayback</c>, buffers marked with this flag
            are not rendered on the output surface.
            
            A frame should not be marked with this flag and <c>#BUFFER_FLAG_END_OF_STREAM</c>
            simultaneously, doing so will produce a <c>InvalidBufferFlagsException</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_DECODE_ONLY" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_DECODE_ONLY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferFlagEndOfStream">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagEndOfStream" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagEndOfStream : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagEndOfStream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_END_OF_STREAM")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_END_OF_STREAM")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This signals the end of stream, i.</summary>
        <remarks>
          <para>This signals the end of stream, i.e. no buffers will be available
            after this, unless of course, <c>#flush</c> follows.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_END_OF_STREAM" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_END_OF_STREAM</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagKeyFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagKeyFrame" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagKeyFrame : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagKeyFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_KEY_FRAME")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_KEY_FRAME")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
            the data for a key frame.</summary>
        <remarks>
          <para>This indicates that the (encoded) buffer marked as such contains
            the data for a key frame.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_KEY_FRAME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_KEY_FRAME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferFlagPartialFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagPartialFrame = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagPartialFrame = (8)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagPartialFrame" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagPartialFrame : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagPartialFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_PARTIAL_FRAME", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_PARTIAL_FRAME", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>This indicates that the buffer only contains part of a frame,
            and the decoder should batch the data until a buffer without
            this flag appears before decoding the frame.</summary>
        <remarks>
          <para>This indicates that the buffer only contains part of a frame,
            and the decoder should batch the data until a buffer without
            this flag appears before decoding the frame.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_PARTIAL_FRAME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_PARTIAL_FRAME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferFlagSyncFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.BufferFlagSyncFrame" />
      <MemberSignature Language="F#" Value="val mutable BufferFlagSyncFrame : Android.Media.MediaCodecBufferFlags" Usage="Android.Media.MediaCodec.BufferFlagSyncFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("BUFFER_FLAG_SYNC_FRAME")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("BUFFER_FLAG_SYNC_FRAME")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
            the data for a key frame.</summary>
        <remarks>
          <para>This indicates that the (encoded) buffer marked as such contains
            the data for a key frame.</para>
          <para>This member is deprecated. Use <c>#BUFFER_FLAG_KEY_FRAME</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#BUFFER_FLAG_SYNC_FRAME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.BUFFER_FLAG_SYNC_FRAME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CanonicalName">
      <MemberSignature Language="C#" Value="public string CanonicalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CanonicalName" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.CanonicalName" />
      <MemberSignature Language="F#" Value="member this.CanonicalName : string" Usage="Android.Media.MediaCodec.CanonicalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCanonicalName", "()Ljava/lang/String;", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCanonicalName", "()Ljava/lang/String;", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the underlying codec name.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Retrieve the underlying codec name.
            
            This method is similar to <c>#getName</c>, except that it returns the underlying component
            name even if an alias was used to create this MediaCodec object by name,</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getCanonicalName()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getCanonicalName()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodecInfo">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodecInfo CodecInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaCodecInfo CodecInfo" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.CodecInfo" />
      <MemberSignature Language="F#" Value="member this.CodecInfo : Android.Media.MediaCodecInfo" Usage="Android.Media.MediaCodec.CodecInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCodecInfo", "()Landroid/media/MediaCodecInfo;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCodecInfo", "()Landroid/media/MediaCodecInfo;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the codec info.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Get the codec info. If the codec was created by createDecoderByType
            or createEncoderByType, what component is chosen is not known beforehand,
            and thus the caller does not have the MediaCodecInfo.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getCodecInfo()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getCodecInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Android.Media.MediaFormat? format, Android.Views.Surface? surface, Android.Media.MediaCodecConfigFlags flags, Android.Media.MediaDescrambler? descrambler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class Android.Media.MediaFormat format, class Android.Views.Surface surface, valuetype Android.Media.MediaCodecConfigFlags flags, class Android.Media.MediaDescrambler descrambler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat,Android.Views.Surface,Android.Media.MediaCodecConfigFlags,Android.Media.MediaDescrambler)" />
      <MemberSignature Language="F#" Value="member this.Configure : Android.Media.MediaFormat * Android.Views.Surface * Android.Media.MediaCodecConfigFlags * Android.Media.MediaDescrambler -&gt; unit" Usage="mediaCodec.Configure (format, surface, flags, descrambler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;ILandroid/media/MediaDescrambler;)V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;ILandroid/media/MediaDescrambler;)V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecConfigFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="descrambler" Type="Android.Media.MediaDescrambler" />
      </Parameters>
      <Docs>
        <param name="format">The format of the input data (decoder) or the desired
                          format of the output data (encoder). Passing <c>null</c>
                          as <c>format</c> is equivalent to passing an
                          <c>MediaFormat#MediaFormat an empty mediaformat</c>.</param>
        <param name="surface">Specify a surface on which to render the output of this
                           decoder. Pass <c>null</c> as <c>surface</c> if the
                           codec does not generate raw video output (e.g. not a video
                           decoder) and/or if you want to configure the codec for
                           <c>ByteBuffer</c> output.</param>
        <param name="flags">Specify <c>#CONFIGURE_FLAG_ENCODE</c> to configure the
                           component as an encoder.</param>
        <param name="descrambler">Specify a descrambler object to facilitate secure
                           descrambling of the media data, or null for non-secure codecs.</param>
        <summary>Configure a component to be used with a descrambler.</summary>
        <remarks>
          <para>Configure a component to be used with a descrambler.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#configure(android.media.MediaFormat,%20android.view.Surface,%20int,%20android.media.MediaDescrambler)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Android.Media.MediaFormat? format, Android.Views.Surface? surface, Android.Media.MediaCrypto? crypto, Android.Media.MediaCodecConfigFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class Android.Media.MediaFormat format, class Android.Views.Surface surface, class Android.Media.MediaCrypto crypto, valuetype Android.Media.MediaCodecConfigFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat,Android.Views.Surface,Android.Media.MediaCrypto,Android.Media.MediaCodecConfigFlags)" />
      <MemberSignature Language="F#" Value="member this.Configure : Android.Media.MediaFormat * Android.Views.Surface * Android.Media.MediaCrypto * Android.Media.MediaCodecConfigFlags -&gt; unit" Usage="mediaCodec.Configure (format, surface, crypto, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="crypto" Type="Android.Media.MediaCrypto" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecConfigFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">The format of the input data (decoder) or the desired
                          format of the output data (encoder). Passing <c>null</c>
                          as <c>format</c> is equivalent to passing an
                          <c>MediaFormat#MediaFormat an empty mediaformat</c>.</param>
        <param name="surface">Specify a surface on which to render the output of this
                           decoder. Pass <c>null</c> as <c>surface</c> if the
                           codec does not generate raw video output (e.g. not a video
                           decoder) and/or if you want to configure the codec for
                           <c>ByteBuffer</c> output.</param>
        <param name="crypto">Specify a crypto object to facilitate secure decryption
                           of the media data. Pass <c>null</c> as <c>crypto</c> for
                           non-secure codecs.
                           Please note that <c>MediaCodec</c> does NOT take ownership
                           of the <c>MediaCrypto</c> object; it is the application's
                           responsibility to properly cleanup the <c>MediaCrypto</c> object
                           when not in use.</param>
        <param name="flags">Specify <c>#CONFIGURE_FLAG_ENCODE</c> to configure the
                           component as an encoder.</param>
        <summary>Configures a component.</summary>
        <remarks>
          <para>Configures a component.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#configure(android.media.MediaFormat,%20android.view.Surface,%20android.media.MediaCrypto,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the surface has been released (or is invalid),
 or the format is unacceptable (e.g. missing a mandatory key),
 or the flags are not set properly
 (e.g. missing <see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /> for an encoder).</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Uninitialized state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CryptoException">upon DRM error.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagEncode">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ConfigureFlagEncode" />
      <MemberSignature Language="F#" Value="val mutable ConfigureFlagEncode : Android.Media.MediaCodecConfigFlags" Usage="Android.Media.MediaCodec.ConfigureFlagEncode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CONFIGURE_FLAG_ENCODE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CONFIGURE_FLAG_ENCODE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>If this codec is to be used as an encoder, pass this flag.</summary>
        <remarks>
          <para>If this codec is to be used as an encoder, pass this flag.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#CONFIGURE_FLAG_ENCODE" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.CONFIGURE_FLAG_ENCODE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagUseBlockModel">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagUseBlockModel = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagUseBlockModel = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ConfigureFlagUseBlockModel" />
      <MemberSignature Language="F#" Value="val mutable ConfigureFlagUseBlockModel : Android.Media.MediaCodecConfigFlags" Usage="Android.Media.MediaCodec.ConfigureFlagUseBlockModel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CONFIGURE_FLAG_USE_BLOCK_MODEL", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CONFIGURE_FLAG_USE_BLOCK_MODEL", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>If this codec is to be used with <c>LinearBlock</c> and/or <c>HardwareBuffer</c>, pass this flag.</summary>
        <remarks>
          <para>If this codec is to be used with <c>LinearBlock</c> and/or <c>HardwareBuffer</c>, pass this flag.</para>
          <para>When this flag is set, the following APIs throw <c>IncompatibleWithBlockModelException</c>.
            &lt;ul&gt;
            &lt;li&gt;<c>#getInputBuffer</c>&lt;li&gt;<c>#getInputImage</c>&lt;li&gt;<c>#getInputBuffers</c>&lt;li&gt;<c>#getOutputBuffer</c>&lt;li&gt;<c>#getOutputImage</c>&lt;li&gt;<c>#getOutputBuffers</c>&lt;li&gt;<c>#queueInputBuffer</c>&lt;li&gt;<c>#queueSecureInputBuffer</c>&lt;li&gt;<c>#dequeueInputBuffer</c>&lt;li&gt;<c>#dequeueOutputBuffer</c>&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#CONFIGURE_FLAG_USE_BLOCK_MODEL" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.CONFIGURE_FLAG_USE_BLOCK_MODEL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagUseCryptoAsync">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagUseCryptoAsync = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagUseCryptoAsync = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ConfigureFlagUseCryptoAsync" />
      <MemberSignature Language="F#" Value="val mutable ConfigureFlagUseCryptoAsync : Android.Media.MediaCodecConfigFlags" Usage="Android.Media.MediaCodec.ConfigureFlagUseCryptoAsync" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CONFIGURE_FLAG_USE_CRYPTO_ASYNC", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CONFIGURE_FLAG_USE_CRYPTO_ASYNC", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This flag should be used on a secure decoder only.</summary>
        <remarks>
          <para>This flag should be used on a secure decoder only. MediaCodec configured with this
            flag does decryption in a separate thread. The flag requires MediaCodec to operate
            asynchronously and will throw CryptoException if any, in the onCryptoError()
            callback. Applications should override the default implementation of
            onCryptoError() and access the associated CryptoException.
            
            CryptoException thrown will contain <c>MediaCodec.CryptoInfo</c>
            This can be accessed using getCryptoInfo()</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#CONFIGURE_FLAG_USE_CRYPTO_ASYNC" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.CONFIGURE_FLAG_USE_CRYPTO_ASYNC</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByCodecName">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateByCodecName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateByCodecName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.CreateByCodecName(System.String)" />
      <MemberSignature Language="F#" Value="static member CreateByCodecName : string -&gt; Android.Media.MediaCodec" Usage="Android.Media.MediaCodec.CreateByCodecName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the codec to be instantiated.</param>
        <summary>If you know the exact name of the component you want to instantiate
            use this method to instantiate it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If you know the exact name of the component you want to instantiate
            use this method to instantiate it. Use with caution.
            Likely to be used with information obtained from <c>android.media.MediaCodecList</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#createByCodecName(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.createByCodecName(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if name is not valid.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if name is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDecoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateDecoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateDecoderByType(string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.CreateDecoderByType(System.String)" />
      <MemberSignature Language="F#" Value="static member CreateDecoderByType : string -&gt; Android.Media.MediaCodec" Usage="Android.Media.MediaCodec.CreateDecoderByType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The mime type of the input data.</param>
        <summary>Instantiate the preferred decoder supporting input data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Instantiate the preferred decoder supporting input data of the given mime type.
            
            The following is a partial list of defined mime types and their semantics:
            &lt;ul&gt;
            &lt;li&gt;"video/x-vnd.on2.vp8" - VP8 video (i.e. video in .webm)
            &lt;li&gt;"video/x-vnd.on2.vp9" - VP9 video (i.e. video in .webm)
            &lt;li&gt;"video/avc" - H.264/AVC video
            &lt;li&gt;"video/hevc" - H.265/HEVC video
            &lt;li&gt;"video/mp4v-es" - MPEG4 video
            &lt;li&gt;"video/3gpp" - H.263 video
            &lt;li&gt;"audio/3gpp" - AMR narrowband audio
            &lt;li&gt;"audio/amr-wb" - AMR wideband audio
            &lt;li&gt;"audio/mpeg" - MPEG1/2 audio layer III
            &lt;li&gt;"audio/mp4a-latm" - AAC audio (note, this is raw AAC packets, not packaged in LATM!)
            &lt;li&gt;"audio/vorbis" - vorbis audio
            &lt;li&gt;"audio/g711-alaw" - G.711 alaw audio
            &lt;li&gt;"audio/g711-mlaw" - G.711 ulaw audio
            &lt;/ul&gt;
            
            &lt;strong&gt;Note:&lt;/strong&gt; It is preferred to use <c>MediaCodecList#findDecoderForFormat</c>
            and <c>#createByCodecName</c> to ensure that the resulting codec can handle a
            given format.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#createDecoderByType(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.createDecoderByType(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEncoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateEncoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateEncoderByType(string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.CreateEncoderByType(System.String)" />
      <MemberSignature Language="F#" Value="static member CreateEncoderByType : string -&gt; Android.Media.MediaCodec" Usage="Android.Media.MediaCodec.CreateEncoderByType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The desired mime type of the output data.</param>
        <summary>Instantiate the preferred encoder supporting output data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Instantiate the preferred encoder supporting output data of the given mime type.
            
            &lt;strong&gt;Note:&lt;/strong&gt; It is preferred to use <c>MediaCodecList#findEncoderForFormat</c>
            and <c>#createByCodecName</c> to ensure that the resulting codec can handle a
            given format.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#createEncoderByType(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.createEncoderByType(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInputSurface">
      <MemberSignature Language="C#" Value="public Android.Views.Surface CreateInputSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Surface CreateInputSurface() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.CreateInputSurface" />
      <MemberSignature Language="F#" Value="member this.CreateInputSurface : unit -&gt; Android.Views.Surface" Usage="mediaCodec.CreateInputSurface " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createInputSurface", "()Landroid/view/Surface;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createInputSurface", "()Landroid/view/Surface;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests a Surface to use as the input to an encoder, in place of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Requests a Surface to use as the input to an encoder, in place of input buffers.  This
            may only be called after <c>#configure</c> and before <c>#start</c>.</para>
          <para>The application is responsible for calling release() on the Surface when
            done.</para>
          <para>The Surface must be rendered with a hardware-accelerated API, such as OpenGL ES.
            <c>android.view.Surface#lockCanvas(android.graphics.Rect)</c> may fail or produce
            unexpected results.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#createInputSurface()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.createInputSurface()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentInputSurface">
      <MemberSignature Language="C#" Value="public static Android.Views.Surface CreatePersistentInputSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Views.Surface CreatePersistentInputSurface() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.CreatePersistentInputSurface" />
      <MemberSignature Language="F#" Value="static member CreatePersistentInputSurface : unit -&gt; Android.Views.Surface" Usage="Android.Media.MediaCodec.CreatePersistentInputSurface " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createPersistentInputSurface", "()Landroid/view/Surface;", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createPersistentInputSurface", "()Landroid/view/Surface;", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a persistent input surface that can be used with codecs that normally have an input
            surface, such as video encoders.</summary>
        <returns>an input surface that can be used with <c>#setInputSurface</c>.</returns>
        <remarks>
          <para>Create a persistent input surface that can be used with codecs that normally have an input
            surface, such as video encoders. A persistent input can be reused by subsequent
            <c>MediaCodec</c> or <c>MediaRecorder</c> instances, but can only be used by at
            most one codec or recorder instance concurrently.</para>
          <para>The application is responsible for calling release() on the Surface when done.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#createPersistentInputSurface()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.createPersistentInputSurface()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptoModeAesCbc">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeAesCbc = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeAesCbc = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.CryptoModeAesCbc" />
      <MemberSignature Language="F#" Value="val mutable CryptoModeAesCbc : Android.Media.MediaCodecCryptoMode" Usage="Android.Media.MediaCodec.CryptoModeAesCbc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CRYPTO_MODE_AES_CBC", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CRYPTO_MODE_AES_CBC", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptoModeAesCtr">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.CryptoModeAesCtr" />
      <MemberSignature Language="F#" Value="val mutable CryptoModeAesCtr : Android.Media.MediaCodecCryptoMode" Usage="Android.Media.MediaCodec.CryptoModeAesCtr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CRYPTO_MODE_AES_CTR")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CRYPTO_MODE_AES_CTR")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CryptoModeUnencrypted">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.CryptoModeUnencrypted" />
      <MemberSignature Language="F#" Value="val mutable CryptoModeUnencrypted : Android.Media.MediaCodecCryptoMode" Usage="Android.Media.MediaCodec.CryptoModeUnencrypted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CRYPTO_MODE_UNENCRYPTED")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CRYPTO_MODE_UNENCRYPTED")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DequeueInputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueInputBuffer (long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueInputBuffer(int64 timeoutUs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.DequeueInputBuffer : int64 -&gt; int" Usage="mediaCodec.DequeueInputBuffer timeoutUs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dequeueInputBuffer", "(J)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dequeueInputBuffer", "(J)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Returns the index of an input buffer to be filled with valid data
            or -1 if no such buffer is currently available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the index of an input buffer to be filled with valid data
            or -1 if no such buffer is currently available.
            This method will return immediately if timeoutUs == 0, wait indefinitely
            for the availability of an input buffer if timeoutUs &amp;lt; 0 or wait up
            to "timeoutUs" microseconds if timeoutUs &amp;gt; 0.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#dequeueInputBuffer(long)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.dequeueInputBuffer(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DequeueOutputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueOutputBuffer (Android.Media.MediaCodec.BufferInfo info, long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueOutputBuffer(class Android.Media.MediaCodec/BufferInfo info, int64 timeoutUs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.DequeueOutputBuffer : Android.Media.MediaCodec.BufferInfo * int64 -&gt; int" Usage="mediaCodec.DequeueOutputBuffer (info, timeoutUs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dequeueOutputBuffer", "(Landroid/media/MediaCodec$BufferInfo;J)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dequeueOutputBuffer", "(Landroid/media/MediaCodec$BufferInfo;J)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.Media.MediaCodec+BufferInfo" />
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="info">Will be filled with buffer meta data.</param>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Dequeue an output buffer, block at most "timeoutUs" microseconds.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#dequeueOutputBuffer(android.media.BufferInfo,%20long)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.dequeueOutputBuffer(android.media.BufferInfo, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Flush" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="mediaCodec.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("flush", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("flush", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush both input and output ports of the component.</summary>
        <remarks>
          <para>Flush both input and output ports of the component.</para>
          <para>Upon return, all indices previously returned in calls to <c>#dequeueInputBuffer
            dequeueInputBuffer</c> and <c>#dequeueOutputBuffer dequeueOutputBuffer</c> &amp;mdash; or obtained
            via <c>Callback#onInputBufferAvailable onInputBufferAvailable</c> or
            <c>Callback#onOutputBufferAvailable onOutputBufferAvailable</c> callbacks &amp;mdash; become
            invalid, and all buffers are owned by the codec.</para>
          <para>If the codec is configured in asynchronous mode, call <c>#start</c>
            after <c>flush</c> has returned to resume codec operations. The codec
            will not request input buffers until this has happened.
            &lt;strong&gt;Note, however, that there may still be outstanding <c>onOutputBufferAvailable</c>
            callbacks that were not handled prior to calling <c>flush</c>.
            The indices returned via these callbacks also become invalid upon calling <c>flush</c> and
            should be discarded.&lt;/strong&gt;</para>
          <para>If the codec is configured in synchronous mode, codec will resume
            automatically if it is configured with an input surface.  Otherwise, it
            will resume when <c>#dequeueInputBuffer dequeueInputBuffer</c> is called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#flush()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.flush()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer? GetInputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetInputBuffer(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetInputBuffer(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetInputBuffer : int -&gt; Java.Nio.ByteBuffer" Usage="mediaCodec.GetInputBuffer index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getInputBuffer", "(I)Ljava/nio/ByteBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getInputBuffer", "(I)Ljava/nio/ByteBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
                         returned from a call to <c>#dequeueInputBuffer</c>,
                         or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a <c>java.nio.Buffer#clear cleared</c>, writable ByteBuffer
            object for a dequeued input buffer index to contain the input data.</summary>
        <returns>the input buffer, or null if the index is not a dequeued
            input buffer, or if the codec is configured for surface input.</returns>
        <remarks>
          <para>Returns a <c>java.nio.Buffer#clear cleared</c>, writable ByteBuffer
            object for a dequeued input buffer index to contain the input data.
            
            After calling this method any ByteBuffer or Image object
            previously returned for the same input index MUST no longer
            be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getInputBuffer(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getInputBuffer(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetInputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetInputBuffers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetInputBuffers" />
      <MemberSignature Language="F#" Value="member this.GetInputBuffers : unit -&gt; Java.Nio.ByteBuffer[]" Usage="mediaCodec.GetInputBuffers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getInputBuffers", "()[Ljava/nio/ByteBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getInputBuffers", "()[Ljava/nio/ByteBuffer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Retrieve the set of input buffers.  Call this after start()
            returns. After calling this method, any ByteBuffers
            previously returned by an earlier call to this method MUST no
            longer be used.</para>
          <para>This member is deprecated. Use the new <c>#getInputBuffer</c> method instead
            each time an input buffer is dequeued.
            
            &lt;b&gt;Note:&lt;/b&gt; As of API 21, dequeued input buffers are
            automatically <c>java.nio.Buffer#clear cleared</c>.
            
            &lt;em&gt;Do not use this method if using an input surface.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getInputBuffers()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getInputBuffers()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image? GetInputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetInputImage(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetInputImage(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetInputImage : int -&gt; Android.Media.Image" Usage="mediaCodec.GetInputImage index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getInputImage", "(I)Landroid/media/Image;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getInputImage", "(I)Landroid/media/Image;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
                         returned from a call to <c>#dequeueInputBuffer</c>,
                         or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a writable Image object for a dequeued input buffer
            index to contain the raw input video frame.</summary>
        <returns>the input image, or null if the index is not a
            dequeued input buffer, or not a ByteBuffer that contains a
            raw image.</returns>
        <remarks>
          <para>Returns a writable Image object for a dequeued input buffer
            index to contain the raw input video frame.</para>
          <para>After calling this method any ByteBuffer or Image object
            previously returned for the same input index MUST no longer
            be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getInputImage(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getInputImage(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer? GetOutputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetOutputBuffer(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetOutputBuffer(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOutputBuffer : int -&gt; Java.Nio.ByteBuffer" Usage="mediaCodec.GetOutputBuffer index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOutputBuffer", "(I)Ljava/nio/ByteBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOutputBuffer", "(I)Ljava/nio/ByteBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
                         returned from a call to <c>#dequeueOutputBuffer</c>,
                         or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only ByteBuffer for a dequeued output buffer
            index.</summary>
        <returns>the output buffer, or null if the index is not a dequeued
            output buffer, or the codec is configured with an output surface.</returns>
        <remarks>
          <para>Returns a read-only ByteBuffer for a dequeued output buffer
            index. The position and limit of the returned buffer are set
            to the valid output data.</para>
          <para>After calling this method, any ByteBuffer or Image object
            previously returned for the same output index MUST no longer
            be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputBuffer(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputBuffer(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetOutputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetOutputBuffers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetOutputBuffers" />
      <MemberSignature Language="F#" Value="member this.GetOutputBuffers : unit -&gt; Java.Nio.ByteBuffer[]" Usage="mediaCodec.GetOutputBuffers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOutputBuffers", "()[Ljava/nio/ByteBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOutputBuffers", "()[Ljava/nio/ByteBuffer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of output buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Retrieve the set of output buffers.  Call this after start()
            returns and whenever dequeueOutputBuffer signals an output
            buffer change by returning <c>#INFO_OUTPUT_BUFFERS_CHANGED</c>. After calling this method, any
            ByteBuffers previously returned by an earlier call to this
            method MUST no longer be used.</para>
          <para>This member is deprecated. Use the new <c>#getOutputBuffer</c> method instead
            each time an output buffer is dequeued.  This method is not
            supported if codec is configured in asynchronous mode.
            
            &lt;b&gt;Note:&lt;/b&gt; As of API 21, the position and limit of output
            buffers that are dequeued will be set to the valid data
            range.
            
            &lt;em&gt;Do not use this method if using an output surface.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputBuffers()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputBuffers()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat GetOutputFormat (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaFormat GetOutputFormat(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetOutputFormat(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOutputFormat : int -&gt; Android.Media.MediaFormat" Usage="mediaCodec.GetOutputFormat index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOutputFormat", "(I)Landroid/media/MediaFormat;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOutputFormat", "(I)Landroid/media/MediaFormat;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
                         returned from a call to <c>#dequeueInputBuffer</c>.</param>
        <summary>Returns the output format for a specific output buffer.</summary>
        <returns>the format for the output buffer, or null if the index
            is not a dequeued output buffer.</returns>
        <remarks>
          <para>Returns the output format for a specific output buffer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputFormat(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputFormat(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFrame">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodec.OutputFrame GetOutputFrame (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaCodec/OutputFrame GetOutputFrame(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetOutputFrame(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOutputFrame : int -&gt; Android.Media.MediaCodec.OutputFrame" Usage="mediaCodec.GetOutputFrame index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOutputFrame", "(I)Landroid/media/MediaCodec$OutputFrame;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOutputFrame", "(I)Landroid/media/MediaCodec$OutputFrame;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec+OutputFrame</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">output buffer index from
                         <c>Callback#onOutputBufferAvailable</c></param>
        <summary>Returns an <c>OutputFrame</c> object.</summary>
        <returns>
          <c>OutputFrame</c> object describing the output buffer</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputFrame(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputFrame(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image? GetOutputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetOutputImage(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetOutputImage(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOutputImage : int -&gt; Android.Media.Image" Usage="mediaCodec.GetOutputImage index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOutputImage", "(I)Landroid/media/Image;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOutputImage", "(I)Landroid/media/Image;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
                         returned from a call to <c>#dequeueOutputBuffer</c>,
                         or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only Image object for a dequeued output buffer
            index that contains the raw video frame.</summary>
        <returns>the output image, or null if the index is not a
            dequeued output buffer, not a raw video frame, or if the codec
            was configured with an output surface.</returns>
        <remarks>
          <para>Returns a read-only Image object for a dequeued output buffer
            index that contains the raw video frame.</para>
          <para>After calling this method, any ByteBuffer or Image object previously
            returned for the same output index MUST no longer be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputImage(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputImage(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetParameterDescriptor">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodec.ParameterDescriptor? GetParameterDescriptor (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaCodec/ParameterDescriptor GetParameterDescriptor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetParameterDescriptor(System.String)" />
      <MemberSignature Language="F#" Value="member this.GetParameterDescriptor : string -&gt; Android.Media.MediaCodec.ParameterDescriptor" Usage="mediaCodec.GetParameterDescriptor name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getParameterDescriptor", "(Ljava/lang/String;)Landroid/media/MediaCodec$ParameterDescriptor;", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getParameterDescriptor", "(Ljava/lang/String;)Landroid/media/MediaCodec$ParameterDescriptor;", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec+ParameterDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">name of the parameter to describe, typically one from
                        <c>#getSupportedVendorParameters</c>.</param>
        <summary>Describe a parameter with the name.</summary>
        <returns>
          <c>ParameterDescriptor</c> object that describes the parameter.
                    <c>null</c> if unrecognized / not able to describe.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getParameterDescriptor(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getParameterDescriptor(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueueRequest">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodec.QueueRequest GetQueueRequest (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaCodec/QueueRequest GetQueueRequest(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.GetQueueRequest(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetQueueRequest : int -&gt; Android.Media.MediaCodec.QueueRequest" Usage="mediaCodec.GetQueueRequest index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getQueueRequest", "(I)Landroid/media/MediaCodec$QueueRequest;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getQueueRequest", "(I)Landroid/media/MediaCodec$QueueRequest;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec+QueueRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">input slot index from
                         <c>Callback#onInputBufferAvailable</c></param>
        <summary>Return a <c>QueueRequest</c> object for an input slot index.</summary>
        <returns>queue request object</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getQueueRequest(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getQueueRequest(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfoOutputBuffersChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = (-3)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.InfoOutputBuffersChanged" />
      <MemberSignature Language="F#" Value="val mutable InfoOutputBuffersChanged : Android.Media.MediaCodecInfoState" Usage="Android.Media.MediaCodec.InfoOutputBuffersChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INFO_OUTPUT_BUFFERS_CHANGED")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INFO_OUTPUT_BUFFERS_CHANGED")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>The output buffers have changed, the client must refer to the new
            set of output buffers returned by <c>#getOutputBuffers</c> from
            this point on.</summary>
        <remarks>
          <para>The output buffers have changed, the client must refer to the new
            set of output buffers returned by <c>#getOutputBuffers</c> from
            this point on.</para>
          <para>Additionally, this event signals that the video scaling mode
            may have been reset to the default.</para>
          <para>This member is deprecated. This return value can be ignored as <c>#getOutputBuffers</c> has been deprecated.  Client should
            request a current buffer using on of the get-buffer or
            get-image methods each time one has been dequeued.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#INFO_OUTPUT_BUFFERS_CHANGED" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoOutputFormatChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputFormatChanged = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputFormatChanged = (-2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.InfoOutputFormatChanged" />
      <MemberSignature Language="F#" Value="val mutable InfoOutputFormatChanged : Android.Media.MediaCodecInfoState" Usage="Android.Media.MediaCodec.InfoOutputFormatChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INFO_OUTPUT_FORMAT_CHANGED")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INFO_OUTPUT_FORMAT_CHANGED")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>The output format has changed, subsequent data will follow the new
            format.</summary>
        <remarks>
          <para>The output format has changed, subsequent data will follow the new
            format. <c>#getOutputFormat()</c> returns the new format.  Note, that
            you can also use the new <c>#getOutputFormat(int)</c> method to
            get the format for a specific output buffer.  This frees you from
            having to track output format changes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#INFO_OUTPUT_FORMAT_CHANGED" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.INFO_OUTPUT_FORMAT_CHANGED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoTryAgainLater">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoTryAgainLater = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoTryAgainLater = (-1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.InfoTryAgainLater" />
      <MemberSignature Language="F#" Value="val mutable InfoTryAgainLater : Android.Media.MediaCodecInfoState" Usage="Android.Media.MediaCodec.InfoTryAgainLater" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INFO_TRY_AGAIN_LATER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INFO_TRY_AGAIN_LATER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>If a non-negative timeout had been specified in the call
            to <c>#dequeueOutputBuffer</c>, indicates that the call timed out.</summary>
        <remarks>
          <para>If a non-negative timeout had been specified in the call
            to <c>#dequeueOutputBuffer</c>, indicates that the call timed out.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#INFO_TRY_AGAIN_LATER" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.INFO_TRY_AGAIN_LATER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat InputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat InputFormat" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.InputFormat" />
      <MemberSignature Language="F#" Value="member this.InputFormat : Android.Media.MediaFormat" Usage="Android.Media.MediaCodec.InputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getInputFormat", "()Landroid/media/MediaFormat;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getInputFormat", "()Landroid/media/MediaFormat;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after <c>#configure</c> returns successfully to
            get the input format accepted by the codec.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Call this after <c>#configure</c> returns successfully to
            get the input format accepted by the codec. Do this to
            determine what optional configuration parameters were
            supported by the codec.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getInputFormat()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getInputFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 21" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.MediaCodec.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapHardwareBuffer">
      <MemberSignature Language="C#" Value="public static Android.Media.Image? MapHardwareBuffer (Android.Hardware.HardwareBuffer hardwareBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.Image MapHardwareBuffer(class Android.Hardware.HardwareBuffer hardwareBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.MapHardwareBuffer(Android.Hardware.HardwareBuffer)" />
      <MemberSignature Language="F#" Value="static member MapHardwareBuffer : Android.Hardware.HardwareBuffer -&gt; Android.Media.Image" Usage="Android.Media.MediaCodec.MapHardwareBuffer hardwareBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mapHardwareBuffer", "(Landroid/hardware/HardwareBuffer;)Landroid/media/Image;", "", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mapHardwareBuffer", "(Landroid/hardware/HardwareBuffer;)Landroid/media/Image;", "", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hardwareBuffer" Type="Android.Hardware.HardwareBuffer" />
      </Parameters>
      <Docs>
        <param name="hardwareBuffer">
          <c>HardwareBuffer</c> to map.</param>
        <summary>Map a <c>HardwareBuffer</c> object into <c>Image</c>, so that the content of the buffer is
            accessible.</summary>
        <returns>Mapped <c>Image</c> object, or null if the buffer is not mappable.</returns>
        <remarks>
          <para>Map a <c>HardwareBuffer</c> object into <c>Image</c>, so that the content of the buffer is
            accessible. Depending on the usage and pixel format of the hardware buffer, it may not be
            mappable; this method returns null in that case.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#mapHardwareBuffer(android.hardware.HardwareBuffer)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.mapHardwareBuffer(android.hardware.HardwareBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Metrics">
      <MemberSignature Language="C#" Value="public Android.OS.PersistableBundle? Metrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.PersistableBundle Metrics" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.Metrics" />
      <MemberSignature Language="F#" Value="member this.Metrics : Android.OS.PersistableBundle" Usage="Android.Media.MediaCodec.Metrics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMetrics", "()Landroid/os/PersistableBundle;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMetrics", "()Landroid/os/PersistableBundle;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.PersistableBundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return Metrics data about the current codec instance.</summary>
        <value>a <c>PersistableBundle</c> containing the set of attributes and values
            available for the media being handled by this instance of MediaCodec
            The attributes are descibed in <c>MetricsConstants</c>.
            
            Additional vendor-specific fields may also be present in
            the return value.</value>
        <remarks>
          <para>Return Metrics data about the current codec instance.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getMetrics()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getMetrics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Android.Media.MediaCodec.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the codec name.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Retrieve the codec name.
            
            If the codec was created by createDecoderByType or createEncoderByType, what component is
            chosen is not known beforehand. This method returns the name of the codec that was
            selected by the platform.
            
            &lt;strong&gt;Note:&lt;/strong&gt; Implementations may provide multiple aliases (codec
            names) for the same underlying codec, any of which can be used to instantiate the same
            underlying codec in <c>MediaCodec#createByCodecName</c>. This method returns the
            name used to create the codec in this case.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getName()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getName()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat OutputFormat" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.OutputFormat" />
      <MemberSignature Language="F#" Value="member this.OutputFormat : Android.Media.MediaFormat" Usage="Android.Media.MediaCodec.OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getOutputFormat", "()Landroid/media/MediaFormat;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getOutputFormat", "()Landroid/media/MediaFormat;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after dequeueOutputBuffer signals a format change by returning
            <c>#INFO_OUTPUT_FORMAT_CHANGED</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Call this after dequeueOutputBuffer signals a format change by returning
            <c>#INFO_OUTPUT_FORMAT_CHANGED</c>.
            You can also call this after <c>#configure</c> returns
            successfully to get the output format initially configured
            for the codec.  Do this to determine what optional
            configuration parameters were supported by the codec.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getOutputFormat()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getOutputFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyHdr10PlusInfo">
      <MemberSignature Language="C#" Value="public const string ParameterKeyHdr10PlusInfo;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyHdr10PlusInfo" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyHdr10PlusInfo" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyHdr10PlusInfo : string" Usage="Android.Media.MediaCodec.ParameterKeyHdr10PlusInfo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_HDR10_PLUS_INFO", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_HDR10_PLUS_INFO", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set the HDR10+ metadata on the next queued input frame.</summary>
        <remarks>
          <para>Set the HDR10+ metadata on the next queued input frame.</para>
          <para>Provide a byte array of data that's conforming to the
            user_data_registered_itu_t_t35() syntax of SEI message for ST 2094-40.</para>
          <para>For decoders:</para>
          <para>When a decoder is configured for one of the HDR10+ profiles that uses
            out-of-band metadata (such as <c>MediaCodecInfo.CodecProfileLevel#VP9Profile2HDR10Plus</c> or <c>MediaCodecInfo.CodecProfileLevel#VP9Profile3HDR10Plus</c>), this
            parameter sets the HDR10+ metadata on the next input buffer queued
            to the decoder. A decoder supporting these profiles must propagate
            the metadata to the format of the output buffer corresponding to this
            particular input buffer (under key <c>MediaFormat#KEY_HDR10_PLUS_INFO</c>).
            The metadata should be applied to that output buffer and the buffers
            following it (in display order), until the next output buffer (in
            display order) upon which an HDR10+ metadata is set.</para>
          <para>This parameter shouldn't be set if the decoder is not configured for
            an HDR10+ profile that uses out-of-band metadata. In particular,
            it shouldn't be set for HDR10+ profiles that uses in-band metadata
            where the metadata is embedded in the input buffers, for example
            <c>MediaCodecInfo.CodecProfileLevel#HEVCProfileMain10HDR10Plus</c>.</para>
          <para>For encoders:</para>
          <para>When an encoder is configured for one of the HDR10+ profiles and the
            operates in byte buffer input mode (instead of surface input mode),
            this parameter sets the HDR10+ metadata on the next input buffer queued
            to the encoder. For the HDR10+ profiles that uses out-of-band metadata
            (such as <c>MediaCodecInfo.CodecProfileLevel#VP9Profile2HDR10Plus</c>,
            or <c>MediaCodecInfo.CodecProfileLevel#VP9Profile3HDR10Plus</c>),
            the metadata must be propagated to the format of the output buffer
            corresponding to this particular input buffer (under key <c>MediaFormat#KEY_HDR10_PLUS_INFO</c>). For the HDR10+ profiles that uses
            in-band metadata (such as <c>MediaCodecInfo.CodecProfileLevel#HEVCProfileMain10HDR10Plus</c>), the
            metadata info must be embedded in the corresponding output buffer itself.</para>
          <para>This parameter shouldn't be set if the encoder is not configured for
            an HDR10+ profile, or if it's operating in surface input mode.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_HDR10_PLUS_INFO" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_HDR10_PLUS_INFO</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyLowLatency">
      <MemberSignature Language="C#" Value="public const string ParameterKeyLowLatency;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyLowLatency" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyLowLatency" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyLowLatency : string" Usage="Android.Media.MediaCodec.ParameterKeyLowLatency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_LOW_LATENCY", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_LOW_LATENCY", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enable/disable low latency decoding mode.</summary>
        <remarks>
          <para>Enable/disable low latency decoding mode.
            When enabled, the decoder doesn't hold input and output data more than
            required by the codec standards.
            The value is an Integer object containing the value 1 to enable
            or the value 0 to disable.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_LOW_LATENCY" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_LOW_LATENCY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyOffsetTime">
      <MemberSignature Language="C#" Value="public const string ParameterKeyOffsetTime;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyOffsetTime" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyOffsetTime" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyOffsetTime : string" Usage="Android.Media.MediaCodec.ParameterKeyOffsetTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_OFFSET_TIME", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_OFFSET_TIME", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specify an offset (in micro-second) to be added on top of the timestamps
            onward.</summary>
        <remarks>
          <para>Specify an offset (in micro-second) to be added on top of the timestamps
            onward. A typical use case is to apply an adjust to the timestamps after
            a period of pause by the user.</para>
          <para>This parameter can only be used on an encoder in "surface-input" mode.</para>
          <para>The value is a long int, indicating the timestamp offset to be applied.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_OFFSET_TIME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_OFFSET_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyRequestSyncFrame">
      <MemberSignature Language="C#" Value="public const string ParameterKeyRequestSyncFrame;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyRequestSyncFrame" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyRequestSyncFrame" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyRequestSyncFrame : string" Usage="Android.Media.MediaCodec.ParameterKeyRequestSyncFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_REQUEST_SYNC_FRAME")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_REQUEST_SYNC_FRAME")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Request that the encoder produce a sync frame "soon".</summary>
        <remarks>
          <para>Request that the encoder produce a sync frame "soon".
            Provide an Integer with the value 0.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_REQUEST_SYNC_FRAME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_REQUEST_SYNC_FRAME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeySuspend">
      <MemberSignature Language="C#" Value="public const string ParameterKeySuspend;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeySuspend" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeySuspend" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeySuspend : string" Usage="Android.Media.MediaCodec.ParameterKeySuspend" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_SUSPEND")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_SUSPEND")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Temporarily suspend/resume encoding of input data.</summary>
        <remarks>
          <para>Temporarily suspend/resume encoding of input data. While suspended
            input data is effectively discarded instead of being fed into the
            encoder. This parameter really only makes sense to use with an encoder
            in "surface-input" mode, as the client code has no control over the
            input-side of the encoder in that case.
            The value is an Integer object containing the value 1 to suspend
            or the value 0 to resume.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_SUSPEND" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_SUSPEND</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeySuspendTime">
      <MemberSignature Language="C#" Value="public const string ParameterKeySuspendTime;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeySuspendTime" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeySuspendTime" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeySuspendTime : string" Usage="Android.Media.MediaCodec.ParameterKeySuspendTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_SUSPEND_TIME", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_SUSPEND_TIME", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When <c>#PARAMETER_KEY_SUSPEND</c> is present, the client can also
            optionally use this key to specify the timestamp (in micro-second)
            at which the suspend/resume operation takes effect.</summary>
        <remarks>
          <para>When <c>#PARAMETER_KEY_SUSPEND</c> is present, the client can also
            optionally use this key to specify the timestamp (in micro-second)
            at which the suspend/resume operation takes effect.
            
            Note that the specified timestamp must be greater than or equal to the
            timestamp of any previously queued suspend/resume operations.
            
            The value is a long int, indicating the timestamp to suspend/resume.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_SUSPEND_TIME" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_SUSPEND_TIME</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyTunnelPeek">
      <MemberSignature Language="C#" Value="public const string ParameterKeyTunnelPeek;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyTunnelPeek" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyTunnelPeek" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyTunnelPeek : string" Usage="Android.Media.MediaCodec.ParameterKeyTunnelPeek" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_TUNNEL_PEEK", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_TUNNEL_PEEK", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Control video peek of the first frame when a codec is configured for tunnel mode with
            <c>MediaFormat#KEY_AUDIO_SESSION_ID</c> while the <c>AudioTrack</c> is paused.</summary>
        <remarks>
          <para>Control video peek of the first frame when a codec is configured for tunnel mode with
            <c>MediaFormat#KEY_AUDIO_SESSION_ID</c> while the <c>AudioTrack</c> is paused.</para>
          <para>When disabled (1) after a <c>#flush</c> or <c>#start</c>, (2) while the corresponding
            <c>AudioTrack</c> is paused and (3) before any buffers are queued, the first frame is not to
            be rendered until either this parameter is enabled or the corresponding <c>AudioTrack</c>
            has begun playback. Once the frame is decoded and ready to be rendered,
            <c>OnFirstTunnelFrameReadyListener#onFirstTunnelFrameReady</c> is called but the frame is
            not rendered. The surface continues to show the previously-rendered content, or black if the
            surface is new. A subsequent call to <c>AudioTrack#play</c> renders this frame and triggers
            a callback to <c>OnFrameRenderedListener#onFrameRendered</c>, and video playback begins.</para>
          <para>&lt;b&gt;Note&lt;/b&gt;: To clear any previously rendered content and show black, configure the
            MediaCodec with <c>KEY_PUSH_BLANK_BUFFERS_ON_STOP(1)</c>, and call <c>#stop</c> before
            pushing new video frames to the codec.</para>
          <para>When enabled (1) after a <c>#flush</c> or <c>#start</c> and (2) while the corresponding
            <c>AudioTrack</c> is paused, the first frame is rendered as soon as it is decoded, or
            immediately, if it has already been decoded. If not already decoded, when the frame is
            decoded and ready to be rendered,
            <c>OnFirstTunnelFrameReadyListener#onFirstTunnelFrameReady</c> is called. The frame is then
            immediately rendered and <c>OnFrameRenderedListener#onFrameRendered</c> is subsequently
            called.</para>
          <para>The value is an Integer object containing the value 1 to enable or the value 0 to disable.</para>
          <para>The default for this parameter is &lt;b&gt;enabled&lt;/b&gt;. Once a frame has been rendered, changing
            this parameter has no effect until a subsequent <c>#flush</c> or
            <c>#stop</c>/<c>#start</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_TUNNEL_PEEK" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_TUNNEL_PEEK</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyVideoBitrate">
      <MemberSignature Language="C#" Value="public const string ParameterKeyVideoBitrate;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyVideoBitrate" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.ParameterKeyVideoBitrate" />
      <MemberSignature Language="F#" Value="val mutable ParameterKeyVideoBitrate : string" Usage="Android.Media.MediaCodec.ParameterKeyVideoBitrate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PARAMETER_KEY_VIDEO_BITRATE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PARAMETER_KEY_VIDEO_BITRATE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Change a video encoder's target bitrate on the fly.</summary>
        <remarks>
          <para>Change a video encoder's target bitrate on the fly. The value is an
            Integer object containing the new bitrate in bps.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#PARAMETER_KEY_VIDEO_BITRATE" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.PARAMETER_KEY_VIDEO_BITRATE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueInputBuffer (int index, int offset, int size, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueInputBuffer(int32 index, int32 offset, int32 size, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32,System.Int32,System.Int32,System.Int64,Android.Media.MediaCodecBufferFlags)" />
      <MemberSignature Language="F#" Value="member this.QueueInputBuffer : int * int * int * int64 * Android.Media.MediaCodecBufferFlags -&gt; unit" Usage="mediaCodec.QueueInputBuffer (index, offset, size, presentationTimeUs, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("queueInputBuffer", "(IIIJI)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("queueInputBuffer", "(IIIJI)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
                         in a call to <c>#dequeueInputBuffer</c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="size">The number of bytes of valid input data.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                                      buffer. This is normally the media time at which this
                                      buffer should be presented (rendered). When using an output
                                      surface, this will be propagated as the <c>SurfaceTexture#getTimestamp timestamp</c> for the frame (after
                                      conversion to nanoseconds).</param>
        <param name="flags">A bitmask of flags
                         <c>#BUFFER_FLAG_CODEC_CONFIG</c> and <c>#BUFFER_FLAG_END_OF_STREAM</c>.
                         While not prohibited, most codecs do not use the
                         <c>#BUFFER_FLAG_KEY_FRAME</c> flag for input buffers.</param>
        <summary>After filling a range of the input buffer at the specified index
            submit it to the component.</summary>
        <remarks>
          <para>After filling a range of the input buffer at the specified index
            submit it to the component. Once an input buffer is queued to
            the codec, it MUST NOT be used until it is later retrieved by
            <c>#getInputBuffer</c> in response to a <c>#dequeueInputBuffer</c>
            return value or a <c>Callback#onInputBufferAvailable</c>
            callback.</para>
          <para>Many decoders require the actual compressed data stream to be
            preceded by "codec specific data", i.e. setup data used to initialize
            the codec such as PPS/SPS in the case of AVC video or code tables
            in the case of vorbis audio.
            The class <c>android.media.MediaExtractor</c> provides codec
            specific data as part of
            the returned track format in entries named "csd-0", "csd-1" ...</para>
          <para>These buffers can be submitted directly after <c>#start</c> or
            <c>#flush</c> by specifying the flag <c>#BUFFER_FLAG_CODEC_CONFIG</c>.  However, if you configure the
            codec with a <c>MediaFormat</c> containing these keys, they
            will be automatically submitted by MediaCodec directly after
            start.  Therefore, the use of <c>#BUFFER_FLAG_CODEC_CONFIG</c> flag is discouraged and is
            recommended only for advanced users.</para>
          <para>To indicate that this is the final piece of input data (or rather that
            no more input data follows unless the decoder is subsequently flushed)
            specify the flag <c>#BUFFER_FLAG_END_OF_STREAM</c>.
            &lt;p class=note&gt;
            &lt;strong&gt;Note:&lt;/strong&gt; Prior to <c>android.os.Build.VERSION_CODES#M</c>,
            <c>presentationTimeUs</c> was not propagated to the frame timestamp of (rendered)
            Surface output buffers, and the resulting frame timestamp was undefined.
            Use <c>#releaseOutputBuffer(int, long)</c> to ensure a specific frame timestamp is set.
            Similarly, since frame timestamps can be used by the destination surface for rendering
            synchronization, &lt;strong&gt;care must be taken to normalize presentationTimeUs so as to not be
            mistaken for a system time. (See #releaseOutputBuffer(int, long)
            SurfaceView specifics).&lt;/strong&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#queueInputBuffer(int,%20int,%20int,%20long,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.queueInputBuffer(int, int, int, long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.</exception>
        <exception cref="T:Android.Media.MediaCodec.CryptoException">if a crypto object has been specified in
         <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Android Media MediaCodec Configure(Android Media MediaFormat,Android Views Surface,Android Views Surface,Android Views Surface)';scope=Xamarin" title="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat,Android.Views.Surface,Android.Views.Surface,Android.Views.Surface)">M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat,Android.Views.Surface,Android.Views.Surface,Android.Views.Surface)</a></format></exception>
      </Docs>
    </Member>
    <Member MemberName="QueueSecureInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueSecureInputBuffer (int index, int offset, Android.Media.MediaCodec.CryptoInfo info, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSecureInputBuffer(int32 index, int32 offset, class Android.Media.MediaCodec/CryptoInfo info, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.QueueSecureInputBuffer(System.Int32,System.Int32,Android.Media.MediaCodec.CryptoInfo,System.Int64,Android.Media.MediaCodecBufferFlags)" />
      <MemberSignature Language="F#" Value="member this.QueueSecureInputBuffer : int * int * Android.Media.MediaCodec.CryptoInfo * int64 * Android.Media.MediaCodecBufferFlags -&gt; unit" Usage="mediaCodec.QueueSecureInputBuffer (index, offset, info, presentationTimeUs, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("queueSecureInputBuffer", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("queueSecureInputBuffer", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="info" Type="Android.Media.MediaCodec+CryptoInfo" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
                         in a call to <c>#dequeueInputBuffer</c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="info">Metadata required to facilitate decryption, the object can be
                        reused immediately after this call returns.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                                      buffer. This is normally the media time at which this
                                      buffer should be presented (rendered).</param>
        <param name="flags">A bitmask of flags
                         <c>#BUFFER_FLAG_CODEC_CONFIG</c> and <c>#BUFFER_FLAG_END_OF_STREAM</c>.
                         While not prohibited, most codecs do not use the
                         <c>#BUFFER_FLAG_KEY_FRAME</c> flag for input buffers.</param>
        <summary>Similar to <c>#queueInputBuffer queueInputBuffer</c> but submits a buffer that is
            potentially encrypted.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#queueSecureInputBuffer(int,%20int,%20android.media.CryptoInfo,%20long,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.queueSecureInputBuffer(int, int, android.media.CryptoInfo, long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.</exception>
        <exception cref="T:Android.Media.MediaCodec.CryptoException">if an error occurs while attempting to decrypt the buffer.
              An error code associated with the exception helps identify the
              reason for the failure.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Release" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; unit" Usage="mediaCodec.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("release", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("release", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Free up resources used by the codec instance.</summary>
        <remarks>
          <para>Free up resources used by the codec instance.</para>
          <para>Make sure you call this when you're done to free up any opened
            component instance instead of relying on the garbage collector
            to do this for you at some point in the future.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#release()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.release()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, bool render);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, bool render) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.ReleaseOutputBuffer : int * bool -&gt; unit" Usage="mediaCodec.ReleaseOutputBuffer (index, render)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseOutputBuffer", "(IZ)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseOutputBuffer", "(IZ)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="render" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
                         from a call to <c>#dequeueOutputBuffer</c>.</param>
        <param name="render">If a valid surface was specified when configuring the codec,
                          passing true renders this output buffer to the surface.</param>
        <summary>If you are done with a buffer, use this call to return the buffer to the codec
            or to render it on the output surface.</summary>
        <remarks>
          <para>If you are done with a buffer, use this call to return the buffer to the codec
            or to render it on the output surface. If you configured the codec with an
            output surface, setting <c>render</c> to <c>true</c> will first send the buffer
            to that output surface. The surface will release the buffer back to the codec once
            it is no longer used/displayed.
            
            Once an output buffer is released to the codec, it MUST NOT
            be used until it is later retrieved by <c>#getOutputBuffer</c> in response
            to a <c>#dequeueOutputBuffer</c> return value or a
            <c>Callback#onOutputBufferAvailable</c> callback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#releaseOutputBuffer(int,%20boolean)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.releaseOutputBuffer(int, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, long renderTimestampNs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, int64 renderTimestampNs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.ReleaseOutputBuffer : int * int64 -&gt; unit" Usage="mediaCodec.ReleaseOutputBuffer (index, renderTimestampNs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseOutputBuffer", "(IJ)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseOutputBuffer", "(IJ)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="renderTimestampNs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
                         from a call to <c>#dequeueOutputBuffer</c>.</param>
        <param name="renderTimestampNs">The timestamp to associate with this buffer when
                         it is sent to the Surface.</param>
        <summary>If you are done with a buffer, use this call to update its surface timestamp
            and return it to the codec to render it on the output surface.</summary>
        <remarks>
          <para>If you are done with a buffer, use this call to update its surface timestamp
            and return it to the codec to render it on the output surface. If you
            have not specified an output surface when configuring this video codec,
            this call will simply return the buffer to the codec.</para>
          <para>The timestamp may have special meaning depending on the destination surface.
            
            &lt;table&gt;
            &lt;tr&gt;&lt;th&gt;SurfaceView specifics&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;
            If you render your buffer on a <c>android.view.SurfaceView</c>,
            you can use the timestamp to render the buffer at a specific time (at the
            VSYNC at or after the buffer timestamp).  For this to work, the timestamp
            needs to be <i>reasonably close</i> to the current <c>System#nanoTime</c>.
            Currently, this is set as within one (1) second. A few notes:
            
            &lt;ul&gt;
            &lt;li&gt;the buffer will not be returned to the codec until the timestamp
            has passed and the buffer is no longer used by the <c>android.view.Surface</c>.
            &lt;li&gt;buffers are processed sequentially, so you may block subsequent buffers to
            be displayed on the <c>android.view.Surface</c>.  This is important if you
            want to react to user action, e.g. stop the video or seek.
            &lt;li&gt;if multiple buffers are sent to the <c>android.view.Surface</c> to be
            rendered at the same VSYNC, the last one will be shown, and the other ones
            will be dropped.
            &lt;li&gt;if the timestamp is &lt;em&gt;not&lt;/em&gt; "reasonably close" to the current system
            time, the <c>android.view.Surface</c> will ignore the timestamp, and
            display the buffer at the earliest feasible time.  In this mode it will not
            drop frames.
            &lt;li&gt;for best performance and quality, call this method when you are about
            two VSYNCs' time before the desired render time.  For 60Hz displays, this is
            about 33 msec.
            &lt;/ul&gt;
            &lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;
            
            Once an output buffer is released to the codec, it MUST NOT
            be used until it is later retrieved by <c>#getOutputBuffer</c> in response
            to a <c>#dequeueOutputBuffer</c> return value or a
            <c>Callback#onOutputBufferAvailable</c> callback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#releaseOutputBuffer(int,%20long)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.releaseOutputBuffer(int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Reset" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="mediaCodec.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the codec to its initial (Uninitialized) state.</summary>
        <remarks>
          <para>Returns the codec to its initial (Uninitialized) state.
            
            Call this if an <c>MediaCodec.CodecException#isRecoverable unrecoverable</c>
            error has occured to reset the codec to its initial state after creation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#reset()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Android.Media.MediaCodec.CodecException">if an unrecoverable error has occured and the codec
 could not be reset.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAudioPresentation">
      <MemberSignature Language="C#" Value="public void SetAudioPresentation (Android.Media.AudioPresentation presentation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAudioPresentation(class Android.Media.AudioPresentation presentation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetAudioPresentation(Android.Media.AudioPresentation)" />
      <MemberSignature Language="F#" Value="member this.SetAudioPresentation : Android.Media.AudioPresentation -&gt; unit" Usage="mediaCodec.SetAudioPresentation presentation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAudioPresentation", "(Landroid/media/AudioPresentation;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAudioPresentation", "(Landroid/media/AudioPresentation;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentation" Type="Android.Media.AudioPresentation" />
      </Parameters>
      <Docs>
        <param name="presentation">see <c>AudioPresentation</c>. In particular, id should be set.</param>
        <summary>Sets the audio presentation.</summary>
        <remarks>
          <para>Sets the audio presentation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setAudioPresentation(android.media.AudioPresentation)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setAudioPresentation(android.media.AudioPresentation)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.MediaCodec.Callback? cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.MediaCodec/Callback cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetCallback(Android.Media.MediaCodec.Callback)" />
      <MemberSignature Language="F#" Value="member this.SetCallback : Android.Media.MediaCodec.Callback -&gt; unit" Usage="mediaCodec.SetCallback cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Media.MediaCodec+Callback" />
      </Parameters>
      <Docs>
        <param name="cb">The callback that will run.  Use <c>null</c> to clear a previously
                      set callback (before <c>#configure configure</c> is called and run
                      in synchronous mode).</param>
        <summary>Sets an asynchronous callback for actionable MediaCodec events on the default
            looper.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setCallback(android.media.Callback)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setCallback(android.media.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Media.MediaCodec.SetCallback(.Callback, Android.OS.Handler)" />
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.MediaCodec.Callback? cb, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.MediaCodec/Callback cb, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetCallback(Android.Media.MediaCodec.Callback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.SetCallback : Android.Media.MediaCodec.Callback * Android.OS.Handler -&gt; unit" Usage="mediaCodec.SetCallback (cb, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;Landroid/os/Handler;)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;Landroid/os/Handler;)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Media.MediaCodec+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="cb">The callback that will run.  Use <c>null</c> to clear a previously
                      set callback (before <c>#configure configure</c> is called and run
                      in synchronous mode).</param>
        <param name="handler">To be added.</param>
        <summary>Sets an asynchronous callback for actionable MediaCodec events on the default
            looper.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setCallback(android.media.Callback)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setCallback(android.media.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInputSurface">
      <MemberSignature Language="C#" Value="public void SetInputSurface (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputSurface(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetInputSurface(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="member this.SetInputSurface : Android.Views.Surface -&gt; unit" Usage="mediaCodec.SetInputSurface surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInputSurface", "(Landroid/view/Surface;)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInputSurface", "(Landroid/view/Surface;)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">a persistent input surface created by <c>#createPersistentInputSurface</c></param>
        <summary>Configures the codec (e.</summary>
        <remarks>
          <para>Configures the codec (e.g. encoder) to use a persistent input surface in place of input
            buffers.  This may only be called after <c>#configure</c> and before <c>#start</c>, in
            lieu of <c>#createInputSurface</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setInputSurface(android.view.Surface)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setInputSurface(android.view.Surface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnFirstTunnelFrameReadyListener">
      <MemberSignature Language="C#" Value="public void SetOnFirstTunnelFrameReadyListener (Android.OS.Handler? handler, Android.Media.MediaCodec.IOnFirstTunnelFrameReadyListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOnFirstTunnelFrameReadyListener(class Android.OS.Handler handler, class Android.Media.MediaCodec/IOnFirstTunnelFrameReadyListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetOnFirstTunnelFrameReadyListener(Android.OS.Handler,Android.Media.MediaCodec.IOnFirstTunnelFrameReadyListener)" />
      <MemberSignature Language="F#" Value="member this.SetOnFirstTunnelFrameReadyListener : Android.OS.Handler * Android.Media.MediaCodec.IOnFirstTunnelFrameReadyListener -&gt; unit" Usage="mediaCodec.SetOnFirstTunnelFrameReadyListener (handler, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnFirstTunnelFrameReadyListener", "(Landroid/os/Handler;Landroid/media/MediaCodec$OnFirstTunnelFrameReadyListener;)V", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnFirstTunnelFrameReadyListener", "(Landroid/os/Handler;Landroid/media/MediaCodec$OnFirstTunnelFrameReadyListener;)V", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="listener" Type="Android.Media.MediaCodec+IOnFirstTunnelFrameReadyListener" />
      </Parameters>
      <Docs>
        <param name="handler">the callback will be run on the handler's thread. If <c>null</c>, the callback will be run on the default thread, which is the looper from
            which the codec was created, or a new thread if there was none.</param>
        <param name="listener">the callback that will be run. If <c>null</c>, clears any registered
            listener.</param>
        <summary>Registers a callback to be invoked when the first output frame has been decoded
            and is ready to be rendered on a codec configured for tunnel mode with <c>KEY_AUDIO_SESSION_ID</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setOnFirstTunnelFrameReadyListener(android.os.Handler,%20android.media.OnFirstTunnelFrameReadyListener)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setOnFirstTunnelFrameReadyListener(android.os.Handler, android.media.OnFirstTunnelFrameReadyListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnFrameRenderedListener">
      <MemberSignature Language="C#" Value="public void SetOnFrameRenderedListener (Android.Media.MediaCodec.IOnFrameRenderedListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOnFrameRenderedListener(class Android.Media.MediaCodec/IOnFrameRenderedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetOnFrameRenderedListener(Android.Media.MediaCodec.IOnFrameRenderedListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.SetOnFrameRenderedListener : Android.Media.MediaCodec.IOnFrameRenderedListener * Android.OS.Handler -&gt; unit" Usage="mediaCodec.SetOnFrameRenderedListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnFrameRenderedListener", "(Landroid/media/MediaCodec$OnFrameRenderedListener;Landroid/os/Handler;)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnFrameRenderedListener", "(Landroid/media/MediaCodec$OnFrameRenderedListener;Landroid/os/Handler;)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaCodec+IOnFrameRenderedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <param name="handler">the callback will be run on the handler's thread. If <c>null</c>,
                      the callback will be run on the default thread, which is the looper
                      from which the codec was created, or a new thread if there was none.</param>
        <summary>Registers a callback to be invoked when an output frame is rendered on the output surface.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setOnFrameRenderedListener(android.media.OnFrameRenderedListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setOnFrameRenderedListener(android.media.OnFrameRenderedListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputSurface">
      <MemberSignature Language="C#" Value="public void SetOutputSurface (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputSurface(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetOutputSurface(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="member this.SetOutputSurface : Android.Views.Surface -&gt; unit" Usage="mediaCodec.SetOutputSurface surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOutputSurface", "(Landroid/view/Surface;)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOutputSurface", "(Landroid/view/Surface;)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">the output surface to use. It must not be <c>null</c>.</param>
        <summary>Dynamically sets the output surface of a codec.</summary>
        <remarks>
          <para>Dynamically sets the output surface of a codec.</para>
          <para>This can only be used if the codec was configured with an output surface.  The
             new output surface should have a compatible usage type to the original output surface.
             E.g. codecs may not support switching from a SurfaceTexture (GPU readable) output
             to ImageReader (software readable) output.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setOutputSurface(android.view.Surface)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setOutputSurface(android.view.Surface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (Android.OS.Bundle? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class Android.OS.Bundle params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetParameters(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="member this.SetParameters : Android.OS.Bundle -&gt; unit" Usage="mediaCodec.SetParameters params" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setParameters", "(Landroid/os/Bundle;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setParameters", "(Landroid/os/Bundle;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="params">The bundle of parameters to set.</param>
        <summary>Communicate additional parameter changes to the component instance.</summary>
        <remarks>
          <para>Communicate additional parameter changes to the component instance.
            &lt;b&gt;Note:&lt;/b&gt; Some of these parameter changes may silently fail to apply.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setParameters(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setParameters(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SetVideoScalingMode(Android.Media.VideoScalingMode)" />
      <MemberSignature Language="F#" Value="member this.SetVideoScalingMode : Android.Media.VideoScalingMode -&gt; unit" Usage="mediaCodec.SetVideoScalingMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setVideoScalingMode", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setVideoScalingMode", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>If a surface has been specified in a previous call to <c>#configure</c>
            specifies the scaling mode to use.</summary>
        <remarks>
          <para>If a surface has been specified in a previous call to <c>#configure</c>
            specifies the scaling mode to use. The default is "scale to fit".
            &lt;p class=note&gt;
            The scaling mode may be reset to the &lt;strong&gt;default&lt;/strong&gt; each time an
            <c>#INFO_OUTPUT_BUFFERS_CHANGED</c> event is received from the codec; therefore, the client
            must call this method after every buffer change event (and before the first output buffer is
            released for rendering) to ensure consistent scaling mode.
            &lt;p class=note&gt;
            Since the <c>#INFO_OUTPUT_BUFFERS_CHANGED</c> event is deprecated, this can also be done
            after each <c>#INFO_OUTPUT_FORMAT_CHANGED</c> event.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#setVideoScalingMode(int)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.setVideoScalingMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if mode is not recognized.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SignalEndOfInputStream">
      <MemberSignature Language="C#" Value="public void SignalEndOfInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalEndOfInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SignalEndOfInputStream" />
      <MemberSignature Language="F#" Value="member this.SignalEndOfInputStream : unit -&gt; unit" Usage="mediaCodec.SignalEndOfInputStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signalEndOfInputStream", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("signalEndOfInputStream", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signals end-of-stream on input.</summary>
        <remarks>
          <para>Signals end-of-stream on input.  Equivalent to submitting an empty buffer with
            <c>#BUFFER_FLAG_END_OF_STREAM</c> set.  This may only be used with
            encoders receiving input from a Surface created by <c>#createInputSurface</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#signalEndOfInputStream()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.signalEndOfInputStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Start" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="mediaCodec.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("start", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("start", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>After successfully configuring the component, call <c>start</c>.</summary>
        <remarks>
          <para>After successfully configuring the component, call <c>start</c>.</para>
          <para>Call <c>start</c> also if the codec is configured in asynchronous mode,
            and it has just been flushed, to resume requesting input buffers.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#start()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.start()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state
         or just after <see cref="M:Android.Media.MediaCodec.Flush" /> for a codec that is configured
         in asynchronous mode.</exception>
        <exception cref="T:Android.Media.MediaCodec.CodecException">upon codec error. Note that some codec errors
 for start may be attributed to future method calls.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.Stop" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="mediaCodec.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stop", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stop", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish the decode/encode session, note that the codec instance
            remains active and ready to be <c>#start</c>ed again.</summary>
        <remarks>
          <para>Finish the decode/encode session, note that the codec instance
            remains active and ready to be <c>#start</c>ed again.
            To ensure that it is available to other client call <c>#release</c>
            and don't just rely on garbage collection to eventually do this for you.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#stop()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.stop()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToVendorParameters">
      <MemberSignature Language="C#" Value="public void SubscribeToVendorParameters (System.Collections.Generic.IList&lt;string&gt; names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SubscribeToVendorParameters(class System.Collections.Generic.IList`1&lt;string&gt; names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.SubscribeToVendorParameters(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="F#" Value="member this.SubscribeToVendorParameters : System.Collections.Generic.IList&lt;string&gt; -&gt; unit" Usage="mediaCodec.SubscribeToVendorParameters names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("subscribeToVendorParameters", "(Ljava/util/List;)V", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("subscribeToVendorParameters", "(Ljava/util/List;)V", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="names">names of the vendor parameters to subscribe. This may be an empty list,
                         and in that case this method will not change the list of subscribed parameters.</param>
        <summary>Subscribe to vendor parameters, so that these parameters will be present in
            <c>#getOutputFormat</c> and changes to these parameters generate
            output format change event.</summary>
        <remarks>
          <para>Subscribe to vendor parameters, so that these parameters will be present in
            <c>#getOutputFormat</c> and changes to these parameters generate
            output format change event.</para>
          <para>Unrecognized parameter names or standard (non-vendor) parameter names will be ignored.
            <c>#reset</c> also resets the list of subscribed parameters.
            If a parameter in <c>names</c> is already subscribed, it will remain subscribed.</para>
          <para>This method can be called in any codec state except for released state. When called in
            running state with newly subscribed parameters, it takes effect no later than the
            processing of the subsequently queued buffer. For the new parameters, the codec will generate
            output format change event.</para>
          <para>Note that any vendor parameters set in a <c>#configure</c> or
            <c>#setParameters</c> call are automatically subscribed.</para>
          <para>See also <c>#INFO_OUTPUT_FORMAT_CHANGED</c> or <c>Callback#onOutputFormatChanged</c>
            for output format change events.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#subscribeToVendorParameters(java.util.List%3Cjava.lang.String%3E)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.subscribeToVendorParameters(java.util.List&lt;java.lang.String&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedVendorParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; SupportedVendorParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; SupportedVendorParameters" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.SupportedVendorParameters" />
      <MemberSignature Language="F#" Value="member this.SupportedVendorParameters : System.Collections.Generic.IList&lt;string&gt;" Usage="Android.Media.MediaCodec.SupportedVendorParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSupportedVendorParameters", "()Ljava/util/List;", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSupportedVendorParameters", "()Ljava/util/List;", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a list of vendor parameter names.</summary>
        <value>a list containing supported vendor parameters; an empty
                    list if no vendor parameters are supported. The order of the
                    parameters is arbitrary.</value>
        <remarks>
          <para>Returns a list of vendor parameter names.</para>
          <para>This method can be called in any codec state except for released state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#getSupportedVendorParameters()" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.getSupportedVendorParameters()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.MediaCodec.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaCodec.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.MediaCodec.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsubscribeFromVendorParameters">
      <MemberSignature Language="C#" Value="public void UnsubscribeFromVendorParameters (System.Collections.Generic.IList&lt;string&gt; names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnsubscribeFromVendorParameters(class System.Collections.Generic.IList`1&lt;string&gt; names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaCodec.UnsubscribeFromVendorParameters(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="F#" Value="member this.UnsubscribeFromVendorParameters : System.Collections.Generic.IList&lt;string&gt; -&gt; unit" Usage="mediaCodec.UnsubscribeFromVendorParameters names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unsubscribeFromVendorParameters", "(Ljava/util/List;)V", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unsubscribeFromVendorParameters", "(Ljava/util/List;)V", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="names">names of the vendor parameters to unsubscribe. This may be an empty list,
                         and in that case this method will not change the list of subscribed parameters.</param>
        <summary>Unsubscribe from vendor parameters, so that these parameters will not be present in
            <c>#getOutputFormat</c> and changes to these parameters no longer generate
            output format change event.</summary>
        <remarks>
          <para>Unsubscribe from vendor parameters, so that these parameters will not be present in
            <c>#getOutputFormat</c> and changes to these parameters no longer generate
            output format change event.</para>
          <para>Unrecognized parameter names, standard (non-vendor) parameter names will be ignored.
            <c>#reset</c> also resets the list of subscribed parameters.
            If a parameter in <c>names</c> is already unsubscribed, it will remain unsubscribed.</para>
          <para>This method can be called in any codec state except for released state. When called in
            running state with newly unsubscribed parameters, it takes effect no later than the
            processing of the subsequently queued buffer. For the removed parameters, the codec will
            generate output format change event.</para>
          <para>Note that any vendor parameters set in a <c>#configure</c> or
            <c>#setParameters</c> call are automatically subscribed, and with this method
            they can be unsubscribed.</para>
          <para>See also <c>#INFO_OUTPUT_FORMAT_CHANGED</c> or <c>Callback#onOutputFormatChanged</c>
            for output format change events.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#unsubscribeFromVendorParameters(java.util.List%3Cjava.lang.String%3E)" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.unsubscribeFromVendorParameters(java.util.List&lt;java.lang.String&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFit = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.VideoScalingModeScaleToFit" />
      <MemberSignature Language="F#" Value="val mutable VideoScalingModeScaleToFit : Android.Media.VideoScalingMode" Usage="Android.Media.MediaCodec.VideoScalingModeScaleToFit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The content is scaled to the surface dimensions</summary>
        <remarks>
          <para>The content is scaled to the surface dimensions</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#VIDEO_SCALING_MODE_SCALE_TO_FIT" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaCodec.VideoScalingModeScaleToFitWithCropping" />
      <MemberSignature Language="F#" Value="val mutable VideoScalingModeScaleToFitWithCropping : Android.Media.VideoScalingMode" Usage="Android.Media.MediaCodec.VideoScalingModeScaleToFitWithCropping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>The content is scaled, maintaining its aspect ratio, the whole
            surface area is used, content may be cropped.</summary>
        <remarks>
          <para>The content is scaled, maintaining its aspect ratio, the whole
            surface area is used, content may be cropped.
            &lt;p class=note&gt;
            This mode is only suitable for content with 1:1 pixel aspect ratio as you cannot
            configure the pixel aspect ratio for a <c>Surface</c>.
            &lt;p class=note&gt;
            As of <c>android.os.Build.VERSION_CODES#N</c> release, this mode may not work if
            the video is MediaFormat#KEY_ROTATION rotated by 90 or 270 degrees.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaCodec#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING" title="Reference documentation">Java documentation for <code>android.media.MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
