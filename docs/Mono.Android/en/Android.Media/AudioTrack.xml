<Type Name="AudioTrack" FullName="Android.Media.AudioTrack">
  <TypeSignature Language="C#" Value="public class AudioTrack : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AudioTrack extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/AudioTrack", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The AudioTrack class manages and plays a single audio resource for Java applications.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The AudioTrack class manages and plays a single audio resource for Java applications.
 It allows streaming of PCM audio buffers to the audio sink for playback. This is
 achieved by "pushing" the data to the AudioTrack object using one of the
  <c><see cref="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.Media.AudioTrack.Write(System.Int16[],System.Int32,System.Int32)" /></c>,
  and <c><see cref="M:Android.Media.AudioTrack.Write(System.Single[],System.Int32,System.Int32,System.Int32)" /></c> methods.

 </para>
      <para tool="javadoc-to-mdoc">An AudioTrack instance can operate under two modes: static or streaming.<format type="text/html"><br /></format>
 In Streaming mode, the application writes a continuous stream of data to the AudioTrack, using
 one of the <c>write()</c> methods. These are blocking and return when the data has been
 transferred from the Java layer to the native layer and queued for playback. The streaming
 mode is most useful when playing blocks of audio data that for instance are:

 <list type="bullet"><item><term>too big to fit in memory because of the duration of the sound to play,</term></item><item><term>too big to fit in memory because of the characteristics of the audio data
         (high sampling rate, bits per sample ...)</term></item><item><term>received or generated while previously queued audio is playing.</term></item></list>

 The static mode should be chosen when dealing with short sounds that fit in memory and
 that need to be played with the smallest latency possible. The static mode will
 therefore be preferred for UI and game sounds that are played often, and with the
 smallest overhead possible.

 </para>
      <para tool="javadoc-to-mdoc">Upon creation, an AudioTrack object initializes its associated audio buffer.
 The size of this buffer, specified during the construction, determines how long an AudioTrack
 can play before running out of data.<format type="text/html"><br /></format>
 For an AudioTrack using the static mode, this size is the maximum size of the sound that can
 be played from it.<format type="text/html"><br /></format>
 For the streaming mode, data will be written to the audio sink in chunks of
 sizes less than or equal to the total buffer size.

 AudioTrack is not final and thus permits subclasses, but such use is not recommended.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/AudioTrack.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AudioTrack (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.AudioAttributes attributes, Android.Media.AudioFormat format, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Media.AudioAttributes attributes, class Android.Media.AudioFormat format, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;III)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="format" Type="Android.Media.AudioFormat" />
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <param name="format">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor with <c><see cref="T:Android.Media.AudioAttributes" /></c> and <c><see cref="T:Android.Media.AudioFormat" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Class constructor with <c><see cref="T:Android.Media.AudioAttributes" /></c> and <c><see cref="T:Android.Media.AudioFormat" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(android.media.AudioAttributes, android.media.AudioFormat, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelConfiguration channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelConfiguration channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ChannelConfiguration is obsolete. Please use another overload with ChannelOut instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelConfiguration">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>Class constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Class constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int, int, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IIIIII)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>Class constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Class constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int, int, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelConfiguration channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelConfiguration channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ChannelConfiguration is obsolete. Please use another overload with ChannelOut instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelConfiguration">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor with audio session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Class constructor with audio session. Use this constructor when the AudioTrack must be
 attached to a particular audio session. The primary use of the audio session ID is to
 associate audio effects to a particular instance of AudioTrack: if an audio session ID
 is provided when creating an AudioEffect, this effect will be applied only to audio tracks
 and media players in the same session and not to the output mix.
 When an AudioTrack is created without specifying a session, it will create its own session
 which can be retrieved by calling the <c><see cref="P:Android.Media.AudioTrack.AudioSessionId" /></c> method.
 If a non-zero session ID is provided, this AudioTrack will share effects attached to this
 session
 with all other media players or audio tracks in the same session, otherwise a new session
 will be created for this track if none is supplied.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int, int, int, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IIIIIII)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor with audio session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Class constructor with audio session. Use this constructor when the AudioTrack must be
 attached to a particular audio session. The primary use of the audio session ID is to
 associate audio effects to a particular instance of AudioTrack: if an audio session ID
 is provided when creating an AudioEffect, this effect will be applied only to audio tracks
 and media players in the same session and not to the output mix.
 When an AudioTrack is created without specifying a session, it will create its own session
 which can be retrieved by calling the <c><see cref="P:Android.Media.AudioTrack.AudioSessionId" /></c> method.
 If a non-zero session ID is provided, this AudioTrack will share effects attached to this
 session
 with all other media players or audio tracks in the same session, otherwise a new session
 will be created for this track if none is supplied.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int, int, int, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AttachAuxEffect">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus AttachAuxEffect (int effectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus AttachAuxEffect(int32 effectId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachAuxEffect", "(I)I", "GetAttachAuxEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="effectId">system wide unique id of the effect to attach</param>
        <summary>Attaches an auxiliary effect to the audio track.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attaches an auxiliary effect to the audio track. A typical auxiliary
 effect is a reverberation effect which can be applied on any sound source
 that directs a certain amount of its energy to this effect. This amount
 is defined by setAuxEffectSendLevel().
 .
 </para>
          <para tool="javadoc-to-mdoc">After creating an auxiliary effect (e.g.
 <c><see cref="T:Android.Media.Audiofx.EnvironmentalReverb" /></c>), retrieve its ID with
 <c><see cref="P:Android.Media.Audiofx.AudioEffect.Id" /></c> and use it when calling
 this method to attach the audio track to the effect.
 </para>
          <para tool="javadoc-to-mdoc">To detach the effect from the audio track, call this method with a
 null effect id.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#attachAuxEffect(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Android.Media.AudioTrack.SetAuxEffectSendLevel(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Encoding AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Encoding AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioFormat", "()I", "GetGetAudioFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured audio data encoding.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the configured audio data encoding. See <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_8BIT" /></c>,
 <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_16BIT" /></c>, and <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_FLOAT" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getAudioFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionId">
      <MemberSignature Language="C#" Value="public virtual int AudioSessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the audio session ID.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the audio session ID.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getAudioSessionId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ChannelConfiguration">
      <MemberSignature Language="C#" Value="public virtual Android.Media.ChannelOut ChannelConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.ChannelOut ChannelConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChannelConfiguration", "()I", "GetGetChannelConfigurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ChannelOut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured channel position mask.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the configured channel position mask.
 </para>
          <para tool="javadoc-to-mdoc"> For example, refer to <c><see cref="!:Android.Media.AudioFormat.CHANNEL_OUT_MONO" /></c>,
 <c><see cref="!:Android.Media.AudioFormat.CHANNEL_OUT_STEREO" /></c>, <c><see cref="!:Android.Media.AudioFormat.CHANNEL_OUT_5POINT1" /></c>.
 This method may return <c><see cref="F:Android.Media.AudioFormat.ChannelInvalid" /></c> if
 a channel index mask was used. Consider
 <c><see cref="P:Android.Media.AudioTrack.Format" /></c> instead, to obtain an <c><see cref="T:Android.Media.AudioFormat" /></c>,
 which contains both the channel position mask and the channel index mask.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getChannelConfiguration()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ChannelCount">
      <MemberSignature Language="C#" Value="public virtual int ChannelCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChannelCount", "()I", "GetGetChannelCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured number of channels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the configured number of channels.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getChannelCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus Error = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus Error = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Denotes a generic operation failure.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Denotes a generic operation failure.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#ERROR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ErrorBadValue">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus ErrorBadValue = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus ErrorBadValue = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_BAD_VALUE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>Denotes a failure due to the use of an invalid value.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Denotes a failure due to the use of an invalid value.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#ERROR_BAD_VALUE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ErrorInvalidOperation">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus ErrorInvalidOperation = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus ErrorInvalidOperation = (-3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_INVALID_OPERATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>Denotes a failure due to the improper use of a method.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Denotes a failure due to the improper use of a method.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#ERROR_INVALID_OPERATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "GetFlushHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flushes the audio data currently queued for playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flushes the audio data currently queued for playback. Any data that has
 been written but not yet presented will be discarded.  No-op if not stopped or paused,
 or if the track's creation mode is not <c><see cref="!:Android.Media.AudioTrack.MODE_STREAM" /></c>.
 <format type="text/html"><br /></format> Note that although data written but not yet presented is discarded, there is no
 guarantee that all of the buffer space formerly used by that data
 is available for a subsequent write.
 For example, a call to <c><see cref="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32)" /></c> with <c>sizeInBytes</c>
 less than or equal to the total buffer size
 may return a short actual transfer count.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#flush()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetMinBufferSize">
      <MemberSignature Language="C#" Value="public static int GetMinBufferSize (int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMinBufferSize(int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMinBufferSize", "(III)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sampleRateInHz">the source sample rate expressed in Hz.</param>
        <param name="channelConfig">describes the configuration of the audio channels.
   See <c><see cref="!:Android.Media.AudioFormat.CHANNEL_OUT_MONO" /></c> and
   <c><see cref="!:Android.Media.AudioFormat.CHANNEL_OUT_STEREO" /></c></param>
        <param name="audioFormat">the format in which the audio data is represented.
   See <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_16BIT" /></c> and
   <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_8BIT" /></c>,
   and <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_FLOAT" /></c>.</param>
        <summary>Returns the minimum buffer size required for the successful creation of an AudioTrack
 object to be created in the <c><see cref="!:Android.Media.AudioTrack.MODE_STREAM" /></c> mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the minimum buffer size required for the successful creation of an AudioTrack
 object to be created in the <c><see cref="!:Android.Media.AudioTrack.MODE_STREAM" /></c> mode. Note that this size doesn't
 guarantee a smooth playback under load, and higher values should be chosen according to
 the expected frequency at which the buffer will be refilled with additional data to play.
 For example, if you intend to dynamically set the source sample rate of an AudioTrack
 to a higher value than the initial source sample rate, be sure to configure the buffer size
 based on the highest planned sample rate.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getMinBufferSize(int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetNativeOutputSampleRate">
      <MemberSignature Language="C#" Value="public static int GetNativeOutputSampleRate (Android.Media.Stream streamType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNativeOutputSampleRate(valuetype Android.Media.Stream streamType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getNativeOutputSampleRate", "(I)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <summary>Returns the output sample rate in Hz for the specified stream type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the output sample rate in Hz for the specified stream type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getNativeOutputSampleRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public virtual bool GetTimestamp (Android.Media.AudioTimestamp timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetTimestamp(class Android.Media.AudioTimestamp timestamp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTimestamp", "(Landroid/media/AudioTimestamp;)Z", "GetGetTimestamp_Landroid_media_AudioTimestamp_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="Android.Media.AudioTimestamp" />
      </Parameters>
      <Docs>
        <param name="timestamp">a reference to a non-null AudioTimestamp instance allocated
        and owned by caller.</param>
        <summary>Poll for a timestamp on demand.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Poll for a timestamp on demand.
 </para>
          <para tool="javadoc-to-mdoc">
 If you need to track timestamps during initial warmup or after a routing or mode change,
 you should request a new timestamp periodically until the reported timestamps
 show that the frame position is advancing, or until it becomes clear that
 timestamps are unavailable for this route.
 </para>
          <para tool="javadoc-to-mdoc">
 After the clock is advancing at a stable rate,
 query for a new timestamp approximately once every 10 seconds to once per minute.
 Calling this method more often is inefficient.
 It is also counter-productive to call this method more often than recommended,
 because the short-term differences between successive timestamp reports are not meaningful.
 If you need a high-resolution mapping between frame position and presentation time,
 consider implementing that at application level, based on low-resolution timestamps.
 </para>
          <para tool="javadoc-to-mdoc">
 The audio data at the returned position may either already have been
 presented, or may have not yet been presented but is committed to be presented.
 It is not possible to request the time corresponding to a particular position,
 or to request the (fractional) position corresponding to a particular time.
 If you need such features, consider implementing them at application level.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getTimestamp(android.media.AudioTimestamp)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkerReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioTrack.MarkerReachedEventArgs&gt; MarkerReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioTrack/MarkerReachedEventArgs&gt; MarkerReached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioTrack+MarkerReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxVolume">
      <MemberSignature Language="C#" Value="public static float MaxVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 MaxVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxVolume", "()F", "GetGetMaxVolumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum gain value, which is greater than or equal to 1.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum gain value, which is greater than or equal to 1.0.
 Gain values greater than the maximum will be clamped to the maximum.
 </para>
          <para tool="javadoc-to-mdoc">The word "volume" in the API name is historical; this is actually a gain.
 expressed as a linear multiplier on sample values, where a maximum value of 1.0
 corresponds to a gain of 0 dB (sample values left unmodified).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getMaxVolume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="MinVolume">
      <MemberSignature Language="C#" Value="public static float MinVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 MinVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMinVolume", "()F", "GetGetMinVolumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the minimum gain value, which is the constant 0.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the minimum gain value, which is the constant 0.0.
 Gain values less than 0.0 will be clamped to 0.0.
 </para>
          <para tool="javadoc-to-mdoc">The word "volume" in the API name is historical; this is actually a linear gain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getMinVolume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="NativeFrameCount">
      <MemberSignature Language="C#" Value="protected virtual int NativeFrameCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NativeFrameCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNativeFrameCount", "()I", "GetGetNativeFrameCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the frame count of the native <c>AudioTrack</c> buffer.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the frame count of the native <c>AudioTrack</c> buffer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getNativeFrameCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="!:NoType:IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="NotificationMarkerPosition">
      <MemberSignature Language="C#" Value="public virtual int NotificationMarkerPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotificationMarkerPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNotificationMarkerPosition", "()I", "GetGetNotificationMarkerPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns marker position expressed in frames.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns marker position expressed in frames.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getNotificationMarkerPosition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()V", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses the playback of the audio data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Pauses the playback of the audio data. Data that has not been played
 back will not be discarded. Subsequent calls to <c><see cref="M:Android.Media.AudioTrack.Play" /></c> will play
 this data back. See <c><see cref="M:Android.Media.AudioTrack.Flush" /></c> to discard this data.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#pause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="PeriodicNotification">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioTrack.PeriodicNotificationEventArgs&gt; PeriodicNotification;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioTrack/PeriodicNotificationEventArgs&gt; PeriodicNotification" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioTrack+PeriodicNotificationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public virtual void Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Play() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("play", "()V", "GetPlayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts playing an AudioTrack.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts playing an AudioTrack.
 </para>
          <para tool="javadoc-to-mdoc">
 If track's creation mode is <c><see cref="!:Android.Media.AudioTrack.MODE_STATIC" /></c>, you must have called one of
 the write methods (<c><see cref="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.Media.AudioTrack.Write(System.Int16[],System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.Media.AudioTrack.Write(System.Int16[],System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.Media.AudioTrack.Write(System.Single[],System.Int32,System.Int32,System.Int32)" /></c>, or <c><see cref="M:Android.Media.AudioTrack.Write(Java.Nio.ByteBuffer,System.Int32,System.Int32)" /></c>) prior to
 play().
 </para>
          <para tool="javadoc-to-mdoc">
 If the mode is <c><see cref="!:Android.Media.AudioTrack.MODE_STREAM" /></c>, you can optionally prime the data path prior to
 calling play(), by writing up to <c>bufferSizeInBytes</c> (from constructor).
 If you don't call write() first, or if you call write() but with an insufficient amount of
 data, then the track will be in underrun state at play().  In this case,
 playback will not actually start playing until the data path is filled to a
 device-specific minimum level.  This requirement for the path to be filled
 to a minimum level is also true when resuming audio playback after calling stop().
 Similarly the buffer will need to be filled up again after
 the track underruns due to failure to call write() in a timely manner with sufficient data.
 For portability, an application should prime the data path to the maximum allowed
 by writing data until the write() method returns a short transfer count.
 This allows play() to start immediately, and reduces the chance of underrun.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#play()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if the track isn't properly initialized
</exception>
      </Docs>
    </Member>
    <Member MemberName="PlaybackHeadPosition">
      <MemberSignature Language="C#" Value="public virtual int PlaybackHeadPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PlaybackHeadPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlaybackHeadPosition", "()I", "GetGetPlaybackHeadPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the playback head position expressed in frames.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the playback head position expressed in frames.
 Though the "int" type is signed 32-bits, the value should be reinterpreted as if it is
 unsigned 32-bits.  That is, the next position after 0x7FFFFFFF is (int) 0x80000000.
 This is a continuously advancing counter.  It will wrap (overflow) periodically,
 for example approximately once every 27:03:11 hours:minutes:seconds at 44.1 kHz.
 It is reset to zero by <c><see cref="M:Android.Media.AudioTrack.Flush" /></c>, <c><see cref="M:Android.Media.AudioTrack.ReloadStaticData" /></c>, and <c><see cref="M:Android.Media.AudioTrack.Stop" /></c>.
 If the track's creation mode is <c><see cref="!:Android.Media.AudioTrack.MODE_STATIC" /></c>, the return value indicates
 the total number of frames played since reset,
 <format type="text/html"><i>not</i></format> the current offset within the buffer.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackHeadPosition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PlaybackRate">
      <MemberSignature Language="C#" Value="public virtual int PlaybackRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PlaybackRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlaybackRate", "()I", "GetGetPlaybackRateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current playback sample rate rate in Hz.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current playback sample rate rate in Hz.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackRate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PlayState">
      <MemberSignature Language="C#" Value="public virtual Android.Media.PlayState PlayState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.PlayState PlayState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlayState", "()I", "GetGetPlayStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.PlayState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the playback state of the AudioTrack instance.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the playback state of the AudioTrack instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getPlayState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PositionNotificationPeriod">
      <MemberSignature Language="C#" Value="public virtual int PositionNotificationPeriod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionNotificationPeriod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPositionNotificationPeriod", "()I", "GetGetPositionNotificationPeriodHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the notification update period expressed in frames.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the notification update period expressed in frames.
 Zero means that no position update notifications are being delivered.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getPositionNotificationPeriod()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the native AudioTrack resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases the native AudioTrack resources.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ReloadStaticData">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus ReloadStaticData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus ReloadStaticData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reloadStaticData", "()I", "GetReloadStaticDataHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the playback head position within the static buffer to zero,
 that is it rewinds to start of static buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the playback head position within the static buffer to zero,
 that is it rewinds to start of static buffer.
 The track must be stopped or paused, and
 the track's creation mode must be <c><see cref="!:Android.Media.AudioTrack.MODE_STATIC" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, also resets the value returned by
 <c><see cref="P:Android.Media.AudioTrack.PlaybackHeadPosition" /></c> to zero.
 For earlier API levels, the reset behavior is unspecified.
 </para>
          <para tool="javadoc-to-mdoc">
 Use <c><see cref="M:Android.Media.AudioTrack.SetPlaybackHeadPosition(System.Int32)" /></c> with a zero position
 if the reset of <c>getPlaybackHeadPosition()</c> is not needed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#reloadStaticData()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SampleRate">
      <MemberSignature Language="C#" Value="public virtual int SampleRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSampleRate", "()I", "GetGetSampleRateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured audio data sample rate in Hz
</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the configured audio data sample rate in Hz
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getSampleRate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetAuxEffectSendLevel">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetAuxEffectSendLevel (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetAuxEffectSendLevel(float32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxEffectSendLevel", "(F)I", "GetSetAuxEffectSendLevel_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">linear send level</param>
        <summary>Sets the send level of the audio track to the attached auxiliary effect
 <c><see cref="M:Android.Media.AudioTrack.AttachAuxEffect(System.Int32)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the send level of the audio track to the attached auxiliary effect
 <c><see cref="M:Android.Media.AudioTrack.AttachAuxEffect(System.Int32)" /></c>.  Effect levels
 are clamped to the closed interval [0.0, max] where
 max is the value of <c><see cref="P:Android.Media.AudioTrack.MaxVolume" /></c>.
 A value of 0.0 results in no effect, and a value of 1.0 is full send.
 </para>
          <para tool="javadoc-to-mdoc">By default the send level is 0.0f, so even if an effect is attached to the player
 this method must be called for the effect to be applied.
 </para>
          <para tool="javadoc-to-mdoc">Note that the passed level value is a linear scalar. UI controls should be scaled
 logarithmically: the gain applied by audio framework ranges from -72dB to at least 0dB,
 so an appropriate conversion from linear UI input x to level is:
 x == 0 -&gt; level = 0
 0 &lt; x &lt;= R -&gt; level = 10^(72*(x-R)/20/R)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setAuxEffectSendLevel(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetLoopPoints">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetLoopPoints (int startInFrames, int endInFrames, int loopCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetLoopPoints(int32 startInFrames, int32 endInFrames, int32 loopCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLoopPoints", "(III)I", "GetSetLoopPoints_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInFrames" Type="System.Int32" />
        <Parameter Name="endInFrames" Type="System.Int32" />
        <Parameter Name="loopCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startInFrames">loop start marker expressed in frames.
 Zero corresponds to start of buffer.
 The start marker must not be greater than or equal to the buffer size in frames, or negative.</param>
        <param name="endInFrames">loop end marker expressed in frames.
 The total buffer size in frames corresponds to end of buffer.
 The end marker must not be greater than the buffer size in frames.
 For looping, the end marker must not be less than or equal to the start marker,
 but to disable looping
 it is permitted for start marker, end marker, and loop count to all be 0.
 If any input parameters are out of range, this method returns <c><see cref="F:Android.Media.AudioTrack.ErrorBadValue" /></c>.
 If the loop period (endInFrames - startInFrames) is too small for the implementation to
 support,
 <c><see cref="F:Android.Media.AudioTrack.ErrorBadValue" /></c> is returned.
 The loop range is the interval [startInFrames, endInFrames).
 <format type="text/html"><br /></format>
 As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>, the position is left unchanged,
 unless it is greater than or equal to the loop end marker, in which case
 it is forced to the loop start marker.
 For earlier API levels, the effect on position is unspecified.</param>
        <param name="loopCount">the number of times the loop is looped; must be greater than or equal to -1.
    A value of -1 means infinite looping, and 0 disables looping.
    A value of positive N means to "loop" (go back) N times.  For example,
    a value of one means to play the region two times in total.</param>
        <summary>Sets the loop points and the loop count.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the loop points and the loop count. The loop can be infinite.
 Similarly to setPlaybackHeadPosition,
 the track must be stopped or paused for the loop points to be changed,
 and must use the <c><see cref="!:Android.Media.AudioTrack.MODE_STATIC" /></c> mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setLoopPoints(int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetNotificationMarkerPosition">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetNotificationMarkerPosition (int markerInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetNotificationMarkerPosition(int32 markerInFrames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNotificationMarkerPosition", "(I)I", "GetSetNotificationMarkerPosition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markerInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="markerInFrames">marker position in wrapping frame units similar to
 <c><see cref="P:Android.Media.AudioTrack.PlaybackHeadPosition" /></c>, or zero to disable the marker.
 To set a marker at a position which would appear as zero due to wraparound,
 a workaround is to use a non-zero position near zero, such as -1 or 1.</param>
        <summary>Sets the position of the notification marker.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the position of the notification marker.  At most one marker can be active.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setNotificationMarkerPosition(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackHeadPosition">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetPlaybackHeadPosition (int positionInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetPlaybackHeadPosition(int32 positionInFrames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackHeadPosition", "(I)I", "GetSetPlaybackHeadPosition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="positionInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="positionInFrames">playback head position within buffer, expressed in frames.
 Zero corresponds to start of buffer.
 The position must not be greater than the buffer size in frames, or negative.
 Though this method and <c><see cref="P:Android.Media.AudioTrack.PlaybackHeadPosition" /></c> have similar names,
 the position values have different meanings.
 <format type="text/html"><br /></format>
 If looping is currently enabled and the new position is greater than or equal to the
 loop end marker, the behavior varies by API level:
 as of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#M" /></c>,
 the looping is first disabled and then the position is set.
 For earlier API levels, the behavior is unspecified.</param>
        <summary>Sets the playback head position within the static buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the playback head position within the static buffer.
 The track must be stopped or paused for the position to be changed,
 and must use the <c><see cref="!:Android.Media.AudioTrack.MODE_STATIC" /></c> mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackHeadPosition(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackPositionUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetPlaybackPositionUpdateListener (Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPlaybackPositionUpdateListener(class Android.Media.AudioTrack/IOnPlaybackPositionUpdateListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V", "GetSetPlaybackPositionUpdateListener_Landroid_media_AudioTrack_OnPlaybackPositionUpdateListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnPlaybackPositionUpdateListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.
 Notifications will be received in the same thread as the one in which the AudioTrack
 instance was created.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackPositionUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetPlaybackPositionUpdateListener (Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPlaybackPositionUpdateListener(class Android.Media.AudioTrack/IOnPlaybackPositionUpdateListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V", "GetSetPlaybackPositionUpdateListener_Landroid_media_AudioTrack_OnPlaybackPositionUpdateListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnPlaybackPositionUpdateListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="handler">the Handler that will receive the event notification messages.
</param>
        <summary>Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.
 Use this method to receive AudioTrack events in the Handler associated with another
 thread than the one in which you created the AudioTrack instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackRate">
      <MemberSignature Language="C#" Value="public virtual int SetPlaybackRate (int sampleRateInHz);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetPlaybackRate(int32 sampleRateInHz) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackRate", "(I)I", "GetSetPlaybackRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sampleRateInHz">the sample rate expressed in Hz</param>
        <summary>Sets the playback sample rate for this track.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the playback sample rate for this track. This sets the sampling rate at which
 the audio data will be consumed and played back
 (as set by the sampleRateInHz parameter in the
 <c><see cref="C:Android.Media.AudioTrack.AudioTrack(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" /></c> constructor),
 not the original sampling rate of the
 content. For example, setting it to half the sample rate of the content will cause the
 playback to last twice as long, but will also result in a pitch shift down by one octave.
 The valid sample rate range is from 1 Hz to twice the value returned by
 <c><see cref="M:Android.Media.AudioTrack.GetNativeOutputSampleRate(Android.Media.Stream)" /></c>.
 Use <c><see cref="P:Android.Media.AudioTrack.PlaybackParams" /></c> for speed control.
 </para>
          <para tool="javadoc-to-mdoc"> This method may also be used to repurpose an existing <c>AudioTrack</c>
 for playback of content of differing sample rate,
 but with identical encoding and channel mask.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPositionNotificationPeriod">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetPositionNotificationPeriod (int periodInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetPositionNotificationPeriod(int32 periodInFrames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPositionNotificationPeriod", "(I)I", "GetSetPositionNotificationPeriod_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="periodInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="periodInFrames">update period expressed in frames.
 Zero period means no position updates.  A negative period is not allowed.</param>
        <summary>Sets the period for the periodic notification event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the period for the periodic notification event.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setPositionNotificationPeriod(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetState">
      <MemberSignature Language="C#" Value="protected virtual void SetState (int state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetState(int32 state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setState", "(I)V", "GetSetState_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="state">the state of the AudioTrack instance</param>
        <summary>Sets the initialization state of the instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the initialization state of the instance. This method was originally intended to be used
 in an AudioTrack subclass constructor to set a subclass-specific post-initialization state.
 However, subclasses of AudioTrack are no longer recommended, so this method is obsolete.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setState(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetStereoVolume">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetStereoVolume (float leftGain, float rightGain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetStereoVolume(float32 leftGain, float32 rightGain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStereoVolume", "(FF)I", "GetSetStereoVolume_FFHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftVolume" Type="System.Single" />
        <Parameter Name="rightVolume" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="leftGain">output gain for the left channel.</param>
        <param name="rightGain">output gain for the right channel</param>
        <param name="leftVolume">output attenuation for the left channel. A value of 0.0f is silence,
      a value of 1.0f is no attenuation.</param>
        <param name="rightVolume">output attenuation for the right channel</param>
        <summary>Sets the specified left and right output gain values on the AudioTrack.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the specified left and right output gain values on the AudioTrack.
 </para>
          <para tool="javadoc-to-mdoc">Gain values are clamped to the closed interval [0.0, max] where
 max is the value of <c><see cref="P:Android.Media.AudioTrack.MaxVolume" /></c>.
 A value of 0.0 results in zero gain (silence), and
 a value of 1.0 means unity gain (signal unchanged).
 The default value is 1.0 meaning unity gain.
 </para>
          <para tool="javadoc-to-mdoc">The word "volume" in the API name is historical; this is actually a linear gain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setStereoVolume(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetVolume (float gain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetVolume(float32 gain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVolume", "(F)I", "GetSetVolume_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gain" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="gain">output gain for all channels.</param>
        <summary>Sets the specified output gain value on all channels of this track.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the specified output gain value on all channels of this track.
 </para>
          <para tool="javadoc-to-mdoc">Gain values are clamped to the closed interval [0.0, max] where
 max is the value of <c><see cref="P:Android.Media.AudioTrack.MaxVolume" /></c>.
 A value of 0.0 results in zero gain (silence), and
 a value of 1.0 means unity gain (signal unchanged).
 The default value is 1.0 meaning unity gain.
 </para>
          <para tool="javadoc-to-mdoc">This API is preferred over <c><see cref="M:Android.Media.AudioTrack.SetStereoVolume(System.Single,System.Single)" /></c>, as it
 more gracefully scales down to mono, and up to multi-channel content beyond stereo.
 </para>
          <para tool="javadoc-to-mdoc">The word "volume" in the API name is historical; this is actually a linear gain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#setVolume(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioTrackState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.AudioTrackState State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()I", "GetGetStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the state of the AudioTrack instance.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the state of the AudioTrack instance. This is useful after the
 AudioTrack instance has been created to check if it was initialized
 properly. This ensures that the appropriate resources have been acquired.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "GetStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops playing the audio data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops playing the audio data.
 When used on an instance created in <c><see cref="!:Android.Media.AudioTrack.MODE_STREAM" /></c> mode, audio will stop playing
 after the last buffer that was written has been played. For an immediate stop, use
 <c><see cref="M:Android.Media.AudioTrack.Pause" /></c>, followed by <c><see cref="M:Android.Media.AudioTrack.Flush" /></c> to discard audio data that hasn't been played
 back yet.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="StreamType">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Stream StreamType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Stream StreamType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStreamType", "()I", "GetGetStreamTypeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the type of audio stream this AudioTrack is configured for.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the type of audio stream this AudioTrack is configured for.
 Compare the result against <c><see cref="!:Android.Media.AudioManager.STREAM_VOICE_CALL" /></c>,
 <c><see cref="!:Android.Media.AudioManager.STREAM_SYSTEM" /></c>, <c><see cref="!:Android.Media.AudioManager.STREAM_RING" /></c>,
 <c><see cref="!:Android.Media.AudioManager.STREAM_MUSIC" /></c>, <c><see cref="!:Android.Media.AudioManager.STREAM_ALARM" /></c>,
 <c><see cref="!:Android.Media.AudioManager.STREAM_NOTIFICATION" /></c>, or <c><see cref="!:Android.Media.AudioManager.STREAM_DTMF" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#getStreamType()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus Success = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus Success = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SUCCESS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Denotes a successful operation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Denotes a successful operation.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#SUCCESS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;II)I", "GetWrite_Ljava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to play, starting at the position reported
     by <c>audioData.position()</c>.
     <format type="text/html"><br /></format>Note that upon return, the buffer position (<c>audioData.position()</c>) will
     have been advanced to reflect the amount of data that was successfully written to
     the AudioTrack.</param>
        <param name="sizeInBytes">number of bytes to write.
     <format type="text/html"><br /></format>Note this may differ from <c>audioData.remaining()</c>, but cannot exceed it.</param>
        <param name="writeMode">one of <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>. It has no
     effect in static mode.
     <format type="text/html"><br /></format>With <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, the write will block until all data has been written
         to the audio sink.
     <format type="text/html"><br /></format>With <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>, the write will return immediately after
     queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).
 The audioData in ByteBuffer should match the format specified in the AudioTrack constructor.
 </para>
          <para tool="javadoc-to-mdoc">
 In streaming mode, the blocking behavior depends on the write mode.  If the write mode is
 <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, the write will normally block until all the data has been enqueued
 for playback, and will return a full transfer count.  However, if the write mode is
 <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>, or the track is stopped or paused on entry, or another thread
 interrupts the write by calling stop or pause, or an I/O error
 occurs during the write, then the write may return a short transfer count.
 </para>
          <para tool="javadoc-to-mdoc">
 In static buffer mode, copies the data to the buffer starting at offset 0,
 and the write mode is ignored.
 Note that the actual playback of this data might occur after this function returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#write(java.nio.ByteBuffer, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (byte[] audioData, int offsetInBytes, int sizeInBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([BII)I", "GetWrite_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">the array that holds the data to play.</param>
        <param name="offsetInBytes">the offset expressed in bytes in audioData where the data to play
    starts.</param>
        <param name="sizeInBytes">the number of bytes to read in audioData after the offset.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).
 The format specified in the AudioTrack constructor should be
 <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_8BIT" /></c> to correspond to the data in the array.
 </para>
          <para tool="javadoc-to-mdoc">
 In streaming mode, the write will normally block until all the data has been enqueued for
 playback, and will return a full transfer count.  However, if the track is stopped or paused
 on entry, or another thread interrupts the write by calling stop or pause, or an I/O error
 occurs during the write, then the write may return a short transfer count.
 </para>
          <para tool="javadoc-to-mdoc">
 In static buffer mode, copies the data to the buffer starting at offset 0.
 Note that the actual playback of this data might occur after this function returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#write(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (short[] audioData, int offsetInShorts, int sizeInShorts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([SII)I", "GetWrite_arraySIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">the array that holds the data to play.</param>
        <param name="offsetInShorts">the offset expressed in shorts in audioData where the data to play
     starts.</param>
        <param name="sizeInShorts">the number of shorts to read in audioData after the offset.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).
 The format specified in the AudioTrack constructor should be
 <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_16BIT" /></c> to correspond to the data in the array.
 </para>
          <para tool="javadoc-to-mdoc">
 In streaming mode, the write will normally block until all the data has been enqueued for
 playback, and will return a full transfer count.  However, if the track is stopped or paused
 on entry, or another thread interrupts the write by calling stop or pause, or an I/O error
 occurs during the write, then the write may return a short transfer count.
 </para>
          <para tool="javadoc-to-mdoc">
 In static buffer mode, copies the data to the buffer starting at offset 0.
 Note that the actual playback of this data might occur after this function returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#write(short[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (float[] audioData, int offsetInFloats, int sizeInFloats, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(float32[] audioData, int32 offsetInFloats, int32 sizeInFloats, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([FIII)I", "GetWrite_arrayFIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Single[]" />
        <Parameter Name="offsetInFloats" Type="System.Int32" />
        <Parameter Name="sizeInFloats" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the array that holds the data to play.
     The implementation does not clip for sample values within the nominal range
     [-1.0f, 1.0f], provided that all gains in the audio pipeline are
     less than or equal to unity (1.0f), and in the absence of post-processing effects
     that could add energy, such as reverb.  For the convenience of applications
     that compute samples using filters with non-unity gain,
     sample values +3 dB beyond the nominal range are permitted.
     However such values may eventually be limited or clipped, depending on various gains
     and later processing in the audio path.  Therefore applications are encouraged
     to provide samples values within the nominal range.</param>
        <param name="offsetInFloats">the offset, expressed as a number of floats,
     in audioData where the data to play starts.</param>
        <param name="sizeInFloats">the number of floats to read in audioData after the offset.</param>
        <param name="writeMode">one of <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>. It has no
     effect in static mode.
     <format type="text/html"><br /></format>With <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, the write will block until all data has been written
         to the audio sink.
     <format type="text/html"><br /></format>With <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>, the write will return immediately after
     queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the audio data to the audio sink for playback (streaming mode),
 or copies audio data for later playback (static buffer mode).
 The format specified in the AudioTrack constructor should be
 <c><see cref="!:Android.Media.AudioFormat.ENCODING_PCM_FLOAT" /></c> to correspond to the data in the array.
 </para>
          <para tool="javadoc-to-mdoc">
 In streaming mode, the blocking behavior depends on the write mode.  If the write mode is
 <c><see cref="!:Android.Media.AudioTrack.WRITE_BLOCKING" /></c>, the write will normally block until all the data has been enqueued
 for playback, and will return a full transfer count.  However, if the write mode is
 <c><see cref="!:Android.Media.AudioTrack.WRITE_NON_BLOCKING" /></c>, or the track is stopped or paused on entry, or another thread
 interrupts the write by calling stop or pause, or an I/O error
 occurs during the write, then the write may return a short transfer count.
 </para>
          <para tool="javadoc-to-mdoc">
 In static buffer mode, copies the data to the buffer starting at offset 0,
 and the write mode is ignored.
 Note that the actual playback of this data might occur after this function returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/AudioTrack.html#write(float[], int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (byte[] audioData, int offsetInBytes, int sizeInBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInBytes">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (short[] audioData, int offsetInShorts, int sizeInShorts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInShorts">To be added.</param>
        <param name="sizeInShorts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (float[] audioData, int offsetInFloats, int sizeInFloats, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(float32[] audioData, int32 offsetInFloats, int32 sizeInFloats, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Single[]" />
        <Parameter Name="offsetInFloats" Type="System.Int32" />
        <Parameter Name="sizeInFloats" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInFloats">To be added.</param>
        <param name="sizeInFloats">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
