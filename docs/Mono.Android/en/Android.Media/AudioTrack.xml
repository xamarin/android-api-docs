<Type Name="AudioTrack" FullName="Android.Media.AudioTrack">
  <TypeSignature Language="C#" Value="public class AudioTrack : Java.Lang.Object, Android.Media.IAudioRouting, Android.Media.IVolumeAutomation, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AudioTrack extends Java.Lang.Object implements class Android.Media.IAudioRouting, class Android.Media.IVolumeAutomation, class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Media.AudioTrack" />
  <TypeSignature Language="F#" Value="type AudioTrack = class&#xA;    inherit Object&#xA;    interface IVolumeAutomation&#xA;    interface IJavaObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Media.IAudioRouting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Media.IVolumeAutomation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/AudioTrack", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The AudioTrack class manages and plays a single audio resource for Java applications.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/AudioTrack" title="Reference documentation">Java documentation for <code>android.media.AudioTrack</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AudioTrack (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.AudioAttributes attributes, Android.Media.AudioFormat format, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Media.AudioAttributes attributes, class Android.Media.AudioFormat format, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(Android.Media.AudioAttributes,Android.Media.AudioFormat,System.Int32,Android.Media.AudioTrackMode,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : Android.Media.AudioAttributes * Android.Media.AudioFormat * int * Android.Media.AudioTrackMode * int -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (attributes, format, bufferSizeInBytes, mode, sessionId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;III)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="format" Type="Android.Media.AudioFormat" />
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <param name="format">To be added.</param>
        <param name="bufferSizeInBytes">the total size (in bytes) of the internal buffer where audio data is
              read from for playback. This should be a nonzero multiple of the frame size in bytes.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STATIC</c>,
              this is the maximum length sample, or audio clip, that can be played by this instance.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STREAM</c>,
              this should be the desired buffer size
              for the &lt;code&gt;AudioTrack&lt;/code&gt; to satisfy the application's
              latency requirements.
              If &lt;code&gt;bufferSizeInBytes&lt;/code&gt; is less than the
              minimum buffer size for the output sink, it is increased to the minimum
              buffer size.
              The method <c>#getBufferSizeInFrames()</c> returns the
              actual size in frames of the buffer created, which
              determines the minimum frequency to write
              to the streaming &lt;code&gt;AudioTrack&lt;/code&gt; to avoid underrun.
              See <c>#getMinBufferSize(int, int, int)</c> to determine the estimated minimum buffer size
              for an AudioTrack instance in streaming mode.</param>
        <param name="mode">streaming or static buffer. See <c>#MODE_STATIC</c> and <c>#MODE_STREAM</c></param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#AudioTrack(int,%20int,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.AudioTrack(int, int, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelConfiguration channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelConfiguration channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(Android.Media.Stream,System.Int32,Android.Media.ChannelConfiguration,Android.Media.Encoding,System.Int32,Android.Media.AudioTrackMode)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : Android.Media.Stream * int * Android.Media.ChannelConfiguration * Android.Media.Encoding * int * Android.Media.AudioTrackMode -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ChannelConfiguration is obsolete. Please use another overload with ChannelOut instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelConfiguration">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>Class constructor.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(Android.Media.Stream,System.Int32,Android.Media.ChannelOut,Android.Media.Encoding,System.Int32,Android.Media.AudioTrackMode)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : Android.Media.Stream * int * Android.Media.ChannelOut * Android.Media.Encoding * int * Android.Media.AudioTrackMode -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IIIIII)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">the type of the audio stream. See
              <c>AudioManager#STREAM_VOICE_CALL</c>, <c>AudioManager#STREAM_SYSTEM</c>,
              <c>AudioManager#STREAM_RING</c>, <c>AudioManager#STREAM_MUSIC</c>,
              <c>AudioManager#STREAM_ALARM</c>, and <c>AudioManager#STREAM_NOTIFICATION</c>.</param>
        <param name="sampleRateInHz">the initial source sample rate expressed in Hz.
              <c>AudioFormat#SAMPLE_RATE_UNSPECIFIED</c> means to use a route-dependent value
              which is usually the sample rate of the sink.
              <c>#getSampleRate()</c> can be used to retrieve the actual sample rate chosen.</param>
        <param name="channelConfig">describes the configuration of the audio channels.
              See <c>AudioFormat#CHANNEL_OUT_MONO</c> and
              <c>AudioFormat#CHANNEL_OUT_STEREO</c></param>
        <param name="audioFormat">the format in which the audio data is represented.
              See <c>AudioFormat#ENCODING_PCM_16BIT</c>,
              <c>AudioFormat#ENCODING_PCM_8BIT</c>,
              and <c>AudioFormat#ENCODING_PCM_FLOAT</c>.</param>
        <param name="bufferSizeInBytes">the total size (in bytes) of the internal buffer where audio data is
              read from for playback. This should be a nonzero multiple of the frame size in bytes.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STATIC</c>,
              this is the maximum length sample, or audio clip, that can be played by this instance.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STREAM</c>,
              this should be the desired buffer size
              for the &lt;code&gt;AudioTrack&lt;/code&gt; to satisfy the application's
              latency requirements.
              If &lt;code&gt;bufferSizeInBytes&lt;/code&gt; is less than the
              minimum buffer size for the output sink, it is increased to the minimum
              buffer size.
              The method <c>#getBufferSizeInFrames()</c> returns the
              actual size in frames of the buffer created, which
              determines the minimum frequency to write
              to the streaming &lt;code&gt;AudioTrack&lt;/code&gt; to avoid underrun.
              See <c>#getMinBufferSize(int, int, int)</c> to determine the estimated minimum buffer size
              for an AudioTrack instance in streaming mode.</param>
        <param name="mode">streaming or static buffer. See <c>#MODE_STATIC</c> and <c>#MODE_STREAM</c></param>
        <summary>Class constructor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#AudioTrack(int,%20int,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.AudioTrack(int, int, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelConfiguration channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelConfiguration channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(Android.Media.Stream,System.Int32,Android.Media.ChannelConfiguration,Android.Media.Encoding,System.Int32,Android.Media.AudioTrackMode,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : Android.Media.Stream * int * Android.Media.ChannelConfiguration * Android.Media.Encoding * int * Android.Media.AudioTrackMode * int -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode, sessionId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ChannelConfiguration is obsolete. Please use another overload with ChannelOut instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelConfiguration">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <param name="sampleRateInHz">To be added.</param>
        <param name="channelConfig">To be added.</param>
        <param name="audioFormat">To be added.</param>
        <param name="bufferSizeInBytes">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor with audio session.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioTrack (Android.Media.Stream streamType, int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat, int bufferSizeInBytes, Android.Media.AudioTrackMode mode, int sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Android.Media.Stream streamType, int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat, int32 bufferSizeInBytes, valuetype Android.Media.AudioTrackMode mode, int32 sessionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.#ctor(Android.Media.Stream,System.Int32,Android.Media.ChannelOut,Android.Media.Encoding,System.Int32,Android.Media.AudioTrackMode,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Media.AudioTrack : Android.Media.Stream * int * Android.Media.ChannelOut * Android.Media.Encoding * int * Android.Media.AudioTrackMode * int -&gt; Android.Media.AudioTrack" Usage="new Android.Media.AudioTrack (streamType, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes, mode, sessionId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(IIIIIII)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bufferSizeInBytes" Type="System.Int32" />
        <Parameter Name="mode" Type="Android.Media.AudioTrackMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamType">the type of the audio stream. See
              <c>AudioManager#STREAM_VOICE_CALL</c>, <c>AudioManager#STREAM_SYSTEM</c>,
              <c>AudioManager#STREAM_RING</c>, <c>AudioManager#STREAM_MUSIC</c>,
              <c>AudioManager#STREAM_ALARM</c>, and <c>AudioManager#STREAM_NOTIFICATION</c>.</param>
        <param name="sampleRateInHz">the initial source sample rate expressed in Hz.
              <c>AudioFormat#SAMPLE_RATE_UNSPECIFIED</c> means to use a route-dependent value
              which is usually the sample rate of the sink.
              <c>#getSampleRate()</c> can be used to retrieve the actual sample rate chosen.</param>
        <param name="channelConfig">describes the configuration of the audio channels.
              See <c>AudioFormat#CHANNEL_OUT_MONO</c> and
              <c>AudioFormat#CHANNEL_OUT_STEREO</c></param>
        <param name="audioFormat">the format in which the audio data is represented.
              See <c>AudioFormat#ENCODING_PCM_16BIT</c>,
              <c>AudioFormat#ENCODING_PCM_8BIT</c>,
              and <c>AudioFormat#ENCODING_PCM_FLOAT</c>.</param>
        <param name="bufferSizeInBytes">the total size (in bytes) of the internal buffer where audio data is
              read from for playback. This should be a nonzero multiple of the frame size in bytes.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STATIC</c>,
              this is the maximum length sample, or audio clip, that can be played by this instance.
              &lt;p&gt; If the track's creation mode is <c>#MODE_STREAM</c>,
              this should be the desired buffer size
              for the &lt;code&gt;AudioTrack&lt;/code&gt; to satisfy the application's
              latency requirements.
              If &lt;code&gt;bufferSizeInBytes&lt;/code&gt; is less than the
              minimum buffer size for the output sink, it is increased to the minimum
              buffer size.
              The method <c>#getBufferSizeInFrames()</c> returns the
              actual size in frames of the buffer created, which
              determines the minimum frequency to write
              to the streaming &lt;code&gt;AudioTrack&lt;/code&gt; to avoid underrun.
              See <c>#getMinBufferSize(int, int, int)</c> to determine the estimated minimum buffer size
              for an AudioTrack instance in streaming mode.</param>
        <param name="mode">streaming or static buffer. See <c>#MODE_STATIC</c> and <c>#MODE_STREAM</c></param>
        <param name="sessionId">To be added.</param>
        <summary>Class constructor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#AudioTrack(int,%20int,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.AudioTrack(int, int, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AddOnCodecFormatChangedListener">
      <MemberSignature Language="C#" Value="public virtual void AddOnCodecFormatChangedListener (Java.Util.Concurrent.IExecutor executor, Android.Media.AudioTrack.IOnCodecFormatChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnCodecFormatChangedListener(class Java.Util.Concurrent.IExecutor executor, class Android.Media.AudioTrack/IOnCodecFormatChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.AddOnCodecFormatChangedListener(Java.Util.Concurrent.IExecutor,Android.Media.AudioTrack.IOnCodecFormatChangedListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnCodecFormatChangedListener", "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$OnCodecFormatChangedListener;)V", "GetAddOnCodecFormatChangedListener_Ljava_util_concurrent_Executor_Landroid_media_AudioTrack_OnCodecFormatChangedListener_Handler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnCodecFormatChangedListener" />
      </Parameters>
      <Docs>
        <param name="executor">Specifies the <c>Executor</c> object to control execution.</param>
        <param name="listener">The <c>OnCodecFormatChangedListener</c> interface to receive
                notifications of codec events.</param>
        <summary>Adds an <c>OnCodecFormatChangedListener</c> to receive notifications of
            codec format change events on this <c>AudioTrack</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#addOnCodecFormatChangedListener(java.util.concurrent.Executor,%20android.media.OnCodecFormatChangedListener)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.addOnCodecFormatChangedListener(java.util.concurrent.Executor, android.media.OnCodecFormatChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnRoutingChangedListener">
      <MemberSignature Language="C#" Value="public virtual void AddOnRoutingChangedListener (Android.Media.AudioTrack.IOnRoutingChangedListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnRoutingChangedListener(class Android.Media.AudioTrack/IOnRoutingChangedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.AddOnRoutingChangedListener(Android.Media.AudioTrack.IOnRoutingChangedListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member AddOnRoutingChangedListener : Android.Media.AudioTrack.IOnRoutingChangedListener * Android.OS.Handler -&gt; unit&#xA;override this.AddOnRoutingChangedListener : Android.Media.AudioTrack.IOnRoutingChangedListener * Android.OS.Handler -&gt; unit" Usage="audioTrack.AddOnRoutingChangedListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnRoutingChangedListener", "(Landroid/media/AudioTrack$OnRoutingChangedListener;Landroid/os/Handler;)V", "GetAddOnRoutingChangedListener_Landroid_media_AudioTrack_OnRoutingChangedListener_Landroid_os_Handler_Handler", ApiSince=23)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnRoutingChangedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The <c>AudioRouting.OnRoutingChangedListener</c> interface to receive
            notifications of rerouting events.</param>
        <param name="handler">Specifies the <c>Handler</c> object for the thread on which to execute
            the callback. If &lt;code&gt;null&lt;/code&gt;, the <c>Handler</c> associated with the main
            <c>Looper</c> will be used.</param>
        <summary>Adds an <c>AudioRouting.OnRoutingChangedListener</c> to receive notifications of routing
            changes on this AudioTrack.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#addOnRoutingChangedListener(android.media.OnRoutingChangedListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.addOnRoutingChangedListener(android.media.OnRoutingChangedListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnRoutingChangedListener">
      <MemberSignature Language="C#" Value="public virtual void AddOnRoutingChangedListener (Android.Media.IAudioRoutingOnRoutingChangedListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnRoutingChangedListener(class Android.Media.IAudioRoutingOnRoutingChangedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.AddOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener,Android.OS.Handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V", "GetAddOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Landroid_os_Handler_Handler", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.IAudioRoutingOnRoutingChangedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The <c>AudioRouting.OnRoutingChangedListener</c> interface to receive
            notifications of rerouting events.</param>
        <param name="handler">Specifies the <c>Handler</c> object for the thread on which to execute
            the callback. If &lt;code&gt;null&lt;/code&gt;, the <c>Handler</c> associated with the main
            <c>Looper</c> will be used.</param>
        <summary>Adds an <c>AudioRouting.OnRoutingChangedListener</c> to receive notifications of routing
            changes on this AudioTrack.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#addOnRoutingChangedListener(android.media.OnRoutingChangedListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.addOnRoutingChangedListener(android.media.OnRoutingChangedListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAuxEffect">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus AttachAuxEffect (int effectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus AttachAuxEffect(int32 effectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.AttachAuxEffect(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member AttachAuxEffect : int -&gt; Android.Media.TrackStatus&#xA;override this.AttachAuxEffect : int -&gt; Android.Media.TrackStatus" Usage="audioTrack.AttachAuxEffect effectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachAuxEffect", "(I)I", "GetAttachAuxEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="effectId">system wide unique id of the effect to attach</param>
        <summary>Attaches an auxiliary effect to the audio track.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Android.Media.AudioTrack.SetAuxEffectSendLevel(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="AudioAttributes">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioAttributes AudioAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioAttributes AudioAttributes" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.AudioAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioAttributes", "()Landroid/media/AudioAttributes;", "GetGetAudioAttributesHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>AudioAttributes</c> used in configuration.</summary>
        <value>The <c>AudioAttributes</c> used to configure the AudioTrack.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getAudioAttributes()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getAudioAttributes()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioDescriptionMixLeveldB">
      <MemberSignature Language="C#" Value="public virtual float AudioDescriptionMixLeveldB { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 AudioDescriptionMixLeveldB" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.AudioDescriptionMixLeveldB" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioDescriptionMixLeveldB", "()F", "GetGetAudioDescriptionMixLeveldBHandler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Audio Description mix level in dB.</summary>
        <value>the current Audio Description Mix Level in dB.
                A value of <c>Float.NEGATIVE_INFINITY</c> means
                that the audio description is not mixed or
                the hardware is not available.
                This should reflect the &lt;strong&gt;true&lt;/strong&gt; internal device mix level;
                hence the application might receive any floating value
                except <c>Float.NaN</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getAudioDescriptionMixLeveldB()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getAudioDescriptionMixLeveldB()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Encoding AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Encoding AudioFormat" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.AudioFormat" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : Android.Media.Encoding" Usage="Android.Media.AudioTrack.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioFormat", "()I", "GetGetAudioFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured audio data encoding.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getAudioFormat()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getAudioFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionId">
      <MemberSignature Language="C#" Value="public virtual int AudioSessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioSessionId" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.AudioSessionId" />
      <MemberSignature Language="F#" Value="member this.AudioSessionId : int" Usage="Android.Media.AudioTrack.AudioSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the audio session ID.</summary>
        <value>the ID of the audio session this AudioTrack belongs to.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getAudioSessionId()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getAudioSessionId()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="BufferCapacityInFrames">
      <MemberSignature Language="C#" Value="public virtual int BufferCapacityInFrames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferCapacityInFrames" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.BufferCapacityInFrames" />
      <MemberSignature Language="F#" Value="member this.BufferCapacityInFrames : int" Usage="Android.Media.AudioTrack.BufferCapacityInFrames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBufferCapacityInFrames", "()I", "GetGetBufferCapacityInFramesHandler", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum size of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer in frames.</summary>
        <value>maximum size in frames of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getBufferCapacityInFrames()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getBufferCapacityInFrames()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferSizeInFrames">
      <MemberSignature Language="C#" Value="public virtual int BufferSizeInFrames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSizeInFrames" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.BufferSizeInFrames" />
      <MemberSignature Language="F#" Value="member this.BufferSizeInFrames : int" Usage="Android.Media.AudioTrack.BufferSizeInFrames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBufferSizeInFrames", "()I", "GetGetBufferSizeInFramesHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the effective size of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer
            that the application writes to.</summary>
        <value>current size in frames of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getBufferSizeInFrames()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getBufferSizeInFrames()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelConfiguration">
      <MemberSignature Language="C#" Value="public virtual Android.Media.ChannelOut ChannelConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.ChannelOut ChannelConfiguration" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.ChannelConfiguration" />
      <MemberSignature Language="F#" Value="member this.ChannelConfiguration : Android.Media.ChannelOut" Usage="Android.Media.AudioTrack.ChannelConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChannelConfiguration", "()I", "GetGetChannelConfigurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ChannelOut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured channel position mask.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getChannelConfiguration()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getChannelConfiguration()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ChannelCount">
      <MemberSignature Language="C#" Value="public virtual int ChannelCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelCount" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.ChannelCount" />
      <MemberSignature Language="F#" Value="member this.ChannelCount : int" Usage="Android.Media.AudioTrack.ChannelCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChannelCount", "()I", "GetGetChannelCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured number of channels.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getChannelCount()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getChannelCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CreateVolumeShaper">
      <MemberSignature Language="C#" Value="public virtual Android.Media.VolumeShaper CreateVolumeShaper (Android.Media.VolumeShaper.Configuration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.VolumeShaper CreateVolumeShaper(class Android.Media.VolumeShaper/Configuration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.CreateVolumeShaper(Android.Media.VolumeShaper.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member CreateVolumeShaper : Android.Media.VolumeShaper.Configuration -&gt; Android.Media.VolumeShaper&#xA;override this.CreateVolumeShaper : Android.Media.VolumeShaper.Configuration -&gt; Android.Media.VolumeShaper" Usage="audioTrack.CreateVolumeShaper configuration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createVolumeShaper", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;", "GetCreateVolumeShaper_Landroid_media_VolumeShaper_Configuration_Handler", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VolumeShaper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configuration" Type="Android.Media.VolumeShaper+Configuration" />
      </Parameters>
      <Docs>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
      <Implements>
        <InterfaceMember>M:Android.Media.IVolumeAutomation.CreateVolumeShaper(Android.Media.VolumeShaper.Configuration)</InterfaceMember>
      </Implements>
    </Member>
    <Member MemberName="DualMonoMode">
      <MemberSignature Language="C#" Value="public virtual int DualMonoMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DualMonoMode" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.DualMonoMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDualMonoMode", "()I", "GetGetDualMonoModeHandler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Dual Mono mode presentation setting.</summary>
        <value>one of <c>#DUAL_MONO_MODE_OFF</c>,
                <c>#DUAL_MONO_MODE_LR</c>,
                <c>#DUAL_MONO_MODE_LL</c>,
                <c>#DUAL_MONO_MODE_RR</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getDualMonoMode()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getDualMonoMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DualMonoModeLl">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackDualMonoMode DualMonoModeLl = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackDualMonoMode DualMonoModeLl = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.DualMonoModeLl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DUAL_MONO_MODE_LL", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackDualMonoMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackDualMonoMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This mode indicates that a stereo stream should be presented
            with the left audio channel replicated into the right audio channel.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#DUAL_MONO_MODE_LL" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.DUAL_MONO_MODE_LL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DualMonoModeLr">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackDualMonoMode DualMonoModeLr = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackDualMonoMode DualMonoModeLr = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.DualMonoModeLr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DUAL_MONO_MODE_LR", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackDualMonoMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackDualMonoMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This mode indicates that a stereo stream should be presented
            with the left and right audio channels blended together
            and delivered to both channels.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#DUAL_MONO_MODE_LR" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.DUAL_MONO_MODE_LR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DualMonoModeOff">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackDualMonoMode DualMonoModeOff = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackDualMonoMode DualMonoModeOff = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.DualMonoModeOff" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DUAL_MONO_MODE_OFF", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackDualMonoMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackDualMonoMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>This mode disables any Dual Mono presentation effect.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#DUAL_MONO_MODE_OFF" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.DUAL_MONO_MODE_OFF</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DualMonoModeRr">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackDualMonoMode DualMonoModeRr = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackDualMonoMode DualMonoModeRr = (3)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.DualMonoModeRr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DUAL_MONO_MODE_RR", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackDualMonoMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackDualMonoMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>This mode indicates that a stereo stream should be presented
            with the right audio channel replicated into the left audio channel.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#DUAL_MONO_MODE_RR" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.DUAL_MONO_MODE_RR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncapsulationMetadataTypeDvbAdDescriptor">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackEncapsulationMetadataType EncapsulationMetadataTypeDvbAdDescriptor = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackEncapsulationMetadataType EncapsulationMetadataTypeDvbAdDescriptor = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.EncapsulationMetadataTypeDvbAdDescriptor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackEncapsulationMetadataType enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackEncapsulationMetadataType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Encapsulation metadata type for DVB AD descriptor.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncapsulationMetadataTypeFrameworkTuner">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackEncapsulationMetadataType EncapsulationMetadataTypeFrameworkTuner = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackEncapsulationMetadataType EncapsulationMetadataTypeFrameworkTuner = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.EncapsulationMetadataTypeFrameworkTuner" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackEncapsulationMetadataType enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackEncapsulationMetadataType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Encapsulation metadata type for framework tuner information.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncapsulationModeElementaryStream">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackEncapsulationMode EncapsulationModeElementaryStream = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackEncapsulationMode EncapsulationModeElementaryStream = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.EncapsulationModeElementaryStream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENCAPSULATION_MODE_ELEMENTARY_STREAM", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackEncapsulationMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackEncapsulationMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This mode indicates metadata encapsulation with an elementary stream payload.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ENCAPSULATION_MODE_ELEMENTARY_STREAM" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ENCAPSULATION_MODE_ELEMENTARY_STREAM</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncapsulationModeNone">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioTrackEncapsulationMode EncapsulationModeNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioTrackEncapsulationMode EncapsulationModeNone = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.EncapsulationModeNone" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ENCAPSULATION_MODE_NONE", ApiSince=30)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioTrackEncapsulationMode enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackEncapsulationMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>This mode indicates no metadata encapsulation,
            which is the default mode for sending audio data
            through <c>AudioTrack</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ENCAPSULATION_MODE_NONE" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ENCAPSULATION_MODE_NONE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus Error = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus Error = (-1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.Error" />
      <MemberSignature Language="F#" Value="val mutable Error : Android.Media.TrackStatus" Usage="Android.Media.AudioTrack.Error" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Denotes a generic operation failure.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ERROR" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ERROR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ErrorBadValue">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus ErrorBadValue = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus ErrorBadValue = (-2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.ErrorBadValue" />
      <MemberSignature Language="F#" Value="val mutable ErrorBadValue : Android.Media.TrackStatus" Usage="Android.Media.AudioTrack.ErrorBadValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_BAD_VALUE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>Denotes a failure due to the use of an invalid value.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ERROR_BAD_VALUE" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ERROR_BAD_VALUE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ErrorDeadObject">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus ErrorDeadObject = -6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus ErrorDeadObject = (-6)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.ErrorDeadObject" />
      <MemberSignature Language="F#" Value="val mutable ErrorDeadObject : Android.Media.TrackStatus" Usage="Android.Media.AudioTrack.ErrorDeadObject" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_DEAD_OBJECT", ApiSince=24)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-6</MemberValue>
      <Docs>
        <summary>An error code indicating that the object reporting it is no longer valid and needs to
            be recreated.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ERROR_DEAD_OBJECT" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ERROR_DEAD_OBJECT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorInvalidOperation">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus ErrorInvalidOperation = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus ErrorInvalidOperation = (-3)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.ErrorInvalidOperation" />
      <MemberSignature Language="F#" Value="val mutable ErrorInvalidOperation : Android.Media.TrackStatus" Usage="Android.Media.AudioTrack.ErrorInvalidOperation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_INVALID_OPERATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>Denotes a failure due to the improper use of a method.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#ERROR_INVALID_OPERATION" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.ERROR_INVALID_OPERATION</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Flush" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="audioTrack.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "GetFlushHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flushes the audio data currently queued for playback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#flush()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.flush()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioFormat Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioFormat Format" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.Format" />
      <MemberSignature Language="F#" Value="member this.Format : Android.Media.AudioFormat" Usage="Android.Media.AudioTrack.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFormat", "()Landroid/media/AudioFormat;", "GetGetFormatHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured &lt;code&gt;AudioTrack&lt;/code&gt; format.</summary>
        <value>an <c>AudioFormat</c> containing the
            &lt;code&gt;AudioTrack&lt;/code&gt; parameters at the time of configuration.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getFormat()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMinBufferSize">
      <MemberSignature Language="C#" Value="public static int GetMinBufferSize (int sampleRateInHz, Android.Media.ChannelOut channelConfig, Android.Media.Encoding audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMinBufferSize(int32 sampleRateInHz, valuetype Android.Media.ChannelOut channelConfig, valuetype Android.Media.Encoding audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.GetMinBufferSize(System.Int32,Android.Media.ChannelOut,Android.Media.Encoding)" />
      <MemberSignature Language="F#" Value="static member GetMinBufferSize : int * Android.Media.ChannelOut * Android.Media.Encoding -&gt; int" Usage="Android.Media.AudioTrack.GetMinBufferSize (sampleRateInHz, channelConfig, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMinBufferSize", "(III)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
        <Parameter Name="channelConfig" Type="Android.Media.ChannelOut">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="audioFormat" Type="Android.Media.Encoding">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sampleRateInHz">the source sample rate expressed in Hz.
              <c>AudioFormat#SAMPLE_RATE_UNSPECIFIED</c> is not permitted.</param>
        <param name="channelConfig">describes the configuration of the audio channels.
              See <c>AudioFormat#CHANNEL_OUT_MONO</c> and
              <c>AudioFormat#CHANNEL_OUT_STEREO</c></param>
        <param name="audioFormat">the format in which the audio data is represented.
              See <c>AudioFormat#ENCODING_PCM_16BIT</c> and
              <c>AudioFormat#ENCODING_PCM_8BIT</c>,
              and <c>AudioFormat#ENCODING_PCM_FLOAT</c>.</param>
        <summary>Returns the estimated minimum buffer size required for an AudioTrack
            object to be created in the <c>#MODE_STREAM</c> mode.</summary>
        <returns>
          <c>#ERROR_BAD_VALUE</c> if an invalid parameter was passed,
              or <c>#ERROR</c> if unable to query for output properties,
              or the minimum buffer size expressed in bytes.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getMinBufferSize(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getMinBufferSize(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetNativeOutputSampleRate">
      <MemberSignature Language="C#" Value="public static int GetNativeOutputSampleRate (Android.Media.Stream streamType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNativeOutputSampleRate(valuetype Android.Media.Stream streamType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.GetNativeOutputSampleRate(Android.Media.Stream)" />
      <MemberSignature Language="F#" Value="static member GetNativeOutputSampleRate : Android.Media.Stream -&gt; int" Usage="Android.Media.AudioTrack.GetNativeOutputSampleRate streamType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getNativeOutputSampleRate", "(I)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">To be added.</param>
        <summary>Returns the output sample rate in Hz for the specified stream type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getNativeOutputSampleRate(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getNativeOutputSampleRate(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public virtual bool GetTimestamp (Android.Media.AudioTimestamp timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetTimestamp(class Android.Media.AudioTimestamp timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.GetTimestamp(Android.Media.AudioTimestamp)" />
      <MemberSignature Language="F#" Value="abstract member GetTimestamp : Android.Media.AudioTimestamp -&gt; bool&#xA;override this.GetTimestamp : Android.Media.AudioTimestamp -&gt; bool" Usage="audioTrack.GetTimestamp timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTimestamp", "(Landroid/media/AudioTimestamp;)Z", "GetGetTimestamp_Landroid_media_AudioTimestamp_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="Android.Media.AudioTimestamp" />
      </Parameters>
      <Docs>
        <param name="timestamp">a reference to a non-null AudioTimestamp instance allocated
                   and owned by caller.</param>
        <summary>Poll for a timestamp on demand.</summary>
        <returns>true if a timestamp is available, or false if no timestamp is available.
                    If a timestamp is available,
                    the AudioTimestamp instance is filled in with a position in frame units, together
                    with the estimated time when that frame was presented or is committed to
                    be presented.
                    In the case that no timestamp is available, any supplied instance is left unaltered.
                    A timestamp may be temporarily unavailable while the audio clock is stabilizing,
                    or during and immediately after a route change.
                    A timestamp is permanently unavailable for a given route if the route does not support
                    timestamps.  In this case, the approximate frame position can be obtained
                    using <c>#getPlaybackHeadPosition</c>.
                    However, it may be useful to continue to query for
                    timestamps occasionally, to recover after a route change.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getTimestamp(android.media.AudioTimestamp)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getTimestamp(android.media.AudioTimestamp)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectPlaybackSupported">
      <MemberSignature Language="C#" Value="public static bool IsDirectPlaybackSupported (Android.Media.AudioFormat format, Android.Media.AudioAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDirectPlaybackSupported(class Android.Media.AudioFormat format, class Android.Media.AudioAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.IsDirectPlaybackSupported(Android.Media.AudioFormat,Android.Media.AudioAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isDirectPlaybackSupported", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z", "", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.AudioFormat" />
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
      </Parameters>
      <Docs>
        <param name="format">a non-null <c>AudioFormat</c> instance describing the format of
              the audio data.</param>
        <param name="attributes">a non-null <c>AudioAttributes</c> instance.</param>
        <summary>Returns whether direct playback of an audio format with the provided attributes is
            currently supported on the system.</summary>
        <returns>true if the given audio format can be played directly.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#isDirectPlaybackSupported(android.media.AudioFormat,%20android.media.AudioAttributes)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.isDirectPlaybackSupported(android.media.AudioFormat, android.media.AudioAttributes)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffloadedPlayback">
      <MemberSignature Language="C#" Value="public virtual bool IsOffloadedPlayback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffloadedPlayback" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.IsOffloadedPlayback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isOffloadedPlayback", "()Z", "GetIsOffloadedPlaybackHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the track was built with <c>Builder#setOffloadedPlayback(boolean)</c> set
            to <c>true</c>.</summary>
        <value>true if the track is using offloaded playback.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#isOffloadedPlayback()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.isOffloadedPlayback()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.AudioTrack.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogSessionId">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Metrics.LogSessionId LogSessionId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.Metrics.LogSessionId LogSessionId" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.LogSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLogSessionId", "()Landroid/media/metrics/LogSessionId;", "GetGetLogSessionIdHandler", ApiSince=31)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLogSessionId", "(Landroid/media/metrics/LogSessionId;)V", "GetSetLogSessionId_Landroid_media_metrics_LogSessionId_Handler", ApiSince=31)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Metrics.LogSessionId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>LogSessionId</c>. -or- Sets a <c>LogSessionId</c>LogSessionId instance to this AudioTrack for metrics collection.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getLogSessionId()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getLogSessionId()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setLogSessionId(android.media.metrics.LogSessionId)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setLogSessionId(android.media.metrics.LogSessionId)</code>.</a>
            </format>
          </para>
          <format type="text/html">
            <a href="https://developer.android.com/reference/android/media/AudioTrack#setLogSessionId(android.media.metrics.LogSessionId)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setLogSessionId(android.media.metrics.LogSessionId)</code>.</a>
          </format>
          <a href="https://developer.android.com/reference/android/media/AudioTrack#setLogSessionId(android.media.metrics.LogSessionId)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setLogSessionId(android.media.metrics.LogSessionId)</code>.</a>Java documentation for <code>android.media.AudioTrack.setLogSessionId(android.media.metrics.LogSessionId)</code>android.media.AudioTrack.setLogSessionId(android.media.metrics.LogSessionId).<para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a>Android Open Source Project
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a>Creative Commons 2.5 Attribution License.</remarks>
        <c>LogSessionId</c>
        <c>LogSessionId#LOG_SESSION_ID_NONE</c>
      </Docs>
    </Member>
    <Member MemberName="MarkerReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioTrack.MarkerReachedEventArgs&gt; MarkerReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioTrack/MarkerReachedEventArgs&gt; MarkerReached" />
      <MemberSignature Language="DocId" Value="E:Android.Media.AudioTrack.MarkerReached" />
      <MemberSignature Language="F#" Value="member this.MarkerReached : EventHandler&lt;Android.Media.AudioTrack.MarkerReachedEventArgs&gt; " Usage="member this.MarkerReached : System.EventHandler&lt;Android.Media.AudioTrack.MarkerReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioTrack+MarkerReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxVolume">
      <MemberSignature Language="C#" Value="public static float MaxVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 MaxVolume" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.MaxVolume" />
      <MemberSignature Language="F#" Value="member this.MaxVolume : single" Usage="Android.Media.AudioTrack.MaxVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxVolume", "()F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum gain value, which is greater than or equal to 1.</summary>
        <value>the maximum value, which is greater than or equal to 1.0.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getMaxVolume()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getMaxVolume()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Metrics">
      <MemberSignature Language="C#" Value="public virtual Android.OS.PersistableBundle Metrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.PersistableBundle Metrics" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.Metrics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMetrics", "()Landroid/os/PersistableBundle;", "GetGetMetricsHandler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.PersistableBundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return Metrics data about the current AudioTrack instance.</summary>
        <value>a <c>PersistableBundle</c> containing the set of attributes and values
            available for the media being handled by this instance of AudioTrack
            The attributes are descibed in <c>MetricsConstants</c>.
            
            Additional vendor-specific fields may also be present in
            the return value.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getMetrics()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getMetrics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinVolume">
      <MemberSignature Language="C#" Value="public static float MinVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 MinVolume" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.MinVolume" />
      <MemberSignature Language="F#" Value="member this.MinVolume : single" Usage="Android.Media.AudioTrack.MinVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMinVolume", "()F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the minimum gain value, which is the constant 0.</summary>
        <value>the minimum value, which is the constant 0.0.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getMinVolume()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getMinVolume()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="NativeFrameCount">
      <MemberSignature Language="C#" Value="protected virtual int NativeFrameCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NativeFrameCount" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.NativeFrameCount" />
      <MemberSignature Language="F#" Value="member this.NativeFrameCount : int" Usage="Android.Media.AudioTrack.NativeFrameCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNativeFrameCount", "()I", "GetGetNativeFrameCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the frame count of the native &lt;code&gt;AudioTrack&lt;/code&gt; buffer.</summary>
        <value>current size in frames of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getNativeFrameCount()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getNativeFrameCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="NotificationMarkerPosition">
      <MemberSignature Language="C#" Value="public virtual int NotificationMarkerPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotificationMarkerPosition" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.NotificationMarkerPosition" />
      <MemberSignature Language="F#" Value="member this.NotificationMarkerPosition : int" Usage="Android.Media.AudioTrack.NotificationMarkerPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNotificationMarkerPosition", "()I", "GetGetNotificationMarkerPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns marker position expressed in frames.</summary>
        <value>marker position in wrapping frame units similar to <c>#getPlaybackHeadPosition</c>,
            or zero if marker is disabled.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getNotificationMarkerPosition()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getNotificationMarkerPosition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="OffloadDelay">
      <MemberSignature Language="C#" Value="public virtual int OffloadDelay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OffloadDelay" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.OffloadDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOffloadDelay", "()I", "GetGetOffloadDelayHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the decoder delay of an offloaded track, expressed in frames, previously set with
            <c>#setOffloadDelayPadding(int, int)</c>, or 0 if it was never modified.</summary>
        <value>decoder delay expressed in frames.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getOffloadDelay()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getOffloadDelay()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffloadPadding">
      <MemberSignature Language="C#" Value="public virtual int OffloadPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OffloadPadding" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.OffloadPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOffloadPadding", "()I", "GetGetOffloadPaddingHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the decoder padding of an offloaded track, expressed in frames, previously set with
            <c>#setOffloadDelayPadding(int, int)</c>, or 0 if it was never modified.</summary>
        <value>decoder padding expressed in frames.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getOffloadPadding()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getOffloadPadding()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Pause" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="audioTrack.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()V", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses the playback of the audio data.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="PerformanceMode">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioTrackPerformanceMode PerformanceMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.AudioTrackPerformanceMode PerformanceMode" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PerformanceMode" />
      <MemberSignature Language="F#" Value="member this.PerformanceMode : Android.Media.AudioTrackPerformanceMode" Usage="Android.Media.AudioTrack.PerformanceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPerformanceMode", "()I", "GetGetPerformanceModeHandler", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackPerformanceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current performance mode of the <c>AudioTrack</c>.</summary>
        <value>one of <c>AudioTrack#PERFORMANCE_MODE_NONE</c>,
            <c>AudioTrack#PERFORMANCE_MODE_LOW_LATENCY</c>,
            or <c>AudioTrack#PERFORMANCE_MODE_POWER_SAVING</c>.
            Use <c>AudioTrack.Builder#setPerformanceMode</c>
            in the <c>AudioTrack.Builder</c> to enable a performance mode.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPerformanceMode()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPerformanceMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeriodicNotification">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioTrack.PeriodicNotificationEventArgs&gt; PeriodicNotification;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioTrack/PeriodicNotificationEventArgs&gt; PeriodicNotification" />
      <MemberSignature Language="DocId" Value="E:Android.Media.AudioTrack.PeriodicNotification" />
      <MemberSignature Language="F#" Value="member this.PeriodicNotification : EventHandler&lt;Android.Media.AudioTrack.PeriodicNotificationEventArgs&gt; " Usage="member this.PeriodicNotification : System.EventHandler&lt;Android.Media.AudioTrack.PeriodicNotificationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioTrack+PeriodicNotificationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public virtual void Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Play() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Play" />
      <MemberSignature Language="F#" Value="abstract member Play : unit -&gt; unit&#xA;override this.Play : unit -&gt; unit" Usage="audioTrack.Play " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("play", "()V", "GetPlayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts playing an AudioTrack.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#play()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.play()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if the track isn't properly initialized
</exception>
      </Docs>
    </Member>
    <Member MemberName="PlaybackHeadPosition">
      <MemberSignature Language="C#" Value="public virtual int PlaybackHeadPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PlaybackHeadPosition" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PlaybackHeadPosition" />
      <MemberSignature Language="F#" Value="member this.PlaybackHeadPosition : int" Usage="Android.Media.AudioTrack.PlaybackHeadPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlaybackHeadPosition", "()I", "GetGetPlaybackHeadPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the playback head position expressed in frames.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPlaybackHeadPosition()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPlaybackHeadPosition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PlaybackParams">
      <MemberSignature Language="C#" Value="public virtual Android.Media.PlaybackParams PlaybackParams { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.PlaybackParams PlaybackParams" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PlaybackParams" />
      <MemberSignature Language="F#" Value="member this.PlaybackParams : Android.Media.PlaybackParams with get, set" Usage="Android.Media.AudioTrack.PlaybackParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlaybackParams", "()Landroid/media/PlaybackParams;", "GetGetPlaybackParamsHandler", ApiSince=23)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPlaybackParams", "(Landroid/media/PlaybackParams;)V", "GetSetPlaybackParams_Landroid_media_PlaybackParams_Handler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.PlaybackParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current playback parameters. -or- Sets the playback parameters.</summary>
        <value>current <c>PlaybackParams</c>.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPlaybackParams()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPlaybackParams()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPlaybackParams(android.media.PlaybackParams)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPlaybackParams(android.media.PlaybackParams)</code>.</a>
            </format>
          </para>
          <format type="text/html">
            <a href="https://developer.android.com/reference/android/media/AudioTrack#setPlaybackParams(android.media.PlaybackParams)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPlaybackParams(android.media.PlaybackParams)</code>.</a>
          </format>
          <a href="https://developer.android.com/reference/android/media/AudioTrack#setPlaybackParams(android.media.PlaybackParams)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPlaybackParams(android.media.PlaybackParams)</code>.</a>Java documentation for <code>android.media.AudioTrack.setPlaybackParams(android.media.PlaybackParams)</code>android.media.AudioTrack.setPlaybackParams(android.media.PlaybackParams).<para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a>Android Open Source Project
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a>Creative Commons 2.5 Attribution License.</remarks>
        <c>PlaybackParams</c>
      </Docs>
    </Member>
    <Member MemberName="PlaybackRate">
      <MemberSignature Language="C#" Value="public virtual int PlaybackRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PlaybackRate" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PlaybackRate" />
      <MemberSignature Language="F#" Value="member this.PlaybackRate : int" Usage="Android.Media.AudioTrack.PlaybackRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlaybackRate", "()I", "GetGetPlaybackRateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current playback sample rate rate in Hz.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPlaybackRate()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPlaybackRate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PlayState">
      <MemberSignature Language="C#" Value="public virtual Android.Media.PlayState PlayState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.PlayState PlayState" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PlayState" />
      <MemberSignature Language="F#" Value="member this.PlayState : Android.Media.PlayState" Usage="Android.Media.AudioTrack.PlayState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPlayState", "()I", "GetGetPlayStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.PlayState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the playback state of the AudioTrack instance.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPlayState()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPlayState()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PositionNotificationPeriod">
      <MemberSignature Language="C#" Value="public virtual int PositionNotificationPeriod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionNotificationPeriod" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PositionNotificationPeriod" />
      <MemberSignature Language="F#" Value="member this.PositionNotificationPeriod : int" Usage="Android.Media.AudioTrack.PositionNotificationPeriod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPositionNotificationPeriod", "()I", "GetGetPositionNotificationPeriodHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the notification update period expressed in frames.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPositionNotificationPeriod()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPositionNotificationPeriod()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PreferredDevice">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioDeviceInfo PreferredDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioDeviceInfo PreferredDevice" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.PreferredDevice" />
      <MemberSignature Language="F#" Value="member this.PreferredDevice : Android.Media.AudioDeviceInfo" Usage="Android.Media.AudioTrack.PreferredDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetPreferredDeviceHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioDeviceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the selected output specified by <c>#setPreferredDevice</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getPreferredDevice()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getPreferredDevice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterStreamEventCallback">
      <MemberSignature Language="C#" Value="public virtual void RegisterStreamEventCallback (Java.Util.Concurrent.IExecutor executor, Android.Media.AudioTrack.StreamEventCallback eventCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterStreamEventCallback(class Java.Util.Concurrent.IExecutor executor, class Android.Media.AudioTrack/StreamEventCallback eventCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.RegisterStreamEventCallback(Java.Util.Concurrent.IExecutor,Android.Media.AudioTrack.StreamEventCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerStreamEventCallback", "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$StreamEventCallback;)V", "GetRegisterStreamEventCallback_Ljava_util_concurrent_Executor_Landroid_media_AudioTrack_StreamEventCallback_Handler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="eventCallback" Type="Android.Media.AudioTrack+StreamEventCallback" />
      </Parameters>
      <Docs>
        <param name="executor">
          <c>Executor</c> to handle the callbacks.</param>
        <param name="eventCallback">the callback to receive the stream event notifications.</param>
        <summary>Registers a callback for the notification of stream events.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#registerStreamEventCallback(java.util.concurrent.Executor,%20android.media.StreamEventCallback)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.registerStreamEventCallback(java.util.concurrent.Executor, android.media.StreamEventCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Release" />
      <MemberSignature Language="F#" Value="abstract member Release : unit -&gt; unit&#xA;override this.Release : unit -&gt; unit" Usage="audioTrack.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the native AudioTrack resources.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#release()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.release()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ReloadStaticData">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus ReloadStaticData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus ReloadStaticData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.ReloadStaticData" />
      <MemberSignature Language="F#" Value="abstract member ReloadStaticData : unit -&gt; Android.Media.TrackStatus&#xA;override this.ReloadStaticData : unit -&gt; Android.Media.TrackStatus" Usage="audioTrack.ReloadStaticData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reloadStaticData", "()I", "GetReloadStaticDataHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the playback head position within the static buffer to zero,
            that is it rewinds to start of static buffer.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_BAD_VALUE</c>,
             <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#reloadStaticData()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.reloadStaticData()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnCodecFormatChangedListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveOnCodecFormatChangedListener (Android.Media.AudioTrack.IOnCodecFormatChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnCodecFormatChangedListener(class Android.Media.AudioTrack/IOnCodecFormatChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.RemoveOnCodecFormatChangedListener(Android.Media.AudioTrack.IOnCodecFormatChangedListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnCodecFormatChangedListener", "(Landroid/media/AudioTrack$OnCodecFormatChangedListener;)V", "GetRemoveOnCodecFormatChangedListener_Landroid_media_AudioTrack_OnCodecFormatChangedListener_Handler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnCodecFormatChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The previously added <c>OnCodecFormatChangedListener</c> interface
            to remove.</param>
        <summary>Removes an <c>OnCodecFormatChangedListener</c> which has been previously added
            to receive codec format change events.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#removeOnCodecFormatChangedListener(android.media.OnCodecFormatChangedListener)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.removeOnCodecFormatChangedListener(android.media.OnCodecFormatChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnRoutingChangedListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveOnRoutingChangedListener (Android.Media.AudioTrack.IOnRoutingChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnRoutingChangedListener(class Android.Media.AudioTrack/IOnRoutingChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.RemoveOnRoutingChangedListener(Android.Media.AudioTrack.IOnRoutingChangedListener)" />
      <MemberSignature Language="F#" Value="abstract member RemoveOnRoutingChangedListener : Android.Media.AudioTrack.IOnRoutingChangedListener -&gt; unit&#xA;override this.RemoveOnRoutingChangedListener : Android.Media.AudioTrack.IOnRoutingChangedListener -&gt; unit" Usage="audioTrack.RemoveOnRoutingChangedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnRoutingChangedListener", "(Landroid/media/AudioTrack$OnRoutingChangedListener;)V", "GetRemoveOnRoutingChangedListener_Landroid_media_AudioTrack_OnRoutingChangedListener_Handler", ApiSince=23)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnRoutingChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The previously added <c>AudioRouting.OnRoutingChangedListener</c> interface
            to remove.</param>
        <summary>Removes an <c>AudioRouting.OnRoutingChangedListener</c> which has been previously added
            to receive rerouting notifications.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnRoutingChangedListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveOnRoutingChangedListener (Android.Media.IAudioRoutingOnRoutingChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnRoutingChangedListener(class Android.Media.IAudioRoutingOnRoutingChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.RemoveOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", "GetRemoveOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Handler", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.IAudioRoutingOnRoutingChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The previously added <c>AudioRouting.OnRoutingChangedListener</c> interface
            to remove.</param>
        <summary>Removes an <c>AudioRouting.OnRoutingChangedListener</c> which has been previously added
            to receive rerouting notifications.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedDevice">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioDeviceInfo RoutedDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioDeviceInfo RoutedDevice" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.RoutedDevice" />
      <MemberSignature Language="F#" Value="member this.RoutedDevice : Android.Media.AudioDeviceInfo" Usage="Android.Media.AudioTrack.RoutedDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetRoutedDeviceHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioDeviceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <c>AudioDeviceInfo</c> identifying the current routing of this AudioTrack.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getRoutedDevice()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getRoutedDevice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; RoutingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; RoutingChanged" />
      <MemberSignature Language="DocId" Value="E:Android.Media.AudioTrack.RoutingChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleRate">
      <MemberSignature Language="C#" Value="public virtual int SampleRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SampleRate" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.SampleRate" />
      <MemberSignature Language="F#" Value="member this.SampleRate : int" Usage="Android.Media.AudioTrack.SampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSampleRate", "()I", "GetGetSampleRateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the configured audio source sample rate in Hz.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getSampleRate()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getSampleRate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioDescriptionMixLeveldB">
      <MemberSignature Language="C#" Value="public virtual bool SetAudioDescriptionMixLeveldB (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetAudioDescriptionMixLeveldB(float32 level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetAudioDescriptionMixLeveldB(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioDescriptionMixLeveldB", "(F)Z", "GetSetAudioDescriptionMixLeveldB_FHandler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">a floating point value between
                <c>Float.NEGATIVE_INFINITY</c> to <c>+48.f</c>,
                where <c>Float.NEGATIVE_INFINITY</c> means the Audio Description is not mixed
                and a level of <c>0.f</c> means the Audio Description is mixed without scaling.</param>
        <summary>Sets the Audio Description mix level in dB.</summary>
        <returns>true on success, false on failure.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setAudioDescriptionMixLeveldB(float)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setAudioDescriptionMixLeveldB(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAuxEffectSendLevel">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetAuxEffectSendLevel (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetAuxEffectSendLevel(float32 level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetAuxEffectSendLevel(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetAuxEffectSendLevel : single -&gt; Android.Media.TrackStatus&#xA;override this.SetAuxEffectSendLevel : single -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetAuxEffectSendLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxEffectSendLevel", "(F)I", "GetSetAuxEffectSendLevel_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">linear send level</param>
        <summary>Sets the send level of the audio track to the attached auxiliary effect
            <c>#attachAuxEffect(int)</c>.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>,
               <c>#ERROR_INVALID_OPERATION</c>, <c>#ERROR</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setAuxEffectSendLevel(float)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setAuxEffectSendLevel(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetBufferSizeInFrames">
      <MemberSignature Language="C#" Value="public virtual int SetBufferSizeInFrames (int bufferSizeInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetBufferSizeInFrames(int32 bufferSizeInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetBufferSizeInFrames(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetBufferSizeInFrames : int -&gt; int&#xA;override this.SetBufferSizeInFrames : int -&gt; int" Usage="audioTrack.SetBufferSizeInFrames bufferSizeInFrames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBufferSizeInFrames", "(I)I", "GetSetBufferSizeInFrames_IHandler", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSizeInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSizeInFrames">requested buffer size in frames</param>
        <summary>Limits the effective size of the &lt;code&gt;AudioTrack&lt;/code&gt; buffer
            that the application writes to.</summary>
        <returns>the actual buffer size in frames or an error code,
               <c>#ERROR_BAD_VALUE</c>, <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setBufferSizeInFrames(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setBufferSizeInFrames(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDualMonoMode">
      <MemberSignature Language="C#" Value="public virtual bool SetDualMonoMode (int dualMonoMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetDualMonoMode(int32 dualMonoMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetDualMonoMode(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDualMonoMode", "(I)Z", "GetSetDualMonoMode_IHandler", ApiSince=30)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dualMonoMode" Type="System.Int32">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.IntDef(Fields=Mono.Cecil.CustomAttributeArgument[], Type="Android.Media.AudioTrack")</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dualMonoMode">one of <c>#DUAL_MONO_MODE_OFF</c>,
                <c>#DUAL_MONO_MODE_LR</c>,
                <c>#DUAL_MONO_MODE_LL</c>,
                <c>#DUAL_MONO_MODE_RR</c>.</param>
        <summary>Sets the Dual Mono mode presentation on the output device.</summary>
        <returns>true on success, false on failure if the output device
                does not support Dual Mono mode.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setDualMonoMode(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setDualMonoMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLoopPoints">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetLoopPoints (int startInFrames, int endInFrames, int loopCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetLoopPoints(int32 startInFrames, int32 endInFrames, int32 loopCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetLoopPoints(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetLoopPoints : int * int * int -&gt; Android.Media.TrackStatus&#xA;override this.SetLoopPoints : int * int * int -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetLoopPoints (startInFrames, endInFrames, loopCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLoopPoints", "(III)I", "GetSetLoopPoints_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInFrames" Type="System.Int32" />
        <Parameter Name="endInFrames" Type="System.Int32" />
        <Parameter Name="loopCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startInFrames">loop start marker expressed in frames.
            Zero corresponds to start of buffer.
            The start marker must not be greater than or equal to the buffer size in frames, or negative.</param>
        <param name="endInFrames">loop end marker expressed in frames.
            The total buffer size in frames corresponds to end of buffer.
            The end marker must not be greater than the buffer size in frames.
            For looping, the end marker must not be less than or equal to the start marker,
            but to disable looping
            it is permitted for start marker, end marker, and loop count to all be 0.
            If any input parameters are out of range, this method returns <c>#ERROR_BAD_VALUE</c>.
            If the loop period (endInFrames - startInFrames) is too small for the implementation to
            support,
            <c>#ERROR_BAD_VALUE</c> is returned.
            The loop range is the interval [startInFrames, endInFrames).
            &lt;br&gt;
            As of <c>android.os.Build.VERSION_CODES#M</c>, the position is left unchanged,
            unless it is greater than or equal to the loop end marker, in which case
            it is forced to the loop start marker.
            For earlier API levels, the effect on position is unspecified.</param>
        <param name="loopCount">the number of times the loop is looped; must be greater than or equal to -1.
               A value of -1 means infinite looping, and 0 disables looping.
               A value of positive N means to "loop" (go back) N times.  For example,
               a value of one means to play the region two times in total.</param>
        <summary>Sets the loop points and the loop count.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_BAD_VALUE</c>,
               <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setLoopPoints(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setLoopPoints(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetNotificationMarkerPosition">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetNotificationMarkerPosition (int markerInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetNotificationMarkerPosition(int32 markerInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetNotificationMarkerPosition(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetNotificationMarkerPosition : int -&gt; Android.Media.TrackStatus&#xA;override this.SetNotificationMarkerPosition : int -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetNotificationMarkerPosition markerInFrames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNotificationMarkerPosition", "(I)I", "GetSetNotificationMarkerPosition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markerInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="markerInFrames">marker position in wrapping frame units similar to
            <c>#getPlaybackHeadPosition</c>, or zero to disable the marker.
            To set a marker at a position which would appear as zero due to wraparound,
            a workaround is to use a non-zero position near zero, such as -1 or 1.</param>
        <summary>Sets the position of the notification marker.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_BAD_VALUE</c>,
             <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setNotificationMarkerPosition(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setNotificationMarkerPosition(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOffloadDelayPadding">
      <MemberSignature Language="C#" Value="public virtual void SetOffloadDelayPadding (int delayInFrames, int paddingInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOffloadDelayPadding(int32 delayInFrames, int32 paddingInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetOffloadDelayPadding(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOffloadDelayPadding", "(II)V", "GetSetOffloadDelayPadding_IIHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delayInFrames" Type="System.Int32" />
        <Parameter Name="paddingInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="delayInFrames">number of frames to be ignored at the beginning of the stream. A value
                of 0 indicates no delay is to be applied.</param>
        <param name="paddingInFrames">number of frames to be ignored at the end of the stream. A value of 0
                of 0 indicates no padding is to be applied.</param>
        <summary>Configures the delay and padding values for the current compressed stream playing
            in offload mode.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setOffloadDelayPadding(int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setOffloadDelayPadding(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOffloadEndOfStream">
      <MemberSignature Language="C#" Value="public virtual void SetOffloadEndOfStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOffloadEndOfStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetOffloadEndOfStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOffloadEndOfStream", "()V", "GetSetOffloadEndOfStreamHandler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackHeadPosition">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetPlaybackHeadPosition (int positionInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetPlaybackHeadPosition(int32 positionInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPlaybackHeadPosition(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetPlaybackHeadPosition : int -&gt; Android.Media.TrackStatus&#xA;override this.SetPlaybackHeadPosition : int -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetPlaybackHeadPosition positionInFrames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackHeadPosition", "(I)I", "GetSetPlaybackHeadPosition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="positionInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="positionInFrames">playback head position within buffer, expressed in frames.
            Zero corresponds to start of buffer.
            The position must not be greater than the buffer size in frames, or negative.
            Though this method and <c>#getPlaybackHeadPosition()</c> have similar names,
            the position values have different meanings.
            &lt;br&gt;
            If looping is currently enabled and the new position is greater than or equal to the
            loop end marker, the behavior varies by API level:
            as of <c>android.os.Build.VERSION_CODES#M</c>,
            the looping is first disabled and then the position is set.
            For earlier API levels, the behavior is unspecified.</param>
        <summary>Sets the playback head position within the static buffer.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_BAD_VALUE</c>,
               <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPlaybackHeadPosition(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPlaybackHeadPosition(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackPositionUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetPlaybackPositionUpdateListener (Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPlaybackPositionUpdateListener(class Android.Media.AudioTrack/IOnPlaybackPositionUpdateListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPlaybackPositionUpdateListener(Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener)" />
      <MemberSignature Language="F#" Value="abstract member SetPlaybackPositionUpdateListener : Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener -&gt; unit&#xA;override this.SetPlaybackPositionUpdateListener : Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener -&gt; unit" Usage="audioTrack.SetPlaybackPositionUpdateListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V", "GetSetPlaybackPositionUpdateListener_Landroid_media_AudioTrack_OnPlaybackPositionUpdateListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnPlaybackPositionUpdateListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackPositionUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetPlaybackPositionUpdateListener (Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPlaybackPositionUpdateListener(class Android.Media.AudioTrack/IOnPlaybackPositionUpdateListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPlaybackPositionUpdateListener(Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetPlaybackPositionUpdateListener : Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener * Android.OS.Handler -&gt; unit&#xA;override this.SetPlaybackPositionUpdateListener : Android.Media.AudioTrack.IOnPlaybackPositionUpdateListener * Android.OS.Handler -&gt; unit" Usage="audioTrack.SetPlaybackPositionUpdateListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackPositionUpdateListener", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V", "GetSetPlaybackPositionUpdateListener_Landroid_media_AudioTrack_OnPlaybackPositionUpdateListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.AudioTrack+IOnPlaybackPositionUpdateListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="handler">the Handler that will receive the event notification messages.
</param>
        <summary>Sets the listener the AudioTrack notifies when a previously set marker is reached or
 for each periodic playback head position update.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackRate">
      <MemberSignature Language="C#" Value="public virtual int SetPlaybackRate (int sampleRateInHz);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetPlaybackRate(int32 sampleRateInHz) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPlaybackRate(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetPlaybackRate : int -&gt; int&#xA;override this.SetPlaybackRate : int -&gt; int" Usage="audioTrack.SetPlaybackRate sampleRateInHz" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackRate", "(I)I", "GetSetPlaybackRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleRateInHz" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sampleRateInHz">the sample rate expressed in Hz</param>
        <summary>Sets the playback sample rate for this track.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_BAD_VALUE</c>,
               <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPlaybackRate(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPlaybackRate(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPositionNotificationPeriod">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetPositionNotificationPeriod (int periodInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetPositionNotificationPeriod(int32 periodInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPositionNotificationPeriod(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetPositionNotificationPeriod : int -&gt; Android.Media.TrackStatus&#xA;override this.SetPositionNotificationPeriod : int -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetPositionNotificationPeriod periodInFrames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPositionNotificationPeriod", "(I)I", "GetSetPositionNotificationPeriod_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="periodInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="periodInFrames">update period expressed in frames.
            Zero period means no position updates.  A negative period is not allowed.</param>
        <summary>Sets the period for the periodic notification event.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPositionNotificationPeriod(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPositionNotificationPeriod(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPreferredDevice">
      <MemberSignature Language="C#" Value="public virtual bool SetPreferredDevice (Android.Media.AudioDeviceInfo deviceInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetPreferredDevice(class Android.Media.AudioDeviceInfo deviceInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPreferredDevice(Android.Media.AudioDeviceInfo)" />
      <MemberSignature Language="F#" Value="abstract member SetPreferredDevice : Android.Media.AudioDeviceInfo -&gt; bool&#xA;override this.SetPreferredDevice : Android.Media.AudioDeviceInfo -&gt; bool" Usage="audioTrack.SetPreferredDevice deviceInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", "GetSetPreferredDevice_Landroid_media_AudioDeviceInfo_Handler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceInfo" Type="Android.Media.AudioDeviceInfo" />
      </Parameters>
      <Docs>
        <param name="deviceInfo">The <c>AudioDeviceInfo</c> specifying the audio sink.
             If deviceInfo is null, default routing is restored.</param>
        <summary>Specifies an audio device (via an <c>AudioDeviceInfo</c> object) to route
            the output from this AudioTrack.</summary>
        <returns>true if succesful, false if the specified <c>AudioDeviceInfo</c> is non-null and
            does not correspond to a valid audio output device.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPreferredDevice(android.media.AudioDeviceInfo)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPreferredDevice(android.media.AudioDeviceInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPresentation">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetPresentation (Android.Media.AudioPresentation presentation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetPresentation(class Android.Media.AudioPresentation presentation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetPresentation(Android.Media.AudioPresentation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPresentation", "(Landroid/media/AudioPresentation;)I", "GetSetPresentation_Landroid_media_AudioPresentation_Handler", ApiSince=28)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentation" Type="Android.Media.AudioPresentation" />
      </Parameters>
      <Docs>
        <param name="presentation">see <c>AudioPresentation</c>. In particular, id should be set.</param>
        <summary>Sets the audio presentation.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>, <c>#ERROR</c>,
               <c>#ERROR_BAD_VALUE</c>, <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setPresentation(android.media.AudioPresentation)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setPresentation(android.media.AudioPresentation)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStartThresholdInFrames">
      <MemberSignature Language="C#" Value="public virtual int SetStartThresholdInFrames (int startThresholdInFrames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetStartThresholdInFrames(int32 startThresholdInFrames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetStartThresholdInFrames(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStartThresholdInFrames", "(I)I", "GetSetStartThresholdInFrames_IHandler", ApiSince=31)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startThresholdInFrames" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startThresholdInFrames">the desired start threshold.</param>
        <summary>Sets the streaming start threshold for an &lt;code&gt;AudioTrack&lt;/code&gt;.</summary>
        <returns>the actual start threshold in frames value. This is
                    an integer between 1 to the buffer capacity
                    (see <c>#getBufferCapacityInFrames()</c>),
                    and might change if the output sink changes after track creation.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setStartThresholdInFrames(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setStartThresholdInFrames(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetState">
      <MemberSignature Language="C#" Value="protected virtual void SetState (int state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetState(int32 state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetState(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetState : int -&gt; unit&#xA;override this.SetState : int -&gt; unit" Usage="audioTrack.SetState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setState", "(I)V", "GetSetState_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="state">the state of the AudioTrack instance</param>
        <summary>Sets the initialization state of the instance.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setState(int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setState(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetStereoVolume">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetStereoVolume (float leftGain, float rightGain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetStereoVolume(float32 leftGain, float32 rightGain) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetStereoVolume(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetStereoVolume : single * single -&gt; Android.Media.TrackStatus&#xA;override this.SetStereoVolume : single * single -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetStereoVolume (leftGain, rightGain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStereoVolume", "(FF)I", "GetSetStereoVolume_FFHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftGain" Type="System.Single" />
        <Parameter Name="rightGain" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="leftGain">output gain for the left channel.</param>
        <param name="rightGain">output gain for the right channel</param>
        <summary>Sets the specified left and right output gain values on the AudioTrack.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>,
               <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setStereoVolume(float,%20float)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setStereoVolume(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="C#" Value="public virtual Android.Media.TrackStatus SetVolume (float gain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.TrackStatus SetVolume(float32 gain) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.SetVolume(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetVolume : single -&gt; Android.Media.TrackStatus&#xA;override this.SetVolume : single -&gt; Android.Media.TrackStatus" Usage="audioTrack.SetVolume gain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVolume", "(F)I", "GetSetVolume_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gain" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="gain">output gain for all channels.</param>
        <summary>Sets the specified output gain value on all channels of this track.</summary>
        <returns>error code or success, see <c>#SUCCESS</c>,
               <c>#ERROR_INVALID_OPERATION</c></returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#setVolume(float)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.setVolume(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartThresholdInFrames">
      <MemberSignature Language="C#" Value="public virtual int StartThresholdInFrames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartThresholdInFrames" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.StartThresholdInFrames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStartThresholdInFrames", "()I", "GetGetStartThresholdInFramesHandler", ApiSince=31)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the streaming start threshold of the &lt;code&gt;AudioTrack&lt;/code&gt;.</summary>
        <value>the current start threshold in frames value. This is
                    an integer between 1 to the buffer capacity
                    (see <c>#getBufferCapacityInFrames()</c>),
                    and might change if the  output sink changes after track creation.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getStartThresholdInFrames()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getStartThresholdInFrames()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioTrackState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.AudioTrackState State" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.State" />
      <MemberSignature Language="F#" Value="member this.State : Android.Media.AudioTrackState" Usage="Android.Media.AudioTrack.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getState", "()I", "GetGetStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioTrackState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the state of the AudioTrack instance.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getState()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getState()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Stop" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="audioTrack.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "GetStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops playing the audio data.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException" />
      </Docs>
    </Member>
    <Member MemberName="StreamType">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Stream StreamType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Stream StreamType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.StreamType" />
      <MemberSignature Language="F#" Value="member this.StreamType : Android.Media.Stream" Usage="Android.Media.AudioTrack.StreamType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStreamType", "()I", "GetGetStreamTypeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the volume stream type of this AudioTrack.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getStreamType()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getStreamType()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public const Android.Media.TrackStatus Success = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.TrackStatus Success = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.AudioTrack.Success" />
      <MemberSignature Language="F#" Value="val mutable Success : Android.Media.TrackStatus" Usage="Android.Media.AudioTrack.Success" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SUCCESS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.TrackStatus enum directly instead of this field.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.TrackStatus</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Denotes a successful operation.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#SUCCESS" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.SUCCESS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.AudioTrack.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.AudioTrack.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderrunCount">
      <MemberSignature Language="C#" Value="public virtual int UnderrunCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UnderrunCount" />
      <MemberSignature Language="DocId" Value="P:Android.Media.AudioTrack.UnderrunCount" />
      <MemberSignature Language="F#" Value="member this.UnderrunCount : int" Usage="Android.Media.AudioTrack.UnderrunCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUnderrunCount", "()I", "GetGetUnderrunCountHandler", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of underrun occurrences in the application-level write buffer
            since the AudioTrack was created.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#getUnderrunCount()" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.getUnderrunCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterStreamEventCallback">
      <MemberSignature Language="C#" Value="public virtual void UnregisterStreamEventCallback (Android.Media.AudioTrack.StreamEventCallback eventCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterStreamEventCallback(class Android.Media.AudioTrack/StreamEventCallback eventCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.UnregisterStreamEventCallback(Android.Media.AudioTrack.StreamEventCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterStreamEventCallback", "(Landroid/media/AudioTrack$StreamEventCallback;)V", "GetUnregisterStreamEventCallback_Landroid_media_AudioTrack_StreamEventCallback_Handler", ApiSince=29)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCallback" Type="Android.Media.AudioTrack+StreamEventCallback" />
      </Parameters>
      <Docs>
        <param name="eventCallback">the callback to unregister.</param>
        <summary>Unregisters the callback for notification of stream events, previously registered
            with <c>#registerStreamEventCallback(Executor, StreamEventCallback)</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#unregisterStreamEventCallback(android.media.StreamEventCallback)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.unregisterStreamEventCallback(android.media.StreamEventCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(Java.Nio.ByteBuffer,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int * Android.Media.WriteMode -&gt; int&#xA;override this.Write : Java.Nio.ByteBuffer * int * Android.Media.WriteMode -&gt; int" Usage="audioTrack.Write (audioData, sizeInBytes, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;II)I", "GetWrite_Ljava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="sizeInBytes">number of bytes to write.  It is recommended but not enforced
                that the number of bytes requested be a multiple of the frame size (sample size in
                bytes multiplied by the channel count).
                &lt;BR&gt;Note this may differ from &lt;code&gt;audioData.remaining()&lt;/code&gt;, but cannot exceed it.</param>
        <param name="writeMode">one of <c>#WRITE_BLOCKING</c>, <c>#WRITE_NON_BLOCKING</c>. It has no
                effect in static mode.
                &lt;BR&gt;With <c>#WRITE_BLOCKING</c>, the write will block until all data has been written
                    to the audio sink.
                &lt;BR&gt;With <c>#WRITE_NON_BLOCKING</c>, the write will return immediately after
                queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (byte[] audioData, int offsetInBytes, int sizeInBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int -&gt; int&#xA;override this.Write : byte[] * int * int -&gt; int" Usage="audioTrack.Write (audioData, offsetInBytes, sizeInBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([BII)I", "GetWrite_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="offsetInBytes">the offset expressed in bytes in audioData where the data to play
    starts.</param>
        <param name="sizeInBytes">number of bytes to write.  It is recommended but not enforced
                that the number of bytes requested be a multiple of the frame size (sample size in
                bytes multiplied by the channel count).
                &lt;BR&gt;Note this may differ from &lt;code&gt;audioData.remaining()&lt;/code&gt;, but cannot exceed it.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (short[] audioData, int offsetInShorts, int sizeInShorts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(System.Int16[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : int16[] * int * int -&gt; int&#xA;override this.Write : int16[] * int * int -&gt; int" Usage="audioTrack.Write (audioData, offsetInShorts, sizeInShorts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([SII)I", "GetWrite_arraySIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="offsetInShorts">the offset expressed in shorts in audioData where the data to play
     starts.</param>
        <param name="sizeInShorts">the number of shorts to read in audioData after the offset.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode, long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode, int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(Java.Nio.ByteBuffer,System.Int32,Android.Media.WriteMode,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int * Android.Media.WriteMode * int64 -&gt; int&#xA;override this.Write : Java.Nio.ByteBuffer * int * Android.Media.WriteMode * int64 -&gt; int" Usage="audioTrack.Write (audioData, sizeInBytes, writeMode, timestamp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;IIJ)I", "GetWrite_Ljava_nio_ByteBuffer_IIJHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="sizeInBytes">number of bytes to write.  It is recommended but not enforced
                that the number of bytes requested be a multiple of the frame size (sample size in
                bytes multiplied by the channel count).
                &lt;BR&gt;Note this may differ from &lt;code&gt;audioData.remaining()&lt;/code&gt;, but cannot exceed it.</param>
        <param name="writeMode">one of <c>#WRITE_BLOCKING</c>, <c>#WRITE_NON_BLOCKING</c>. It has no
                effect in static mode.
                &lt;BR&gt;With <c>#WRITE_BLOCKING</c>, the write will block until all data has been written
                    to the audio sink.
                &lt;BR&gt;With <c>#WRITE_NON_BLOCKING</c>, the write will return immediately after
                queuing as much audio data for playback as possible without blocking.</param>
        <param name="timestamp">To be added.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (byte[] audioData, int offsetInBytes, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(System.Byte[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int * Android.Media.WriteMode -&gt; int&#xA;override this.Write : byte[] * int * int * Android.Media.WriteMode -&gt; int" Usage="audioTrack.Write (audioData, offsetInBytes, sizeInBytes, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([BIII)I", "GetWrite_arrayBIIIHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="offsetInBytes">To be added.</param>
        <param name="sizeInBytes">number of bytes to write.  It is recommended but not enforced
                that the number of bytes requested be a multiple of the frame size (sample size in
                bytes multiplied by the channel count).
                &lt;BR&gt;Note this may differ from &lt;code&gt;audioData.remaining()&lt;/code&gt;, but cannot exceed it.</param>
        <param name="writeMode">one of <c>#WRITE_BLOCKING</c>, <c>#WRITE_NON_BLOCKING</c>. It has no
                effect in static mode.
                &lt;BR&gt;With <c>#WRITE_BLOCKING</c>, the write will block until all data has been written
                    to the audio sink.
                &lt;BR&gt;With <c>#WRITE_NON_BLOCKING</c>, the write will return immediately after
                queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (short[] audioData, int offsetInShorts, int sizeInShorts, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(System.Int16[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="abstract member Write : int16[] * int * int * Android.Media.WriteMode -&gt; int&#xA;override this.Write : int16[] * int * int * Android.Media.WriteMode -&gt; int" Usage="audioTrack.Write (audioData, offsetInShorts, sizeInShorts, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([SIII)I", "GetWrite_arraySIIIHandler", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="offsetInShorts">To be added.</param>
        <param name="sizeInShorts">To be added.</param>
        <param name="writeMode">one of <c>#WRITE_BLOCKING</c>, <c>#WRITE_NON_BLOCKING</c>. It has no
                effect in static mode.
                &lt;BR&gt;With <c>#WRITE_BLOCKING</c>, the write will block until all data has been written
                    to the audio sink.
                &lt;BR&gt;With <c>#WRITE_NON_BLOCKING</c>, the write will return immediately after
                queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual int Write (float[] audioData, int offsetInFloats, int sizeInFloats, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(float32[] audioData, int32 offsetInFloats, int32 sizeInFloats, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.Write(System.Single[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="abstract member Write : single[] * int * int * Android.Media.WriteMode -&gt; int&#xA;override this.Write : single[] * int * int * Android.Media.WriteMode -&gt; int" Usage="audioTrack.Write (audioData, offsetInFloats, sizeInFloats, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([FIII)I", "GetWrite_arrayFIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Single[]" />
        <Parameter Name="offsetInFloats" Type="System.Int32" />
        <Parameter Name="sizeInFloats" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">the buffer that holds the data to write, starting at the position reported
                by &lt;code&gt;audioData.position()&lt;/code&gt;.
                &lt;BR&gt;Note that upon return, the buffer position (&lt;code&gt;audioData.position()&lt;/code&gt;) will
                have been advanced to reflect the amount of data that was successfully written to
                the AudioTrack.</param>
        <param name="offsetInFloats">the offset, expressed as a number of floats,
     in audioData where the data to play starts.</param>
        <param name="sizeInFloats">the number of floats to read in audioData after the offset.</param>
        <param name="writeMode">one of <c>#WRITE_BLOCKING</c>, <c>#WRITE_NON_BLOCKING</c>. It has no
                effect in static mode.
                &lt;BR&gt;With <c>#WRITE_BLOCKING</c>, the write will block until all data has been written
                    to the audio sink.
                &lt;BR&gt;With <c>#WRITE_NON_BLOCKING</c>, the write will return immediately after
                queuing as much audio data for playback as possible without blocking.</param>
        <summary>Writes the audio data to the audio sink for playback (streaming mode),
            or copies audio data for later playback (static buffer mode).</summary>
        <returns>zero or the positive number of bytes that were written, or one of the following
               error codes.
            &lt;ul&gt;
            &lt;li&gt;<c>#ERROR_INVALID_OPERATION</c> if the track isn't properly initialized&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_BAD_VALUE</c> if the parameters don't resolve to valid data and indexes&lt;/li&gt;
            &lt;li&gt;<c>#ERROR_DEAD_OBJECT</c> if the AudioTrack is not valid anymore and
               needs to be recreated. The dead object error code is not returned if some data was
               successfully transferred. In this case, the error is returned at the next write()&lt;/li&gt;
            &lt;li&gt;<c>#ERROR</c> in case of other error&lt;/li&gt;
            &lt;/ul&gt;</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/AudioTrack#write(java.nio.ByteBuffer,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.AudioTrack.write(java.nio.ByteBuffer, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(Java.Nio.ByteBuffer,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer * int * Android.Media.WriteMode -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, sizeInBytes, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (byte[] audioData, int offsetInBytes, int sizeInBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, offsetInBytes, sizeInBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInBytes">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (short[] audioData, int offsetInShorts, int sizeInShorts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(System.Int16[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : int16[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, offsetInShorts, sizeInShorts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInShorts">To be added.</param>
        <param name="sizeInShorts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer audioData, int sizeInBytes, Android.Media.WriteMode writeMode, long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer audioData, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode, int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(Java.Nio.ByteBuffer,System.Int32,Android.Media.WriteMode,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer * int * Android.Media.WriteMode * int64 -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, sizeInBytes, writeMode, timestamp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <param name="writeMode">To be added.</param>
        <param name="timestamp">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (byte[] audioData, int offsetInBytes, int sizeInBytes, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(unsigned int8[] audioData, int32 offsetInBytes, int32 sizeInBytes, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(System.Byte[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : byte[] * int * int * Android.Media.WriteMode -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, offsetInBytes, sizeInBytes, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Byte[]" />
        <Parameter Name="offsetInBytes" Type="System.Int32" />
        <Parameter Name="sizeInBytes" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInBytes">To be added.</param>
        <param name="sizeInBytes">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (short[] audioData, int offsetInShorts, int sizeInShorts, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(int16[] audioData, int32 offsetInShorts, int32 sizeInShorts, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(System.Int16[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : int16[] * int * int * Android.Media.WriteMode -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, offsetInShorts, sizeInShorts, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Int16[]" />
        <Parameter Name="offsetInShorts" Type="System.Int32" />
        <Parameter Name="sizeInShorts" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInShorts">To be added.</param>
        <param name="sizeInShorts">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (float[] audioData, int offsetInFloats, int sizeInFloats, Android.Media.WriteMode writeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(float32[] audioData, int32 offsetInFloats, int32 sizeInFloats, valuetype Android.Media.WriteMode writeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.AudioTrack.WriteAsync(System.Single[],System.Int32,System.Int32,Android.Media.WriteMode)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : single[] * int * int * Android.Media.WriteMode -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="audioTrack.WriteAsync (audioData, offsetInFloats, sizeInFloats, writeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioData" Type="System.Single[]" />
        <Parameter Name="offsetInFloats" Type="System.Int32" />
        <Parameter Name="sizeInFloats" Type="System.Int32" />
        <Parameter Name="writeMode" Type="Android.Media.WriteMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioData">To be added.</param>
        <param name="offsetInFloats">To be added.</param>
        <param name="sizeInFloats">To be added.</param>
        <param name="writeMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
