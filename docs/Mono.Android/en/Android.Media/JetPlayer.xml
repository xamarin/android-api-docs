<Type Name="JetPlayer" FullName="Android.Media.JetPlayer">
  <TypeSignature Language="C#" Value="public class JetPlayer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JetPlayer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/JetPlayer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>JetPlayer provides access to JET content playback and control.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">JetPlayer provides access to JET content playback and control.
 
 </para>
      <para tool="javadoc-to-mdoc">Please refer to the JET Creator User Manual for a presentation of the JET interactive
 music concept and how to use the JetCreator tool to create content to be player by JetPlayer.
 
 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">Use of the JetPlayer class is based around the playback of a number of JET segments
 sequentially added to a playback FIFO queue. The rendering of the MIDI content stored in each
 segment can be dynamically affected by two mechanisms:
 <list type="bullet"><item><term>tracks in a segment can be muted or unmuted at any moment, individually or through
    a mask (to change the mute state of multiple tracks at once)</term></item><item><term>parts of tracks in a segment can be played at predefined points in the segment, in order
    to maintain synchronization with the other tracks in the segment. This is achieved through
    the notion of "clips", which can be triggered at any time, but that will play only at the
    right time, as authored in the corresponding JET file.</term></item></list>
 As a result of the rendering and playback of the JET segments, the user of the JetPlayer instance
 can receive notifications from the JET engine relative to:
 <list type="bullet"><item><term>the playback state,</term></item><item><term>the number of segments left to play in the queue,</term></item><item><term>application controller events (CC80-83) to mark points in the MIDI segments.</term></item></list>
 Use <c><see cref="M:Android.Media.JetPlayer.GetJetPlayer" /></c> to construct a JetPlayer instance. JetPlayer is a singleton class.
 </para>
      <para tool="javadoc-to-mdoc">For more information about how to use JetPlayer, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/media/jetplayer.html">JetPlayer</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/JetPlayer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JetPlayer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearQueue">
      <MemberSignature Language="C#" Value="public virtual bool ClearQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearQueue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearQueue", "()Z", "GetClearQueueHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Empties the segment queue, and clears all clips that are scheduled for playback.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Empties the segment queue, and clears all clips that are scheduled for playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#clearQueue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clone", "()Ljava/lang/Object;", "GetCloneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cloning a JetPlayer instance is not supported.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Cloning a JetPlayer instance is not supported. Calling clone() will generate an exception.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#clone()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.CloneNotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="CloseJetFile">
      <MemberSignature Language="C#" Value="public virtual bool CloseJetFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CloseJetFile() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("closeJetFile", "()Z", "GetCloseJetFileHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the resource containing the JET content.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Closes the resource containing the JET content.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#closeJetFile()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetJetPlayer">
      <MemberSignature Language="C#" Value="public static Android.Media.JetPlayer GetJetPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.JetPlayer GetJetPlayer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getJetPlayer", "()Landroid/media/JetPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.JetPlayer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method for the JetPlayer class.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Factory method for the JetPlayer class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#getJetPlayer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="JetEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetEventEventArgs&gt; JetEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetEventEventArgs&gt; JetEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetEventEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JetNumQueuedSegmentUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs&gt; JetNumQueuedSegmentUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetNumQueuedSegmentUpdateEventArgs&gt; JetNumQueuedSegmentUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetNumQueuedSegmentUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JetPauseUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetPauseUpdateEventArgs&gt; JetPauseUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetPauseUpdateEventArgs&gt; JetPauseUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetPauseUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JetUserIdUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetUserIdUpdateEventArgs&gt; JetUserIdUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetUserIdUpdateEventArgs&gt; JetUserIdUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetUserIdUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadJetFile">
      <MemberSignature Language="C#" Value="public virtual bool LoadJetFile (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadJetFile(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadJetFile", "(Landroid/content/res/AssetFileDescriptor;)Z", "GetLoadJetFile_Landroid_content_res_AssetFileDescriptor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">the asset file descriptor.</param>
        <summary tool="true">Loads a .jet file from an asset file descriptor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Loads a .jet file from an asset file descriptor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#loadJetFile(android.content.res.AssetFileDescriptor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFile">
      <MemberSignature Language="C#" Value="public virtual bool LoadJetFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadJetFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadJetFile", "(Ljava/lang/String;)Z", "GetLoadJetFile_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">the path to the .jet file, for instance "/sdcard/mygame/music.jet".</param>
        <summary>Loads a .jet file from a given path.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Loads a .jet file from a given path.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#loadJetFile(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LoadJetFileAsync (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; LoadJetFileAsync(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadJetFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LoadJetFileAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; LoadJetFileAsync(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxTracks">
      <MemberSignature Language="C#" Value="public static int MaxTracks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxTracks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxTracks", "()I", "GetGetMaxTracksHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer
</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#getMaxTracks()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual bool Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()Z", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses the playback of the JET segment queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Pauses the playback of the JET segment queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#pause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public virtual bool Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Play() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("play", "()Z", "GetPlayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts playing the JET segment queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts playing the JET segment queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#play()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="QueueJetSegment">
      <MemberSignature Language="C#" Value="public virtual bool QueueJetSegment (int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, sbyte userID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QueueJetSegment(int32 segmentNum, int32 libNum, int32 repeatCount, int32 transpose, int32 muteFlags, int8 userID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueJetSegment", "(IIIIIB)Z", "GetQueueJetSegment_IIIIIBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segmentNum" Type="System.Int32" />
        <Parameter Name="libNum" Type="System.Int32" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="transpose" Type="System.Int32" />
        <Parameter Name="muteFlags" Type="System.Int32" />
        <Parameter Name="userID" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="segmentNum">the identifier of the segment.</param>
        <param name="libNum">the index of the sound bank associated with the segment. Use -1 to indicate
    that no sound bank (DLS file) is associated with this segment, in which case JET will use
    the General MIDI library.</param>
        <param name="repeatCount">the number of times the segment will be repeated. 0 means the segment will
    only play once. -1 means the segment will repeat indefinitely.</param>
        <param name="transpose">the amount of pitch transposition. Set to 0 for normal playback. 
    Range is -12 to +12.</param>
        <param name="muteFlags">a bitmask to specify which MIDI tracks will be muted during playback. Bit 0
    affects track 0, bit 1 affects track 1 etc.</param>
        <param name="userID">a value specified by the application that uniquely identifies the segment. 
    this value is received in the
    <c><see cref="!:NoType:android/media/JetPlayer$OnJetEventListener;Href=../../../reference/android/media/JetPlayer.OnJetEventListener.html#onJetUserIdUpdate(android.media.JetPlayer,int,int)" /></c> event listener method.
    Normally, the application will keep a byte value that is incremented each time a new
    segment is queued up. This can be used to look up any special characteristics of that
    track including trigger clips and mute flags.</param>
        <summary>Queues the specified segment in the JET queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queues the specified segment in the JET queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#queueJetSegment(int, int, int, int, int, byte)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="QueueJetSegmentMuteArray">
      <MemberSignature Language="C#" Value="public virtual bool QueueJetSegmentMuteArray (int segmentNum, int libNum, int repeatCount, int transpose, bool[] muteArray, sbyte userID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QueueJetSegmentMuteArray(int32 segmentNum, int32 libNum, int32 repeatCount, int32 transpose, bool[] muteArray, int8 userID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueJetSegmentMuteArray", "(IIII[ZB)Z", "GetQueueJetSegmentMuteArray_IIIIarrayZBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segmentNum" Type="System.Int32" />
        <Parameter Name="libNum" Type="System.Int32" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="transpose" Type="System.Int32" />
        <Parameter Name="muteArray" Type="System.Boolean[]" />
        <Parameter Name="userID" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="segmentNum">the identifier of the segment.</param>
        <param name="libNum">the index of the soundbank associated with the segment. Use -1 to indicate that
    no sound bank (DLS file) is associated with this segment, in which case JET will use
    the General MIDI library.</param>
        <param name="repeatCount">the number of times the segment will be repeated. 0 means the segment will
    only play once. -1 means the segment will repeat indefinitely.</param>
        <param name="transpose">the amount of pitch transposition. Set to 0 for normal playback. 
    Range is -12 to +12.</param>
        <param name="muteArray">an array of booleans to specify which MIDI tracks will be muted during
    playback. The value at index 0 affects track 0, value at index 1 affects track 1 etc. 
    The length of the array must be <c><see cref="P:Android.Media.JetPlayer.MaxTracks" /></c> for the call to succeed.</param>
        <param name="userID">a value specified by the application that uniquely identifies the segment. 
    this value is received in the
    <c><see cref="!:NoType:android/media/JetPlayer$OnJetEventListener;Href=../../../reference/android/media/JetPlayer.OnJetEventListener.html#onJetUserIdUpdate(android.media.JetPlayer,int,int)" /></c> event listener method.
    Normally, the application will keep a byte value that is incremented each time a new
    segment is queued up. This can be used to look up any special characteristics of that
    track including trigger clips and mute flags.</param>
        <summary>Queues the specified segment in the JET queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Queues the specified segment in the JET queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#queueJetSegmentMuteArray(int, int, int, int, boolean[], byte)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the current JET playback, and releases all associated native resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops the current JET playback, and releases all associated native resources.
 The object can no longer be used and the reference should be set to null
 after a call to release().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEventListener">
      <MemberSignature Language="C#" Value="public virtual void SetEventListener (Android.Media.JetPlayer.IOnJetEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEventListener(class Android.Media.JetPlayer/IOnJetEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEventListener", "(Landroid/media/JetPlayer$OnJetEventListener;)V", "GetSetEventListener_Landroid_media_JetPlayer_OnJetEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.JetPlayer+IOnJetEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.
 Notifications will be received in the same thread as the one in which the JetPlayer
 instance was created.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#setEventListener(android.media.JetPlayer.OnJetEventListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEventListener">
      <MemberSignature Language="C#" Value="public virtual void SetEventListener (Android.Media.JetPlayer.IOnJetEventListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEventListener(class Android.Media.JetPlayer/IOnJetEventListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEventListener", "(Landroid/media/JetPlayer$OnJetEventListener;Landroid/os/Handler;)V", "GetSetEventListener_Landroid_media_JetPlayer_OnJetEventListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.JetPlayer+IOnJetEventListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="handler">the Handler that will receive the event notification messages.
</param>
        <summary>Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.
 Use this method to receive JET events in the Handler associated with another
 thread than the one in which you created the JetPlayer instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#setEventListener(android.media.JetPlayer.OnJetEventListener, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteArray">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteArray (bool[] muteArray, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteArray(bool[] muteArray, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteArray", "([ZZ)Z", "GetSetMuteArray_arrayZZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="muteArray" Type="System.Boolean[]" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="muteArray">an array of booleans to specify which MIDI tracks are muted. The value at
    index 0 affects track 0, value at index 1 affects track 1 etc. 
    The length of the array must be <c><see cref="P:Android.Media.JetPlayer.MaxTracks" /></c> for the call to succeed.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flags will be updated at the start of the
    next segment. If the segment is repeated, the flags will take effect the next time 
    segment is repeated.</param>
        <summary>Modifies the mute flags for the current active segment.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Modifies the mute flags for the current active segment.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#setMuteArray(boolean[], boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteFlag">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteFlag (int trackId, bool muteFlag, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteFlag(int32 trackId, bool muteFlag, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteFlag", "(IZZ)Z", "GetSetMuteFlag_IZZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackId" Type="System.Int32" />
        <Parameter Name="muteFlag" Type="System.Boolean" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trackId">the index of the track to mute.</param>
        <param name="muteFlag">set to true to mute, false to unmute.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flag will be updated at the start of the
    next segment. If the segment is repeated, the flag will take effect the next time 
    segment is repeated.</param>
        <summary>Mutes or unmutes a single track.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Mutes or unmutes a single track.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#setMuteFlag(int, boolean, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteFlags">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteFlags (int muteFlags, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteFlags(int32 muteFlags, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteFlags", "(IZ)Z", "GetSetMuteFlags_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="muteFlags" Type="System.Int32" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="muteFlags">a bitmask to specify which MIDI tracks are muted. Bit 0 affects track 0,
    bit 1 affects track 1 etc.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flags will be updated at the start of the
    next segment. If the segment is repeated, the flags will take effect the next time 
    segment is repeated.</param>
        <summary>Modifies the mute flags.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Modifies the mute flags.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#setMuteFlags(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerClip">
      <MemberSignature Language="C#" Value="public virtual bool TriggerClip (int clipId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TriggerClip(int32 clipId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("triggerClip", "(I)Z", "GetTriggerClip_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="clipId">the identifier of the clip to trigger.</param>
        <summary>Schedules the playback of a clip.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedules the playback of a clip.
 This will automatically update the mute flags in sync with the JET Clip Marker (controller 
 103). The parameter clipID must be in the range of 0-63. After the call to triggerClip, when
 JET next encounters a controller event 103 with bits 0-5 of the value equal to clipID and 
 bit 6 set to 1, it will automatically unmute the track containing the controller event.
 When JET encounters the complementary controller event 103 with bits 0-5 of the value equal
 to clipID and bit 6 set to 0, it will mute the track again.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/JetPlayer.html#triggerClip(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
