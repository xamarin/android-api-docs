<Type Name="ImageReader" FullName="Android.Media.ImageReader">
  <TypeSignature Language="VB.NET" Value="Public Class ImageReader&#xA;Inherits Object&#xA;Implements IAutoCloseable, IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImageReader : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::Lang::IAutoCloseable" />
  <TypeSignature Language="C#" Value="public class ImageReader : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IAutoCloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageReader extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IAutoCloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Media.ImageReader" />
  <TypeSignature Language="F#" Value="type ImageReader = class&#xA;    inherit Object&#xA;    interface IAutoCloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IAutoCloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/ImageReader", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/ImageReader", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>The ImageReader class allows direct application access to image data
            rendered into a <c>android.view.Surface</c></summary>
    <remarks>
      <para>The ImageReader class allows direct application access to image data
            rendered into a <c>android.view.Surface</c></para>
      <para>Several Android media API classes accept Surface objects as targets to
            render to, including <c>MediaPlayer</c>, <c>MediaCodec</c>,
            <c>android.hardware.camera2.CameraDevice</c>, <c>ImageWriter</c> and
            <c>android.renderscript.Allocation RenderScript Allocations</c>. The image
            sizes and formats that can be used with each source vary, and should be
            checked in the documentation for the specific API.</para>
      <para>The image data is encapsulated in <c>Image</c> objects, and multiple such
            objects can be accessed at the same time, up to the number specified by the
            <c>maxImages</c> constructor parameter. New images sent to an ImageReader
            through its <c>Surface</c> are queued until accessed through the <c>#acquireLatestImage</c>
            or <c>#acquireNextImage</c> call. Due to memory limits, an image source will
            eventually stall or drop Images in trying to render to the Surface if the
            ImageReader does not obtain and release Images at a rate equal to the
            production rate.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/ImageReader" title="Reference documentation">Java documentation for <code>android.media.ImageReader</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ImageReader(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected ImageReader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Media.ImageReader : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Media.ImageReader" Usage="new Android.Media.ImageReader (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireLatestImage">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcquireLatestImage () As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Media::Image ^ AcquireLatestImage();" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.Image? AcquireLatestImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.Image AcquireLatestImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.AcquireLatestImage" />
      <MemberSignature Language="F#" Value="abstract member AcquireLatestImage : unit -&gt; Android.Media.Image&#xA;override this.AcquireLatestImage : unit -&gt; Android.Media.Image" Usage="imageReader.AcquireLatestImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireLatestImage", "()Landroid/media/Image;", "GetAcquireLatestImageHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireLatestImage", "()Landroid/media/Image;", "GetAcquireLatestImageHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquire the latest <c>Image</c> from the ImageReader's queue, dropping older
            <c>Image images</c>.</summary>
        <returns>latest frame of image data, or <c>null</c> if no image data is available.</returns>
        <remarks>
          <para>Acquire the latest <c>Image</c> from the ImageReader's queue, dropping older
            <c>Image images</c>. Returns <c>null</c> if no new image is available.</para>
          <para>This operation will acquire all the images possible from the ImageReader,
            but <c>#close</c> all images that aren't the latest. This function is
            recommended to use over <c>#acquireNextImage</c> for most use-cases, as it's
            more suited for real-time processing.</para>
          <para>Note that <c>#getMaxImages maxImages</c> should be at least 2 for
            <c>#acquireLatestImage</c> to be any different than <c>#acquireNextImage</c> -
            discarding all-but-the-newest <c>Image</c> requires temporarily acquiring two
            <c>Image Images</c> at once. Or more generally, calling <c>#acquireLatestImage</c>
            with less than two images of margin, that is
            <c>(maxImages - currentAcquiredImages &lt; 2)</c> will not discard as expected.</para>
          <para>This operation will fail by throwing an <c>IllegalStateException</c> if
            <c>maxImages</c> have been acquired with <c>#acquireLatestImage</c> or
            <c>#acquireNextImage</c>. In particular a sequence of <c>#acquireLatestImage</c>
            calls greater than <c>#getMaxImages</c> without calling <c>Image#close</c> in-between
            will exhaust the underlying queue. At such a time, <c>IllegalStateException</c>
            will be thrown until more images are
            released with <c>Image#close</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#acquireLatestImage()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.acquireLatestImage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if too many images are currently acquired
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireNextImage">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcquireNextImage () As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Media::Image ^ AcquireNextImage();" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.Image? AcquireNextImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.Image AcquireNextImage() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.AcquireNextImage" />
      <MemberSignature Language="F#" Value="abstract member AcquireNextImage : unit -&gt; Android.Media.Image&#xA;override this.AcquireNextImage : unit -&gt; Android.Media.Image" Usage="imageReader.AcquireNextImage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acquireNextImage", "()Landroid/media/Image;", "GetAcquireNextImageHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acquireNextImage", "()Landroid/media/Image;", "GetAcquireNextImageHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquire the next Image from the ImageReader's queue.</summary>
        <returns>a new frame of image data, or <c>null</c> if no image data is available.</returns>
        <remarks>
          <para>Acquire the next Image from the ImageReader's queue. Returns <c>null</c> if
            no new image is available.</para>
          <para>
            <i>Warning:</i> Consider using <c>#acquireLatestImage()</c> instead, as it will
            automatically release older images, and allow slower-running processing routines to catch
            up to the newest frame. Usage of <c>#acquireNextImage</c> is recommended for
            batch/background processing. Incorrectly using this function can cause images to appear
            with an ever-increasing delay, followed by a complete stall where no new images seem to
            appear.</para>
          <para>This operation will fail by throwing an <c>IllegalStateException</c> if
            <c>maxImages</c> have been acquired with <c>#acquireNextImage</c> or
            <c>#acquireLatestImage</c>. In particular a sequence of <c>#acquireNextImage</c> or
            <c>#acquireLatestImage</c> calls greater than <c>#getMaxImages maxImages</c> without
            calling <c>Image#close</c> in-between will exhaust the underlying queue. At such a time,
            <c>IllegalStateException</c> will be thrown until more images are released with
            <c>Image#close</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#acquireNextImage()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.acquireNextImage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if <c>maxImages</c> images are currently acquired</exception>
        <altmember cref="M:Android.Media.ImageReader.AcquireLatestImage" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="imageReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAutoCloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Free up all the resources associated with this ImageReader.</summary>
        <remarks>
          <para>Free up all the resources associated with this ImageReader.</para>
          <para>After calling this method, this ImageReader can not be used. Calling
            any methods on this ImageReader and Images previously provided by
            <c>#acquireNextImage</c> or <c>#acquireLatestImage</c>
            will result in an <c>IllegalStateException</c>, and attempting to read from
            <c>ByteBuffer ByteBuffers</c> returned by an earlier
            <c>Image.Plane#getBuffer Plane#getBuffer</c> call will
            have undefined behavior.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#close()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSpace">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataSpace As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DataSpace { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int DataSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataSpace" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.DataSpace" />
      <MemberSignature Language="F#" Value="member this.DataSpace : int" Usage="Android.Media.ImageReader.DataSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDataSpace", "()I", "GetGetDataSpaceHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDataSpace", "()I", "GetGetDataSpaceHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default dataspace of <c>Image Images</c>.</summary>
        <value>the expected dataspace of an Image.</value>
        <remarks>
          <para>The default dataspace of <c>Image Images</c>.</para>
          <para>Use this function if the ImageReader instance is created by builder pattern
            <c>ImageReader.Builder</c> and <c>Builder#setDefaultDataSpace</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getDataSpace()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getDataSpace()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardFreeBuffers">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DiscardFreeBuffers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DiscardFreeBuffers();" />
      <MemberSignature Language="C#" Value="public virtual void DiscardFreeBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardFreeBuffers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.DiscardFreeBuffers" />
      <MemberSignature Language="F#" Value="abstract member DiscardFreeBuffers : unit -&gt; unit&#xA;override this.DiscardFreeBuffers : unit -&gt; unit" Usage="imageReader.DiscardFreeBuffers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("discardFreeBuffers", "()V", "GetDiscardFreeBuffersHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("discardFreeBuffers", "()V", "GetDiscardFreeBuffersHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discard any free buffers owned by this ImageReader.</summary>
        <remarks>
          <para>Discard any free buffers owned by this ImageReader.</para>
          <para>Generally, the ImageReader caches buffers for reuse once they have been
            allocated, for best performance. However, sometimes it may be important to
            release all the cached, unused buffers to save on memory.</para>
          <para>Calling this method will discard all free cached buffers. This does not include any buffers
            associated with Images acquired from the ImageReader, any filled buffers waiting to be
            acquired, and any buffers currently in use by the source rendering buffers into the
            ImageReader's Surface.</para>
          <para>The ImageReader continues to be usable after this call, but may need to reallocate buffers
            when more buffers are needed for rendering.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#discardFreeBuffers()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.discardFreeBuffers()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HardwareBufferFormat">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HardwareBufferFormat As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HardwareBufferFormat { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int HardwareBufferFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HardwareBufferFormat" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.HardwareBufferFormat" />
      <MemberSignature Language="F#" Value="member this.HardwareBufferFormat : int" Usage="Android.Media.ImageReader.HardwareBufferFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHardwareBufferFormat", "()I", "GetGetHardwareBufferFormatHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHardwareBufferFormat", "()I", "GetGetHardwareBufferFormatHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default <c>HardwareBuffer</c> format of <c>Image Images</c>.</summary>
        <value>the expected <c>HardwareBuffer</c> format of an Image.</value>
        <remarks>
          <para>The default <c>HardwareBuffer</c> format of <c>Image Images</c>.</para>
          <para>Use this function if the ImageReader instance is created by builder pattern
            <c>ImageReader.Builder</c> and using <c>Builder#setDefaultHardwareBufferFormat</c> and
            <c>Builder#setDefaultDataSpace</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getHardwareBufferFormat()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getHardwareBufferFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Height { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.Height" />
      <MemberSignature Language="F#" Value="member this.Height : int" Usage="Android.Media.ImageReader.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default height of <c>Image Images</c>, in pixels.</summary>
        <value>the expected height of an Image</value>
        <remarks>
          <para>The default height of <c>Image Images</c>, in pixels.</para>
          <para>The height may be overridden by the producer sending buffers to this
            ImageReader's Surface. If so, the actual height of the images can be
            found using <c>Image#getHeight</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getHeight()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getHeight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageFormat">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImageFormat As ImageFormatType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Graphics::ImageFormatType ImageFormat { Android::Graphics::ImageFormatType get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.ImageFormatType ImageFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.ImageFormatType ImageFormat" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.ImageFormat" />
      <MemberSignature Language="F#" Value="member this.ImageFormat : Android.Graphics.ImageFormatType" Usage="Android.Media.ImageReader.ImageFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getImageFormat", "()I", "GetGetImageFormatHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getImageFormat", "()I", "GetGetImageFormatHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.ImageFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default <c>ImageFormat image format</c> of <c>Image Images</c>.</summary>
        <value>the expected format of an Image</value>
        <remarks>
          <para>The default <c>ImageFormat image format</c> of <c>Image Images</c>.</para>
          <para>Some color formats may be overridden by the producer sending buffers to
            this ImageReader's Surface if the default color format allows. ImageReader
            guarantees that all <c>Image Images</c> acquired from ImageReader
            (for example, with <c>#acquireNextImage</c>) will have a "compatible"
            format to what was specified in <c>#newInstance</c>.
            As of now, each format is only compatible to itself.
            The actual format of the images can be found using <c>Image#getFormat</c>.</para>
          <para>Use this function if the ImageReader instance is created by factory method
            <c>newInstance</c> function or by builder pattern <c>ImageReader.Builder</c> and using
            <c>Builder#setImageFormat</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getImageFormat()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getImageFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="T:Android.Graphics.ImageFormat" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.ImageReader.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxImages">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxImages As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxImages { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int MaxImages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxImages" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.MaxImages" />
      <MemberSignature Language="F#" Value="member this.MaxImages : int" Usage="Android.Media.ImageReader.MaxImages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaxImages", "()I", "GetGetMaxImagesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaxImages", "()I", "GetGetMaxImagesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum number of images that can be acquired from the ImageReader by any time (for example,
            with <c>#acquireNextImage</c>).</summary>
        <value>Maximum number of images for this ImageReader.</value>
        <remarks>
          <para>Maximum number of images that can be acquired from the ImageReader by any time (for example,
            with <c>#acquireNextImage</c>).</para>
          <para>An image is considered acquired after it's returned by a function from ImageReader, and
            until the Image is <c>Image#close closed</c> to release the image back to the ImageReader.</para>
          <para>Attempting to acquire more than <c>maxImages</c> concurrently will result in the
            acquire function throwing a <c>IllegalStateException</c>. Furthermore,
            while the max number of images have been acquired by the ImageReader user, the producer
            enqueueing additional images may stall until at least one image has been released.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getMaxImages()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getMaxImages()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Media.Image.Close" />
      </Docs>
    </Member>
    <Member MemberName="NewInstance">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NewInstance (width As Integer, height As Integer, format As ImageFormatType, maxImages As Integer) As ImageReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::ImageReader ^ NewInstance(int width, int height, Android::Graphics::ImageFormatType format, int maxImages);" />
      <MemberSignature Language="C#" Value="public static Android.Media.ImageReader NewInstance (int width, int height, Android.Graphics.ImageFormatType format, int maxImages);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.ImageReader NewInstance(int32 width, int32 height, valuetype Android.Graphics.ImageFormatType format, int32 maxImages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.NewInstance(System.Int32,System.Int32,Android.Graphics.ImageFormatType,System.Int32)" />
      <MemberSignature Language="F#" Value="static member NewInstance : int * int * Android.Graphics.ImageFormatType * int -&gt; Android.Media.ImageReader" Usage="Android.Media.ImageReader.NewInstance (width, height, format, maxImages)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newInstance", "(IIII)Landroid/media/ImageReader;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newInstance", "(IIII)Landroid/media/ImageReader;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ImageReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="format" Type="Android.Graphics.ImageFormatType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxImages" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The default width in pixels of the Images that this reader
                       will produce.</param>
        <param name="height">The default height in pixels of the Images that this reader
                       will produce.</param>
        <param name="format">The format of the Image that this reader will produce. This
                       must be one of the <c>android.graphics.ImageFormat</c> or
                       <c>android.graphics.PixelFormat</c> constants. Note that not
                       all formats are supported, like ImageFormat.NV21.</param>
        <param name="maxImages">The maximum number of images the user will want to
                       access simultaneously. This should be as small as possible to
                       limit memory use. Once maxImages Images are obtained by the
                       user, one of them has to be released before a new Image will
                       become available for access through
                       <c>#acquireLatestImage()</c> or <c>#acquireNextImage()</c>.
                       Must be greater than 0.</param>
        <summary>Create a new reader for images of the desired size and format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Create a new reader for images of the desired size and format.</para>
          <para>The <c>maxImages</c> parameter determines the maximum number of
            <c>Image</c> objects that can be be acquired from the
            <c>ImageReader</c> simultaneously. Requesting more buffers will use up
            more memory, so it is important to use only the minimum number necessary
            for the use case.</para>
          <para>The valid sizes and formats depend on the source of the image data.</para>
          <para>If the <c>format</c> is <c>ImageFormat#PRIVATE PRIVATE</c>, the created
            <c>ImageReader</c> will produce images that are not directly accessible
            by the application. The application can still acquire images from this
            <c>ImageReader</c>, and send them to the
            <c>android.hardware.camera2.CameraDevice camera</c> for reprocessing via
            <c>ImageWriter</c> interface. However, the <c>Image#getPlanes()
            getPlanes()</c> will return an empty array for <c>ImageFormat#PRIVATE
            PRIVATE</c> format images. The application can check if an existing reader's
            format by calling <c>#getImageFormat()</c>.</para>
          <para>
            <c>ImageFormat#PRIVATE PRIVATE</c> format <c>ImageReader
            ImageReaders</c> are more efficient to use when application access to image
            data is not necessary, compared to ImageReaders using other format such
            as <c>ImageFormat#YUV_420_888 YUV_420_888</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#newInstance(int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.media.ImageReader.newInstance(int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="T:Android.Media.Image" />
      </Docs>
    </Member>
    <Member MemberName="NewInstance">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NewInstance (width As Integer, height As Integer, format As ImageFormatType, maxImages As Integer, usage As Long) As ImageReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::ImageReader ^ NewInstance(int width, int height, Android::Graphics::ImageFormatType format, int maxImages, long usage);" />
      <MemberSignature Language="C#" Value="public static Android.Media.ImageReader NewInstance (int width, int height, Android.Graphics.ImageFormatType format, int maxImages, long usage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.ImageReader NewInstance(int32 width, int32 height, valuetype Android.Graphics.ImageFormatType format, int32 maxImages, int64 usage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.NewInstance(System.Int32,System.Int32,Android.Graphics.ImageFormatType,System.Int32,System.Int64)" />
      <MemberSignature Language="F#" Value="static member NewInstance : int * int * Android.Graphics.ImageFormatType * int * int64 -&gt; Android.Media.ImageReader" Usage="Android.Media.ImageReader.NewInstance (width, height, format, maxImages, usage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newInstance", "(IIIIJ)Landroid/media/ImageReader;", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newInstance", "(IIIIJ)Landroid/media/ImageReader;", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ImageReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="format" Type="Android.Graphics.ImageFormatType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxImages" Type="System.Int32" />
        <Parameter Name="usage" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="width">The default width in pixels of the Images that this reader will produce.</param>
        <param name="height">The default height in pixels of the Images that this reader will produce.</param>
        <param name="format">The format of the Image that this reader will produce. This must be one of the
                       <c>android.graphics.ImageFormat</c> or <c>android.graphics.PixelFormat</c>
                       constants. Note that not all formats are supported, like ImageFormat.NV21.</param>
        <param name="maxImages">The maximum number of images the user will want to access simultaneously.
                       This should be as small as possible to limit memory use. Once maxImages Images are
                       obtained by the user, one of them has to be released before a new Image will
                       become available for access through <c>#acquireLatestImage()</c> or
                       <c>#acquireNextImage()</c>. Must be greater than 0.</param>
        <param name="usage">The intended usage of the images produced by this ImageReader. See the usages
                         on <c>HardwareBuffer</c> for a list of valid usage bits. See also
                         <c>HardwareBuffer#isSupported(int, int, int, int, long)</c> for checking
                         if a combination is supported. If it's not supported this will throw
                         an <c>IllegalArgumentException</c>.</param>
        <summary>Create a new reader for images of the desired size, format and consumer usage flag.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Create a new reader for images of the desired size, format and consumer usage flag.</para>
          <para>The <c>maxImages</c> parameter determines the maximum number of <c>Image</c> objects that
            can be be acquired from the <c>ImageReader</c> simultaneously. Requesting more buffers will
            use up more memory, so it is important to use only the minimum number necessary for the use
            case.</para>
          <para>The valid sizes and formats depend on the source of the image data.</para>
          <para>The format and usage flag combination describes how the buffer will be used by
            consumer end-points. For example, if the application intends to send the images to
            <c>android.media.MediaCodec</c> or <c>android.media.MediaRecorder</c> for hardware video
            encoding, the format and usage flag combination needs to be
            <c>ImageFormat#PRIVATE PRIVATE</c> and <c>HardwareBuffer#USAGE_VIDEO_ENCODE</c>. When an
            <c>ImageReader</c> object is created with a valid size and such format/usage flag
            combination, the application can send the <c>Image images</c> to an <c>ImageWriter</c> that
            is created with the input <c>android.view.Surface</c> provided by the
            <c>android.media.MediaCodec</c> or <c>android.media.MediaRecorder</c>.</para>
          <para>If the <c>format</c> is <c>ImageFormat#PRIVATE PRIVATE</c>, the created <c>ImageReader</c>
            will produce images that are not directly accessible by the application. The application can
            still acquire images from this <c>ImageReader</c>, and send them to the
            <c>android.hardware.camera2.CameraDevice camera</c> for reprocessing, or to the
            <c>android.media.MediaCodec</c> / <c>android.media.MediaRecorder</c> for hardware video
            encoding via <c>ImageWriter</c> interface. However, the <c>Image#getPlanes()
            getPlanes()</c> will return an empty array for <c>ImageFormat#PRIVATE PRIVATE</c> format
            images. The application can check if an existing reader's format by calling
            <c>#getImageFormat()</c>.</para>
          <para>
            <c>ImageFormat#PRIVATE PRIVATE</c> format <c>ImageReader ImageReaders</c> are more
            efficient to use when application access to image data is not necessary, compared to
            ImageReaders using other format such as <c>ImageFormat#YUV_420_888 YUV_420_888</c>.</para>
          <para>Note that not all format and usage flag combinations are supported by the
            <c>ImageReader</c>. Below are the supported combinations by the <c>ImageReader</c>
            (assuming the consumer end-points support the such image consumption, e.g., hardware video
            encoding).
            &lt;table&gt;
            &lt;tr&gt;
              &lt;th&gt;Format&lt;/th&gt;
              &lt;th&gt;Compatible usage flags&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;non-<c>android.graphics.ImageFormat#PRIVATE PRIVATE</c> formats defined by
              <c>android.graphics.ImageFormat ImageFormat</c> or
              <c>android.graphics.PixelFormat PixelFormat</c>&lt;/td&gt;
              &lt;td&gt;<c>HardwareBuffer#USAGE_CPU_READ_RARELY</c> or
              <c>HardwareBuffer#USAGE_CPU_READ_OFTEN</c>&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;<c>android.graphics.ImageFormat#PRIVATE</c>&lt;/td&gt;
              &lt;td&gt;<c>HardwareBuffer#USAGE_VIDEO_ENCODE</c> or
              <c>HardwareBuffer#USAGE_GPU_SAMPLED_IMAGE</c>, or combined&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
            Using other combinations may result in <c>IllegalArgumentException</c>. Additionally,
            specifying <c>HardwareBuffer#USAGE_CPU_WRITE_RARELY</c> or
            <c>HardwareBuffer#USAGE_CPU_WRITE_OFTEN</c> and writing to the ImageReader's buffers
            might break assumptions made by some producers, and should be used with caution.</para>
          <para>If the <c>ImageReader</c> is used as an output target for a <c>android.hardware.camera2.CameraDevice</c>, and if the usage flag contains
            <c>HardwareBuffer#USAGE_VIDEO_ENCODE</c>, the timestamps of the
            <c>Image images</c> produced by the <c>ImageReader</c> won't be in the same timebase as
            <c>android.os.SystemClock#elapsedRealtimeNanos</c>, even if
            <c>android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_TIMESTAMP_SOURCE</c> is
            <c>android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME</c>.
            Instead, the timestamps will be roughly in the same timebase as in
            <c>android.os.SystemClock#uptimeMillis</c>, so that A/V synchronization could work for
            video recording. In this case, the timestamps from the <c>ImageReader</c> with
            <c>HardwareBuffer#USAGE_VIDEO_ENCODE</c> usage flag may not be directly comparable with
            timestamps of other streams or capture result metadata.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#newInstance(int,%20int,%20int,%20int,%20long)" title="Reference documentation">Java documentation for <code>android.media.ImageReader.newInstance(int, int, int, int, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnImageAvailableListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnImageAvailableListener (listener As ImageReader.IOnImageAvailableListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnImageAvailableListener(Android::Media::ImageReader::IOnImageAvailableListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnImageAvailableListener (Android.Media.ImageReader.IOnImageAvailableListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnImageAvailableListener(class Android.Media.ImageReader/IOnImageAvailableListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.ImageReader.SetOnImageAvailableListener(Android.Media.ImageReader.IOnImageAvailableListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetOnImageAvailableListener : Android.Media.ImageReader.IOnImageAvailableListener * Android.OS.Handler -&gt; unit&#xA;override this.SetOnImageAvailableListener : Android.Media.ImageReader.IOnImageAvailableListener * Android.OS.Handler -&gt; unit" Usage="imageReader.SetOnImageAvailableListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnImageAvailableListener", "(Landroid/media/ImageReader$OnImageAvailableListener;Landroid/os/Handler;)V", "GetSetOnImageAvailableListener_Landroid_media_ImageReader_OnImageAvailableListener_Landroid_os_Handler_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnImageAvailableListener", "(Landroid/media/ImageReader$OnImageAvailableListener;Landroid/os/Handler;)V", "GetSetOnImageAvailableListener_Landroid_media_ImageReader_OnImageAvailableListener_Landroid_os_Handler_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.ImageReader+IOnImageAvailableListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be run.</param>
        <param name="handler">The handler on which the listener should be invoked, or null
                       if the listener should be invoked on the calling thread's looper.</param>
        <summary>Register a listener to be invoked when a new image becomes available
            from the ImageReader.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#setOnImageAvailableListener(android.media.OnImageAvailableListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.media.ImageReader.setOnImageAvailableListener(android.media.OnImageAvailableListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">If no handler specified and the calling thread has no looper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Surface As Surface" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Views::Surface ^ Surface { Android::Views::Surface ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.Surface? Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface Surface" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.Surface" />
      <MemberSignature Language="F#" Value="member this.Surface : Android.Views.Surface" Usage="Android.Media.ImageReader.Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a <c>Surface</c> that can be used to produce <c>Image Images</c> for this
            <c>ImageReader</c>.</summary>
        <value>A <c>Surface</c> to use for a drawing target for various APIs.</value>
        <remarks>
          <para>Get a <c>Surface</c> that can be used to produce <c>Image Images</c> for this
            <c>ImageReader</c>.</para>
          <para>Until valid image data is rendered into this <c>Surface</c>, the
            <c>#acquireNextImage</c> method will return <c>null</c>. Only one source
            can be producing data into this Surface at the same time, although the
            same <c>Surface</c> can be reused with a different API once the first source is
            disconnected from the <c>Surface</c>.</para>
          <para>Please note that holding on to the Surface object returned by this method is not enough
            to keep its parent ImageReader from being reclaimed. In that sense, a Surface acts like a
            <c>java.lang.ref.WeakReference weak reference</c> to the ImageReader that provides it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getSurface()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getSurface()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.ImageReader.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.ImageReader.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Usage">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Usage As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Usage { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long Usage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Usage" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.Usage" />
      <MemberSignature Language="F#" Value="member this.Usage : int64" Usage="Android.Media.ImageReader.Usage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getUsage", "()J", "GetGetUsageHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getUsage", "()J", "GetGetUsageHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The usage flag of images that can be produced by the ImageReader.</summary>
        <value>The usage flag of the images for this ImageReader.</value>
        <remarks>
          <para>The usage flag of images that can be produced by the ImageReader.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getUsage()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getUsage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Width { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:Android.Media.ImageReader.Width" />
      <MemberSignature Language="F#" Value="member this.Width : int" Usage="Android.Media.ImageReader.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default width of <c>Image Images</c>, in pixels.</summary>
        <value>the expected width of an Image</value>
        <remarks>
          <para>The default width of <c>Image Images</c>, in pixels.</para>
          <para>The width may be overridden by the producer sending buffers to this
            ImageReader's Surface. If so, the actual width of the images can be
            found using <c>Image#getWidth</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/ImageReader#getWidth()" title="Reference documentation">Java documentation for <code>android.media.ImageReader.getWidth()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
