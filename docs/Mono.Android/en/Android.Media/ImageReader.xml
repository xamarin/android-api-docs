<Type Name="ImageReader" FullName="Android.Media.ImageReader">
  <TypeSignature Language="C#" Value="public class ImageReader : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageReader extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/ImageReader", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">The ImageReader class allows direct application access to image data
 rendered into a <c><see cref="T:Android.Views.Surface" /></c></para>
      <para tool="javadoc-to-mdoc">Several Android media API classes accept Surface objects as targets to
 render to, including <c><see cref="T:Android.Media.MediaPlayer" /></c>, <c><see cref="T:Android.Media.MediaCodec" /></c>,
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>, <c><see cref="T:Android.Media.ImageWriter" /></c> and
 <c><see cref="T:Android.Renderscripts.Allocation" /></c>. The image
 sizes and formats that can be used with each source vary, and should be
 checked in the documentation for the specific API.</para>
      <para tool="javadoc-to-mdoc">The image data is encapsulated in <c><see cref="T:Android.Media.Image" /></c> objects, and multiple such
 objects can be accessed at the same time, up to the number specified by the
 <c>maxImages</c> constructor parameter. New images sent to an ImageReader
 through its <c><see cref="T:Android.Views.Surface" /></c> are queued until accessed through the <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c>
 or <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> call. Due to memory limits, an image source will
 eventually stall or drop Images in trying to render to the Surface if the
 ImageReader does not obtain and release Images at a rate equal to the
 production rate.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/ImageReader.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ImageReader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireLatestImage">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Image AcquireLatestImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.Image AcquireLatestImage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireLatestImage", "()Landroid/media/Image;", "GetAcquireLatestImageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Acquire the latest <c><see cref="T:Android.Media.Image" /></c> from the ImageReader's queue, dropping older
 <c><see cref="T:Android.Media.Image" /></c>. Returns <c>null</c> if no new image is available.
 </para>
          <para tool="javadoc-to-mdoc">
 This operation will acquire all the images possible from the ImageReader,
 but <c><see cref="M:Android.Media.ImageReader.Close" /></c> all images that aren't the latest. This function is
 recommended to use over <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> for most use-cases, as it's
 more suited for real-time processing.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that <c><see cref="P:Android.Media.ImageReader.MaxImages" /></c> should be at least 2 for
 <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c> to be any different than <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> -
 discarding all-but-the-newest <c><see cref="T:Android.Media.Image" /></c> requires temporarily acquiring two
 <c><see cref="T:Android.Media.Image" /></c> at once. Or more generally, calling <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c>
 with less than two images of margin, that is
 <c>(maxImages - currentAcquiredImages </c> will not discard as expected.
 </para>
          <para tool="javadoc-to-mdoc">
 This operation will fail by throwing an <c><see cref="T:Java.Lang.IllegalStateException" /></c> if
 <c>maxImages</c> have been acquired with <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c> or
 <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c>. In particular a sequence of <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c>
 calls greater than <c><see cref="P:Android.Media.ImageReader.MaxImages" /></c> without calling <c><see cref="M:Android.Media.Image.Close" /></c> in-between
 will exhaust the underlying queue. At such a time, <c><see cref="T:Java.Lang.IllegalStateException" /></c>
 will be thrown until more images are
 released with <c><see cref="M:Android.Media.Image.Close" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#acquireLatestImage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if too many images are currently acquired
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireNextImage">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Image AcquireNextImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.Image AcquireNextImage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquireNextImage", "()Landroid/media/Image;", "GetAcquireNextImageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Acquire the next Image from the ImageReader's queue. Returns <c>null</c> if
 no new image is available.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <i>Warning:</i>
            </format> Consider using <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c> instead, as it will
 automatically release older images, and allow slower-running processing routines to catch
 up to the newest frame. Usage of <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> is recommended for
 batch/background processing. Incorrectly using this function can cause images to appear
 with an ever-increasing delay, followed by a complete stall where no new images seem to
 appear.
 </para>
          <para tool="javadoc-to-mdoc">
 This operation will fail by throwing an <c><see cref="T:Java.Lang.IllegalStateException" /></c> if
 <c>maxImages</c> have been acquired with <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> or
 <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c>. In particular a sequence of <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> or
 <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c> calls greater than <c><see cref="P:Android.Media.ImageReader.MaxImages" /></c> without
 calling <c><see cref="M:Android.Media.Image.Close" /></c> in-between will exhaust the underlying queue. At such a time,
 <c><see cref="T:Java.Lang.IllegalStateException" /></c> will be thrown until more images are released with
 <c><see cref="M:Android.Media.Image.Close" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#acquireNextImage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if <c>maxImages</c> images are currently acquired</exception>
        <altmember cref="M:Android.Media.ImageReader.AcquireLatestImage" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Free up all the resources associated with this ImageReader.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Free up all the resources associated with this ImageReader.

 </para>
          <para tool="javadoc-to-mdoc">
 After calling this method, this ImageReader can not be used. Calling
 any methods on this ImageReader and Images previously provided by
 <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> or <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c>
 will result in an <c><see cref="T:Java.Lang.IllegalStateException" /></c>, and attempting to read from
 <c><see cref="T:Java.Nio.ByteBuffer" /></c> returned by an earlier
 <c><see cref="!:NoType:android/media/Image$Plane;Href=../../../reference/android/media/Image.Plane.html#getBuffer()" /></c> call will
 have undefined behavior.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public virtual int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default height of <c><see cref="T:Android.Media.Image" /></c>, in pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The default height of <c><see cref="T:Android.Media.Image" /></c>, in pixels.

 </para>
          <para tool="javadoc-to-mdoc">The height may be overridden by the producer sending buffers to this
 ImageReader's Surface. If so, the actual height of the images can be
 found using <c><see cref="P:Android.Media.Image.Height" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#getHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageFormat">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.ImageFormatType ImageFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.ImageFormatType ImageFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getImageFormat", "()I", "GetGetImageFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.ImageFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default <c><see cref="T:Android.Graphics.ImageFormat" /></c> of <c><see cref="T:Android.Media.Image" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The default <c><see cref="T:Android.Graphics.ImageFormat" /></c> of <c><see cref="T:Android.Media.Image" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Some color formats may be overridden by the producer sending buffers to
 this ImageReader's Surface if the default color format allows. ImageReader
 guarantees that all <c><see cref="T:Android.Media.Image" /></c> acquired from ImageReader
 (for example, with <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c>) will have a "compatible"
 format to what was specified in <c><see cref="M:Android.Media.ImageReader.NewInstance(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.
 As of now, each format is only compatible to itself.
 The actual format of the images can be found using <c><see cref="P:Android.Media.Image.Format" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#getImageFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Graphics.ImageFormat" />
      </Docs>
    </Member>
    <Member MemberName="MaxImages">
      <MemberSignature Language="C#" Value="public virtual int MaxImages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxImages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxImages", "()I", "GetGetMaxImagesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum number of images that can be acquired from the ImageReader by any time (for example,
 with <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c>).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum number of images that can be acquired from the ImageReader by any time (for example,
 with <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c>).

 </para>
          <para tool="javadoc-to-mdoc">An image is considered acquired after it's returned by a function from ImageReader, and
 until the Image is <c><see cref="M:Android.Media.Image.Close" /></c> to release the image back to the ImageReader.
 </para>
          <para tool="javadoc-to-mdoc">Attempting to acquire more than <c>maxImages</c> concurrently will result in the
 acquire function throwing a <c><see cref="T:Java.Lang.IllegalStateException" /></c>. Furthermore,
 while the max number of images have been acquired by the ImageReader user, the producer
 enqueueing additional images may stall until at least one image has been released. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#getMaxImages()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Media.Image.Close" />
      </Docs>
    </Member>
    <Member MemberName="NewInstance">
      <MemberSignature Language="C#" Value="public static Android.Media.ImageReader NewInstance (int width, int height, Android.Graphics.ImageFormatType format, int maxImages);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.ImageReader NewInstance(int32 width, int32 height, valuetype Android.Graphics.ImageFormatType format, int32 maxImages) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newInstance", "(IIII)Landroid/media/ImageReader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ImageReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="format" Type="Android.Graphics.ImageFormatType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxImages" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The default width in pixels of the Images that this reader
            will produce.</param>
        <param name="height">The default height in pixels of the Images that this reader
            will produce.</param>
        <param name="format">The format of the Image that this reader will produce. This
            must be one of the <c><see cref="T:Android.Graphics.ImageFormat" /></c> or
            <c><see cref="T:Android.Graphics.PixelFormat" /></c> constants. Note that not
            all formats are supported, like ImageFormat.NV21.</param>
        <param name="maxImages">The maximum number of images the user will want to
            access simultaneously. This should be as small as possible to
            limit memory use. Once maxImages Images are obtained by the
            user, one of them has to be released before a new Image will
            become available for access through
            <c><see cref="M:Android.Media.ImageReader.AcquireLatestImage" /></c> or <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c>.
            Must be greater than 0.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 Create a new reader for images of the desired size and format.
 </para>
          <para tool="javadoc-to-mdoc">
 The <c>maxImages</c> parameter determines the maximum number of
 <c><see cref="T:Android.Media.Image" /></c> objects that can be be acquired from the
 <c>ImageReader</c> simultaneously. Requesting more buffers will use up
 more memory, so it is important to use only the minimum number necessary
 for the use case.
 </para>
          <para tool="javadoc-to-mdoc">
 The valid sizes and formats depend on the source of the image data.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>format</c> is <c><see cref="F:Android.Graphics.ImageFormat.Private" /></c>, the created
 <c><see cref="T:Android.Media.ImageReader" /></c> will produce images that are not directly accessible
 by the application. The application can still acquire images from this
 <c><see cref="T:Android.Media.ImageReader" /></c>, and send them to the
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c> for reprocessing via
 <c><see cref="T:Android.Media.ImageWriter" /></c> interface. However, the <c><see cref="M:Android.Media.Image.GetPlanes" /></c> will return an empty array for <c><see cref="F:Android.Graphics.ImageFormat.Private" /></c> format images. The application can check if an existing reader's
 format by calling <c><see cref="P:Android.Media.ImageReader.ImageFormat" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="F:Android.Graphics.ImageFormat.Private" />
            </c> format <c><see cref="T:Android.Media.ImageReader" /></c> are more efficient to use when application access to image
 data is not necessary, compared to ImageReaders using other format such
 as <c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#newInstance(int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Media.Image" />
      </Docs>
    </Member>
    <Member MemberName="SetOnImageAvailableListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnImageAvailableListener (Android.Media.ImageReader.IOnImageAvailableListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnImageAvailableListener(class Android.Media.ImageReader/IOnImageAvailableListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnImageAvailableListener", "(Landroid/media/ImageReader$OnImageAvailableListener;Landroid/os/Handler;)V", "GetSetOnImageAvailableListener_Landroid_media_ImageReader_OnImageAvailableListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.ImageReader+IOnImageAvailableListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The listener that will be run.</param>
        <param name="handler">The handler on which the listener should be invoked, or null
            if the listener should be invoked on the calling thread's looper.</param>
        <summary>Register a listener to be invoked when a new image becomes available
 from the ImageReader.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a listener to be invoked when a new image becomes available
 from the ImageReader.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#setOnImageAvailableListener(android.media.ImageReader.OnImageAvailableListener, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">If no handler specified and the calling thread has no looper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Surface Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Get a <c><see cref="T:Android.Views.Surface" /></c> that can be used to produce <c><see cref="T:Android.Media.Image" /></c> for this
 <c>ImageReader</c>.</para>
          <para tool="javadoc-to-mdoc">Until valid image data is rendered into this <c><see cref="T:Android.Views.Surface" /></c>, the
 <c><see cref="M:Android.Media.ImageReader.AcquireNextImage" /></c> method will return <c>null</c>. Only one source
 can be producing data into this Surface at the same time, although the
 same <c><see cref="T:Android.Views.Surface" /></c> can be reused with a different API once the first source is
 disconnected from the <c><see cref="T:Android.Views.Surface" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#getSurface()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public virtual int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default width of <c><see cref="T:Android.Media.Image" /></c>, in pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The default width of <c><see cref="T:Android.Media.Image" /></c>, in pixels.

 </para>
          <para tool="javadoc-to-mdoc">The width may be overridden by the producer sending buffers to this
 ImageReader's Surface. If so, the actual width of the images can be
 found using <c><see cref="P:Android.Media.Image.Width" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/ImageReader.html#getWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
