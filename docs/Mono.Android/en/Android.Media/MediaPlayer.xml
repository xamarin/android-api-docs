<Type Name="MediaPlayer" FullName="Android.Media.MediaPlayer">
  <TypeSignature Language="VB.NET" Value="Public Class MediaPlayer&#xA;Inherits Object&#xA;Implements IAudioRouting, IDisposable, IJavaPeerable, IVolumeAutomation" />
  <TypeSignature Language="C++ CLI" Value="public ref class MediaPlayer : Java::Lang::Object, Android::Media::IAudioRouting, Android::Media::IVolumeAutomation, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public class MediaPlayer : Java.Lang.Object, Android.Media.IAudioRouting, Android.Media.IVolumeAutomation, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MediaPlayer extends Java.Lang.Object implements class Android.Media.IAudioRouting, class Android.Media.IVolumeAutomation, class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Media.MediaPlayer" />
  <TypeSignature Language="F#" Value="type MediaPlayer = class&#xA;    inherit Object&#xA;    interface IAudioRouting&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IVolumeAutomation" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Media.IAudioRouting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Media.IVolumeAutomation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/MediaPlayer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/MediaPlayer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>MediaPlayer class can be used to control playback of audio/video files and streams.</summary>
    <remarks>
      <para>MediaPlayer class can be used to control playback of audio/video files and streams.</para>
      <para>MediaPlayer is not thread-safe. Creation of and all access to player instances
            should be on the same thread. If registering callbacks,
            the thread must have a Looper.</para>
      <para>Topics covered here are:
            &lt;ol&gt;
            &lt;li&gt;State Diagram&lt;li&gt;Valid and Invalid States&lt;li&gt;Permissions&lt;li&gt;Register informational and error callbacks&lt;/ol&gt;
            
            &lt;div class="special reference"&gt;
            &lt;h3&gt;Developer Guides&lt;/h3&gt;</para>
      <para>For more information about how to use MediaPlayer, read the
            <see href="https://developer.android.com/guide/topics/media/mediaplayer.html">Media Playback</see> developer guide.</para>
      <para>&lt;/div&gt;
            
            "StateDiagram"&gt;&lt;h3&gt;State Diagram&lt;/h3&gt;</para>
      <para>Playback control of audio/video files and streams is managed as a state
            machine. The following diagram shows the life cycle and the states of a
            MediaPlayer object driven by the supported playback control operations.
            The ovals represent the states a MediaPlayer object may reside
            in. The arcs represent the playback control operations that drive the object
            state transition. There are two types of arcs. The arcs with a single arrow
            head represent synchronous method calls, while those with
            a double arrow head represent asynchronous method calls.</para>
      <para>&lt;img src="../../../images/mediaplayer_state_diagram.gif"
                    alt="MediaPlayer State diagram"
                    border="0" /&gt;</para>
      <para>From this state diagram, one can see that a MediaPlayer object has the
               following states:</para>
      <para>&lt;ul&gt;
                &lt;li&gt;When a MediaPlayer object is just created using <c>new</c> or
                    after <c>#reset()</c> is called, it is in the &lt;em&gt;Idle&lt;/em&gt; state; and after
                    <c>#release()</c> is called, it is in the &lt;em&gt;End&lt;/em&gt; state. Between these
                    two states is the life cycle of the MediaPlayer object.
                    &lt;ul&gt;
                    &lt;li&gt;There is a subtle but important difference between a newly constructed
                    MediaPlayer object and the MediaPlayer object after <c>#reset()</c>
                    is called. It is a programming error to invoke methods such
                    as <c>#getCurrentPosition()</c>,
                    <c>#getDuration()</c>, <c>#getVideoHeight()</c>,
                    <c>#getVideoWidth()</c>, <c>#setAudioAttributes(AudioAttributes)</c>,
                    <c>#setLooping(boolean)</c>,
                    <c>#setVolume(float, float)</c>, <c>#pause()</c>, <c>#start()</c>,
                    <c>#stop()</c>, <c>#seekTo(long, int)</c>, <c>#prepare()</c> or
                    <c>#prepareAsync()</c> in the &lt;em&gt;Idle&lt;/em&gt; state for both cases. If any of these
                    methods is called right after a MediaPlayer object is constructed,
                    the user supplied callback method OnErrorListener.onError() won't be
                    called by the internal player engine and the object state remains
                    unchanged; but if these methods are called right after <c>#reset()</c>,
                    the user supplied callback method OnErrorListener.onError() will be
                    invoked by the internal player engine and the object will be
                    transfered to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/li&gt;
                    &lt;li&gt;You must keep a reference to a MediaPlayer instance to prevent it from being garbage
                    collected. If a MediaPlayer instance is garbage collected, <c>#release</c> will be
                    called, causing any ongoing playback to stop.
                    &lt;li&gt;You must call <c>#release()</c> once you have finished using an instance to release
                    acquired resources, such as memory and codecs. Once you have called <c>#release</c>, you
                    must no longer interact with the released instance.
                    &lt;li&gt;MediaPlayer objects created using <c>new</c> is in the
                    &lt;em&gt;Idle&lt;/em&gt; state, while those created with one
                    of the overloaded convenient <c>create</c> methods are &lt;em&gt;NOT&lt;/em&gt;
                    in the &lt;em&gt;Idle&lt;/em&gt; state. In fact, the objects are in the &lt;em&gt;Prepared&lt;/em&gt;
                    state if the creation using <c>create</c> method is successful.
                    &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;In general, some playback control operation may fail due to various
                    reasons, such as unsupported audio/video format, poorly interleaved
                    audio/video, resolution too high, streaming timeout, and the like.
                    Thus, error reporting and recovery is an important concern under
                    these circumstances. Sometimes, due to programming errors, invoking a playback
                    control operation in an invalid state may also occur. Under all these
                    error conditions, the internal player engine invokes a user supplied
                    OnErrorListener.onError() method if an OnErrorListener has been
                    registered beforehand via
                    <c>#setOnErrorListener(android.media.MediaPlayer.OnErrorListener)</c>.
                    &lt;ul&gt;
                    &lt;li&gt;It is important to note that once an error occurs, the
                    MediaPlayer object enters the &lt;em&gt;Error&lt;/em&gt; state (except as noted
                    above), even if an error listener has not been registered by the application.&lt;/li&gt;
                    &lt;li&gt;In order to reuse a MediaPlayer object that is in the &lt;em&gt;
                    Error&lt;/em&gt; state and recover from the error,
                    <c>#reset()</c> can be called to restore the object to its &lt;em&gt;Idle&lt;/em&gt;
                    state.&lt;/li&gt;
                    &lt;li&gt;It is good programming practice to have your application
                    register a OnErrorListener to look out for error notifications from
                    the internal player engine.&lt;/li&gt;
                    &lt;li&gt;IllegalStateException is
                    thrown to prevent programming errors such as calling <c>#prepare()</c>,
                    <c>#prepareAsync()</c>, or one of the overloaded <c>setDataSource
                    </c> methods in an invalid state. &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;Calling
                    <c>#setDataSource(FileDescriptor)</c>, or
                    <c>#setDataSource(String)</c>, or
                    <c>#setDataSource(Context, Uri)</c>, or
                    <c>#setDataSource(FileDescriptor, long, long)</c>, or
                    <c>#setDataSource(MediaDataSource)</c> transfers a
                    MediaPlayer object in the &lt;em&gt;Idle&lt;/em&gt; state to the
                    &lt;em&gt;Initialized&lt;/em&gt; state.
                    &lt;ul&gt;
                    &lt;li&gt;An IllegalStateException is thrown if
                    setDataSource() is called in any other state.&lt;/li&gt;
                    &lt;li&gt;It is good programming
                    practice to always look out for <c>IllegalArgumentException</c>
                    and <c>IOException</c> that may be thrown from the overloaded
                    <c>setDataSource</c> methods.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;A MediaPlayer object must first enter the &lt;em&gt;Prepared&lt;/em&gt; state
                    before playback can be started.
                    &lt;ul&gt;
                    &lt;li&gt;There are two ways (synchronous vs.
                    asynchronous) that the &lt;em&gt;Prepared&lt;/em&gt; state can be reached:
                    either a call to <c>#prepare()</c> (synchronous) which
                    transfers the object to the &lt;em&gt;Prepared&lt;/em&gt; state once the method call
                    returns, or a call to <c>#prepareAsync()</c> (asynchronous) which
                    first transfers the object to the &lt;em&gt;Preparing&lt;/em&gt; state after the
                    call returns (which occurs almost right away) while the internal
                    player engine continues working on the rest of preparation work
                    until the preparation work completes. When the preparation completes or when <c>#prepare()</c> call returns,
                    the internal player engine then calls a user supplied callback method,
                    onPrepared() of the OnPreparedListener interface, if an
                    OnPreparedListener is registered beforehand via <c>#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)</c>.&lt;/li&gt;
                    &lt;li&gt;It is important to note that
                    the &lt;em&gt;Preparing&lt;/em&gt; state is a transient state, and the behavior
                    of calling any method with side effect while a MediaPlayer object is
                    in the &lt;em&gt;Preparing&lt;/em&gt; state is undefined.&lt;/li&gt;
                    &lt;li&gt;An IllegalStateException is
                    thrown if <c>#prepare()</c> or <c>#prepareAsync()</c> is called in
                    any other state.&lt;/li&gt;
                    &lt;li&gt;While in the &lt;em&gt;Prepared&lt;/em&gt; state, properties
                    such as audio/sound volume, screenOnWhilePlaying, looping can be
                    adjusted by invoking the corresponding set methods.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;To start the playback, <c>#start()</c> must be called. After
                    <c>#start()</c> returns successfully, the MediaPlayer object is in the
                    &lt;em&gt;Started&lt;/em&gt; state. <c>#isPlaying()</c> can be called to test
                    whether the MediaPlayer object is in the &lt;em&gt;Started&lt;/em&gt; state.
                    &lt;ul&gt;
                    &lt;li&gt;While in the &lt;em&gt;Started&lt;/em&gt; state, the internal player engine calls
                    a user supplied OnBufferingUpdateListener.onBufferingUpdate() callback
                    method if a OnBufferingUpdateListener has been registered beforehand
                    via <c>#setOnBufferingUpdateListener(OnBufferingUpdateListener)</c>.
                    This callback allows applications to keep track of the buffering status
                    while streaming audio/video.&lt;/li&gt;
                    &lt;li&gt;Calling <c>#start()</c> has no effect
                    on a MediaPlayer object that is already in the &lt;em&gt;Started&lt;/em&gt; state.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;Playback can be paused and stopped, and the current playback position
                    can be adjusted. Playback can be paused via <c>#pause()</c>. When the call to
                    <c>#pause()</c> returns, the MediaPlayer object enters the
                    &lt;em&gt;Paused&lt;/em&gt; state. Note that the transition from the &lt;em&gt;Started&lt;/em&gt;
                    state to the &lt;em&gt;Paused&lt;/em&gt; state and vice versa happens
                    asynchronously in the player engine. It may take some time before
                    the state is updated in calls to <c>#isPlaying()</c>, and it can be
                    a number of seconds in the case of streamed content.
                    &lt;ul&gt;
                    &lt;li&gt;Calling <c>#start()</c> to resume playback for a paused
                    MediaPlayer object, and the resumed playback
                    position is the same as where it was paused. When the call to
                    <c>#start()</c> returns, the paused MediaPlayer object goes back to
                    the &lt;em&gt;Started&lt;/em&gt; state.&lt;/li&gt;
                    &lt;li&gt;Calling <c>#pause()</c> has no effect on
                    a MediaPlayer object that is already in the &lt;em&gt;Paused&lt;/em&gt; state.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;Calling  <c>#stop()</c> stops playback and causes a
                    MediaPlayer in the &lt;em&gt;Started&lt;/em&gt;, &lt;em&gt;Paused&lt;/em&gt;, &lt;em&gt;Prepared
                    &lt;/em&gt; or &lt;em&gt;PlaybackCompleted&lt;/em&gt; state to enter the
                    &lt;em&gt;Stopped&lt;/em&gt; state.
                    &lt;ul&gt;
                    &lt;li&gt;Once in the &lt;em&gt;Stopped&lt;/em&gt; state, playback cannot be started
                    until <c>#prepare()</c> or <c>#prepareAsync()</c> are called to set
                    the MediaPlayer object to the &lt;em&gt;Prepared&lt;/em&gt; state again.&lt;/li&gt;
                    &lt;li&gt;Calling <c>#stop()</c> has no effect on a MediaPlayer
                    object that is already in the &lt;em&gt;Stopped&lt;/em&gt; state.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;The playback position can be adjusted with a call to
                    <c>#seekTo(long, int)</c>.
                    &lt;ul&gt;
                    &lt;li&gt;Although the asynchronuous <c>#seekTo(long, int)</c>
                    call returns right away, the actual seek operation may take a while to
                    finish, especially for audio/video being streamed. When the actual
                    seek operation completes, the internal player engine calls a user
                    supplied OnSeekComplete.onSeekComplete() if an OnSeekCompleteListener
                    has been registered beforehand via
                    <c>#setOnSeekCompleteListener(OnSeekCompleteListener)</c>.&lt;/li&gt;
                    &lt;li&gt;Please
                    note that <c>#seekTo(long, int)</c> can also be called in the other states,
                    such as &lt;em&gt;Prepared&lt;/em&gt;, &lt;em&gt;Paused&lt;/em&gt; and &lt;em&gt;PlaybackCompleted
                    &lt;/em&gt; state. When <c>#seekTo(long, int)</c> is called in those states,
                    one video frame will be displayed if the stream has video and the requested
                    position is valid.
                    &lt;/li&gt;
                    &lt;li&gt;Furthermore, the actual current playback position
                    can be retrieved with a call to <c>#getCurrentPosition()</c>, which
                    is helpful for applications such as a Music player that need to keep
                    track of the playback progress.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/li&gt;
                &lt;li&gt;When the playback reaches the end of stream, the playback completes.
                    &lt;ul&gt;
                    &lt;li&gt;If the looping mode was being set to &lt;var&gt;true&lt;/var&gt; with
                    <c>#setLooping(boolean)</c>, the MediaPlayer object shall remain in
                    the &lt;em&gt;Started&lt;/em&gt; state.&lt;/li&gt;
                    &lt;li&gt;If the looping mode was set to &lt;var&gt;false
                    &lt;/var&gt;, the player engine calls a user supplied callback method,
                    OnCompletion.onCompletion(), if a OnCompletionListener is registered
                    beforehand via <c>#setOnCompletionListener(OnCompletionListener)</c>.
                    The invoke of the callback signals that the object is now in the &lt;em&gt;
                    PlaybackCompleted&lt;/em&gt; state.&lt;/li&gt;
                    &lt;li&gt;While in the &lt;em&gt;PlaybackCompleted&lt;/em&gt;
                    state, calling <c>#start()</c> can restart the playback from the
                    beginning of the audio/video source.&lt;/li&gt;
            &lt;/ul&gt;
            
            
            "Valid_and_Invalid_States"&gt;&lt;h3&gt;Valid and invalid states&lt;/h3&gt;
            
            &lt;table border="0" cellspacing="0" cellpadding="0"&gt;
            &lt;tr&gt;&lt;td&gt;Method Name &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Valid States &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Invalid States &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Comments &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;attachAuxEffect &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method must be called after setDataSource.
                Calling it does not change the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getAudioSessionId &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getCurrentPosition &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Started, Paused, Stopped,
                    PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change the
                    state. Calling this method in an invalid state transfers the object
                    to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getDuration &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Paused, Stopped, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change the
                    state. Calling this method in an invalid state transfers the object
                    to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getVideoHeight &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Started, Paused, Stopped,
                    PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change the
                    state. Calling this method in an invalid state transfers the object
                    to the &lt;em&gt;Error&lt;/em&gt; state.  &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getVideoWidth &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Started, Paused, Stopped,
                    PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change
                    the state. Calling this method in an invalid state transfers the
                    object to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;isPlaying &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Started, Paused, Stopped,
                     PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change
                    the state. Calling this method in an invalid state transfers the
                    object to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;pause &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Started, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Stopped, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Paused&lt;/em&gt; state. Calling this method in an
                    invalid state transfers the object to the &lt;em&gt;Error&lt;/em&gt; state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;prepare &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Stopped}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Prepared, Started, Paused, PlaybackCompleted, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Prepared&lt;/em&gt; state. Calling this method in an
                    invalid state throws an IllegalStateException.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;prepareAsync &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Stopped}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Prepared, Started, Paused, PlaybackCompleted, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Preparing&lt;/em&gt; state. Calling this method in an
                    invalid state throws an IllegalStateException.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;release &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;After <c>#release()</c>, you must not interact with the object. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;reset &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Prepared, Started, Paused, Stopped,
                    PlaybackCompleted, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;After <c>#reset()</c>, the object is like being just created.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;seekTo &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change
                    the state. Calling this method in an invalid state transfers the
                    object to the &lt;em&gt;Error&lt;/em&gt; state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setAudioAttributes &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Prepared, Started, Paused,
                     PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state. In order for the
                    target audio attributes type to become effective, this method must be called before
                    prepare() or prepareAsync().&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setAudioSessionId &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
                     Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method must be called in idle state as the audio session ID must be known before
                    calling setDataSource. Calling it does not change the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setAudioStreamType (deprecated)&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Prepared, Started, Paused,
                     PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state. In order for the
                    target audio stream type to become effective, this method must be called before
                    prepare() or prepareAsync().&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setAuxEffectSendLevel &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Calling this method does not change the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setDataSource &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
                     Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Initialized&lt;/em&gt; state. Calling this method in an
                    invalid state throws an IllegalStateException.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setDisplay &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setSurface &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setVideoScalingMode &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setLooping &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Prepared, Started, Paused,
                    PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state does not change
                    the state. Calling this method in an
                    invalid state transfers the object to the &lt;em&gt;Error&lt;/em&gt; state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;isLooping &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setOnBufferingUpdateListener &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setOnCompletionListener &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setOnErrorListener &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setOnPreparedListener &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setOnSeekCompleteListener &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setPlaybackParams&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Initialized, Prepared, Started, Paused, PlaybackCompleted, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Stopped}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method will change state in some cases, depending on when it's called.
                    &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setScreenOnWhilePlaying&lt;/&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state.  &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;setVolume &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Prepared, Started, Paused,
                     PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.
            &lt;tr&gt;&lt;td&gt;setWakeMode &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;any &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;This method can be called in any state and calling it does not change
                    the object state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;start &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Stopped, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Started&lt;/em&gt; state. Calling this method in an
                    invalid state transfers the object to the &lt;em&gt;Error&lt;/em&gt; state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;stop &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Stopped, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method in a valid state transfers the
                    object to the &lt;em&gt;Stopped&lt;/em&gt; state. Calling this method in an
                    invalid state transfers the object to the &lt;em&gt;Error&lt;/em&gt; state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;getTrackInfo &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Stopped, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;addTimedTextSource &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Stopped, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;selectTrack &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Stopped, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;deselectTrack &lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Prepared, Started, Stopped, Paused, PlaybackCompleted}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;{Idle, Initialized, Error}&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;Successful invoke of this method does not change the state.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
            
            &lt;/table&gt;
            
            "Permissions"&gt;&lt;h3&gt;Permissions&lt;/h3&gt;</para>
      <para>One may need to declare a corresponding WAKE_LOCK permission <c>android.R.styleable#AndroidManifestUsesPermission &amp;lt;uses-permission&amp;gt;</c>
            element.</para>
      <para>This class requires the <c>android.Manifest.permission#INTERNET</c> permission
            when used with network-based content.
            
            "Callbacks"&gt;&lt;h3&gt;Callbacks&lt;/h3&gt;</para>
      <para>Applications may want to register for informational and error
            events in order to be informed of some internal state update and
            possible runtime errors during playback or streaming. Registration for
            these events is done by properly setting the appropriate listeners (via calls
            to
            <c>#setOnPreparedListener(OnPreparedListener) setOnPreparedListener</c>,
            <c>#setOnVideoSizeChangedListener(OnVideoSizeChangedListener) setOnVideoSizeChangedListener</c>,
            <c>#setOnSeekCompleteListener(OnSeekCompleteListener) setOnSeekCompleteListener</c>,
            <c>#setOnCompletionListener(OnCompletionListener) setOnCompletionListener</c>,
            <c>#setOnBufferingUpdateListener(OnBufferingUpdateListener) setOnBufferingUpdateListener</c>,
            <c>#setOnInfoListener(OnInfoListener) setOnInfoListener</c>,
            <c>#setOnErrorListener(OnErrorListener) setOnErrorListener</c>, etc).
            In order to receive the respective callback
            associated with these listeners, applications are required to create
            MediaPlayer objects on a thread with its own Looper running (main UI
            thread by default has a Looper running).</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/MediaPlayer" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MediaPlayer();" />
      <MemberSignature Language="C#" Value="public MediaPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>
          <para>Default constructor.</para>
          <para>Consider using one of the create() methods for synchronously instantiating a MediaPlayer
            from a Uri or resource.</para>
          <para>You must call <c>#release()</c> when you are finished using the instantiated instance.
            Doing so frees any resources you have previously acquired.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#MediaPlayer()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.MediaPlayer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As Context)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MediaPlayer(Android::Content::Context ^ context);" />
      <MemberSignature Language="C#" Value="public MediaPlayer (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.#ctor(Android.Content.Context)" />
      <MemberSignature Language="F#" Value="new Android.Media.MediaPlayer : Android.Content.Context -&gt; Android.Media.MediaPlayer" Usage="new Android.Media.MediaPlayer context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">non-null context. This context will be used to pull information,
             such as <c>android.content.AttributionSource</c> and device specific session ids, which
             will be associated with the <c>MediaPlayer</c>.
             However, the context itself will not be retained by the MediaPlayer.</param>
        <summary>Default constructor with context.</summary>
        <remarks>
          <para>Default constructor with context.</para>
          <para />
          <para>Consider using one of the create() methods for synchronously instantiating a
             MediaPlayer from a Uri or resource.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#MediaPlayer(android.content.Context)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.MediaPlayer(android.content.Context)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MediaPlayer(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected MediaPlayer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Media.MediaPlayer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Media.MediaPlayer" Usage="new Android.Media.MediaPlayer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnRoutingChangedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddOnRoutingChangedListener (listener As IAudioRoutingOnRoutingChangedListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddOnRoutingChangedListener(Android::Media::IAudioRoutingOnRoutingChangedListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void AddOnRoutingChangedListener (Android.Media.IAudioRoutingOnRoutingChangedListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnRoutingChangedListener(class Android.Media.IAudioRoutingOnRoutingChangedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AddOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member AddOnRoutingChangedListener : Android.Media.IAudioRoutingOnRoutingChangedListener * Android.OS.Handler -&gt; unit&#xA;override this.AddOnRoutingChangedListener : Android.Media.IAudioRoutingOnRoutingChangedListener * Android.OS.Handler -&gt; unit" Usage="mediaPlayer.AddOnRoutingChangedListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Media.IAudioRouting.AddOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener,Android.OS.Handler)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V", "GetAddOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Landroid_os_Handler_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V", "GetAddOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Landroid_os_Handler_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.IAudioRoutingOnRoutingChangedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The <c>AudioRouting.OnRoutingChangedListener</c> interface to receive
            notifications of rerouting events.</param>
        <param name="handler">Specifies the <c>Handler</c> object for the thread on which to execute
            the callback. If &lt;code&gt;null&lt;/code&gt;, the handler on the main looper will be used.</param>
        <summary>Adds an <c>AudioRouting.OnRoutingChangedListener</c> to receive notifications of routing
            changes on this MediaPlayer.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#addOnRoutingChangedListener(android.media.OnRoutingChangedListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.addOnRoutingChangedListener(android.media.OnRoutingChangedListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTimedTextSource (fd As FileDescriptor, mimeType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddTimedTextSource(Java::IO::FileDescriptor ^ fd, System::String ^ mimeType);" />
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor? fd, string? mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, string mimeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AddTimedTextSource(Java.IO.FileDescriptor,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTimedTextSource : Java.IO.FileDescriptor * string -&gt; unit&#xA;override this.AddTimedTextSource : Java.IO.FileDescriptor * string -&gt; unit" Usage="mediaPlayer.AddTimedTextSource (fd, mimeType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file (FileDescriptor).</summary>
        <remarks>
          <para>Adds an external timed text source file (FileDescriptor).
            
            It is the caller's responsibility to close the file descriptor.
            It is safe to do so as soon as this call returns.
            
            Currently supported format is SubRip. Note that a single external timed text source may
            contain multiple tracks in it. One can find the total number of available tracks
            using <c>#getTrackInfo()</c> to see what additional tracks become available
            after this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#addTimedTextSource(java.io.FileDescriptor,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.addTimedTextSource(java.io.FileDescriptor, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTimedTextSource (path As String, mimeType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddTimedTextSource(System::String ^ path, System::String ^ mimeType);" />
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (string? path, string? mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(string path, string mimeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AddTimedTextSource(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTimedTextSource : string * string -&gt; unit&#xA;override this.AddTimedTextSource : string * string -&gt; unit" Usage="mediaPlayer.AddTimedTextSource (path, mimeType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTimedTextSource", "(Ljava/lang/String;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_lang_String_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTimedTextSource", "(Ljava/lang/String;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_lang_String_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file path of external timed text source file.</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file.</summary>
        <remarks>
          <para>Adds an external timed text source file.
            
            Currently supported format is SubRip with the file extension .srt, case insensitive.
            Note that a single external timed text source may contain multiple tracks in it.
            One can find the total number of available tracks using <c>#getTrackInfo()</c> to see what
            additional tracks become available after this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#addTimedTextSource(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.addTimedTextSource(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTimedTextSource (context As Context, uri As Uri, mimeType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddTimedTextSource(Android::Content::Context ^ context, Android::Net::Uri ^ uri, System::String ^ mimeType);" />
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Android.Content.Context? context, Android.Net.Uri? uri, string? mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Android.Content.Context context, class Android.Net.Uri uri, string mimeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AddTimedTextSource(Android.Content.Context,Android.Net.Uri,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTimedTextSource : Android.Content.Context * Android.Net.Uri * string -&gt; unit&#xA;override this.AddTimedTextSource : Android.Content.Context * Android.Net.Uri * string -&gt; unit" Usage="mediaPlayer.AddTimedTextSource (context, uri, mimeType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTimedTextSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V", "GetAddTimedTextSource_Landroid_content_Context_Landroid_net_Uri_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTimedTextSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V", "GetAddTimedTextSource_Landroid_content_Context_Landroid_net_Uri_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file (Uri).</summary>
        <remarks>
          <para>Adds an external timed text source file (Uri).
            
            Currently supported format is SubRip with the file extension .srt, case insensitive.
            Note that a single external timed text source may contain multiple tracks in it.
            One can find the total number of available tracks using <c>#getTrackInfo()</c> to see what
            additional tracks become available after this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#addTimedTextSource(android.content.Context,%20android.net.Uri,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.addTimedTextSource(android.content.Context, android.net.Uri, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddTimedTextSource (fd As FileDescriptor, offset As Long, length As Long, mime As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddTimedTextSource(Java::IO::FileDescriptor ^ fd, long offset, long length, System::String ^ mime);" />
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor? fd, long offset, long length, string? mime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length, string mime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AddTimedTextSource(Java.IO.FileDescriptor,System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTimedTextSource : Java.IO.FileDescriptor * int64 * int64 * string -&gt; unit&#xA;override this.AddTimedTextSource : Java.IO.FileDescriptor * int64 * int64 * string -&gt; unit" Usage="mediaPlayer.AddTimedTextSource (fd, offset, length, mime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_JJLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_JJLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="mime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <param name="mime">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text file (FileDescriptor).</summary>
        <remarks>
          <para>Adds an external timed text file (FileDescriptor).
            
            It is the caller's responsibility to close the file descriptor.
            It is safe to do so as soon as this call returns.
            
            Currently supported format is SubRip. Note that a single external timed text source may
            contain multiple tracks in it. One can find the total number of available tracks
            using <c>#getTrackInfo()</c> to see what additional tracks become available
            after this method call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#addTimedTextSource(java.io.FileDescriptor,%20long,%20long,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.addTimedTextSource(java.io.FileDescriptor, long, long, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AttachAuxEffect">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AttachAuxEffect (effectId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AttachAuxEffect(int effectId);" />
      <MemberSignature Language="C#" Value="public virtual void AttachAuxEffect (int effectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAuxEffect(int32 effectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.AttachAuxEffect(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member AttachAuxEffect : int -&gt; unit&#xA;override this.AttachAuxEffect : int -&gt; unit" Usage="mediaPlayer.AttachAuxEffect effectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("attachAuxEffect", "(I)V", "GetAttachAuxEffect_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("attachAuxEffect", "(I)V", "GetAttachAuxEffect_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="effectId">system wide unique id of the effect to attach</param>
        <summary>Attaches an auxiliary effect to the player.</summary>
        <remarks>
          <para>Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation
            effect which can be applied on any sound source that directs a certain amount of its
            energy to this effect. This amount is defined by setAuxEffectSendLevel().
            See <c>#setAuxEffectSendLevel(float)</c>.</para>
          <para>After creating an auxiliary effect (e.g.
            <c>android.media.audiofx.EnvironmentalReverb</c>), retrieve its ID with
            <c>android.media.audiofx.AudioEffect#getId()</c> and use it when calling this method
            to attach the player to the effect.</para>
          <para>To detach the effect from the player, call this method with a null effect id.</para>
          <para>This method must be called after one of the overloaded <c> setDataSource </c>
            methods.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#attachAuxEffect(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.attachAuxEffect(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionId">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AudioSessionId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AudioSessionId { int get(); void set(int value); };" />
      <MemberSignature Language="C#" Value="public virtual int AudioSessionId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioSessionId" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.AudioSessionId" />
      <MemberSignature Language="F#" Value="member this.AudioSessionId : int with get, set" Usage="Android.Media.MediaPlayer.AudioSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setAudioSessionId", "(I)V", "GetSetAudioSessionId_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setAudioSessionId", "(I)V", "GetSetAudioSessionId_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="sessionId">the audio session ID.
            The audio session ID is a system wide unique identifier for the audio stream played by
            this MediaPlayer instance.
            The primary use of the audio session ID  is to associate audio effects to a particular
            instance of MediaPlayer: if an audio session ID is provided when creating an audio effect,
            this effect will be applied only to the audio content of media players within the same
            audio session and not to the output mix.
            When created, a MediaPlayer instance automatically generates its own audio session ID.
            However, it is possible to force this player to be part of an already existing audio session
            by calling this method.
            This method must be called before one of the overloaded <c> setDataSource </c> methods.
            Note that session id set using this method will override device-specific audio session id,
            if the <c>MediaPlayer</c> was instantiated using device-specific <c>Context</c> -
            see <c>MediaPlayer#MediaPlayer(Context)</c>.</param>
        <summary>Returns the audio session ID. -or- Sets the audio session ID.</summary>
        <value>the audio session ID. <c>#setAudioSessionId(int)</c>
            Note that the audio session ID is 0 only if a problem occured when the MediaPlayer was contructed.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns the audio session ID.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getAudioSessionId()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getAudioSessionId()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the audio session ID.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setAudioSessionId(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setAudioSessionId(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="BufferingUpdate">
      <MemberSignature Language="VB.NET" Value="Public Custom Event BufferingUpdate As EventHandler(Of MediaPlayer.BufferingUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::BufferingUpdateEventArgs ^&gt; ^ BufferingUpdate;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.BufferingUpdateEventArgs&gt; BufferingUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/BufferingUpdateEventArgs&gt; BufferingUpdate" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.BufferingUpdate" />
      <MemberSignature Language="F#" Value="member this.BufferingUpdate : EventHandler&lt;Android.Media.MediaPlayer.BufferingUpdateEventArgs&gt; " Usage="member this.BufferingUpdate : System.EventHandler&lt;Android.Media.MediaPlayer.BufferingUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+BufferingUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOnMediaTimeDiscontinuityListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearOnMediaTimeDiscontinuityListener ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearOnMediaTimeDiscontinuityListener();" />
      <MemberSignature Language="C#" Value="public virtual void ClearOnMediaTimeDiscontinuityListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearOnMediaTimeDiscontinuityListener() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.ClearOnMediaTimeDiscontinuityListener" />
      <MemberSignature Language="F#" Value="abstract member ClearOnMediaTimeDiscontinuityListener : unit -&gt; unit&#xA;override this.ClearOnMediaTimeDiscontinuityListener : unit -&gt; unit" Usage="mediaPlayer.ClearOnMediaTimeDiscontinuityListener " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearOnMediaTimeDiscontinuityListener", "()V", "GetClearOnMediaTimeDiscontinuityListenerHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearOnMediaTimeDiscontinuityListener", "()V", "GetClearOnMediaTimeDiscontinuityListenerHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the listener previously set with
            <c>#setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener)</c>
            or <c>#setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener, Handler)</c></summary>
        <remarks>
          <para>Clears the listener previously set with
            <c>#setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener)</c>
            or <c>#setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener, Handler)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#clearOnMediaTimeDiscontinuityListener()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.clearOnMediaTimeDiscontinuityListener()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOnSubtitleDataListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearOnSubtitleDataListener ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearOnSubtitleDataListener();" />
      <MemberSignature Language="C#" Value="public virtual void ClearOnSubtitleDataListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearOnSubtitleDataListener() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.ClearOnSubtitleDataListener" />
      <MemberSignature Language="F#" Value="abstract member ClearOnSubtitleDataListener : unit -&gt; unit&#xA;override this.ClearOnSubtitleDataListener : unit -&gt; unit" Usage="mediaPlayer.ClearOnSubtitleDataListener " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearOnSubtitleDataListener", "()V", "GetClearOnSubtitleDataListenerHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearOnSubtitleDataListener", "()V", "GetClearOnSubtitleDataListenerHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the listener previously set with
            <c>#setOnSubtitleDataListener(OnSubtitleDataListener)</c> or
            <c>#setOnSubtitleDataListener(OnSubtitleDataListener, Handler)</c>.</summary>
        <remarks>
          <para>Clears the listener previously set with
            <c>#setOnSubtitleDataListener(OnSubtitleDataListener)</c> or
            <c>#setOnSubtitleDataListener(OnSubtitleDataListener, Handler)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#clearOnSubtitleDataListener()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.clearOnSubtitleDataListener()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="VB.NET" Value="Public Custom Event Completion As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Completion;" />
      <MemberSignature Language="C#" Value="public event EventHandler Completion;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completion" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.Completion" />
      <MemberSignature Language="F#" Value="member this.Completion : EventHandler " Usage="member this.Completion : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (context As Context, uri As Uri) As MediaPlayer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::MediaPlayer ^ Create(Android::Content::Context ^ context, Android::Net::Uri ^ uri);" />
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer? Create (Android.Content.Context? context, Android.Net.Uri? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Create(Android.Content.Context,Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="static member Create : Android.Content.Context * Android.Net.Uri -&gt; Android.Media.MediaPlayer" Usage="Android.Media.MediaPlayer.Create (context, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <summary>Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>a MediaPlayer object, or null if creation failed</returns>
        <remarks>
          <para>Convenience method to create a MediaPlayer for a given Uri.
            On success, <c>#prepare()</c> will already have been called and must not be called again.</para>
          <para>You must call <c>#release()</c> when you are finished using the created instance. Doing
            so frees any resources you have previously acquired.</para>
          <para>Note that since <c>#prepare()</c> is called automatically in this method,
            you cannot change the audio
            session ID (see <c>#setAudioSessionId(int)</c>) or audio attributes
            (see <c>#setAudioAttributes(AudioAttributes)</c> of the new MediaPlayer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#create(android.content.Context,%20android.net.Uri)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.create(android.content.Context, android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (context As Context, resid As Integer) As MediaPlayer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::MediaPlayer ^ Create(Android::Content::Context ^ context, int resid);" />
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer? Create (Android.Content.Context? context, int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Create(Android.Content.Context,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Create : Android.Content.Context * int -&gt; Android.Media.MediaPlayer" Usage="Android.Media.MediaPlayer.Create (context, resid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Landroid/content/Context;I)Landroid/media/MediaPlayer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Landroid/content/Context;I)Landroid/media/MediaPlayer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (&lt;var&gt;R.raw.&amp;lt;something&gt;&lt;/var&gt;) for
                         the resource to use as the datasource</param>
        <summary>Convenience method to create a MediaPlayer for a given resource id.</summary>
        <returns>a MediaPlayer object, or null if creation failed</returns>
        <remarks>
          <para>Convenience method to create a MediaPlayer for a given resource id.
            On success, <c>#prepare()</c> will already have been called and must not be called again.</para>
          <para>You must call <c>#release()</c> when you are finished using the created instance. Doing
            so frees any resources you have previously acquired.</para>
          <para>Note that since <c>#prepare()</c> is called automatically in this method,
            you cannot change the audio
            session ID (see <c>#setAudioSessionId(int)</c>) or audio attributes
            (see <c>#setAudioAttributes(AudioAttributes)</c> of the new MediaPlayer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#create(android.content.Context,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.create(android.content.Context, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (context As Context, uri As Uri, holder As ISurfaceHolder) As MediaPlayer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::MediaPlayer ^ Create(Android::Content::Context ^ context, Android::Net::Uri ^ uri, Android::Views::ISurfaceHolder ^ holder);" />
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer? Create (Android.Content.Context? context, Android.Net.Uri? uri, Android.Views.ISurfaceHolder? holder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Create(Android.Content.Context,Android.Net.Uri,Android.Views.ISurfaceHolder)" />
      <MemberSignature Language="F#" Value="static member Create : Android.Content.Context * Android.Net.Uri * Android.Views.ISurfaceHolder -&gt; Android.Media.MediaPlayer" Usage="Android.Media.MediaPlayer.Create (context, uri, holder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video</param>
        <summary>Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>a MediaPlayer object, or null if creation failed</returns>
        <remarks>
          <para>Convenience method to create a MediaPlayer for a given Uri.
            On success, <c>#prepare()</c> will already have been called and must not be called again.</para>
          <para>You must call <c>#release()</c> when you are finished using the created instance. Doing
            so frees any resources you have previously acquired.</para>
          <para>Note that since <c>#prepare()</c> is called automatically in this method,
            you cannot change the audio
            session ID (see <c>#setAudioSessionId(int)</c>) or audio attributes
            (see <c>#setAudioAttributes(AudioAttributes)</c> of the new MediaPlayer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#create(android.content.Context,%20android.net.Uri,%20android.view.SurfaceHolder)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.create(android.content.Context, android.net.Uri, android.view.SurfaceHolder)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (context As Context, resid As Integer, audioAttributes As AudioAttributes, audioSessionId As Integer) As MediaPlayer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::MediaPlayer ^ Create(Android::Content::Context ^ context, int resid, Android::Media::AudioAttributes ^ audioAttributes, int audioSessionId);" />
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer? Create (Android.Content.Context? context, int resid, Android.Media.AudioAttributes? audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Create(Android.Content.Context,System.Int32,Android.Media.AudioAttributes,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Create : Android.Content.Context * int * Android.Media.AudioAttributes * int -&gt; Android.Media.MediaPlayer" Usage="Android.Media.MediaPlayer.Create (context, resid, audioAttributes, audioSessionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (&lt;var&gt;R.raw.&amp;lt;something&gt;&lt;/var&gt;) for
                         the resource to use as the datasource</param>
        <param name="audioAttributes">the <c>AudioAttributes</c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
                see <c>AudioManager#generateAudioSessionId()</c> to obtain a new session.</param>
        <summary>Same factory method as <c>#create(Context, int)</c> but that lets you specify the audio
            attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>a MediaPlayer object, or null if creation failed</returns>
        <remarks>
          <para>Same factory method as <c>#create(Context, int)</c> but that lets you specify the audio
            attributes and session ID to be used by the new MediaPlayer instance.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#create(android.content.Context,%20int,%20android.media.AudioAttributes,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.create(android.content.Context, int, android.media.AudioAttributes, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (context As Context, uri As Uri, holder As ISurfaceHolder, audioAttributes As AudioAttributes, audioSessionId As Integer) As MediaPlayer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::Media::MediaPlayer ^ Create(Android::Content::Context ^ context, Android::Net::Uri ^ uri, Android::Views::ISurfaceHolder ^ holder, Android::Media::AudioAttributes ^ audioAttributes, int audioSessionId);" />
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer? Create (Android.Content.Context? context, Android.Net.Uri? uri, Android.Views.ISurfaceHolder? holder, Android.Media.AudioAttributes? audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Create(Android.Content.Context,Android.Net.Uri,Android.Views.ISurfaceHolder,Android.Media.AudioAttributes,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Create : Android.Content.Context * Android.Net.Uri * Android.Views.ISurfaceHolder * Android.Media.AudioAttributes * int -&gt; Android.Media.MediaPlayer" Usage="Android.Media.MediaPlayer.Create (context, uri, holder, audioAttributes, audioSessionId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video, may be null.</param>
        <param name="audioAttributes">the <c>AudioAttributes</c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
                see <c>AudioManager#generateAudioSessionId()</c> to obtain a new session.</param>
        <summary>Same factory method as <c>#create(Context, Uri, SurfaceHolder)</c> but that lets you specify
            the audio attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>a MediaPlayer object, or null if creation failed</returns>
        <remarks>
          <para>Same factory method as <c>#create(Context, Uri, SurfaceHolder)</c> but that lets you specify
            the audio attributes and session ID to be used by the new MediaPlayer instance.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#create(android.content.Context,%20android.net.Uri,%20android.view.SurfaceHolder,%20android.media.AudioAttributes,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.create(android.content.Context, android.net.Uri, android.view.SurfaceHolder, android.media.AudioAttributes, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVolumeShaper">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVolumeShaper (configuration As VolumeShaper.Configuration) As VolumeShaper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Media::VolumeShaper ^ CreateVolumeShaper(Android::Media::VolumeShaper::Configuration ^ configuration);" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.VolumeShaper CreateVolumeShaper (Android.Media.VolumeShaper.Configuration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.VolumeShaper CreateVolumeShaper(class Android.Media.VolumeShaper/Configuration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.CreateVolumeShaper(Android.Media.VolumeShaper.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member CreateVolumeShaper : Android.Media.VolumeShaper.Configuration -&gt; Android.Media.VolumeShaper&#xA;override this.CreateVolumeShaper : Android.Media.VolumeShaper.Configuration -&gt; Android.Media.VolumeShaper" Usage="mediaPlayer.CreateVolumeShaper configuration" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Media.IVolumeAutomation.CreateVolumeShaper(Android.Media.VolumeShaper.Configuration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createVolumeShaper", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;", "GetCreateVolumeShaper_Landroid_media_VolumeShaper_Configuration_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createVolumeShaper", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;", "GetCreateVolumeShaper_Landroid_media_VolumeShaper_Configuration_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VolumeShaper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configuration" Type="Android.Media.VolumeShaper+Configuration" />
      </Parameters>
      <Docs>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPosition">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CurrentPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CurrentPosition { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int CurrentPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPosition" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.CurrentPosition" />
      <MemberSignature Language="F#" Value="member this.CurrentPosition : int" Usage="Android.Media.MediaPlayer.CurrentPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCurrentPosition", "()I", "GetGetCurrentPositionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCurrentPosition", "()I", "GetGetCurrentPositionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current playback position.</summary>
        <value>the current position in milliseconds</value>
        <remarks>
          <para>Gets the current playback position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getCurrentPosition()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getCurrentPosition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeselectTrack">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeselectTrack (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeselectTrack(int index);" />
      <MemberSignature Language="C#" Value="public virtual void DeselectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectTrack(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member DeselectTrack : int -&gt; unit&#xA;override this.DeselectTrack : int -&gt; unit" Usage="mediaPlayer.DeselectTrack index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deselectTrack", "(I)V", "GetDeselectTrack_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deselectTrack", "(I)V", "GetDeselectTrack_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be deselected. The valid range of the index
            is 0..total number of tracks - 1. The total number of tracks as well as the type of
            each individual track can be found by calling <c>#getTrackInfo()</c> method.</param>
        <summary>Deselect a track.</summary>
        <remarks>
          <para>Deselect a track.</para>
          <para>Currently, the track must be a timed text track and no audio or video tracks can be
            deselected. If the timed text track identified by index has not been
            selected before, it throws an exception.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#deselectTrack(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.deselectTrack(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="DrmInfoEvent">
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrmInfoEvent As EventHandler(Of MediaPlayer.DrmInfoEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::DrmInfoEventArgs ^&gt; ^ DrmInfoEvent;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.DrmInfoEventArgs&gt; DrmInfoEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/DrmInfoEventArgs&gt; DrmInfoEvent" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.DrmInfoEvent" />
      <MemberSignature Language="F#" Value="member this.DrmInfoEvent : EventHandler&lt;Android.Media.MediaPlayer.DrmInfoEventArgs&gt; " Usage="member this.DrmInfoEvent : System.EventHandler&lt;Android.Media.MediaPlayer.DrmInfoEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+DrmInfoEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrmPrepared">
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrmPrepared As EventHandler(Of MediaPlayer.DrmPreparedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::DrmPreparedEventArgs ^&gt; ^ DrmPrepared;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.DrmPreparedEventArgs&gt; DrmPrepared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/DrmPreparedEventArgs&gt; DrmPrepared" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.DrmPrepared" />
      <MemberSignature Language="F#" Value="member this.DrmPrepared : EventHandler&lt;Android.Media.MediaPlayer.DrmPreparedEventArgs&gt; " Usage="member this.DrmPrepared : System.EventHandler&lt;Android.Media.MediaPlayer.DrmPreparedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+DrmPreparedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Duration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Duration { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Duration" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.Duration" />
      <MemberSignature Language="F#" Value="member this.Duration : int" Usage="Android.Media.MediaPlayer.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDuration", "()I", "GetGetDurationHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDuration", "()I", "GetGetDurationHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the file.</summary>
        <value>the duration in milliseconds, if no duration is available
                    (for example, if streaming live content), -1 is returned.</value>
        <remarks>
          <para>Gets the duration of the file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getDuration()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getDuration()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As EventHandler(Of MediaPlayer.ErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::ErrorEventArgs ^&gt; ^ Error;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.ErrorEventArgs&gt; Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/ErrorEventArgs&gt; Error" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.Error" />
      <MemberSignature Language="F#" Value="member this.Error : EventHandler&lt;Android.Media.MediaPlayer.ErrorEventArgs&gt; " Usage="member this.Error : System.EventHandler&lt;Android.Media.MediaPlayer.ErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDrmInfo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDrmInfo () As MediaPlayer.DrmInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Media::MediaPlayer::DrmInfo ^ GetDrmInfo();" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaPlayer.DrmInfo? GetDrmInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.MediaPlayer/DrmInfo GetDrmInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.GetDrmInfo" />
      <MemberSignature Language="F#" Value="abstract member GetDrmInfo : unit -&gt; Android.Media.MediaPlayer.DrmInfo&#xA;override this.GetDrmInfo : unit -&gt; Android.Media.MediaPlayer.DrmInfo" Usage="mediaPlayer.GetDrmInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDrmInfo", "()Landroid/media/MediaPlayer$DrmInfo;", "GetGetDrmInfoHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDrmInfo", "()Landroid/media/MediaPlayer$DrmInfo;", "GetGetDrmInfoHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer+DrmInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the DRM Info associated with the current source</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getDrmInfo()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getDrmInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDrmPropertyString">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDrmPropertyString (propertyName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetDrmPropertyString(System::String ^ propertyName);" />
      <MemberSignature Language="C#" Value="public virtual string GetDrmPropertyString (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDrmPropertyString(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.GetDrmPropertyString(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetDrmPropertyString : string -&gt; string&#xA;override this.GetDrmPropertyString : string -&gt; string" Usage="mediaPlayer.GetDrmPropertyString propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDrmPropertyString", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetDrmPropertyString_Ljava_lang_String_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDrmPropertyString", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetDrmPropertyString_Ljava_lang_String_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.StringDef(Fields=new System.String[] { "PropertyVendor", "PropertyVersion", "PropertyDescription", "PropertyAlgorithms" }, Type="Android.Media.MediaDrm")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.StringDef(Fields=new System.String[] { "PropertyVendor", "PropertyVersion", "PropertyDescription", "PropertyAlgorithms" }, Type="Android.Media.MediaDrm")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">the property name
            
            Standard fields names are:
            <c>MediaDrm#PROPERTY_VENDOR</c>, <c>MediaDrm#PROPERTY_VERSION</c>,
            <c>MediaDrm#PROPERTY_DESCRIPTION</c>, <c>MediaDrm#PROPERTY_ALGORITHMS</c></param>
        <summary>Read a DRM engine plugin String property value, given the property name string.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Read a DRM engine plugin String property value, given the property name string.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getDrmPropertyString(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getDrmPropertyString(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyRequest">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyRequest (keySetId As Byte(), initData As Byte(), mimeType As String, keyType As MediaDrmKeyType, optionalParameters As IDictionary(Of String, String)) As MediaDrm.KeyRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Media::MediaDrm::KeyRequest ^ GetKeyRequest(cli::array &lt;System::Byte&gt; ^ keySetId, cli::array &lt;System::Byte&gt; ^ initData, System::String ^ mimeType, Android::Media::MediaDrmKeyType keyType, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ optionalParameters);" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaDrm.KeyRequest GetKeyRequest (byte[]? keySetId, byte[]? initData, string? mimeType, Android.Media.MediaDrmKeyType keyType, System.Collections.Generic.IDictionary&lt;string,string&gt;? optionalParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.MediaDrm/KeyRequest GetKeyRequest(unsigned int8[] keySetId, unsigned int8[] initData, string mimeType, valuetype Android.Media.MediaDrmKeyType keyType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; optionalParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.GetKeyRequest(System.Byte[],System.Byte[],System.String,Android.Media.MediaDrmKeyType,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="F#" Value="abstract member GetKeyRequest : byte[] * byte[] * string * Android.Media.MediaDrmKeyType * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; Android.Media.MediaDrm.KeyRequest&#xA;override this.GetKeyRequest : byte[] * byte[] * string * Android.Media.MediaDrmKeyType * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; Android.Media.MediaDrm.KeyRequest" Usage="mediaPlayer.GetKeyRequest (keySetId, initData, mimeType, keyType, optionalParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getKeyRequest", "([B[BLjava/lang/String;ILjava/util/Map;)Landroid/media/MediaDrm$KeyRequest;", "GetGetKeyRequest_arrayBarrayBLjava_lang_String_ILjava_util_Map_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getKeyRequest", "([B[BLjava/lang/String;ILjava/util/Map;)Landroid/media/MediaDrm$KeyRequest;", "GetGetKeyRequest_arrayBarrayBLjava_lang_String_ILjava_util_Map_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaDrm+KeyRequest</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySetId" Type="System.Byte[]" />
        <Parameter Name="initData" Type="System.Byte[]" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="keyType" Type="Android.Media.MediaDrmKeyType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="optionalParameters" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keySetId">is the key-set identifier of the offline keys being released when keyType is
            <c>MediaDrm#KEY_TYPE_RELEASE</c>. It should be set to null for other key requests, when
            keyType is <c>MediaDrm#KEY_TYPE_STREAMING</c> or <c>MediaDrm#KEY_TYPE_OFFLINE</c>.</param>
        <param name="initData">is the container-specific initialization data when the keyType is
            <c>MediaDrm#KEY_TYPE_STREAMING</c> or <c>MediaDrm#KEY_TYPE_OFFLINE</c>. Its meaning is
            interpreted based on the mime type provided in the mimeType parameter.  It could
            contain, for example, the content ID, key ID or other data obtained from the content
            metadata that is required in generating the key request.
            When the keyType is <c>MediaDrm#KEY_TYPE_RELEASE</c>, it should be set to null.</param>
        <param name="mimeType">identifies the mime type of the content</param>
        <param name="keyType">specifies the type of the request. The request may be to acquire
            keys for streaming, <c>MediaDrm#KEY_TYPE_STREAMING</c>, or for offline content
            <c>MediaDrm#KEY_TYPE_OFFLINE</c>, or to release previously acquired
            keys (<c>MediaDrm#KEY_TYPE_RELEASE</c>), which are identified by a keySetId.</param>
        <param name="optionalParameters">are included in the key request message to
            allow a client application to provide additional message parameters to the server.
            This may be <c>null</c> if no additional parameters are to be sent.</param>
        <summary>A key request/response exchange occurs between the app and a license server
            to obtain or release keys used to decrypt encrypted content.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getKeyRequest(byte[],%20byte[],%20java.lang.String,%20int,%20java.util.Map)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTrack">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSelectedTrack (trackType As MediaTrackType) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetSelectedTrack(Android::Media::MediaTrackType trackType);" />
      <MemberSignature Language="C#" Value="public virtual int GetSelectedTrack (Android.Media.MediaTrackType trackType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetSelectedTrack(valuetype Android.Media.MediaTrackType trackType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.GetSelectedTrack(Android.Media.MediaTrackType)" />
      <MemberSignature Language="F#" Value="abstract member GetSelectedTrack : Android.Media.MediaTrackType -&gt; int&#xA;override this.GetSelectedTrack : Android.Media.MediaTrackType -&gt; int" Usage="mediaPlayer.GetSelectedTrack trackType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSelectedTrack", "(I)I", "GetGetSelectedTrack_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSelectedTrack", "(I)I", "GetGetSelectedTrack_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackType" Type="Android.Media.MediaTrackType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trackType">should be one of <c>TrackInfo#MEDIA_TRACK_TYPE_VIDEO</c>,
            <c>TrackInfo#MEDIA_TRACK_TYPE_AUDIO</c>, or
            <c>TrackInfo#MEDIA_TRACK_TYPE_SUBTITLE</c></param>
        <summary>Returns the index of the audio, video, or subtitle track currently selected for playback,
            The return value is an index into the array returned by <c>#getTrackInfo()</c>, and can
            be used in calls to <c>#selectTrack(int)</c> or <c>#deselectTrack(int)</c>.</summary>
        <returns>index of the audio, video, or subtitle track currently selected for playback;
            a negative integer is returned when there is no selected track for <c>trackType</c> or
            when <c>trackType</c> is not one of audio, video, or subtitle.</returns>
        <remarks>
          <para>Returns the index of the audio, video, or subtitle track currently selected for playback,
            The return value is an index into the array returned by <c>#getTrackInfo()</c>, and can
            be used in calls to <c>#selectTrack(int)</c> or <c>#deselectTrack(int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getSelectedTrack(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getSelectedTrack(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if called after <see cref="M:Android.Media.MediaPlayer.Release" /></exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
        <altmember cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" />
        <altmember cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetTrackInfo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTrackInfo () As MediaPlayer.TrackInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Android::Media::MediaPlayer::TrackInfo ^&gt; ^ GetTrackInfo();" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaPlayer.TrackInfo[]? GetTrackInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.MediaPlayer/TrackInfo[] GetTrackInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.GetTrackInfo" />
      <MemberSignature Language="F#" Value="abstract member GetTrackInfo : unit -&gt; Android.Media.MediaPlayer.TrackInfo[]&#xA;override this.GetTrackInfo : unit -&gt; Android.Media.MediaPlayer.TrackInfo[]" Usage="mediaPlayer.GetTrackInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTrackInfo", "()[Landroid/media/MediaPlayer$TrackInfo;", "GetGetTrackInfoHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTrackInfo", "()[Landroid/media/MediaPlayer$TrackInfo;", "GetGetTrackInfoHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer+TrackInfo[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of track information.</summary>
        <returns>Array of track info. The total number of tracks is the array length.
            Must be called again if an external timed text source has been added after any of the
            addTimedTextSource methods are called.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getTrackInfo()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getTrackInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="VB.NET" Value="Public Custom Event Info As EventHandler(Of MediaPlayer.InfoEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::InfoEventArgs ^&gt; ^ Info;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.InfoEventArgs&gt; Info;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/InfoEventArgs&gt; Info" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.Info" />
      <MemberSignature Language="F#" Value="member this.Info : EventHandler&lt;Android.Media.MediaPlayer.InfoEventArgs&gt; " Usage="member this.Info : System.EventHandler&lt;Android.Media.MediaPlayer.InfoEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+InfoEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPlaying">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsPlaying As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsPlaying { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsPlaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPlaying" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.IsPlaying" />
      <MemberSignature Language="F#" Value="member this.IsPlaying : bool" Usage="Android.Media.MediaPlayer.IsPlaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isPlaying", "()Z", "GetIsPlayingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isPlaying", "()Z", "GetIsPlayingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the MediaPlayer is playing.</summary>
        <value>true if currently playing, false otherwise</value>
        <remarks>
          <para>Checks whether the MediaPlayer is playing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#isPlaying()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.isPlaying()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized or has been released.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.MediaPlayer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Looping">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Looping As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Looping { bool get(); void set(bool value); };" />
      <MemberSignature Language="C#" Value="public virtual bool Looping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Looping" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.Looping" />
      <MemberSignature Language="F#" Value="member this.Looping : bool with get, set" Usage="Android.Media.MediaPlayer.Looping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLooping", "()Z", "GetIsLoopingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLooping", "()Z", "GetIsLoopingHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLooping", "(Z)V", "GetSetLooping_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setLooping", "(Z)V", "GetSetLooping_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="looping">whether to loop or not</param>
        <summary>Checks whether the MediaPlayer is looping or non-looping. -or- Sets the player to be looping or non-looping.</summary>
        <value>true if the MediaPlayer is currently looping, false otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Checks whether the MediaPlayer is looping or non-looping.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#isLooping()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.isLooping()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the player to be looping or non-looping.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setLooping(boolean)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setLooping(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorIo">
      <MemberSignature Language="VB.NET" Value="Public Const MediaErrorIo As Integer  = -1004" />
      <MemberSignature Language="C++ CLI" Value="public: int MediaErrorIo = -1004;" />
      <MemberSignature Language="C#" Value="public const int MediaErrorIo = -1004;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorIo = (-1004)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.MediaErrorIo" />
      <MemberSignature Language="F#" Value="val mutable MediaErrorIo : int" Usage="Android.Media.MediaPlayer.MediaErrorIo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Io.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Io.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1004</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorMalformed">
      <MemberSignature Language="VB.NET" Value="Public Const MediaErrorMalformed As Integer  = -1007" />
      <MemberSignature Language="C++ CLI" Value="public: int MediaErrorMalformed = -1007;" />
      <MemberSignature Language="C#" Value="public const int MediaErrorMalformed = -1007;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorMalformed = (-1007)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.MediaErrorMalformed" />
      <MemberSignature Language="F#" Value="val mutable MediaErrorMalformed : int" Usage="Android.Media.MediaPlayer.MediaErrorMalformed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Malformed.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Malformed.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1007</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorTimedOut">
      <MemberSignature Language="VB.NET" Value="Public Const MediaErrorTimedOut As Integer  = -110" />
      <MemberSignature Language="C++ CLI" Value="public: int MediaErrorTimedOut = -110;" />
      <MemberSignature Language="C#" Value="public const int MediaErrorTimedOut = -110;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorTimedOut = (-110)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.MediaErrorTimedOut" />
      <MemberSignature Language="F#" Value="val mutable MediaErrorTimedOut : int" Usage="Android.Media.MediaPlayer.MediaErrorTimedOut" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.TimedOut.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.TimedOut.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-110</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorUnsupported">
      <MemberSignature Language="VB.NET" Value="Public Const MediaErrorUnsupported As Integer  = -1010" />
      <MemberSignature Language="C++ CLI" Value="public: int MediaErrorUnsupported = -1010;" />
      <MemberSignature Language="C#" Value="public const int MediaErrorUnsupported = -1010;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorUnsupported = (-1010)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.MediaErrorUnsupported" />
      <MemberSignature Language="F#" Value="val mutable MediaErrorUnsupported : int" Usage="Android.Media.MediaPlayer.MediaErrorUnsupported" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Unsupported.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Unsupported.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1010</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaMimetypeTextSubrip">
      <MemberSignature Language="VB.NET" Value="Public Const MediaMimetypeTextSubrip As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ MediaMimetypeTextSubrip;" />
      <MemberSignature Language="C#" Value="public const string MediaMimetypeTextSubrip;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaMimetypeTextSubrip" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.MediaMimetypeTextSubrip" />
      <MemberSignature Language="F#" Value="val mutable MediaMimetypeTextSubrip : string" Usage="Android.Media.MediaPlayer.MediaMimetypeTextSubrip" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MEDIA_MIMETYPE_TEXT_SUBRIP")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MEDIA_MIMETYPE_TEXT_SUBRIP")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>MIME type for SubRip (SRT) container.</summary>
        <remarks>
          <para>MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs.</para>
          <para>This member is deprecated. use <c>MediaFormat#MIMETYPE_TEXT_SUBRIP</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#MEDIA_MIMETYPE_TEXT_SUBRIP" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.MEDIA_MIMETYPE_TEXT_SUBRIP</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="MediaTimeDiscontinuity">
      <MemberSignature Language="VB.NET" Value="Public Custom Event MediaTimeDiscontinuity As EventHandler(Of MediaPlayer.MediaTimeDiscontinuityEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::MediaTimeDiscontinuityEventArgs ^&gt; ^ MediaTimeDiscontinuity;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.MediaTimeDiscontinuityEventArgs&gt; MediaTimeDiscontinuity;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/MediaTimeDiscontinuityEventArgs&gt; MediaTimeDiscontinuity" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.MediaTimeDiscontinuity" />
      <MemberSignature Language="F#" Value="member this.MediaTimeDiscontinuity : EventHandler&lt;Android.Media.MediaPlayer.MediaTimeDiscontinuityEventArgs&gt; " Usage="member this.MediaTimeDiscontinuity : System.EventHandler&lt;Android.Media.MediaPlayer.MediaTimeDiscontinuityEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+MediaTimeDiscontinuityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metrics">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metrics As PersistableBundle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::OS::PersistableBundle ^ Metrics { Android::OS::PersistableBundle ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.OS.PersistableBundle? Metrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.PersistableBundle Metrics" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.Metrics" />
      <MemberSignature Language="F#" Value="member this.Metrics : Android.OS.PersistableBundle" Usage="Android.Media.MediaPlayer.Metrics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMetrics", "()Landroid/os/PersistableBundle;", "GetGetMetricsHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMetrics", "()Landroid/os/PersistableBundle;", "GetGetMetricsHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.PersistableBundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return Metrics data about the current player.</summary>
        <value>a <c>PersistableBundle</c> containing the set of attributes and values
            available for the media being handled by this instance of MediaPlayer
            The attributes are descibed in <c>MetricsConstants</c>.
            
             Additional vendor-specific fields may also be present in
             the return value.</value>
        <remarks>
          <para>Return Metrics data about the current player.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getMetrics()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getMetrics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Pause" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="mediaPlayer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pause", "()V", "GetPauseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pause", "()V", "GetPauseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses playback.</summary>
        <remarks>
          <para>Pauses playback. Call start() to resume.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#pause()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.pause()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PlaybackParams">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PlaybackParams As PlaybackParams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Media::PlaybackParams ^ PlaybackParams { Android::Media::PlaybackParams ^ get(); void set(Android::Media::PlaybackParams ^ value); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.PlaybackParams PlaybackParams { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.PlaybackParams PlaybackParams" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.PlaybackParams" />
      <MemberSignature Language="F#" Value="member this.PlaybackParams : Android.Media.PlaybackParams with get, set" Usage="Android.Media.MediaPlayer.PlaybackParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPlaybackParams", "()Landroid/media/PlaybackParams;", "GetGetPlaybackParamsHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPlaybackParams", "()Landroid/media/PlaybackParams;", "GetGetPlaybackParamsHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setPlaybackParams", "(Landroid/media/PlaybackParams;)V", "GetSetPlaybackParams_Landroid_media_PlaybackParams_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setPlaybackParams", "(Landroid/media/PlaybackParams;)V", "GetSetPlaybackParams_Landroid_media_PlaybackParams_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.PlaybackParams</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="params">the playback params.</param>
        <summary>Gets the playback params, containing the current playback rate. -or- Sets playback rate using <c>PlaybackParams</c>.</summary>
        <value>the playback params.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the playback params, containing the current playback rate.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getPlaybackParams()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getPlaybackParams()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets playback rate using <c>PlaybackParams</c>. The object sets its internal
            PlaybackParams to the input, except that the object remembers previous speed
            when input speed is zero. This allows the object to resume at previous speed
            when start() is called. Calling it before the object is prepared does not change
            the object state. After the object is prepared, calling it with zero speed is
            equivalent to calling pause(). After the object is prepared, calling it with
            non-zero speed is equivalent to calling start().</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setPlaybackParams(android.media.PlaybackParams)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setPlaybackParams(android.media.PlaybackParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredDevice">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PreferredDevice As AudioDeviceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Media::AudioDeviceInfo ^ PreferredDevice { Android::Media::AudioDeviceInfo ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioDeviceInfo? PreferredDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioDeviceInfo PreferredDevice" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.PreferredDevice" />
      <MemberSignature Language="F#" Value="member this.PreferredDevice : Android.Media.AudioDeviceInfo" Usage="Android.Media.MediaPlayer.PreferredDevice" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Android.Media.IAudioRouting.PreferredDevice</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetPreferredDeviceHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPreferredDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetPreferredDeviceHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioDeviceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the selected output specified by <c>#setPreferredDevice</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the selected output specified by <c>#setPreferredDevice</c>. Note that this
            is not guaranteed to correspond to the actual device being used for playback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getPreferredDevice()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getPreferredDevice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Prepare();" />
      <MemberSignature Language="C#" Value="public virtual void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Prepare" />
      <MemberSignature Language="F#" Value="abstract member Prepare : unit -&gt; unit&#xA;override this.Prepare : unit -&gt; unit" Usage="mediaPlayer.Prepare " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prepare", "()V", "GetPrepareHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prepare", "()V", "GetPrepareHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, synchronously.</summary>
        <remarks>
          <para>Prepares the player for playback, synchronously.</para>
          <para>After setting the datasource and the display surface, you need to either
            call prepare() or prepareAsync(). For files, it is OK to call prepare(),
            which blocks until MediaPlayer is ready for playback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#prepare()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.prepare()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="PrepareAsync">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PrepareAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PrepareAsync();" />
      <MemberSignature Language="C#" Value="public virtual void PrepareAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.PrepareAsync" />
      <MemberSignature Language="F#" Value="abstract member PrepareAsync : unit -&gt; unit&#xA;override this.PrepareAsync : unit -&gt; unit" Usage="mediaPlayer.PrepareAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prepareAsync", "()V", "GetPrepareAsyncHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prepareAsync", "()V", "GetPrepareAsyncHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, asynchronously.</summary>
        <remarks>
          <para>Prepares the player for playback, asynchronously.</para>
          <para>After setting the datasource and the display surface, you need to either
            call prepare() or prepareAsync(). For streams, you should call prepareAsync(),
            which returns immediately, rather than blocking until enough data has been
            buffered.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#prepareAsync()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.prepareAsync()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepared">
      <MemberSignature Language="VB.NET" Value="Public Custom Event Prepared As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Prepared;" />
      <MemberSignature Language="C#" Value="public event EventHandler Prepared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Prepared" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.Prepared" />
      <MemberSignature Language="F#" Value="member this.Prepared : EventHandler " Usage="member this.Prepared : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareDrm">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PrepareDrm (uuid As UUID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PrepareDrm(Java::Util::UUID ^ uuid);" />
      <MemberSignature Language="C#" Value="public virtual void PrepareDrm (Java.Util.UUID uuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareDrm(class Java.Util.UUID uuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.PrepareDrm(Java.Util.UUID)" />
      <MemberSignature Language="F#" Value="abstract member PrepareDrm : Java.Util.UUID -&gt; unit&#xA;override this.PrepareDrm : Java.Util.UUID -&gt; unit" Usage="mediaPlayer.PrepareDrm uuid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("prepareDrm", "(Ljava/util/UUID;)V", "GetPrepareDrm_Ljava_util_UUID_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("prepareDrm", "(Ljava/util/UUID;)V", "GetPrepareDrm_Ljava_util_UUID_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Java.Util.UUID" />
      </Parameters>
      <Docs>
        <param name="uuid">The UUID of the crypto scheme. If not known beforehand, it can be retrieved
            from the source through <c>getDrmInfo</c> or registering a <c>onDrmInfoListener</c>.</param>
        <summary>Prepares the DRM for the current source</summary>
        <remarks>
          <para>Prepares the DRM for the current source</para>
          <para>If <c>OnDrmConfigHelper</c> is registered, it will be called during
            preparation to allow configuration of the DRM properties before opening the
            DRM session. Note that the callback is called synchronously in the thread that called
            <c>prepareDrm</c>. It should be used only for a series of <c>getDrmPropertyString</c>
            and <c>setDrmPropertyString</c> calls and refrain from any lengthy operation.</para>
          <para>If the device has not been provisioned before, this call also provisions the device
            which involves accessing the provisioning server and can take a variable time to
            complete depending on the network connectivity.
            If <c>OnDrmPreparedListener</c> is registered, prepareDrm() runs in non-blocking
            mode by launching the provisioning in the background and returning. The listener
            will be called when provisioning and preparation has finished. If a
            <c>OnDrmPreparedListener</c> is not registered, prepareDrm() waits till provisioning
            and preparation has finished, i.e., runs in blocking mode.</para>
          <para>If <c>OnDrmPreparedListener</c> is registered, it is called to indicate the DRM
            session being ready. The application should not make any assumption about its call
            sequence (e.g., before or after prepareDrm returns), or the thread context that will
            execute the listener (unless the listener is registered with a handler thread).</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#prepareDrm(java.util.UUID)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.prepareDrm(java.util.UUID)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideKeyResponse">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ProvideKeyResponse (keySetId As Byte(), response As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ProvideKeyResponse(cli::array &lt;System::Byte&gt; ^ keySetId, cli::array &lt;System::Byte&gt; ^ response);" />
      <MemberSignature Language="C#" Value="public virtual byte[]? ProvideKeyResponse (byte[]? keySetId, byte[] response);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ProvideKeyResponse(unsigned int8[] keySetId, unsigned int8[] response) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.ProvideKeyResponse(System.Byte[],System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member ProvideKeyResponse : byte[] * byte[] -&gt; byte[]&#xA;override this.ProvideKeyResponse : byte[] * byte[] -&gt; byte[]" Usage="mediaPlayer.ProvideKeyResponse (keySetId, response)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("provideKeyResponse", "([B[B)[B", "GetProvideKeyResponse_arrayBarrayBHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("provideKeyResponse", "([B[B)[B", "GetProvideKeyResponse_arrayBarrayBHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySetId" Type="System.Byte[]" />
        <Parameter Name="response" Type="System.Byte[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keySetId">When the response is for a release request, keySetId identifies
            the saved key associated with the release request (i.e., the same keySetId
            passed to the earlier {@ link # getKeyRequest} call. It MUST be null when the
            response is for either streaming or offline key requests.</param>
        <param name="response">the byte array response from the server</param>
        <summary>A key response is received from the license server by the app, then it is
            provided to the DRM engine plugin using provideKeyResponse.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>A key response is received from the license server by the app, then it is
            provided to the DRM engine plugin using provideKeyResponse. When the
            response is for an offline key request, a key-set identifier is returned that
            can be used to later restore the keys to a new session with the method
            {@ link # restoreKeys}.
            When the response is for a streaming or release request, null is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#provideKeyResponse(byte[],%20byte[])" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.provideKeyResponse(byte[], byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Release ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Release();" />
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Release" />
      <MemberSignature Language="F#" Value="abstract member Release : unit -&gt; unit&#xA;override this.Release : unit -&gt; unit" Usage="mediaPlayer.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("release", "()V", "GetReleaseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("release", "()V", "GetReleaseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases resources associated with this MediaPlayer object.</summary>
        <remarks>
          <para>Releases resources associated with this MediaPlayer object.</para>
          <para>You must call this method once the instance is no longer required.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#release()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.release()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseDrm">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseDrm ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseDrm();" />
      <MemberSignature Language="C#" Value="public virtual void ReleaseDrm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseDrm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.ReleaseDrm" />
      <MemberSignature Language="F#" Value="abstract member ReleaseDrm : unit -&gt; unit&#xA;override this.ReleaseDrm : unit -&gt; unit" Usage="mediaPlayer.ReleaseDrm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseDrm", "()V", "GetReleaseDrmHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseDrm", "()V", "GetReleaseDrmHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the DRM session</summary>
        <remarks>
          <para>Releases the DRM session</para>
          <para>The player has to have an active DRM session and be in stopped, or prepared
            state before this call is made.
            A <c>reset()</c> call will release the DRM session implicitly.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#releaseDrm()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.releaseDrm()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnRoutingChangedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveOnRoutingChangedListener (listener As IAudioRoutingOnRoutingChangedListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveOnRoutingChangedListener(Android::Media::IAudioRoutingOnRoutingChangedListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void RemoveOnRoutingChangedListener (Android.Media.IAudioRoutingOnRoutingChangedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnRoutingChangedListener(class Android.Media.IAudioRoutingOnRoutingChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.RemoveOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener)" />
      <MemberSignature Language="F#" Value="abstract member RemoveOnRoutingChangedListener : Android.Media.IAudioRoutingOnRoutingChangedListener -&gt; unit&#xA;override this.RemoveOnRoutingChangedListener : Android.Media.IAudioRoutingOnRoutingChangedListener -&gt; unit" Usage="mediaPlayer.RemoveOnRoutingChangedListener listener" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Media.IAudioRouting.RemoveOnRoutingChangedListener(Android.Media.IAudioRoutingOnRoutingChangedListener)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", "GetRemoveOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnRoutingChangedListener", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V", "GetRemoveOnRoutingChangedListener_Landroid_media_AudioRouting_OnRoutingChangedListener_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.IAudioRoutingOnRoutingChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The previously added <c>AudioRouting.OnRoutingChangedListener</c> interface
            to remove.</param>
        <summary>Removes an <c>AudioRouting.OnRoutingChangedListener</c> which has been previously added
            to receive rerouting notifications.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.removeOnRoutingChangedListener(android.media.OnRoutingChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="mediaPlayer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "GetResetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "GetResetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the MediaPlayer to its uninitialized state.</summary>
        <remarks>
          <para>Resets the MediaPlayer to its uninitialized state. After calling
            this method, you will have to initialize it again by setting the
            data source and calling prepare().</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#reset()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RestoreKeys">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RestoreKeys (keySetId As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RestoreKeys(cli::array &lt;System::Byte&gt; ^ keySetId);" />
      <MemberSignature Language="C#" Value="public virtual void RestoreKeys (byte[] keySetId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RestoreKeys(unsigned int8[] keySetId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.RestoreKeys(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member RestoreKeys : byte[] -&gt; unit&#xA;override this.RestoreKeys : byte[] -&gt; unit" Usage="mediaPlayer.RestoreKeys keySetId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("restoreKeys", "([B)V", "GetRestoreKeys_arrayBHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("restoreKeys", "([B)V", "GetRestoreKeys_arrayBHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySetId" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keySetId">identifies the saved key set to restore</param>
        <summary>Restore persisted offline keys into a new session.</summary>
        <remarks>
          <para>Restore persisted offline keys into a new session.  keySetId identifies the
            keys to load, obtained from a prior call to <c>#provideKeyResponse</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#restoreKeys(byte[])" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.restoreKeys(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedDevice">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RoutedDevice As AudioDeviceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Media::AudioDeviceInfo ^ RoutedDevice { Android::Media::AudioDeviceInfo ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioDeviceInfo? RoutedDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.AudioDeviceInfo RoutedDevice" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.RoutedDevice" />
      <MemberSignature Language="F#" Value="member this.RoutedDevice : Android.Media.AudioDeviceInfo" Usage="Android.Media.MediaPlayer.RoutedDevice" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Android.Media.IAudioRouting.RoutedDevice</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetRoutedDeviceHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRoutedDevice", "()Landroid/media/AudioDeviceInfo;", "GetGetRoutedDeviceHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioDeviceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <c>AudioDeviceInfo</c> identifying the current routing of this MediaPlayer
            Note: The query is only valid if the MediaPlayer is currently playing.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns an <c>AudioDeviceInfo</c> identifying the current routing of this MediaPlayer
            Note: The query is only valid if the MediaPlayer is currently playing.
            If the player is not playing, the returned device can be null or correspond to previously
            selected device when the player was last active.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getRoutedDevice()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getRoutedDevice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingChanged">
      <MemberSignature Language="VB.NET" Value="Public Custom Event RoutingChanged As EventHandler(Of AudioRoutingOnRoutingChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::AudioRoutingOnRoutingChangedEventArgs ^&gt; ^ RoutingChanged;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; RoutingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; RoutingChanged" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.RoutingChanged" />
      <MemberSignature Language="F#" Value="member this.RoutingChanged : EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; " Usage="member this.RoutingChanged : System.EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.AudioRoutingOnRoutingChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekComplete">
      <MemberSignature Language="VB.NET" Value="Public Custom Event SeekComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SeekComplete;" />
      <MemberSignature Language="C#" Value="public event EventHandler SeekComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SeekComplete" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.SeekComplete" />
      <MemberSignature Language="F#" Value="member this.SeekComplete : EventHandler " Usage="member this.SeekComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekTo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SeekTo (msec As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SeekTo(int msec);" />
      <MemberSignature Language="C#" Value="public virtual void SeekTo (int msec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SeekTo(int32 msec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SeekTo(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SeekTo : int -&gt; unit&#xA;override this.SeekTo : int -&gt; unit" Usage="mediaPlayer.SeekTo msec" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("seekTo", "(I)V", "GetSeekTo_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("seekTo", "(I)V", "GetSeekTo_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="msec">the offset in milliseconds from the start to seek to</param>
        <summary>Seeks to specified time position.</summary>
        <remarks>
          <para>Seeks to specified time position.
            Same as <c>#seekTo(long, int)</c> with <c>mode = SEEK_PREVIOUS_SYNC</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#seekTo(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.seekTo(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized
</exception>
      </Docs>
    </Member>
    <Member MemberName="SeekTo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SeekTo (msec As Long, mode As MediaPlayerSeekMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SeekTo(long msec, Android::Media::MediaPlayerSeekMode mode);" />
      <MemberSignature Language="C#" Value="public virtual void SeekTo (long msec, Android.Media.MediaPlayerSeekMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SeekTo(int64 msec, valuetype Android.Media.MediaPlayerSeekMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SeekTo(System.Int64,Android.Media.MediaPlayerSeekMode)" />
      <MemberSignature Language="F#" Value="abstract member SeekTo : int64 * Android.Media.MediaPlayerSeekMode -&gt; unit&#xA;override this.SeekTo : int64 * Android.Media.MediaPlayerSeekMode -&gt; unit" Usage="mediaPlayer.SeekTo (msec, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("seekTo", "(JI)V", "GetSeekTo_JIHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("seekTo", "(JI)V", "GetSeekTo_JIHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msec" Type="System.Int64" />
        <Parameter Name="mode" Type="Android.Media.MediaPlayerSeekMode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="msec">the offset in milliseconds from the start to seek to.
            When seeking to the given time position, there is no guarantee that the data source
            has a frame located at the position. When this happens, a frame nearby will be rendered.
            If msec is negative, time position zero will be used.
            If msec is larger than duration, duration will be used.</param>
        <param name="mode">the mode indicating where exactly to seek to.
            Use <c>#SEEK_PREVIOUS_SYNC</c> if one wants to seek to a sync frame
            that has a timestamp earlier than or the same as msec. Use
            <c>#SEEK_NEXT_SYNC</c> if one wants to seek to a sync frame
            that has a timestamp later than or the same as msec. Use
            <c>#SEEK_CLOSEST_SYNC</c> if one wants to seek to a sync frame
            that has a timestamp closest to or the same as msec. Use
            <c>#SEEK_CLOSEST</c> if one wants to seek to a frame that may
            or may not be a sync frame but is closest to or the same as msec.
            <c>#SEEK_CLOSEST</c> often has larger performance overhead compared
            to the other options if there is no sync frame located at msec.</param>
        <summary>Moves the media to specified time position by considering the given mode.</summary>
        <remarks>
          <para>Moves the media to specified time position by considering the given mode.</para>
          <para>When seekTo is finished, the user will be notified via OnSeekComplete supplied by the user.
            There is at most one active seekTo processed at any time. If there is a to-be-completed
            seekTo, new seekTo requests will be queued in such a way that only the last request
            is kept. When current seekTo is completed, the queued request will be processed if
            that request is different from just-finished seekTo operation, i.e., the requested
            position or mode is different.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#seekTo(long,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.seekTo(long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTrack">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SelectTrack (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SelectTrack(int index);" />
      <MemberSignature Language="C#" Value="public virtual void SelectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectTrack(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SelectTrack : int -&gt; unit&#xA;override this.SelectTrack : int -&gt; unit" Usage="mediaPlayer.SelectTrack index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("selectTrack", "(I)V", "GetSelectTrack_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("selectTrack", "(I)V", "GetSelectTrack_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be selected. The valid range of the index
            is 0..total number of track - 1. The total number of tracks as well as the type of
            each individual track can be found by calling <c>#getTrackInfo()</c> method.</param>
        <summary>Selects a track.</summary>
        <remarks>
          <para>Selects a track.</para>
          <para>If a MediaPlayer is in invalid state, it throws an IllegalStateException exception.
            If a MediaPlayer is in &lt;em&gt;Started&lt;/em&gt; state, the selected track is presented immediately.
            If a MediaPlayer is not in Started state, it just marks the track to be played.</para>
          <para>In any valid state, if it is called multiple times on the same type of track (ie. Video,
            Audio, Timed Text), the most recent one will be chosen.</para>
          <para>The first audio and video tracks are selected by default if available, even though
            this method is not called. However, no timed text track will be selected until
            this function is called.</para>
          <para>Currently, only timed text, subtitle or audio tracks can be selected via this method.
            In addition, the support for selecting an audio track at runtime is pretty limited
            in that an audio track can only be selected in the &lt;em&gt;Prepared&lt;/em&gt; state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#selectTrack(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.selectTrack(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioAttributes">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetAudioAttributes (attributes As AudioAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAudioAttributes(Android::Media::AudioAttributes ^ attributes);" />
      <MemberSignature Language="C#" Value="public virtual void SetAudioAttributes (Android.Media.AudioAttributes? attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioAttributes(class Android.Media.AudioAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetAudioAttributes(Android.Media.AudioAttributes)" />
      <MemberSignature Language="F#" Value="abstract member SetAudioAttributes : Android.Media.AudioAttributes -&gt; unit&#xA;override this.SetAudioAttributes : Android.Media.AudioAttributes -&gt; unit" Usage="mediaPlayer.SetAudioAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAudioAttributes", "(Landroid/media/AudioAttributes;)V", "GetSetAudioAttributes_Landroid_media_AudioAttributes_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAudioAttributes", "(Landroid/media/AudioAttributes;)V", "GetSetAudioAttributes_Landroid_media_AudioAttributes_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">a non-null set of audio attributes</param>
        <summary>Sets the audio attributes for this MediaPlayer.</summary>
        <remarks>
          <para>Sets the audio attributes for this MediaPlayer.
            See <c>AudioAttributes</c> for how to build and configure an instance of this class.
            You must call this method before <c>#prepare()</c> or <c>#prepareAsync()</c> in order
            for the audio attributes to become effective thereafter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setAudioAttributes(android.media.AudioAttributes)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setAudioAttributes(android.media.AudioAttributes)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioStreamType">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetAudioStreamType (streamtype As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAudioStreamType(Android::Media::Stream streamtype);" />
      <MemberSignature Language="C#" Value="public virtual void SetAudioStreamType (Android.Media.Stream streamtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioStreamType(valuetype Android.Media.Stream streamtype) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetAudioStreamType(Android.Media.Stream)" />
      <MemberSignature Language="F#" Value="abstract member SetAudioStreamType : Android.Media.Stream -&gt; unit&#xA;override this.SetAudioStreamType : Android.Media.Stream -&gt; unit" Usage="mediaPlayer.SetAudioStreamType streamtype" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAudioStreamType", "(I)V", "GetSetAudioStreamType_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAudioStreamType", "(I)V", "GetSetAudioStreamType_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamtype" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamtype">the audio stream type</param>
        <summary>Sets the audio stream type for this MediaPlayer.</summary>
        <remarks>
          <para>Sets the audio stream type for this MediaPlayer. See <c>AudioManager</c>
            for a list of stream types. Must call this method before prepare() or
            prepareAsync() in order for the target stream type to become effective
            thereafter.</para>
          <para>This member is deprecated. use <c>#setAudioAttributes(AudioAttributes)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setAudioStreamType(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setAudioStreamType(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Media.AudioManager" />
      </Docs>
    </Member>
    <Member MemberName="SetAuxEffectSendLevel">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetAuxEffectSendLevel (level As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAuxEffectSendLevel(float level);" />
      <MemberSignature Language="C#" Value="public virtual void SetAuxEffectSendLevel (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAuxEffectSendLevel(float32 level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetAuxEffectSendLevel(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetAuxEffectSendLevel : single -&gt; unit&#xA;override this.SetAuxEffectSendLevel : single -&gt; unit" Usage="mediaPlayer.SetAuxEffectSendLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAuxEffectSendLevel", "(F)V", "GetSetAuxEffectSendLevel_FHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAuxEffectSendLevel", "(F)V", "GetSetAuxEffectSendLevel_FHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">send level scalar</param>
        <summary>Sets the send level of the player to the attached auxiliary effect.</summary>
        <remarks>
          <para>Sets the send level of the player to the attached auxiliary effect.
            See <c>#attachAuxEffect(int)</c>. The level value range is 0 to 1.0.</para>
          <para>By default the send level is 0, so even if an effect is attached to the player
            this method must be called for the effect to be applied.</para>
          <para>Note that the passed level value is a raw scalar. UI controls should be scaled
            logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,
            so an appropriate conversion from linear UI input x to level is:
            x == 0 -&gt; level = 0
            0 &lt; x &lt;= R -&gt; level = 10^(72*(x-R)/20/R)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setAuxEffectSendLevel(float)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setAuxEffectSendLevel(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (afd As AssetFileDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Android::Content::Res::AssetFileDescriptor ^ afd);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Android.Content.Res.AssetFileDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Android.Content.Res.AssetFileDescriptor -&gt; unit&#xA;override this.SetDataSource : Android.Content.Res.AssetFileDescriptor -&gt; unit" Usage="mediaPlayer.SetDataSource afd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Landroid/content/res/AssetFileDescriptor;)V", "GetSetDataSource_Landroid_content_res_AssetFileDescriptor_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Landroid/content/res/AssetFileDescriptor;)V", "GetSetDataSource_Landroid_content_res_AssetFileDescriptor_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">the AssetFileDescriptor for the file you want to play</param>
        <summary>Sets the data source (AssetFileDescriptor) to use.</summary>
        <remarks>
          <para>Sets the data source (AssetFileDescriptor) to use. It is the caller's
            responsibility to close the file descriptor. It is safe to do so as soon
            as this call returns.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(android.content.res.AssetFileDescriptor)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(android.content.res.AssetFileDescriptor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (dataSource As MediaDataSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Android::Media::MediaDataSource ^ dataSource);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Media.MediaDataSource? dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Media.MediaDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Android.Media.MediaDataSource)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Android.Media.MediaDataSource -&gt; unit&#xA;override this.SetDataSource : Android.Media.MediaDataSource -&gt; unit" Usage="mediaPlayer.SetDataSource dataSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Landroid/media/MediaDataSource;)V", "GetSetDataSource_Landroid_media_MediaDataSource_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Landroid/media/MediaDataSource;)V", "GetSetDataSource_Landroid_media_MediaDataSource_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="Android.Media.MediaDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">the MediaDataSource for the media you want to play</param>
        <summary>Sets the data source (MediaDataSource) to use.</summary>
        <remarks>
          <para>Sets the data source (MediaDataSource) to use.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(android.media.MediaDataSource)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(android.media.MediaDataSource)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (fd As FileDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Java::IO::FileDescriptor ^ fd);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor? fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Java.IO.FileDescriptor -&gt; unit&#xA;override this.SetDataSource : Java.IO.FileDescriptor -&gt; unit" Usage="mediaPlayer.SetDataSource fd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;)V", "GetSetDataSource_Ljava_io_FileDescriptor_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;)V", "GetSetDataSource_Ljava_io_FileDescriptor_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <summary>Sets the data source (FileDescriptor) to use.</summary>
        <remarks>
          <para>Sets the data source (FileDescriptor) to use. It is the caller's responsibility
            to close the file descriptor. It is safe to do so as soon as this call returns.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(java.io.FileDescriptor)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(java.io.FileDescriptor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(System::String ^ path);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (string? path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : string -&gt; unit&#xA;override this.SetDataSource : string -&gt; unit" Usage="mediaPlayer.SetDataSource path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Ljava/lang/String;)V", "GetSetDataSource_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Ljava/lang/String;)V", "GetSetDataSource_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">the path of the file, or the http/rtsp URL of the stream you want to play</param>
        <summary>Sets the data source (file-path or http/rtsp URL) to use.</summary>
        <remarks>
          <para>Sets the data source (file-path or http/rtsp URL) to use.</para>
          <para>When <c>path</c> refers to a local file, the file may actually be opened by a
            process other than the calling application.  This implies that the pathname
            should be an absolute path (as any other process runs with unspecified current working
            directory), and that the pathname should reference a world-readable file.
            As an alternative, the application could first open the file for reading,
            and then use the file descriptor form <c>#setDataSource(FileDescriptor)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state

 <para tool="javadoc-to-mdoc" />When <c>path</c> refers to a local file, the file may actually be opened by a
 process other than the calling application.  This implies that the pathname
 should be an absolute path (as any other process runs with unspecified current working
 directory), and that the pathname should reference a world-readable file.
 As an alternative, the application could first open the file for reading,
 and then use the file descriptor form <see cref="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor)" />.
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (context As Context, uri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Android::Content::Context ^ context, Android::Net::Uri ^ uri);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Android.Content.Context,Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Android.Content.Context * Android.Net.Uri -&gt; unit&#xA;override this.SetDataSource : Android.Content.Context * Android.Net.Uri -&gt; unit" Usage="mediaPlayer.SetDataSource (context, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <summary>Sets the data source as a content Uri.</summary>
        <remarks>
          <para>Sets the data source as a content Uri.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(android.content.Context,%20android.net.Uri)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(android.content.Context, android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (context As Context, uri As Uri, headers As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Android::Content::Context ^ context, Android::Net::Uri ^ uri, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ headers);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt;? headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Android.Content.Context,Android.Net.Uri,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit&#xA;override this.SetDataSource : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="mediaPlayer.SetDataSource (context, uri, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <param name="headers">the headers to be sent together with the request for the data</param>
        <summary>Sets the data source as a content Uri.</summary>
        <remarks>
          <para>Sets the data source as a content Uri.</para>
          <para>&lt;strong&gt;Note&lt;/strong&gt; that the cross domain redirection is allowed by default,
            but that can be changed with key/value pairs through the headers parameter with
            "android-allow-cross-domain-redirect" as the key and "0" or "1" as the value to
            disallow or allow cross domain redirection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(android.content.Context,%20android.net.Uri,%20java.util.Map%3Cjava.lang.String,%20java.lang.String%3E)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String, java.lang.String&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (fd As FileDescriptor, offset As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Java::IO::FileDescriptor ^ fd, long offset, long length);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor? fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Java.IO.FileDescriptor * int64 * int64 -&gt; unit&#xA;override this.SetDataSource : Java.IO.FileDescriptor * int64 * int64 -&gt; unit" Usage="mediaPlayer.SetDataSource (fd, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;JJ)V", "GetSetDataSource_Ljava_io_FileDescriptor_JJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;JJ)V", "GetSetDataSource_Ljava_io_FileDescriptor_JJHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <summary>Sets the data source (FileDescriptor) to use.</summary>
        <remarks>
          <para>Sets the data source (FileDescriptor) to use.  The FileDescriptor must be
            seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility
            to close the file descriptor. It is safe to do so as soon as this call returns.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(java.io.FileDescriptor,%20long,%20long)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(java.io.FileDescriptor, long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataSource (context As Context, uri As Uri, headers As IDictionary(Of String, String), cookies As IList(Of HttpCookie))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDataSource(Android::Content::Context ^ context, Android::Net::Uri ^ uri, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ headers, System::Collections::Generic::IList&lt;Java::Net::HttpCookie ^&gt; ^ cookies);" />
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt;? headers, System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt;? cookies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers, class System.Collections.Generic.IList`1&lt;class Java.Net.HttpCookie&gt; cookies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSource(Android.Content.Context,Android.Net.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{Java.Net.HttpCookie})" />
      <MemberSignature Language="F#" Value="abstract member SetDataSource : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt; -&gt; unit&#xA;override this.SetDataSource : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt; -&gt; unit" Usage="mediaPlayer.SetDataSource (context, uri, headers, cookies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;Ljava/util/List;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Ljava_util_List_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;Ljava/util/List;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Ljava_util_List_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cookies" Type="System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <param name="headers">the headers to be sent together with the request for the data
                           The headers must not include cookies. Instead, use the cookies param.</param>
        <param name="cookies">the cookies to be sent together with the request</param>
        <summary>Sets the data source as a content Uri.</summary>
        <remarks>
          <para>Sets the data source as a content Uri.</para>
          <para>To provide cookies for the subsequent HTTP requests, you can install your own default cookie
            handler and use other variants of setDataSource APIs instead. Alternatively, you can use
            this API to pass the cookies as a list of HttpCookie. If the app has not installed
            a CookieHandler already, this API creates a CookieManager and populates its CookieStore with
            the provided cookies. If the app has installed its own handler already, this API requires the
            handler to be of CookieManager type such that the API can update the manager’s CookieStore.</para>
          <para>&lt;strong&gt;Note&lt;/strong&gt; that the cross domain redirection is allowed by default,
            but that can be changed with key/value pairs through the headers parameter with
            "android-allow-cross-domain-redirect" as the key and "0" or "1" as the value to
            disallow or allow cross domain redirection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(android.content.Context,%20android.net.Uri,%20java.util.Map%3Cjava.lang.String,%20java.lang.String%3E,%20java.util.List%3Cjava.net.HttpCookie%3E)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDataSource(android.content.Context, android.net.Uri, java.util.Map&lt;java.lang.String, java.lang.String&gt;, java.util.List&lt;java.net.HttpCookie&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (afd As AssetFileDescriptor) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Android::Content::Res::AssetFileDescriptor ^ afd);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Android.Content.Res.AssetFileDescriptor)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Android.Content.Res.AssetFileDescriptor -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync afd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (dataSource As MediaDataSource) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Android::Media::MediaDataSource ^ dataSource);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Media.MediaDataSource? dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Media.MediaDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Android.Media.MediaDataSource)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Android.Media.MediaDataSource -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync dataSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="Android.Media.MediaDataSource">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataSource">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (fd As FileDescriptor) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Java::IO::FileDescriptor ^ fd);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor? fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Java.IO.FileDescriptor)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Java.IO.FileDescriptor -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync fd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (path As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(System::String ^ path);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (string? path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : string -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (context As Context, uri As Uri) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Android::Content::Context ^ context, Android::Net::Uri ^ uri);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Android.Content.Context,Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Android.Content.Context * Android.Net.Uri -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync (context, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (context As Context, uri As Uri, headers As IDictionary(Of String, String)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Android::Content::Context ^ context, Android::Net::Uri ^ uri, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ headers);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt;? headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Android.Content.Context,Android.Net.Uri,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync (context, uri, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (fd As FileDescriptor, offset As Long, length As Long) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Java::IO::FileDescriptor ^ fd, long offset, long length);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor? fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Java.IO.FileDescriptor,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Java.IO.FileDescriptor * int64 * int64 -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync (fd, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="VB.NET" Value="Public Function SetDataSourceAsync (context As Context, uri As Uri, headers As IDictionary(Of String, String), cookies As IList(Of HttpCookie)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SetDataSourceAsync(Android::Content::Context ^ context, Android::Net::Uri ^ uri, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ headers, System::Collections::Generic::IList&lt;Java::Net::HttpCookie ^&gt; ^ cookies);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt;? headers, System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt;? cookies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers, class System.Collections.Generic.IList`1&lt;class Java.Net.HttpCookie&gt; cookies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDataSourceAsync(Android.Content.Context,Android.Net.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IList{Java.Net.HttpCookie})" />
      <MemberSignature Language="F#" Value="member this.SetDataSourceAsync : Android.Content.Context * Android.Net.Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt; -&gt; System.Threading.Tasks.Task" Usage="mediaPlayer.SetDataSourceAsync (context, uri, headers, cookies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cookies" Type="System.Collections.Generic.IList&lt;Java.Net.HttpCookie&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <param name="cookies">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDisplay">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDisplay (sh As ISurfaceHolder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDisplay(Android::Views::ISurfaceHolder ^ sh);" />
      <MemberSignature Language="C#" Value="public virtual void SetDisplay (Android.Views.ISurfaceHolder? sh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDisplay(class Android.Views.ISurfaceHolder sh) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDisplay(Android.Views.ISurfaceHolder)" />
      <MemberSignature Language="F#" Value="abstract member SetDisplay : Android.Views.ISurfaceHolder -&gt; unit&#xA;override this.SetDisplay : Android.Views.ISurfaceHolder -&gt; unit" Usage="mediaPlayer.SetDisplay sh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDisplay", "(Landroid/view/SurfaceHolder;)V", "GetSetDisplay_Landroid_view_SurfaceHolder_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDisplay", "(Landroid/view/SurfaceHolder;)V", "GetSetDisplay_Landroid_view_SurfaceHolder_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sh" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="sh">the SurfaceHolder to use for video display</param>
        <summary>Sets the <c>SurfaceHolder</c> to use for displaying the video
            portion of the media.</summary>
        <remarks>
          <para>Sets the <c>SurfaceHolder</c> to use for displaying the video
            portion of the media.
            
            Either a surface holder or surface must be set if a display or video sink
            is needed.  Not calling this method or <c>#setSurface(Surface)</c>
            when playing back a video will result in only the audio track being played.
            A null surface holder or surface will result in only the audio track being
            played.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDisplay(android.view.SurfaceHolder)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDisplay(android.view.SurfaceHolder)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetDrmPropertyString">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDrmPropertyString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDrmPropertyString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="C#" Value="public virtual void SetDrmPropertyString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDrmPropertyString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetDrmPropertyString(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetDrmPropertyString : string * string -&gt; unit&#xA;override this.SetDrmPropertyString : string * string -&gt; unit" Usage="mediaPlayer.SetDrmPropertyString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDrmPropertyString", "(Ljava/lang/String;Ljava/lang/String;)V", "GetSetDrmPropertyString_Ljava_lang_String_Ljava_lang_String_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDrmPropertyString", "(Ljava/lang/String;Ljava/lang/String;)V", "GetSetDrmPropertyString_Ljava_lang_String_Ljava_lang_String_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.StringDef(Fields=new System.String[] { "PropertyVendor", "PropertyVersion", "PropertyDescription", "PropertyAlgorithms" }, Type="Android.Media.MediaDrm")]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.StringDef(Fields=new System.String[] { "PropertyVendor", "PropertyVersion", "PropertyDescription", "PropertyAlgorithms" }, Type="Android.Media.MediaDrm")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">the property name</param>
        <param name="value">the property value
            
            Standard fields names are:
            <c>MediaDrm#PROPERTY_VENDOR</c>, <c>MediaDrm#PROPERTY_VERSION</c>,
            <c>MediaDrm#PROPERTY_DESCRIPTION</c>, <c>MediaDrm#PROPERTY_ALGORITHMS</c></param>
        <summary>Set a DRM engine plugin String property value.</summary>
        <remarks>
          <para>Set a DRM engine plugin String property value.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setDrmPropertyString(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setDrmPropertyString(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNextMediaPlayer">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetNextMediaPlayer (next As MediaPlayer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetNextMediaPlayer(Android::Media::MediaPlayer ^ next);" />
      <MemberSignature Language="C#" Value="public virtual void SetNextMediaPlayer (Android.Media.MediaPlayer? next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNextMediaPlayer(class Android.Media.MediaPlayer next) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetNextMediaPlayer(Android.Media.MediaPlayer)" />
      <MemberSignature Language="F#" Value="abstract member SetNextMediaPlayer : Android.Media.MediaPlayer -&gt; unit&#xA;override this.SetNextMediaPlayer : Android.Media.MediaPlayer -&gt; unit" Usage="mediaPlayer.SetNextMediaPlayer next" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setNextMediaPlayer", "(Landroid/media/MediaPlayer;)V", "GetSetNextMediaPlayer_Landroid_media_MediaPlayer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setNextMediaPlayer", "(Landroid/media/MediaPlayer;)V", "GetSetNextMediaPlayer_Landroid_media_MediaPlayer_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="Android.Media.MediaPlayer" />
      </Parameters>
      <Docs>
        <param name="next">the player to start after this one completes playback.</param>
        <summary>Set the MediaPlayer to start when this MediaPlayer finishes playback
            (i.</summary>
        <remarks>
          <para>Set the MediaPlayer to start when this MediaPlayer finishes playback
            (i.e. reaches the end of the stream).
            The media framework will attempt to transition from this player to
            the next as seamlessly as possible. The next player can be set at
            any time before completion, but shall be after setDataSource has been
            called successfully. The next player must be prepared by the
            app, and the application should not call start() on it.
            The next MediaPlayer must be different from 'this'. An exception
            will be thrown if next == this.
            The application may call setNextMediaPlayer(null) to indicate no
            next player should be started at the end of playback.
            If the current player is looping, it will keep looping and the next
            player will not be started.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setNextMediaPlayer(android.media.MediaPlayer)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setNextMediaPlayer(android.media.MediaPlayer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnBufferingUpdateListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnBufferingUpdateListener (listener As MediaPlayer.IOnBufferingUpdateListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnBufferingUpdateListener(Android::Media::MediaPlayer::IOnBufferingUpdateListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnBufferingUpdateListener (Android.Media.MediaPlayer.IOnBufferingUpdateListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnBufferingUpdateListener(class Android.Media.MediaPlayer/IOnBufferingUpdateListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnBufferingUpdateListener(Android.Media.MediaPlayer.IOnBufferingUpdateListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnBufferingUpdateListener : Android.Media.MediaPlayer.IOnBufferingUpdateListener -&gt; unit&#xA;override this.SetOnBufferingUpdateListener : Android.Media.MediaPlayer.IOnBufferingUpdateListener -&gt; unit" Usage="mediaPlayer.SetOnBufferingUpdateListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnBufferingUpdateListener", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V", "GetSetOnBufferingUpdateListener_Landroid_media_MediaPlayer_OnBufferingUpdateListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnBufferingUpdateListener", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V", "GetSetOnBufferingUpdateListener_Landroid_media_MediaPlayer_OnBufferingUpdateListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnBufferingUpdateListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run.</param>
        <summary>Register a callback to be invoked when the status of a network
            stream's buffer has changed.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnBufferingUpdateListener(android.media.OnBufferingUpdateListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnBufferingUpdateListener(android.media.OnBufferingUpdateListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnCompletionListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnCompletionListener (listener As MediaPlayer.IOnCompletionListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnCompletionListener(Android::Media::MediaPlayer::IOnCompletionListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnCompletionListener (Android.Media.MediaPlayer.IOnCompletionListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnCompletionListener(class Android.Media.MediaPlayer/IOnCompletionListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnCompletionListener(Android.Media.MediaPlayer.IOnCompletionListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnCompletionListener : Android.Media.MediaPlayer.IOnCompletionListener -&gt; unit&#xA;override this.SetOnCompletionListener : Android.Media.MediaPlayer.IOnCompletionListener -&gt; unit" Usage="mediaPlayer.SetOnCompletionListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnCompletionListener", "(Landroid/media/MediaPlayer$OnCompletionListener;)V", "GetSetOnCompletionListener_Landroid_media_MediaPlayer_OnCompletionListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnCompletionListener", "(Landroid/media/MediaPlayer$OnCompletionListener;)V", "GetSetOnCompletionListener_Landroid_media_MediaPlayer_OnCompletionListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnCompletionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when the end of a media source
            has been reached during playback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnCompletionListener(android.media.OnCompletionListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnCompletionListener(android.media.OnCompletionListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnDrmConfigHelper">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnDrmConfigHelper (listener As MediaPlayer.IOnDrmConfigHelper)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnDrmConfigHelper(Android::Media::MediaPlayer::IOnDrmConfigHelper ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnDrmConfigHelper (Android.Media.MediaPlayer.IOnDrmConfigHelper? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDrmConfigHelper(class Android.Media.MediaPlayer/IOnDrmConfigHelper listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnDrmConfigHelper(Android.Media.MediaPlayer.IOnDrmConfigHelper)" />
      <MemberSignature Language="F#" Value="abstract member SetOnDrmConfigHelper : Android.Media.MediaPlayer.IOnDrmConfigHelper -&gt; unit&#xA;override this.SetOnDrmConfigHelper : Android.Media.MediaPlayer.IOnDrmConfigHelper -&gt; unit" Usage="mediaPlayer.SetOnDrmConfigHelper listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnDrmConfigHelper", "(Landroid/media/MediaPlayer$OnDrmConfigHelper;)V", "GetSetOnDrmConfigHelper_Landroid_media_MediaPlayer_OnDrmConfigHelper_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnDrmConfigHelper", "(Landroid/media/MediaPlayer$OnDrmConfigHelper;)V", "GetSetOnDrmConfigHelper_Landroid_media_MediaPlayer_OnDrmConfigHelper_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnDrmConfigHelper" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked for configuration of the DRM object before
            the session is created.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnDrmConfigHelper(android.media.OnDrmConfigHelper)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnDrmConfigHelper(android.media.OnDrmConfigHelper)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnDrmInfoListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnDrmInfoListener (listener As MediaPlayer.IOnDrmInfoListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnDrmInfoListener(Android::Media::MediaPlayer::IOnDrmInfoListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnDrmInfoListener (Android.Media.MediaPlayer.IOnDrmInfoListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDrmInfoListener(class Android.Media.MediaPlayer/IOnDrmInfoListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnDrmInfoListener(Android.Media.MediaPlayer.IOnDrmInfoListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnDrmInfoListener : Android.Media.MediaPlayer.IOnDrmInfoListener -&gt; unit&#xA;override this.SetOnDrmInfoListener : Android.Media.MediaPlayer.IOnDrmInfoListener -&gt; unit" Usage="mediaPlayer.SetOnDrmInfoListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnDrmInfoListener", "(Landroid/media/MediaPlayer$OnDrmInfoListener;)V", "GetSetOnDrmInfoListener_Landroid_media_MediaPlayer_OnDrmInfoListener_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnDrmInfoListener", "(Landroid/media/MediaPlayer$OnDrmInfoListener;)V", "GetSetOnDrmInfoListener_Landroid_media_MediaPlayer_OnDrmInfoListener_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnDrmInfoListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when the DRM info is
            known.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnDrmInfoListener(android.media.OnDrmInfoListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnDrmInfoListener(android.media.OnDrmInfoListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnDrmInfoListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnDrmInfoListener (listener As MediaPlayer.IOnDrmInfoListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnDrmInfoListener(Android::Media::MediaPlayer::IOnDrmInfoListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnDrmInfoListener (Android.Media.MediaPlayer.IOnDrmInfoListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDrmInfoListener(class Android.Media.MediaPlayer/IOnDrmInfoListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnDrmInfoListener(Android.Media.MediaPlayer.IOnDrmInfoListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetOnDrmInfoListener : Android.Media.MediaPlayer.IOnDrmInfoListener * Android.OS.Handler -&gt; unit&#xA;override this.SetOnDrmInfoListener : Android.Media.MediaPlayer.IOnDrmInfoListener * Android.OS.Handler -&gt; unit" Usage="mediaPlayer.SetOnDrmInfoListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnDrmInfoListener", "(Landroid/media/MediaPlayer$OnDrmInfoListener;Landroid/os/Handler;)V", "GetSetOnDrmInfoListener_Landroid_media_MediaPlayer_OnDrmInfoListener_Landroid_os_Handler_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnDrmInfoListener", "(Landroid/media/MediaPlayer$OnDrmInfoListener;Landroid/os/Handler;)V", "GetSetOnDrmInfoListener_Landroid_media_MediaPlayer_OnDrmInfoListener_Landroid_os_Handler_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnDrmInfoListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <param name="handler">To be added.</param>
        <summary>Register a callback to be invoked when the DRM info is
            known.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnDrmInfoListener(android.media.OnDrmInfoListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnDrmInfoListener(android.media.OnDrmInfoListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnDrmPreparedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnDrmPreparedListener (listener As MediaPlayer.IOnDrmPreparedListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnDrmPreparedListener(Android::Media::MediaPlayer::IOnDrmPreparedListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnDrmPreparedListener (Android.Media.MediaPlayer.IOnDrmPreparedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDrmPreparedListener(class Android.Media.MediaPlayer/IOnDrmPreparedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnDrmPreparedListener(Android.Media.MediaPlayer.IOnDrmPreparedListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnDrmPreparedListener : Android.Media.MediaPlayer.IOnDrmPreparedListener -&gt; unit&#xA;override this.SetOnDrmPreparedListener : Android.Media.MediaPlayer.IOnDrmPreparedListener -&gt; unit" Usage="mediaPlayer.SetOnDrmPreparedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnDrmPreparedListener", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;)V", "GetSetOnDrmPreparedListener_Landroid_media_MediaPlayer_OnDrmPreparedListener_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnDrmPreparedListener", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;)V", "GetSetOnDrmPreparedListener_Landroid_media_MediaPlayer_OnDrmPreparedListener_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnDrmPreparedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when the DRM object is prepared.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnDrmPreparedListener(android.media.OnDrmPreparedListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnDrmPreparedListener(android.media.OnDrmPreparedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnDrmPreparedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnDrmPreparedListener (listener As MediaPlayer.IOnDrmPreparedListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnDrmPreparedListener(Android::Media::MediaPlayer::IOnDrmPreparedListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnDrmPreparedListener (Android.Media.MediaPlayer.IOnDrmPreparedListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnDrmPreparedListener(class Android.Media.MediaPlayer/IOnDrmPreparedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnDrmPreparedListener(Android.Media.MediaPlayer.IOnDrmPreparedListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetOnDrmPreparedListener : Android.Media.MediaPlayer.IOnDrmPreparedListener * Android.OS.Handler -&gt; unit&#xA;override this.SetOnDrmPreparedListener : Android.Media.MediaPlayer.IOnDrmPreparedListener * Android.OS.Handler -&gt; unit" Usage="mediaPlayer.SetOnDrmPreparedListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnDrmPreparedListener", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;Landroid/os/Handler;)V", "GetSetOnDrmPreparedListener_Landroid_media_MediaPlayer_OnDrmPreparedListener_Landroid_os_Handler_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnDrmPreparedListener", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;Landroid/os/Handler;)V", "GetSetOnDrmPreparedListener_Landroid_media_MediaPlayer_OnDrmPreparedListener_Landroid_os_Handler_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnDrmPreparedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <param name="handler">To be added.</param>
        <summary>Register a callback to be invoked when the DRM object is prepared.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnDrmPreparedListener(android.media.OnDrmPreparedListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnDrmPreparedListener(android.media.OnDrmPreparedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnErrorListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnErrorListener (listener As MediaPlayer.IOnErrorListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnErrorListener(Android::Media::MediaPlayer::IOnErrorListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnErrorListener (Android.Media.MediaPlayer.IOnErrorListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnErrorListener(class Android.Media.MediaPlayer/IOnErrorListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnErrorListener(Android.Media.MediaPlayer.IOnErrorListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnErrorListener : Android.Media.MediaPlayer.IOnErrorListener -&gt; unit&#xA;override this.SetOnErrorListener : Android.Media.MediaPlayer.IOnErrorListener -&gt; unit" Usage="mediaPlayer.SetOnErrorListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnErrorListener", "(Landroid/media/MediaPlayer$OnErrorListener;)V", "GetSetOnErrorListener_Landroid_media_MediaPlayer_OnErrorListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnErrorListener", "(Landroid/media/MediaPlayer$OnErrorListener;)V", "GetSetOnErrorListener_Landroid_media_MediaPlayer_OnErrorListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnErrorListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when an error has happened
            during an asynchronous operation.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnErrorListener(android.media.OnErrorListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnErrorListener(android.media.OnErrorListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnInfoListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnInfoListener (listener As MediaPlayer.IOnInfoListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnInfoListener(Android::Media::MediaPlayer::IOnInfoListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnInfoListener (Android.Media.MediaPlayer.IOnInfoListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnInfoListener(class Android.Media.MediaPlayer/IOnInfoListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnInfoListener(Android.Media.MediaPlayer.IOnInfoListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnInfoListener : Android.Media.MediaPlayer.IOnInfoListener -&gt; unit&#xA;override this.SetOnInfoListener : Android.Media.MediaPlayer.IOnInfoListener -&gt; unit" Usage="mediaPlayer.SetOnInfoListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnInfoListener", "(Landroid/media/MediaPlayer$OnInfoListener;)V", "GetSetOnInfoListener_Landroid_media_MediaPlayer_OnInfoListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnInfoListener", "(Landroid/media/MediaPlayer$OnInfoListener;)V", "GetSetOnInfoListener_Landroid_media_MediaPlayer_OnInfoListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnInfoListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when an info/warning is available.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnInfoListener(android.media.OnInfoListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnInfoListener(android.media.OnInfoListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOnMediaTimeDiscontinuityListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnMediaTimeDiscontinuityListener (listener As MediaPlayer.IOnMediaTimeDiscontinuityListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnMediaTimeDiscontinuityListener(Android::Media::MediaPlayer::IOnMediaTimeDiscontinuityListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnMediaTimeDiscontinuityListener (Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnMediaTimeDiscontinuityListener(class Android.Media.MediaPlayer/IOnMediaTimeDiscontinuityListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnMediaTimeDiscontinuityListener(Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnMediaTimeDiscontinuityListener : Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener -&gt; unit&#xA;override this.SetOnMediaTimeDiscontinuityListener : Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener -&gt; unit" Usage="mediaPlayer.SetOnMediaTimeDiscontinuityListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnMediaTimeDiscontinuityListener", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;)V", "GetSetOnMediaTimeDiscontinuityListener_Landroid_media_MediaPlayer_OnMediaTimeDiscontinuityListener_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnMediaTimeDiscontinuityListener", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;)V", "GetSetOnMediaTimeDiscontinuityListener_Landroid_media_MediaPlayer_OnMediaTimeDiscontinuityListener_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnMediaTimeDiscontinuityListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener called after a discontinuity</param>
        <summary>Sets the listener to be invoked when a media time discontinuity is encountered.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnMediaTimeDiscontinuityListener(android.media.OnMediaTimeDiscontinuityListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnMediaTimeDiscontinuityListener(android.media.OnMediaTimeDiscontinuityListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnMediaTimeDiscontinuityListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnMediaTimeDiscontinuityListener (listener As MediaPlayer.IOnMediaTimeDiscontinuityListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnMediaTimeDiscontinuityListener(Android::Media::MediaPlayer::IOnMediaTimeDiscontinuityListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnMediaTimeDiscontinuityListener (Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnMediaTimeDiscontinuityListener(class Android.Media.MediaPlayer/IOnMediaTimeDiscontinuityListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnMediaTimeDiscontinuityListener(Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetOnMediaTimeDiscontinuityListener : Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener * Android.OS.Handler -&gt; unit&#xA;override this.SetOnMediaTimeDiscontinuityListener : Android.Media.MediaPlayer.IOnMediaTimeDiscontinuityListener * Android.OS.Handler -&gt; unit" Usage="mediaPlayer.SetOnMediaTimeDiscontinuityListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnMediaTimeDiscontinuityListener", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;Landroid/os/Handler;)V", "GetSetOnMediaTimeDiscontinuityListener_Landroid_media_MediaPlayer_OnMediaTimeDiscontinuityListener_Landroid_os_Handler_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnMediaTimeDiscontinuityListener", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;Landroid/os/Handler;)V", "GetSetOnMediaTimeDiscontinuityListener_Landroid_media_MediaPlayer_OnMediaTimeDiscontinuityListener_Landroid_os_Handler_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnMediaTimeDiscontinuityListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">the listener called after a discontinuity</param>
        <param name="handler">To be added.</param>
        <summary>Sets the listener to be invoked when a media time discontinuity is encountered.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnMediaTimeDiscontinuityListener(android.media.OnMediaTimeDiscontinuityListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnMediaTimeDiscontinuityListener(android.media.OnMediaTimeDiscontinuityListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnPreparedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnPreparedListener (listener As MediaPlayer.IOnPreparedListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnPreparedListener(Android::Media::MediaPlayer::IOnPreparedListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnPreparedListener (Android.Media.MediaPlayer.IOnPreparedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnPreparedListener(class Android.Media.MediaPlayer/IOnPreparedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnPreparedListener(Android.Media.MediaPlayer.IOnPreparedListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnPreparedListener : Android.Media.MediaPlayer.IOnPreparedListener -&gt; unit&#xA;override this.SetOnPreparedListener : Android.Media.MediaPlayer.IOnPreparedListener -&gt; unit" Usage="mediaPlayer.SetOnPreparedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnPreparedListener", "(Landroid/media/MediaPlayer$OnPreparedListener;)V", "GetSetOnPreparedListener_Landroid_media_MediaPlayer_OnPreparedListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnPreparedListener", "(Landroid/media/MediaPlayer$OnPreparedListener;)V", "GetSetOnPreparedListener_Landroid_media_MediaPlayer_OnPreparedListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnPreparedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when the media source is ready
            for playback.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnPreparedListener(android.media.OnPreparedListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnPreparedListener(android.media.OnPreparedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnSeekCompleteListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnSeekCompleteListener (listener As MediaPlayer.IOnSeekCompleteListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnSeekCompleteListener(Android::Media::MediaPlayer::IOnSeekCompleteListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnSeekCompleteListener (Android.Media.MediaPlayer.IOnSeekCompleteListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSeekCompleteListener(class Android.Media.MediaPlayer/IOnSeekCompleteListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnSeekCompleteListener(Android.Media.MediaPlayer.IOnSeekCompleteListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnSeekCompleteListener : Android.Media.MediaPlayer.IOnSeekCompleteListener -&gt; unit&#xA;override this.SetOnSeekCompleteListener : Android.Media.MediaPlayer.IOnSeekCompleteListener -&gt; unit" Usage="mediaPlayer.SetOnSeekCompleteListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnSeekCompleteListener", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V", "GetSetOnSeekCompleteListener_Landroid_media_MediaPlayer_OnSeekCompleteListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnSeekCompleteListener", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V", "GetSetOnSeekCompleteListener_Landroid_media_MediaPlayer_OnSeekCompleteListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnSeekCompleteListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when a seek operation has been
            completed.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnSeekCompleteListener(android.media.OnSeekCompleteListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnSeekCompleteListener(android.media.OnSeekCompleteListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnSubtitleDataListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnSubtitleDataListener (listener As MediaPlayer.IOnSubtitleDataListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnSubtitleDataListener(Android::Media::MediaPlayer::IOnSubtitleDataListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnSubtitleDataListener (Android.Media.MediaPlayer.IOnSubtitleDataListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSubtitleDataListener(class Android.Media.MediaPlayer/IOnSubtitleDataListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnSubtitleDataListener(Android.Media.MediaPlayer.IOnSubtitleDataListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnSubtitleDataListener : Android.Media.MediaPlayer.IOnSubtitleDataListener -&gt; unit&#xA;override this.SetOnSubtitleDataListener : Android.Media.MediaPlayer.IOnSubtitleDataListener -&gt; unit" Usage="mediaPlayer.SetOnSubtitleDataListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnSubtitleDataListener", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;)V", "GetSetOnSubtitleDataListener_Landroid_media_MediaPlayer_OnSubtitleDataListener_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnSubtitleDataListener", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;)V", "GetSetOnSubtitleDataListener_Landroid_media_MediaPlayer_OnSubtitleDataListener_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnSubtitleDataListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener called when new data is available</param>
        <summary>Sets the listener to be invoked when a subtitle track has new data available.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnSubtitleDataListener(android.media.OnSubtitleDataListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnSubtitleDataListener(android.media.OnSubtitleDataListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnSubtitleDataListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnSubtitleDataListener (listener As MediaPlayer.IOnSubtitleDataListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnSubtitleDataListener(Android::Media::MediaPlayer::IOnSubtitleDataListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnSubtitleDataListener (Android.Media.MediaPlayer.IOnSubtitleDataListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSubtitleDataListener(class Android.Media.MediaPlayer/IOnSubtitleDataListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnSubtitleDataListener(Android.Media.MediaPlayer.IOnSubtitleDataListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetOnSubtitleDataListener : Android.Media.MediaPlayer.IOnSubtitleDataListener * Android.OS.Handler -&gt; unit&#xA;override this.SetOnSubtitleDataListener : Android.Media.MediaPlayer.IOnSubtitleDataListener * Android.OS.Handler -&gt; unit" Usage="mediaPlayer.SetOnSubtitleDataListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnSubtitleDataListener", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;Landroid/os/Handler;)V", "GetSetOnSubtitleDataListener_Landroid_media_MediaPlayer_OnSubtitleDataListener_Landroid_os_Handler_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnSubtitleDataListener", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;Landroid/os/Handler;)V", "GetSetOnSubtitleDataListener_Landroid_media_MediaPlayer_OnSubtitleDataListener_Landroid_os_Handler_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnSubtitleDataListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">the listener called when new data is available</param>
        <param name="handler">To be added.</param>
        <summary>Sets the listener to be invoked when a subtitle track has new data available.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnSubtitleDataListener(android.media.OnSubtitleDataListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnSubtitleDataListener(android.media.OnSubtitleDataListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnTimedMetaDataAvailableListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnTimedMetaDataAvailableListener (listener As MediaPlayer.IOnTimedMetaDataAvailableListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnTimedMetaDataAvailableListener(Android::Media::MediaPlayer::IOnTimedMetaDataAvailableListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnTimedMetaDataAvailableListener (Android.Media.MediaPlayer.IOnTimedMetaDataAvailableListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnTimedMetaDataAvailableListener(class Android.Media.MediaPlayer/IOnTimedMetaDataAvailableListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnTimedMetaDataAvailableListener(Android.Media.MediaPlayer.IOnTimedMetaDataAvailableListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnTimedMetaDataAvailableListener : Android.Media.MediaPlayer.IOnTimedMetaDataAvailableListener -&gt; unit&#xA;override this.SetOnTimedMetaDataAvailableListener : Android.Media.MediaPlayer.IOnTimedMetaDataAvailableListener -&gt; unit" Usage="mediaPlayer.SetOnTimedMetaDataAvailableListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnTimedMetaDataAvailableListener", "(Landroid/media/MediaPlayer$OnTimedMetaDataAvailableListener;)V", "GetSetOnTimedMetaDataAvailableListener_Landroid_media_MediaPlayer_OnTimedMetaDataAvailableListener_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnTimedMetaDataAvailableListener", "(Landroid/media/MediaPlayer$OnTimedMetaDataAvailableListener;)V", "GetSetOnTimedMetaDataAvailableListener_Landroid_media_MediaPlayer_OnTimedMetaDataAvailableListener_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnTimedMetaDataAvailableListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when a selected track has timed metadata available.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnTimedMetaDataAvailableListener(android.media.OnTimedMetaDataAvailableListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnTimedMetaDataAvailableListener(android.media.OnTimedMetaDataAvailableListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnTimedTextListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnTimedTextListener (listener As MediaPlayer.IOnTimedTextListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnTimedTextListener(Android::Media::MediaPlayer::IOnTimedTextListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnTimedTextListener (Android.Media.MediaPlayer.IOnTimedTextListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnTimedTextListener(class Android.Media.MediaPlayer/IOnTimedTextListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnTimedTextListener(Android.Media.MediaPlayer.IOnTimedTextListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnTimedTextListener : Android.Media.MediaPlayer.IOnTimedTextListener -&gt; unit&#xA;override this.SetOnTimedTextListener : Android.Media.MediaPlayer.IOnTimedTextListener -&gt; unit" Usage="mediaPlayer.SetOnTimedTextListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnTimedTextListener", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V", "GetSetOnTimedTextListener_Landroid_media_MediaPlayer_OnTimedTextListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnTimedTextListener", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V", "GetSetOnTimedTextListener_Landroid_media_MediaPlayer_OnTimedTextListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnTimedTextListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when a timed text is available
            for display.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnTimedTextListener(android.media.OnTimedTextListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnTimedTextListener(android.media.OnTimedTextListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnVideoSizeChangedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetOnVideoSizeChangedListener (listener As MediaPlayer.IOnVideoSizeChangedListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetOnVideoSizeChangedListener(Android::Media::MediaPlayer::IOnVideoSizeChangedListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetOnVideoSizeChangedListener (Android.Media.MediaPlayer.IOnVideoSizeChangedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnVideoSizeChangedListener(class Android.Media.MediaPlayer/IOnVideoSizeChangedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetOnVideoSizeChangedListener(Android.Media.MediaPlayer.IOnVideoSizeChangedListener)" />
      <MemberSignature Language="F#" Value="abstract member SetOnVideoSizeChangedListener : Android.Media.MediaPlayer.IOnVideoSizeChangedListener -&gt; unit&#xA;override this.SetOnVideoSizeChangedListener : Android.Media.MediaPlayer.IOnVideoSizeChangedListener -&gt; unit" Usage="mediaPlayer.SetOnVideoSizeChangedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnVideoSizeChangedListener", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V", "GetSetOnVideoSizeChangedListener_Landroid_media_MediaPlayer_OnVideoSizeChangedListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOnVideoSizeChangedListener", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V", "GetSetOnVideoSizeChangedListener_Landroid_media_MediaPlayer_OnVideoSizeChangedListener_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnVideoSizeChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run</param>
        <summary>Register a callback to be invoked when the video size is
            known or updated.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setOnVideoSizeChangedListener(android.media.OnVideoSizeChangedListener)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setOnVideoSizeChangedListener(android.media.OnVideoSizeChangedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetPreferredDevice">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPreferredDevice (deviceInfo As AudioDeviceInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetPreferredDevice(Android::Media::AudioDeviceInfo ^ deviceInfo);" />
      <MemberSignature Language="C#" Value="public virtual bool SetPreferredDevice (Android.Media.AudioDeviceInfo? deviceInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetPreferredDevice(class Android.Media.AudioDeviceInfo deviceInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetPreferredDevice(Android.Media.AudioDeviceInfo)" />
      <MemberSignature Language="F#" Value="abstract member SetPreferredDevice : Android.Media.AudioDeviceInfo -&gt; bool&#xA;override this.SetPreferredDevice : Android.Media.AudioDeviceInfo -&gt; bool" Usage="mediaPlayer.SetPreferredDevice deviceInfo" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Media.IAudioRouting.SetPreferredDevice(Android.Media.AudioDeviceInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", "GetSetPreferredDevice_Landroid_media_AudioDeviceInfo_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPreferredDevice", "(Landroid/media/AudioDeviceInfo;)Z", "GetSetPreferredDevice_Landroid_media_AudioDeviceInfo_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceInfo" Type="Android.Media.AudioDeviceInfo" />
      </Parameters>
      <Docs>
        <param name="deviceInfo">The <c>AudioDeviceInfo</c> specifying the audio sink or source.
             If deviceInfo is null, default routing is restored.</param>
        <summary>Specifies an audio device (via an <c>AudioDeviceInfo</c> object) to route
            the output from this MediaPlayer.</summary>
        <returns>true if succesful, false if the specified <c>AudioDeviceInfo</c> is non-null and
            does not correspond to a valid audio device.</returns>
        <remarks>
          <para>Specifies an audio device (via an <c>AudioDeviceInfo</c> object) to route
            the output from this MediaPlayer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setPreferredDevice(android.media.AudioDeviceInfo)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setPreferredDevice(android.media.AudioDeviceInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScreenOnWhilePlaying">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetScreenOnWhilePlaying (screenOn As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetScreenOnWhilePlaying(bool screenOn);" />
      <MemberSignature Language="C#" Value="public virtual void SetScreenOnWhilePlaying (bool screenOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScreenOnWhilePlaying(bool screenOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetScreenOnWhilePlaying(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetScreenOnWhilePlaying : bool -&gt; unit&#xA;override this.SetScreenOnWhilePlaying : bool -&gt; unit" Usage="mediaPlayer.SetScreenOnWhilePlaying screenOn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setScreenOnWhilePlaying", "(Z)V", "GetSetScreenOnWhilePlaying_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setScreenOnWhilePlaying", "(Z)V", "GetSetScreenOnWhilePlaying_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenOn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="screenOn">Supply true to keep the screen on, false to allow it
            to turn off.</param>
        <summary>Control whether we should use the attached SurfaceHolder to keep the
            screen on while video playback is occurring.</summary>
        <remarks>
          <para>Control whether we should use the attached SurfaceHolder to keep the
            screen on while video playback is occurring.  This is the preferred
            method over <c>#setWakeMode</c> where possible, since it doesn't
            require that the application have permission for low-level wake lock
            access.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setScreenOnWhilePlaying(boolean)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setScreenOnWhilePlaying(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetSurface">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetSurface (surface As Surface)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetSurface(Android::Views::Surface ^ surface);" />
      <MemberSignature Language="C#" Value="public virtual void SetSurface (Android.Views.Surface? surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSurface(class Android.Views.Surface surface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetSurface(Android.Views.Surface)" />
      <MemberSignature Language="F#" Value="abstract member SetSurface : Android.Views.Surface -&gt; unit&#xA;override this.SetSurface : Android.Views.Surface -&gt; unit" Usage="mediaPlayer.SetSurface surface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSurface", "(Landroid/view/Surface;)V", "GetSetSurface_Landroid_view_Surface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSurface", "(Landroid/view/Surface;)V", "GetSetSurface_Landroid_view_Surface_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">The <c>Surface</c> to be used for the video portion of
            the media.</param>
        <summary>Sets the <c>Surface</c> to be used as the sink for the video portion of
            the media.</summary>
        <remarks>
          <para>Sets the <c>Surface</c> to be used as the sink for the video portion of
            the media. This is similar to <c>#setDisplay(SurfaceHolder)</c>, but
            does not support <c>#setScreenOnWhilePlaying(boolean)</c>.  Setting a
            Surface will un-set any Surface or SurfaceHolder that was previously set.
            A null surface will result in only the audio track being played.
            
            If the Surface sends frames to a <c>SurfaceTexture</c>, the timestamps
            returned from <c>SurfaceTexture#getTimestamp()</c> will have an
            unspecified zero point.  These timestamps cannot be directly compared
            between different media sources, different instances of the same media
            source, or multiple runs of the same program.  The timestamp is normally
            monotonically increasing and is unaffected by time-of-day adjustments,
            but it is reset when the position is set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setSurface(android.view.Surface)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setSurface(android.view.Surface)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetVideoScalingMode (mode As VideoScalingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetVideoScalingMode(Android::Media::VideoScalingMode mode);" />
      <MemberSignature Language="C#" Value="public virtual void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetVideoScalingMode(Android.Media.VideoScalingMode)" />
      <MemberSignature Language="F#" Value="abstract member SetVideoScalingMode : Android.Media.VideoScalingMode -&gt; unit&#xA;override this.SetVideoScalingMode : Android.Media.VideoScalingMode -&gt; unit" Usage="mediaPlayer.SetVideoScalingMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setVideoScalingMode", "(I)V", "GetSetVideoScalingMode_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setVideoScalingMode", "(I)V", "GetSetVideoScalingMode_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">target video scaling mode. Must be one of the supported
            video scaling modes; otherwise, IllegalArgumentException will be thrown.</param>
        <summary>Sets video scaling mode.</summary>
        <remarks>
          <para>Sets video scaling mode. To make the target video scaling mode
            effective during playback, this method must be called after
            data source is set. If not called, the default video
            scaling mode is <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT</c>.</para>
          <para>The supported video scaling modes are:
            &lt;ul&gt;
            &lt;li&gt; <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT</c>&lt;li&gt; <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</c>&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setVideoScalingMode(int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setVideoScalingMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" />
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetVolume (leftVolume As Single, rightVolume As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetVolume(float leftVolume, float rightVolume);" />
      <MemberSignature Language="C#" Value="public virtual void SetVolume (float leftVolume, float rightVolume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVolume(float32 leftVolume, float32 rightVolume) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetVolume(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetVolume : single * single -&gt; unit&#xA;override this.SetVolume : single * single -&gt; unit" Usage="mediaPlayer.SetVolume (leftVolume, rightVolume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setVolume", "(FF)V", "GetSetVolume_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setVolume", "(FF)V", "GetSetVolume_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftVolume" Type="System.Single" />
        <Parameter Name="rightVolume" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="leftVolume">left volume scalar</param>
        <param name="rightVolume">right volume scalar</param>
        <summary>Sets the volume on this player.</summary>
        <remarks>
          <para>Sets the volume on this player.
            This API is recommended for balancing the output of audio streams
            within an application. Unless you are writing an application to
            control user settings, this API should be used in preference to
            <c>AudioManager#setStreamVolume(int, int, int)</c> which sets the volume of ALL streams of
            a particular type. Note that the passed volume values are raw scalars in range 0.0 to 1.0.
            UI controls should be scaled logarithmically.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setVolume(float,%20float)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setVolume(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWakeMode">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWakeMode (context As Context, mode As WakeLockFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWakeMode(Android::Content::Context ^ context, Android::OS::WakeLockFlags mode);" />
      <MemberSignature Language="C#" Value="public virtual void SetWakeMode (Android.Content.Context? context, Android.OS.WakeLockFlags mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWakeMode(class Android.Content.Context context, valuetype Android.OS.WakeLockFlags mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.SetWakeMode(Android.Content.Context,Android.OS.WakeLockFlags)" />
      <MemberSignature Language="F#" Value="abstract member SetWakeMode : Android.Content.Context * Android.OS.WakeLockFlags -&gt; unit&#xA;override this.SetWakeMode : Android.Content.Context * Android.OS.WakeLockFlags -&gt; unit" Usage="mediaPlayer.SetWakeMode (context, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWakeMode", "(Landroid/content/Context;I)V", "GetSetWakeMode_Landroid_content_Context_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWakeMode", "(Landroid/content/Context;I)V", "GetSetWakeMode_Landroid_content_Context_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="mode" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="mode">the power/wake mode to set</param>
        <summary>Set the low-level power management behavior for this MediaPlayer.</summary>
        <remarks>
          <para>Set the low-level power management behavior for this MediaPlayer.  This
            can be used when the MediaPlayer is not playing through a SurfaceHolder
            set with <c>#setDisplay(SurfaceHolder)</c> and thus can use the
            high-level <c>#setScreenOnWhilePlaying(boolean)</c> feature.</para>
          <para>This function has the MediaPlayer access the low-level power manager
            service to control the device's power usage while playing is occurring.
            The parameter is a combination of <c>android.os.PowerManager</c> wake flags.
            Use of this method requires <c>android.Manifest.permission#WAKE_LOCK</c>
            permission.
            By default, no attempt is made to keep the device awake during playback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setWakeMode(android.content.Context,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setWakeMode(android.content.Context, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.PowerManager" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Start();" />
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Start" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="mediaPlayer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("start", "()V", "GetStartHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("start", "()V", "GetStartHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts or resumes playback.</summary>
        <remarks>
          <para>Starts or resumes playback. If playback had previously been paused,
            playback will continue from where it was paused. If playback had
            been stopped, or never started before, playback will start at the
            beginning.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#start()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.start()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Stop();" />
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaPlayer.Stop" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="mediaPlayer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stop", "()V", "GetStopHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stop", "()V", "GetStopHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops playback after playback has been started or paused.</summary>
        <remarks>
          <para>Stops playback after playback has been started or paused.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#stop()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.stop()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SubtitleData">
      <MemberSignature Language="VB.NET" Value="Public Custom Event SubtitleData As EventHandler(Of MediaPlayer.SubtitleDataEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::SubtitleDataEventArgs ^&gt; ^ SubtitleData;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.SubtitleDataEventArgs&gt; SubtitleData;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/SubtitleDataEventArgs&gt; SubtitleData" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.SubtitleData" />
      <MemberSignature Language="F#" Value="member this.SubtitleData : EventHandler&lt;Android.Media.MediaPlayer.SubtitleDataEventArgs&gt; " Usage="member this.SubtitleData : System.EventHandler&lt;Android.Media.MediaPlayer.SubtitleDataEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+SubtitleDataEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncParams">
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SyncParams As SyncParams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Media::SyncParams ^ SyncParams { Android::Media::SyncParams ^ get(); void set(Android::Media::SyncParams ^ value); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.SyncParams SyncParams { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.SyncParams SyncParams" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.SyncParams" />
      <MemberSignature Language="F#" Value="member this.SyncParams : Android.Media.SyncParams with get, set" Usage="Android.Media.MediaPlayer.SyncParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSyncParams", "()Landroid/media/SyncParams;", "GetGetSyncParamsHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSyncParams", "()Landroid/media/SyncParams;", "GetGetSyncParamsHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setSyncParams", "(Landroid/media/SyncParams;)V", "GetSetSyncParams_Landroid_media_SyncParams_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setSyncParams", "(Landroid/media/SyncParams;)V", "GetSetSyncParams_Landroid_media_SyncParams_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.SyncParams</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="params">the A/V sync params to apply</param>
        <summary>Gets the A/V sync mode. -or- Sets A/V sync mode.</summary>
        <value>the A/V sync params</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the A/V sync mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getSyncParams()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getSyncParams()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets A/V sync mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#setSyncParams(android.media.SyncParams)" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.setSyncParams(android.media.SyncParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.MediaPlayer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.MediaPlayer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedMetaDataAvailable">
      <MemberSignature Language="VB.NET" Value="Public Custom Event TimedMetaDataAvailable As EventHandler(Of MediaPlayer.TimedMetaDataAvailableEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::TimedMetaDataAvailableEventArgs ^&gt; ^ TimedMetaDataAvailable;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs&gt; TimedMetaDataAvailable;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/TimedMetaDataAvailableEventArgs&gt; TimedMetaDataAvailable" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.TimedMetaDataAvailable" />
      <MemberSignature Language="F#" Value="member this.TimedMetaDataAvailable : EventHandler&lt;Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs&gt; " Usage="member this.TimedMetaDataAvailable : System.EventHandler&lt;Android.Media.MediaPlayer.TimedMetaDataAvailableEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+TimedMetaDataAvailableEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedText">
      <MemberSignature Language="VB.NET" Value="Public Custom Event TimedText As EventHandler(Of MediaPlayer.TimedTextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::TimedTextEventArgs ^&gt; ^ TimedText;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.TimedTextEventArgs&gt; TimedText;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/TimedTextEventArgs&gt; TimedText" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.TimedText" />
      <MemberSignature Language="F#" Value="member this.TimedText : EventHandler&lt;Android.Media.MediaPlayer.TimedTextEventArgs&gt; " Usage="member this.TimedText : System.EventHandler&lt;Android.Media.MediaPlayer.TimedTextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+TimedTextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Timestamp As MediaTimestamp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Media::MediaTimestamp ^ Timestamp { Android::Media::MediaTimestamp ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaTimestamp? Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaTimestamp Timestamp" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.Timestamp" />
      <MemberSignature Language="F#" Value="member this.Timestamp : Android.Media.MediaTimestamp" Usage="Android.Media.MediaPlayer.Timestamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTimestamp", "()Landroid/media/MediaTimestamp;", "GetGetTimestampHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTimestamp", "()Landroid/media/MediaTimestamp;", "GetGetTimestampHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaTimestamp</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get current playback position as a <c>MediaTimestamp</c>.</summary>
        <value>a MediaTimestamp object if a timestamp is available, or <c>null</c> if no timestamp
                    is available, e.g. because the media player has not been initialized.</value>
        <remarks>
          <para>Get current playback position as a <c>MediaTimestamp</c>.</para>
          <para>The MediaTimestamp represents how the media time correlates to the system time in
            a linear fashion using an anchor and a clock rate. During regular playback, the media
            time moves fairly constantly (though the anchor frame may be rebased to a current
            system time, the linear correlation stays steady). Therefore, this method does not
            need to be called often.</para>
          <para>To help users get current playback position, this method always anchors the timestamp
            to the current <c>System#nanoTime system time</c>, so
            <c>MediaTimestamp#getAnchorMediaTimeUs</c> can be used as current playback position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getTimestamp()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getTimestamp()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoHeight">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property VideoHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int VideoHeight { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int VideoHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoHeight" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.VideoHeight" />
      <MemberSignature Language="F#" Value="member this.VideoHeight : int" Usage="Android.Media.MediaPlayer.VideoHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getVideoHeight", "()I", "GetGetVideoHeightHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getVideoHeight", "()I", "GetGetVideoHeightHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the height of the video.</summary>
        <value>the height of the video, or 0 if there is no video,
            no display surface was set, or the height has not been determined
            yet. The OnVideoSizeChangedListener can be registered via
            <c>#setOnVideoSizeChangedListener(OnVideoSizeChangedListener)</c>
            to provide a notification when the height is available.</value>
        <remarks>
          <para>Returns the height of the video.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getVideoHeight()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getVideoHeight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="VB.NET" Value="Public Const VideoScalingModeScaleToFit As MediaPlayerVideoScalingModeNotInUse  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: Android::Media::MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" />
      <MemberSignature Language="F#" Value="val mutable VideoScalingModeScaleToFit : Android.Media.MediaPlayerVideoScalingModeNotInUse" Usage="Android.Media.MediaPlayer.VideoScalingModeScaleToFit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks>
          <para>Specifies a video scaling mode. The content is stretched to the
            surface rendering area. When the surface has the same aspect ratio
            as the content, the aspect ratio of the content is maintained;
            otherwise, the aspect ratio of the content is not maintained when video
            is being rendered. Unlike <c>#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</c>,
            there is no content cropping with this video scaling mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="VB.NET" Value="Public Const VideoScalingModeScaleToFitWithCropping As MediaPlayerVideoScalingModeNotInUse  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: Android::Media::MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" />
      <MemberSignature Language="F#" Value="val mutable VideoScalingModeScaleToFitWithCropping : Android.Media.MediaPlayerVideoScalingModeNotInUse" Usage="Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks>
          <para>Specifies a video scaling mode. The content is scaled, maintaining
            its aspect ratio. The whole surface area is always used. When the
            aspect ratio of the content is the same as the surface, no content
            is cropped; otherwise, content is cropped to fit the surface.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoSizeChanged">
      <MemberSignature Language="VB.NET" Value="Public Custom Event VideoSizeChanged As EventHandler(Of MediaPlayer.VideoSizeChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::Media::MediaPlayer::VideoSizeChangedEventArgs ^&gt; ^ VideoSizeChanged;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.VideoSizeChangedEventArgs&gt; VideoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/VideoSizeChangedEventArgs&gt; VideoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:Android.Media.MediaPlayer.VideoSizeChanged" />
      <MemberSignature Language="F#" Value="member this.VideoSizeChanged : EventHandler&lt;Android.Media.MediaPlayer.VideoSizeChangedEventArgs&gt; " Usage="member this.VideoSizeChanged : System.EventHandler&lt;Android.Media.MediaPlayer.VideoSizeChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+VideoSizeChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoWidth">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property VideoWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int VideoWidth { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int VideoWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoWidth" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaPlayer.VideoWidth" />
      <MemberSignature Language="F#" Value="member this.VideoWidth : int" Usage="Android.Media.MediaPlayer.VideoWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getVideoWidth", "()I", "GetGetVideoWidthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getVideoWidth", "()I", "GetGetVideoWidthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the width of the video.</summary>
        <value>the width of the video, or 0 if there is no video,
            no display surface was set, or the width has not been determined
            yet. The OnVideoSizeChangedListener can be registered via
            <c>#setOnVideoSizeChangedListener(OnVideoSizeChangedListener)</c>
            to provide a notification when the width is available.</value>
        <remarks>
          <para>Returns the width of the video.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaPlayer#getVideoWidth()" title="Reference documentation">Java documentation for <code>android.media.MediaPlayer.getVideoWidth()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
