<Type Name="MediaPlayer" FullName="Android.Media.MediaPlayer">
  <TypeSignature Language="C#" Value="public class MediaPlayer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MediaPlayer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaPlayer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>MediaPlayer class can be used to control playback
 of audio/video files and streams.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">MediaPlayer class can be used to control playback
 of audio/video files and streams. An example on how to use the methods in
 this class can be found in <c><see cref="T:Android.Widget.VideoView" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">Topics covered here are:
 <list type="number"><item><term /></item><item><term /></item><item><term /></item><item><term></term></item></list><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about how to use MediaPlayer, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/media/mediaplayer.html">Media Playback</a></format> developer guide.</para>
      <format type="text/html">
        <h3>State Diagram</h3>
      </format>
      <para tool="javadoc-to-mdoc">Playback control of audio/video files and streams is managed as a state
 machine. The following diagram shows the life cycle and the states of a
 MediaPlayer object driven by the supported playback control operations.
 The ovals represent the states a MediaPlayer object may reside
 in. The arcs represent the playback control operations that drive the object
 state transition. There are two types of arcs. The arcs with a single arrow
 head represent synchronous method calls, while those with
 a double arrow head represent asynchronous method calls.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <img src="../../../images/mediaplayer_state_diagram.gif" alt="MediaPlayer State diagram" border="0" />
        </format>
      </para>
      <para tool="javadoc-to-mdoc">From this state diagram, one can see that a MediaPlayer object has the
    following states:<list type="bullet"><item><term>When a MediaPlayer object is just created using <c>new</c> or
         after <c><see cref="M:Android.Media.MediaPlayer.Reset" /></c> is called, it is in the <i>Idle</i> state; and after
         <c><see cref="M:Android.Media.MediaPlayer.Release" /></c> is called, it is in the <i>End</i> state. Between these
         two states is the life cycle of the MediaPlayer object.
         <list type="bullet" /></term></item><item><term>There is a subtle but important difference between a newly constructed
         MediaPlayer object and the MediaPlayer object after <c><see cref="M:Android.Media.MediaPlayer.Reset" /></c>
         is called. It is a programming error to invoke methods such
         as <c><see cref="P:Android.Media.MediaPlayer.CurrentPosition" /></c>,
         <c><see cref="P:Android.Media.MediaPlayer.Duration" /></c>, <c><see cref="P:Android.Media.MediaPlayer.VideoHeight" /></c>,
         <c><see cref="P:Android.Media.MediaPlayer.VideoWidth" /></c>, <c><see cref="M:Android.Media.MediaPlayer.SetAudioStreamType(Android.Media.Stream)" /></c>,
         <c><see cref="P:Android.Media.MediaPlayer.Looping" /></c>,
         <c><see cref="M:Android.Media.MediaPlayer.SetVolume(System.Single,System.Single)" /></c>, <c><see cref="M:Android.Media.MediaPlayer.Pause" /></c>, <c><see cref="M:Android.Media.MediaPlayer.Start" /></c>,
         <c><see cref="M:Android.Media.MediaPlayer.Stop" /></c>, <c><see cref="M:Android.Media.MediaPlayer.SeekTo(System.Int32)" /></c>, <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> or
         <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c> in the <i>Idle</i> state for both cases. If any of these
         methods is called right after a MediaPlayer object is constructed,
         the user supplied callback method OnErrorListener.onError() won't be
         called by the internal player engine and the object state remains
         unchanged; but if these methods are called right after <c><see cref="M:Android.Media.MediaPlayer.Reset" /></c>,
         the user supplied callback method OnErrorListener.onError() will be
         invoked by the internal player engine and the object will be
         transfered to the <i>Error</i> state. </term></item><item><term>It is also recommended that once
         a MediaPlayer object is no longer being used, call <c><see cref="M:Android.Media.MediaPlayer.Release" /></c> immediately
         so that resources used by the internal player engine associated with the
         MediaPlayer object can be released immediately. Resource may include
         singleton resources such as hardware acceleration components and
         failure to call <c><see cref="M:Android.Media.MediaPlayer.Release" /></c> may cause subsequent instances of
         MediaPlayer objects to fallback to software implementations or fail
         altogether. Once the MediaPlayer
         object is in the <i>End</i> state, it can no longer be used and
         there is no way to bring it back to any other state. </term></item><item><term>Furthermore,
         the MediaPlayer objects created using <c>new</c> is in the
         <i>Idle</i> state, while those created with one
         of the overloaded convenient <c>create</c> methods are <i>NOT</i>
         in the <i>Idle</i> state. In fact, the objects are in the <i>Prepared</i>
         state if the creation using <c>create</c> method is successful.
         </term></item><item><term>In general, some playback control operation may fail due to various
         reasons, such as unsupported audio/video format, poorly interleaved
         audio/video, resolution too high, streaming timeout, and the like.
         Thus, error reporting and recovery is an important concern under
         these circumstances. Sometimes, due to programming errors, invoking a playback
         control operation in an invalid state may also occur. Under all these
         error conditions, the internal player engine invokes a user supplied
         OnErrorListener.onError() method if an OnErrorListener has been
         registered beforehand via
         <c><see cref="M:Android.Media.MediaPlayer.SetOnErrorListener(.IOnErrorListener)" /></c>.
         <list type="bullet" /></term></item><item><term>It is important to note that once an error occurs, the
         MediaPlayer object enters the <i>Error</i> state (except as noted
         above), even if an error listener has not been registered by the application.</term></item><item><term>In order to reuse a MediaPlayer object that is in the <i>
         Error</i> state and recover from the error,
         <c><see cref="M:Android.Media.MediaPlayer.Reset" /></c> can be called to restore the object to its <i>Idle</i>
         state.</term></item><item><term>It is good programming practice to have your application
         register a OnErrorListener to look out for error notifications from
         the internal player engine.</term></item><item><term>IllegalStateException is
         thrown to prevent programming errors such as calling <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c>,
         <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c>, or one of the overloaded <c>setDataSource
         </c> methods in an invalid state. </term></item><item><term>Calling
         <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor)" /></c>, or
         <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(System.String)" /></c>, or
         <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Android.Content.Context,Android.Net.Uri)" /></c>, or
         <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor,System.Int64,System.Int64)" /></c>, or
         <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Android.Media.MediaDataSource)" /></c> transfers a
         MediaPlayer object in the <i>Idle</i> state to the
         <i>Initialized</i> state.
         <list type="bullet" /></term></item><item><term>An IllegalStateException is thrown if
         setDataSource() is called in any other state.</term></item><item><term>It is good programming
         practice to always look out for <c>IllegalArgumentException</c>
         and <c>IOException</c> that may be thrown from the overloaded
         <c>setDataSource</c> methods.</term></item><item><term>A MediaPlayer object must first enter the <i>Prepared</i> state
         before playback can be started.
         <list type="bullet" /></term></item><item><term>There are two ways (synchronous vs.
         asynchronous) that the <i>Prepared</i> state can be reached:
         either a call to <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> (synchronous) which
         transfers the object to the <i>Prepared</i> state once the method call
         returns, or a call to <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c> (asynchronous) which
         first transfers the object to the <i>Preparing</i> state after the
         call returns (which occurs almost right way) while the internal
         player engine continues working on the rest of preparation work
         until the preparation work completes. When the preparation completes or when <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> call returns,
         the internal player engine then calls a user supplied callback method,
         onPrepared() of the OnPreparedListener interface, if an
         OnPreparedListener is registered beforehand via <c><see cref="M:Android.Media.MediaPlayer.SetOnPreparedListener(.IOnPreparedListener)" /></c>.</term></item><item><term>It is important to note that
         the <i>Preparing</i> state is a transient state, and the behavior
         of calling any method with side effect while a MediaPlayer object is
         in the <i>Preparing</i> state is undefined.</term></item><item><term>An IllegalStateException is
         thrown if <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> or <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c> is called in
         any other state.</term></item><item><term>While in the <i>Prepared</i> state, properties
         such as audio/sound volume, screenOnWhilePlaying, looping can be
         adjusted by invoking the corresponding set methods.</term></item><item><term>To start the playback, <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> must be called. After
         <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> returns successfully, the MediaPlayer object is in the
         <i>Started</i> state. <c><see cref="P:Android.Media.MediaPlayer.IsPlaying" /></c> can be called to test
         whether the MediaPlayer object is in the <i>Started</i> state.
         <list type="bullet" /></term></item><item><term>While in the <i>Started</i> state, the internal player engine calls
         a user supplied OnBufferingUpdateListener.onBufferingUpdate() callback
         method if a OnBufferingUpdateListener has been registered beforehand
         via <c><see cref="M:Android.Media.MediaPlayer.SetOnBufferingUpdateListener(.IOnBufferingUpdateListener)" /></c>.
         This callback allows applications to keep track of the buffering status
         while streaming audio/video.</term></item><item><term>Calling <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> has not effect
         on a MediaPlayer object that is already in the <i>Started</i> state.</term></item><item><term>Playback can be paused and stopped, and the current playback position
         can be adjusted. Playback can be paused via <c><see cref="M:Android.Media.MediaPlayer.Pause" /></c>. When the call to
         <c><see cref="M:Android.Media.MediaPlayer.Pause" /></c> returns, the MediaPlayer object enters the
         <i>Paused</i> state. Note that the transition from the <i>Started</i>
         state to the <i>Paused</i> state and vice versa happens
         asynchronously in the player engine. It may take some time before
         the state is updated in calls to <c><see cref="P:Android.Media.MediaPlayer.IsPlaying" /></c>, and it can be
         a number of seconds in the case of streamed content.
         <list type="bullet" /></term></item><item><term>Calling <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> to resume playback for a paused
         MediaPlayer object, and the resumed playback
         position is the same as where it was paused. When the call to
         <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> returns, the paused MediaPlayer object goes back to
         the <i>Started</i> state.</term></item><item><term>Calling <c><see cref="M:Android.Media.MediaPlayer.Pause" /></c> has no effect on
         a MediaPlayer object that is already in the <i>Paused</i> state.</term></item><item><term>Calling  <c><see cref="M:Android.Media.MediaPlayer.Stop" /></c> stops playback and causes a
         MediaPlayer in the <i>Started</i>, <i>Paused</i>, <i>Prepared
         </i> or <i>PlaybackCompleted</i> state to enter the
         <i>Stopped</i> state.
         <list type="bullet" /></term></item><item><term>Once in the <i>Stopped</i> state, playback cannot be started
         until <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> or <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c> are called to set
         the MediaPlayer object to the <i>Prepared</i> state again.</term></item><item><term>Calling <c><see cref="M:Android.Media.MediaPlayer.Stop" /></c> has no effect on a MediaPlayer
         object that is already in the <i>Stopped</i> state.</term></item><item><term>The playback position can be adjusted with a call to
         <c><see cref="M:Android.Media.MediaPlayer.SeekTo(System.Int32)" /></c>.
         <list type="bullet" /></term></item><item><term>Although the asynchronuous <c><see cref="M:Android.Media.MediaPlayer.SeekTo(System.Int32)" /></c>
         call returns right way, the actual seek operation may take a while to
         finish, especially for audio/video being streamed. When the actual
         seek operation completes, the internal player engine calls a user
         supplied OnSeekComplete.onSeekComplete() if an OnSeekCompleteListener
         has been registered beforehand via
         <c><see cref="M:Android.Media.MediaPlayer.SetOnSeekCompleteListener(.IOnSeekCompleteListener)" /></c>.</term></item><item><term>Please
         note that <c><see cref="M:Android.Media.MediaPlayer.SeekTo(System.Int32)" /></c> can also be called in the other states,
         such as <i>Prepared</i>, <i>Paused</i> and <i>PlaybackCompleted
         </i> state.</term></item><item><term>Furthermore, the actual current playback position
         can be retrieved with a call to <c><see cref="P:Android.Media.MediaPlayer.CurrentPosition" /></c>, which
         is helpful for applications such as a Music player that need to keep
         track of the playback progress.</term></item><item><term>When the playback reaches the end of stream, the playback completes.
         <list type="bullet" /><format type="text/html"><h3>Valid and invalid states</h3></format><format type="text/html"><table border="0" cellspacing="0" cellpadding="0"><tr><td>Method Name </td><td>Valid Sates </td><td>Invalid States </td><td>Comments </td></tr><tr><td>attachAuxEffect </td><td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </td><td>{Idle, Error} </td><td>This method must be called after setDataSource.
     Calling it does not change the object state. </td></tr><tr><td>getAudioSessionId </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>getCurrentPosition </td><td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
         PlaybackCompleted} </td><td>{Error}</td><td>Successful invoke of this method in a valid state does not change the
         state. Calling this method in an invalid state transfers the object
         to the <i>Error</i> state. </td></tr><tr><td>getDuration </td><td>{Prepared, Started, Paused, Stopped, PlaybackCompleted} </td><td>{Idle, Initialized, Error} </td><td>Successful invoke of this method in a valid state does not change the
         state. Calling this method in an invalid state transfers the object
         to the <i>Error</i> state. </td></tr><tr><td>getVideoHeight </td><td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
         PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method in a valid state does not change the
         state. Calling this method in an invalid state transfers the object
         to the <i>Error</i> state.  </td></tr><tr><td>getVideoWidth </td><td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
         PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method in a valid state does not change
         the state. Calling this method in an invalid state transfers the
         object to the <i>Error</i> state. </td></tr><tr><td>isPlaying </td><td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
          PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method in a valid state does not change
         the state. Calling this method in an invalid state transfers the
         object to the <i>Error</i> state. </td></tr><tr><td>pause </td><td>{Started, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Prepared, Stopped, Error}</td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Paused</i> state. Calling this method in an
         invalid state transfers the object to the <i>Error</i> state.</td></tr><tr><td>prepare </td><td>{Initialized, Stopped} </td><td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Prepared</i> state. Calling this method in an
         invalid state throws an IllegalStateException.</td></tr><tr><td>prepareAsync </td><td>{Initialized, Stopped} </td><td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Preparing</i> state. Calling this method in an
         invalid state throws an IllegalStateException.</td></tr><tr><td>release </td><td>any </td><td>{} </td><td>After <c><see cref="M:Android.Media.MediaPlayer.Release" /></c>, the object is no longer available. </td></tr><tr><td>reset </td><td>{Idle, Initialized, Prepared, Started, Paused, Stopped,
         PlaybackCompleted, Error}</td><td>{}</td><td>After <c><see cref="M:Android.Media.MediaPlayer.Reset" /></c>, the object is like being just created.</td></tr><tr><td>seekTo </td><td>{Prepared, Started, Paused, PlaybackCompleted} </td><td>{Idle, Initialized, Stopped, Error}</td><td>Successful invoke of this method in a valid state does not change
         the state. Calling this method in an invalid state transfers the
         object to the <i>Error</i> state. </td></tr><tr><td>setAudioAttributes </td><td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
          PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method does not change the state. In order for the
         target audio attributes type to become effective, this method must be called before
         prepare() or prepareAsync().</td></tr><tr><td>setAudioSessionId </td><td>{Idle} </td><td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
          Error} </td><td>This method must be called in idle state as the audio session ID must be known before
         calling setDataSource. Calling it does not change the object state. </td></tr><tr><td>setAudioStreamType </td><td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
          PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method does not change the state. In order for the
         target audio stream type to become effective, this method must be called before
         prepare() or prepareAsync().</td></tr><tr><td>setAuxEffectSendLevel </td><td>any</td><td>{} </td><td>Calling this method does not change the object state. </td></tr><tr><td>setDataSource </td><td>{Idle} </td><td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,
          Error} </td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Initialized</i> state. Calling this method in an
         invalid state throws an IllegalStateException.</td></tr><tr><td>setDisplay </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setSurface </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setVideoScalingMode </td><td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </td><td>{Idle, Error}</td><td>Successful invoke of this method does not change the state.</td></tr><tr><td>setLooping </td><td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
         PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method in a valid state does not change
         the state. Calling this method in an
         invalid state transfers the object to the <i>Error</i> state.</td></tr><tr><td>isLooping </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setOnBufferingUpdateListener </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setOnCompletionListener </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setOnErrorListener </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setOnPreparedListener </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setOnSeekCompleteListener </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setPlaybackRate</td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setPlaybackParams</td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state. </td></tr><tr><td>setScreenOnWhilePlaying</td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state.  </td></tr><tr><td>setVolume </td><td>{Idle, Initialized, Stopped, Prepared, Started, Paused,
          PlaybackCompleted}</td><td>{Error}</td><td>Successful invoke of this method does not change the state.
 <tr><td>setWakeMode </td><td>any </td><td>{} </td><td>This method can be called in any state and calling it does not change
         the object state.</td></tr><tr><td>start </td><td>{Prepared, Started, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Stopped, Error}</td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Started</i> state. Calling this method in an
         invalid state transfers the object to the <i>Error</i> state.</td></tr><tr><td>stop </td><td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Error}</td><td>Successful invoke of this method in a valid state transfers the
         object to the <i>Stopped</i> state. Calling this method in an
         invalid state transfers the object to the <i>Error</i> state.</td></tr><tr><td>getTrackInfo </td><td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Error}</td><td>Successful invoke of this method does not change the state.</td></tr><tr><td>addTimedTextSource </td><td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Error}</td><td>Successful invoke of this method does not change the state.</td></tr><tr><td>selectTrack </td><td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Error}</td><td>Successful invoke of this method does not change the state.</td></tr><tr><td>deselectTrack </td><td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td><td>{Idle, Initialized, Error}</td><td>Successful invoke of this method does not change the state.</td></tr></td></tr></table></format><format type="text/html"><h3>Permissions</h3></format>One may need to declare a corresponding WAKE_LOCK permission <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestUsesPermission" /></c>
 element.

 This class requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#INTERNET" /></c> permission
 when used with network-based content.

 <format type="text/html"><h3>Callbacks</h3></format></term></item><item><term>If the looping mode was being set to <format type="text/html"><var>true</var></format>with
         <c><see cref="P:Android.Media.MediaPlayer.Looping" /></c>, the MediaPlayer object shall remain in
         the <i>Started</i> state.</term></item><item><term>If the looping mode was set to <format type="text/html"><var>false
         </var></format>, the player engine calls a user supplied callback method,
         OnCompletion.onCompletion(), if a OnCompletionListener is registered
         beforehand via <c><see cref="M:Android.Media.MediaPlayer.SetOnCompletionListener(.IOnCompletionListener)" /></c>.
         The invoke of the callback signals that the object is now in the <i>
         PlaybackCompleted</i> state.</term></item><item><term>While in the <i>PlaybackCompleted</i>
         state, calling <c><see cref="M:Android.Media.MediaPlayer.Start" /></c> can restart the playback from the
         beginning of the audio/video source.</term></item></list></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Applications may want to register for informational and error
 events in order to be informed of some internal state update and
 possible runtime errors during playback or streaming. Registration for
 these events is done by properly setting the appropriate listeners (via calls
 to
 <c><see cref="M:Android.Media.MediaPlayer.SetOnPreparedListener(.IOnPreparedListener)" /></c>setOnPreparedListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnVideoSizeChangedListener(.IOnVideoSizeChangedListener)" /></c>setOnVideoSizeChangedListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnSeekCompleteListener(.IOnSeekCompleteListener)" /></c>setOnSeekCompleteListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnCompletionListener(.IOnCompletionListener)" /></c>setOnCompletionListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnBufferingUpdateListener(.IOnBufferingUpdateListener)" /></c>setOnBufferingUpdateListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnInfoListener(.IOnInfoListener)" /></c>setOnInfoListener,
 <c><see cref="M:Android.Media.MediaPlayer.SetOnErrorListener(.IOnErrorListener)" /></c>setOnErrorListener, etc).
 In order to receive the respective callback
 associated with these listeners, applications are required to create
 MediaPlayer objects on a thread with its own Looper running (main UI
 thread by default has a Looper running).

</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/MediaPlayer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor. Consider using one of the create() methods for
 synchronously instantiating a MediaPlayer from a Uri or resource.
 </para>
          <para tool="javadoc-to-mdoc">When done with the MediaPlayer, you should call  <c><see cref="M:Android.Media.MediaPlayer.Release" /></c>,
 to free the resources. If not released, too many MediaPlayer instances may
 result in an exception.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#MediaPlayer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MediaPlayer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor fd, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary tool="true">Adds an external timed text source file (FileDescriptor).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds an external timed text source file (FileDescriptor).

 It is the caller's responsibility to close the file descriptor.
 It is safe to do so as soon as this call returns.

 Currently supported format is SubRip. Note that a single external timed text source may
 contain multiple tracks in it. One can find the total number of available tracks
 using <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> to see what additional tracks become available
 after this method call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (string path, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(string path, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/lang/String;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file path of external timed text source file.</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds an external timed text source file.

 Currently supported format is SubRip with the file extension .srt, case insensitive.
 Note that a single external timed text source may contain multiple tracks in it.
 One can find the total number of available tracks using <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> to see what
 additional tracks become available after this method call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Android.Content.Context context, Android.Net.Uri uri, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Android.Content.Context context, class Android.Net.Uri uri, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V", "GetAddTimedTextSource_Landroid_content_Context_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file (Uri).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds an external timed text source file (Uri).

 Currently supported format is SubRip with the file extension .srt, case insensitive.
 Note that a single external timed text source may contain multiple tracks in it.
 One can find the total number of available tracks using <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> to see what
 additional tracks become available after this method call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(android.content.Context, android.net.Uri, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor fd, long offset, long length, string mime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length, string mime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_JJLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <param name="mime">The mime type of the file. Must be one of the mime types listed above.</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text file (FileDescriptor).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds an external timed text file (FileDescriptor).

 It is the caller's responsibility to close the file descriptor.
 It is safe to do so as soon as this call returns.

 Currently supported format is SubRip. Note that a single external timed text source may
 contain multiple tracks in it. One can find the total number of available tracks
 using <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> to see what additional tracks become available
 after this method call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor, long, long, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AttachAuxEffect">
      <MemberSignature Language="C#" Value="public virtual void AttachAuxEffect (int effectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAuxEffect(int32 effectId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachAuxEffect", "(I)V", "GetAttachAuxEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="effectId">system wide unique id of the effect to attach
</param>
        <summary>Attaches an auxiliary effect to the player.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation
 effect which can be applied on any sound source that directs a certain amount of its
 energy to this effect. This amount is defined by setAuxEffectSendLevel().
 See <c><see cref="M:Android.Media.MediaPlayer.SetAuxEffectSendLevel(System.Single)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">After creating an auxiliary effect (e.g.
 <c><see cref="T:Android.Media.Audiofx.EnvironmentalReverb" /></c>), retrieve its ID with
 <c><see cref="P:Android.Media.Audiofx.AudioEffect.Id" /></c> and use it when calling this method
 to attach the player to the effect.
 </para>
          <para tool="javadoc-to-mdoc">To detach the effect from the player, call this method with a null effect id.
 </para>
          <para tool="javadoc-to-mdoc">This method must be called after one of the overloaded <c> setDataSource </c>
 methods.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#attachAuxEffect(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionId">
      <MemberSignature Language="C#" Value="public virtual int AudioSessionId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAudioSessionId", "(I)V", "GetSetAudioSessionId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the audio session ID.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the audio session ID.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setAudioSessionId(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the audio session ID.</para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="BufferingUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.BufferingUpdateEventArgs&gt; BufferingUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/BufferingUpdateEventArgs&gt; BufferingUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+BufferingUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public event EventHandler Completion;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completion" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <summary tool="true">Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method to create a MediaPlayer for a given Uri.
 On success, <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> will already have been called and must not be called again.
 </para>
          <para tool="javadoc-to-mdoc">When done with the MediaPlayer, you should call  <c><see cref="M:Android.Media.MediaPlayer.Release" /></c>,
 to free the resources. If not released, too many MediaPlayer instances will
 result in an exception.</para>
          <para tool="javadoc-to-mdoc">Note that since <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> is called automatically in this method,
 you cannot change the audio stream type (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioStreamType(Android.Media.Stream)" /></c>), audio
 session ID (see <c><see cref="P:Android.Media.MediaPlayer.AudioSessionId" /></c>) or audio attributes
 (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioAttributes(Android.Media.AudioAttributes)" /></c> of the new MediaPlayer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (<format type="text/html"><var>R.raw.&lt;something&gt;</var></format>) for
              the resource to use as the datasource</param>
        <summary>Convenience method to create a MediaPlayer for a given resource id.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method to create a MediaPlayer for a given resource id.
 On success, <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> will already have been called and must not be called again.
 </para>
          <para tool="javadoc-to-mdoc">When done with the MediaPlayer, you should call  <c><see cref="M:Android.Media.MediaPlayer.Release" /></c>,
 to free the resources. If not released, too many MediaPlayer instances will
 result in an exception.</para>
          <para tool="javadoc-to-mdoc">Note that since <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> is called automatically in this method,
 you cannot change the audio stream type (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioStreamType(Android.Media.Stream)" /></c>), audio
 session ID (see <c><see cref="P:Android.Media.MediaPlayer.AudioSessionId" /></c>) or audio attributes
 (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioAttributes(Android.Media.AudioAttributes)" /></c> of the new MediaPlayer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri, Android.Views.ISurfaceHolder holder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video</param>
        <summary>Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method to create a MediaPlayer for a given Uri.
 On success, <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> will already have been called and must not be called again.
 </para>
          <para tool="javadoc-to-mdoc">When done with the MediaPlayer, you should call  <c><see cref="M:Android.Media.MediaPlayer.Release" /></c>,
 to free the resources. If not released, too many MediaPlayer instances will
 result in an exception.</para>
          <para tool="javadoc-to-mdoc">Note that since <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> is called automatically in this method,
 you cannot change the audio stream type (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioStreamType(Android.Media.Stream)" /></c>), audio
 session ID (see <c><see cref="P:Android.Media.MediaPlayer.AudioSessionId" /></c>) or audio attributes
 (see <c><see cref="M:Android.Media.MediaPlayer.SetAudioAttributes(Android.Media.AudioAttributes)" /></c> of the new MediaPlayer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context, android.net.Uri, android.view.SurfaceHolder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, int resid, Android.Media.AudioAttributes audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (<format type="text/html"><var>R.raw.&lt;something&gt;</var></format>) for
              the resource to use as the datasource</param>
        <param name="audioAttributes">the <c><see cref="T:Android.Media.AudioAttributes" /></c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
     see <c><see cref="M:Android.Media.AudioManager.GenerateAudioSessionId" /></c> to obtain a new session.</param>
        <summary>Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context,System.Int32)" /></c> but that lets you specify the audio
 attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context,System.Int32)" /></c> but that lets you specify the audio
 attributes and session ID to be used by the new MediaPlayer instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context, int, android.media.AudioAttributes, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri, Android.Views.ISurfaceHolder holder, Android.Media.AudioAttributes audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video, may be null.</param>
        <param name="audioAttributes">the <c><see cref="T:Android.Media.AudioAttributes" /></c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
     see <c><see cref="M:Android.Media.AudioManager.GenerateAudioSessionId" /></c> to obtain a new session.</param>
        <summary>Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context,Android.Net.Uri,Android.Net.Uri)" /></c> but that lets you specify
 the audio attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context,Android.Net.Uri,Android.Net.Uri)" /></c> but that lets you specify
 the audio attributes and session ID to be used by the new MediaPlayer instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context, android.net.Uri, android.view.SurfaceHolder, android.media.AudioAttributes, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPosition">
      <MemberSignature Language="C#" Value="public virtual int CurrentPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentPosition", "()I", "GetGetCurrentPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current playback position.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the current playback position.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getCurrentPosition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeselectTrack">
      <MemberSignature Language="C#" Value="public virtual void DeselectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectTrack(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deselectTrack", "(I)V", "GetDeselectTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be deselected. The valid range of the index
 is 0..total number of tracks - 1. The total number of tracks as well as the type of
 each individual track can be found by calling <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> method.</param>
        <summary>Deselect a track.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Deselect a track.
 </para>
          <para tool="javadoc-to-mdoc">
 Currently, the track must be a timed text track and no audio or video tracks can be
 deselected. If the timed text track identified by index has not been
 selected before, it throws an exception.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#deselectTrack(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual int Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDuration", "()I", "GetGetDurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the file.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the duration of the file.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getDuration()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.ErrorEventArgs&gt; Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/ErrorEventArgs&gt; Error" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTrack">
      <MemberSignature Language="C#" Value="public virtual int GetSelectedTrack (Android.Media.MediaTrackType trackType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetSelectedTrack(valuetype Android.Media.MediaTrackType trackType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSelectedTrack", "(I)I", "GetGetSelectedTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackType" Type="Android.Media.MediaTrackType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trackType">should be one of <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_VIDEO" /></c>,
 <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_AUDIO" /></c>, or
 <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_SUBTITLE" /></c></param>
        <summary>Returns the index of the audio, video, or subtitle track currently selected for playback,
 The return value is an index into the array returned by <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c>, and can
 be used in calls to <c><see cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" /></c> or <c><see cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the index of the audio, video, or subtitle track currently selected for playback,
 The return value is an index into the array returned by <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c>, and can
 be used in calls to <c><see cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" /></c> or <c><see cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getSelectedTrack(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if called after <c><see cref="M:Android.Media.MediaPlayer.Release" /></c></exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
        <altmember cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" />
        <altmember cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetTrackInfo">
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaPlayer.TrackInfo[] GetTrackInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.MediaPlayer/TrackInfo[] GetTrackInfo() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTrackInfo", "()[Landroid/media/MediaPlayer$TrackInfo;", "GetGetTrackInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer+TrackInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of track information.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an array of track information.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getTrackInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.InfoEventArgs&gt; Info;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/InfoEventArgs&gt; Info" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+InfoEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPlaying">
      <MemberSignature Language="C#" Value="public virtual bool IsPlaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPlaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPlaying", "()Z", "GetIsPlayingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the MediaPlayer is playing.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Checks whether the MediaPlayer is playing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#isPlaying()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized or has been released.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Looping">
      <MemberSignature Language="C#" Value="public virtual bool Looping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Looping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLooping", "()Z", "GetIsLoopingHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLooping", "(Z)V", "GetSetLooping_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the MediaPlayer is looping or non-looping.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#isLooping()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Checks whether the MediaPlayer is looping or non-looping.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setLooping(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the player to be looping or non-looping.</para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorIo">
      <MemberSignature Language="C#" Value="public const int MediaErrorIo = -1004;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorIo = (-1004)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Io.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1004</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorMalformed">
      <MemberSignature Language="C#" Value="public const int MediaErrorMalformed = -1007;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorMalformed = (-1007)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Malformed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1007</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorTimedOut">
      <MemberSignature Language="C#" Value="public const int MediaErrorTimedOut = -110;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorTimedOut = (-110)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.TimedOut.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-110</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorUnsupported">
      <MemberSignature Language="C#" Value="public const int MediaErrorUnsupported = -1010;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorUnsupported = (-1010)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Unsupported.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1010</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaMimetypeTextSubrip">
      <MemberSignature Language="C#" Value="public const string MediaMimetypeTextSubrip;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaMimetypeTextSubrip" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_MIMETYPE_TEXT_SUBRIP")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>MIME type for SubRip (SRT) container.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_MIMETYPE_TEXT_SUBRIP" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()V", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Pauses playback. Call start() to resume.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#pause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public virtual void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "()V", "GetPrepareHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, synchronously.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepares the player for playback, synchronously.

 After setting the datasource and the display surface, you need to either
 call prepare() or prepareAsync(). For files, it is OK to call prepare(),
 which blocks until MediaPlayer is ready for playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#prepare()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="PrepareAsync">
      <MemberSignature Language="C#" Value="public virtual void PrepareAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepareAsync", "()V", "GetPrepareAsyncHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, asynchronously.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepares the player for playback, asynchronously.

 After setting the datasource and the display surface, you need to either
 call prepare() or prepareAsync(). For streams, you should call prepareAsync(),
 which returns immediately, rather than blocking until enough data has been
 buffered.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#prepareAsync()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepared">
      <MemberSignature Language="C#" Value="public event EventHandler Prepared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Prepared" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases resources associated with this MediaPlayer object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases resources associated with this MediaPlayer object.
 It is considered good practice to call this method when you're
 done using the MediaPlayer. In particular, whenever an Activity
 of an application is paused (its onPause() method is called),
 or stopped (its onStop() method is called), this method should be
 invoked to release the MediaPlayer object, unless the application
 has a special need to keep the object around. In addition to
 unnecessary resources (such as memory and instances of codecs)
 being held, failure to call this method immediately if a
 MediaPlayer object is no longer needed may also lead to
 continuous battery consumption for mobile devices, and playback
 failure for other applications if no multiple instances of the
 same codec are supported on a device. Even if multiple instances
 of the same codec are supported, some performance degradation
 may be expected when unnecessary multiple instances are used
 at the same time.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the MediaPlayer to its uninitialized state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Resets the MediaPlayer to its uninitialized state. After calling
 this method, you will have to initialize it again by setting the
 data source and calling prepare().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SeekComplete">
      <MemberSignature Language="C#" Value="public event EventHandler SeekComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SeekComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekTo">
      <MemberSignature Language="C#" Value="public virtual void SeekTo (int msec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SeekTo(int32 msec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("seekTo", "(I)V", "GetSeekTo_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="msec">the offset in milliseconds from the start to seek to</param>
        <summary>Seeks to specified time position.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Seeks to specified time position.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#seekTo(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized
</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectTrack">
      <MemberSignature Language="C#" Value="public virtual void SelectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectTrack(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("selectTrack", "(I)V", "GetSelectTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be selected. The valid range of the index
 is 0..total number of track - 1. The total number of tracks as well as the type of
 each individual track can be found by calling <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> method.</param>
        <summary>Selects a track.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Selects a track.
 </para>
          <para tool="javadoc-to-mdoc">
 If a MediaPlayer is in invalid state, it throws an IllegalStateException exception.
 If a MediaPlayer is in <i>Started</i> state, the selected track is presented immediately.
 If a MediaPlayer is not in Started state, it just marks the track to be played.
 </para>
          <para tool="javadoc-to-mdoc">
 In any valid state, if it is called multiple times on the same type of track (ie. Video,
 Audio, Timed Text), the most recent one will be chosen.
 </para>
          <para tool="javadoc-to-mdoc">
 The first audio and video tracks are selected by default if available, even though
 this method is not called. However, no timed text track will be selected until
 this function is called.
 </para>
          <para tool="javadoc-to-mdoc">
 Currently, only timed text tracks or audio tracks can be selected via this method.
 In addition, the support for selecting an audio track at runtime is pretty limited
 in that an audio track can only be selected in the <i>Prepared</i> state.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#selectTrack(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioAttributes">
      <MemberSignature Language="C#" Value="public virtual void SetAudioAttributes (Android.Media.AudioAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioAttributes(class Android.Media.AudioAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioAttributes", "(Landroid/media/AudioAttributes;)V", "GetSetAudioAttributes_Landroid_media_AudioAttributes_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">a non-null set of audio attributes
</param>
        <summary>Sets the audio attributes for this MediaPlayer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio attributes for this MediaPlayer.
 See <c><see cref="T:Android.Media.AudioAttributes" /></c> for how to build and configure an instance of this class.
 You must call this method before <c><see cref="M:Android.Media.MediaPlayer.Prepare" /></c> or <c><see cref="M:Android.Media.MediaPlayer.PrepareAsync" /></c> in order
 for the audio attributes to become effective thereafter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setAudioAttributes(android.media.AudioAttributes)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioStreamType">
      <MemberSignature Language="C#" Value="public virtual void SetAudioStreamType (Android.Media.Stream streamtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioStreamType(valuetype Android.Media.Stream streamtype) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioStreamType", "(I)V", "GetSetAudioStreamType_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamtype" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamtype">the audio stream type</param>
        <summary>Sets the audio stream type for this MediaPlayer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio stream type for this MediaPlayer. See <c><see cref="T:Android.Media.AudioManager" /></c>
 for a list of stream types. Must call this method before prepare() or
 prepareAsync() in order for the target stream type to become effective
 thereafter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setAudioStreamType(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Media.AudioManager" />
      </Docs>
    </Member>
    <Member MemberName="SetAuxEffectSendLevel">
      <MemberSignature Language="C#" Value="public virtual void SetAuxEffectSendLevel (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAuxEffectSendLevel(float32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxEffectSendLevel", "(F)V", "GetSetAuxEffectSendLevel_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">send level scalar
</param>
        <summary>Sets the send level of the player to the attached auxiliary effect.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the send level of the player to the attached auxiliary effect.
 See <c><see cref="M:Android.Media.MediaPlayer.AttachAuxEffect(System.Int32)" /></c>. The level value range is 0 to 1.0.
 </para>
          <para tool="javadoc-to-mdoc">By default the send level is 0, so even if an effect is attached to the player
 this method must be called for the effect to be applied.
 </para>
          <para tool="javadoc-to-mdoc">Note that the passed level value is a raw scalar. UI controls should be scaled
 logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,
 so an appropriate conversion from linear UI input x to level is:
 x == 0 -&gt; level = 0
 0  level = 10^(72*(x-R)/20/R)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setAuxEffectSendLevel(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;)V", "GetSetDataSource_Ljava_io_FileDescriptor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <summary tool="true">Sets the data source (FileDescriptor) to use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the data source (FileDescriptor) to use. It is the caller's responsibility
 to close the file descriptor. It is safe to do so as soon as this call returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/lang/String;)V", "GetSetDataSource_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">the path of the file, or the http/rtsp URL of the stream you want to play</param>
        <summary>Sets the data source (file-path or http/rtsp URL) to use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the data source (file-path or http/rtsp URL) to use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state

 <para tool="javadoc-to-mdoc" />When <c>path</c> refers to a local file, the file may actually be opened by a
 process other than the calling application.  This implies that the pathname
 should be an absolute path (as any other process runs with unspecified current working
 directory), and that the pathname should reference a world-readable file.
 As an alternative, the application could first open the file for reading,
 and then use the file descriptor form <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor)" /></c>.
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <summary>Sets the data source as a content Uri.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the data source as a content Uri.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt; headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;JJ)V", "GetSetDataSource_Ljava_io_FileDescriptor_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <summary>Sets the data source (FileDescriptor) to use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the data source (FileDescriptor) to use.  The FileDescriptor must be
 seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility
 to close the file descriptor. It is safe to do so as soon as this call returns.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor, long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt; headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDisplay">
      <MemberSignature Language="C#" Value="public virtual void SetDisplay (Android.Views.ISurfaceHolder sh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDisplay(class Android.Views.ISurfaceHolder sh) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDisplay", "(Landroid/view/SurfaceHolder;)V", "GetSetDisplay_Landroid_view_SurfaceHolder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sh" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="sh">the SurfaceHolder to use for video display
</param>
        <summary>Sets the <c><see cref="T:Android.Views.ISurfaceHolder" /></c> to use for displaying the video
 portion of the media.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the <c><see cref="T:Android.Views.ISurfaceHolder" /></c> to use for displaying the video
 portion of the media.

 Either a surface holder or surface must be set if a display or video sink
 is needed.  Not calling this method or <c><see cref="M:Android.Media.MediaPlayer.SetSurface(Android.Views.Surface)" /></c>
 when playing back a video will result in only the audio track being played.
 A null surface holder or surface will result in only the audio track being
 played.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setDisplay(android.view.SurfaceHolder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetNextMediaPlayer">
      <MemberSignature Language="C#" Value="public virtual void SetNextMediaPlayer (Android.Media.MediaPlayer next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNextMediaPlayer(class Android.Media.MediaPlayer next) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNextMediaPlayer", "(Landroid/media/MediaPlayer;)V", "GetSetNextMediaPlayer_Landroid_media_MediaPlayer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="Android.Media.MediaPlayer" />
      </Parameters>
      <Docs>
        <param name="next">the player to start after this one completes playback.

</param>
        <summary tool="true">Set the MediaPlayer to start when this MediaPlayer finishes playback
 (i.e. reaches the end of the stream).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the MediaPlayer to start when this MediaPlayer finishes playback
 (i.e. reaches the end of the stream).
 The media framework will attempt to transition from this player to
 the next as seamlessly as possible. The next player can be set at
 any time before completion. The next player must be prepared by the
 app, and the application should not call start() on it.
 The next MediaPlayer must be different from 'this'. An exception
 will be thrown if next == this.
 The application may call setNextMediaPlayer(null) to indicate no
 next player should be started at the end of playback.
 If the current player is looping, it will keep looping and the next
 player will not be started.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setNextMediaPlayer(android.media.MediaPlayer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnBufferingUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnBufferingUpdateListener (Android.Media.MediaPlayer.IOnBufferingUpdateListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnBufferingUpdateListener(class Android.Media.MediaPlayer/IOnBufferingUpdateListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnBufferingUpdateListener", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V", "GetSetOnBufferingUpdateListener_Landroid_media_MediaPlayer_OnBufferingUpdateListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnBufferingUpdateListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run.
</param>
        <summary>Register a callback to be invoked when the status of a network
 stream's buffer has changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the status of a network
 stream's buffer has changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnCompletionListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnCompletionListener (Android.Media.MediaPlayer.IOnCompletionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnCompletionListener(class Android.Media.MediaPlayer/IOnCompletionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnCompletionListener", "(Landroid/media/MediaPlayer$OnCompletionListener;)V", "GetSetOnCompletionListener_Landroid_media_MediaPlayer_OnCompletionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnCompletionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the end of a media source
 has been reached during playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the end of a media source
 has been reached during playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnErrorListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnErrorListener (Android.Media.MediaPlayer.IOnErrorListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnErrorListener(class Android.Media.MediaPlayer/IOnErrorListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnErrorListener", "(Landroid/media/MediaPlayer$OnErrorListener;)V", "GetSetOnErrorListener_Landroid_media_MediaPlayer_OnErrorListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnErrorListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an error has happened
 during an asynchronous operation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when an error has happened
 during an asynchronous operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnErrorListener(android.media.MediaPlayer.OnErrorListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnInfoListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnInfoListener (Android.Media.MediaPlayer.IOnInfoListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnInfoListener(class Android.Media.MediaPlayer/IOnInfoListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnInfoListener", "(Landroid/media/MediaPlayer$OnInfoListener;)V", "GetSetOnInfoListener_Landroid_media_MediaPlayer_OnInfoListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnInfoListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an info/warning is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when an info/warning is available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnInfoListener(android.media.MediaPlayer.OnInfoListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOnPreparedListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnPreparedListener (Android.Media.MediaPlayer.IOnPreparedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnPreparedListener(class Android.Media.MediaPlayer/IOnPreparedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnPreparedListener", "(Landroid/media/MediaPlayer$OnPreparedListener;)V", "GetSetOnPreparedListener_Landroid_media_MediaPlayer_OnPreparedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnPreparedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the media source is ready
 for playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the media source is ready
 for playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnSeekCompleteListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnSeekCompleteListener (Android.Media.MediaPlayer.IOnSeekCompleteListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSeekCompleteListener(class Android.Media.MediaPlayer/IOnSeekCompleteListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnSeekCompleteListener", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V", "GetSetOnSeekCompleteListener_Landroid_media_MediaPlayer_OnSeekCompleteListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnSeekCompleteListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when a seek operation has been
 completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a seek operation has been
 completed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnTimedTextListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnTimedTextListener (Android.Media.MediaPlayer.IOnTimedTextListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnTimedTextListener(class Android.Media.MediaPlayer/IOnTimedTextListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnTimedTextListener", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V", "GetSetOnTimedTextListener_Landroid_media_MediaPlayer_OnTimedTextListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnTimedTextListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when a timed text is available
 for display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a timed text is available
 for display.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnTimedTextListener(android.media.MediaPlayer.OnTimedTextListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnVideoSizeChangedListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnVideoSizeChangedListener (Android.Media.MediaPlayer.IOnVideoSizeChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnVideoSizeChangedListener(class Android.Media.MediaPlayer/IOnVideoSizeChangedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnVideoSizeChangedListener", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V", "GetSetOnVideoSizeChangedListener_Landroid_media_MediaPlayer_OnVideoSizeChangedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnVideoSizeChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the video size is
 known or updated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the video size is
 known or updated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetScreenOnWhilePlaying">
      <MemberSignature Language="C#" Value="public virtual void SetScreenOnWhilePlaying (bool screenOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScreenOnWhilePlaying(bool screenOn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setScreenOnWhilePlaying", "(Z)V", "GetSetScreenOnWhilePlaying_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenOn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="screenOn">Supply true to keep the screen on, false to allow it
 to turn off.
</param>
        <summary>Control whether we should use the attached SurfaceHolder to keep the
 screen on while video playback is occurring.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Control whether we should use the attached SurfaceHolder to keep the
 screen on while video playback is occurring.  This is the preferred
 method over <c><see cref="M:Android.Media.MediaPlayer.SetWakeMode(Android.Content.Context,Android.OS.WakeLockFlags)" /></c> where possible, since it doesn't
 require that the application have permission for low-level wake lock
 access.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setScreenOnWhilePlaying(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetSurface">
      <MemberSignature Language="C#" Value="public virtual void SetSurface (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSurface(class Android.Views.Surface surface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSurface", "(Landroid/view/Surface;)V", "GetSetSurface_Landroid_view_Surface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">The <c><see cref="T:Android.Views.Surface" /></c> to be used for the video portion of
 the media.
</param>
        <summary>Sets the <c><see cref="T:Android.Views.Surface" /></c> to be used as the sink for the video portion of
 the media.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the <c><see cref="T:Android.Views.Surface" /></c> to be used as the sink for the video portion of
 the media. This is similar to <c><see cref="M:Android.Media.MediaPlayer.SetDisplay(Android.Views.ISurfaceHolder)" /></c>, but
 does not support <c><see cref="M:Android.Media.MediaPlayer.SetScreenOnWhilePlaying(System.Boolean)" /></c>.  Setting a
 Surface will un-set any Surface or SurfaceHolder that was previously set.
 A null surface will result in only the audio track being played.

 If the Surface sends frames to a <c><see cref="T:Android.Graphics.SurfaceTexture" /></c>, the timestamps
 returned from <c><see cref="P:Android.Graphics.SurfaceTexture.Timestamp" /></c> will have an
 unspecified zero point.  These timestamps cannot be directly compared
 between different media sources, different instances of the same media
 source, or multiple runs of the same program.  The timestamp is normally
 monotonically increasing and is unaffected by time-of-day adjustments,
 but it is reset when the position is set.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setSurface(android.view.Surface)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public virtual void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoScalingMode", "(I)V", "GetSetVideoScalingMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">target video scaling mode. Most be one of the supported
 video scaling modes; otherwise, IllegalArgumentException will be thrown.</param>
        <summary>Sets video scaling mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets video scaling mode. To make the target video scaling mode
 effective during playback, this method must be called after
 data source is set. If not called, the default video
 scaling mode is <c><see cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" /></c>.

 </para>
          <para tool="javadoc-to-mdoc"> The supported video scaling modes are:
 <list type="bullet"><item><term><c><see cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" /></c></term></item><item><term><c><see cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setVideoScalingMode(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" />
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="C#" Value="public virtual void SetVolume (float leftVolume, float rightVolume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVolume(float32 leftVolume, float32 rightVolume) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVolume", "(FF)V", "GetSetVolume_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftVolume" Type="System.Single" />
        <Parameter Name="rightVolume" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="leftVolume">left volume scalar</param>
        <param name="rightVolume">right volume scalar
</param>
        <summary>Sets the volume on this player.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the volume on this player.
 This API is recommended for balancing the output of audio streams
 within an application. Unless you are writing an application to
 control user settings, this API should be used in preference to
 <c><see cref="M:Android.Media.AudioManager.SetStreamVolume(Android.Media.Stream,System.Int32,System.Int32)" /></c> which sets the volume of ALL streams of
 a particular type. Note that the passed volume values are raw scalars in range 0.0 to 1.0.
 UI controls should be scaled logarithmically.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setVolume(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWakeMode">
      <MemberSignature Language="C#" Value="public virtual void SetWakeMode (Android.Content.Context context, Android.OS.WakeLockFlags mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWakeMode(class Android.Content.Context context, valuetype Android.OS.WakeLockFlags mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWakeMode", "(Landroid/content/Context;I)V", "GetSetWakeMode_Landroid_content_Context_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="mode" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="mode">the power/wake mode to set</param>
        <summary>Set the low-level power management behavior for this MediaPlayer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the low-level power management behavior for this MediaPlayer.  This
 can be used when the MediaPlayer is not playing through a SurfaceHolder
 set with <c><see cref="M:Android.Media.MediaPlayer.SetDisplay(Android.Views.ISurfaceHolder)" /></c> and thus can use the
 high-level <c><see cref="M:Android.Media.MediaPlayer.SetScreenOnWhilePlaying(System.Boolean)" /></c> feature.

 </para>
          <para tool="javadoc-to-mdoc">This function has the MediaPlayer access the low-level power manager
 service to control the device's power usage while playing is occurring.
 The parameter is a combination of <c><see cref="T:Android.OS.PowerManager" /></c> wake flags.
 Use of this method requires <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#WAKE_LOCK" /></c>
 permission.
 By default, no attempt is made to keep the device awake during playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#setWakeMode(android.content.Context, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.PowerManager" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts or resumes playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts or resumes playback. If playback had previously been paused,
 playback will continue from where it was paused. If playback had
 been stopped, or never started before, playback will start at the
 beginning.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#start()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "GetStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops playback after playback has been stopped or paused.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops playback after playback has been stopped or paused.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedText">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.TimedTextEventArgs&gt; TimedText;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/TimedTextEventArgs&gt; TimedText" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+TimedTextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoHeight">
      <MemberSignature Language="C#" Value="public virtual int VideoHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVideoHeight", "()I", "GetGetVideoHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the height of the video.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the height of the video.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getVideoHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Specifies a video scaling mode. The content is stretched to the
 surface rendering area. When the surface has the same aspect ratio
 as the content, the aspect ratio of the content is maintained;
 otherwise, the aspect ratio of the content is not maintained when video
 is being rendered. Unlike <c><see cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" /></c>,
 there is no content cropping with this video scaling mode.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Specifies a video scaling mode. The content is scaled, maintaining
 its aspect ratio. The whole surface area is always used. When the
 aspect ratio of the content is the same as the surface, no content
 is cropped; otherwise, content is cropped to fit the surface.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.VideoSizeChangedEventArgs&gt; VideoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/VideoSizeChangedEventArgs&gt; VideoSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+VideoSizeChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoWidth">
      <MemberSignature Language="C#" Value="public virtual int VideoWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVideoWidth", "()I", "GetGetVideoWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the width of the video.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the width of the video.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaPlayer.html#getVideoWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
