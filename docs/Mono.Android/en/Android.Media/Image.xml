<Type Name="Image" FullName="Android.Media.Image">
  <TypeSignature Language="C#" Value="public abstract class Image : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Image extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/Image", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">A single complete image buffer to use with a media source such as a
 <c><see cref="T:Android.Media.MediaCodec" /></c> or a
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>.</para>
      <para tool="javadoc-to-mdoc">This class allows for efficient direct application access to the pixel
 data of the Image through one or more
 <c><see cref="T:Java.Nio.ByteBuffer" /></c>. Each buffer is encapsulated in a
 <c><see cref="!:NoType:android/media/Image$Plane;Href=../../../reference/android/media/Image.Plane.html" /></c> that describes the layout of the pixel data in that plane. Due
 to this direct access, and unlike the <c><see cref="T:Android.Graphics.Bitmap" /></c> class,
 Images are not directly usable as as UI resources.</para>
      <para tool="javadoc-to-mdoc">Since Images are often directly produced or consumed by hardware
 components, they are a limited resource shared across the system, and should
 be closed as soon as they are no longer needed.</para>
      <para tool="javadoc-to-mdoc">For example, when using the <c><see cref="T:Android.Media.ImageReader" /></c> class to read out Images
 from various media sources, not closing old Image objects will prevent the
 availability of new Images once
 <c><see cref="P:Android.Media.ImageReader.MaxImages" /></c> is
 reached. When this happens, the function acquiring new Images will typically
 throw an <c><see cref="T:Java.Lang.IllegalStateException" /></c>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Media.ImageReader" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/Image.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Image (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public abstract void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Free up this frame for reuse.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Free up this frame for reuse.
 </para>
          <para tool="javadoc-to-mdoc">
 After calling this method, calling any methods on this <c>Image</c> will
 result in an <c><see cref="T:Java.Lang.IllegalStateException" /></c>, and attempting to read from
 or write to <c><see cref="T:Java.Nio.ByteBuffer" /></c> returned by an earlier
 <c><see cref="!:NoType:android/media/Image$Plane;Href=../../../reference/android/media/Image.Plane.html#getBuffer()" /></c> call will have undefined behavior. If the image
 was obtained from <c><see cref="T:Android.Media.ImageWriter" /></c> via
 <c><see cref="M:Android.Media.ImageWriter.DequeueInputImage" /></c>, after calling this method, any
 image data filled by the application will be lost and the image will be
 returned to <c><see cref="T:Android.Media.ImageWriter" /></c> for reuse. Images given to
 <c><see cref="M:Android.Media.ImageWriter.QueueInputImage(Android.Media.Image)" /></c> are automatically
 closed.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CropRect">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Rect CropRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect CropRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCropRect", "()Landroid/graphics/Rect;", "GetGetCropRectHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setCropRect", "(Landroid/graphics/Rect;)V", "GetSetCropRect_Landroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the crop rectangle associated with this frame.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/media/Image.html#getCropRect()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Get the crop rectangle associated with this frame.
 
 The crop rectangle specifies the region of valid pixels in the image,
 using coordinates in the largest-resolution plane.
</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/media/Image.html#setCropRect(android.graphics.Rect)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the crop rectangle associated with this frame.
 
 The crop rectangle specifies the region of valid pixels in the image,
 using coordinates in the largest-resolution plane.
</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public abstract Android.Graphics.ImageFormatType Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.ImageFormatType Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFormat", "()I", "GetGetFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.ImageFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the format for this image.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the format for this image. This format determines the number of
 ByteBuffers needed to represent the image, and the general layout of the
 pixel data in each in ByteBuffer.

 <format type="text/html"><table><tr><th>Format</th><th>Plane count</th><th>Layout details</th></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.Jpeg" /></c></td><td>1</td><td>Compressed data, so row and pixel strides are 0. To uncompress, use
      <c><see cref="M:Android.Graphics.BitmapFactory.DecodeByteArray(System.Byte[],System.Int32,System.Int32)" /></c>.
   </td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c></td><td>3</td><td>A luminance plane followed by the Cb and Cr chroma planes.
     The chroma planes have half the width and height of the luminance
     plane (4:2:0 subsampling). Each pixel sample in each plane has 8 bits.
     Each plane has its own row stride and pixel stride.</td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.Yuv422888" /></c></td><td>3</td><td>A luminance plane followed by the Cb and Cr chroma planes.
     The chroma planes have half the width and the full height of the luminance
     plane (4:2:2 subsampling). Each pixel sample in each plane has 8 bits.
     Each plane has its own row stride and pixel stride.</td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.Yuv444888" /></c></td><td>3</td><td>A luminance plane followed by the Cb and Cr chroma planes.
     The chroma planes have the same width and height as that of the luminance
     plane (4:4:4 subsampling). Each pixel sample in each plane has 8 bits.
     Each plane has its own row stride and pixel stride.</td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.FlexRgb888" /></c></td><td>3</td><td>A R (red) plane followed by the G (green) and B (blue) planes.
     All planes have the same widths and heights.
     Each pixel sample in each plane has 8 bits.
     Each plane has its own row stride and pixel stride.</td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.FlexRgba8888" /></c></td><td>4</td><td>A R (red) plane followed by the G (green), B (blue), and
     A (alpha) planes. All planes have the same widths and heights.
     Each pixel sample in each plane has 8 bits.
     Each plane has its own row stride and pixel stride.</td></tr><tr><td><c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c></td><td>1</td><td>A single plane of raw sensor image data, with 16 bits per color
     sample. The details of the layout need to be queried from the source of
     the raw sensor data, such as
     <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>.
   </td></tr></table></format></para>
          <para tool="javadoc-to-mdoc">
 The format is one of the values from
 <c><see cref="T:Android.Graphics.ImageFormat" /></c>. The mapping between the
 formats and the planes is as follows:
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#getFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Graphics.ImageFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetPlanes">
      <MemberSignature Language="C#" Value="public abstract Android.Media.Image.Plane[] GetPlanes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.Image/Plane[] GetPlanes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPlanes", "()[Landroid/media/Image$Plane;", "GetGetPlanesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image+Plane[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the array of pixel planes for this Image.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the array of pixel planes for this Image. The number of planes is
 determined by the format of the Image. The application will get an empty
 array if the image format is <c><see cref="F:Android.Graphics.ImageFormat.Private" /></c>, because the image pixel data is not directly accessible. The
 application can check the image format by calling
 <c><see cref="P:Android.Media.Image.Format" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#getPlanes()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public abstract int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHeight", "()I", "GetGetHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of the image in pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The height of the image in pixels. For formats where some color channels
 are subsampled, this is the height of the largest-resolution plane.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#getHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public abstract long Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Timestamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTimestamp", "()J", "GetGetTimestampHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the timestamp associated with this frame.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the timestamp associated with this frame.
 </para>
          <para tool="javadoc-to-mdoc">
 The timestamp is measured in nanoseconds, and is normally monotonically
 increasing. The timestamps for the images from different sources may have
 different timebases therefore may not be comparable. The specific meaning and
 timebase of the timestamp depend on the source providing images. See
 <c><see cref="T:Android.Hardware.Camera" /></c>,
 <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>,
 <c><see cref="T:Android.Media.MediaPlayer" /></c> and <c><see cref="T:Android.Media.MediaCodec" /></c> for more details.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#getTimestamp()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public abstract int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWidth", "()I", "GetGetWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The width of the image in pixels.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The width of the image in pixels. For formats where some color channels
 are subsampled, this is the width of the largest-resolution plane.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/Image.html#getWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
