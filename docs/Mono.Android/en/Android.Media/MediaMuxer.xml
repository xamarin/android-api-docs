<Type Name="MediaMuxer" FullName="Android.Media.MediaMuxer">
  <TypeSignature Language="C#" Value="public sealed class MediaMuxer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaMuxer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaMuxer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="18">
    <summary>MediaMuxer facilitates muxing elementary streams.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">MediaMuxer facilitates muxing elementary streams. Currently only supports an
 mp4 file as the output and at most one audio and/or one video elementary
 stream.
 </para>
      <para tool="javadoc-to-mdoc">
 It is generally used like this:

 <example><code lang="java">
 MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4);
 // More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat()
 // or MediaExtractor.getTrackFormat().
 MediaFormat audioFormat = new MediaFormat(...);
 MediaFormat videoFormat = new MediaFormat(...);
 int audioTrackIndex = muxer.addTrack(audioFormat);
 int videoTrackIndex = muxer.addTrack(videoFormat);
 ByteBuffer inputBuffer = ByteBuffer.allocate(bufferSize);
 boolean finished = false;
 BufferInfo bufferInfo = new BufferInfo();

 muxer.start();
 while(!finished) {
   // getInputBuffer() will fill the inputBuffer with one frame of encoded
   // sample from either MediaCodec or MediaExtractor, set isAudioSample to
   // true when the sample is audio data, set up all the fields of bufferInfo,
   // and return true if there are no more samples.
   finished = getInputBuffer(inputBuffer, isAudioSample, bufferInfo);
   if (!finished) {
     int currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex;
     muxer.writeSampleData(currentTrackIndex, inputBuffer, bufferInfo);
   }
 };
 muxer.stop();
 muxer.release();
 </code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/MediaMuxer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 18" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaMuxer (string path, Android.Media.MuxerOutputType format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype Android.Media.MuxerOutputType format) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="format" Type="Android.Media.MuxerOutputType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="format">To be added.</param>
        <summary>Constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor.
 Creates a media muxer that writes to the specified path.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#MediaMuxer(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.IO.IOException">if failed to open the file for write
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTrack">
      <MemberSignature Language="C#" Value="public int AddTrack (Android.Media.MediaFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddTrack(class Android.Media.MediaFormat format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTrack", "(Landroid/media/MediaFormat;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
      </Parameters>
      <Docs>
        <param name="format">The media format for the track.  This must not be an empty
               MediaFormat.</param>
        <summary>Adds a track with the specified format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds a track with the specified format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#addTrack(android.media.MediaFormat)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make sure you call this when you're done to free up any resources
 instead of relying on the garbage collector to do this for you at
 some point in the future.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Make sure you call this when you're done to free up any resources
 instead of relying on the garbage collector to do this for you at
 some point in the future.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public void SetLocation (float latitude, float longitude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocation(float32 latitude, float32 longitude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLocation", "(FF)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="latitude" Type="System.Single" />
        <Parameter Name="longitude" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="latitude">Latitude in degrees. Its value must be in the range [-90,
 90].</param>
        <param name="longitude">Longitude in degrees. Its value must be in the range
 [-180, 180].</param>
        <summary>Set and store the geodata (latitude and longitude) in the output file.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set and store the geodata (latitude and longitude) in the output file.
 This method should be called before <c><see cref="M:Android.Media.MediaMuxer.Start" /></c>. The geodata is stored
 in udta box if the output format is
 <c><see cref="!:NoType:android/media/MediaMuxer$OutputFormat;Href=../../../reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_MPEG_4" /></c>, and is ignored for other output
 formats. The geodata is stored according to ISO-6709 standard.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#setLocation(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 19" />
        <exception cref="T:Java.Lang.IllegalArgumentException">If the given latitude or longitude is out
 of range.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called after <c><see cref="M:Android.Media.MediaMuxer.Start" /></c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOrientationHint">
      <MemberSignature Language="C#" Value="public void SetOrientationHint (int degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrientationHint(int32 degrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOrientationHint", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="degrees">the angle to be rotated clockwise in degrees.
 The supported angles are 0, 90, 180, and 270 degrees.
</param>
        <summary>Sets the orientation hint for output video playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the orientation hint for output video playback.
 </para>
          <para tool="javadoc-to-mdoc">This method should be called before <c><see cref="M:Android.Media.MediaMuxer.Start" /></c>. Calling this
 method will not rotate the video frame when muxer is generating the file,
 but add a composition matrix containing the rotation angle in the output
 video if the output format is
 <c><see cref="!:NoType:android/media/MediaMuxer$OutputFormat;Href=../../../reference/android/media/MediaMuxer.OutputFormat.html#MUXER_OUTPUT_MPEG_4" /></c> so that a video player can
 choose the proper orientation for playback. Note that some video players
 may choose to ignore the composition matrix in a video during playback.
 By default, the rotation degree is 0.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#setOrientationHint(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the muxer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts the muxer.
 </para>
          <para tool="javadoc-to-mdoc">Make sure this is called after <c><see cref="M:Android.Media.MediaMuxer.AddTrack(Android.Media.MediaFormat)" /></c> and before
 <c><see cref="M:Android.Media.MediaMuxer.WriteSampleData(System.Int32,Java.Nio.ByteBuffer,Java.Nio.ByteBuffer)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#start()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the muxer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops the muxer.
 </para>
          <para tool="javadoc-to-mdoc">Once the muxer stops, it can not be restarted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSampleData">
      <MemberSignature Language="C#" Value="public void WriteSampleData (int trackIndex, Java.Nio.ByteBuffer byteBuf, Android.Media.MediaCodec.BufferInfo bufferInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSampleData(int32 trackIndex, class Java.Nio.ByteBuffer byteBuf, class Android.Media.MediaCodec/BufferInfo bufferInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeSampleData", "(ILjava/nio/ByteBuffer;Landroid/media/MediaCodec$BufferInfo;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackIndex" Type="System.Int32" />
        <Parameter Name="byteBuf" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="bufferInfo" Type="Android.Media.MediaCodec+BufferInfo" />
      </Parameters>
      <Docs>
        <param name="trackIndex">The track index for this sample.</param>
        <param name="byteBuf">The encoded sample.</param>
        <param name="bufferInfo">The buffer information related to this sample.
 MediaMuxer uses the flags provided in <c><see cref="!:NoType:android/media/MediaCodec$BufferInfo;Href=../../../reference/android/media/MediaCodec.BufferInfo.html" /></c>,
 to signal sync frames.
</param>
        <summary>Writes an encoded sample into the muxer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes an encoded sample into the muxer.
 </para>
          <para tool="javadoc-to-mdoc">The application needs to make sure that the samples are written into
 the right tracks. Also, it needs to make sure the samples for each track
 are written in chronological order (e.g. in the order they are provided
 by the encoder.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaMuxer.html#writeSampleData(int, java.nio.ByteBuffer, android.media.MediaCodec.BufferInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
  </Members>
</Type>
