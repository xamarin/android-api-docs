<Type Name="MediaMuxer" FullName="Android.Media.MediaMuxer">
  <TypeSignature Language="C#" Value="public sealed class MediaMuxer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaMuxer extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Media.MediaMuxer" />
  <TypeSignature Language="F#" Value="type MediaMuxer = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/MediaMuxer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/MediaMuxer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="18">
    <summary>MediaMuxer facilitates muxing elementary streams.</summary>
    <remarks>
      <para>MediaMuxer facilitates muxing elementary streams. Currently MediaMuxer supports MP4, Webm
            and 3GP file as the output. It also supports muxing B-frames in MP4 since Android Nougat.</para>
      <para>It is generally used like this:</para>
      <code lang="text/java">MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4);
            // More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat()
            // or MediaExtractor.getTrackFormat().
            MediaFormat audioFormat = new MediaFormat(...);
            MediaFormat videoFormat = new MediaFormat(...);
            int audioTrackIndex = muxer.addTrack(audioFormat);
            int videoTrackIndex = muxer.addTrack(videoFormat);
            ByteBuffer inputBuffer = ByteBuffer.allocate(bufferSize);
            boolean finished = false;
            BufferInfo bufferInfo = new BufferInfo();
            
            muxer.start();
            while(!finished) {
              // getInputBuffer() will fill the inputBuffer with one frame of encoded
              // sample from either MediaCodec or MediaExtractor, set isAudioSample to
              // true when the sample is audio data, set up all the fields of bufferInfo,
              // and return true if there are no more samples.
              finished = getInputBuffer(inputBuffer, isAudioSample, bufferInfo);
              if (!finished) {
                int currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex;
                muxer.writeSampleData(currentTrackIndex, inputBuffer, bufferInfo);
              }
            };
            muxer.stop();
            muxer.release();
            </code>
      <para>&lt;h4&gt;Metadata Track&lt;/h4&gt;</para>
      <para>Per-frame metadata carries information that correlates with video or audio to facilitate offline
              processing. For example, gyro signals from the sensor can help video stabilization when doing
              offline processing. Metadata tracks are only supported when multiplexing to the MP4 container
              format. When adding a new metadata track, the MIME type format must start with prefix
              "application/" (for example, "application/gyro"). The format of the metadata is
              application-defined. Metadata timestamps must be in the same time base as video and audio
              timestamps. The generated MP4 file uses TextMetaDataSampleEntry (defined in section 12.3.3.2 of
              the ISOBMFF specification) to signal the metadata's MIME type.</para>
      <code lang="text/java">MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4);
               // SetUp Video/Audio Tracks.
               MediaFormat audioFormat = new MediaFormat(...);
               MediaFormat videoFormat = new MediaFormat(...);
               int audioTrackIndex = muxer.addTrack(audioFormat);
               int videoTrackIndex = muxer.addTrack(videoFormat);
            
               // Setup Metadata Track
               MediaFormat metadataFormat = new MediaFormat(...);
               metadataFormat.setString(KEY_MIME, "application/gyro");
               int metadataTrackIndex = muxer.addTrack(metadataFormat);
            
               muxer.start();
               while(..) {
                   // Allocate bytebuffer and write gyro data(x,y,z) into it.
                   ByteBuffer metaData = ByteBuffer.allocate(bufferSize);
                   metaData.putFloat(x);
                   metaData.putFloat(y);
                   metaData.putFloat(z);
                   BufferInfo metaInfo = new BufferInfo();
                   // Associate this metadata with the video frame by setting
                   // the same timestamp as the video frame.
                   metaInfo.presentationTimeUs = currentVideoTrackTimeUs;
                   metaInfo.offset = 0;
                   metaInfo.flags = 0;
                   metaInfo.size = bufferSize;
                   muxer.writeSampleData(metadataTrackIndex, metaData, metaInfo);
               };
               muxer.stop();
               muxer.release();
             }</code>
      <para>&lt;h2 id=History&gt;"History"&gt;Features and API History&lt;/h2&gt;</para>
      <para>The following table summarizes the feature support in different API version and containers.
             For API version numbers, see <c>android.os.Build.VERSION_CODES</c>.
            
             &lt;style&gt;
             .api &gt; tr &gt; th, .api &gt; tr &gt; td { text-align: center; padding: 4px 4px; }
             .api &gt; tr &gt; th     { vertical-align: bottom; }
             .api &gt; tr &gt; td     { vertical-align: middle; }
             .sml &gt; tr &gt; th, .sml &gt; tr &gt; td { text-align: center; padding: 2px 4px; }
             .fn { text-align: center; }&lt;/style&gt;
            
             &lt;table align="right" style="width: 0%"&gt;
              &lt;thead&gt;
               &lt;tbody class=api&gt;
                &lt;tr&gt;&lt;th&gt;Symbol&lt;/th&gt;
                &lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt;
               &lt;/tbody&gt;
              &lt;/thead&gt;
              &lt;tbody class=sml&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9679;&lt;/td&gt;&lt;td&gt;Supported&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9675;&lt;/td&gt;&lt;td&gt;Not supported&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#9639;&lt;/td&gt;&lt;td&gt;Supported in MP4/WebM/3GP&lt;/td&gt;&lt;/tr&gt;
               &lt;tr&gt;&lt;td&gt;&amp;#8277;&lt;/td&gt;&lt;td&gt;Only Supported in MP4&lt;/td&gt;&lt;/tr&gt;
              &lt;/tbody&gt;
             &lt;/table&gt;
            &lt;table align="center" style="width: 100%;"&gt;
              &lt;thead class=api&gt;
               &lt;tr&gt;
                &lt;th rowspan=2&gt;Feature&lt;/th&gt;
                &lt;th colspan="24"&gt;SDK Version&lt;/th&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                &lt;th&gt;18&lt;/th&gt;
                &lt;th&gt;19&lt;/th&gt;
                &lt;th&gt;20&lt;/th&gt;
                &lt;th&gt;21&lt;/th&gt;
                &lt;th&gt;22&lt;/th&gt;
                &lt;th&gt;23&lt;/th&gt;
                &lt;th&gt;24&lt;/th&gt;
                &lt;th&gt;25&lt;/th&gt;
                &lt;th&gt;26+&lt;/th&gt;
               &lt;/tr&gt;
              &lt;/thead&gt;
             &lt;tbody class=api&gt;
               &lt;tr&gt;
                &lt;td align="center"&gt;MP4 container&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;WebM container&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;3GP container&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9679;&lt;/td&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;Muxing B-Frames(bi-directional predicted frames)&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;Muxing Single Video/Audio Track&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
                &lt;td&gt;&amp;#9639;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;Muxing Multiple Video/Audio Tracks&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tr&gt;
                &lt;td align="center"&gt;Muxing Metadata Tracks&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#9675;&lt;/td&gt;
                &lt;td&gt;&amp;#8277;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;/tbody&gt;
             &lt;/table&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/MediaMuxer" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 18" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaMuxer (Java.IO.FileDescriptor fd, Android.Media.MuxerOutputType format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.IO.FileDescriptor fd, valuetype Android.Media.MuxerOutputType format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.#ctor(Java.IO.FileDescriptor,Android.Media.MuxerOutputType)" />
      <MemberSignature Language="F#" Value="new Android.Media.MediaMuxer : Java.IO.FileDescriptor * Android.Media.MuxerOutputType -&gt; Android.Media.MediaMuxer" Usage="new Android.Media.MediaMuxer (fd, format)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/io/FileDescriptor;I)V", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/io/FileDescriptor;I)V", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="format" Type="Android.Media.MuxerOutputType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fd">The FileDescriptor of the output media file. If <c>format</c> is
            <c>OutputFormat#MUXER_OUTPUT_WEBM</c>, <c>fd</c> must be open in read-write mode.
            Otherwise, write mode is sufficient, but read-write is also accepted.</param>
        <param name="format">The format of the output media file.</param>
        <summary>Creates a media muxer that writes to the specified FileDescriptor.</summary>
        <remarks>
          <para>Creates a media muxer that writes to the specified FileDescriptor.</para>
          <para>The caller must not use the file referenced by the specified <c>fd</c> before calling
            <c>#stop</c>.</para>
          <para>It is the caller's responsibility to close the file descriptor, which is safe to do so
            as soon as this call returns.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#MediaMuxer(java.io.FileDescriptor,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.MediaMuxer(java.io.FileDescriptor, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaMuxer (string path, Android.Media.MuxerOutputType format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype Android.Media.MuxerOutputType format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.#ctor(System.String,Android.Media.MuxerOutputType)" />
      <MemberSignature Language="F#" Value="new Android.Media.MediaMuxer : string * Android.Media.MuxerOutputType -&gt; Android.Media.MediaMuxer" Usage="new Android.Media.MediaMuxer (path, format)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="format" Type="Android.Media.MuxerOutputType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the output media file.</param>
        <param name="format">The format of the output media file.</param>
        <summary>Creates a media muxer that writes to the specified path.</summary>
        <remarks>
          <para>Creates a media muxer that writes to the specified path.</para>
          <para>The caller must not use the file <c>path</c> before calling <c>#stop</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#MediaMuxer(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.MediaMuxer(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.IO.IOException">if failed to open the file for write
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTrack">
      <MemberSignature Language="C#" Value="public int AddTrack (Android.Media.MediaFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddTrack(class Android.Media.MediaFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.AddTrack(Android.Media.MediaFormat)" />
      <MemberSignature Language="F#" Value="member this.AddTrack : Android.Media.MediaFormat -&gt; int" Usage="mediaMuxer.AddTrack format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addTrack", "(Landroid/media/MediaFormat;)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addTrack", "(Landroid/media/MediaFormat;)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
      </Parameters>
      <Docs>
        <param name="format">The media format for the track.  This must not be an empty
                          MediaFormat.</param>
        <summary>Adds a track with the specified format.</summary>
        <returns>The track index for this newly added track, and it should be used
            in the <c>#writeSampleData</c>.</returns>
        <remarks>
          <para>Adds a track with the specified format.</para>
          <para>The following table summarizes support for specific format keys across android releases.
            Keys marked with '+:' are required.
            
            &lt;table style="width: 0%"&gt;
             &lt;thead&gt;
              &lt;tr&gt;
               &lt;th rowspan=2&gt;OS Version(s)&lt;/th&gt;
               &lt;td colspan=3&gt;<c>MediaFormat</c> keys used for&lt;/th&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;th&gt;All Tracks&lt;/th&gt;
               &lt;th&gt;Audio Tracks&lt;/th&gt;
               &lt;th&gt;Video Tracks&lt;/th&gt;
              &lt;/tr&gt;
             &lt;/thead&gt;
             &lt;tbody&gt;
              &lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#JELLY_BEAN_MR2</c>&lt;/td&gt;
               &lt;td rowspan=7&gt;+: <c>MediaFormat#KEY_MIME</c>&lt;/td&gt;
               &lt;td rowspan=3&gt;+: <c>MediaFormat#KEY_SAMPLE_RATE</c>,&lt;br&gt;
                   +: <c>MediaFormat#KEY_CHANNEL_COUNT</c>,&lt;br&gt;
                   +: &lt;strong&gt;codec-specific data&lt;sup&gt;AAC&lt;/sup&gt;&lt;/strong&gt;&lt;/td&gt;
               &lt;td rowspan=5&gt;+: <c>MediaFormat#KEY_WIDTH</c>,&lt;br&gt;
                   +: <c>MediaFormat#KEY_HEIGHT</c>,&lt;br&gt;
                   no <c>KEY_ROTATION</c>,
                   use <c>#setOrientationHint setOrientationHint()</c>&lt;sup&gt;.mp4&lt;/sup&gt;,&lt;br&gt;
                   +: &lt;strong&gt;codec-specific data&lt;sup&gt;AVC, MPEG4&lt;/sup&gt;&lt;/strong&gt;&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#KITKAT</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#KITKAT_WATCH</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#LOLLIPOP</c>&lt;/td&gt;
               &lt;td rowspan=4&gt;as above, plus&lt;br&gt;
                   +: &lt;strong&gt;codec-specific data&lt;sup&gt;Vorbis &amp; .webm&lt;/sup&gt;&lt;/strong&gt;&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#LOLLIPOP_MR1</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#M</c>&lt;/td&gt;
               &lt;td&gt;as above, plus&lt;br&gt;
                   <c>MediaFormat#KEY_BIT_RATE</c>&lt;sup&gt;AAC&lt;/sup&gt;&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#N</c>&lt;/td&gt;
               &lt;td&gt;as above, plus&lt;br&gt;
                   &lt;!-- {link MediaFormat#KEY_MAX_BIT_RATE}&lt;sup&gt;AAC, MPEG4&lt;/sup&gt;,&lt;br&gt; --&gt;
                   <c>MediaFormat#KEY_BIT_RATE</c>&lt;sup&gt;MPEG4&lt;/sup&gt;,&lt;br&gt;
                   <c>MediaFormat#KEY_HDR_STATIC_INFO</c>&lt;sup&gt;#, .webm&lt;/sup&gt;,&lt;br&gt;
                   <c>MediaFormat#KEY_COLOR_STANDARD</c>&lt;sup&gt;#&lt;/sup&gt;,&lt;br&gt;
                   <c>MediaFormat#KEY_COLOR_TRANSFER</c>&lt;sup&gt;#&lt;/sup&gt;,&lt;br&gt;
                   <c>MediaFormat#KEY_COLOR_RANGE</c>&lt;sup&gt;#&lt;/sup&gt;,&lt;br&gt;
                   +: &lt;strong&gt;codec-specific data&lt;sup&gt;HEVC&lt;/sup&gt;&lt;/strong&gt;,&lt;br&gt;
                   codec-specific data&lt;sup&gt;VP9&lt;/sup&gt;&lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
               &lt;td colspan=4&gt;
                &lt;p class=note&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;br&gt;
                 #: storing into container metadata.&lt;br&gt;
                 .mp4, .webm&amp;hellip;: for listed containers&lt;br&gt;
                 MPEG4, AAC&amp;hellip;: for listed codecs
               &lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td colspan=4&gt;
                &lt;p class=note&gt;Note that the codec-specific data for the track must be specified using
                this method. Furthermore, codec-specific data must not be passed/specified via the
                <c>#writeSampleData writeSampleData()</c> call.
               &lt;/td&gt;
              &lt;/tr&gt;
             &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>The following table summarizes codec support for containers across android releases:
            
            &lt;table style="width: 0%"&gt;
             &lt;thead&gt;
              &lt;tr&gt;
               &lt;th rowspan=2&gt;OS Version(s)&lt;/th&gt;
               &lt;td colspan=3&gt;Codec support&lt;/th&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;th&gt;OutputFormat#MUXER_OUTPUT_MPEG_4 MP4&lt;/th&gt;
               &lt;th&gt;OutputFormat#MUXER_OUTPUT_WEBM WEBM&lt;/th&gt;
              &lt;/tr&gt;
             &lt;/thead&gt;
             &lt;tbody&gt;
              &lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#JELLY_BEAN_MR2</c>&lt;/td&gt;
               &lt;td rowspan=6&gt;<c>MediaFormat#MIMETYPE_AUDIO_AAC AAC</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_AUDIO_AMR_NB NB-AMR</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_AUDIO_AMR_WB WB-AMR</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_H263 H.263</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_MPEG4 MPEG-4</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_AVC AVC</c> (H.264)&lt;/td&gt;
               &lt;td rowspan=3&gt;Not supported&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#KITKAT</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#KITKAT_WATCH</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#LOLLIPOP</c>&lt;/td&gt;
               &lt;td rowspan=3&gt;<c>MediaFormat#MIMETYPE_AUDIO_VORBIS Vorbis</c>,&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_VP8 VP8</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#LOLLIPOP_MR1</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#M</c>&lt;/td&gt;
              &lt;/tr&gt;&lt;tr&gt;
               &lt;td&gt;<c>android.os.Build.VERSION_CODES#N</c>&lt;/td&gt;
               &lt;td&gt;as above, plus&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_HEVC HEVC</c> (H.265)&lt;/td&gt;
               &lt;td&gt;as above, plus&lt;br&gt;
                   <c>MediaFormat#MIMETYPE_VIDEO_VP9 VP9</c>&lt;/td&gt;
              &lt;/tr&gt;
             &lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#addTrack(android.media.MediaFormat)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.addTrack(android.media.MediaFormat)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaMuxer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.MediaMuxer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.Release" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; unit" Usage="mediaMuxer.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("release", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("release", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make sure you call this when you're done to free up any resources
            instead of relying on the garbage collector to do this for you at
            some point in the future.</summary>
        <remarks>
          <para>Make sure you call this when you're done to free up any resources
            instead of relying on the garbage collector to do this for you at
            some point in the future.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#release()" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.release()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public void SetLocation (float latitude, float longitude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocation(float32 latitude, float32 longitude) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.SetLocation(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="member this.SetLocation : single * single -&gt; unit" Usage="mediaMuxer.SetLocation (latitude, longitude)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLocation", "(FF)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLocation", "(FF)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="latitude" Type="System.Single" />
        <Parameter Name="longitude" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="latitude">Latitude in degrees. Its value must be in the range [-90,
            90].</param>
        <param name="longitude">Longitude in degrees. Its value must be in the range
            [-180, 180].</param>
        <summary>Set and store the geodata (latitude and longitude) in the output file.</summary>
        <remarks>
          <para>Set and store the geodata (latitude and longitude) in the output file.
            This method should be called before <c>#start</c>. The geodata is stored
            in udta box if the output format is
            <c>OutputFormat#MUXER_OUTPUT_MPEG_4</c>, and is ignored for other output
            formats. The geodata is stored according to ISO-6709 standard.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#setLocation(float,%20float)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.setLocation(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 19" />
        <exception cref="T:Java.Lang.IllegalArgumentException">If the given latitude or longitude is out
 of range.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called after <see cref="M:Android.Media.MediaMuxer.Start" />.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOrientationHint">
      <MemberSignature Language="C#" Value="public void SetOrientationHint (int degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrientationHint(int32 degrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.SetOrientationHint(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetOrientationHint : int -&gt; unit" Usage="mediaMuxer.SetOrientationHint degrees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOrientationHint", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOrientationHint", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="degrees">the angle to be rotated clockwise in degrees.
            The supported angles are 0, 90, 180, and 270 degrees.</param>
        <summary>Sets the orientation hint for output video playback.</summary>
        <remarks>
          <para>Sets the orientation hint for output video playback.</para>
          <para>This method should be called before <c>#start</c>. Calling this
            method will not rotate the video frame when muxer is generating the file,
            but add a composition matrix containing the rotation angle in the output
            video if the output format is
            <c>OutputFormat#MUXER_OUTPUT_MPEG_4</c> so that a video player can
            choose the proper orientation for playback. Note that some video players
            may choose to ignore the composition matrix in a video during playback.
            By default, the rotation degree is 0.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#setOrientationHint(int)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.setOrientationHint(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.Start" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="mediaMuxer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("start", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("start", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the muxer.</summary>
        <remarks>
          <para>Starts the muxer.</para>
          <para>Make sure this is called after <c>#addTrack</c> and before
            <c>#writeSampleData</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#start()" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.start()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.Stop" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="mediaMuxer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stop", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stop", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the muxer.</summary>
        <remarks>
          <para>Stops the muxer.</para>
          <para>Once the muxer stops, it can not be restarted.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#stop()" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.stop()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaMuxer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.MediaMuxer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.MediaMuxer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.MediaMuxer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSampleData">
      <MemberSignature Language="C#" Value="public void WriteSampleData (int trackIndex, Java.Nio.ByteBuffer byteBuf, Android.Media.MediaCodec.BufferInfo bufferInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSampleData(int32 trackIndex, class Java.Nio.ByteBuffer byteBuf, class Android.Media.MediaCodec/BufferInfo bufferInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.MediaMuxer.WriteSampleData(System.Int32,Java.Nio.ByteBuffer,Android.Media.MediaCodec.BufferInfo)" />
      <MemberSignature Language="F#" Value="member this.WriteSampleData : int * Java.Nio.ByteBuffer * Android.Media.MediaCodec.BufferInfo -&gt; unit" Usage="mediaMuxer.WriteSampleData (trackIndex, byteBuf, bufferInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeSampleData", "(ILjava/nio/ByteBuffer;Landroid/media/MediaCodec$BufferInfo;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeSampleData", "(ILjava/nio/ByteBuffer;Landroid/media/MediaCodec$BufferInfo;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackIndex" Type="System.Int32" />
        <Parameter Name="byteBuf" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="bufferInfo" Type="Android.Media.MediaCodec+BufferInfo" />
      </Parameters>
      <Docs>
        <param name="trackIndex">The track index for this sample.</param>
        <param name="byteBuf">The encoded sample.</param>
        <param name="bufferInfo">The buffer information related to this sample.</param>
        <summary>Writes an encoded sample into the muxer.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/MediaMuxer#writeSampleData(int,%20java.nio.ByteBuffer,%20android.media.BufferInfo)" title="Reference documentation">Java documentation for <code>android.media.MediaMuxer.writeSampleData(int, java.nio.ByteBuffer, android.media.BufferInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
  </Members>
</Type>
