<Type Name="IText" FullName="Org.W3c.Dom.IText">
  <TypeSignature Language="C#" Value="public interface IText : IDisposable, Java.Interop.IJavaPeerable, Org.W3c.Dom.ICharacterData" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IText implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Org.W3c.Dom.ICharacterData, class Org.W3c.Dom.INode, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Org.W3c.Dom.IText" />
  <TypeSignature Language="F#" Value="type IText = interface&#xA;    interface ICharacterData&#xA;    interface INode&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.W3c.Dom.ICharacterData</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.W3c.Dom.INode</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/w3c/dom/Text", "", "Org.W3c.Dom.ITextInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/w3c/dom/Text", "", "Org.W3c.Dom.ITextInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The <c>Text</c> interface inherits from <c>CharacterData</c>
            and represents the textual content (termed <see href="http://www.w3.org/TR/2004/REC-xml-20040204#syntax">character data</see> in XML) of an <c>Element</c> or <c>Attr</c>.</summary>
    <remarks>
      <para>The <c>Text</c> interface inherits from <c>CharacterData</c>
            and represents the textual content (termed <see href="http://www.w3.org/TR/2004/REC-xml-20040204#syntax">character data</see> in XML) of an <c>Element</c> or <c>Attr</c>. If there is no
            markup inside an element's content, the text is contained in a single
            object implementing the <c>Text</c> interface that is the only
            child of the element. If there is markup, it is parsed into the
            information items (elements, comments, etc.) and <c>Text</c> nodes
            that form the list of children of the element.</para>
      <para>When a document is first made available via the DOM, there is only one
            <c>Text</c> node for each block of text. Users may create adjacent
            <c>Text</c> nodes that represent the contents of a given element
            without any intervening markup, but should be aware that there is no way
            to represent the separations between these nodes in XML or HTML, so they
            will not (in general) persist between DOM editing sessions. The
            <c>Node.normalize()</c> method merges any such adjacent
            <c>Text</c> objects into a single node for each block of text.</para>
      <para>No lexical check is done on the content of a <c>Text</c> node
            and, depending on its position in the document, some characters must be
            escaped during serialization using character references; e.g. the
            characters "&amp;lt;&amp;amp;" if the textual content is part of an element or of
            an attribute, the character sequence "]]&amp;gt;" when part of an element,
            the quotation mark character " or the apostrophe character ' when part of
            an attribute.</para>
      <para>See also the <see href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407">Document Object Model (DOM) Level 3 Core Specification</see>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/w3c/dom/Text" title="Reference documentation">Java documentation for <code>org.w3c.dom.Text</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="IsElementContentWhitespace">
      <MemberSignature Language="C#" Value="public bool IsElementContentWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsElementContentWhitespace" />
      <MemberSignature Language="DocId" Value="P:Org.W3c.Dom.IText.IsElementContentWhitespace" />
      <MemberSignature Language="F#" Value="member this.IsElementContentWhitespace : bool" Usage="Org.W3c.Dom.IText.IsElementContentWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isElementContentWhitespace", "()Z", "GetIsElementContentWhitespaceHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isElementContentWhitespace", "()Z", "GetIsElementContentWhitespaceHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this text node contains , often abusively called "ignorable whitespace".</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceWholeText">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IText? ReplaceWholeText (string? content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.IText ReplaceWholeText(string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.W3c.Dom.IText.ReplaceWholeText(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceWholeText : string -&gt; Org.W3c.Dom.IText" Usage="iText.ReplaceWholeText content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replaceWholeText", "(Ljava/lang/String;)Lorg/w3c/dom/Text;", "GetReplaceWholeText_Ljava_lang_String_Handler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replaceWholeText", "(Ljava/lang/String;)Lorg/w3c/dom/Text;", "GetReplaceWholeText_Ljava_lang_String_Handler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">The content of the replacing <c>Text</c> node.</param>
        <summary>Replaces the text of the current node and all logically-adjacent text
            nodes with the specified text.</summary>
        <returns>The <c>Text</c> node created with the specified content.</returns>
        <remarks>
          <para>Replaces the text of the current node and all logically-adjacent text
            nodes with the specified text. All logically-adjacent text nodes are
            removed including the current node unless it was the recipient of the
            replacement text.
            &lt;br&gt;This method returns the node which received the replacement text.
            The returned node is:
            &lt;ul&gt;
            &lt;li&gt;<c>null</c>, when the replacement text is
            the empty string;
            &lt;/li&gt;
            &lt;li&gt;the current node, except when the current node is
            read-only;
            &lt;/li&gt;
            &lt;li&gt; a new <c>Text</c> node of the same type (
            <c>Text</c> or <c>CDATASection</c>) as the current node
            inserted at the location of the replacement.
            &lt;/li&gt;
            &lt;/ul&gt;
            &lt;br&gt;For instance, in the above example calling
            <c>replaceWholeText</c> on the <c>Text</c> node that
            contains "bar" with "yo" in argument results in the following:
            &lt;br&gt;Where the nodes to be removed are read-only descendants of an
            <c>EntityReference</c>, the <c>EntityReference</c> must
            be removed instead of the read-only nodes. If any
            <c>EntityReference</c> to be removed has descendants that are
            not <c>EntityReference</c>, <c>Text</c>, or
            <c>CDATASection</c> nodes, the <c>replaceWholeText</c>
            method must fail before performing any modification of the document,
            raising a <c>DOMException</c> with the code
            <c>NO_MODIFICATION_ALLOWED_ERR</c>.
            &lt;br&gt;For instance, in the example below calling
            <c>replaceWholeText</c> on the <c>Text</c> node that
            contains "bar" fails, because the <c>EntityReference</c> node
            "ent" contains an <c>Element</c> node which cannot be removed.</para>
          <para>Added in DOM Level 3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/w3c/dom/Text#replaceWholeText(java.lang.String)" title="Reference documentation">Java documentation for <code>org.w3c.dom.Text.replaceWholeText(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Org.W3c.Dom.DOMException">NO_MODIFICATION_ALLOWED_ERR: Raised if one of the <c>Text</c>
   nodes being replaced is readonly.</exception>
      </Docs>
    </Member>
    <Member MemberName="SplitText">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IText? SplitText (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.IText SplitText(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.W3c.Dom.IText.SplitText(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SplitText : int -&gt; Org.W3c.Dom.IText" Usage="iText.SplitText offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("splitText", "(I)Lorg/w3c/dom/Text;", "GetSplitText_IHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("splitText", "(I)Lorg/w3c/dom/Text;", "GetSplitText_IHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">The 16-bit unit offset at which to split, starting from
              <c>0</c>.</param>
        <summary>Breaks this node into two nodes at the specified <c>offset</c>,
            keeping both in the tree as siblings.</summary>
        <returns>The new node, of the same type as this node.</returns>
        <remarks>
          <para>Breaks this node into two nodes at the specified <c>offset</c>,
            keeping both in the tree as siblings. After being split, this node
            will contain all the content up to the <c>offset</c> point. A
            new node of the same type, which contains all the content at and
            after the <c>offset</c> point, is returned. If the original
            node had a parent node, the new node is inserted as the next sibling
            of the original node. When the <c>offset</c> is equal to the
            length of this node, the new node has no data.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/w3c/dom/Text#splitText(int)" title="Reference documentation">Java documentation for <code>org.w3c.dom.Text.splitText(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.W3c.Dom.DOMException">INDEX_SIZE_ERR: Raised if the specified offset is negative or greater
   than the number of 16-bit units in <c>data</c>.
   <format type="text/html"><br /></format>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WholeText">
      <MemberSignature Language="C#" Value="public string? WholeText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WholeText" />
      <MemberSignature Language="DocId" Value="P:Org.W3c.Dom.IText.WholeText" />
      <MemberSignature Language="F#" Value="member this.WholeText : string" Usage="Org.W3c.Dom.IText.WholeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWholeText", "()Ljava/lang/String;", "GetGetWholeTextHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWholeText", "()Ljava/lang/String;", "GetGetWholeTextHandler:Org.W3c.Dom.ITextInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns all text of <c>Text</c> nodes logically-adjacent text
 nodes to this node, concatenated in document order.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
  </Members>
</Type>
