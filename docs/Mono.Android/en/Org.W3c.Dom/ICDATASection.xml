<Type Name="ICDATASection" FullName="Org.W3c.Dom.ICDATASection">
  <TypeSignature Language="C#" Value="public interface ICDATASection : IDisposable, Java.Interop.IJavaPeerable, Org.W3c.Dom.IText" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ICDATASection implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Org.W3c.Dom.ICharacterData, class Org.W3c.Dom.INode, class Org.W3c.Dom.IText, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Org.W3c.Dom.ICDATASection" />
  <TypeSignature Language="F#" Value="type ICDATASection = interface&#xA;    interface IText&#xA;    interface ICharacterData&#xA;    interface INode&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.W3c.Dom.ICharacterData</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.W3c.Dom.INode</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.W3c.Dom.IText</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/w3c/dom/CDATASection", "", "Org.W3c.Dom.ICDATASectionInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/w3c/dom/CDATASection", "", "Org.W3c.Dom.ICDATASectionInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>CDATA sections are used to escape blocks of text containing characters that
            would otherwise be regarded as markup.</summary>
    <remarks>
      <para>CDATA sections are used to escape blocks of text containing characters that
            would otherwise be regarded as markup. The only delimiter that is
            recognized in a CDATA section is the "]]&amp;gt;" string that ends the CDATA
            section. CDATA sections cannot be nested. Their primary purpose is for
            including material such as XML fragments, without needing to escape all
            the delimiters.</para>
      <para>The <c>CharacterData.data</c> attribute holds the text that is
            contained by the CDATA section. Note that this &lt;em&gt;may&lt;/em&gt; contain characters that need to be escaped outside of CDATA sections and
            that, depending on the character encoding ("charset") chosen for
            serialization, it may be impossible to write out some characters as part
            of a CDATA section.</para>
      <para>The <c>CDATASection</c> interface inherits from the
            <c>CharacterData</c> interface through the <c>Text</c>
            interface. Adjacent <c>CDATASection</c> nodes are not merged by use
            of the <c>normalize</c> method of the <c>Node</c> interface.</para>
      <para>No lexical check is done on the content of a CDATA section and it is
            therefore possible to have the character sequence <c>"]]&amp;gt;"</c>
            in the content, which is illegal in a CDATA section per section 2.7 of [<see href="http://www.w3.org/TR/2004/REC-xml-20040204">XML 1.0</see>]. The
            presence of this character sequence must generate a fatal error during
            serialization or the cdata section must be splitted before the
            serialization (see also the parameter <c>"split-cdata-sections"</c>
            in the <c>DOMConfiguration</c> interface).
            &lt;p &gt;&lt;b&gt;Note:&lt;/b&gt; Because no markup is recognized within a
            <c>CDATASection</c>, character numeric references cannot be used as
            an escape mechanism when serializing. Therefore, action needs to be taken
            when serializing a <c>CDATASection</c> with a character encoding
            where some of the contained characters cannot be represented. Failure to
            do so would not produce well-formed XML.
            &lt;p &gt;&lt;b&gt;Note:&lt;/b&gt; One potential solution in the serialization process is to
            end the CDATA section before the character, output the character using a
            character reference or entity reference, and open a new CDATA section for
            any further characters in the text node. Note, however, that some code
            conversion libraries at the time of writing do not return an error or
            exception when a character is missing from the encoding, making the task
            of ensuring that data is not corrupted on serialization more difficult.</para>
      <para>See also the <see href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407">Document Object Model (DOM) Level 3 Core Specification</see>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/w3c/dom/CDATASection" title="Reference documentation">Java documentation for <code>org.w3c.dom.CDATASection</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members />
</Type>
