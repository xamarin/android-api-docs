<Type Name="RestrictionsReceiver" FullName="Android.Service.Restrictions.RestrictionsReceiver">
  <TypeSignature Language="C#" Value="public abstract class RestrictionsReceiver : Android.Content.BroadcastReceiver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RestrictionsReceiver extends Android.Content.BroadcastReceiver" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Content.BroadcastReceiver</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/service/restrictions/RestrictionsReceiver", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Abstract implementation of a Restrictions Provider BroadcastReceiver.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a
 Restrictions Provider, extend from this class and implement the abstract methods.
 Export this receiver in the manifest. A profile owner device admin can then register this
 component as a Restrictions Provider using
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetRestrictionsProvider(Android.Content.ComponentName,Android.Content.ComponentName)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The function of a Restrictions Provider is to transport permission requests from apps on this
 device to an administrator (most likely on a remote device or computer) and deliver back
 responses. The response should be sent back to the app via
 <c><see cref="M:Android.Content.RestrictionsManager.NotifyPermissionResponse(System.String,Android.OS.PersistableBundle)" /></c>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Content.RestrictionsManager" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RestrictionsReceiver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html#RestrictionsReceiver()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RestrictionsReceiver (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReceive">
      <MemberSignature Language="C#" Value="public override void OnReceive (Android.Content.Context context, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnReceive(class Android.Content.Context context, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReceive", "(Landroid/content/Context;Landroid/content/Intent;)V", "GetOnReceive_Landroid_content_Context_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The Context in which the receiver is running.</param>
        <param name="intent">The Intent being received.
</param>
        <summary>Intercept standard Restrictions Provider broadcasts.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intercept standard Restrictions Provider broadcasts.  Implementations
 should not override this method; it is better to implement the
 convenience callbacks for each action.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html#onReceive(android.content.Context, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRequestPermission">
      <MemberSignature Language="C#" Value="public abstract void OnRequestPermission (Android.Content.Context context, string packageName, string requestType, string requestId, Android.OS.PersistableBundle request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRequestPermission(class Android.Content.Context context, string packageName, string requestType, string requestId, class Android.OS.PersistableBundle request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRequestPermission", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/PersistableBundle;)V", "GetOnRequestPermission_Landroid_content_Context_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="packageName" Type="System.String" />
        <Parameter Name="requestType" Type="System.String" />
        <Parameter Name="requestId" Type="System.String" />
        <Parameter Name="request" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="packageName">the application requesting permission.</param>
        <param name="requestType">the type of request, which determines the content and presentation of
 the request data.</param>
        <param name="requestId">To be added.</param>
        <param name="request">the request data bundle containing at a minimum a request id.</param>
        <summary>An asynchronous permission request made by an application for an operation that requires
 authorization by a local or remote administrator other than the user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">An asynchronous permission request made by an application for an operation that requires
 authorization by a local or remote administrator other than the user. The Restrictions
 Provider should transfer the request to the administrator and deliver back a response, when
 available. The calling application is aware that the response could take an indefinite
 amount of time.
 </para>
          <para tool="javadoc-to-mdoc">
 If the request bundle contains the key <c><see cref="F:Android.Content.RestrictionsManager.RequestKeyNewRequest" /></c>,
 then a new request must be sent. Otherwise the provider can look up any previous response
 to the same requestId and return the cached response.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html#onRequestPermission(android.content.Context, java.lang.String, java.lang.String, java.lang.String, android.os.PersistableBundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Content.RestrictionsManager.RequestTypeApproval" />
        <altmember cref="F:Android.Content.RestrictionsManager.RequestKeyId" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
