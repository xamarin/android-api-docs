<Type Name="ISafeVarargs" FullName="Java.Lang.ISafeVarargs">
  <TypeSignature Language="VB.NET" Value="Public Interface ISafeVarargs&#xA;Implements IAnnotation, IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISafeVarargs : IDisposable, Java::Interop::IJavaPeerable, Java::Lang::Annotation::IAnnotation" />
  <TypeSignature Language="C#" Value="public interface ISafeVarargs : IDisposable, Java.Interop.IJavaPeerable, Java.Lang.Annotation.IAnnotation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISafeVarargs implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.Annotation.IAnnotation, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.ISafeVarargs" />
  <TypeSignature Language="F#" Value="type ISafeVarargs = interface&#xA;    interface IAnnotation&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.Annotation.IAnnotation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/SafeVarargs", "", "Java.Lang.ISafeVarargsInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/SafeVarargs", "", "Java.Lang.ISafeVarargsInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>A programmer assertion that the body of the annotated method or
            constructor does not perform potentially unsafe operations on its
            varargs parameter.</summary>
    <remarks>
      <para>A programmer assertion that the body of the annotated method or
            constructor does not perform potentially unsafe operations on its
            varargs parameter.  Applying this annotation to a method or
            constructor suppresses unchecked warnings about a
            <i>non-reifiable</i> variable arity (vararg) type and suppresses
            unchecked warnings about parameterized array creation at call
            sites.</para>
      <para>In addition to the usage restrictions imposed by its <c>Target @Target</c> meta-annotation, compilers are required to implement
            additional usage restrictions on this annotation type; it is a
            compile-time error if a method or constructor declaration is
            annotated with a <c>@SafeVarargs</c> annotation, and either:
            &lt;ul&gt;
            &lt;li&gt;  the declaration is a fixed arity method or constructor
            
            &lt;li&gt; the declaration is a variable arity method that is neither
            <c>static</c> nor <c>final</c> nor <c>private</c>.
            
            &lt;/ul&gt;</para>
      <para>Compilers are encouraged to issue warnings when this annotation
            type is applied to a method or constructor declaration where:
            
            &lt;ul&gt;
            
            &lt;li&gt; The variable arity parameter has a reifiable element type,
            which includes primitive types, <c>Object</c>, and <c>String</c>.
            (The unchecked warnings this annotation type suppresses already do
            not occur for a reifiable element type.)
            
            &lt;li&gt; The body of the method or constructor declaration performs
            potentially unsafe operations, such as an assignment to an element
            of the variable arity parameter's array that generates an unchecked
            warning.  Some unsafe operations do not trigger an unchecked
            warning.  For example, the aliasing in
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">&amp;#64;SafeVarargs // Not actually safe!
            static void m(List&amp;lt;String&amp;gt;... stringLists) {
              Object[] array = stringLists;
              List&amp;lt;Integer&amp;gt; tmpList = Arrays.asList(42);
              array[0] = tmpList; // Semantically invalid, but compiles without warnings
              String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime!
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            leads to a <c>ClassCastException</c> at runtime.</para>
      <para>Future versions of the platform may mandate compiler errors for
            such unsafe operations.
            
            &lt;/ul&gt;</para>
      <para>Added in 1.7.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/SafeVarargs" title="Reference documentation">Java documentation for <code>java.lang.SafeVarargs</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members />
</Type>
