<Type Name="IComparable" FullName="Java.Lang.IComparable">
  <TypeSignature Language="C#" Value="public interface IComparable : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IComparable implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/Comparable", "", "Java.Lang.IComparableInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/Comparable", "", "Java.Lang.IComparableInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;T&gt;&lt;T&gt;">the type of objects that this object may be compared to</param>
    <summary>This interface imposes a total ordering on the objects of each class that
            implements it.</summary>
    <remarks>
      <para>This interface imposes a total ordering on the objects of each class that
            implements it.  This ordering is referred to as the class's <i>natural
            ordering</i>, and the class's <c>compareTo</c> method is referred to as
            its <i>natural comparison method</i>.</para>
      <para>Lists (and arrays) of objects that implement this interface can be sorted
            automatically by <c>Collections#sort(List) Collections.sort</c> (and
            <c>Arrays#sort(Object[]) Arrays.sort</c>).  Objects that implement this
            interface can be used as keys in a SortedMap sorted map or as
            elements in a SortedSet sorted set, without the need to
            specify a Comparator comparator.</para>
      <para>The natural ordering for a class <c>C</c> is said to be <i>consistent
            with equals</i> if and only if <c>e1.compareTo(e2) == 0</c> has
            the same boolean value as <c>e1.equals(e2)</c> for every
            <c>e1</c> and <c>e2</c> of class <c>C</c>.  Note that <c>null</c>
            is not an instance of any class, and <c>e.compareTo(null)</c> should
            throw a <c>NullPointerException</c> even though <c>e.equals(null)</c>
            returns <c>false</c>.</para>
      <para>It is strongly recommended (though not required) that natural orderings be
            consistent with equals.  This is so because sorted sets (and sorted maps)
            without explicit comparators behave "strangely" when they are used with
            elements (or keys) whose natural ordering is inconsistent with equals.  In
            particular, such a sorted set (or sorted map) violates the general contract
            for set (or map), which is defined in terms of the <c>equals</c>
            method.</para>
      <para>For example, if one adds two keys <c>a</c> and <c>b</c> such that
            <c>(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)</c> to a sorted
            set that does not use an explicit comparator, the second <c>add</c>
            operation returns false (and the size of the sorted set does not increase)
            because <c>a</c> and <c>b</c> are equivalent from the sorted set's
            perspective.</para>
      <para>Virtually all Java core classes that implement <c>Comparable</c> have natural
            orderings that are consistent with equals.  One exception is
            <c>java.math.BigDecimal</c>, whose natural ordering equates
            <c>BigDecimal</c> objects with equal values and different precisions
            (such as 4.0 and 4.00).</para>
      <para>For the mathematically inclined, the <i>relation</i> that defines
            the natural ordering on a given class C is:</para>
      <code lang="text/java">{@code
                  {(x, y) such that x.compareTo(y) &lt;= 0}.
            }</code>
      <para>The <i>quotient</i> for this total order is:</para>
      <code lang="text/java">{@code
                  {(x, y) such that x.compareTo(y) == 0}.
            }</code>
      <para>It follows immediately from the contract for <c>compareTo</c> that the
            quotient is an <i>equivalence relation</i> on <c>C</c>, and that the
            natural ordering is a <i>total order</i> on <c>C</c>.  When we say that a
            class's natural ordering is <i>consistent with equals</i>, we mean that the
            quotient for the natural ordering is the equivalence relation defined by
            the class's <c>Object#equals(Object) equals(Object)</c> method:</para>
      <code lang="text/java">{(x, y) such that x.equals(y)}. </code>
      <para>This interface is a member of the
            <see href="https://developer.android.com//../technotes/guides/collections/index.html">
            Java Collections Framework</see>.</para>
      <para>Added in 1.2.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/Comparable" title="Reference documentation">Java documentation for <code>java.lang.Comparable</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.IComparable.CompareTo(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Java.Lang.Object -&gt; int" Usage="iComparable.CompareTo o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/lang/Object;)I", "GetCompareTo_Ljava_lang_Object_Handler:Java.Lang.IComparableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/lang/Object;)I", "GetCompareTo_Ljava_lang_Object_Handler:Java.Lang.IComparableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">the object to be compared.</param>
        <summary>Compares this object with the specified object for order.</summary>
        <returns>a negative integer, zero, or a positive integer as this object
                     is less than, equal to, or greater than the specified object.</returns>
        <remarks>
          <para>Compares this object with the specified object for order.  Returns a
            negative integer, zero, or a positive integer as this object is less
            than, equal to, or greater than the specified object.</para>
          <para>The implementor must ensure
            <c>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</c>
            for all <c>x</c> and <c>y</c>.  (This
            implies that <c>x.compareTo(y)</c> must throw an exception iff
            <c>y.compareTo(x)</c> throws an exception.)</para>
          <para>The implementor must also ensure that the relation is transitive:
            <c>(x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0)</c> implies
            <c>x.compareTo(z) &gt; 0</c>.</para>
          <para>Finally, the implementor must ensure that <c>x.compareTo(y)==0</c>
            implies that <c>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</c>, for
            all <c>z</c>.</para>
          <para>It is strongly recommended, but <i>not</i> strictly required that
            <c>(x.compareTo(y)==0) == (x.equals(y))</c>.  Generally speaking, any
            class that implements the <c>Comparable</c> interface and violates
            this condition should clearly indicate this fact.  The recommended
            language is "Note: this class has a natural ordering that is
            inconsistent with equals."</para>
          <para>In the foregoing description, the notation
            <c>sgn(</c><i>expression</i><c>)</c> designates the mathematical
            <i>signum</i> function, which is defined to return one of <c>-1</c>,
            <c>0</c>, or <c>1</c> according to whether the value of
            <i>expression</i> is negative, zero, or positive, respectively.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Comparable#compareTo(T)" title="Reference documentation">Java documentation for <code>java.lang.Comparable.compareTo(T)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
