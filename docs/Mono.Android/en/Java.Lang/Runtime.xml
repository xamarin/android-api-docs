<Type Name="Runtime" FullName="Java.Lang.Runtime">
  <TypeSignature Language="VB.NET" Value="Public Class Runtime&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Runtime : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class Runtime : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Runtime extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.Runtime" />
  <TypeSignature Language="F#" Value="type Runtime = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/Runtime", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/Runtime", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Every Java application has a single instance of class
            <c>Runtime</c> that allows the application to interface with
            the environment in which the application is running.</summary>
    <remarks>
      <para>Every Java application has a single instance of class
            <c>Runtime</c> that allows the application to interface with
            the environment in which the application is running. The current
            runtime can be obtained from the <c>getRuntime</c> method.</para>
      <para>An application cannot create its own instance of this class.</para>
      <para>Added in 1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/Runtime" title="Reference documentation">Java documentation for <code>java.lang.Runtime</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Runtime(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected Runtime (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Lang.Runtime : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Lang.Runtime" Usage="new Java.Lang.Runtime (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddShutdownHook">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddShutdownHook (hook As Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddShutdownHook(Java::Lang::Thread ^ hook);" />
      <MemberSignature Language="C#" Value="public virtual void AddShutdownHook (Java.Lang.Thread? hook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddShutdownHook(class Java.Lang.Thread hook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.AddShutdownHook(Java.Lang.Thread)" />
      <MemberSignature Language="F#" Value="abstract member AddShutdownHook : Java.Lang.Thread -&gt; unit&#xA;override this.AddShutdownHook : Java.Lang.Thread -&gt; unit" Usage="runtime.AddShutdownHook hook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addShutdownHook", "(Ljava/lang/Thread;)V", "GetAddShutdownHook_Ljava_lang_Thread_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addShutdownHook", "(Ljava/lang/Thread;)V", "GetAddShutdownHook_Ljava_lang_Thread_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hook" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="hook">An initialized but unstarted <c>Thread</c> object</param>
        <summary>Registers a new virtual-machine shutdown hook.</summary>
        <remarks>
          <para>Registers a new virtual-machine shutdown hook.</para>
          <para>The Java virtual machine <i>shuts down</i> in response to two kinds
            of events:
            
              &lt;ul&gt;
            
              &lt;li&gt; The program <i>exits</i> normally, when the last non-daemon
              thread exits or when the <c>#exit exit</c> (equivalently,
              <c>System#exit(int) System.exit</c>) method is invoked, or
            
              &lt;li&gt; The virtual machine is <i>terminated</i> in response to a
              user interrupt, such as typing <c>^C</c>, or a system-wide event,
              such as user logoff or system shutdown.
            
              &lt;/ul&gt;</para>
          <para>A <i>shutdown hook</i> is simply an initialized but unstarted
            thread.  When the virtual machine begins its shutdown sequence it will
            start all registered shutdown hooks in some unspecified order and let
            them run concurrently.  When all the hooks have finished it will then
            halt. Note that daemon threads will continue to run during the shutdown
            sequence, as will non-daemon threads if shutdown was initiated by
            invoking the <c>#exit exit</c> method.</para>
          <para>Once the shutdown sequence has begun it can be stopped only by
            invoking the <c>#halt halt</c> method, which forcibly
            terminates the virtual machine.</para>
          <para>Once the shutdown sequence has begun it is impossible to register a
            new shutdown hook or de-register a previously-registered hook.
            Attempting either of these operations will cause an
            <c>IllegalStateException</c> to be thrown.</para>
          <para>Shutdown hooks run at a delicate time in the life cycle of a virtual
            machine and should therefore be coded defensively.  They should, in
            particular, be written to be thread-safe and to avoid deadlocks insofar
            as possible.  They should also not rely blindly upon services that may
            have registered their own shutdown hooks and therefore may themselves in
            the process of shutting down.  Attempts to use other thread-based
            services such as the AWT event-dispatch thread, for example, may lead to
            deadlocks.</para>
          <para>Shutdown hooks should also finish their work quickly.  When a
            program invokes <c>#exit exit</c> the expectation is
            that the virtual machine will promptly shut down and exit.  When the
            virtual machine is terminated due to user logoff or system shutdown the
            underlying operating system may only allow a fixed amount of time in
            which to shut down and exit.  It is therefore inadvisable to attempt any
            user interaction or to perform a long-running computation in a shutdown
            hook.</para>
          <para>Uncaught exceptions are handled in shutdown hooks just as in any
            other thread, by invoking the
            <c>ThreadGroup#uncaughtException uncaughtException</c> method of the
            thread's <c>ThreadGroup</c> object. The default implementation of this
            method prints the exception's stack trace to <c>System#err</c> and
            terminates the thread; it does not cause the virtual machine to exit or
            halt.</para>
          <para>In rare circumstances the virtual machine may <i>abort</i>, that is,
            stop running without shutting down cleanly.  This occurs when the
            virtual machine is terminated externally, for example with the
            <c>SIGKILL</c> signal on Unix or the <c>TerminateProcess</c> call on
            Microsoft Windows.  The virtual machine may also abort if a native
            method goes awry by, for example, corrupting internal data structures or
            attempting to access nonexistent memory.  If the virtual machine aborts
            then no guarantee can be made about whether or not any shutdown hooks
            will be run.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#addShutdownHook(java.lang.Thread)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.addShutdownHook(java.lang.Thread)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the hook has already been started or if it has already
             been registered.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the VM is already shutting down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AvailableProcessors">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AvailableProcessors () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int AvailableProcessors();" />
      <MemberSignature Language="C#" Value="public virtual int AvailableProcessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AvailableProcessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.AvailableProcessors" />
      <MemberSignature Language="F#" Value="abstract member AvailableProcessors : unit -&gt; int&#xA;override this.AvailableProcessors : unit -&gt; int" Usage="runtime.AvailableProcessors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("availableProcessors", "()I", "GetAvailableProcessorsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("availableProcessors", "()I", "GetAvailableProcessorsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of processors available to the Java virtual machine.</summary>
        <returns>the maximum number of processors available to the virtual
                     machine; never smaller than one</returns>
        <remarks>
          <para>Returns the number of processors available to the Java virtual machine.</para>
          <para>This value may change during a particular invocation of the virtual
            machine.  Applications that are sensitive to the number of available
            processors should therefore occasionally poll this property and adjust
            their resource usage appropriately.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#availableProcessors()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.availableProcessors()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (command As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(System::String ^ command);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string? command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Exec : string -&gt; Java.Lang.Process&#xA;override this.Exec : string -&gt; Java.Lang.Process" Usage="runtime.Exec command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "(Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "(Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="command">a specified system command.</param>
        <summary>Executes the specified string command in a separate process.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified string command in a separate process.</para>
          <para>This is a convenience method.  An invocation of the form
            <c>exec(command)</c>
            behaves in exactly the same way as the invocation
            <c>#exec(String, String[], File) exec</c><c>(command, null, null)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (cmdarray As String()) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(cli::array &lt;System::String ^&gt; ^ cmdarray);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string[]? cmdarray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] cmdarray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Exec : string[] -&gt; Java.Lang.Process&#xA;override this.Exec : string[] -&gt; Java.Lang.Process" Usage="runtime.Exec cmdarray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "([Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "([Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmdarray" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cmdarray">array containing the command to call and
                               its arguments.</param>
        <summary>Executes the specified command and arguments in a separate process.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified command and arguments in a separate process.</para>
          <para>This is a convenience method.  An invocation of the form
            <c>exec(cmdarray)</c>
            behaves in exactly the same way as the invocation
            <c>#exec(String[], String[], File) exec</c><c>(cmdarray, null, null)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String[])" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (command As String, envp As String()) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(System::String ^ command, cli::array &lt;System::String ^&gt; ^ envp);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string? command, string[]? envp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string command, string[] envp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Exec : string * string[] -&gt; Java.Lang.Process&#xA;override this.Exec : string * string[] -&gt; Java.Lang.Process" Usage="runtime.Exec (command, envp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="envp" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">a specified system command.</param>
        <param name="envp">array of strings, each element of which
                               has environment variable settings in the format
                               <i>name</i>=<i>value</i>, or
                               <c>null</c> if the subprocess should inherit
                               the environment of the current process.</param>
        <summary>Executes the specified string command in a separate process with the
            specified environment.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified string command in a separate process with the
            specified environment.</para>
          <para>This is a convenience method.  An invocation of the form
            <c>exec(command, envp)</c>
            behaves in exactly the same way as the invocation
            <c>#exec(String, String[], File) exec</c><c>(command, envp, null)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String,%20java.lang.String[])" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String, java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (cmdarray As String(), envp As String()) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(cli::array &lt;System::String ^&gt; ^ cmdarray, cli::array &lt;System::String ^&gt; ^ envp);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string[]? cmdarray, string[]? envp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] cmdarray, string[] envp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String[],System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Exec : string[] * string[] -&gt; Java.Lang.Process&#xA;override this.Exec : string[] * string[] -&gt; Java.Lang.Process" Usage="runtime.Exec (cmdarray, envp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmdarray" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="envp" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cmdarray">array containing the command to call and
                               its arguments.</param>
        <param name="envp">array of strings, each element of which
                               has environment variable settings in the format
                               <i>name</i>=<i>value</i>, or
                               <c>null</c> if the subprocess should inherit
                               the environment of the current process.</param>
        <summary>Executes the specified command and arguments in a separate process
            with the specified environment.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified command and arguments in a separate process
            with the specified environment.</para>
          <para>This is a convenience method.  An invocation of the form
            <c>exec(cmdarray, envp)</c>
            behaves in exactly the same way as the invocation
            <c>#exec(String[], String[], File) exec</c><c>(cmdarray, envp, null)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String[],%20java.lang.String[])" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String[], java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (command As String, envp As String(), dir As File) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(System::String ^ command, cli::array &lt;System::String ^&gt; ^ envp, Java::IO::File ^ dir);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string? command, string[]? envp, Java.IO.File? dir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string command, string[] envp, class Java.IO.File dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String,System.String[],Java.IO.File)" />
      <MemberSignature Language="F#" Value="abstract member Exec : string * string[] * Java.IO.File -&gt; Java.Lang.Process&#xA;override this.Exec : string * string[] * Java.IO.File -&gt; Java.Lang.Process" Usage="runtime.Exec (command, envp, dir)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="envp" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dir" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="command">a specified system command.</param>
        <param name="envp">array of strings, each element of which
                               has environment variable settings in the format
                               <i>name</i>=<i>value</i>, or
                               <c>null</c> if the subprocess should inherit
                               the environment of the current process.</param>
        <param name="dir">the working directory of the subprocess, or
                               <c>null</c> if the subprocess should inherit
                               the working directory of the current process.</param>
        <summary>Executes the specified string command in a separate process with the
            specified environment and working directory.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified string command in a separate process with the
            specified environment and working directory.</para>
          <para>This is a convenience method.  An invocation of the form
            <c>exec(command, envp, dir)</c>
            behaves in exactly the same way as the invocation
            <c>#exec(String[], String[], File) exec</c><c>(cmdarray, envp, dir)</c>,
            where <c>cmdarray</c> is an array of all the tokens in
            <c>command</c>.</para>
          <para>More precisely, the <c>command</c> string is broken
            into tokens using a <c>StringTokenizer</c> created by the call
            <c>new {@link StringTokenizer</c>(command)} with no
            further modification of the character categories.  The tokens
            produced by the tokenizer are then placed in the new string
            array <c>cmdarray</c>, in the same order.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String,%20java.lang.String[],%20java.io.File)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String, java.lang.String[], java.io.File)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exec (cmdarray As String(), envp As String(), dir As File) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Lang::Process ^ Exec(cli::array &lt;System::String ^&gt; ^ cmdarray, cli::array &lt;System::String ^&gt; ^ envp, Java::IO::File ^ dir);" />
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process? Exec (string[]? cmdarray, string[]? envp, Java.IO.File? dir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] cmdarray, string[] envp, class Java.IO.File dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exec(System.String[],System.String[],Java.IO.File)" />
      <MemberSignature Language="F#" Value="abstract member Exec : string[] * string[] * Java.IO.File -&gt; Java.Lang.Process&#xA;override this.Exec : string[] * string[] * Java.IO.File -&gt; Java.Lang.Process" Usage="runtime.Exec (cmdarray, envp, dir)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmdarray" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="envp" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dir" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="cmdarray">array containing the command to call and
                               its arguments.</param>
        <param name="envp">array of strings, each element of which
                               has environment variable settings in the format
                               <i>name</i>=<i>value</i>, or
                               <c>null</c> if the subprocess should inherit
                               the environment of the current process.</param>
        <param name="dir">the working directory of the subprocess, or
                               <c>null</c> if the subprocess should inherit
                               the working directory of the current process.</param>
        <summary>Executes the specified command and arguments in a separate process with
            the specified environment and working directory.</summary>
        <returns>A new <c>Process</c> object for managing the subprocess</returns>
        <remarks>
          <para>Executes the specified command and arguments in a separate process with
            the specified environment and working directory.</para>
          <para>Given an array of strings <c>cmdarray</c>, representing the
            tokens of a command line, and an array of strings <c>envp</c>,
            representing "environment" variable settings, this method creates
            a new process in which to execute the specified command.</para>
          <para>This method checks that <c>cmdarray</c> is a valid operating
            system command.  Which commands are valid is system-dependent,
            but at the very least the command must be a non-empty list of
            non-null strings.</para>
          <para>If <c>envp</c> is <c>null</c>, the subprocess inherits the
            environment settings of the current process.</para>
          <para>A minimal set of system dependent environment variables may
            be required to start a process on some operating systems.
            As a result, the subprocess may inherit additional environment variable
            settings beyond those in the specified environment.</para>
          <para>
            <c>ProcessBuilder#start()</c> is now the preferred way to
            start a process with a modified environment.</para>
          <para>The working directory of the new subprocess is specified by <c>dir</c>.
            If <c>dir</c> is <c>null</c>, the subprocess inherits the
            current working directory of the current process.</para>
          <para>If a security manager exists, its
            <c>SecurityManager#checkExec checkExec</c>
            method is invoked with the first component of the array
            <c>cmdarray</c> as its argument. This may result in a
            <c>SecurityException</c> being thrown.</para>
          <para>Starting an operating system process is highly system-dependent.
            Among the many things that can go wrong are:
            &lt;ul&gt;
            &lt;li&gt;The operating system program file was not found.
            &lt;li&gt;Access to the program file was denied.
            &lt;li&gt;The working directory does not exist.
            &lt;/ul&gt;</para>
          <para>In such cases an exception will be thrown.  The exact nature
            of the exception is system-dependent, but it will always be a
            subclass of <c>IOException</c>.</para>
          <para>If the operating system does not support the creation of
            processes, an <c>UnsupportedOperationException</c> will be thrown.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exec(java.lang.String[],%20java.lang.String[],%20java.io.File)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exec(java.lang.String[], java.lang.String[], java.io.File)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Exit (status As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Exit(int status);" />
      <MemberSignature Language="C#" Value="public virtual void Exit (int status);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Exit(int32 status) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Exit(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Exit : int -&gt; unit&#xA;override this.Exit : int -&gt; unit" Usage="runtime.Exit status" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exit", "(I)V", "GetExit_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exit", "(I)V", "GetExit_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="status">Termination status.  By convention, a nonzero status code
                    indicates abnormal termination.</param>
        <summary>Terminates the currently running Java virtual machine by initiating its
            shutdown sequence.</summary>
        <remarks>
          <para>Terminates the currently running Java virtual machine by initiating its
            shutdown sequence.  This method never returns normally.  The argument
            serves as a status code; by convention, a nonzero status code indicates
            abnormal termination.</para>
          <para>All registered #addShutdownHook shutdown hooks, if any,
            are started in some unspecified order and allowed to run concurrently
            until they finish.  Once this is done the virtual machine
            #halt halts.</para>
          <para>If this method is invoked after all shutdown hooks have already
            been run and the status is nonzero then this method halts the
            virtual machine with the given status code. Otherwise, this method
            blocks indefinitely.</para>
          <para>The <c>System#exit(int) System.exit</c> method is the
            conventional and convenient means of invoking this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#exit(int)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.exit(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FreeMemory">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FreeMemory () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long FreeMemory();" />
      <MemberSignature Language="C#" Value="public virtual long FreeMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 FreeMemory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.FreeMemory" />
      <MemberSignature Language="F#" Value="abstract member FreeMemory : unit -&gt; int64&#xA;override this.FreeMemory : unit -&gt; int64" Usage="runtime.FreeMemory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("freeMemory", "()J", "GetFreeMemoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("freeMemory", "()J", "GetFreeMemoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the amount of free memory in the Java Virtual Machine.</summary>
        <returns>an approximation to the total amount of memory currently
                     available for future allocated objects, measured in bytes.</returns>
        <remarks>
          <para>Returns the amount of free memory in the Java Virtual Machine.
            Calling the
            <c>gc</c> method may result in increasing the value returned
            by <c>freeMemory.</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#freeMemory()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.freeMemory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Gc">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Gc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Gc();" />
      <MemberSignature Language="C#" Value="public virtual void Gc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Gc() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Gc" />
      <MemberSignature Language="F#" Value="abstract member Gc : unit -&gt; unit&#xA;override this.Gc : unit -&gt; unit" Usage="runtime.Gc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("gc", "()V", "GetGcHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("gc", "()V", "GetGcHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the garbage collector.</summary>
        <remarks>
          <para>Runs the garbage collector.
            Calling this method suggests that the Java virtual machine expend
            effort toward recycling unused objects in order to make the memory
            they currently occupy available for quick reuse. When control
            returns from the method call, the virtual machine has made
            its best effort to recycle all discarded objects.</para>
          <para>The name <c>gc</c> stands for "garbage
            collector". The virtual machine performs this recycling
            process automatically as needed, in a separate thread, even if the
            <c>gc</c> method is not invoked explicitly.</para>
          <para>The method <c>System#gc()</c> is the conventional and convenient
            means of invoking this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#gc()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.gc()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocalizedInputStream">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLocalizedInputStream (in As Stream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetLocalizedInputStream(System::IO::Stream ^ in);" />
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream? GetLocalizedInputStream (System.IO.Stream? in);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetLocalizedInputStream(class System.IO.Stream in) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.GetLocalizedInputStream(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetLocalizedInputStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.GetLocalizedInputStream : System.IO.Stream -&gt; System.IO.Stream" Usage="runtime.GetLocalizedInputStream in" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;", "GetGetLocalizedInputStream_Ljava_io_InputStream_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;", "GetGetLocalizedInputStream_Ljava_io_InputStream_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="in">InputStream to localize</param>
        <summary>Creates a localized version of an input stream.</summary>
        <returns>a localized input stream</returns>
        <remarks>
          <para>Creates a localized version of an input stream. This method takes
            an <c>InputStream</c> and returns an <c>InputStream</c>
            equivalent to the argument in all respects except that it is
            localized: as characters in the local character set are read from
            the stream, they are automatically converted from the local
            character set to Unicode.</para>
          <para>If the argument is already a localized stream, it may be returned
            as the result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#getLocalizedInputStream(java.io.InputStream)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.getLocalizedInputStream(java.io.InputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocalizedOutputStream">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLocalizedOutputStream (out As Stream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetLocalizedOutputStream(System::IO::Stream ^ out);" />
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream? GetLocalizedOutputStream (System.IO.Stream? out);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetLocalizedOutputStream(class System.IO.Stream out) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.GetLocalizedOutputStream(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member GetLocalizedOutputStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.GetLocalizedOutputStream : System.IO.Stream -&gt; System.IO.Stream" Usage="runtime.GetLocalizedOutputStream out" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;", "GetGetLocalizedOutputStream_Ljava_io_OutputStream_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;", "GetGetLocalizedOutputStream_Ljava_io_OutputStream_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="out">OutputStream to localize</param>
        <summary>Creates a localized version of an output stream.</summary>
        <returns>a localized output stream</returns>
        <remarks>
          <para>Creates a localized version of an output stream. This method
            takes an <c>OutputStream</c> and returns an
            <c>OutputStream</c> equivalent to the argument in all respects
            except that it is localized: as Unicode characters are written to
            the stream, they are automatically converted to the local
            character set.</para>
          <para>If the argument is already a localized stream, it may be returned
            as the result.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#getLocalizedOutputStream(java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.getLocalizedOutputStream(java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntime">
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRuntime () As Runtime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Lang::Runtime ^ GetRuntime();" />
      <MemberSignature Language="C#" Value="public static Java.Lang.Runtime? GetRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Runtime GetRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.GetRuntime" />
      <MemberSignature Language="F#" Value="static member GetRuntime : unit -&gt; Java.Lang.Runtime" Usage="Java.Lang.Runtime.GetRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRuntime", "()Ljava/lang/Runtime;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRuntime", "()Ljava/lang/Runtime;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Runtime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the runtime object associated with the current Java application.</summary>
        <returns>the <c>Runtime</c> object associated with the current
                     Java application.</returns>
        <remarks>
          <para>Returns the runtime object associated with the current Java application.
            Most of the methods of class <c>Runtime</c> are instance
            methods and must be invoked with respect to the current runtime object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#getRuntime()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.getRuntime()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Halt">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Halt (status As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Halt(int status);" />
      <MemberSignature Language="C#" Value="public virtual void Halt (int status);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Halt(int32 status) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Halt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Halt : int -&gt; unit&#xA;override this.Halt : int -&gt; unit" Usage="runtime.Halt status" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("halt", "(I)V", "GetHalt_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("halt", "(I)V", "GetHalt_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="status">Termination status. By convention, a nonzero status code
                    indicates abnormal termination. If the <c>Runtime#exit exit</c>
                    (equivalently, <c>System#exit(int) System.exit</c>) method
                    has already been invoked then this status code
                    will override the status code passed to that method.</param>
        <summary>Forcibly terminates the currently running Java virtual machine.</summary>
        <remarks>
          <para>Forcibly terminates the currently running Java virtual machine.  This
            method never returns normally.</para>
          <para>This method should be used with extreme caution.  Unlike the
            <c>#exit exit</c> method, this method does not cause shutdown
            hooks to be started.  If the shutdown sequence has already been
            initiated then this method does not wait for any running
            shutdown hooks to finish their work.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#halt(int)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.halt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.Runtime.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Lang.Runtime.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::String ^ filename);" />
      <MemberSignature Language="C#" Value="public virtual void Load (string? filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.Load(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Load : string -&gt; unit&#xA;override this.Load : string -&gt; unit" Usage="runtime.Load filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("load", "(Ljava/lang/String;)V", "GetLoad_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("load", "(Ljava/lang/String;)V", "GetLoad_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">the file to load.</param>
        <summary>Loads the native library specified by the filename argument.</summary>
        <remarks>
          <para>Loads the native library specified by the filename argument.  The filename
            argument must be an absolute path name.
            (for example
            <c>Runtime.getRuntime().load("/home/avh/lib/libX11.so");</c>).
            
            If the filename argument, when stripped of any platform-specific library
            prefix, path, and file extension, indicates a library whose name is,
            for example, L, and a native library called L is statically linked
            with the VM, then the JNI_OnLoad_L function exported by the library
            is invoked rather than attempting to load a dynamic library.
            A filename matching the argument does not have to exist in the file
            system.
            See the <see href="https://developer.android.com//../specs/jni/index.html"> JNI Specification</see>
            for more details.
            
            Otherwise, the filename argument is mapped to a native library image in
            an implementation-dependent manner.</para>
          <para>First, if there is a security manager, its <c>checkLink</c>
            method is called with the <c>filename</c> as its argument.
            This may result in a security exception.</para>
          <para>This is similar to the method <c>#loadLibrary(String)</c>, but it
            accepts a general file name as an argument rather than just a library
            name, allowing any file of native code to be loaded.</para>
          <para>The method <c>System#load(String)</c> is the conventional and
            convenient means of invoking this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#load(java.lang.String)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.load(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsatisfiedLinkError">if the library can not be loaded,
 either because it's not found or because there is something wrong with it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (filename As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ LoadAsync(System::String ^ filename);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAsync (string? filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAsync(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.LoadAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : string -&gt; System.Threading.Tasks.Task" Usage="runtime.LoadAsync filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadLibrary">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadLibrary (libname As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadLibrary(System::String ^ libname);" />
      <MemberSignature Language="C#" Value="public virtual void LoadLibrary (string? libname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadLibrary(string libname) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.LoadLibrary(System.String)" />
      <MemberSignature Language="F#" Value="abstract member LoadLibrary : string -&gt; unit&#xA;override this.LoadLibrary : string -&gt; unit" Usage="runtime.LoadLibrary libname" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("loadLibrary", "(Ljava/lang/String;)V", "GetLoadLibrary_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("loadLibrary", "(Ljava/lang/String;)V", "GetLoadLibrary_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libname">the name of the library.</param>
        <summary>Loads the native library specified by the <c>libname</c>
            argument.</summary>
        <remarks>
          <para>Loads the native library specified by the <c>libname</c>
            argument.  The <c>libname</c> argument must not contain any platform
            specific prefix, file extension or path. If a native library
            called <c>libname</c> is statically linked with the VM, then the
            JNI_OnLoad_<c>libname</c> function exported by the library is invoked.
            See the <see href="https://developer.android.com//../specs/jni/index.html"> JNI Specification</see>
            for more details.
            
            Otherwise, the libname argument is loaded from a system library
            location and mapped to a native library image in an implementation-
            dependent manner.</para>
          <para>First, if there is a security manager, its <c>checkLink</c>
            method is called with the <c>libname</c> as its argument.
            This may result in a security exception.</para>
          <para>The method <c>System#loadLibrary(String)</c> is the conventional
            and convenient means of invoking this method. If native
            methods are to be used in the implementation of a class, a standard
            strategy is to put the native code in a library file (call it
            <c>LibFile</c>) and then to put a static initializer:
            &lt;blockquote&gt;</para>
          <code lang="text/java">static { System.loadLibrary("LibFile"); }
            </code>
          <para>&lt;/blockquote&gt;
            within the class declaration. When the class is loaded and
            initialized, the necessary native code implementation for the native
            methods will then be loaded as well.</para>
          <para>If this method is called more than once with the same library
            name, the second and subsequent calls are ignored.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#loadLibrary(java.lang.String)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.loadLibrary(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsatisfiedLinkError">if the library can not be loaded,
 either because it's not found or because there is something wrong with it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadLibraryAsync">
      <MemberSignature Language="VB.NET" Value="Public Function LoadLibraryAsync (libname As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ LoadLibraryAsync(System::String ^ libname);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadLibraryAsync (string? libname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadLibraryAsync(string libname) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.LoadLibraryAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.LoadLibraryAsync : string -&gt; System.Threading.Tasks.Task" Usage="runtime.LoadLibraryAsync libname" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libname" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="libname">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMemory">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MaxMemory () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long MaxMemory();" />
      <MemberSignature Language="C#" Value="public virtual long MaxMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 MaxMemory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.MaxMemory" />
      <MemberSignature Language="F#" Value="abstract member MaxMemory : unit -&gt; int64&#xA;override this.MaxMemory : unit -&gt; int64" Usage="runtime.MaxMemory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("maxMemory", "()J", "GetMaxMemoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("maxMemory", "()J", "GetMaxMemoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the maximum amount of memory that the Java virtual machine
            will attempt to use.</summary>
        <returns>the maximum amount of memory that the virtual machine will
                     attempt to use, measured in bytes</returns>
        <remarks>
          <para>Returns the maximum amount of memory that the Java virtual machine
            will attempt to use.  If there is no inherent limit then the value
            <c>java.lang.Long#MAX_VALUE</c> will be returned.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#maxMemory()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.maxMemory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveShutdownHook">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveShutdownHook (hook As Thread) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool RemoveShutdownHook(Java::Lang::Thread ^ hook);" />
      <MemberSignature Language="C#" Value="public virtual bool RemoveShutdownHook (Java.Lang.Thread? hook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveShutdownHook(class Java.Lang.Thread hook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.RemoveShutdownHook(Java.Lang.Thread)" />
      <MemberSignature Language="F#" Value="abstract member RemoveShutdownHook : Java.Lang.Thread -&gt; bool&#xA;override this.RemoveShutdownHook : Java.Lang.Thread -&gt; bool" Usage="runtime.RemoveShutdownHook hook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeShutdownHook", "(Ljava/lang/Thread;)Z", "GetRemoveShutdownHook_Ljava_lang_Thread_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeShutdownHook", "(Ljava/lang/Thread;)Z", "GetRemoveShutdownHook_Ljava_lang_Thread_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hook" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="hook">the hook to remove</param>
        <summary>De-registers a previously-registered virtual-machine shutdown hook.</summary>
        <returns>
          <c>true</c> if the specified hook had previously been
            registered and was successfully de-registered, <c>false</c>
            otherwise.</returns>
        <remarks>
          <para>De-registers a previously-registered virtual-machine shutdown hook.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#removeShutdownHook(java.lang.Thread)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.removeShutdownHook(java.lang.Thread)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the VM is already shutting down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="RunFinalization">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RunFinalization ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RunFinalization();" />
      <MemberSignature Language="C#" Value="public virtual void RunFinalization ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunFinalization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.RunFinalization" />
      <MemberSignature Language="F#" Value="abstract member RunFinalization : unit -&gt; unit&#xA;override this.RunFinalization : unit -&gt; unit" Usage="runtime.RunFinalization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("runFinalization", "()V", "GetRunFinalizationHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("runFinalization", "()V", "GetRunFinalizationHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the finalization methods of any objects pending finalization.</summary>
        <remarks>
          <para>Runs the finalization methods of any objects pending finalization.
            Calling this method suggests that the Java virtual machine expend
            effort toward running the <c>finalize</c> methods of objects
            that have been found to be discarded but whose <c>finalize</c>
            methods have not yet been run. When control returns from the
            method call, the virtual machine has made a best effort to
            complete all outstanding finalizations.</para>
          <para>The virtual machine performs the finalization process
            automatically as needed, in a separate thread, if the
            <c>runFinalization</c> method is not invoked explicitly.</para>
          <para>The method <c>System#runFinalization()</c> is the conventional
            and convenient means of invoking this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#runFinalization()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.runFinalization()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunFinalizersOnExit">
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RunFinalizersOnExit (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RunFinalizersOnExit(bool value);" />
      <MemberSignature Language="C#" Value="public static void RunFinalizersOnExit (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RunFinalizersOnExit(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.RunFinalizersOnExit(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member RunFinalizersOnExit : bool -&gt; unit" Usage="Java.Lang.Runtime.RunFinalizersOnExit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("runFinalizersOnExit", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("runFinalizersOnExit", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">true to enable finalization on exit, false to disable</param>
        <summary>Enable or disable finalization on exit; doing so specifies that the
            finalizers of all objects that have finalizers that have not yet been
            automatically invoked are to be run before the Java runtime exits.</summary>
        <remarks>
          <para>Enable or disable finalization on exit; doing so specifies that the
            finalizers of all objects that have finalizers that have not yet been
            automatically invoked are to be run before the Java runtime exits.
            By default, finalization on exit is disabled.</para>
          <para>If there is a security manager,
            its <c>checkExit</c> method is first called
            with 0 as its argument to ensure the exit is allowed.
            This could result in a SecurityException.</para>
          <para>This member is deprecated. This method is inherently unsafe.  It may result in
                 finalizers being called on live objects while other threads are
                 concurrently manipulating those objects, resulting in erratic
                 behavior or deadlock.</para>
          <para>Added in JDK1.1.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#runFinalizersOnExit(boolean)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.runFinalizersOnExit(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.Runtime.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Lang.Runtime.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.Runtime.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Lang.Runtime.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMemory">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TotalMemory () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long TotalMemory();" />
      <MemberSignature Language="C#" Value="public virtual long TotalMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TotalMemory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.TotalMemory" />
      <MemberSignature Language="F#" Value="abstract member TotalMemory : unit -&gt; int64&#xA;override this.TotalMemory : unit -&gt; int64" Usage="runtime.TotalMemory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("totalMemory", "()J", "GetTotalMemoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("totalMemory", "()J", "GetTotalMemoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the total amount of memory in the Java virtual machine.</summary>
        <returns>the total amount of memory currently available for current
                     and future objects, measured in bytes.</returns>
        <remarks>
          <para>Returns the total amount of memory in the Java virtual machine.
            The value returned by this method may vary over time, depending on
            the host environment.</para>
          <para>Note that the amount of memory required to hold an object of any
            given type may be implementation-dependent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#totalMemory()" title="Reference documentation">Java documentation for <code>java.lang.Runtime.totalMemory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TraceInstructions">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TraceInstructions (on As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TraceInstructions(bool on);" />
      <MemberSignature Language="C#" Value="public virtual void TraceInstructions (bool on);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraceInstructions(bool on) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.TraceInstructions(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TraceInstructions : bool -&gt; unit&#xA;override this.TraceInstructions : bool -&gt; unit" Usage="runtime.TraceInstructions on" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("traceInstructions", "(Z)V", "GetTraceInstructions_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("traceInstructions", "(Z)V", "GetTraceInstructions_ZHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="on" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="on">ignored</param>
        <summary>Not implemented, does nothing.</summary>
        <remarks>
          <para>Not implemented, does nothing.</para>
          <para>This member is deprecated. This method was intended to control instruction tracing.
            It has been superseded by ART-specific tracing mechanisms.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#traceInstructions(boolean)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.traceInstructions(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TraceMethodCalls">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TraceMethodCalls (on As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TraceMethodCalls(bool on);" />
      <MemberSignature Language="C#" Value="public virtual void TraceMethodCalls (bool on);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraceMethodCalls(bool on) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.Runtime.TraceMethodCalls(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TraceMethodCalls : bool -&gt; unit&#xA;override this.TraceMethodCalls : bool -&gt; unit" Usage="runtime.TraceMethodCalls on" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("traceMethodCalls", "(Z)V", "GetTraceMethodCalls_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("traceMethodCalls", "(Z)V", "GetTraceMethodCalls_ZHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="on" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="on">ignored</param>
        <summary>Not implemented, does nothing.</summary>
        <remarks>
          <para>Not implemented, does nothing.</para>
          <para>Calling this method on Android Lollipop or later (API level &gt;= 21)
            with <c>true</c> argument will cause it to throw an
            <c>UnsupportedOperationException</c>.</para>
          <para>This member is deprecated. This method was intended to control method call tracing.
            It has been superseded by ART-specific tracing mechanisms.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/Runtime#traceMethodCalls(boolean)" title="Reference documentation">Java documentation for <code>java.lang.Runtime.traceMethodCalls(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
