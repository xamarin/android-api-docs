<Type Name="StrictMath" FullName="Java.Lang.StrictMath">
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StrictMath&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class StrictMath sealed : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public sealed class StrictMath : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StrictMath extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Lang.StrictMath" />
  <TypeSignature Language="F#" Value="type StrictMath = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/lang/StrictMath", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/lang/StrictMath", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The class <c>StrictMath</c> contains methods for performing basic
            numeric operations such as the elementary exponential, logarithm,
            square root, and trigonometric functions.</summary>
    <remarks>
      <para>The class <c>StrictMath</c> contains methods for performing basic
            numeric operations such as the elementary exponential, logarithm,
            square root, and trigonometric functions.</para>
      <para>To help ensure portability of Java programs, the definitions of
            some of the numeric functions in this package require that they
            produce the same results as certain published algorithms. These
            algorithms are available from the well-known network library
            <c>netlib</c> as the package "Freely Distributable Math
            Library," <see href="https://www.netlib.org/fdlibm/"><c>fdlibm</c></see>. These
            algorithms, which are written in the C programming language, are
            then to be understood as executed with all floating-point
            operations following the rules of Java floating-point arithmetic.</para>
      <para>The Java math library is defined with respect to
            <c>fdlibm</c> version 5.3. Where <c>fdlibm</c> provides
            more than one definition for a function (such as
            <c>acos</c>), use the "IEEE 754 core function" version
            (residing in a file whose name begins with the letter
            <c>e</c>).  The methods which require <c>fdlibm</c>
            semantics are <c>sin</c>, <c>cos</c>, <c>tan</c>,
            <c>asin</c>, <c>acos</c>, <c>atan</c>,
            <c>exp</c>, <c>log</c>, <c>log10</c>,
            <c>cbrt</c>, <c>atan2</c>, <c>pow</c>,
            <c>sinh</c>, <c>cosh</c>, <c>tanh</c>,
            <c>hypot</c>, <c>expm1</c>, and <c>log1p</c>.</para>
      <para>The platform uses signed two's complement integer arithmetic with
            int and long primitive types.  The developer should choose
            the primitive type to ensure that arithmetic operations consistently
            produce correct results, which in some cases means the operations
            will not overflow the range of values of the computation.
            The best practice is to choose the primitive type and algorithm to avoid
            overflow. In cases where the size is <c>int</c> or <c>long</c> and
            overflow errors need to be detected, the methods <c>addExact</c>,
            <c>subtractExact</c>, <c>multiplyExact</c>, <c>toIntExact</c>,
            <c>incrementExact</c>, <c>decrementExact</c> and <c>negateExact</c>
            throw an <c>ArithmeticException</c> when the results overflow.
            For the arithmetic operations divide and absolute value, overflow
            occurs only with a specific minimum or maximum value and
            should be checked against the minimum or maximum as appropriate.
            
            &lt;h2&gt;Ieee754RecommendedOps&gt;IEEE 754 Recommended
            Operations&lt;/h2&gt;
            
            The <c>java.lang.Math Math</c> class discusses how the shared
            quality of implementation criteria for selected <c>Math</c> and
            <c>StrictMath</c> methods relate to the IEEE 754
            recommended operations.</para>
      <para>Added in 1.3.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/lang/StrictMath" title="Reference documentation">Java documentation for <code>java.lang.StrictMath</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double a);" />
      <MemberSignature Language="C#" Value="public static double Abs (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Abs(System.Double)" />
      <MemberSignature Language="F#" Value="static member Abs : double -&gt; double" Usage="Java.Lang.StrictMath.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("abs", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("abs", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">the argument whose absolute value is to be determined</param>
        <summary>Returns the absolute value of a <c>double</c> value.</summary>
        <returns>the absolute value of the argument.</returns>
        <remarks>
          <para>Returns the absolute value of a <c>double</c> value.
            If the argument is not negative, the argument is returned.
            If the argument is negative, the negation of the argument is returned.
            Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the result
            is positive zero.
            &lt;li&gt;If the argument is infinite, the result is positive infinity.
            &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#abs(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.abs(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (a As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int a);" />
      <MemberSignature Language="C#" Value="public static int Abs (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Abs(System.Int32)" />
      <MemberSignature Language="F#" Value="static member Abs : int -&gt; int" Usage="Java.Lang.StrictMath.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("abs", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("abs", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">the  argument whose absolute value is to be determined.</param>
        <summary>Returns the absolute value of an <c>int</c> value.</summary>
        <returns>the absolute value of the argument.</returns>
        <remarks>
          <para>Returns the absolute value of an <c>int</c> value.
            If the argument is not negative, the argument is returned.
            If the argument is negative, the negation of the argument is returned.</para>
          <para>Note that if the argument is equal to the value of <c>Integer#MIN_VALUE</c>, the most negative representable <c>int</c>
            value, the result is that same value, which is negative. In
            contrast, the <c>StrictMath#absExact(int)</c> method throws an
            <c>ArithmeticException</c> for this value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#abs(int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.abs(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (a As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long a);" />
      <MemberSignature Language="C#" Value="public static long Abs (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Abs(System.Int64)" />
      <MemberSignature Language="F#" Value="static member Abs : int64 -&gt; int64" Usage="Java.Lang.StrictMath.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("abs", "(J)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("abs", "(J)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">the  argument whose absolute value is to be determined.</param>
        <summary>Returns the absolute value of a <c>long</c> value.</summary>
        <returns>the absolute value of the argument.</returns>
        <remarks>
          <para>Returns the absolute value of a <c>long</c> value.
            If the argument is not negative, the argument is returned.
            If the argument is negative, the negation of the argument is returned.</para>
          <para>Note that if the argument is equal to the value of <c>Long#MIN_VALUE</c>, the most negative representable <c>long</c>
            value, the result is that same value, which is negative. In
            contrast, the <c>StrictMath#absExact(long)</c> method throws
            an <c>ArithmeticException</c> for this value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#abs(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.abs(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (a As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float a);" />
      <MemberSignature Language="C#" Value="public static float Abs (float a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Abs(System.Single)" />
      <MemberSignature Language="F#" Value="static member Abs : single -&gt; single" Usage="Java.Lang.StrictMath.Abs a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("abs", "(F)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("abs", "(F)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="a">the argument whose absolute value is to be determined</param>
        <summary>Returns the absolute value of a <c>float</c> value.</summary>
        <returns>the absolute value of the argument.</returns>
        <remarks>
          <para>Returns the absolute value of a <c>float</c> value.
            If the argument is not negative, the argument is returned.
            If the argument is negative, the negation of the argument is returned.
            Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the
            result is positive zero.
            &lt;li&gt;If the argument is infinite, the result is positive infinity.
            &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#abs(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.abs(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AbsExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function AbsExact (a As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AbsExact(int a);" />
      <MemberSignature Language="C#" Value="public static int AbsExact (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AbsExact(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.AbsExact(System.Int32)" />
      <MemberSignature Language="F#" Value="static member AbsExact : int -&gt; int" Usage="Java.Lang.StrictMath.AbsExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("absExact", "(I)I", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("absExact", "(I)I", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">the argument whose absolute value is to be determined</param>
        <summary>Returns the mathematical absolute value of an <c>int</c> value
            if it is exactly representable as an <c>int</c>, throwing
            <c>ArithmeticException</c> if the result overflows the
            positive <c>int</c> range.</summary>
        <returns>the absolute value of the argument, unless overflow occurs</returns>
        <remarks>
          <para>Returns the mathematical absolute value of an <c>int</c> value
            if it is exactly representable as an <c>int</c>, throwing
            <c>ArithmeticException</c> if the result overflows the
            positive <c>int</c> range.</para>
          <para>Since the range of two's complement integers is asymmetric
            with one additional negative value (JLS {</para>
          <para>Added in 15.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#absExact(int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.absExact(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AbsExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function AbsExact (a As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long AbsExact(long a);" />
      <MemberSignature Language="C#" Value="public static long AbsExact (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 AbsExact(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.AbsExact(System.Int64)" />
      <MemberSignature Language="F#" Value="static member AbsExact : int64 -&gt; int64" Usage="Java.Lang.StrictMath.AbsExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("absExact", "(J)J", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("absExact", "(J)J", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">the argument whose absolute value is to be determined</param>
        <summary>Returns the mathematical absolute value of an <c>long</c> value
            if it is exactly representable as an <c>long</c>, throwing
            <c>ArithmeticException</c> if the result overflows the
            positive <c>long</c> range.</summary>
        <returns>the absolute value of the argument, unless overflow occurs</returns>
        <remarks>
          <para>Returns the mathematical absolute value of an <c>long</c> value
            if it is exactly representable as an <c>long</c>, throwing
            <c>ArithmeticException</c> if the result overflows the
            positive <c>long</c> range.</para>
          <para>Since the range of two's complement integers is asymmetric
            with one additional negative value (JLS {</para>
          <para>Added in 15.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#absExact(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.absExact(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double a);" />
      <MemberSignature Language="C#" Value="public static double Acos (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Acos(System.Double)" />
      <MemberSignature Language="F#" Value="static member Acos : double -&gt; double" Usage="Java.Lang.StrictMath.Acos a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("acos", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("acos", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">the value whose arc cosine is to be returned.</param>
        <summary>Returns the arc cosine of a value; the returned angle is in the
            range 0.</summary>
        <returns>the arc cosine of the argument.</returns>
        <remarks>
          <para>Returns the arc cosine of a value; the returned angle is in the
            range 0.0 through <i>pi</i>.  Special case:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
            than 1, then the result is NaN.
            &lt;li&gt;If the argument is <c>1.0</c>, the result is positive zero.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#acos(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.acos(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddExact (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AddExact(int x, int y);" />
      <MemberSignature Language="C#" Value="public static int AddExact (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AddExact(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.AddExact(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member AddExact : int * int -&gt; int" Usage="Java.Lang.StrictMath.AddExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addExact", "(II)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addExact", "(II)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the sum of its arguments,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the sum of its arguments,
            throwing an exception if the result overflows an <c>int</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#addExact(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.addExact(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddExact (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long AddExact(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long AddExact (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 AddExact(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.AddExact(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member AddExact : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.AddExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addExact", "(JJ)J", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addExact", "(JJ)J", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the sum of its arguments,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the sum of its arguments,
            throwing an exception if the result overflows a <c>long</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#addExact(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.addExact(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double a);" />
      <MemberSignature Language="C#" Value="public static double Asin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Asin(System.Double)" />
      <MemberSignature Language="F#" Value="static member Asin : double -&gt; double" Usage="Java.Lang.StrictMath.Asin a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("asin", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("asin", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">the value whose arc sine is to be returned.</param>
        <summary>Returns the arc sine of a value; the returned angle is in the
            range -<i>pi</i>/2 through <i>pi</i>/2.</summary>
        <returns>the arc sine of the argument.</returns>
        <remarks>
          <para>Returns the arc sine of a value; the returned angle is in the
            range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
            than 1, then the result is NaN.
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#asin(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.asin(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double a);" />
      <MemberSignature Language="C#" Value="public static double Atan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Atan(System.Double)" />
      <MemberSignature Language="F#" Value="static member Atan : double -&gt; double" Usage="Java.Lang.StrictMath.Atan a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("atan", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("atan", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">the value whose arc tangent is to be returned.</param>
        <summary>Returns the arc tangent of a value; the returned angle is in the
            range -<i>pi</i>/2 through <i>pi</i>/2.</summary>
        <returns>the arc tangent of the argument.</returns>
        <remarks>
          <para>Returns the arc tangent of a value; the returned angle is in the
            range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN, then the result is NaN.
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            &lt;li&gt;If the argument is Double#isInfinite infinite,
            then the result is the closest value to <i>pi</i>/2 with the
            same sign as the input.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#atan(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.atan(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Atan2 : double * double -&gt; double" Usage="Java.Lang.StrictMath.Atan2 (y, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("atan2", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("atan2", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y">the ordinate coordinate</param>
        <param name="x">the abscissa coordinate</param>
        <summary>Returns the angle <i>theta</i> from the conversion of rectangular
            coordinates (<c>x</c>,&amp;nbsp;<c>y</c>) to polar
            coordinates (r,&amp;nbsp;<i>theta</i>).</summary>
        <returns>the <i>theta</i> component of the point
                     (<i>r</i>,&amp;nbsp;<i>theta</i>)
                     in polar coordinates that corresponds to the point
                     (<i>x</i>,&amp;nbsp;<i>y</i>) in Cartesian coordinates.</returns>
        <remarks>
          <para>Returns the angle <i>theta</i> from the conversion of rectangular
            coordinates (<c>x</c>,&amp;nbsp;<c>y</c>) to polar
            coordinates (r,&amp;nbsp;<i>theta</i>).
            This method computes the phase <i>theta</i> by computing an arc tangent
            of <c>y/x</c> in the range of -<i>pi</i> to <i>pi</i>. Special
            cases:
            &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.
            &lt;li&gt;If the first argument is positive zero and the second argument
            is positive, or the first argument is positive and finite and the
            second argument is positive infinity, then the result is positive
            zero.
            &lt;li&gt;If the first argument is negative zero and the second argument
            is positive, or the first argument is negative and finite and the
            second argument is positive infinity, then the result is negative zero.
            &lt;li&gt;If the first argument is positive zero and the second argument
            is negative, or the first argument is positive and finite and the
            second argument is negative infinity, then the result is the
            <c>double</c> value closest to <i>pi</i>.
            &lt;li&gt;If the first argument is negative zero and the second argument
            is negative, or the first argument is negative and finite and the
            second argument is negative infinity, then the result is the
            <c>double</c> value closest to -<i>pi</i>.
            &lt;li&gt;If the first argument is positive and the second argument is
            positive zero or negative zero, or the first argument is positive
            infinity and the second argument is finite, then the result is the
            <c>double</c> value closest to <i>pi</i>/2.
            &lt;li&gt;If the first argument is negative and the second argument is
            positive zero or negative zero, or the first argument is negative
            infinity and the second argument is finite, then the result is the
            <c>double</c> value closest to -<i>pi</i>/2.
            &lt;li&gt;If both arguments are positive infinity, then the result is the
            <c>double</c> value closest to <i>pi</i>/4.
            &lt;li&gt;If the first argument is positive infinity and the second argument
            is negative infinity, then the result is the <c>double</c>
            value closest to 3*<i>pi</i>/4.
            &lt;li&gt;If the first argument is negative infinity and the second argument
            is positive infinity, then the result is the <c>double</c> value
            closest to -<i>pi</i>/4.
            &lt;li&gt;If both arguments are negative infinity, then the result is the
            <c>double</c> value closest to -3*<i>pi</i>/4.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#atan2(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.atan2(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double a);" />
      <MemberSignature Language="C#" Value="public static double Cbrt (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Cbrt(System.Double)" />
      <MemberSignature Language="F#" Value="static member Cbrt : double -&gt; double" Usage="Java.Lang.StrictMath.Cbrt a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cbrt", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cbrt", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value.</param>
        <summary>Returns the cube root of a <c>double</c> value.</summary>
        <returns>the cube root of <c>a</c>.</returns>
        <remarks>
          <para>Returns the cube root of a <c>double</c> value.  For
            positive finite <c>x</c>, <c>cbrt(-x) ==
            -cbrt(x)</c>; that is, the cube root of a negative value is
            the negative of the cube root of that value's magnitude.
            Special cases:
            
            &lt;ul&gt;
            
            &lt;li&gt;If the argument is NaN, then the result is NaN.
            
            &lt;li&gt;If the argument is infinite, then the result is an infinity
            with the same sign as the argument.
            
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#cbrt(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.cbrt(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Ceil">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceil (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceil(double a);" />
      <MemberSignature Language="C#" Value="public static double Ceil (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceil(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Ceil(System.Double)" />
      <MemberSignature Language="F#" Value="static member Ceil : double -&gt; double" Usage="Java.Lang.StrictMath.Ceil a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ceil", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ceil", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value.</param>
        <summary>Returns the smallest (closest to negative infinity)
            <c>double</c> value that is greater than or equal to the
            argument and is equal to a mathematical integer.</summary>
        <returns>the smallest (closest to negative infinity)
                     floating-point value that is greater than or equal to
                     the argument and is equal to a mathematical integer.</returns>
        <remarks>
          <para>Returns the smallest (closest to negative infinity)
            <c>double</c> value that is greater than or equal to the
            argument and is equal to a mathematical integer. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
            mathematical integer, then the result is the same as the
            argument.  &lt;li&gt;If the argument is NaN or an infinity or
            positive zero or negative zero, then the result is the same as
            the argument.  &lt;li&gt;If the argument value is less than zero but
            greater than -1.0, then the result is negative zero.&lt;/ul&gt; Note
            that the value of <c>StrictMath.ceil(x)</c> is exactly the
            value of <c>-StrictMath.floor(-x)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#ceil(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.ceil(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (magnitude As Double, sign As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CopySign(double magnitude, double sign);" />
      <MemberSignature Language="C#" Value="public static double CopySign (double magnitude, double sign);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CopySign(float64 magnitude, float64 sign) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.CopySign(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member CopySign : double * double -&gt; double" Usage="Java.Lang.StrictMath.CopySign (magnitude, sign)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("copySign", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("copySign", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Double" />
        <Parameter Name="sign" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="magnitude">the parameter providing the magnitude of the result</param>
        <param name="sign">the parameter providing the sign of the result</param>
        <summary>Returns the first floating-point argument with the sign of the
            second floating-point argument.</summary>
        <returns>a value with the magnitude of <c>magnitude</c>
            and the sign of <c>sign</c>.</returns>
        <remarks>
          <para>Returns the first floating-point argument with the sign of the
            second floating-point argument.  For this method, a NaN
            <c>sign</c> argument is always treated as if it were
            positive.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#copySign(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.copySign(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (magnitude As Single, sign As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CopySign(float magnitude, float sign);" />
      <MemberSignature Language="C#" Value="public static float CopySign (float magnitude, float sign);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CopySign(float32 magnitude, float32 sign) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.CopySign(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="static member CopySign : single * single -&gt; single" Usage="Java.Lang.StrictMath.CopySign (magnitude, sign)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("copySign", "(FF)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("copySign", "(FF)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="magnitude" Type="System.Single" />
        <Parameter Name="sign" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="magnitude">the parameter providing the magnitude of the result</param>
        <param name="sign">the parameter providing the sign of the result</param>
        <summary>Returns the first floating-point argument with the sign of the
            second floating-point argument.</summary>
        <returns>a value with the magnitude of <c>magnitude</c>
            and the sign of <c>sign</c>.</returns>
        <remarks>
          <para>Returns the first floating-point argument with the sign of the
            second floating-point argument.  For this method, a NaN
            <c>sign</c> argument is always treated as if it were
            positive.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#copySign(float,%20float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.copySign(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double a);" />
      <MemberSignature Language="C#" Value="public static double Cos (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Cos(System.Double)" />
      <MemberSignature Language="F#" Value="static member Cos : double -&gt; double" Usage="Java.Lang.StrictMath.Cos a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cos", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cos", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">an angle, in radians.</param>
        <summary>Returns the trigonometric cosine of an angle.</summary>
        <returns>the cosine of the argument.</returns>
        <remarks>
          <para>Returns the trigonometric cosine of an angle. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
            result is NaN.
            &lt;li&gt;If the argument is zero, then the result is <c>1.0</c>.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#cos(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.cos(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double x);" />
      <MemberSignature Language="C#" Value="public static double Cosh (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Cosh(System.Double)" />
      <MemberSignature Language="F#" Value="static member Cosh : double -&gt; double" Usage="Java.Lang.StrictMath.Cosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cosh", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cosh", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The number whose hyperbolic cosine is to be returned.</param>
        <summary>Returns the hyperbolic cosine of a <c>double</c> value.</summary>
        <returns>The hyperbolic cosine of <c>x</c>.</returns>
        <remarks>
          <para>Returns the hyperbolic cosine of a <c>double</c> value.
            The hyperbolic cosine of <i>x</i> is defined to be
            (<i>e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;</i>)/2
            where <i>e</i> is Math#E Euler's number.</para>
          <para>Special cases:
            &lt;ul&gt;
            
            &lt;li&gt;If the argument is NaN, then the result is NaN.
            
            &lt;li&gt;If the argument is infinite, then the result is positive
            infinity.
            
            &lt;li&gt;If the argument is zero, then the result is <c>1.0</c>.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#cosh(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.cosh(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DecrementExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecrementExact (a As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DecrementExact(int a);" />
      <MemberSignature Language="C#" Value="public static int DecrementExact (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DecrementExact(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.DecrementExact(System.Int32)" />
      <MemberSignature Language="F#" Value="static member DecrementExact : int -&gt; int" Usage="Java.Lang.StrictMath.DecrementExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("decrementExact", "(I)I", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("decrementExact", "(I)I", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">the value to decrement</param>
        <summary>Returns the argument decremented by one,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the argument decremented by one,
            throwing an exception if the result overflows an <c>int</c>.
            The overflow only occurs for Integer#MIN_VALUE the minimum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#decrementExact(int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.decrementExact(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecrementExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecrementExact (a As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DecrementExact(long a);" />
      <MemberSignature Language="C#" Value="public static long DecrementExact (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DecrementExact(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.DecrementExact(System.Int64)" />
      <MemberSignature Language="F#" Value="static member DecrementExact : int64 -&gt; int64" Usage="Java.Lang.StrictMath.DecrementExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("decrementExact", "(J)J", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("decrementExact", "(J)J", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">the value to decrement</param>
        <summary>Returns the argument decremented by one,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the argument decremented by one,
            throwing an exception if the result overflows a <c>long</c>.
            The overflow only occurs for Long#MIN_VALUE the minimum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#decrementExact(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.decrementExact(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.7182818284590451" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.7182818284590451;" />
      <MemberSignature Language="C#" Value="public const double E = 2.7182818284590451;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.7182818284590451)" />
      <MemberSignature Language="DocId" Value="F:Java.Lang.StrictMath.E" />
      <MemberSignature Language="F#" Value="val mutable E : double" Usage="Java.Lang.StrictMath.E" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("E")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("E")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.7182818284590451</MemberValue>
      <Docs>
        <summary>The <c>double</c> value that is closer than any other to
            <i>e</i>, the base of the natural logarithms.</summary>
        <remarks>
          <para>The <c>double</c> value that is closer than any other to
            <i>e</i>, the base of the natural logarithms.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#E" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.E</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double a);" />
      <MemberSignature Language="C#" Value="public static double Exp (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Exp(System.Double)" />
      <MemberSignature Language="F#" Value="static member Exp : double -&gt; double" Usage="Java.Lang.StrictMath.Exp a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exp", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exp", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">the exponent to raise <i>e</i> to.</param>
        <summary>Returns Euler's number <i>e</i> raised to the power of a
            <c>double</c> value.</summary>
        <returns>the value <i>e</i>&lt;sup&gt;<c>a</c>&lt;/sup&gt;,
                     where <i>e</i> is the base of the natural logarithms.</returns>
        <remarks>
          <para>Returns Euler's number <i>e</i> raised to the power of a
            <c>double</c> value. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is NaN.
            &lt;li&gt;If the argument is positive infinity, then the result is
            positive infinity.
            &lt;li&gt;If the argument is negative infinity, then the result is
            positive zero.
            &lt;li&gt;If the argument is zero, then the result is <c>1.0</c>.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#exp(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.exp(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Expm1">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Expm1 (x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Expm1(double x);" />
      <MemberSignature Language="C#" Value="public static double Expm1 (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Expm1(float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Expm1(System.Double)" />
      <MemberSignature Language="F#" Value="static member Expm1 : double -&gt; double" Usage="Java.Lang.StrictMath.Expm1 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("expm1", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("expm1", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">the exponent to raise <i>e</i> to in the computation of
                         <i>e</i>&lt;sup&gt;<c>x</c>&lt;/sup&gt;&amp;nbsp;-1.</param>
        <summary>Returns <i>e</i>&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-1.</summary>
        <returns>the value <i>e</i>&lt;sup&gt;<c>x</c>&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1.</returns>
        <remarks>
          <para>Returns <i>e</i>&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-1.  Note that for values of
            <i>x</i> near 0, the exact sum of
            <c>expm1(x)</c>&amp;nbsp;+&amp;nbsp;1 is much closer to the true
            result of <i>e</i>&lt;sup&gt;x&lt;/sup&gt; than <c>exp(x)</c>.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt;If the argument is NaN, the result is NaN.
            
            &lt;li&gt;If the argument is positive infinity, then the result is
            positive infinity.
            
            &lt;li&gt;If the argument is negative infinity, then the result is
            -1.0.
            
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#expm1(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.expm1(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double a);" />
      <MemberSignature Language="C#" Value="public static double Floor (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Floor(System.Double)" />
      <MemberSignature Language="F#" Value="static member Floor : double -&gt; double" Usage="Java.Lang.StrictMath.Floor a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floor", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floor", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value.</param>
        <summary>Returns the largest (closest to positive infinity)
            <c>double</c> value that is less than or equal to the
            argument and is equal to a mathematical integer.</summary>
        <returns>the largest (closest to positive infinity)
                     floating-point value that less than or equal to the argument
                     and is equal to a mathematical integer.</returns>
        <remarks>
          <para>Returns the largest (closest to positive infinity)
            <c>double</c> value that is less than or equal to the
            argument and is equal to a mathematical integer. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
            mathematical integer, then the result is the same as the
            argument.  &lt;li&gt;If the argument is NaN or an infinity or
            positive zero or negative zero, then the result is the same as
            the argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floor(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floor(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FloorDiv">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorDiv (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FloorDiv(int x, int y);" />
      <MemberSignature Language="C#" Value="public static int FloorDiv (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FloorDiv(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorDiv(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FloorDiv : int * int -&gt; int" Usage="Java.Lang.StrictMath.FloorDiv (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorDiv", "(II)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorDiv", "(II)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the largest (closest to positive infinity)
            <c>int</c> value that is less than or equal to the algebraic quotient.</summary>
        <returns>the largest (closest to positive infinity)
            <c>int</c> value that is less than or equal to the algebraic quotient.</returns>
        <remarks>
          <para>Returns the largest (closest to positive infinity)
            <c>int</c> value that is less than or equal to the algebraic quotient.
            There is one special case, if the dividend is the
            Integer#MIN_VALUE Integer.MIN_VALUE and the divisor is <c>-1</c>,
            then integer overflow occurs and
            the result is equal to the <c>Integer.MIN_VALUE</c>.</para>
          <para>See <c>Math#floorDiv(int, int) Math.floorDiv</c> for examples and
            a comparison to the integer division <c>/</c> operator.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorDiv(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorDiv(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorDiv">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorDiv (x As Long, y As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FloorDiv(long x, int y);" />
      <MemberSignature Language="C#" Value="public static long FloorDiv (long x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FloorDiv(int64 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorDiv(System.Int64,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FloorDiv : int64 * int -&gt; int64" Usage="Java.Lang.StrictMath.FloorDiv (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorDiv", "(JI)J", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorDiv", "(JI)J", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the largest (closest to positive infinity)
            <c>long</c> value that is less than or equal to the algebraic quotient.</summary>
        <returns>the largest (closest to positive infinity)
            <c>int</c> value that is less than or equal to the algebraic quotient.</returns>
        <remarks>
          <para>Returns the largest (closest to positive infinity)
            <c>long</c> value that is less than or equal to the algebraic quotient.
            There is one special case, if the dividend is the
            Long#MIN_VALUE Long.MIN_VALUE and the divisor is <c>-1</c>,
            then integer overflow occurs and
            the result is equal to <c>Long.MIN_VALUE</c>.</para>
          <para>See <c>Math#floorDiv(int, int) Math.floorDiv</c> for examples and
            a comparison to the integer division <c>/</c> operator.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorDiv(long,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorDiv(long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorDiv">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorDiv (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FloorDiv(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long FloorDiv (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FloorDiv(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorDiv(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member FloorDiv : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.FloorDiv (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorDiv", "(JJ)J", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorDiv", "(JJ)J", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the largest (closest to positive infinity)
            <c>long</c> value that is less than or equal to the algebraic quotient.</summary>
        <returns>the largest (closest to positive infinity)
            <c>long</c> value that is less than or equal to the algebraic quotient.</returns>
        <remarks>
          <para>Returns the largest (closest to positive infinity)
            <c>long</c> value that is less than or equal to the algebraic quotient.
            There is one special case, if the dividend is the
            Long#MIN_VALUE Long.MIN_VALUE and the divisor is <c>-1</c>,
            then integer overflow occurs and
            the result is equal to the <c>Long.MIN_VALUE</c>.</para>
          <para>See <c>Math#floorDiv(int, int) Math.floorDiv</c> for examples and
            a comparison to the integer division <c>/</c> operator.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorDiv(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorDiv(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorMod">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorMod (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FloorMod(int x, int y);" />
      <MemberSignature Language="C#" Value="public static int FloorMod (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FloorMod(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorMod(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FloorMod : int * int -&gt; int" Usage="Java.Lang.StrictMath.FloorMod (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorMod", "(II)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorMod", "(II)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the floor modulus of the <c>int</c> arguments.</summary>
        <returns>the floor modulus <c>x - (floorDiv(x, y) * y)</c></returns>
        <remarks>
          <para>Returns the floor modulus of the <c>int</c> arguments.</para>
          <para>The floor modulus is <c>x - (floorDiv(x, y) * y)</c>,
            has the same sign as the divisor <c>y</c>, and
            is in the range of <c>-abs(y) &lt; r &lt; +abs(y)</c>.</para>
          <para>The relationship between <c>floorDiv</c> and <c>floorMod</c> is such that:
            &lt;ul&gt;
              &lt;li&gt;<c>floorDiv(x, y) * y + floorMod(x, y) == x</c>&lt;/ul&gt;</para>
          <para>See <c>Math#floorMod(int, int) Math.floorMod</c> for examples and
            a comparison to the <c>%</c> operator.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorMod(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorMod(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorMod">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorMod (x As Long, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FloorMod(long x, int y);" />
      <MemberSignature Language="C#" Value="public static int FloorMod (long x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FloorMod(int64 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorMod(System.Int64,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FloorMod : int64 * int -&gt; int" Usage="Java.Lang.StrictMath.FloorMod (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorMod", "(JI)I", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorMod", "(JI)I", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the floor modulus of the <c>long</c> and <c>int</c> arguments.</summary>
        <returns>the floor modulus <c>x - (floorDiv(x, y) * y)</c></returns>
        <remarks>
          <para>Returns the floor modulus of the <c>long</c> and <c>int</c> arguments.</para>
          <para>The floor modulus is <c>x - (floorDiv(x, y) * y)</c>,
            has the same sign as the divisor <c>y</c>, and
            is in the range of <c>-abs(y) &lt; r &lt; +abs(y)</c>.</para>
          <para>The relationship between <c>floorDiv</c> and <c>floorMod</c> is such that:
            &lt;ul&gt;
              &lt;li&gt;<c>floorDiv(x, y) * y + floorMod(x, y) == x</c>&lt;/ul&gt;</para>
          <para>See <c>Math#floorMod(int, int) Math.floorMod</c> for examples and
            a comparison to the <c>%</c> operator.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorMod(long,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorMod(long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloorMod">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloorMod (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FloorMod(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long FloorMod (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FloorMod(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.FloorMod(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member FloorMod : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.FloorMod (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("floorMod", "(JJ)J", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("floorMod", "(JJ)J", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the dividend</param>
        <param name="y">the divisor</param>
        <summary>Returns the floor modulus of the <c>long</c> arguments.</summary>
        <returns>the floor modulus <c>x - (floorDiv(x, y) * y)</c></returns>
        <remarks>
          <para>Returns the floor modulus of the <c>long</c> arguments.</para>
          <para>The floor modulus is <c>x - (floorDiv(x, y) * y)</c>,
            has the same sign as the divisor <c>y</c>, and
            is in the range of <c>-abs(y) &lt; r &lt; +abs(y)</c>.</para>
          <para>The relationship between <c>floorDiv</c> and <c>floorMod</c> is such that:
            &lt;ul&gt;
              &lt;li&gt;<c>floorDiv(x, y) * y + floorMod(x, y) == x</c>&lt;/ul&gt;</para>
          <para>See <c>Math#floorMod(int, int) Math.floorMod</c> for examples and
            a comparison to the <c>%</c> operator.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#floorMod(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.floorMod(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fma">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Fma (a As Double, b As Double, c As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fma(double a, double b, double c);" />
      <MemberSignature Language="C#" Value="public static double Fma (double a, double b, double c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fma(float64 a, float64 b, float64 c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Fma(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Fma : double * double * double -&gt; double" Usage="Java.Lang.StrictMath.Fma (a, b, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("fma", "(DDD)D", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("fma", "(DDD)D", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
        <Parameter Name="c" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value</param>
        <param name="b">a value</param>
        <param name="c">a value</param>
        <summary>Returns the fused multiply add of the three arguments; that is,
            returns the exact product of the first two arguments summed
            with the third argument and then rounded once to the nearest
            <c>double</c>.</summary>
        <returns>(<i>a</i>&amp;nbsp;&amp;times;&amp;nbsp;<i>b</i>&amp;nbsp;+&amp;nbsp;<i>c</i>)
            computed, as if with unlimited range and precision, and rounded
            once to the nearest <c>double</c> value</returns>
        <remarks>
          <para>Returns the fused multiply add of the three arguments; that is,
            returns the exact product of the first two arguments summed
            with the third argument and then rounded once to the nearest
            <c>double</c>.
            
            The rounding is done using the java.math.RoundingMode#HALF_EVEN round to nearest even
            rounding mode.
            
            In contrast, if <c>a * b + c</c> is evaluated as a regular
            floating-point expression, two rounding errors are involved,
            the first for the multiply operation, the second for the
            addition operation.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If any argument is NaN, the result is NaN.
            
            &lt;li&gt; If one of the first two arguments is infinite and the
            other is zero, the result is NaN.
            
            &lt;li&gt; If the exact product of the first two arguments is infinite
            (in other words, at least one of the arguments is infinite and
            the other is neither zero nor NaN) and the third argument is an
            infinity of the opposite sign, the result is NaN.
            
            &lt;/ul&gt;</para>
          <para>Note that <c>fusedMac(a, 1.0, c)</c> returns the same
            result as (<c>a + c</c>).  However,
            <c>fusedMac(a, b, +0.0)</c> does &lt;em&gt;not&lt;/em&gt; always return the
            same result as (<c>a * b</c>) since
            <c>fusedMac(-0.0, +0.0, +0.0)</c> is <c>+0.0</c> while
            (<c>-0.0 * +0.0</c>) is <c>-0.0</c>; <c>fusedMac(a, b, -0.0)</c> is
            equivalent to (<c>a * b</c>) however.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#fma(double,%20double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.fma(double, double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fma">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Fma (a As Single, b As Single, c As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fma(float a, float b, float c);" />
      <MemberSignature Language="C#" Value="public static float Fma (float a, float b, float c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fma(float32 a, float32 b, float32 c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Fma(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="static member Fma : single * single * single -&gt; single" Usage="Java.Lang.StrictMath.Fma (a, b, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("fma", "(FFF)F", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("fma", "(FFF)F", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
        <Parameter Name="c" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="a">a value</param>
        <param name="b">a value</param>
        <param name="c">a value</param>
        <summary>Returns the fused multiply add of the three arguments; that is,
            returns the exact product of the first two arguments summed
            with the third argument and then rounded once to the nearest
            <c>float</c>.</summary>
        <returns>(<i>a</i>&amp;nbsp;&amp;times;&amp;nbsp;<i>b</i>&amp;nbsp;+&amp;nbsp;<i>c</i>)
            computed, as if with unlimited range and precision, and rounded
            once to the nearest <c>float</c> value</returns>
        <remarks>
          <para>Returns the fused multiply add of the three arguments; that is,
            returns the exact product of the first two arguments summed
            with the third argument and then rounded once to the nearest
            <c>float</c>.
            
            The rounding is done using the java.math.RoundingMode#HALF_EVEN round to nearest even
            rounding mode.
            
            In contrast, if <c>a * b + c</c> is evaluated as a regular
            floating-point expression, two rounding errors are involved,
            the first for the multiply operation, the second for the
            addition operation.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If any argument is NaN, the result is NaN.
            
            &lt;li&gt; If one of the first two arguments is infinite and the
            other is zero, the result is NaN.
            
            &lt;li&gt; If the exact product of the first two arguments is infinite
            (in other words, at least one of the arguments is infinite and
            the other is neither zero nor NaN) and the third argument is an
            infinity of the opposite sign, the result is NaN.
            
            &lt;/ul&gt;</para>
          <para>Note that <c>fma(a, 1.0f, c)</c> returns the same
            result as (<c>a + c</c>).  However,
            <c>fma(a, b, +0.0f)</c> does &lt;em&gt;not&lt;/em&gt; always return the
            same result as (<c>a * b</c>) since
            <c>fma(-0.0f, +0.0f, +0.0f)</c> is <c>+0.0f</c> while
            (<c>-0.0f * +0.0f</c>) is <c>-0.0f</c>; <c>fma(a, b, -0.0f)</c> is
            equivalent to (<c>a * b</c>) however.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#fma(float,%20float,%20float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.fma(float, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExponent">
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExponent (d As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetExponent(double d);" />
      <MemberSignature Language="C#" Value="public static int GetExponent (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetExponent(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.GetExponent(System.Double)" />
      <MemberSignature Language="F#" Value="static member GetExponent : double -&gt; int" Usage="Java.Lang.StrictMath.GetExponent d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getExponent", "(D)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getExponent", "(D)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">a <c>double</c> value</param>
        <summary>Returns the unbiased exponent used in the representation of a
            <c>double</c>.</summary>
        <returns>the unbiased exponent of the argument</returns>
        <remarks>
          <para>Returns the unbiased exponent used in the representation of a
            <c>double</c>.  Special cases:
            
            &lt;ul&gt;
            &lt;li&gt;If the argument is NaN or infinite, then the result is
            <c>Double#MAX_EXPONENT</c> + 1.
            &lt;li&gt;If the argument is zero or subnormal, then the result is
            <c>Double#MIN_EXPONENT</c> -1.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#getExponent(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.getExponent(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetExponent">
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExponent (f As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetExponent(float f);" />
      <MemberSignature Language="C#" Value="public static int GetExponent (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetExponent(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.GetExponent(System.Single)" />
      <MemberSignature Language="F#" Value="static member GetExponent : single -&gt; int" Usage="Java.Lang.StrictMath.GetExponent f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getExponent", "(F)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getExponent", "(F)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">a <c>float</c> value</param>
        <summary>Returns the unbiased exponent used in the representation of a
            <c>float</c>.</summary>
        <returns>the unbiased exponent of the argument</returns>
        <remarks>
          <para>Returns the unbiased exponent used in the representation of a
            <c>float</c>.  Special cases:
            
            &lt;ul&gt;
            &lt;li&gt;If the argument is NaN or infinite, then the result is
            <c>Float#MAX_EXPONENT</c> + 1.
            &lt;li&gt;If the argument is zero or subnormal, then the result is
            <c>Float#MIN_EXPONENT</c> -1.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#getExponent(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.getExponent(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Hypot">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Hypot (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Hypot(double x, double y);" />
      <MemberSignature Language="C#" Value="public static double Hypot (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Hypot(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Hypot(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Hypot : double * double -&gt; double" Usage="Java.Lang.StrictMath.Hypot (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hypot", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hypot", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">a value</param>
        <param name="y">a value</param>
        <summary>Returns sqrt(<i>x</i>&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+<i>y</i>&lt;sup&gt;2&lt;/sup&gt;)
            without intermediate overflow or underflow.</summary>
        <returns>sqrt(<i>x</i>&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+<i>y</i>&lt;sup&gt;2&lt;/sup&gt;)
            without intermediate overflow or underflow</returns>
        <remarks>
          <para>Returns sqrt(<i>x</i>&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+<i>y</i>&lt;sup&gt;2&lt;/sup&gt;)
            without intermediate overflow or underflow.</para>
          <para>Special cases:
            &lt;ul&gt;
            
            &lt;li&gt; If either argument is infinite, then the result
            is positive infinity.
            
            &lt;li&gt; If either argument is NaN and neither argument is infinite,
            then the result is NaN.
            
            &lt;li&gt; If both arguments are zero, the result is positive zero.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#hypot(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.hypot(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IEEEremainder">
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEEremainder (f1 As Double, f2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEEremainder(double f1, double f2);" />
      <MemberSignature Language="C#" Value="public static double IEEEremainder (double f1, double f2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEEremainder(float64 f1, float64 f2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.IEEEremainder(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member IEEEremainder : double * double -&gt; double" Usage="Java.Lang.StrictMath.IEEEremainder (f1, f2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("IEEEremainder", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("IEEEremainder", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f1" Type="System.Double" />
        <Parameter Name="f2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="f1">the dividend.</param>
        <param name="f2">the divisor.</param>
        <summary>Computes the remainder operation on two arguments as prescribed
            by the IEEE 754 standard.</summary>
        <returns>the remainder when <c>f1</c> is divided by
                     <c>f2</c>.</returns>
        <remarks>
          <para>Computes the remainder operation on two arguments as prescribed
            by the IEEE 754 standard.
            The remainder value is mathematically equal to
            <c>f1&amp;nbsp;-&amp;nbsp;f2</c>&amp;nbsp;&amp;times;&amp;nbsp;<i>n</i>,
            where <i>n</i> is the mathematical integer closest to the exact
            mathematical value of the quotient <c>f1/f2</c>, and if two
            mathematical integers are equally close to <c>f1/f2</c>,
            then <i>n</i> is the integer that is even. If the remainder is
            zero, its sign is the same as the sign of the first argument.
            Special cases:
            &lt;ul&gt;&lt;li&gt;If either argument is NaN, or the first argument is infinite,
            or the second argument is positive zero or negative zero, then the
            result is NaN.
            &lt;li&gt;If the first argument is finite and the second argument is
            infinite, then the result is the same as the first argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#IEEEremainder(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.IEEEremainder(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IncrementExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncrementExact (a As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int IncrementExact(int a);" />
      <MemberSignature Language="C#" Value="public static int IncrementExact (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IncrementExact(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.IncrementExact(System.Int32)" />
      <MemberSignature Language="F#" Value="static member IncrementExact : int -&gt; int" Usage="Java.Lang.StrictMath.IncrementExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("incrementExact", "(I)I", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("incrementExact", "(I)I", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">the value to increment</param>
        <summary>Returns the argument incremented by one,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the argument incremented by one,
            throwing an exception if the result overflows an <c>int</c>.
            The overflow only occurs for Integer#MAX_VALUE the maximum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#incrementExact(int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.incrementExact(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncrementExact (a As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long IncrementExact(long a);" />
      <MemberSignature Language="C#" Value="public static long IncrementExact (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 IncrementExact(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.IncrementExact(System.Int64)" />
      <MemberSignature Language="F#" Value="static member IncrementExact : int64 -&gt; int64" Usage="Java.Lang.StrictMath.IncrementExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("incrementExact", "(J)J", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("incrementExact", "(J)J", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">the value to increment</param>
        <summary>Returns the argument incremented by one,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the argument incremented by one,
            throwing an exception if the result overflows a <c>long</c>.
            The overflow only occurs for Long#MAX_VALUE the maximum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#incrementExact(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.incrementExact(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.StrictMath.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Lang.StrictMath.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a);" />
      <MemberSignature Language="C#" Value="public static double Log (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Log(System.Double)" />
      <MemberSignature Language="F#" Value="static member Log : double -&gt; double" Usage="Java.Lang.StrictMath.Log a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("log", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("log", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value</param>
        <summary>Returns the natural logarithm (base <i>e</i>) of a <c>double</c>
            value.</summary>
        <returns>the value ln&amp;nbsp;<c>a</c>, the natural logarithm of
                     <c>a</c>.</returns>
        <remarks>
          <para>Returns the natural logarithm (base <i>e</i>) of a <c>double</c>
            value. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
            is NaN.
            &lt;li&gt;If the argument is positive infinity, then the result is
            positive infinity.
            &lt;li&gt;If the argument is positive zero or negative zero, then the
            result is negative infinity.
            &lt;li&gt;If the argument is <c>1.0</c>, then the result is positive
            zero.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#log(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.log(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double a);" />
      <MemberSignature Language="C#" Value="public static double Log10 (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Log10(System.Double)" />
      <MemberSignature Language="F#" Value="static member Log10 : double -&gt; double" Usage="Java.Lang.StrictMath.Log10 a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("log10", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("log10", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value</param>
        <summary>Returns the base 10 logarithm of a <c>double</c> value.</summary>
        <returns>the base 10 logarithm of  <c>a</c>.</returns>
        <remarks>
          <para>Returns the base 10 logarithm of a <c>double</c> value.
            Special cases:
            
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
            is NaN.
            &lt;li&gt;If the argument is positive infinity, then the result is
            positive infinity.
            &lt;li&gt;If the argument is positive zero or negative zero, then the
            result is negative infinity.
            &lt;li&gt;If the argument is equal to 10&lt;sup&gt;<i>n</i>&lt;/sup&gt; for
            integer <i>n</i>, then the result is <i>n</i>. In particular,
            if the argument is <c>1.0</c> (10&lt;sup&gt;0&lt;/sup&gt;), then the
            result is positive zero.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#log10(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.log10(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Log1p">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log1p (x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log1p(double x);" />
      <MemberSignature Language="C#" Value="public static double Log1p (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log1p(float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Log1p(System.Double)" />
      <MemberSignature Language="F#" Value="static member Log1p : double -&gt; double" Usage="Java.Lang.StrictMath.Log1p x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("log1p", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("log1p", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">a value</param>
        <summary>Returns the natural logarithm of the sum of the argument and 1.</summary>
        <returns>the value ln(<c>x</c>&amp;nbsp;+&amp;nbsp;1), the natural
            log of <c>x</c>&amp;nbsp;+&amp;nbsp;1</returns>
        <remarks>
          <para>Returns the natural logarithm of the sum of the argument and 1.
            Note that for small values <c>x</c>, the result of
            <c>log1p(x)</c> is much closer to the true result of ln(1
            + <c>x</c>) than the floating-point evaluation of
            <c>log(1.0+x)</c>.</para>
          <para>Special cases:
            &lt;ul&gt;
            
            &lt;li&gt;If the argument is NaN or less than -1, then the result is
            NaN.
            
            &lt;li&gt;If the argument is positive infinity, then the result is
            positive infinity.
            
            &lt;li&gt;If the argument is negative one, then the result is
            negative infinity.
            
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#log1p(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.log1p(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (a As Double, b As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double a, double b);" />
      <MemberSignature Language="C#" Value="public static double Max (double a, double b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 a, float64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Max(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Max : double * double -&gt; double" Usage="Java.Lang.StrictMath.Max (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("max", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("max", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the greater of two <c>double</c> values.</summary>
        <returns>the larger of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the greater of two <c>double</c> values.  That
            is, the result is the argument closer to positive infinity. If
            the arguments have the same value, the result is that same
            value. If either value is NaN, then the result is NaN.  Unlike
            the numerical comparison operators, this method considers
            negative zero to be strictly smaller than positive zero. If one
            argument is positive zero and the other negative zero, the
            result is positive zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#max(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.max(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (a As Integer, b As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int a, int b);" />
      <MemberSignature Language="C#" Value="public static int Max (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Max : int * int -&gt; int" Usage="Java.Lang.StrictMath.Max (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("max", "(II)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("max", "(II)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the greater of two <c>int</c> values.</summary>
        <returns>the larger of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the greater of two <c>int</c> values. That is, the
            result is the argument closer to the value of
            <c>Integer#MAX_VALUE</c>. If the arguments have the same value,
            the result is that same value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#max(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.max(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (a As Long, b As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long a, long b);" />
      <MemberSignature Language="C#" Value="public static long Max (long a, long b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 a, int64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member Max : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.Max (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("max", "(JJ)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("max", "(JJ)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the greater of two <c>long</c> values.</summary>
        <returns>the larger of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the greater of two <c>long</c> values. That is, the
            result is the argument closer to the value of
            <c>Long#MAX_VALUE</c>. If the arguments have the same value,
            the result is that same value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#max(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.max(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (a As Single, b As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float a, float b);" />
      <MemberSignature Language="C#" Value="public static float Max (float a, float b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 a, float32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Max(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="static member Max : single * single -&gt; single" Usage="Java.Lang.StrictMath.Max (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("max", "(FF)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("max", "(FF)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the greater of two <c>float</c> values.</summary>
        <returns>the larger of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the greater of two <c>float</c> values.  That is,
            the result is the argument closer to positive infinity. If the
            arguments have the same value, the result is that same
            value. If either value is NaN, then the result is NaN.  Unlike
            the numerical comparison operators, this method considers
            negative zero to be strictly smaller than positive zero. If one
            argument is positive zero and the other negative zero, the
            result is positive zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#max(float,%20float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.max(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (a As Double, b As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double a, double b);" />
      <MemberSignature Language="C#" Value="public static double Min (double a, double b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 a, float64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Min(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Min : double * double -&gt; double" Usage="Java.Lang.StrictMath.Min (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("min", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("min", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the smaller of two <c>double</c> values.</summary>
        <returns>the smaller of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the smaller of two <c>double</c> values.  That
            is, the result is the value closer to negative infinity. If the
            arguments have the same value, the result is that same
            value. If either value is NaN, then the result is NaN.  Unlike
            the numerical comparison operators, this method considers
            negative zero to be strictly smaller than positive zero. If one
            argument is positive zero and the other is negative zero, the
            result is negative zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#min(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.min(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (a As Integer, b As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int a, int b);" />
      <MemberSignature Language="C#" Value="public static int Min (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Min : int * int -&gt; int" Usage="Java.Lang.StrictMath.Min (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("min", "(II)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("min", "(II)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the smaller of two <c>int</c> values.</summary>
        <returns>the smaller of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the smaller of two <c>int</c> values. That is,
            the result the argument closer to the value of
            <c>Integer#MIN_VALUE</c>.  If the arguments have the same
            value, the result is that same value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#min(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.min(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (a As Long, b As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long a, long b);" />
      <MemberSignature Language="C#" Value="public static long Min (long a, long b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 a, int64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member Min : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.Min (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("min", "(JJ)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("min", "(JJ)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the smaller of two <c>long</c> values.</summary>
        <returns>the smaller of <c>a</c> and <c>b</c>.</returns>
        <remarks>
          <para>Returns the smaller of two <c>long</c> values. That is,
            the result is the argument closer to the value of
            <c>Long#MIN_VALUE</c>. If the arguments have the same
            value, the result is that same value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#min(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.min(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (a As Single, b As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float a, float b);" />
      <MemberSignature Language="C#" Value="public static float Min (float a, float b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 a, float32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Min(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="static member Min : single * single -&gt; single" Usage="Java.Lang.StrictMath.Min (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("min", "(FF)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("min", "(FF)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="a">an argument.</param>
        <param name="b">another argument.</param>
        <summary>Returns the smaller of two <c>float</c> values.</summary>
        <returns>the smaller of <c>a</c> and <c>b.</c></returns>
        <remarks>
          <para>Returns the smaller of two <c>float</c> values.  That is,
            the result is the value closer to negative infinity. If the
            arguments have the same value, the result is that same
            value. If either value is NaN, then the result is NaN.  Unlike
            the numerical comparison operators, this method considers
            negative zero to be strictly smaller than positive zero.  If
            one argument is positive zero and the other is negative zero,
            the result is negative zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#min(float,%20float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.min(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MultiplyExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyExact (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int MultiplyExact(int x, int y);" />
      <MemberSignature Language="C#" Value="public static int MultiplyExact (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MultiplyExact(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.MultiplyExact(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member MultiplyExact : int * int -&gt; int" Usage="Java.Lang.StrictMath.MultiplyExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("multiplyExact", "(II)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("multiplyExact", "(II)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the product of the arguments,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the product of the arguments,
            throwing an exception if the result overflows an <c>int</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#multiplyExact(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.multiplyExact(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyExact (x As Long, y As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long MultiplyExact(long x, int y);" />
      <MemberSignature Language="C#" Value="public static long MultiplyExact (long x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 MultiplyExact(int64 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.MultiplyExact(System.Int64,System.Int32)" />
      <MemberSignature Language="F#" Value="static member MultiplyExact : int64 * int -&gt; int64" Usage="Java.Lang.StrictMath.MultiplyExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("multiplyExact", "(JI)J", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("multiplyExact", "(JI)J", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the product of the arguments, throwing an exception if the result
            overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the product of the arguments, throwing an exception if the result
            overflows a <c>long</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#multiplyExact(long,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.multiplyExact(long, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyExact (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long MultiplyExact(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long MultiplyExact (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 MultiplyExact(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.MultiplyExact(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member MultiplyExact : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.MultiplyExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("multiplyExact", "(JJ)J", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("multiplyExact", "(JJ)J", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the product of the arguments,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the product of the arguments,
            throwing an exception if the result overflows a <c>long</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#multiplyExact(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.multiplyExact(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyFull">
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyFull (x As Integer, y As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long MultiplyFull(int x, int y);" />
      <MemberSignature Language="C#" Value="public static long MultiplyFull (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 MultiplyFull(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.MultiplyFull(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member MultiplyFull : int * int -&gt; int64" Usage="Java.Lang.StrictMath.MultiplyFull (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("multiplyFull", "(II)J", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("multiplyFull", "(II)J", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns the exact mathematical product of the arguments.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the exact mathematical product of the arguments.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#multiplyFull(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.multiplyFull(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyHigh">
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyHigh (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long MultiplyHigh(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long MultiplyHigh (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 MultiplyHigh(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.MultiplyHigh(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member MultiplyHigh : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.MultiplyHigh (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("multiplyHigh", "(JJ)J", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("multiplyHigh", "(JJ)J", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value</param>
        <summary>Returns as a <c>long</c> the most significant 64 bits of the 128-bit
            product of two 64-bit factors.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns as a <c>long</c> the most significant 64 bits of the 128-bit
            product of two 64-bit factors.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#multiplyHigh(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.multiplyHigh(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NegateExact (a As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int NegateExact(int a);" />
      <MemberSignature Language="C#" Value="public static int NegateExact (int a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NegateExact(int32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NegateExact(System.Int32)" />
      <MemberSignature Language="F#" Value="static member NegateExact : int -&gt; int" Usage="Java.Lang.StrictMath.NegateExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("negateExact", "(I)I", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("negateExact", "(I)I", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">the value to negate</param>
        <summary>Returns the negation of the argument,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the negation of the argument,
            throwing an exception if the result overflows an <c>int</c>.
            The overflow only occurs for Integer#MIN_VALUE the minimum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#negateExact(int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.negateExact(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NegateExact (a As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long NegateExact(long a);" />
      <MemberSignature Language="C#" Value="public static long NegateExact (long a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 NegateExact(int64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NegateExact(System.Int64)" />
      <MemberSignature Language="F#" Value="static member NegateExact : int64 -&gt; int64" Usage="Java.Lang.StrictMath.NegateExact a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("negateExact", "(J)J", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("negateExact", "(J)J", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="a">the value to negate</param>
        <summary>Returns the negation of the argument,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the negation of the argument,
            throwing an exception if the result overflows a <c>long</c>.
            The overflow only occurs for Long#MIN_VALUE the minimum value.</para>
          <para>Added in 14.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#negateExact(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.negateExact(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextAfter">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextAfter (start As Double, direction As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NextAfter(double start, double direction);" />
      <MemberSignature Language="C#" Value="public static double NextAfter (double start, double direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NextAfter(float64 start, float64 direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextAfter(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member NextAfter : double * double -&gt; double" Usage="Java.Lang.StrictMath.NextAfter (start, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextAfter", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextAfter", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Double" />
        <Parameter Name="direction" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="start">starting floating-point value</param>
        <param name="direction">value indicating which of
            <c>start</c>'s neighbors or <c>start</c> should
            be returned</param>
        <summary>Returns the floating-point number adjacent to the first
            argument in the direction of the second argument.</summary>
        <returns>The floating-point number adjacent to <c>start</c> in the
            direction of <c>direction</c>.</returns>
        <remarks>
          <para>Returns the floating-point number adjacent to the first
            argument in the direction of the second argument.  If both
            arguments compare as equal the second argument is returned.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If either argument is a NaN, then NaN is returned.
            
            &lt;li&gt; If both arguments are signed zeros, <c>direction</c>
            is returned unchanged (as implied by the requirement of
            returning the second argument if the arguments compare as
            equal).
            
            &lt;li&gt; If <c>start</c> is
            &amp;plusmn;<c>Double#MIN_VALUE</c> and <c>direction</c>
            has a value such that the result should have a smaller
            magnitude, then a zero with the same sign as <c>start</c>
            is returned.
            
            &lt;li&gt; If <c>start</c> is infinite and
            <c>direction</c> has a value such that the result should
            have a smaller magnitude, <c>Double#MAX_VALUE</c> with the
            same sign as <c>start</c> is returned.
            
            &lt;li&gt; If <c>start</c> is equal to &amp;plusmn;
            <c>Double#MAX_VALUE</c> and <c>direction</c> has a
            value such that the result should have a larger magnitude, an
            infinity with same sign as <c>start</c> is returned.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextAfter(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextAfter(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="NextAfter">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextAfter (start As Single, direction As Double) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float NextAfter(float start, double direction);" />
      <MemberSignature Language="C#" Value="public static float NextAfter (float start, double direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 NextAfter(float32 start, float64 direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextAfter(System.Single,System.Double)" />
      <MemberSignature Language="F#" Value="static member NextAfter : single * double -&gt; single" Usage="Java.Lang.StrictMath.NextAfter (start, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextAfter", "(FD)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextAfter", "(FD)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Single" />
        <Parameter Name="direction" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="start">starting floating-point value</param>
        <param name="direction">value indicating which of
            <c>start</c>'s neighbors or <c>start</c> should
            be returned</param>
        <summary>Returns the floating-point number adjacent to the first
            argument in the direction of the second argument.</summary>
        <returns>The floating-point number adjacent to <c>start</c> in the
            direction of <c>direction</c>.</returns>
        <remarks>
          <para>Returns the floating-point number adjacent to the first
            argument in the direction of the second argument.  If both
            arguments compare as equal a value equivalent to the second argument
            is returned.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If either argument is a NaN, then NaN is returned.
            
            &lt;li&gt; If both arguments are signed zeros, a value equivalent
            to <c>direction</c> is returned.
            
            &lt;li&gt; If <c>start</c> is
            &amp;plusmn;<c>Float#MIN_VALUE</c> and <c>direction</c>
            has a value such that the result should have a smaller
            magnitude, then a zero with the same sign as <c>start</c>
            is returned.
            
            &lt;li&gt; If <c>start</c> is infinite and
            <c>direction</c> has a value such that the result should
            have a smaller magnitude, <c>Float#MAX_VALUE</c> with the
            same sign as <c>start</c> is returned.
            
            &lt;li&gt; If <c>start</c> is equal to &amp;plusmn;
            <c>Float#MAX_VALUE</c> and <c>direction</c> has a
            value such that the result should have a larger magnitude, an
            infinity with same sign as <c>start</c> is returned.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextAfter(float,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextAfter(float, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="NextDown">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextDown (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NextDown(double d);" />
      <MemberSignature Language="C#" Value="public static double NextDown (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NextDown(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextDown(System.Double)" />
      <MemberSignature Language="F#" Value="static member NextDown : double -&gt; double" Usage="Java.Lang.StrictMath.NextDown d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextDown", "(D)D", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextDown", "(D)D", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">starting floating-point value</param>
        <summary>Returns the floating-point value adjacent to <c>d</c> in
            the direction of negative infinity.</summary>
        <returns>The adjacent floating-point value closer to negative
            infinity.</returns>
        <remarks>
          <para>Returns the floating-point value adjacent to <c>d</c> in
            the direction of negative infinity.  This method is
            semantically equivalent to <c>nextAfter(d,
            Double.NEGATIVE_INFINITY)</c>; however, a
            <c>nextDown</c> implementation may run faster than its
            equivalent <c>nextAfter</c> call.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, the result is NaN.
            
            &lt;li&gt; If the argument is negative infinity, the result is
            negative infinity.
            
            &lt;li&gt; If the argument is zero, the result is
            <c>-Double.MIN_VALUE</c>&lt;/ul&gt;</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextDown(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextDown(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextDown">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextDown (f As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float NextDown(float f);" />
      <MemberSignature Language="C#" Value="public static float NextDown (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 NextDown(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextDown(System.Single)" />
      <MemberSignature Language="F#" Value="static member NextDown : single -&gt; single" Usage="Java.Lang.StrictMath.NextDown f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextDown", "(F)F", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextDown", "(F)F", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">starting floating-point value</param>
        <summary>Returns the floating-point value adjacent to <c>f</c> in
            the direction of negative infinity.</summary>
        <returns>The adjacent floating-point value closer to negative
            infinity.</returns>
        <remarks>
          <para>Returns the floating-point value adjacent to <c>f</c> in
            the direction of negative infinity.  This method is
            semantically equivalent to <c>nextAfter(f,
            Float.NEGATIVE_INFINITY)</c>; however, a
            <c>nextDown</c> implementation may run faster than its
            equivalent <c>nextAfter</c> call.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, the result is NaN.
            
            &lt;li&gt; If the argument is negative infinity, the result is
            negative infinity.
            
            &lt;li&gt; If the argument is zero, the result is
            <c>-Float.MIN_VALUE</c>&lt;/ul&gt;</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextDown(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextDown(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextUp">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextUp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NextUp(double d);" />
      <MemberSignature Language="C#" Value="public static double NextUp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NextUp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextUp(System.Double)" />
      <MemberSignature Language="F#" Value="static member NextUp : double -&gt; double" Usage="Java.Lang.StrictMath.NextUp d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextUp", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextUp", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">starting floating-point value</param>
        <summary>Returns the floating-point value adjacent to <c>d</c> in
            the direction of positive infinity.</summary>
        <returns>The adjacent floating-point value closer to positive
            infinity.</returns>
        <remarks>
          <para>Returns the floating-point value adjacent to <c>d</c> in
            the direction of positive infinity.  This method is
            semantically equivalent to <c>nextAfter(d,
            Double.POSITIVE_INFINITY)</c>; however, a <c>nextUp</c>
            implementation may run faster than its equivalent
            <c>nextAfter</c> call.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, the result is NaN.
            
            &lt;li&gt; If the argument is positive infinity, the result is
            positive infinity.
            
            &lt;li&gt; If the argument is zero, the result is
            <c>Double#MIN_VALUE</c>&lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextUp(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextUp(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="NextUp">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextUp (f As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float NextUp(float f);" />
      <MemberSignature Language="C#" Value="public static float NextUp (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 NextUp(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.NextUp(System.Single)" />
      <MemberSignature Language="F#" Value="static member NextUp : single -&gt; single" Usage="Java.Lang.StrictMath.NextUp f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextUp", "(F)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextUp", "(F)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">starting floating-point value</param>
        <summary>Returns the floating-point value adjacent to <c>f</c> in
            the direction of positive infinity.</summary>
        <returns>The adjacent floating-point value closer to positive
            infinity.</returns>
        <remarks>
          <para>Returns the floating-point value adjacent to <c>f</c> in
            the direction of positive infinity.  This method is
            semantically equivalent to <c>nextAfter(f,
            Float.POSITIVE_INFINITY)</c>; however, a <c>nextUp</c>
            implementation may run faster than its equivalent
            <c>nextAfter</c> call.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, the result is NaN.
            
            &lt;li&gt; If the argument is positive infinity, the result is
            positive infinity.
            
            &lt;li&gt; If the argument is zero, the result is
            <c>Float#MIN_VALUE</c>&lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#nextUp(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.nextUp(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="VB.NET" Value="Public Const Pi As Double  = 3.1415926535897931" />
      <MemberSignature Language="C++ CLI" Value="public: double Pi = 3.1415926535897931;" />
      <MemberSignature Language="C#" Value="public const double Pi = 3.1415926535897931;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 Pi = (3.1415926535897931)" />
      <MemberSignature Language="DocId" Value="F:Java.Lang.StrictMath.Pi" />
      <MemberSignature Language="F#" Value="val mutable Pi : double" Usage="Java.Lang.StrictMath.Pi" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PI")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PI")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.1415926535897931</MemberValue>
      <Docs>
        <summary>The <c>double</c> value that is closer than any other to
            <i>pi</i>, the ratio of the circumference of a circle to its
            diameter.</summary>
        <remarks>
          <para>The <c>double</c> value that is closer than any other to
            <i>pi</i>, the ratio of the circumference of a circle to its
            diameter.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#PI" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.PI</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (a As Double, b As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double a, double b);" />
      <MemberSignature Language="C#" Value="public static double Pow (double a, double b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 a, float64 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Pow(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Pow : double * double -&gt; double" Usage="Java.Lang.StrictMath.Pow (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pow", "(DD)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pow", "(DD)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="b" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">base.</param>
        <param name="b">the exponent.</param>
        <summary>Returns the value of the first argument raised to the power of the
            second argument.</summary>
        <returns>the value <c>a</c>&lt;sup&gt;<c>b</c>&lt;/sup&gt;.</returns>
        <remarks>
          <para>Returns the value of the first argument raised to the power of the
            second argument. Special cases:
            
            &lt;ul&gt;&lt;li&gt;If the second argument is positive or negative zero, then the
            result is 1.0.
            &lt;li&gt;If the second argument is 1.0, then the result is the same as the
            first argument.
            &lt;li&gt;If the second argument is NaN, then the result is NaN.
            &lt;li&gt;If the first argument is NaN and the second argument is nonzero,
            then the result is NaN.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the absolute value of the first argument is greater than 1
            and the second argument is positive infinity, or
            &lt;li&gt;the absolute value of the first argument is less than 1 and
            the second argument is negative infinity,
            &lt;/ul&gt;
            then the result is positive infinity.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the absolute value of the first argument is greater than 1 and
            the second argument is negative infinity, or
            &lt;li&gt;the absolute value of the
            first argument is less than 1 and the second argument is positive
            infinity,
            &lt;/ul&gt;
            then the result is positive zero.
            
            &lt;li&gt;If the absolute value of the first argument equals 1 and the
            second argument is infinite, then the result is NaN.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is positive zero and the second argument
            is greater than zero, or
            &lt;li&gt;the first argument is positive infinity and the second
            argument is less than zero,
            &lt;/ul&gt;
            then the result is positive zero.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is positive zero and the second argument
            is less than zero, or
            &lt;li&gt;the first argument is positive infinity and the second
            argument is greater than zero,
            &lt;/ul&gt;
            then the result is positive infinity.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is negative zero and the second argument
            is greater than zero but not a finite odd integer, or
            &lt;li&gt;the first argument is negative infinity and the second
            argument is less than zero but not a finite odd integer,
            &lt;/ul&gt;
            then the result is positive zero.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is negative zero and the second argument
            is a positive finite odd integer, or
            &lt;li&gt;the first argument is negative infinity and the second
            argument is a negative finite odd integer,
            &lt;/ul&gt;
            then the result is negative zero.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is negative zero and the second argument
            is less than zero but not a finite odd integer, or
            &lt;li&gt;the first argument is negative infinity and the second
            argument is greater than zero but not a finite odd integer,
            &lt;/ul&gt;
            then the result is positive infinity.
            
            &lt;li&gt;If
            &lt;ul&gt;
            &lt;li&gt;the first argument is negative zero and the second argument
            is a negative finite odd integer, or
            &lt;li&gt;the first argument is negative infinity and the second
            argument is a positive finite odd integer,
            &lt;/ul&gt;
            then the result is negative infinity.
            
            &lt;li&gt;If the first argument is finite and less than zero
            &lt;ul&gt;
            &lt;li&gt; if the second argument is a finite even integer, the
            result is equal to the result of raising the absolute value of
            the first argument to the power of the second argument
            
            &lt;li&gt;if the second argument is a finite odd integer, the result
            is equal to the negative of the result of raising the absolute
            value of the first argument to the power of the second
            argument
            
            &lt;li&gt;if the second argument is finite and not an integer, then
            the result is NaN.
            &lt;/ul&gt;
            
            &lt;li&gt;If both arguments are integers, then the result is exactly equal
            to the mathematical result of raising the first argument to the power
            of the second argument if that result can in fact be represented
            exactly as a <c>double</c> value.&lt;/ul&gt;</para>
          <para>(In the foregoing descriptions, a floating-point value is
            considered to be an integer if and only if it is finite and a
            fixed point of the method <c>#ceil ceil</c> or,
            equivalently, a fixed point of the method <c>#floor
            floor</c>. A value is a fixed point of a one-argument
            method if and only if the result of applying the method to the
            value is equal to the value.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#pow(double,%20double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.pow(double, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Random () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Random();" />
      <MemberSignature Language="C#" Value="public static double Random ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Random() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Random" />
      <MemberSignature Language="F#" Value="static member Random : unit -&gt; double" Usage="Java.Lang.StrictMath.Random " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("random", "()D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("random", "()D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>double</c> value with a positive sign, greater
            than or equal to <c>0.0</c> and less than <c>1.0</c>.</summary>
        <returns>a pseudorandom <c>double</c> greater than or equal
            to <c>0.0</c> and less than <c>1.0</c>.</returns>
        <remarks>
          <para>Returns a <c>double</c> value with a positive sign, greater
            than or equal to <c>0.0</c> and less than <c>1.0</c>.
            Returned values are chosen pseudorandomly with (approximately)
            uniform distribution from that range.</para>
          <para>When this method is first called, it creates a single new
            pseudorandom-number generator, exactly as if by the expression
            
            &lt;blockquote&gt;<c>new java.util.Random()</c>&lt;/blockquote&gt;
            
            This new pseudorandom-number generator is used thereafter for
            all calls to this method and is used nowhere else.</para>
          <para>This method is properly synchronized to allow correct use by
            more than one thread. However, if many threads need to generate
            pseudorandom numbers at a great rate, it may reduce contention
            for each thread to have its own pseudorandom-number generator.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#random()" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.random()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rint">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rint (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Rint(double a);" />
      <MemberSignature Language="C#" Value="public static double Rint (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Rint(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Rint(System.Double)" />
      <MemberSignature Language="F#" Value="static member Rint : double -&gt; double" Usage="Java.Lang.StrictMath.Rint a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("rint", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("rint", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value.</param>
        <summary>Returns the <c>double</c> value that is closest in value
            to the argument and is equal to a mathematical integer.</summary>
        <returns>the closest floating-point value to <c>a</c> that is
                     equal to a mathematical integer.</returns>
        <remarks>
          <para>Returns the <c>double</c> value that is closest in value
            to the argument and is equal to a mathematical integer. If two
            <c>double</c> values that are mathematical integers are
            equally close to the value of the argument, the result is the
            integer value that is even. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a mathematical
            integer, then the result is the same as the argument.
            &lt;li&gt;If the argument is NaN or an infinity or positive zero or negative
            zero, then the result is the same as the argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#rint(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.rint(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Round(double a);" />
      <MemberSignature Language="C#" Value="public static long Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Round(System.Double)" />
      <MemberSignature Language="F#" Value="static member Round : double -&gt; int64" Usage="Java.Lang.StrictMath.Round a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("round", "(D)J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("round", "(D)J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a floating-point value to be rounded to a
                     <c>long</c>.</param>
        <summary>Returns the closest <c>long</c> to the argument, with ties
            rounding to positive infinity.</summary>
        <returns>the value of the argument rounded to the nearest
                     <c>long</c> value.</returns>
        <remarks>
          <para>Returns the closest <c>long</c> to the argument, with ties
            rounding to positive infinity.</para>
          <para>Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
            &lt;li&gt;If the argument is negative infinity or any value less than or
            equal to the value of <c>Long.MIN_VALUE</c>, the result is
            equal to the value of <c>Long.MIN_VALUE</c>.
            &lt;li&gt;If the argument is positive infinity or any value greater than or
            equal to the value of <c>Long.MAX_VALUE</c>, the result is
            equal to the value of <c>Long.MAX_VALUE</c>.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#round(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.round(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Round(float a);" />
      <MemberSignature Language="C#" Value="public static int Round (float a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Round(float32 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Round(System.Single)" />
      <MemberSignature Language="F#" Value="static member Round : single -&gt; int" Usage="Java.Lang.StrictMath.Round a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("round", "(F)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("round", "(F)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="a">a floating-point value to be rounded to an integer.</param>
        <summary>Returns the closest <c>int</c> to the argument, with ties
            rounding to positive infinity.</summary>
        <returns>the value of the argument rounded to the nearest
                     <c>int</c> value.</returns>
        <remarks>
          <para>Returns the closest <c>int</c> to the argument, with ties
            rounding to positive infinity.</para>
          <para>Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
            &lt;li&gt;If the argument is negative infinity or any value less than or
            equal to the value of <c>Integer.MIN_VALUE</c>, the result is
            equal to the value of <c>Integer.MIN_VALUE</c>.
            &lt;li&gt;If the argument is positive infinity or any value greater than or
            equal to the value of <c>Integer.MAX_VALUE</c>, the result is
            equal to the value of <c>Integer.MAX_VALUE</c>.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#round(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.round(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Scalb">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Scalb (d As Double, scaleFactor As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Scalb(double d, int scaleFactor);" />
      <MemberSignature Language="C#" Value="public static double Scalb (double d, int scaleFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Scalb(float64 d, int32 scaleFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Scalb(System.Double,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Scalb : double * int -&gt; double" Usage="Java.Lang.StrictMath.Scalb (d, scaleFactor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scalb", "(DI)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scalb", "(DI)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
        <Parameter Name="scaleFactor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d">number to be scaled by a power of two.</param>
        <param name="scaleFactor">power of 2 used to scale <c>d</c></param>
        <summary>Returns <c>d</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;
            rounded as if performed by a single correctly rounded
            floating-point multiply.</summary>
        <returns>
          <c>d</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;</returns>
        <remarks>
          <para>Returns <c>d</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;
            rounded as if performed by a single correctly rounded
            floating-point multiply.  If the exponent of the result is
            between <c>Double#MIN_EXPONENT</c> and <c>Double#MAX_EXPONENT</c>, the answer is calculated exactly.  If the
            exponent of the result would be larger than <c>Double.MAX_EXPONENT</c>, an infinity is returned.  Note that if
            the result is subnormal, precision may be lost; that is, when
            <c>scalb(x, n)</c> is subnormal, <c>scalb(scalb(x, n),
            -n)</c> may not equal <i>x</i>.  When the result is non-NaN, the
            result has the same sign as <c>d</c>.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If the first argument is NaN, NaN is returned.
            &lt;li&gt; If the first argument is infinite, then an infinity of the
            same sign is returned.
            &lt;li&gt; If the first argument is zero, then a zero of the same
            sign is returned.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#scalb(double,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.scalb(double, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Scalb">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Scalb (f As Single, scaleFactor As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Scalb(float f, int scaleFactor);" />
      <MemberSignature Language="C#" Value="public static float Scalb (float f, int scaleFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Scalb(float32 f, int32 scaleFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Scalb(System.Single,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Scalb : single * int -&gt; single" Usage="Java.Lang.StrictMath.Scalb (f, scaleFactor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scalb", "(FI)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scalb", "(FI)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
        <Parameter Name="scaleFactor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="f">number to be scaled by a power of two.</param>
        <param name="scaleFactor">power of 2 used to scale <c>f</c></param>
        <summary>Returns <c>f</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;
            rounded as if performed by a single correctly rounded
            floating-point multiply.</summary>
        <returns>
          <c>f</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;</returns>
        <remarks>
          <para>Returns <c>f</c> &amp;times; 2&lt;sup&gt;<c>scaleFactor</c>&lt;/sup&gt;
            rounded as if performed by a single correctly rounded
            floating-point multiply.  If the exponent of the result is
            between <c>Float#MIN_EXPONENT</c> and <c>Float#MAX_EXPONENT</c>, the answer is calculated exactly.  If the
            exponent of the result would be larger than <c>Float.MAX_EXPONENT</c>, an infinity is returned.  Note that if the
            result is subnormal, precision may be lost; that is, when
            <c>scalb(x, n)</c> is subnormal, <c>scalb(scalb(x, n),
            -n)</c> may not equal <i>x</i>.  When the result is non-NaN, the
            result has the same sign as <c>f</c>.</para>
          <para>Special cases:
            &lt;ul&gt;
            &lt;li&gt; If the first argument is NaN, NaN is returned.
            &lt;li&gt; If the first argument is infinite, then an infinity of the
            same sign is returned.
            &lt;li&gt; If the first argument is zero, then a zero of the same
            sign is returned.
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#scalb(float,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.scalb(float, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Signum">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Signum (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Signum(double d);" />
      <MemberSignature Language="C#" Value="public static double Signum (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Signum(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Signum(System.Double)" />
      <MemberSignature Language="F#" Value="static member Signum : double -&gt; double" Usage="Java.Lang.StrictMath.Signum d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signum", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("signum", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">the floating-point value whose signum is to be returned</param>
        <summary>Returns the signum function of the argument; zero if the argument
            is zero, 1.</summary>
        <returns>the signum function of the argument</returns>
        <remarks>
          <para>Returns the signum function of the argument; zero if the argument
            is zero, 1.0 if the argument is greater than zero, -1.0 if the
            argument is less than zero.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, then the result is NaN.
            &lt;li&gt; If the argument is positive zero or negative zero, then the
                 result is the same as the argument.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#signum(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.signum(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Signum">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Signum (f As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Signum(float f);" />
      <MemberSignature Language="C#" Value="public static float Signum (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Signum(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Signum(System.Single)" />
      <MemberSignature Language="F#" Value="static member Signum : single -&gt; single" Usage="Java.Lang.StrictMath.Signum f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("signum", "(F)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("signum", "(F)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">the floating-point value whose signum is to be returned</param>
        <summary>Returns the signum function of the argument; zero if the argument
            is zero, 1.</summary>
        <returns>the signum function of the argument</returns>
        <remarks>
          <para>Returns the signum function of the argument; zero if the argument
            is zero, 1.0f if the argument is greater than zero, -1.0f if the
            argument is less than zero.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, then the result is NaN.
            &lt;li&gt; If the argument is positive zero or negative zero, then the
                 result is the same as the argument.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#signum(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.signum(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Sin(System.Double)" />
      <MemberSignature Language="F#" Value="static member Sin : double -&gt; double" Usage="Java.Lang.StrictMath.Sin a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sin", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sin", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">an angle, in radians.</param>
        <summary>Returns the trigonometric sine of an angle.</summary>
        <returns>the sine of the argument.</returns>
        <remarks>
          <para>Returns the trigonometric sine of an angle. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
            result is NaN.
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#sin(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.sin(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double x);" />
      <MemberSignature Language="C#" Value="public static double Sinh (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Sinh(System.Double)" />
      <MemberSignature Language="F#" Value="static member Sinh : double -&gt; double" Usage="Java.Lang.StrictMath.Sinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sinh", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sinh", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The number whose hyperbolic sine is to be returned.</param>
        <summary>Returns the hyperbolic sine of a <c>double</c> value.</summary>
        <returns>The hyperbolic sine of <c>x</c>.</returns>
        <remarks>
          <para>Returns the hyperbolic sine of a <c>double</c> value.
            The hyperbolic sine of <i>x</i> is defined to be
            (<i>e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;</i>)/2
            where <i>e</i> is Math#E Euler's number.</para>
          <para>Special cases:
            &lt;ul&gt;
            
            &lt;li&gt;If the argument is NaN, then the result is NaN.
            
            &lt;li&gt;If the argument is infinite, then the result is an infinity
            with the same sign as the argument.
            
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#sinh(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.sinh(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double a);" />
      <MemberSignature Language="C#" Value="public static double Sqrt (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Sqrt(System.Double)" />
      <MemberSignature Language="F#" Value="static member Sqrt : double -&gt; double" Usage="Java.Lang.StrictMath.Sqrt a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sqrt", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sqrt", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">a value.</param>
        <summary>Returns the correctly rounded positive square root of a
            <c>double</c> value.</summary>
        <returns>the positive square root of <c>a</c>.</returns>
        <remarks>
          <para>Returns the correctly rounded positive square root of a
            <c>double</c> value.
            Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
            is NaN.
            &lt;li&gt;If the argument is positive infinity, then the result is positive
            infinity.
            &lt;li&gt;If the argument is positive zero or negative zero, then the
            result is the same as the argument.&lt;/ul&gt;
            Otherwise, the result is the <c>double</c> value closest to
            the true mathematical square root of the argument value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#sqrt(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.sqrt(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SubtractExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractExact (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int SubtractExact(int x, int y);" />
      <MemberSignature Language="C#" Value="public static int SubtractExact (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SubtractExact(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.SubtractExact(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member SubtractExact : int * int -&gt; int" Usage="Java.Lang.StrictMath.SubtractExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("subtractExact", "(II)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("subtractExact", "(II)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value to subtract from the first</param>
        <summary>Returns the difference of the arguments,
            throwing an exception if the result overflows an <c>int</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the difference of the arguments,
            throwing an exception if the result overflows an <c>int</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#subtractExact(int,%20int)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.subtractExact(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractExact (x As Long, y As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long SubtractExact(long x, long y);" />
      <MemberSignature Language="C#" Value="public static long SubtractExact (long x, long y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 SubtractExact(int64 x, int64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.SubtractExact(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member SubtractExact : int64 * int64 -&gt; int64" Usage="Java.Lang.StrictMath.SubtractExact (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("subtractExact", "(JJ)J", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("subtractExact", "(JJ)J", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int64" />
        <Parameter Name="y" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="x">the first value</param>
        <param name="y">the second value to subtract from the first</param>
        <summary>Returns the difference of the arguments,
            throwing an exception if the result overflows a <c>long</c>.</summary>
        <returns>the result</returns>
        <remarks>
          <para>Returns the difference of the arguments,
            throwing an exception if the result overflows a <c>long</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#subtractExact(long,%20long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.subtractExact(long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Tan(System.Double)" />
      <MemberSignature Language="F#" Value="static member Tan : double -&gt; double" Usage="Java.Lang.StrictMath.Tan a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tan", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tan", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">an angle, in radians.</param>
        <summary>Returns the trigonometric tangent of an angle.</summary>
        <returns>the tangent of the argument.</returns>
        <remarks>
          <para>Returns the trigonometric tangent of an angle. Special cases:
            &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the result
            is NaN.
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.&lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#tan(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.tan(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double x);" />
      <MemberSignature Language="C#" Value="public static double Tanh (double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Tanh(System.Double)" />
      <MemberSignature Language="F#" Value="static member Tanh : double -&gt; double" Usage="Java.Lang.StrictMath.Tanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tanh", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tanh", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">The number whose hyperbolic tangent is to be returned.</param>
        <summary>Returns the hyperbolic tangent of a <c>double</c> value.</summary>
        <returns>The hyperbolic tangent of <c>x</c>.</returns>
        <remarks>
          <para>Returns the hyperbolic tangent of a <c>double</c> value.
            The hyperbolic tangent of <i>x</i> is defined to be
            (<i>e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;</i>)/(<i>e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;</i>),
            in other words, Math#sinh
            sinh(&lt;i&gt;x&lt;/i&gt;)/Math#cosh cosh(&lt;i&gt;x&lt;/i&gt;).  Note
            that the absolute value of the exact tanh is always less than
            1.</para>
          <para>Special cases:
            &lt;ul&gt;
            
            &lt;li&gt;If the argument is NaN, then the result is NaN.
            
            &lt;li&gt;If the argument is zero, then the result is a zero with the
            same sign as the argument.
            
            &lt;li&gt;If the argument is positive infinity, then the result is
            <c>+1.0</c>.
            
            &lt;li&gt;If the argument is negative infinity, then the result is
            <c>-1.0</c>.
            
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#tanh(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.tanh(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.StrictMath.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Lang.StrictMath.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Lang.StrictMath.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Lang.StrictMath.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDegrees">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDegrees (angrad As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDegrees(double angrad);" />
      <MemberSignature Language="C#" Value="public static double ToDegrees (double angrad);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDegrees(float64 angrad) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.ToDegrees(System.Double)" />
      <MemberSignature Language="F#" Value="static member ToDegrees : double -&gt; double" Usage="Java.Lang.StrictMath.ToDegrees angrad" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toDegrees", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toDegrees", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angrad" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angrad">an angle, in radians</param>
        <summary>Converts an angle measured in radians to an approximately
            equivalent angle measured in degrees.</summary>
        <returns>the measurement of the angle <c>angrad</c>
                     in degrees.</returns>
        <remarks>
          <para>Converts an angle measured in radians to an approximately
            equivalent angle measured in degrees.  The conversion from
            radians to degrees is generally inexact; users should
            <i>not</i> expect <c>cos(toRadians(90.0))</c> to exactly
            equal <c>0.0</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#toDegrees(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.toDegrees(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToIntExact">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIntExact (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToIntExact(long value);" />
      <MemberSignature Language="C#" Value="public static int ToIntExact (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToIntExact(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.ToIntExact(System.Int64)" />
      <MemberSignature Language="F#" Value="static member ToIntExact : int64 -&gt; int" Usage="Java.Lang.StrictMath.ToIntExact value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toIntExact", "(J)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toIntExact", "(J)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">the long value</param>
        <summary>Returns the value of the <c>long</c> argument, throwing an exception
            if the value overflows an <c>int</c>.</summary>
        <returns>the argument as an int</returns>
        <remarks>
          <para>Returns the value of the <c>long</c> argument, throwing an exception
            if the value overflows an <c>int</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#toIntExact(long)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.toIntExact(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRadians">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToRadians (angdeg As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToRadians(double angdeg);" />
      <MemberSignature Language="C#" Value="public static double ToRadians (double angdeg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToRadians(float64 angdeg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.ToRadians(System.Double)" />
      <MemberSignature Language="F#" Value="static member ToRadians : double -&gt; double" Usage="Java.Lang.StrictMath.ToRadians angdeg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toRadians", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toRadians", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angdeg" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angdeg">an angle, in degrees</param>
        <summary>Converts an angle measured in degrees to an approximately
            equivalent angle measured in radians.</summary>
        <returns>the measurement of the angle <c>angdeg</c>
                     in radians.</returns>
        <remarks>
          <para>Converts an angle measured in degrees to an approximately
            equivalent angle measured in radians.  The conversion from
            degrees to radians is generally inexact.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#toRadians(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.toRadians(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Ulp">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ulp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ulp(double d);" />
      <MemberSignature Language="C#" Value="public static double Ulp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ulp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Ulp(System.Double)" />
      <MemberSignature Language="F#" Value="static member Ulp : double -&gt; double" Usage="Java.Lang.StrictMath.Ulp d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ulp", "(D)D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ulp", "(D)D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">the floating-point value whose ulp is to be returned</param>
        <summary>Returns the size of an ulp of the argument.</summary>
        <returns>the size of an ulp of the argument</returns>
        <remarks>
          <para>Returns the size of an ulp of the argument.  An ulp, unit in
            the last place, of a <c>double</c> value is the positive
            distance between this floating-point value and the <c>double</c> value next larger in magnitude.  Note that for non-NaN
            <i>x</i>, <c>ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)</c>.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, then the result is NaN.
            &lt;li&gt; If the argument is positive or negative infinity, then the
            result is positive infinity.
            &lt;li&gt; If the argument is positive or negative zero, then the result is
            <c>Double.MIN_VALUE</c>.
            &lt;li&gt; If the argument is &amp;plusmn;<c>Double.MAX_VALUE</c>, then
            the result is equal to 2&lt;sup&gt;971&lt;/sup&gt;.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#ulp(double)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.ulp(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Ulp">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ulp (f As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Ulp(float f);" />
      <MemberSignature Language="C#" Value="public static float Ulp (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Ulp(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Lang.StrictMath.Ulp(System.Single)" />
      <MemberSignature Language="F#" Value="static member Ulp : single -&gt; single" Usage="Java.Lang.StrictMath.Ulp f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ulp", "(F)F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ulp", "(F)F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">the floating-point value whose ulp is to be returned</param>
        <summary>Returns the size of an ulp of the argument.</summary>
        <returns>the size of an ulp of the argument</returns>
        <remarks>
          <para>Returns the size of an ulp of the argument.  An ulp, unit in
            the last place, of a <c>float</c> value is the positive
            distance between this floating-point value and the <c>float</c> value next larger in magnitude.  Note that for non-NaN
            <i>x</i>, <c>ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)</c>.</para>
          <para>Special Cases:
            &lt;ul&gt;
            &lt;li&gt; If the argument is NaN, then the result is NaN.
            &lt;li&gt; If the argument is positive or negative infinity, then the
            result is positive infinity.
            &lt;li&gt; If the argument is positive or negative zero, then the result is
            <c>Float.MIN_VALUE</c>.
            &lt;li&gt; If the argument is &amp;plusmn;<c>Float.MAX_VALUE</c>, then
            the result is equal to 2&lt;sup&gt;104&lt;/sup&gt;.
            &lt;/ul&gt;</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/lang/StrictMath#ulp(float)" title="Reference documentation">Java documentation for <code>java.lang.StrictMath.ulp(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
