<Type Name="ObjectOutputStream" FullName="Java.IO.ObjectOutputStream">
  <TypeSignature Language="C#" Value="public class ObjectOutputStream : Java.IO.OutputStream, IDisposable, Java.Interop.IJavaPeerable, Java.IO.IObjectOutput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectOutputStream extends Java.IO.OutputStream implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.IDataOutput, class Java.IO.IObjectOutput, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.IO.ObjectOutputStream" />
  <TypeSignature Language="F#" Value="type ObjectOutputStream = class&#xA;    inherit OutputStream&#xA;    interface IObjectOutput&#xA;    interface IDataOutput&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.IO.OutputStream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.IDataOutput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.IObjectOutput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/io/ObjectOutputStream", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/io/ObjectOutputStream", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An ObjectOutputStream writes primitive data types and graphs of Java objects
            to an OutputStream.</summary>
    <remarks>
      <para>An ObjectOutputStream writes primitive data types and graphs of Java objects
            to an OutputStream.  The objects can be read (reconstituted) using an
            ObjectInputStream.  Persistent storage of objects can be accomplished by
            using a file for the stream.  If the stream is a network socket stream, the
            objects can be reconstituted on another host or in another process.</para>
      <para>Only objects that support the java.io.Serializable interface can be
            written to streams.  The class of each serializable object is encoded
            including the class name and signature of the class, the values of the
            object's fields and arrays, and the closure of any other objects referenced
            from the initial objects.</para>
      <para>The method writeObject is used to write an object to the stream.  Any
            object, including Strings and arrays, is written with writeObject. Multiple
            objects or primitives can be written to the stream.  The objects must be
            read back from the corresponding ObjectInputstream with the same types and
            in the same order as they were written.</para>
      <para>Primitive data types can also be written to the stream using the
            appropriate methods from DataOutput. Strings can also be written using the
            writeUTF method.</para>
      <para>The default serialization mechanism for an object writes the class of the
            object, the class signature, and the values of all non-transient and
            non-static fields.  References to other objects (except in transient or
            static fields) cause those objects to be written also. Multiple references
            to a single object are encoded using a reference sharing mechanism so that
            graphs of objects can be restored to the same shape as when the original was
            written.</para>
      <para>For example to write an object that can be read by the example in
            ObjectInputStream:
            &lt;br&gt;</para>
      <code lang="text/java">FileOutputStream fos = new FileOutputStream("t.tmp");
                 ObjectOutputStream oos = new ObjectOutputStream(fos);
            
                 oos.writeInt(12345);
                 oos.writeObject("Today");
                 oos.writeObject(new Date());
            
                 oos.close();
            </code>
      <para>Classes that require special handling during the serialization and
            deserialization process must implement special methods with these exact
            signatures:
            &lt;br&gt;</para>
      <code lang="text/java">private void readObject(java.io.ObjectInputStream stream)
                throws IOException, ClassNotFoundException;
            private void writeObject(java.io.ObjectOutputStream stream)
                throws IOException
            private void readObjectNoData()
                throws ObjectStreamException;
            </code>
      <para>The writeObject method is responsible for writing the state of the object
            for its particular class so that the corresponding readObject method can
            restore it.  The method does not need to concern itself with the state
            belonging to the object's superclasses or subclasses.  State is saved by
            writing the individual fields to the ObjectOutputStream using the
            writeObject method or by using the methods for primitive data types
            supported by DataOutput.</para>
      <para>Serialization does not write out the fields of any object that does not
            implement the java.io.Serializable interface.  Subclasses of Objects that
            are not serializable can be serializable. In this case the non-serializable
            class must have a no-arg constructor to allow its fields to be initialized.
            In this case it is the responsibility of the subclass to save and restore
            the state of the non-serializable class. It is frequently the case that the
            fields of that class are accessible (public, package, or protected) or that
            there are get and set methods that can be used to restore the state.</para>
      <para>Serialization of an object can be prevented by implementing writeObject
            and readObject methods that throw the NotSerializableException.  The
            exception will be caught by the ObjectOutputStream and abort the
            serialization process.</para>
      <para>Implementing the Externalizable interface allows the object to assume
            complete control over the contents and format of the object's serialized
            form.  The methods of the Externalizable interface, writeExternal and
            readExternal, are called to save and restore the objects state.  When
            implemented by a class they can write and read their own state using all of
            the methods of ObjectOutput and ObjectInput.  It is the responsibility of
            the objects to handle any versioning that occurs.</para>
      <para>Enum constants are serialized differently than ordinary serializable or
            externalizable objects.  The serialized form of an enum constant consists
            solely of its name; field values of the constant are not transmitted.  To
            serialize an enum constant, ObjectOutputStream writes the string returned by
            the constant's name method.  Like other serializable or externalizable
            objects, enum constants can function as the targets of back references
            appearing subsequently in the serialization stream.  The process by which
            enum constants are serialized cannot be customized; any class-specific
            writeObject and writeReplace methods defined by enum types are ignored
            during serialization.  Similarly, any serialPersistentFields or
            serialVersionUID field declarations are also ignored--all enum types have a
            fixed serialVersionUID of 0L.</para>
      <para>Primitive data, excluding serializable fields and externalizable data, is
            written to the ObjectOutputStream in block-data records. A block data record
            is composed of a header and data. The block data header consists of a marker
            and the number of bytes to follow the header.  Consecutive primitive data
            writes are merged into one block-data record.  The blocking factor used for
            a block-data record will be 1024 bytes.  Each block-data record will be
            filled up to 1024 bytes, or be written whenever there is a termination of
            block-data mode.  Calls to the ObjectOutputStream methods writeObject,
            defaultWriteObject and writeFields initially terminate any existing
            block-data record.</para>
      <para>Added in JDK1.1.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/io/ObjectOutputStream" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectOutputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Provide a way for subclasses that are completely reimplementing
            ObjectOutputStream to not have to allocate private data just used by
            this implementation of ObjectOutputStream.</summary>
        <remarks>
          <para>Provide a way for subclasses that are completely reimplementing
            ObjectOutputStream to not have to allocate private data just used by
            this implementation of ObjectOutputStream.</para>
          <para>If there is a security manager installed, this method first calls the
            security manager's <c>checkPermission</c> method with a
            <c>SerializablePermission("enableSubclassImplementation")</c>
            permission to ensure it's ok to enable subclassing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#ObjectOutputStream()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.ObjectOutputStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs when creating this stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectOutputStream (System.IO.Stream? out);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream out) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="new Java.IO.ObjectOutputStream : System.IO.Stream -&gt; Java.IO.ObjectOutputStream" Usage="new Java.IO.ObjectOutputStream out" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/io/OutputStream;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/io/OutputStream;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="out">output stream to write to</param>
        <summary>Creates an ObjectOutputStream that writes to the specified OutputStream.</summary>
        <remarks>
          <para>Creates an ObjectOutputStream that writes to the specified OutputStream.
            This constructor writes the serialization stream header to the
            underlying stream; callers may wish to flush the stream immediately to
            ensure that constructors for receiving ObjectInputStreams will not block
            when reading the header.</para>
          <para>If a security manager is installed, this constructor will check for
            the "enableSubclassImplementation" SerializablePermission when invoked
            directly or indirectly by the constructor of a subclass which overrides
            the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared
            methods.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing the object stream
             header
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectOutputStream (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.IO.ObjectOutputStream : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.IO.ObjectOutputStream" Usage="new Java.IO.ObjectOutputStream (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotateClass">
      <MemberSignature Language="C#" Value="protected virtual void AnnotateClass (Java.Lang.Class? cl);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AnnotateClass(class Java.Lang.Class cl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.AnnotateClass(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member AnnotateClass : Java.Lang.Class -&gt; unit&#xA;override this.AnnotateClass : Java.Lang.Class -&gt; unit" Usage="objectOutputStream.AnnotateClass cl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("annotateClass", "(Ljava/lang/Class;)V", "GetAnnotateClass_Ljava_lang_Class_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("annotateClass", "(Ljava/lang/Class;)V", "GetAnnotateClass_Ljava_lang_Class_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="cl">the class to annotate custom data for</param>
        <summary>Subclasses may implement this method to allow class data to be stored in
            the stream.</summary>
        <remarks>
          <para>Subclasses may implement this method to allow class data to be stored in
            the stream. By default this method does nothing.  The corresponding
            method in ObjectInputStream is resolveClass.  This method is called
            exactly once for each unique class in the stream.  The class name and
            signature will have already been written to the stream.  This method may
            make free use of the ObjectOutputStream to save any representation of
            the class it deems suitable (for example, the bytes of the class file).
            The resolveClass method in the corresponding subclass of
            ObjectInputStream must read and use any data or objects written by
            annotateClass.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#annotateClass(java.lang.Class%3C?%3E)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.annotateClass(java.lang.Class&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotateProxyClass">
      <MemberSignature Language="C#" Value="protected virtual void AnnotateProxyClass (Java.Lang.Class? cl);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AnnotateProxyClass(class Java.Lang.Class cl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.AnnotateProxyClass(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member AnnotateProxyClass : Java.Lang.Class -&gt; unit&#xA;override this.AnnotateProxyClass : Java.Lang.Class -&gt; unit" Usage="objectOutputStream.AnnotateProxyClass cl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("annotateProxyClass", "(Ljava/lang/Class;)V", "GetAnnotateProxyClass_Ljava_lang_Class_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("annotateProxyClass", "(Ljava/lang/Class;)V", "GetAnnotateProxyClass_Ljava_lang_Class_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="cl">the proxy class to annotate custom data for</param>
        <summary>Subclasses may implement this method to store custom data in the stream
            along with descriptors for dynamic proxy classes.</summary>
        <remarks>
          <para>Subclasses may implement this method to store custom data in the stream
            along with descriptors for dynamic proxy classes.</para>
          <para>This method is called exactly once for each unique proxy class
            descriptor in the stream.  The default implementation of this method in
            <c>ObjectOutputStream</c> does nothing.</para>
          <para>The corresponding method in <c>ObjectInputStream</c> is
            <c>resolveProxyClass</c>.  For a given subclass of
            <c>ObjectOutputStream</c> that overrides this method, the
            <c>resolveProxyClass</c> method in the corresponding subclass of
            <c>ObjectInputStream</c> must read any data or objects written by
            <c>annotateProxyClass</c>.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#annotateProxyClass(java.lang.Class%3C?%3E)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.annotateProxyClass(java.lang.Class&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultWriteObject">
      <MemberSignature Language="C#" Value="public virtual void DefaultWriteObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefaultWriteObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.DefaultWriteObject" />
      <MemberSignature Language="F#" Value="abstract member DefaultWriteObject : unit -&gt; unit&#xA;override this.DefaultWriteObject : unit -&gt; unit" Usage="objectOutputStream.DefaultWriteObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("defaultWriteObject", "()V", "GetDefaultWriteObjectHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("defaultWriteObject", "()V", "GetDefaultWriteObjectHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Write the non-static and non-transient fields of the current class to
            this stream.</summary>
        <remarks>
          <para>Write the non-static and non-transient fields of the current class to
            this stream.  This may only be called from the writeObject method of the
            class being serialized. It will throw the NotActiveException if it is
            called otherwise.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#defaultWriteObject()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.defaultWriteObject()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.</exception>
        <exception cref="T:Java.IO.NotActiveException">if this method is not called from <c>writeObject()</c>.</exception>
        <altmember cref="M:Java.IO.ObjectInputStream.DefaultReadObject" />
      </Docs>
    </Member>
    <Member MemberName="Drain">
      <MemberSignature Language="C#" Value="protected virtual void Drain ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Drain() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.Drain" />
      <MemberSignature Language="F#" Value="abstract member Drain : unit -&gt; unit&#xA;override this.Drain : unit -&gt; unit" Usage="objectOutputStream.Drain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drain", "()V", "GetDrainHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("drain", "()V", "GetDrainHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Drain any buffered data in ObjectOutputStream.</summary>
        <remarks>
          <para>Drain any buffered data in ObjectOutputStream.  Similar to flush but
            does not propagate the flush to the underlying stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#drain()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.drain()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableReplaceObject">
      <MemberSignature Language="C#" Value="protected virtual bool EnableReplaceObject (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EnableReplaceObject(bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.EnableReplaceObject(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member EnableReplaceObject : bool -&gt; bool&#xA;override this.EnableReplaceObject : bool -&gt; bool" Usage="objectOutputStream.EnableReplaceObject enable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("enableReplaceObject", "(Z)Z", "GetEnableReplaceObject_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("enableReplaceObject", "(Z)Z", "GetEnableReplaceObject_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">boolean parameter to enable replacement of objects</param>
        <summary>Enable the stream to do replacement of objects in the stream.</summary>
        <returns>the previous setting before this method was invoked</returns>
        <remarks>
          <para>Enable the stream to do replacement of objects in the stream.  When
            enabled, the replaceObject method is called for every object being
            serialized.</para>
          <para>If <c>enable</c> is true, and there is a security manager
            installed, this method first calls the security manager's
            <c>checkPermission</c> method with a
            <c>SerializablePermission("enableSubstitution")</c> permission to
            ensure it's ok to enable the stream to do replacement of objects in the
            stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#enableReplaceObject(boolean)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.enableReplaceObject(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.ObjectOutputStream.ReplaceObject(Java.Lang.Object)" />
        <altmember cref="M:Java.IO.ObjectInputStream.EnableResolveObject(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.IO.ObjectOutputStream.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.IO.ObjectOutputStream.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PutFields">
      <MemberSignature Language="C#" Value="public virtual Java.IO.ObjectOutputStream.PutField? PutFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.ObjectOutputStream/PutField PutFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.PutFields" />
      <MemberSignature Language="F#" Value="abstract member PutFields : unit -&gt; Java.IO.ObjectOutputStream.PutField&#xA;override this.PutFields : unit -&gt; Java.IO.ObjectOutputStream.PutField" Usage="objectOutputStream.PutFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("putFields", "()Ljava/io/ObjectOutputStream$PutField;", "GetPutFieldsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("putFields", "()Ljava/io/ObjectOutputStream$PutField;", "GetPutFieldsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.ObjectOutputStream+PutField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the object used to buffer persistent fields to be written to
            the stream.</summary>
        <returns>an instance of the class Putfield that holds the serializable
                     fields</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#putFields()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.putFields()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.</exception>
        <exception cref="T:Java.IO.NotActiveException">if this method is not called from <c>writeObject()</c>.</exception>
        <altmember cref="M:Java.IO.ObjectInputStream.DefaultReadObject" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceObject">
      <MemberSignature Language="C#" Value="protected virtual Java.Lang.Object? ReplaceObject (Java.Lang.Object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Lang.Object ReplaceObject(class Java.Lang.Object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.ReplaceObject(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceObject : Java.Lang.Object -&gt; Java.Lang.Object&#xA;override this.ReplaceObject : Java.Lang.Object -&gt; Java.Lang.Object" Usage="objectOutputStream.ReplaceObject obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("replaceObject", "(Ljava/lang/Object;)Ljava/lang/Object;", "GetReplaceObject_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("replaceObject", "(Ljava/lang/Object;)Ljava/lang/Object;", "GetReplaceObject_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="obj">the object to be replaced</param>
        <summary>This method will allow trusted subclasses of ObjectOutputStream to
            substitute one object for another during serialization.</summary>
        <returns>the alternate object that replaced the specified one</returns>
        <remarks>
          <para>This method will allow trusted subclasses of ObjectOutputStream to
            substitute one object for another during serialization. Replacing
            objects is disabled until enableReplaceObject is called. The
            enableReplaceObject method checks that the stream requesting to do
            replacement can be trusted.  The first occurrence of each object written
            into the serialization stream is passed to replaceObject.  Subsequent
            references to the object are replaced by the object returned by the
            original call to replaceObject.  To ensure that the private state of
            objects is not unintentionally exposed, only trusted streams may use
            replaceObject.</para>
          <para>The ObjectOutputStream.writeObject method takes a parameter of type
            Object (as opposed to type Serializable) to allow for cases where
            non-serializable objects are replaced by serializable ones.</para>
          <para>When a subclass is replacing objects it must insure that either a
            complementary substitution must be made during deserialization or that
            the substituted object is compatible with every field where the
            reference will be stored.  Objects whose type is not a subclass of the
            type of the field or array element abort the serialization by raising an
            exception and the object is not be stored.</para>
          <para>This method is called only once when each object is first
            encountered.  All subsequent references to the object will be redirected
            to the new object. This method should return the object to be
            substituted or the original object.</para>
          <para>Null can be returned as the object to be substituted, but may cause
            NullReferenceException in classes that contain references to the
            original object since they may be expecting an object instead of
            null.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#replaceObject(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.replaceObject(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs while creating the replacement
             object.</exception>
        <altmember cref="M:Java.IO.ObjectOutputStream.EnableReplaceObject(System.Boolean)" />
        <altmember cref="M:Java.IO.ObjectInputStream.EnableResolveObject(System.Boolean)" />
        <altmember cref="M:Java.IO.ObjectInputStream.ResolveObject(Java.Lang.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="objectOutputStream.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "GetResetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "GetResetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset will disregard the state of any objects already written to the
            stream.</summary>
        <remarks>
          <para>Reset will disregard the state of any objects already written to the
            stream.  The state is reset to be the same as a new ObjectOutputStream.
            The current point in the stream is marked as reset so the corresponding
            ObjectInputStream will be reset at the same point.  Objects previously
            written to the stream will not be referred to as already being in the
            stream.  They will be written to the stream again.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#reset()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if <c>reset()</c> is called during the serialization of an
             object.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.IO.ObjectOutputStream.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.IO.ObjectOutputStream.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.IO.ObjectOutputStream.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.IO.ObjectOutputStream.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseProtocolVersion">
      <MemberSignature Language="C#" Value="public virtual void UseProtocolVersion (Java.IO.ObjectStreamProtocol version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UseProtocolVersion(valuetype Java.IO.ObjectStreamProtocol version) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.UseProtocolVersion(Java.IO.ObjectStreamProtocol)" />
      <MemberSignature Language="F#" Value="abstract member UseProtocolVersion : Java.IO.ObjectStreamProtocol -&gt; unit&#xA;override this.UseProtocolVersion : Java.IO.ObjectStreamProtocol -&gt; unit" Usage="objectOutputStream.UseProtocolVersion version" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("useProtocolVersion", "(I)V", "GetUseProtocolVersion_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("useProtocolVersion", "(I)V", "GetUseProtocolVersion_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="Java.IO.ObjectStreamProtocol">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="version">use ProtocolVersion from java.io.ObjectStreamConstants.</param>
        <summary>Specify stream protocol version to use when writing the stream.</summary>
        <remarks>
          <para>Specify stream protocol version to use when writing the stream.</para>
          <para>This routine provides a hook to enable the current version of
            Serialization to write in a format that is backwards compatible to a
            previous version of the stream format.</para>
          <para>Every effort will be made to avoid introducing additional
            backwards incompatibilities; however, sometimes there is no
            other alternative.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#useProtocolVersion(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.useProtocolVersion(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if an invalid <c>version</c> is specified.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.</exception>
        <altmember cref="F:Java.IO.ObjectStreamConstants.ProtocolVersion1" />
        <altmember cref="F:Java.IO.ObjectStreamConstants.ProtocolVersion2" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.Write(System.Int32)" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="objectOutputStream.Write val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.Write(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(I)V", "GetWrite_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(I)V", "GetWrite_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val">the byte to be written to the stream</param>
        <summary>Writes a byte.</summary>
        <remarks>
          <para>Writes a byte. This method will block until the byte is actually
            written.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#write(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.write(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public virtual void WriteBoolean (bool val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBoolean(bool val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteBoolean(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WriteBoolean : bool -&gt; unit&#xA;override this.WriteBoolean : bool -&gt; unit" Usage="objectOutputStream.WriteBoolean val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteBoolean(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeBoolean", "(Z)V", "GetWriteBoolean_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeBoolean", "(Z)V", "GetWriteBoolean_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="val">the boolean to be written</param>
        <summary>Writes a boolean.</summary>
        <remarks>
          <para>Writes a boolean.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeBoolean(boolean)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeBoolean(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public virtual void WriteByte (int val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteByte(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteByte : int -&gt; unit&#xA;override this.WriteByte : int -&gt; unit" Usage="objectOutputStream.WriteByte val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteByte(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeByte", "(I)V", "GetWriteByte_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeByte", "(I)V", "GetWriteByte_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val">the byte value to be written</param>
        <summary>Writes an 8 bit byte.</summary>
        <remarks>
          <para>Writes an 8 bit byte.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeByte(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeByte(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBytes">
      <MemberSignature Language="C#" Value="public virtual void WriteBytes (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBytes(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteBytes(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteBytes : string -&gt; unit&#xA;override this.WriteBytes : string -&gt; unit" Usage="objectOutputStream.WriteBytes str" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteBytes(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeBytes", "(Ljava/lang/String;)V", "GetWriteBytes_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeBytes", "(Ljava/lang/String;)V", "GetWriteBytes_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">the String of bytes to be written</param>
        <summary>Writes a String as a sequence of bytes.</summary>
        <remarks>
          <para>Writes a String as a sequence of bytes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeBytes(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeBytes(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChar">
      <MemberSignature Language="C#" Value="public virtual void WriteChar (int val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChar(int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteChar(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteChar : int -&gt; unit&#xA;override this.WriteChar : int -&gt; unit" Usage="objectOutputStream.WriteChar val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteChar(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeChar", "(I)V", "GetWriteChar_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeChar", "(I)V", "GetWriteChar_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val">the char value to be written</param>
        <summary>Writes a 16 bit char.</summary>
        <remarks>
          <para>Writes a 16 bit char.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeChar(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeChar(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public virtual void WriteChars (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteChars(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteChars : string -&gt; unit&#xA;override this.WriteChars : string -&gt; unit" Usage="objectOutputStream.WriteChars str" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteChars(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeChars", "(Ljava/lang/String;)V", "GetWriteChars_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeChars", "(Ljava/lang/String;)V", "GetWriteChars_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">the String of chars to be written</param>
        <summary>Writes a String as a sequence of chars.</summary>
        <remarks>
          <para>Writes a String as a sequence of chars.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeChars(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeChars(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteClassDescriptor">
      <MemberSignature Language="C#" Value="protected virtual void WriteClassDescriptor (Java.IO.ObjectStreamClass? desc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteClassDescriptor(class Java.IO.ObjectStreamClass desc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteClassDescriptor(Java.IO.ObjectStreamClass)" />
      <MemberSignature Language="F#" Value="abstract member WriteClassDescriptor : Java.IO.ObjectStreamClass -&gt; unit&#xA;override this.WriteClassDescriptor : Java.IO.ObjectStreamClass -&gt; unit" Usage="objectOutputStream.WriteClassDescriptor desc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeClassDescriptor", "(Ljava/io/ObjectStreamClass;)V", "GetWriteClassDescriptor_Ljava_io_ObjectStreamClass_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeClassDescriptor", "(Ljava/io/ObjectStreamClass;)V", "GetWriteClassDescriptor_Ljava_io_ObjectStreamClass_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desc" Type="Java.IO.ObjectStreamClass" />
      </Parameters>
      <Docs>
        <param name="desc">class descriptor to write to the stream</param>
        <summary>Write the specified class descriptor to the ObjectOutputStream.</summary>
        <remarks>
          <para>Write the specified class descriptor to the ObjectOutputStream.  Class
            descriptors are used to identify the classes of objects written to the
            stream.  Subclasses of ObjectOutputStream may override this method to
            customize the way in which class descriptors are written to the
            serialization stream.  The corresponding method in ObjectInputStream,
            <c>readClassDescriptor</c>, should then be overridden to
            reconstitute the class descriptor from its custom stream representation.
            By default, this method writes class descriptors according to the format
            defined in the Object Serialization specification.</para>
          <para>Note that this method will only be called if the ObjectOutputStream
            is not using the old serialization stream format (set by calling
            ObjectOutputStream's <c>useProtocolVersion</c> method).  If this
            serialization stream is using the old format
            (<c>PROTOCOL_VERSION_1</c>), the class descriptor will be written
            internally in a manner that cannot be overridden or customized.</para>
          <para>Added in 1.3.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDouble">
      <MemberSignature Language="C#" Value="public virtual void WriteDouble (double val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDouble(float64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteDouble(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member WriteDouble : double -&gt; unit&#xA;override this.WriteDouble : double -&gt; unit" Usage="objectOutputStream.WriteDouble val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteDouble(System.Double)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeDouble", "(D)V", "GetWriteDouble_DHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeDouble", "(D)V", "GetWriteDouble_DHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val">the double value to be written</param>
        <summary>Writes a 64 bit double.</summary>
        <remarks>
          <para>Writes a 64 bit double.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeDouble(double)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeDouble(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFields">
      <MemberSignature Language="C#" Value="public virtual void WriteFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteFields" />
      <MemberSignature Language="F#" Value="abstract member WriteFields : unit -&gt; unit&#xA;override this.WriteFields : unit -&gt; unit" Usage="objectOutputStream.WriteFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeFields", "()V", "GetWriteFieldsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeFields", "()V", "GetWriteFieldsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Write the buffered fields to the stream.</summary>
        <remarks>
          <para>Write the buffered fields to the stream.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeFields()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeFields()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.</exception>
        <exception cref="T:Java.IO.NotActiveException">if there are no fields to write to the target stream.</exception>
        <altmember cref="M:Java.IO.ObjectOutputStream.PutFields" />
      </Docs>
    </Member>
    <Member MemberName="WriteFloat">
      <MemberSignature Language="C#" Value="public virtual void WriteFloat (float val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFloat(float32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteFloat(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member WriteFloat : single -&gt; unit&#xA;override this.WriteFloat : single -&gt; unit" Usage="objectOutputStream.WriteFloat val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteFloat(System.Single)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeFloat", "(F)V", "GetWriteFloat_FHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeFloat", "(F)V", "GetWriteFloat_FHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val">the float value to be written</param>
        <summary>Writes a 32 bit float.</summary>
        <remarks>
          <para>Writes a 32 bit float.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeFloat(float)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeFloat(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt">
      <MemberSignature Language="C#" Value="public virtual void WriteInt (int val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteInt(int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteInt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteInt : int -&gt; unit&#xA;override this.WriteInt : int -&gt; unit" Usage="objectOutputStream.WriteInt val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteInt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeInt", "(I)V", "GetWriteInt_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeInt", "(I)V", "GetWriteInt_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val">the integer value to be written</param>
        <summary>Writes a 32 bit int.</summary>
        <remarks>
          <para>Writes a 32 bit int.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeInt(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeInt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLong">
      <MemberSignature Language="C#" Value="public virtual void WriteLong (long val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLong(int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteLong(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member WriteLong : int64 -&gt; unit&#xA;override this.WriteLong : int64 -&gt; unit" Usage="objectOutputStream.WriteLong val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteLong(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeLong", "(J)V", "GetWriteLong_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeLong", "(J)V", "GetWriteLong_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val">the long value to be written</param>
        <summary>Writes a 64 bit long.</summary>
        <remarks>
          <para>Writes a 64 bit long.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeLong(long)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeLong(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteObject">
      <MemberSignature Language="C#" Value="public void WriteObject (Java.Lang.Object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteObject(class Java.Lang.Object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteObject(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member WriteObject : Java.Lang.Object -&gt; unit&#xA;override this.WriteObject : Java.Lang.Object -&gt; unit" Usage="objectOutputStream.WriteObject obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IObjectOutput.WriteObject(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeObject", "(Ljava/lang/Object;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeObject", "(Ljava/lang/Object;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>Write the specified object to the ObjectOutputStream.</summary>
        <remarks>
          <para>Write the specified object to the ObjectOutputStream.  The class of the
            object, the signature of the class, and the values of the non-transient
            and non-static fields of the class and all of its supertypes are
            written.  Default serialization for a class can be overridden using the
            writeObject and the readObject methods.  Objects referenced by this
            object are written transitively so that a complete equivalent graph of
            objects can be reconstructed by an ObjectInputStream.</para>
          <para>Exceptions are thrown for problems with the OutputStream and for
            classes that should not be serialized.  All exceptions are fatal to the
            OutputStream, which is left in an indeterminate state, and it is up to
            the caller to ignore or recover the stream state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeObject(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeObject(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.</exception>
        <altmember cref="M:Java.IO.ObjectInputStream.ReadObject" />
      </Docs>
    </Member>
    <Member MemberName="WriteObjectOverride">
      <MemberSignature Language="C#" Value="protected virtual void WriteObjectOverride (Java.Lang.Object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteObjectOverride(class Java.Lang.Object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteObjectOverride(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member WriteObjectOverride : Java.Lang.Object -&gt; unit&#xA;override this.WriteObjectOverride : Java.Lang.Object -&gt; unit" Usage="objectOutputStream.WriteObjectOverride obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeObjectOverride", "(Ljava/lang/Object;)V", "GetWriteObjectOverride_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeObjectOverride", "(Ljava/lang/Object;)V", "GetWriteObjectOverride_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="obj">object to be written to the underlying stream</param>
        <summary>Method used by subclasses to override the default writeObject method.</summary>
        <remarks>
          <para>Method used by subclasses to override the default writeObject method.
            This method is called by trusted subclasses of ObjectInputStream that
            constructed ObjectInputStream using the protected no-arg constructor.
            The subclass is expected to provide an override method with the modifier
            "final".</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeObjectOverride(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeObjectOverride(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteShort">
      <MemberSignature Language="C#" Value="public virtual void WriteShort (int val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteShort(int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteShort(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteShort : int -&gt; unit&#xA;override this.WriteShort : int -&gt; unit" Usage="objectOutputStream.WriteShort val" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteShort(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeShort", "(I)V", "GetWriteShort_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeShort", "(I)V", "GetWriteShort_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val">the short value to be written</param>
        <summary>Writes a 16 bit short.</summary>
        <remarks>
          <para>Writes a 16 bit short.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeShort(int)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeShort(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamHeader">
      <MemberSignature Language="C#" Value="protected virtual void WriteStreamHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteStreamHeader() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteStreamHeader" />
      <MemberSignature Language="F#" Value="abstract member WriteStreamHeader : unit -&gt; unit&#xA;override this.WriteStreamHeader : unit -&gt; unit" Usage="objectOutputStream.WriteStreamHeader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeStreamHeader", "()V", "GetWriteStreamHeaderHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeStreamHeader", "()V", "GetWriteStreamHeaderHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The writeStreamHeader method is provided so subclasses can append or
            prepend their own header to the stream.</summary>
        <remarks>
          <para>The writeStreamHeader method is provided so subclasses can append or
            prepend their own header to the stream.  It writes the magic number and
            version to the stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeStreamHeader()" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeStreamHeader()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUnshared">
      <MemberSignature Language="C#" Value="public virtual void WriteUnshared (Java.Lang.Object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteUnshared(class Java.Lang.Object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteUnshared(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member WriteUnshared : Java.Lang.Object -&gt; unit&#xA;override this.WriteUnshared : Java.Lang.Object -&gt; unit" Usage="objectOutputStream.WriteUnshared obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeUnshared", "(Ljava/lang/Object;)V", "GetWriteUnshared_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeUnshared", "(Ljava/lang/Object;)V", "GetWriteUnshared_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="obj">object to write to stream</param>
        <summary>Writes an "unshared" object to the ObjectOutputStream.</summary>
        <remarks>
          <para>Writes an "unshared" object to the ObjectOutputStream.  This method is
            identical to writeObject, except that it always writes the given object
            as a new, unique object in the stream (as opposed to a back-reference
            pointing to a previously serialized instance).  Specifically:
            &lt;ul&gt;
              &lt;li&gt;An object written via writeUnshared is always serialized in the
                  same manner as a newly appearing object (an object that has not
                  been written to the stream yet), regardless of whether or not the
                  object has been written previously.
            
              &lt;li&gt;If writeObject is used to write an object that has been previously
                  written with writeUnshared, the previous writeUnshared operation
                  is treated as if it were a write of a separate object.  In other
                  words, ObjectOutputStream will never generate back-references to
                  object data written by calls to writeUnshared.
            &lt;/ul&gt;
            While writing an object via writeUnshared does not in itself guarantee a
            unique reference to the object when it is deserialized, it allows a
            single object to be defined multiple times in a stream, so that multiple
            calls to readUnshared by the receiver will not conflict.  Note that the
            rules described above only apply to the base-level object written with
            writeUnshared, and not to any transitively referenced sub-objects in the
            object graph to be serialized.</para>
          <para>ObjectOutputStream subclasses which override this method can only be
            constructed in security contexts possessing the
            "enableSubclassImplementation" SerializablePermission; any attempt to
            instantiate such a subclass without this permission will cause a
            SecurityException to be thrown.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeUnshared(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeUnshared(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.</exception>
        <altmember cref="M:Java.IO.ObjectInputStream.ReadUnshared" />
      </Docs>
    </Member>
    <Member MemberName="WriteUTF">
      <MemberSignature Language="C#" Value="public virtual void WriteUTF (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteUTF(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.ObjectOutputStream.WriteUTF(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteUTF : string -&gt; unit&#xA;override this.WriteUTF : string -&gt; unit" Usage="objectOutputStream.WriteUTF str" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteUTF(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeUTF", "(Ljava/lang/String;)V", "GetWriteUTF_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeUTF", "(Ljava/lang/String;)V", "GetWriteUTF_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">the String to be written</param>
        <summary>Primitive data write of this String in
            modified UTF-8
            format.</summary>
        <remarks>
          <para>Primitive data write of this String in
            modified UTF-8
            format.  Note that there is a
            significant difference between writing a String into the stream as
            primitive data or as an Object. A String instance written by writeObject
            is written into the stream as a String initially. Future writeObject()
            calls write references to the string into the stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/ObjectOutputStream#writeUTF(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.ObjectOutputStream.writeUTF(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while writing to the target stream.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
