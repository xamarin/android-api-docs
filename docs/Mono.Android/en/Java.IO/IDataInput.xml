<Type Name="IDataInput" FullName="Java.IO.IDataInput">
  <TypeSignature Language="C#" Value="public interface IDataInput : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDataInput implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.IO.IDataInput" />
  <TypeSignature Language="F#" Value="type IDataInput = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/io/DataInput", "", "Java.IO.IDataInputInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/io/DataInput", "", "Java.IO.IDataInputInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The <c>DataInput</c> interface provides
            for reading bytes from a binary stream and
            reconstructing from them data in any of
            the Java primitive types.</summary>
    <remarks>
      <para>The <c>DataInput</c> interface provides
            for reading bytes from a binary stream and
            reconstructing from them data in any of
            the Java primitive types. There is also
            a
            facility for reconstructing a <c>String</c>
            from data in
            modified UTF-8
            format.</para>
      <para>It is generally true of all the reading
            routines in this interface that if end of
            file is reached before the desired number
            of bytes has been read, an <c>EOFException</c>
            (which is a kind of <c>IOException</c>)
            is thrown. If any byte cannot be read for
            any reason other than end of file, an <c>IOException</c>
            other than <c>EOFException</c> is
            thrown. In particular, an <c>IOException</c>
            may be thrown if the input stream has been
            closed.
            
            &lt;h3&gt;"modified-utf-8"&gt;Modified UTF-8&lt;/h3&gt;</para>
      <para>Implementations of the DataInput and DataOutput interfaces represent
            Unicode strings in a format that is a slight modification of UTF-8.
            (For information regarding the standard UTF-8 format, see section
            <i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version
            4.0</i>)
            
            &lt;ul&gt;
            &lt;li&gt;Characters in the range <c>'\u005Cu0001'</c> to
                    <c>'\u005Cu007F'</c> are represented by a single byte.
            &lt;li&gt;The null character <c>'\u005Cu0000'</c> and characters
                    in the range <c>'\u005Cu0080'</c> to <c>'\u005Cu07FF'</c> are
                    represented by a pair of bytes.
            &lt;li&gt;Characters in the range <c>'\u005Cu0800'</c>
                    to <c>'\u005CuFFFF'</c> are represented by three bytes.
            &lt;/ul&gt;
            
              &lt;table class="plain" style="margin-left:2em;"&gt;
                &lt;caption&gt;Encoding of UTF-8 values&lt;/caption&gt;
                &lt;thead&gt;
                &lt;tr&gt;
                  &lt;th scope="col" rowspan="2"&gt;Value&lt;/th&gt;
                  &lt;th scope="col" rowspan="2"&gt;Byte&lt;/th&gt;
                  &lt;th scope="col" colspan="8" id="bit_a"&gt;Bit Values&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;!-- Value --&gt;
                  &lt;!-- Byte --&gt;
                  &lt;th scope="col" style="width:3em"&gt; 7 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 6 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 5 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 4 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 3 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 2 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 1 &lt;/th&gt;
                  &lt;th scope="col" style="width:3em"&gt; 0 &lt;/th&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                &lt;tr&gt;
                  &lt;th scope="row" style="text-align:left; font-weight:normal"&gt;
                    <c>\u005Cu0001</c> to <c>\u005Cu007F</c>&lt;/th&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 1 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="7" style="text-align:right; padding-right:6em"&gt;bits 6-0
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;th scope="row" rowspan="2" style="text-align:left; font-weight:normal"&gt;
                      <c>\u005Cu0000</c>,&lt;br&gt;
                      <c>\u005Cu0080</c> to <c>\u005Cu07FF</c>&lt;/th&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 1 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="5" style="text-align:right; padding-right:6em"&gt;bits 10-6
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;!-- (value) --&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 2 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="6" style="text-align:right; padding-right:6em"&gt;bits 5-0
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;th scope="row" rowspan="3" style="text-align:left; font-weight:normal"&gt;
                    <c>\u005Cu0800</c> to <c>\u005CuFFFF</c>&lt;/th&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 1 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="4" style="text-align:right; padding-right:6em"&gt;bits 15-12
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;!-- (value) --&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 2 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="6" style="text-align:right; padding-right:6em"&gt;bits 11-6
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;!-- (value) --&gt;
                  &lt;th scope="row" style="font-weight:normal; text-align:center"&gt; 3 &lt;/th&gt;
                  &lt;td style="text-align:center"&gt;1
                  &lt;td style="text-align:center"&gt;0
                  &lt;td colspan="6" style="text-align:right; padding-right:6em"&gt;bits 5-0
                &lt;/tr&gt;
                &lt;/tbody&gt;
              &lt;/table&gt;</para>
      <para>The differences between this format and the
            standard UTF-8 format are the following:
            &lt;ul&gt;
            &lt;li&gt;The null byte <c>'\u005Cu0000'</c> is encoded in 2-byte format
                rather than 1-byte, so that the encoded strings never have
                embedded nulls.
            &lt;li&gt;Only the 1-byte, 2-byte, and 3-byte formats are used.
            &lt;li&gt;Supplementary characters
                are represented in the form of surrogate pairs.
            &lt;/ul&gt;</para>
      <para>Added in 1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/io/DataInput" title="Reference documentation">Java documentation for <code>java.io.DataInput</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public bool ReadBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadBoolean" />
      <MemberSignature Language="F#" Value="abstract member ReadBoolean : unit -&gt; bool" Usage="iDataInput.ReadBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readBoolean", "()Z", "GetReadBooleanHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readBoolean", "()Z", "GetReadBooleanHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads one input byte and returns
            <c>true</c> if that byte is nonzero,
            <c>false</c> if that byte is zero.</summary>
        <returns>the <c>boolean</c> value read.</returns>
        <remarks>
          <para>Reads one input byte and returns
            <c>true</c> if that byte is nonzero,
            <c>false</c> if that byte is zero.
            This method is suitable for reading
            the byte written by the <c>writeBoolean</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readBoolean()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readBoolean()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteBoolean(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public sbyte ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadByte" />
      <MemberSignature Language="F#" Value="abstract member ReadByte : unit -&gt; sbyte" Usage="iDataInput.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readByte", "()B", "GetReadByteHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readByte", "()B", "GetReadByteHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads and returns one input byte.</summary>
        <returns>the 8-bit value read.</returns>
        <remarks>
          <para>Reads and returns one input byte.
            The byte is treated as a signed value in
            the range <c>-128</c> through <c>127</c>,
            inclusive.
            This method is suitable for
            reading the byte written by the <c>writeByte</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readByte()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readByte()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteByte(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public char ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadChar" />
      <MemberSignature Language="F#" Value="abstract member ReadChar : unit -&gt; char" Usage="iDataInput.ReadChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readChar", "()C", "GetReadCharHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readChar", "()C", "GetReadCharHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads two input bytes and returns a <c>char</c> value.</summary>
        <returns>the <c>char</c> value read.</returns>
        <remarks>
          <para>Reads two input bytes and returns a <c>char</c> value.
            Let <c>a</c>
            be the first byte read and <c>b</c>
            be the second byte. The value
            returned is:</para>
          <code lang="text/java">{@code (char)((a &lt;&lt; 8) | (b &amp; 0xff))
            }</code>
          <para>This method
            is suitable for reading bytes written by
            the <c>writeChar</c> method of interface
            <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readChar()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readChar()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteChar(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadDouble">
      <MemberSignature Language="C#" Value="public double ReadDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadDouble" />
      <MemberSignature Language="F#" Value="abstract member ReadDouble : unit -&gt; double" Usage="iDataInput.ReadDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readDouble", "()D", "GetReadDoubleHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readDouble", "()D", "GetReadDoubleHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads eight input bytes and returns
            a <c>double</c> value.</summary>
        <returns>the <c>double</c> value read.</returns>
        <remarks>
          <para>Reads eight input bytes and returns
            a <c>double</c> value. It does this
            by first constructing a <c>long</c>
            value in exactly the manner
            of the <c>readLong</c>
            method, then converting this <c>long</c>
            value to a <c>double</c> in exactly
            the manner of the method <c>Double.longBitsToDouble</c>.
            This method is suitable for reading
            bytes written by the <c>writeDouble</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readDouble()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readDouble()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteDouble(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFloat">
      <MemberSignature Language="C#" Value="public float ReadFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadFloat" />
      <MemberSignature Language="F#" Value="abstract member ReadFloat : unit -&gt; single" Usage="iDataInput.ReadFloat " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFloat", "()F", "GetReadFloatHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFloat", "()F", "GetReadFloatHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads four input bytes and returns
            a <c>float</c> value.</summary>
        <returns>the <c>float</c> value read.</returns>
        <remarks>
          <para>Reads four input bytes and returns
            a <c>float</c> value. It does this
            by first constructing an <c>int</c>
            value in exactly the manner
            of the <c>readInt</c>
            method, then converting this <c>int</c>
            value to a <c>float</c> in
            exactly the manner of the method <c>Float.intBitsToFloat</c>.
            This method is suitable for reading
            bytes written by the <c>writeFloat</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readFloat()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readFloat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteFloat(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFully">
      <MemberSignature Language="C#" Value="public void ReadFully (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadFully(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadFully(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member ReadFully : byte[] -&gt; unit" Usage="iDataInput.ReadFully b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFully", "([B)V", "GetReadFully_arrayBHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFully", "([B)V", "GetReadFully_arrayBHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <summary>Reads some bytes from an input
            stream and stores them into the buffer
            array <c>b</c>.</summary>
        <remarks>
          <para>Reads some bytes from an input
            stream and stores them into the buffer
            array <c>b</c>. The number of bytes
            read is equal
            to the length of <c>b</c>.</para>
          <para>This method blocks until one of the
            following conditions occurs:
            &lt;ul&gt;
            &lt;li&gt;<c>b.length</c>
            bytes of input data are available, in which
            case a normal return is made.
            
            &lt;li&gt;End of
            file is detected, in which case an <c>EOFException</c>
            is thrown.
            
            &lt;li&gt;An I/O error occurs, in
            which case an <c>IOException</c> other
            than <c>EOFException</c> is thrown.
            &lt;/ul&gt;</para>
          <para>If <c>b</c> is <c>null</c>,
            a <c>NullPointerException</c> is thrown.
            If <c>b.length</c> is zero, then
            no bytes are read. Otherwise, the first
            byte read is stored into element <c>b[0]</c>,
            the next one into <c>b[1]</c>, and
            so on.
            If an exception is thrown from
            this method, then it may be that some but
            not all bytes of <c>b</c> have been
            updated with data from the input stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readFully(byte[])" title="Reference documentation">Java documentation for <code>java.io.DataInput.readFully(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ReadFully">
      <MemberSignature Language="C#" Value="public void ReadFully (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadFully(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadFully(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ReadFully : byte[] * int * int -&gt; unit" Usage="iDataInput.ReadFully (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFully", "([BII)V", "GetReadFully_arrayBIIHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFully", "([BII)V", "GetReadFully_arrayBIIHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <param name="off">an int specifying the offset in the data array <c>b</c>.</param>
        <param name="len">an int specifying the number of bytes to read.</param>
        <summary>Reads <c>len</c>
            bytes from
            an input stream.</summary>
        <remarks>
          <para>Reads <c>len</c>
            bytes from
            an input stream.</para>
          <para>This method
            blocks until one of the following conditions
            occurs:
            &lt;ul&gt;
            &lt;li&gt;<c>len</c> bytes
            of input data are available, in which case
            a normal return is made.
            
            &lt;li&gt;End of file
            is detected, in which case an <c>EOFException</c>
            is thrown.
            
            &lt;li&gt;An I/O error occurs, in
            which case an <c>IOException</c> other
            than <c>EOFException</c> is thrown.
            &lt;/ul&gt;</para>
          <para>If <c>b</c> is <c>null</c>,
            a <c>NullPointerException</c> is thrown.
            If <c>off</c> is negative, or <c>len</c>
            is negative, or <c>off+len</c> is
            greater than the length of the array <c>b</c>,
            then an <c>IndexOutOfBoundsException</c>
            is thrown.
            If <c>len</c> is zero,
            then no bytes are read. Otherwise, the first
            byte read is stored into element <c>b[off]</c>,
            the next one into <c>b[off+1]</c>,
            and so on. The number of bytes read is,
            at most, equal to <c>len</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readFully(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.DataInput.readFully(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the source stream is reached before enough
             bytes have been read.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>byteCount </c>, or
             <c>offset + byteCount &gt; dst.length</c>.</exception>
        <exception cref="T:Java.IO.IOException">if a problem occurs while reading from this stream.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>dst</c> is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt">
      <MemberSignature Language="C#" Value="public int ReadInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadInt" />
      <MemberSignature Language="F#" Value="abstract member ReadInt : unit -&gt; int" Usage="iDataInput.ReadInt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readInt", "()I", "GetReadIntHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readInt", "()I", "GetReadIntHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads four input bytes and returns an
            <c>int</c> value.</summary>
        <returns>the <c>int</c> value read.</returns>
        <remarks>
          <para>Reads four input bytes and returns an
            <c>int</c> value. Let <c>a-d</c>
            be the first through fourth bytes read. The value returned is:</para>
          <code lang="text/java">{@code
            (((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |
             ((c &amp; 0xff) &lt;&lt;  8) | (d &amp; 0xff))
            }</code>
          <para>This method is suitable
            for reading bytes written by the <c>writeInt</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readInt()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readInt()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteInt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string? ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadLine" />
      <MemberSignature Language="F#" Value="abstract member ReadLine : unit -&gt; string" Usage="iDataInput.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readLine", "()Ljava/lang/String;", "GetReadLineHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readLine", "()Ljava/lang/String;", "GetReadLineHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next line of text from the input stream.</summary>
        <returns>the next line of text from the input stream,
                    or <c>null</c> if the end of file is
                    encountered before a byte can be read.</returns>
        <remarks>
          <para>Reads the next line of text from the input stream.
            It reads successive bytes, converting
            each byte separately into a character,
            until it encounters a line terminator or
            end of
            file; the characters read are then
            returned as a <c>String</c>. Note
            that because this
            method processes bytes,
            it does not support input of the full Unicode
            character set.</para>
          <para>If end of file is encountered
            before even one byte can be read, then <c>null</c>
            is returned. Otherwise, each byte that is
            read is converted to type <c>char</c>
            by zero-extension. If the character <c>'\n'</c>
            is encountered, it is discarded and reading
            ceases. If the character <c>'\r'</c>
            is encountered, it is discarded and, if
            the following byte converts &amp;#32;to the
            character <c>'\n'</c>, then that is
            discarded also; reading then ceases. If
            end of file is encountered before either
            of the characters <c>'\n'</c> and
            <c>'\r'</c> is encountered, reading
            ceases. Once reading has ceased, a <c>String</c>
            is returned that contains all the characters
            read and not discarded, taken in order.
            Note that every character in this string
            will have a value less than <c>\u005Cu0100</c>,
            that is, <c>(char)256</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readLine()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readLine()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLong">
      <MemberSignature Language="C#" Value="public long ReadLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadLong" />
      <MemberSignature Language="F#" Value="abstract member ReadLong : unit -&gt; int64" Usage="iDataInput.ReadLong " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readLong", "()J", "GetReadLongHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readLong", "()J", "GetReadLongHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads eight input bytes and returns
            a <c>long</c> value.</summary>
        <returns>the <c>long</c> value read.</returns>
        <remarks>
          <para>Reads eight input bytes and returns
            a <c>long</c> value. Let <c>a-h</c>
            be the first through eighth bytes read.
            The value returned is:</para>
          <code lang="text/java">{@code
            (((long)(a &amp; 0xff) &lt;&lt; 56) |
             ((long)(b &amp; 0xff) &lt;&lt; 48) |
             ((long)(c &amp; 0xff) &lt;&lt; 40) |
             ((long)(d &amp; 0xff) &lt;&lt; 32) |
             ((long)(e &amp; 0xff) &lt;&lt; 24) |
             ((long)(f &amp; 0xff) &lt;&lt; 16) |
             ((long)(g &amp; 0xff) &lt;&lt;  8) |
             ((long)(h &amp; 0xff)))
            }</code>
          <para>This method is suitable
            for reading bytes written by the <c>writeLong</c>
            method of interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readLong()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readLong()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteLong(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ReadShort">
      <MemberSignature Language="C#" Value="public short ReadShort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 ReadShort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadShort" />
      <MemberSignature Language="F#" Value="abstract member ReadShort : unit -&gt; int16" Usage="iDataInput.ReadShort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readShort", "()S", "GetReadShortHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readShort", "()S", "GetReadShortHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads two input bytes and returns
            a <c>short</c> value.</summary>
        <returns>the 16-bit value read.</returns>
        <remarks>
          <para>Reads two input bytes and returns
            a <c>short</c> value. Let <c>a</c>
            be the first byte read and <c>b</c>
            be the second byte. The value
            returned
            is:</para>
          <code lang="text/java">{@code (short)((a &lt;&lt; 8) | (b &amp; 0xff))
            }</code>
          <para>This method
            is suitable for reading the bytes written
            by the <c>writeShort</c> method of
            interface <c>DataOutput</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readShort()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readShort()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteShort(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedByte">
      <MemberSignature Language="C#" Value="public int ReadUnsignedByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadUnsignedByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadUnsignedByte" />
      <MemberSignature Language="F#" Value="abstract member ReadUnsignedByte : unit -&gt; int" Usage="iDataInput.ReadUnsignedByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUnsignedByte", "()I", "GetReadUnsignedByteHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUnsignedByte", "()I", "GetReadUnsignedByteHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads one input byte, zero-extends
            it to type <c>int</c>, and returns
            the result, which is therefore in the range
            <c>0</c>
            through <c>255</c>.</summary>
        <returns>the unsigned 8-bit value read.</returns>
        <remarks>
          <para>Reads one input byte, zero-extends
            it to type <c>int</c>, and returns
            the result, which is therefore in the range
            <c>0</c>
            through <c>255</c>.
            This method is suitable for reading
            the byte written by the <c>writeByte</c>
            method of interface <c>DataOutput</c>
            if the argument to <c>writeByte</c>
            was intended to be a value in the range
            <c>0</c> through <c>255</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readUnsignedByte()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readUnsignedByte()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteByte(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedShort">
      <MemberSignature Language="C#" Value="public int ReadUnsignedShort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadUnsignedShort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadUnsignedShort" />
      <MemberSignature Language="F#" Value="abstract member ReadUnsignedShort : unit -&gt; int" Usage="iDataInput.ReadUnsignedShort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUnsignedShort", "()I", "GetReadUnsignedShortHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUnsignedShort", "()I", "GetReadUnsignedShortHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads two input bytes and returns
            an <c>int</c> value in the range <c>0</c>
            through <c>65535</c>.</summary>
        <returns>the unsigned 16-bit value read.</returns>
        <remarks>
          <para>Reads two input bytes and returns
            an <c>int</c> value in the range <c>0</c>
            through <c>65535</c>. Let <c>a</c>
            be the first byte read and
            <c>b</c>
            be the second byte. The value returned is:</para>
          <code lang="text/java">{@code (((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))
            }</code>
          <para>This method is suitable for reading the bytes
            written by the <c>writeShort</c> method
            of interface <c>DataOutput</c>  if
            the argument to <c>writeShort</c>
            was intended to be a value in the range
            <c>0</c> through <c>65535</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readUnsignedShort()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readUnsignedShort()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteShort(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUTF">
      <MemberSignature Language="C#" Value="public string? ReadUTF ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadUTF() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.ReadUTF" />
      <MemberSignature Language="F#" Value="abstract member ReadUTF : unit -&gt; string" Usage="iDataInput.ReadUTF " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUTF", "()Ljava/lang/String;", "GetReadUTFHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUTF", "()Ljava/lang/String;", "GetReadUTFHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads in a string that has been encoded using a
            modified UTF-8
            format.</summary>
        <returns>a Unicode string.</returns>
        <remarks>
          <para>Reads in a string that has been encoded using a
            modified UTF-8
            format.
            The general contract of <c>readUTF</c>
            is that it reads a representation of a Unicode
            character string encoded in modified
            UTF-8 format; this string of characters
            is then returned as a <c>String</c>.</para>
          <para>First, two bytes are read and used to
            construct an unsigned 16-bit integer in
            exactly the manner of the <c>readUnsignedShort</c>
            method . This integer value is called the
            <i>UTF length</i> and specifies the number
            of additional bytes to be read. These bytes
            are then converted to characters by considering
            them in groups. The length of each group
            is computed from the value of the first
            byte of the group. The byte following a
            group, if any, is the first byte of the
            next group.</para>
          <para>If the first byte of a group
            matches the bit pattern <c>0xxxxxxx</c>
            (where <c>x</c> means "may be <c>0</c>
            or <c>1</c>"), then the group consists
            of just that byte. The byte is zero-extended
            to form a character.</para>
          <para>If the first byte
            of a group matches the bit pattern <c>110xxxxx</c>,
            then the group consists of that byte <c>a</c>
            and a second byte <c>b</c>. If there
            is no byte <c>b</c> (because byte
            <c>a</c> was the last of the bytes
            to be read), or if byte <c>b</c> does
            not match the bit pattern <c>10xxxxxx</c>,
            then a <c>UTFDataFormatException</c>
            is thrown. Otherwise, the group is converted
            to the character:</para>
          <code lang="text/java">{@code (char)(((a &amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))
            }</code>
          <para>If the first byte of a group
            matches the bit pattern <c>1110xxxx</c>,
            then the group consists of that byte <c>a</c>
            and two more bytes <c>b</c> and <c>c</c>.
            If there is no byte <c>c</c> (because
            byte <c>a</c> was one of the last
            two of the bytes to be read), or either
            byte <c>b</c> or byte <c>c</c>
            does not match the bit pattern <c>10xxxxxx</c>,
            then a <c>UTFDataFormatException</c>
            is thrown. Otherwise, the group is converted
            to the character:</para>
          <code lang="text/java">{@code
            (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))
            }</code>
          <para>If the first byte of a group matches the
            pattern <c>1111xxxx</c> or the pattern
            <c>10xxxxxx</c>, then a <c>UTFDataFormatException</c>
            is thrown.</para>
          <para>If end of file is encountered
            at any time during this entire process,
            then an <c>EOFException</c> is thrown.</para>
          <para>After every group has been converted to
            a character by this process, the characters
            are gathered, in the same order in which
            their corresponding groups were read from
            the input stream, to form a <c>String</c>,
            which is returned.</para>
          <para>The <c>writeUTF</c>
            method of interface <c>DataOutput</c>
            may be used to write data that is suitable
            for reading by this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#readUTF()" title="Reference documentation">Java documentation for <code>java.io.DataInput.readUTF()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the input is reached before the read
         request can be satisfied.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while reading.</exception>
        <altmember cref="M:Java.IO.IDataOutput.WriteUTF(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SkipBytes">
      <MemberSignature Language="C#" Value="public int SkipBytes (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SkipBytes(int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.IDataInput.SkipBytes(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SkipBytes : int -&gt; int" Usage="iDataInput.SkipBytes n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("skipBytes", "(I)I", "GetSkipBytes_IHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("skipBytes", "(I)I", "GetSkipBytes_IHandler:Java.IO.IDataInputInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">the number of bytes to be skipped.</param>
        <summary>Makes an attempt to skip over
            <c>n</c> bytes
            of data from the input
            stream, discarding the skipped bytes.</summary>
        <returns>the number of bytes actually skipped.</returns>
        <remarks>
          <para>Makes an attempt to skip over
            <c>n</c> bytes
            of data from the input
            stream, discarding the skipped bytes. However,
            it may skip
            over some smaller number of
            bytes, possibly zero. This may result from
            any of a
            number of conditions; reaching
            end of file before <c>n</c> bytes
            have been skipped is
            only one possibility.
            This method never throws an <c>EOFException</c>.
            The actual
            number of bytes skipped is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/DataInput#skipBytes(int)" title="Reference documentation">Java documentation for <code>java.io.DataInput.skipBytes(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if a problem occurs during skipping.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
