<Type Name="InputStream" FullName="Java.IO.InputStream">
  <TypeSignature Language="C#" Value="public abstract class InputStream : Java.Lang.Object, IDisposable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InputStream extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/io/InputStream", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A readable source of bytes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A readable source of bytes.

 </para>
      <para tool="javadoc-to-mdoc">Most clients will use input streams that read data from the file system
 (<c><see cref="T:Java.IO.FileInputStream" /></c>), the network (<c><see cref="P:Java.Net.Socket.InputStream" /></c>/<c><see cref="P:Java.Net.URLConnection.InputStream" /></c>), or from an in-memory byte
 array (<c><see cref="T:Java.IO.ByteArrayInputStream" /></c>).

 </para>
      <para tool="javadoc-to-mdoc">Use <c><see cref="T:Java.IO.InputStreamReader" /></c> to adapt a byte stream like this one into a
 character stream.

 </para>
      <para tool="javadoc-to-mdoc">Most clients should wrap their input stream with <c><see cref="T:Java.IO.BufferedInputStream" /></c>. Callers that do only bulk reads may omit buffering.

 </para>
      <para tool="javadoc-to-mdoc">Some implementations support marking a position in the input stream and
 resetting back to this position later. Implementations that don't return
 false from <c><see cref="M:Java.IO.InputStream.MarkSupported" /></c> and throw an <c><see cref="T:Java.IO.IOException" /></c> when
 <c><see cref="M:Java.IO.InputStream.Reset" /></c> is called.

 <format type="text/html"><h3>Subclassing InputStream</h3></format>
 Subclasses that decorate another input stream should consider subclassing
 <c><see cref="T:Java.IO.FilterInputStream" /></c>, which delegates all calls to the source input
 stream.

 </para>
      <para tool="javadoc-to-mdoc">All input stream subclasses should override <i>both</i><c><see cref="M:Java.IO.InputStream.Read" /></c> and <c><see cref="M:Java.IO.InputStream.Read(System.Byte[],System.Int32,System.Int32)" /></c>. The
 three argument overload is necessary for bulk access to the data. This is
 much more efficient than byte-by-byte access.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.IO.OutputStream" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/io/InputStream.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>This constructor does nothing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor does nothing. It is provided for signature
 compatibility.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#InputStream()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputStream (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public virtual int Available ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Available() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("available", "()I", "GetAvailableHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an estimated number of bytes that can be read or skipped without blocking for more
 input.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimated number of bytes that can be read or skipped without blocking for more
 input.

 </para>
          <para tool="javadoc-to-mdoc">Note that this method provides such a weak guarantee that it is not very useful in
 practice.

 </para>
          <para tool="javadoc-to-mdoc">Firstly, the guarantee is "without blocking for more input" rather than "without
 blocking": a read may still block waiting for I/O to completeÂ &amp;mdash; the guarantee is
 merely that it won't have to wait indefinitely for data to be written. The result of this
 method should not be used as a license to do I/O on a thread that shouldn't be blocked.

 </para>
          <para tool="javadoc-to-mdoc">Secondly, the result is a
 conservative estimate and may be significantly smaller than the actual number of bytes
 available. In particular, an implementation that always returns 0 would be correct.
 In general, callers should only use this method if they'd be satisfied with
 treating the result as a boolean yes or no answer to the question "is there definitely
 data ready?".

 </para>
          <para tool="javadoc-to-mdoc">Thirdly, the fact that a given number of bytes is "available" does not guarantee that a
 read or skip will actually read or skip that many bytes: they may read or skip fewer.

 </para>
          <para tool="javadoc-to-mdoc">It is particularly important to realize that you <format type="text/html"><i>must not</i></format> use this method to
 size a container and assume that you can read the entirety of the stream without needing
 to resize the container. Such callers should probably write everything they read to a
 <c><see cref="T:Java.IO.ByteArrayOutputStream" /></c> and convert that to a byte array. Alternatively, if you're
 reading from a file, <c><see cref="M:Java.IO.File.Length" /></c> returns the current length of the file (though
 assuming the file's length can't change may be incorrect, reading a file is inherently
 racy).

 </para>
          <para tool="javadoc-to-mdoc">The default implementation of this method in <c>InputStream</c> always returns 0.
 Subclasses should override this method if they are able to indicate the number of bytes
 available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#available()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or an error occurs
</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Closes this stream. Concrete implementations of this class should free
 any resources during close. This implementation does nothing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while closing this stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Mark">
      <MemberSignature Language="C#" Value="public virtual void Mark (int readlimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Mark(int32 readlimit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("mark", "(I)V", "GetMark_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readlimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="readlimit">the number of bytes that can be read from this stream before
            the mark is invalidated.</param>
        <summary>Sets a mark position in this InputStream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a mark position in this InputStream. The parameter <c>readlimit</c>
 indicates how many bytes can be read before the mark is invalidated.
 Sending <c>reset()</c> will reposition the stream back to the marked
 position provided <c>readLimit</c> has not been surpassed.
 </para>
          <para tool="javadoc-to-mdoc">
 This default implementation does nothing and concrete subclasses must
 provide their own implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#mark(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.InputStream.MarkSupported" />
        <altmember cref="M:Java.IO.InputStream.Reset" />
      </Docs>
    </Member>
    <Member MemberName="MarkSupported">
      <MemberSignature Language="C#" Value="public virtual bool MarkSupported ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MarkSupported() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("markSupported", "()Z", "GetMarkSupportedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this stream supports the <c>mark()</c> and
 <c>reset()</c> methods.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this stream supports the <c>mark()</c> and
 <c>reset()</c> methods. The default implementation returns <c>false</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#markSupported()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.InputStream.Mark(System.Int32)" />
        <altmember cref="M:Java.IO.InputStream.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "()I", "GetReadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a single byte from this stream and returns it as an integer in the
 range from 0 to 255.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads a single byte from this stream and returns it as an integer in the
 range from 0 to 255. Returns -1 if the end of the stream has been
 reached. Blocks until one byte has been read, the end of the source
 stream is detected or an exception is thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#read()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([B)I", "GetRead_arrayBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>Equivalent to <c>read(buffer, 0, buffer.length)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to <c>read(buffer, 0, buffer.length)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#read(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[] buffer, int byteOffset, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] buffer, int32 byteOffset, int32 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([BII)I", "GetRead_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="byteOffset">To be added.</param>
        <param name="byteCount">To be added.</param>
        <param name="offset">the initial position in <c>buffer</c> to store the bytes read
            from this stream.</param>
        <param name="length">the maximum number of bytes to store in <c>b</c>.</param>
        <summary>Reads up to <c>byteCount</c> bytes from this stream and stores them in
 the byte array <c>buffer</c> starting at <c>byteOffset</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads up to <c>byteCount</c> bytes from this stream and stores them in
 the byte array <c>buffer</c> starting at <c>byteOffset</c>.
 Returns the number of bytes actually read or -1 if the end of the stream
 has been reached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#read(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>byteOffset  buffer.length</c>.</exception>
        <exception cref="T:Java.IO.IOException">if the stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int byteOffset, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 byteOffset, int32 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="byteOffset">To be added.</param>
        <param name="byteCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets this stream to the last marked location.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Resets this stream to the last marked location. Throws an
 <c>IOException</c> if the number of bytes read since the mark has been
 set is greater than the limit provided to <c>mark</c>, or if no mark
 has been set.
 </para>
          <para tool="javadoc-to-mdoc">
 This implementation always throws an <c>IOException</c> and concrete
 subclasses should provide the proper implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual long Skip (long byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Skip(int64 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skip", "(J)J", "GetSkip_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="byteCount">To be added.</param>
        <summary>Skips at most <c>byteCount</c> bytes in this stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Skips at most <c>byteCount</c> bytes in this stream. The number of actual
 bytes skipped may be anywhere between 0 and <c>byteCount</c>. If
 <c>byteCount</c> is negative, this method does nothing and returns 0, but
 some subclasses may throw.

 </para>
          <para tool="javadoc-to-mdoc">Note the "at most" in the description of this method: this method may
 choose to skip fewer bytes than requested. Callers should <format type="text/html"><i>always</i></format>
 check the return value.

 </para>
          <para tool="javadoc-to-mdoc">This default implementation reads bytes into a temporary buffer. Concrete
 subclasses should provide their own implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/io/InputStream.html#skip(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or another IOException
             occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; SkipAsync (long byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; SkipAsync(int64 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="byteCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
