<Type Name="InputStream" FullName="Java.IO.InputStream">
  <TypeSignature Language="C#" Value="public abstract class InputStream : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InputStream extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.IO.InputStream" />
  <TypeSignature Language="F#" Value="type InputStream = class&#xA;    inherit Object&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/io/InputStream", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/io/InputStream", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This abstract class is the superclass of all classes representing
            an input stream of bytes.</summary>
    <remarks>
      <para>This abstract class is the superclass of all classes representing
            an input stream of bytes.</para>
      <para>Applications that need to define a subclass of <c>InputStream</c>
            must always provide a method that returns the next byte of input.</para>
      <para>Added in 1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/io/InputStream" title="Reference documentation">Java documentation for <code>java.io.InputStream</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructor for subclasses to call.</summary>
        <remarks>
          <para>Constructor for subclasses to call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#InputStream()" title="Reference documentation">Java documentation for <code>java.io.InputStream.InputStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputStream (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.IO.InputStream : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.IO.InputStream" Usage="new Java.IO.InputStream (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public virtual int Available ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Available() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Available" />
      <MemberSignature Language="F#" Value="abstract member Available : unit -&gt; int&#xA;override this.Available : unit -&gt; int" Usage="inputStream.Available " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("available", "()I", "GetAvailableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("available", "()I", "GetAvailableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an estimate of the number of bytes that can be read (or skipped
            over) from this input stream without blocking, which may be 0, or 0 when
            end of stream is detected.</summary>
        <returns>an estimate of the number of bytes that can be read (or
                        skipped over) from this input stream without blocking or
                        <c>0</c> when it reaches the end of the input stream.</returns>
        <remarks>
          <para>Returns an estimate of the number of bytes that can be read (or skipped
            over) from this input stream without blocking, which may be 0, or 0 when
            end of stream is detected.  The read might be on the same thread or
            another thread.  A single read or skip of this many bytes will not block,
            but may read or skip fewer bytes.</para>
          <para>Note that while some implementations of <c>InputStream</c> will
            return the total number of bytes in the stream, many will not.  It is
            never correct to use the return value of this method to allocate
            a buffer intended to hold all data in this stream.</para>
          <para>A subclass's implementation of this method may choose to throw an
            <c>IOException</c> if this input stream has been closed by invoking the
            <c>#close()</c> method.</para>
          <para>The <c>available</c> method of <c>InputStream</c> always returns
            <c>0</c>.</para>
          <para>This method should be overridden by subclasses.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#available()" title="Reference documentation">Java documentation for <code>java.io.InputStream.available()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or an error occurs
</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="inputStream.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.ICloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this input stream and releases any system resources associated
            with the stream.</summary>
        <remarks>
          <para>Closes this input stream and releases any system resources associated
            with the stream.</para>
          <para>The <c>close</c> method of <c>InputStream</c> does
            nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#close()" title="Reference documentation">Java documentation for <code>java.io.InputStream.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while closing this stream.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.IO.InputStream.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.IO.InputStream.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mark">
      <MemberSignature Language="C#" Value="public virtual void Mark (int readlimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Mark(int32 readlimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Mark(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Mark : int -&gt; unit&#xA;override this.Mark : int -&gt; unit" Usage="inputStream.Mark readlimit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mark", "(I)V", "GetMark_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mark", "(I)V", "GetMark_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readlimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="readlimit">the maximum limit of bytes that can be read before
                                 the mark position becomes invalid.</param>
        <summary>Marks the current position in this input stream.</summary>
        <remarks>
          <para>Marks the current position in this input stream. A subsequent call to
            the <c>reset</c> method repositions this stream at the last marked
            position so that subsequent reads re-read the same bytes.</para>
          <para>The <c>readlimit</c> arguments tells this input stream to
            allow that many bytes to be read before the mark position gets
            invalidated.</para>
          <para>The general contract of <c>mark</c> is that, if the method
            <c>markSupported</c> returns <c>true</c>, the stream somehow
            remembers all the bytes read after the call to <c>mark</c> and
            stands ready to supply those same bytes again if and whenever the method
            <c>reset</c> is called.  However, the stream is not required to
            remember any data at all if more than <c>readlimit</c> bytes are
            read from the stream before <c>reset</c> is called.</para>
          <para>Marking a closed stream should not have any effect on the stream.</para>
          <para>The <c>mark</c> method of <c>InputStream</c> does
            nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#mark(int)" title="Reference documentation">Java documentation for <code>java.io.InputStream.mark(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.InputStream.MarkSupported" />
        <altmember cref="M:Java.IO.InputStream.Reset" />
      </Docs>
    </Member>
    <Member MemberName="MarkSupported">
      <MemberSignature Language="C#" Value="public virtual bool MarkSupported ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MarkSupported() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.MarkSupported" />
      <MemberSignature Language="F#" Value="abstract member MarkSupported : unit -&gt; bool&#xA;override this.MarkSupported : unit -&gt; bool" Usage="inputStream.MarkSupported " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("markSupported", "()Z", "GetMarkSupportedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("markSupported", "()Z", "GetMarkSupportedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tests if this input stream supports the <c>mark</c> and
            <c>reset</c> methods.</summary>
        <returns>
          <c>true</c> if this stream instance supports the mark
                     and reset methods; <c>false</c> otherwise.</returns>
        <remarks>
          <para>Tests if this input stream supports the <c>mark</c> and
            <c>reset</c> methods. Whether or not <c>mark</c> and
            <c>reset</c> are supported is an invariant property of a
            particular input stream instance. The <c>markSupported</c> method
            of <c>InputStream</c> returns <c>false</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#markSupported()" title="Reference documentation">Java documentation for <code>java.io.InputStream.markSupported()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.InputStream.Mark(System.Int32)" />
        <altmember cref="M:Java.IO.InputStream.Reset" />
      </Docs>
    </Member>
    <Member MemberName="NullInputStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream? NullInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream NullInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.NullInputStream" />
      <MemberSignature Language="F#" Value="static member NullInputStream : unit -&gt; System.IO.Stream" Usage="Java.IO.InputStream.NullInputStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nullInputStream", "()Ljava/io/InputStream;", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nullInputStream", "()Ljava/io/InputStream;", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <c>InputStream</c> that reads no bytes.</summary>
        <returns>an <c>InputStream</c> which contains no bytes</returns>
        <remarks>
          <para>Returns a new <c>InputStream</c> that reads no bytes. The returned
            stream is initially open.  The stream is closed by calling the
            <c>close()</c> method.  Subsequent calls to <c>close()</c> have no
            effect.</para>
          <para>While the stream is open, the <c>available()</c>, <c>read()</c>,
            <c>read(byte[])</c>, <c>read(byte[], int, int)</c>,
            <c>readAllBytes()</c>, <c>readNBytes(byte[], int, int)</c>,
            <c>readNBytes(int)</c>, <c>skip(long)</c>, <c>skipNBytes(long)</c>,
            and <c>transferTo()</c> methods all behave as if end of stream has been
            reached.  After the stream has been closed, these methods all throw
            <c>IOException</c>.</para>
          <para>The <c>markSupported()</c> method returns <c>false</c>.  The
            <c>mark()</c> method does nothing, and the <c>reset()</c> method
            throws <c>IOException</c>.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#nullInputStream()" title="Reference documentation">Java documentation for <code>java.io.InputStream.nullInputStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Read" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; int" Usage="inputStream.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "()I", "GetReadHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "()I", "GetReadHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next byte of data from the input stream.</summary>
        <returns>the next byte of data, or <c>-1</c> if the end of the
                        stream is reached.</returns>
        <remarks>
          <para>Reads the next byte of data from the input stream. The value byte is
            returned as an <c>int</c> in the range <c>0</c> to
            <c>255</c>. If no byte is available because the end of the stream
            has been reached, the value <c>-1</c> is returned. This method
            blocks until input data is available, the end of the stream is detected,
            or an exception is thrown.</para>
          <para>A subclass must provide an implementation of this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#read()" title="Reference documentation">Java documentation for <code>java.io.InputStream.read()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Read(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] -&gt; int&#xA;override this.Read : byte[] -&gt; int" Usage="inputStream.Read b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([B)I", "GetRead_arrayBHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([B)I", "GetRead_arrayBHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <summary>Reads some number of bytes from the input stream and stores them into
            the buffer array <c>b</c>.</summary>
        <returns>the total number of bytes read into the buffer, or
                        <c>-1</c> if there is no more data because the end of
                        the stream has been reached.</returns>
        <remarks>
          <para>Reads some number of bytes from the input stream and stores them into
            the buffer array <c>b</c>. The number of bytes actually read is
            returned as an integer.  This method blocks until input data is
            available, end of file is detected, or an exception is thrown.</para>
          <para>If the length of <c>b</c> is zero, then no bytes are read and
            <c>0</c> is returned; otherwise, there is an attempt to read at
            least one byte. If no byte is available because the stream is at the
            end of the file, the value <c>-1</c> is returned; otherwise, at
            least one byte is read and stored into <c>b</c>.</para>
          <para>The first byte read is stored into element <c>b[0]</c>, the
            next one into <c>b[1]</c>, and so on. The number of bytes read is,
            at most, equal to the length of <c>b</c>. Let <i>k</i> be the
            number of bytes actually read; these bytes will be stored in elements
            <c>b[0]</c> through <c>b[</c><i>k</i><c>-1]</c>,
            leaving elements <c>b[</c><i>k</i><c>]</c> through
            <c>b[b.length-1]</c> unaffected.</para>
          <para>The <c>read(b)</c> method for class <c>InputStream</c>
            has the same effect as:</para>
          <code lang="text/java">{@code  read(b, 0, b.length) }</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#read(byte[])" title="Reference documentation">Java documentation for <code>java.io.InputStream.read(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] * int * int -&gt; int&#xA;override this.Read : byte[] * int * int -&gt; int" Usage="inputStream.Read (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([BII)I", "GetRead_arrayBIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([BII)I", "GetRead_arrayBIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <param name="off">the start offset in array <c>b</c>
                              at which the data is written.</param>
        <param name="len">the maximum number of bytes to read.</param>
        <summary>Reads up to <c>len</c> bytes of data from the input stream into
            an array of bytes.</summary>
        <returns>the total number of bytes read into the buffer, or
                        <c>-1</c> if there is no more data because the end of
                        the stream has been reached.</returns>
        <remarks>
          <para>Reads up to <c>len</c> bytes of data from the input stream into
            an array of bytes.  An attempt is made to read as many as
            <c>len</c> bytes, but a smaller number may be read.
            The number of bytes actually read is returned as an integer.</para>
          <para>This method blocks until input data is available, end of file is
            detected, or an exception is thrown.</para>
          <para>If <c>len</c> is zero, then no bytes are read and
            <c>0</c> is returned; otherwise, there is an attempt to read at
            least one byte. If no byte is available because the stream is at end of
            file, the value <c>-1</c> is returned; otherwise, at least one
            byte is read and stored into <c>b</c>.</para>
          <para>The first byte read is stored into element <c>b[off]</c>, the
            next one into <c>b[off+1]</c>, and so on. The number of bytes read
            is, at most, equal to <c>len</c>. Let <i>k</i> be the number of
            bytes actually read; these bytes will be stored in elements
            <c>b[off]</c> through <c>b[off+</c><i>k</i><c>-1]</c>,
            leaving elements <c>b[off+</c><i>k</i><c>]</c> through
            <c>b[off+len-1]</c> unaffected.</para>
          <para>In every case, elements <c>b[0]</c> through
            <c>b[off-1]</c> and elements <c>b[off+len]</c> through
            <c>b[b.length-1]</c> are unaffected.</para>
          <para>The <c>read(b, off, len)</c> method
            for class <c>InputStream</c> simply calls the method
            <c>read()</c> repeatedly. If the first such call results in an
            <c>IOException</c>, that exception is returned from the call to
            the <c>read(b,</c><c>off,</c><c>len)</c> method.  If
            any subsequent call to <c>read()</c> results in a
            <c>IOException</c>, the exception is caught and treated as if it
            were end of file; the bytes read up to that point are stored into
            <c>b</c> and the number of bytes read before the exception
            occurred is returned. The default implementation of this method blocks
            until the requested amount of input data <c>len</c> has been read,
            end of file is detected, or an exception is thrown. Subclasses are
            encouraged to provide a more efficient implementation of this method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#read(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.InputStream.read(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>byteOffset  buffer.length</c>.</exception>
        <exception cref="T:Java.IO.IOException">if the stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public virtual byte[]? ReadAllBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ReadAllBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadAllBytes" />
      <MemberSignature Language="F#" Value="abstract member ReadAllBytes : unit -&gt; byte[]&#xA;override this.ReadAllBytes : unit -&gt; byte[]" Usage="inputStream.ReadAllBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readAllBytes", "()[B", "GetReadAllBytesHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readAllBytes", "()[B", "GetReadAllBytesHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads all remaining bytes from the input stream.</summary>
        <returns>a byte array containing the bytes read from this input stream</returns>
        <remarks>
          <para>Reads all remaining bytes from the input stream. This method blocks until
            all remaining bytes have been read and end of stream is detected, or an
            exception is thrown. This method does not close the input stream.</para>
          <para>When this stream reaches end of stream, further invocations of this
            method will return an empty byte array.</para>
          <para>Note that this method is intended for simple cases where it is
            convenient to read all bytes into a byte array. It is not intended for
            reading input streams with large amounts of data.</para>
          <para>The behavior for the case where the input stream is <i>asynchronously
            closed</i>, or the thread interrupted during the read, is highly input
            stream specific, and therefore not specified.</para>
          <para>If an I/O error occurs reading from the input stream, then it may do
            so after some, but not all, bytes have been read. Consequently the input
            stream may not be at end of stream and may be in an inconsistent state.
            It is strongly recommended that the stream be promptly closed if an I/O
            error occurs.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#readAllBytes()" title="Reference documentation">Java documentation for <code>java.io.InputStream.readAllBytes()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadAsync" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="inputStream.ReadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadAsync(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : byte[] -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="inputStream.ReadAsync b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="inputStream.ReadAsync (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <param name="off">To be added.</param>
        <param name="len">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadNBytes">
      <MemberSignature Language="C#" Value="public virtual byte[]? ReadNBytes (int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ReadNBytes(int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadNBytes(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ReadNBytes : int -&gt; byte[]&#xA;override this.ReadNBytes : int -&gt; byte[]" Usage="inputStream.ReadNBytes len" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readNBytes", "(I)[B", "GetReadNBytes_IHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readNBytes", "(I)[B", "GetReadNBytes_IHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="len">the maximum number of bytes to read</param>
        <summary>Reads up to a specified number of bytes from the input stream.</summary>
        <returns>a byte array containing the bytes read from this input stream</returns>
        <remarks>
          <para>Reads up to a specified number of bytes from the input stream. This
            method blocks until the requested number of bytes has been read, end
            of stream is detected, or an exception is thrown. This method does not
            close the input stream.</para>
          <para>The length of the returned array equals the number of bytes read
            from the stream. If <c>len</c> is zero, then no bytes are read and
            an empty byte array is returned. Otherwise, up to <c>len</c> bytes
            are read from the stream. Fewer than <c>len</c> bytes may be read if
            end of stream is encountered.</para>
          <para>When this stream reaches end of stream, further invocations of this
            method will return an empty byte array.</para>
          <para>Note that this method is intended for simple cases where it is
            convenient to read the specified number of bytes into a byte array. The
            total amount of memory allocated by this method is proportional to the
            number of bytes read from the stream which is bounded by <c>len</c>.
            Therefore, the method may be safely called with very large values of
            <c>len</c> provided sufficient memory is available.</para>
          <para>The behavior for the case where the input stream is <i>asynchronously
            closed</i>, or the thread interrupted during the read, is highly input
            stream specific, and therefore not specified.</para>
          <para>If an I/O error occurs reading from the input stream, then it may do
            so after some, but not all, bytes have been read. Consequently the input
            stream may not be at end of stream and may be in an inconsistent state.
            It is strongly recommended that the stream be promptly closed if an I/O
            error occurs.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#readNBytes(int)" title="Reference documentation">Java documentation for <code>java.io.InputStream.readNBytes(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadNBytes">
      <MemberSignature Language="C#" Value="public virtual int ReadNBytes (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadNBytes(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.ReadNBytes(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ReadNBytes : byte[] * int * int -&gt; int&#xA;override this.ReadNBytes : byte[] * int * int -&gt; int" Usage="inputStream.ReadNBytes (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readNBytes", "([BII)I", "GetReadNBytes_arrayBIIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readNBytes", "([BII)I", "GetReadNBytes_arrayBIIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the byte array into which the data is read</param>
        <param name="off">the start offset in <c>b</c> at which the data is written</param>
        <param name="len">the maximum number of bytes to read</param>
        <summary>Reads the requested number of bytes from the input stream into the given
            byte array.</summary>
        <returns>the actual number of bytes read into the buffer</returns>
        <remarks>
          <para>Reads the requested number of bytes from the input stream into the given
            byte array. This method blocks until <c>len</c> bytes of input data have
            been read, end of stream is detected, or an exception is thrown. The
            number of bytes actually read, possibly zero, is returned. This method
            does not close the input stream.</para>
          <para>In the case where end of stream is reached before <c>len</c> bytes
            have been read, then the actual number of bytes read will be returned.
            When this stream reaches end of stream, further invocations of this
            method will return zero.</para>
          <para>If <c>len</c> is zero, then no bytes are read and <c>0</c> is
            returned; otherwise, there is an attempt to read up to <c>len</c> bytes.</para>
          <para>The first byte read is stored into element <c>b[off]</c>, the next
            one in to <c>b[off+1]</c>, and so on. The number of bytes read is, at
            most, equal to <c>len</c>. Let <i>k</i> be the number of bytes actually
            read; these bytes will be stored in elements <c>b[off]</c> through
            <c>b[off+</c><i>k</i><c>-1]</c>, leaving elements <c>b[off+</c><i>k</i><c>]</c> through <c>b[off+len-1]</c> unaffected.</para>
          <para>The behavior for the case where the input stream is <i>asynchronously
            closed</i>, or the thread interrupted during the read, is highly input
            stream specific, and therefore not specified.</para>
          <para>If an I/O error occurs reading from the input stream, then it may do
            so after some, but not all, bytes of <c>b</c> have been updated with
            data from the input stream. Consequently the input stream and <c>b</c>
            may be in an inconsistent state. It is strongly recommended that the
            stream be promptly closed if an I/O error occurs.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#readNBytes(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.InputStream.readNBytes(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="inputStream.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reset", "()V", "GetResetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reset", "()V", "GetResetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Repositions this stream to the position at the time the
            <c>mark</c> method was last called on this input stream.</summary>
        <remarks>
          <para>Repositions this stream to the position at the time the
            <c>mark</c> method was last called on this input stream.</para>
          <para>The general contract of <c>reset</c> is:
            
            &lt;ul&gt;
            &lt;li&gt; If the method <c>markSupported</c> returns
            <c>true</c>, then:
            
                &lt;ul&gt;&lt;li&gt; If the method <c>mark</c> has not been called since
                the stream was created, or the number of bytes read from the stream
                since <c>mark</c> was last called is larger than the argument
                to <c>mark</c> at that last call, then an
                <c>IOException</c> might be thrown.
            
                &lt;li&gt; If such an <c>IOException</c> is not thrown, then the
                stream is reset to a state such that all the bytes read since the
                most recent call to <c>mark</c> (or since the start of the
                file, if <c>mark</c> has not been called) will be resupplied
                to subsequent callers of the <c>read</c> method, followed by
                any bytes that otherwise would have been the next input data as of
                the time of the call to <c>reset</c>. &lt;/ul&gt;
            
            &lt;li&gt; If the method <c>markSupported</c> returns
            <c>false</c>, then:
            
                &lt;ul&gt;&lt;li&gt; The call to <c>reset</c> may throw an
                <c>IOException</c>.
            
                &lt;li&gt; If an <c>IOException</c> is not thrown, then the stream
                is reset to a fixed state that depends on the particular type of the
                input stream and how it was created. The bytes that will be supplied
                to subsequent callers of the <c>read</c> method depend on the
                particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;</para>
          <para>The method <c>reset</c> for class <c>InputStream</c>
            does nothing except throw an <c>IOException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#reset()" title="Reference documentation">Java documentation for <code>java.io.InputStream.reset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or another IOException occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual long Skip (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Skip(int64 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.Skip(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Skip : int64 -&gt; int64&#xA;override this.Skip : int64 -&gt; int64" Usage="inputStream.Skip n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("skip", "(J)J", "GetSkip_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("skip", "(J)J", "GetSkip_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">the number of bytes to be skipped.</param>
        <summary>Skips over and discards <c>n</c> bytes of data from this input
            stream.</summary>
        <returns>the actual number of bytes skipped which might be zero.</returns>
        <remarks>
          <para>Skips over and discards <c>n</c> bytes of data from this input
            stream. The <c>skip</c> method may, for a variety of reasons, end
            up skipping over some smaller number of bytes, possibly <c>0</c>.
            This may result from any of a number of conditions; reaching end of file
            before <c>n</c> bytes have been skipped is only one possibility.
            The actual number of bytes skipped is returned. If <c>n</c> is
            negative, the <c>skip</c> method for class <c>InputStream</c> always
            returns 0, and no bytes are skipped. Subclasses may handle the negative
            value differently.</para>
          <para>The <c>skip</c> method implementation of this class creates a
            byte array and then repeatedly reads into it until <c>n</c> bytes
            have been read or the end of the stream has been reached. Subclasses are
            encouraged to provide a more efficient implementation of this method.
            For instance, the implementation may depend on the ability to seek.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#skip(long)" title="Reference documentation">Java documentation for <code>java.io.InputStream.skip(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this stream is closed or another IOException
             occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; SkipAsync (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; SkipAsync(int64 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.SkipAsync(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.SkipAsync : int64 -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="inputStream.SkipAsync n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipNBytes">
      <MemberSignature Language="C#" Value="public virtual void SkipNBytes (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SkipNBytes(int64 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.SkipNBytes(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SkipNBytes : int64 -&gt; unit&#xA;override this.SkipNBytes : int64 -&gt; unit" Usage="inputStream.SkipNBytes n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("skipNBytes", "(J)V", "GetSkipNBytes_JHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("skipNBytes", "(J)V", "GetSkipNBytes_JHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">the number of bytes to be skipped.</param>
        <summary>Skips over and discards exactly <c>n</c> bytes of data from this input
            stream.</summary>
        <remarks>
          <para>Skips over and discards exactly <c>n</c> bytes of data from this input
            stream.  If <c>n</c> is zero, then no bytes are skipped.
            If <c>n</c> is negative, then no bytes are skipped.
            Subclasses may handle the negative value differently.</para>
          <para>This method blocks until the requested number of bytes has been
            skipped, end of file is reached, or an exception is thrown.</para>
          <para>If end of stream is reached before the stream is at the desired
            position, then an <c>EOFException</c> is thrown.</para>
          <para>If an I/O error occurs, then the input stream may be
            in an inconsistent state. It is strongly recommended that the
            stream be promptly closed if an I/O error occurs.</para>
          <para>Added in 12.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#skipNBytes(long)" title="Reference documentation">Java documentation for <code>java.io.InputStream.skipNBytes(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.IO.InputStream.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.IO.InputStream.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.IO.InputStream.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.IO.InputStream.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferTo">
      <MemberSignature Language="C#" Value="public virtual long TransferTo (System.IO.Stream? out);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TransferTo(class System.IO.Stream out) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.InputStream.TransferTo(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member TransferTo : System.IO.Stream -&gt; int64&#xA;override this.TransferTo : System.IO.Stream -&gt; int64" Usage="inputStream.TransferTo out" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("transferTo", "(Ljava/io/OutputStream;)J", "GetTransferTo_Ljava_io_OutputStream_Handler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("transferTo", "(Ljava/io/OutputStream;)J", "GetTransferTo_Ljava_io_OutputStream_Handler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="out">the output stream, non-null</param>
        <summary>Reads all bytes from this input stream and writes the bytes to the
            given output stream in the order that they are read.</summary>
        <returns>the number of bytes transferred</returns>
        <remarks>
          <para>Reads all bytes from this input stream and writes the bytes to the
            given output stream in the order that they are read. On return, this
            input stream will be at end of stream. This method does not close either
            stream.</para>
          <para>This method may block indefinitely reading from the input stream, or
            writing to the output stream. The behavior for the case where the input
            and/or output stream is <i>asynchronously closed</i>, or the thread
            interrupted during the transfer, is highly input and output stream
            specific, and therefore not specified.</para>
          <para>If an I/O error occurs reading from the input stream or writing to the
            output stream, then it may do so after some bytes have been read or
            written. Consequently the input stream may not be at end of stream and
            one, or both, streams may be in an inconsistent state. It is strongly
            recommended that both streams be promptly closed if an I/O error occurs.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/InputStream#transferTo(java.io.OutputStream)" title="Reference documentation">Java documentation for <code>java.io.InputStream.transferTo(java.io.OutputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
