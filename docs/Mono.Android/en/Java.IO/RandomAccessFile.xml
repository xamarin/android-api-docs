<Type Name="RandomAccessFile" FullName="Java.IO.RandomAccessFile">
  <TypeSignature Language="C#" Value="public class RandomAccessFile : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ICloseable, Java.IO.IDataInput, Java.IO.IDataOutput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RandomAccessFile extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ICloseable, class Java.IO.IDataInput, class Java.IO.IDataOutput, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.IO.RandomAccessFile" />
  <TypeSignature Language="F#" Value="type RandomAccessFile = class&#xA;    inherit Object&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IDataInput&#xA;    interface IDataOutput" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.IDataInput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.IDataOutput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/io/RandomAccessFile", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/io/RandomAccessFile", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Instances of this class support both reading and writing to a
            random access file.</summary>
    <remarks>
      <para>Instances of this class support both reading and writing to a
            random access file. A random access file behaves like a large
            array of bytes stored in the file system. There is a kind of cursor,
            or index into the implied array, called the &lt;em&gt;file pointer&lt;/em&gt;;
            input operations read bytes starting at the file pointer and advance
            the file pointer past the bytes read. If the random access file is
            created in read/write mode, then output operations are also available;
            output operations write bytes starting at the file pointer and advance
            the file pointer past the bytes written. Output operations that write
            past the current end of the implied array cause the array to be
            extended. The file pointer can be read by the
            <c>getFilePointer</c> method and set by the <c>seek</c>
            method.</para>
      <para>It is generally true of all the reading routines in this class that
            if end-of-file is reached before the desired number of bytes has been
            read, an <c>EOFException</c> (which is a kind of
            <c>IOException</c>) is thrown. If any byte cannot be read for
            any reason other than end-of-file, an <c>IOException</c> other
            than <c>EOFException</c> is thrown. In particular, an
            <c>IOException</c> may be thrown if the stream has been closed.</para>
      <para>Added in JDK1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/io/RandomAccessFile" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RandomAccessFile (Java.IO.File? file, string? mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.IO.File file, string mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.#ctor(Java.IO.File,System.String)" />
      <MemberSignature Language="F#" Value="new Java.IO.RandomAccessFile : Java.IO.File * string -&gt; Java.IO.RandomAccessFile" Usage="new Java.IO.RandomAccessFile (file, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/io/File;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/io/File;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="file" Type="Java.IO.File" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">the file object</param>
        <param name="mode">the access mode, as described
                               above</param>
        <summary>Creates a random access file stream to read from, and optionally to
            write to, the file specified by the <c>File</c> argument.</summary>
        <remarks>
          <para>Creates a random access file stream to read from, and optionally to
            write to, the file specified by the <c>File</c> argument.  A new <c>FileDescriptor</c> object is created to represent this file connection.</para>
          <para>The "mode"&gt;&lt;c&gt;mode&lt;/c&gt; argument specifies the access mode
            in which the file is to be opened.  The permitted values and their
            meanings are:
            
            &lt;table summary="Access mode permitted values and meanings"&gt;
            &lt;tr&gt;&lt;th align="left"&gt;Value&lt;/th&gt;&lt;th align="left"&gt;Meaning&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td valign="top"&gt;<c>"r"</c>&lt;/td&gt;
                &lt;td&gt; Open for reading only.  Invoking any of the <c>write</c>
                methods of the resulting object will cause an <c>java.io.IOException</c> to be thrown. &lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td valign="top"&gt;<c>"rw"</c>&lt;/td&gt;
                &lt;td&gt; Open for reading and writing.  If the file does not already
                exist then an attempt will be made to create it. &lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td valign="top"&gt;<c>"rws"</c>&lt;/td&gt;
                &lt;td&gt; Open for reading and writing, as with <c>"rw"</c>, and also
                require that every update to the file's content or metadata be
                written synchronously to the underlying storage device.  &lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td valign="top"&gt;<c>"rwd"&amp;nbsp;&amp;nbsp;</c>&lt;/td&gt;
                &lt;td&gt; Open for reading and writing, as with <c>"rw"</c>, and also
                require that every update to the file's content be written
                synchronously to the underlying storage device. &lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;
            
            The <c>"rws"</c> and <c>"rwd"</c> modes work much like the <c>java.nio.channels.FileChannel#force(boolean) force(boolean)</c> method of
            the <c>java.nio.channels.FileChannel</c> class, passing arguments of
            <c>true</c> and <c>false</c>, respectively, except that they always
            apply to every I/O operation and are therefore often more efficient.  If
            the file resides on a local storage device then when an invocation of a
            method of this class returns it is guaranteed that all changes made to
            the file by that invocation will have been written to that device.  This
            is useful for ensuring that critical information is not lost in the
            event of a system crash.  If the file does not reside on a local device
            then no such guarantee is made.</para>
          <para>The <c>"rwd"</c> mode can be used to reduce the number of I/O
            operations performed.  Using <c>"rwd"</c> only requires updates to the
            file's content to be written to storage; using <c>"rws"</c> requires
            updates to both the file's content and its metadata to be written, which
            generally requires at least one more low-level I/O operation.</para>
          <para>If there is a security manager, its <c>checkRead</c> method is
            called with the pathname of the <c>file</c> argument as its
            argument to see if read access to the file is allowed.  If the mode
            allows writing, the security manager's <c>checkWrite</c> method is
            also called with the path argument to see if write access to the file is
            allowed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#RandomAccessFile(java.io.File,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.RandomAccessFile(java.io.File, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">if the file cannot be opened or created according to <c>mode</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>mode</c> is not <c>"r"</c>, <c>"rw"</c>, <c>"rws"</c> or <c>"rwd"</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RandomAccessFile (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.IO.RandomAccessFile : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.IO.RandomAccessFile" Usage="new Java.IO.RandomAccessFile (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RandomAccessFile (string? name, string? mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.#ctor(System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.IO.RandomAccessFile : string * string -&gt; Java.IO.RandomAccessFile" Usage="new Java.IO.RandomAccessFile (name, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">the system-dependent filename</param>
        <param name="mode">the access mode</param>
        <summary>Creates a random access file stream to read from, and optionally
            to write to, a file with the specified name.</summary>
        <remarks>
          <para>Creates a random access file stream to read from, and optionally
            to write to, a file with the specified name. A new
            <c>FileDescriptor</c> object is created to represent the
            connection to the file.</para>
          <para>The <c>mode</c> argument specifies the access mode with which the
            file is to be opened.  The permitted values and their meanings are as
            specified for the &lt;c&gt;RandomAccessFile(File,String)&lt;/c&gt; constructor.</para>
          <para>If there is a security manager, its <c>checkRead</c> method
            is called with the <c>name</c> argument
            as its argument to see if read access to the file is allowed.
            If the mode allows writing, the security manager's
            <c>checkWrite</c> method
            is also called with the <c>name</c> argument
            as its argument to see if write access to the file is allowed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#RandomAccessFile(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.RandomAccessFile(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">if the file cannot be opened or created according to <c>mode</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>mode</c> is not <c>"r"</c>, <c>"rw"</c>, <c>"rws"</c> or <c>"rwd"</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Channel">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileChannel? Channel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Nio.Channels.FileChannel Channel" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.Channel" />
      <MemberSignature Language="F#" Value="member this.Channel : Java.Nio.Channels.FileChannel" Usage="Java.IO.RandomAccessFile.Channel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getChannel", "()Ljava/nio/channels/FileChannel;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getChannel", "()Ljava/nio/channels/FileChannel;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the unique <c>java.nio.channels.FileChannel FileChannel</c>
            object associated with this file.</summary>
        <value>the file channel associated with this file</value>
        <remarks>
          <para>Returns the unique <c>java.nio.channels.FileChannel FileChannel</c>
            object associated with this file.</para>
          <para>The <c>java.nio.channels.FileChannel#position()
            position</c> of the returned channel will always be equal to
            this object's file-pointer offset as returned by the <c>#getFilePointer getFilePointer</c> method.  Changing this object's
            file-pointer offset, whether explicitly or by reading or writing bytes,
            will change the position of the channel, and vice versa.  Changing the
            file's length via this object will change the length seen via the file
            channel, and vice versa.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#getChannel()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.getChannel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Close" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="randomAccessFile.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.ICloseable.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("close", "()V", "GetCloseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("close", "()V", "GetCloseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this random access file stream and releases any system
            resources associated with the stream.</summary>
        <remarks>
          <para>Closes this random access file stream and releases any system
            resources associated with the stream. A closed random access
            file cannot perform input or output operations and cannot be
            reopened.</para>
          <para>If this file has an associated channel then the channel is closed
            as well.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#close()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.close()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while closing this file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FD">
      <MemberSignature Language="C#" Value="public Java.IO.FileDescriptor? FD { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.FileDescriptor FD" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.FD" />
      <MemberSignature Language="F#" Value="member this.FD : Java.IO.FileDescriptor" Usage="Java.IO.RandomAccessFile.FD" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFD", "()Ljava/io/FileDescriptor;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFD", "()Ljava/io/FileDescriptor;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.FileDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the opaque file descriptor object associated with this
            stream.</summary>
        <value>the file descriptor object associated with this stream.</value>
        <remarks>
          <para>Returns the opaque file descriptor object associated with this
            stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#getFD()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.getFD()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while getting the file descriptor of this
             file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePointer">
      <MemberSignature Language="C#" Value="public virtual long FilePointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 FilePointer" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.FilePointer" />
      <MemberSignature Language="F#" Value="member this.FilePointer : int64" Usage="Java.IO.RandomAccessFile.FilePointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFilePointer", "()J", "GetGetFilePointerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFilePointer", "()J", "GetGetFilePointerHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current offset in this file.</summary>
        <value>the offset from the beginning of the file, in bytes,
                        at which the next read or write occurs.</value>
        <remarks>
          <para>Returns the current offset in this file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#getFilePointer()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.getFilePointer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs while getting the file pointer of this
             file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.IO.RandomAccessFile.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual long Length ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Length() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Length" />
      <MemberSignature Language="F#" Value="abstract member Length : unit -&gt; int64&#xA;override this.Length : unit -&gt; int64" Usage="randomAccessFile.Length " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("length", "()J", "GetLengthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("length", "()J", "GetLengthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the length of this file.</summary>
        <returns>the length of this file, measured in bytes.</returns>
        <remarks>
          <para>Returns the length of this file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#length()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.length()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Read" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; int&#xA;override this.Read : unit -&gt; int" Usage="randomAccessFile.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "()I", "GetReadHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "()I", "GetReadHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a byte of data from this file.</summary>
        <returns>the next byte of data, or <c>-1</c> if the end of the
                        file has been reached.</returns>
        <remarks>
          <para>Reads a byte of data from this file. The byte is returned as an
            integer in the range 0 to 255 (<c>0x00-0x0ff</c>). This
            method blocks if no input is yet available.</para>
          <para>Although <c>RandomAccessFile</c> is not a subclass of
            <c>InputStream</c>, this method behaves in exactly the same
            way as the <c>InputStream#read()</c> method of
            <c>InputStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#read()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.read()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Read(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] -&gt; int&#xA;override this.Read : byte[] -&gt; int" Usage="randomAccessFile.Read b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([B)I", "GetRead_arrayBHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([B)I", "GetRead_arrayBHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <summary>Reads up to <c>b.length</c> bytes of data from this file
            into an array of bytes.</summary>
        <returns>the total number of bytes read into the buffer, or
                        <c>-1</c> if there is no more data because the end of
                        this file has been reached.</returns>
        <remarks>
          <para>Reads up to <c>b.length</c> bytes of data from this file
            into an array of bytes. This method blocks until at least one byte
            of input is available.</para>
          <para>Although <c>RandomAccessFile</c> is not a subclass of
            <c>InputStream</c>, this method behaves in exactly the
            same way as the <c>InputStream#read(byte[])</c> method of
            <c>InputStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#read(byte[])" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.read(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] * int * int -&gt; int&#xA;override this.Read : byte[] * int * int -&gt; int" Usage="randomAccessFile.Read (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "([BII)I", "GetRead_arrayBIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "([BII)I", "GetRead_arrayBIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <param name="off">the start offset in array <c>b</c>
                              at which the data is written.</param>
        <param name="len">the maximum number of bytes read.</param>
        <summary>Reads up to <c>len</c> bytes of data from this file into an
            array of bytes.</summary>
        <returns>the total number of bytes read into the buffer, or
                        <c>-1</c> if there is no more data because the end of
                        the file has been reached.</returns>
        <remarks>
          <para>Reads up to <c>len</c> bytes of data from this file into an
            array of bytes. This method blocks until at least one byte of input
            is available.</para>
          <para>Although <c>RandomAccessFile</c> is not a subclass of
            <c>InputStream</c>, this method behaves in exactly the
            same way as the <c>InputStream#read(byte[], int, int)</c> method of
            <c>InputStream</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#read(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.read(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>byteOffset  buffer.length</c>.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadAsync" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadAsync(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : byte[] -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadAsync b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadAsync (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <param name="off">To be added.</param>
        <param name="len">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public bool ReadBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadBoolean" />
      <MemberSignature Language="F#" Value="abstract member ReadBoolean : unit -&gt; bool&#xA;override this.ReadBoolean : unit -&gt; bool" Usage="randomAccessFile.ReadBoolean " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadBoolean</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readBoolean", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readBoolean", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a <c>boolean</c> from this file.</summary>
        <returns>the <c>boolean</c> value read.</returns>
        <remarks>
          <para>Reads a <c>boolean</c> from this file. This method reads a
            single byte from the file, starting at the current file pointer.
            A value of <c>0</c> represents
            <c>false</c>. Any other value represents <c>true</c>.
            This method blocks until the byte is read, the end of the stream
            is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readBoolean()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readBoolean()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteBoolean(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ReadBooleanAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ReadBooleanAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReadBooleanAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadBooleanAsync" />
      <MemberSignature Language="F#" Value="member this.ReadBooleanAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="randomAccessFile.ReadBooleanAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public sbyte ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadByte" />
      <MemberSignature Language="F#" Value="abstract member ReadByte : unit -&gt; sbyte&#xA;override this.ReadByte : unit -&gt; sbyte" Usage="randomAccessFile.ReadByte " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadByte</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readByte", "()B", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readByte", "()B", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a signed eight-bit value from this file.</summary>
        <returns>the next byte of this file as a signed eight-bit
                        <c>byte</c>.</returns>
        <remarks>
          <para>Reads a signed eight-bit value from this file. This method reads a
            byte from the file, starting from the current file pointer.
            If the byte read is <c>b</c>, where
            <c>0&amp;nbsp;&amp;lt;=&amp;nbsp;b&amp;nbsp;&amp;lt;=&amp;nbsp;255</c>,
            then the result is:
            &lt;blockquote&gt;</para>
          <code lang="text/java">(byte)(b)
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the byte is read, the end of the stream
            is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readByte()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readByte()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteBoolean(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;sbyte&gt; ReadByteAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int8&gt; ReadByteAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadByteAsync" />
      <MemberSignature Language="F#" Value="member this.ReadByteAsync : unit -&gt; System.Threading.Tasks.Task&lt;sbyte&gt;" Usage="randomAccessFile.ReadByteAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public char ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadChar" />
      <MemberSignature Language="F#" Value="abstract member ReadChar : unit -&gt; char&#xA;override this.ReadChar : unit -&gt; char" Usage="randomAccessFile.ReadChar " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadChar</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readChar", "()C", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readChar", "()C", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a character from this file.</summary>
        <returns>the next two bytes of this file, interpreted as a
                             <c>char</c>.</returns>
        <remarks>
          <para>Reads a character from this file. This method reads two
            bytes from the file, starting at the current file pointer.
            If the bytes read, in order, are
            <c>b1</c> and <c>b2</c>, where
            <c>0&amp;nbsp;&amp;lt;=&amp;nbsp;b1,&amp;nbsp;b2&amp;nbsp;&amp;lt;=&amp;nbsp;255</c>,
            then the result is equal to:
            &lt;blockquote&gt;</para>
          <code lang="text/java">(char)((b1 &amp;lt;&amp;lt; 8) | b2)
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the two bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readChar()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readChar()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteChar(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadCharAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;char&gt; ReadCharAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;char&gt; ReadCharAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadCharAsync" />
      <MemberSignature Language="F#" Value="member this.ReadCharAsync : unit -&gt; System.Threading.Tasks.Task&lt;char&gt;" Usage="randomAccessFile.ReadCharAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDouble">
      <MemberSignature Language="C#" Value="public double ReadDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadDouble" />
      <MemberSignature Language="F#" Value="abstract member ReadDouble : unit -&gt; double&#xA;override this.ReadDouble : unit -&gt; double" Usage="randomAccessFile.ReadDouble " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadDouble</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readDouble", "()D", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readDouble", "()D", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a <c>double</c> from this file.</summary>
        <returns>the next eight bytes of this file, interpreted as a
                        <c>double</c>.</returns>
        <remarks>
          <para>Reads a <c>double</c> from this file. This method reads a
            <c>long</c> value, starting at the current file pointer,
            as if by the <c>readLong</c> method
            and then converts that <c>long</c> to a <c>double</c>
            using the <c>longBitsToDouble</c> method in
            class <c>Double</c>.</para>
          <para>This method blocks until the eight bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readDouble()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readDouble()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteDouble(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ReadDoubleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;double&gt; ReadDoubleAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;float64&gt; ReadDoubleAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadDoubleAsync" />
      <MemberSignature Language="F#" Value="member this.ReadDoubleAsync : unit -&gt; System.Threading.Tasks.Task&lt;double&gt;" Usage="randomAccessFile.ReadDoubleAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFloat">
      <MemberSignature Language="C#" Value="public float ReadFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFloat" />
      <MemberSignature Language="F#" Value="abstract member ReadFloat : unit -&gt; single&#xA;override this.ReadFloat : unit -&gt; single" Usage="randomAccessFile.ReadFloat " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadFloat</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFloat", "()F", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFloat", "()F", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a <c>float</c> from this file.</summary>
        <returns>the next four bytes of this file, interpreted as a
                        <c>float</c>.</returns>
        <remarks>
          <para>Reads a <c>float</c> from this file. This method reads an
            <c>int</c> value, starting at the current file pointer,
            as if by the <c>readInt</c> method
            and then converts that <c>int</c> to a <c>float</c>
            using the <c>intBitsToFloat</c> method in class
            <c>Float</c>.</para>
          <para>This method blocks until the four bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readFloat()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readFloat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteFloat(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFloatAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;float&gt; ReadFloatAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;float32&gt; ReadFloatAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFloatAsync" />
      <MemberSignature Language="F#" Value="member this.ReadFloatAsync : unit -&gt; System.Threading.Tasks.Task&lt;single&gt;" Usage="randomAccessFile.ReadFloatAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFully">
      <MemberSignature Language="C#" Value="public void ReadFully (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadFully(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFully(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member ReadFully : byte[] -&gt; unit&#xA;override this.ReadFully : byte[] -&gt; unit" Usage="randomAccessFile.ReadFully b" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadFully(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFully", "([B)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFully", "([B)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <summary>Reads <c>b.length</c> bytes from this file into the byte
            array, starting at the current file pointer.</summary>
        <remarks>
          <para>Reads <c>b.length</c> bytes from this file into the byte
            array, starting at the current file pointer. This method reads
            repeatedly from the file until the requested number of bytes are
            read. This method blocks until the requested number of bytes are
            read, the end of the stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readFully(byte[])" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readFully(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ReadFully">
      <MemberSignature Language="C#" Value="public void ReadFully (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadFully(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFully(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ReadFully : byte[] * int * int -&gt; unit&#xA;override this.ReadFully : byte[] * int * int -&gt; unit" Usage="randomAccessFile.ReadFully (b, off, len)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadFully(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readFully", "([BII)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readFully", "([BII)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the buffer into which the data is read.</param>
        <param name="off">the start offset of the data.</param>
        <param name="len">the number of bytes to read.</param>
        <summary>Reads exactly <c>len</c> bytes from this file into the byte
            array, starting at the current file pointer.</summary>
        <remarks>
          <para>Reads exactly <c>len</c> bytes from this file into the byte
            array, starting at the current file pointer. This method reads
            repeatedly from the file until the requested number of bytes are
            read. This method blocks until the requested number of bytes are
            read, the end of the stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readFully(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readFully(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of the source stream is reached before enough
             bytes have been read.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>byteCount </c>, or
             <c>offset + byteCount &gt; dst.length</c>.</exception>
        <exception cref="T:Java.IO.IOException">if a problem occurs while reading from this stream.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>dst</c> is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadFullyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReadFullyAsync (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ReadFullyAsync(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFullyAsync(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.ReadFullyAsync : byte[] -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.ReadFullyAsync b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFullyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReadFullyAsync (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ReadFullyAsync(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadFullyAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadFullyAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.ReadFullyAsync (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <param name="off">To be added.</param>
        <param name="len">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInt">
      <MemberSignature Language="C#" Value="public int ReadInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadInt" />
      <MemberSignature Language="F#" Value="abstract member ReadInt : unit -&gt; int&#xA;override this.ReadInt : unit -&gt; int" Usage="randomAccessFile.ReadInt " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadInt</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readInt", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readInt", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a signed 32-bit integer from this file.</summary>
        <returns>the next four bytes of this file, interpreted as an
                        <c>int</c>.</returns>
        <remarks>
          <para>Reads a signed 32-bit integer from this file. This method reads 4
            bytes from the file, starting at the current file pointer.
            If the bytes read, in order, are <c>b1</c>,
            <c>b2</c>, <c>b3</c>, and <c>b4</c>, where
            <c>0&amp;nbsp;&amp;lt;=&amp;nbsp;b1, b2, b3, b4&amp;nbsp;&amp;lt;=&amp;nbsp;255</c>,
            then the result is equal to:
            &lt;blockquote&gt;</para>
          <code lang="text/java">(b1 &amp;lt;&amp;lt; 24) | (b2 &amp;lt;&amp;lt; 16) + (b3 &amp;lt;&amp;lt; 8) + b4
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the four bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readInt()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readInt()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteInt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadIntAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadIntAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadIntAsync" />
      <MemberSignature Language="F#" Value="member this.ReadIntAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadIntAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string? ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadLine" />
      <MemberSignature Language="F#" Value="abstract member ReadLine : unit -&gt; string&#xA;override this.ReadLine : unit -&gt; string" Usage="randomAccessFile.ReadLine " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadLine</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readLine", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readLine", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next line of text from this file.</summary>
        <returns>the next line of text from this file, or null if end
                        of file is encountered before even one byte is read.</returns>
        <remarks>
          <para>Reads the next line of text from this file.  This method successively
            reads bytes from the file, starting at the current file pointer,
            until it reaches a line terminator or the end
            of the file.  Each byte is converted into a character by taking the
            byte's value for the lower eight bits of the character and setting the
            high eight bits of the character to zero.  This method does not,
            therefore, support the full Unicode character set.</para>
          <para>A line of text is terminated by a carriage-return character
            (<c>'\u005Cr'</c>), a newline character (<c>'\u005Cn'</c>), a
            carriage-return character immediately followed by a newline character,
            or the end of the file.  Line-terminating characters are discarded and
            are not included as part of the string returned.</para>
          <para>This method blocks until a newline character is read, a carriage
            return and the byte following it are read (to see if it is a newline),
            the end of the file is reached, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readLine()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readLine()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLineAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string?&gt; ReadLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadLineAsync" />
      <MemberSignature Language="F#" Value="member this.ReadLineAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="randomAccessFile.ReadLineAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadLong">
      <MemberSignature Language="C#" Value="public long ReadLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadLong" />
      <MemberSignature Language="F#" Value="abstract member ReadLong : unit -&gt; int64&#xA;override this.ReadLong : unit -&gt; int64" Usage="randomAccessFile.ReadLong " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadLong</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readLong", "()J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readLong", "()J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a signed 64-bit integer from this file.</summary>
        <returns>the next eight bytes of this file, interpreted as a
                        <c>long</c>.</returns>
        <remarks>
          <para>Reads a signed 64-bit integer from this file. This method reads eight
            bytes from the file, starting at the current file pointer.
            If the bytes read, in order, are
            <c>b1</c>, <c>b2</c>, <c>b3</c>,
            <c>b4</c>, <c>b5</c>, <c>b6</c>,
            <c>b7</c>, and <c>b8,</c> where:
            &lt;blockquote&gt;</para>
          <code lang="text/java">0 &amp;lt;= b1, b2, b3, b4, b5, b6, b7, b8 &amp;lt;=255,
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>then the result is equal to:
            &lt;blockquote&gt;</para>
          <code lang="text/java">((long)b1 &amp;lt;&amp;lt; 56) + ((long)b2 &amp;lt;&amp;lt; 48)
                + ((long)b3 &amp;lt;&amp;lt; 40) + ((long)b4 &amp;lt;&amp;lt; 32)
                + ((long)b5 &amp;lt;&amp;lt; 24) + ((long)b6 &amp;lt;&amp;lt; 16)
                + ((long)b7 &amp;lt;&amp;lt; 8) + b8
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the eight bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readLong()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readLong()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteLong(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ReadLongAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadLongAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadLongAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadLongAsync" />
      <MemberSignature Language="F#" Value="member this.ReadLongAsync : unit -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="randomAccessFile.ReadLongAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadShort">
      <MemberSignature Language="C#" Value="public short ReadShort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 ReadShort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadShort" />
      <MemberSignature Language="F#" Value="abstract member ReadShort : unit -&gt; int16&#xA;override this.ReadShort : unit -&gt; int16" Usage="randomAccessFile.ReadShort " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadShort</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readShort", "()S", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readShort", "()S", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads a signed 16-bit number from this file.</summary>
        <returns>the next two bytes of this file, interpreted as a signed
                        16-bit number.</returns>
        <remarks>
          <para>Reads a signed 16-bit number from this file. The method reads two
            bytes from this file, starting at the current file pointer.
            If the two bytes read, in order, are
            <c>b1</c> and <c>b2</c>, where each of the two values is
            between <c>0</c> and <c>255</c>, inclusive, then the
            result is equal to:
            &lt;blockquote&gt;</para>
          <code lang="text/java">(short)((b1 &amp;lt;&amp;lt; 8) | b2)
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the two bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readShort()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readShort()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteShort(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadShortAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;short&gt; ReadShortAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int16&gt; ReadShortAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadShortAsync" />
      <MemberSignature Language="F#" Value="member this.ReadShortAsync : unit -&gt; System.Threading.Tasks.Task&lt;int16&gt;" Usage="randomAccessFile.ReadShortAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedByte">
      <MemberSignature Language="C#" Value="public int ReadUnsignedByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadUnsignedByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUnsignedByte" />
      <MemberSignature Language="F#" Value="abstract member ReadUnsignedByte : unit -&gt; int&#xA;override this.ReadUnsignedByte : unit -&gt; int" Usage="randomAccessFile.ReadUnsignedByte " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadUnsignedByte</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUnsignedByte", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUnsignedByte", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads an unsigned eight-bit number from this file.</summary>
        <returns>the next byte of this file, interpreted as an unsigned
                        eight-bit number.</returns>
        <remarks>
          <para>Reads an unsigned eight-bit number from this file. This method reads
            a byte from this file, starting at the current file pointer,
            and returns that byte.</para>
          <para>This method blocks until the byte is read, the end of the stream
            is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readUnsignedByte()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readUnsignedByte()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteByte(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedByteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadUnsignedByteAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadUnsignedByteAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUnsignedByteAsync" />
      <MemberSignature Language="F#" Value="member this.ReadUnsignedByteAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadUnsignedByteAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedShort">
      <MemberSignature Language="C#" Value="public int ReadUnsignedShort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadUnsignedShort() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUnsignedShort" />
      <MemberSignature Language="F#" Value="abstract member ReadUnsignedShort : unit -&gt; int&#xA;override this.ReadUnsignedShort : unit -&gt; int" Usage="randomAccessFile.ReadUnsignedShort " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadUnsignedShort</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUnsignedShort", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUnsignedShort", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads an unsigned 16-bit number from this file.</summary>
        <returns>the next two bytes of this file, interpreted as an unsigned
                        16-bit integer.</returns>
        <remarks>
          <para>Reads an unsigned 16-bit number from this file. This method reads
            two bytes from the file, starting at the current file pointer.
            If the bytes read, in order, are
            <c>b1</c> and <c>b2</c>, where
            <c>0&amp;nbsp;&amp;lt;=&amp;nbsp;b1, b2&amp;nbsp;&amp;lt;=&amp;nbsp;255</c>,
            then the result is equal to:
            &lt;blockquote&gt;</para>
          <code lang="text/java">(b1 &amp;lt;&amp;lt; 8) | b2
            </code>
          <para>&lt;/blockquote&gt;</para>
          <para>This method blocks until the two bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readUnsignedShort()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readUnsignedShort()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteShort(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUnsignedShortAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadUnsignedShortAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadUnsignedShortAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUnsignedShortAsync" />
      <MemberSignature Language="F#" Value="member this.ReadUnsignedShortAsync : unit -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.ReadUnsignedShortAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUTF">
      <MemberSignature Language="C#" Value="public string? ReadUTF ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadUTF() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUTF" />
      <MemberSignature Language="F#" Value="abstract member ReadUTF : unit -&gt; string&#xA;override this.ReadUTF : unit -&gt; string" Usage="randomAccessFile.ReadUTF " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.ReadUTF</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readUTF", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readUTF", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads in a string from this file.</summary>
        <returns>a Unicode string.</returns>
        <remarks>
          <para>Reads in a string from this file. The string has been encoded
            using a
            modified UTF-8
            format.</para>
          <para>The first two bytes are read, starting from the current file
            pointer, as if by
            <c>readUnsignedShort</c>. This value gives the number of
            following bytes that are in the encoded string, not
            the length of the resulting string. The following bytes are then
            interpreted as bytes encoding characters in the modified UTF-8 format
            and are converted into characters.</para>
          <para>This method blocks until all the bytes are read, the end of the
            stream is detected, or an exception is thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#readUTF()" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.readUTF()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.EOFException">if the end of this file is detected.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <exception cref="T:Java.IO.UTFDataFormatException">if the bytes read cannot be decoded into a character string.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.WriteUTF(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadUTFAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string?&gt; ReadUTFAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadUTFAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.ReadUTFAsync" />
      <MemberSignature Language="F#" Value="member this.ReadUTFAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="randomAccessFile.ReadUTFAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (long pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(int64 pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Seek(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Seek : int64 -&gt; unit&#xA;override this.Seek : int64 -&gt; unit" Usage="randomAccessFile.Seek pos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("seek", "(J)V", "GetSeek_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("seek", "(J)V", "GetSeek_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="pos">the offset position, measured in bytes from the
                              beginning of the file, at which to set the file
                              pointer.</param>
        <summary>Sets the file-pointer offset, measured from the beginning of this
            file, at which the next read or write occurs.</summary>
        <remarks>
          <para>Sets the file-pointer offset, measured from the beginning of this
            file, at which the next read or write occurs.  The offset may be
            set beyond the end of the file. Setting the offset beyond the end
            of the file does not change the file length.  The file length will
            change only by writing after the offset has been set beyond the end
            of the file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#seek(long)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.seek(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed, <c>pos </c> or another I/O error
             occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public virtual void SetLength (long newLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLength(int64 newLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.SetLength(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetLength : int64 -&gt; unit&#xA;override this.SetLength : int64 -&gt; unit" Usage="randomAccessFile.SetLength newLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLength", "(J)V", "GetSetLength_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLength", "(J)V", "GetSetLength_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newLength" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newLength">The desired length of the file</param>
        <summary>Sets the length of this file.</summary>
        <remarks>
          <para>Sets the length of this file.</para>
          <para>If the present length of the file as returned by the
            <c>length</c> method is greater than the <c>newLength</c>
            argument then the file will be truncated.  In this case, if the file
            offset as returned by the <c>getFilePointer</c> method is greater
            than <c>newLength</c> then after this method returns the offset
            will be equal to <c>newLength</c>.</para>
          <para>If the present length of the file as returned by the
            <c>length</c> method is smaller than the <c>newLength</c>
            argument then the file will be extended.  In this case, the contents of
            the extended portion of the file are not defined.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#setLength(long)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.setLength(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>newLength </c>.</exception>
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipBytes">
      <MemberSignature Language="C#" Value="public virtual int SkipBytes (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SkipBytes(int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.SkipBytes(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SkipBytes : int -&gt; int&#xA;override this.SkipBytes : int -&gt; int" Usage="randomAccessFile.SkipBytes n" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataInput.SkipBytes(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("skipBytes", "(I)I", "GetSkipBytes_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("skipBytes", "(I)I", "GetSkipBytes_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">the number of bytes to be skipped.</param>
        <summary>Attempts to skip over <c>n</c> bytes of input discarding the
            skipped bytes.</summary>
        <returns>the actual number of bytes skipped.</returns>
        <remarks>
          <para>Attempts to skip over <c>n</c> bytes of input discarding the
            skipped bytes.</para>
          <para>This method may skip over some smaller number of bytes, possibly zero.
            This may result from any of a number of conditions; reaching end of
            file before <c>n</c> bytes have been skipped is only one
            possibility. This method never throws an <c>EOFException</c>.
            The actual number of bytes skipped is returned.  If <c>n</c>
            is negative, no bytes are skipped.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#skipBytes(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.skipBytes(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipBytesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SkipBytesAsync (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SkipBytesAsync(int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.SkipBytesAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SkipBytesAsync : int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="randomAccessFile.SkipBytesAsync n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.IO.RandomAccessFile.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.IO.RandomAccessFile.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.IO.RandomAccessFile.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Write(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] -&gt; unit&#xA;override this.Write : byte[] -&gt; unit" Usage="randomAccessFile.Write b" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.Write(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([B)V", "GetWrite_arrayBHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([B)V", "GetWrite_arrayBHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">the data.</param>
        <summary>Writes <c>b.length</c> bytes from the specified byte array
            to this file, starting at the current file pointer.</summary>
        <remarks>
          <para>Writes <c>b.length</c> bytes from the specified byte array
            to this file, starting at the current file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#write(byte[])" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.write(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Write(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="randomAccessFile.Write b" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.Write(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "(I)V", "GetWrite_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "(I)V", "GetWrite_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the <c>byte</c> to be written.</param>
        <summary>Writes the specified byte to this file.</summary>
        <remarks>
          <para>Writes the specified byte to this file. The write starts at
            the current file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#write(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.write(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.Read" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int -&gt; unit&#xA;override this.Write : byte[] * int * int -&gt; unit" Usage="randomAccessFile.Write (b, off, len)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.Write(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("write", "([BII)V", "GetWrite_arrayBIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("write", "([BII)V", "GetWrite_arrayBIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">the data.</param>
        <param name="off">the start offset in the data.</param>
        <param name="len">the number of bytes to write.</param>
        <summary>Writes <c>len</c> bytes from the specified byte array
            starting at offset <c>off</c> to this file.</summary>
        <remarks>
          <para>Writes <c>len</c> bytes from the specified byte array
            starting at offset <c>off</c> to this file.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#write(byte[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.write(byte[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>byteCount </c>, <c>byteOffset </c> or <c>byteCount +
             byteOffset</c> is greater than the size of <c>buffer</c>.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[]? b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteAsync(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : byte[] -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteAsync b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteAsync b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[]? b, int off, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] b, int32 off, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteAsync (b, off, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <param name="off">To be added.</param>
        <param name="len">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (bool v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBoolean(bool v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteBoolean(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WriteBoolean : bool -&gt; unit&#xA;override this.WriteBoolean : bool -&gt; unit" Usage="randomAccessFile.WriteBoolean v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteBoolean(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeBoolean", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeBoolean", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="v">a <c>boolean</c> value to be written.</param>
        <summary>Writes a <c>boolean</c> to the file as a one-byte value.</summary>
        <remarks>
          <para>Writes a <c>boolean</c> to the file as a one-byte value. The
            value <c>true</c> is written out as the value
            <c>(byte)1</c>; the value <c>false</c> is written out
            as the value <c>(byte)0</c>. The write starts at
            the current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeBoolean(boolean)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeBoolean(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadBoolean" />
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteBooleanAsync (bool v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteBooleanAsync(bool v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteBooleanAsync(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanAsync : bool -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteBooleanAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public void WriteByte (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteByte(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteByte : int -&gt; unit&#xA;override this.WriteByte : int -&gt; unit" Usage="randomAccessFile.WriteByte v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteByte(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeByte", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeByte", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">a <c>byte</c> value to be written.</param>
        <summary>Writes a <c>byte</c> to the file as a one-byte value.</summary>
        <remarks>
          <para>Writes a <c>byte</c> to the file as a one-byte value. The
            write starts at the current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeByte(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeByte(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if this file is closed or another I/O error occurs.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadByte" />
        <altmember cref="M:Java.IO.RandomAccessFile.ReadUnsignedByte" />
      </Docs>
    </Member>
    <Member MemberName="WriteByteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteByteAsync (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteByteAsync(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteByteAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteByteAsync : int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteByteAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteBytes">
      <MemberSignature Language="C#" Value="public void WriteBytes (string? s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteBytes(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteBytes : string -&gt; unit&#xA;override this.WriteBytes : string -&gt; unit" Usage="randomAccessFile.WriteBytes s" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteBytes(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeBytes", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeBytes", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">a string of bytes to be written.</param>
        <summary>Writes the string to the file as a sequence of bytes.</summary>
        <remarks>
          <para>Writes the string to the file as a sequence of bytes. Each
            character in the string is written out, in sequence, by discarding
            its high eight bits. The write starts at the current position of
            the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeBytes(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeBytes(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBytesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteBytesAsync (string? s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteBytesAsync(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteBytesAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.WriteBytesAsync : string -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteBytesAsync s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteChar">
      <MemberSignature Language="C#" Value="public void WriteChar (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChar(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteChar(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteChar : int -&gt; unit&#xA;override this.WriteChar : int -&gt; unit" Usage="randomAccessFile.WriteChar v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteChar(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeChar", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeChar", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">a <c>char</c> value to be written.</param>
        <summary>Writes a <c>char</c> to the file as a two-byte value, high
            byte first.</summary>
        <remarks>
          <para>Writes a <c>char</c> to the file as a two-byte value, high
            byte first. The write starts at the current position of the
            file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeChar(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeChar(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadChar" />
      </Docs>
    </Member>
    <Member MemberName="WriteCharAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteCharAsync (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteCharAsync(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteCharAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteCharAsync : int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteCharAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public void WriteChars (string? s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteChars(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteChars : string -&gt; unit&#xA;override this.WriteChars : string -&gt; unit" Usage="randomAccessFile.WriteChars s" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteChars(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeChars", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeChars", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">a <c>String</c> value to be written.</param>
        <summary>Writes a string to the file as a sequence of characters.</summary>
        <remarks>
          <para>Writes a string to the file as a sequence of characters. Each
            character is written to the data output stream as if by the
            <c>writeChar</c> method. The write starts at the current
            position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeChars(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeChars(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadChar" />
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteCharsAsync (string? s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteCharsAsync(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteCharsAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.WriteCharsAsync : string -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteCharsAsync s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDouble">
      <MemberSignature Language="C#" Value="public void WriteDouble (double v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDouble(float64 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteDouble(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member WriteDouble : double -&gt; unit&#xA;override this.WriteDouble : double -&gt; unit" Usage="randomAccessFile.WriteDouble v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteDouble(System.Double)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeDouble", "(D)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeDouble", "(D)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="v">a <c>double</c> value to be written.</param>
        <summary>Converts the double argument to a <c>long</c> using the
            <c>doubleToLongBits</c> method in class <c>Double</c>,
            and then writes that <c>long</c> value to the file as an
            eight-byte quantity, high byte first.</summary>
        <remarks>
          <para>Converts the double argument to a <c>long</c> using the
            <c>doubleToLongBits</c> method in class <c>Double</c>,
            and then writes that <c>long</c> value to the file as an
            eight-byte quantity, high byte first. The write starts at the current
            position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeDouble(double)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeDouble(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadDouble" />
      </Docs>
    </Member>
    <Member MemberName="WriteDoubleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteDoubleAsync (double v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteDoubleAsync(float64 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteDoubleAsync(System.Double)" />
      <MemberSignature Language="F#" Value="member this.WriteDoubleAsync : double -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteDoubleAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFloat">
      <MemberSignature Language="C#" Value="public void WriteFloat (float v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFloat(float32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteFloat(System.Single)" />
      <MemberSignature Language="F#" Value="abstract member WriteFloat : single -&gt; unit&#xA;override this.WriteFloat : single -&gt; unit" Usage="randomAccessFile.WriteFloat v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteFloat(System.Single)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeFloat", "(F)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeFloat", "(F)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="v">a <c>float</c> value to be written.</param>
        <summary>Converts the float argument to an <c>int</c> using the
            <c>floatToIntBits</c> method in class <c>Float</c>,
            and then writes that <c>int</c> value to the file as a
            four-byte quantity, high byte first.</summary>
        <remarks>
          <para>Converts the float argument to an <c>int</c> using the
            <c>floatToIntBits</c> method in class <c>Float</c>,
            and then writes that <c>int</c> value to the file as a
            four-byte quantity, high byte first. The write starts at the
            current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeFloat(float)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeFloat(float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadFloat" />
      </Docs>
    </Member>
    <Member MemberName="WriteFloatAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteFloatAsync (float v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteFloatAsync(float32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteFloatAsync(System.Single)" />
      <MemberSignature Language="F#" Value="member this.WriteFloatAsync : single -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteFloatAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteInt">
      <MemberSignature Language="C#" Value="public void WriteInt (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteInt(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteInt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteInt : int -&gt; unit&#xA;override this.WriteInt : int -&gt; unit" Usage="randomAccessFile.WriteInt v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteInt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeInt", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeInt", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">an <c>int</c> to be written.</param>
        <summary>Writes an <c>int</c> to the file as four bytes, high byte first.</summary>
        <remarks>
          <para>Writes an <c>int</c> to the file as four bytes, high byte first.
            The write starts at the current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeInt(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeInt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadInt" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteIntAsync (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteIntAsync(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteIntAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteIntAsync : int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteIntAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLong">
      <MemberSignature Language="C#" Value="public void WriteLong (long v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLong(int64 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteLong(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member WriteLong : int64 -&gt; unit&#xA;override this.WriteLong : int64 -&gt; unit" Usage="randomAccessFile.WriteLong v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteLong(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeLong", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeLong", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="v">a <c>long</c> to be written.</param>
        <summary>Writes a <c>long</c> to the file as eight bytes, high byte first.</summary>
        <remarks>
          <para>Writes a <c>long</c> to the file as eight bytes, high byte first.
            The write starts at the current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeLong(long)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeLong(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadLong" />
      </Docs>
    </Member>
    <Member MemberName="WriteLongAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteLongAsync (long v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteLongAsync(int64 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteLongAsync(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.WriteLongAsync : int64 -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteLongAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteShort">
      <MemberSignature Language="C#" Value="public void WriteShort (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteShort(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteShort(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member WriteShort : int -&gt; unit&#xA;override this.WriteShort : int -&gt; unit" Usage="randomAccessFile.WriteShort v" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteShort(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeShort", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeShort", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">a <c>short</c> to be written.</param>
        <summary>Writes a <c>short</c> to the file as two bytes, high byte first.</summary>
        <remarks>
          <para>Writes a <c>short</c> to the file as two bytes, high byte first.
            The write starts at the current position of the file pointer.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeShort(int)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeShort(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadShort" />
        <altmember cref="M:Java.IO.IDataInput.ReadUnsignedShort" />
      </Docs>
    </Member>
    <Member MemberName="WriteShortAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteShortAsync (int v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteShortAsync(int32 v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteShortAsync(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteShortAsync : int -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteShortAsync v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUTF">
      <MemberSignature Language="C#" Value="public void WriteUTF (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteUTF(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteUTF(System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteUTF : string -&gt; unit&#xA;override this.WriteUTF : string -&gt; unit" Usage="randomAccessFile.WriteUTF str" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.IO.IDataOutput.WriteUTF(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeUTF", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeUTF", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">a string to be written.</param>
        <summary>Writes a string to the file using
            modified UTF-8
            encoding in a machine-independent manner.</summary>
        <remarks>
          <para>Writes a string to the file using
            modified UTF-8
            encoding in a machine-independent manner.</para>
          <para>First, two bytes are written to the file, starting at the
            current file pointer, as if by the
            <c>writeShort</c> method giving the number of bytes to
            follow. This value is the number of bytes actually written out,
            not the length of the string. Following the length, each character
            of the string is output, in sequence, using the modified UTF-8 encoding
            for each character.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/RandomAccessFile#writeUTF(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.RandomAccessFile.writeUTF(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while writing to this file.</exception>
        <exception cref="T:Java.IO.UTFDataFormatException">if the encoded string is longer than 65535 bytes.</exception>
        <altmember cref="M:Java.IO.RandomAccessFile.ReadUTF" />
      </Docs>
    </Member>
    <Member MemberName="WriteUTFAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteUTFAsync (string? str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteUTFAsync(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.RandomAccessFile.WriteUTFAsync(System.String)" />
      <MemberSignature Language="F#" Value="member this.WriteUTFAsync : string -&gt; System.Threading.Tasks.Task" Usage="randomAccessFile.WriteUTFAsync str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
