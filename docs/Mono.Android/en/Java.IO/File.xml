<Type Name="File" FullName="Java.IO.File">
  <TypeSignature Language="VB.NET" Value="Public Class File&#xA;Inherits Object&#xA;Implements IComparable, IDisposable, IJavaPeerable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class File : Java::Lang::Object, IDisposable, Java::Interop::IJavaPeerable, Java::IO::ISerializable, Java::Lang::IComparable" />
  <TypeSignature Language="C#" Value="public class File : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit File extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class Java.Lang.IComparable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.IO.File" />
  <TypeSignature Language="F#" Value="type File = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/io/File", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/io/File", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An abstract representation of file and directory pathnames.</summary>
    <remarks>
      <para>An abstract representation of file and directory pathnames.</para>
      <para>User interfaces and operating systems use system-dependent &lt;em&gt;pathname
            strings&lt;/em&gt; to name files and directories.  This class presents an
            abstract, system-independent view of hierarchical pathnames.  An
            &lt;em&gt;abstract pathname&lt;/em&gt; has two components:
            
            &lt;ol&gt;
            &lt;li&gt; An optional system-dependent &lt;em&gt;prefix&lt;/em&gt; string,
                 such as a disk-drive specifier, <c>"/"</c>&amp;nbsp;for the UNIX root
                 directory, or <c>"\\\\"</c>&amp;nbsp;for a Microsoft Windows UNC pathname, and
            &lt;li&gt; A sequence of zero or more string &lt;em&gt;names&lt;/em&gt;.
            &lt;/ol&gt;
            
            The first name in an abstract pathname may be a directory name or, in the
            case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name
            in an abstract pathname denotes a directory; the last name may denote
            either a directory or a file.  The &lt;em&gt;empty&lt;/em&gt; abstract pathname has no
            prefix and an empty name sequence.</para>
      <para>The conversion of a pathname string to or from an abstract pathname is
            inherently system-dependent.  When an abstract pathname is converted into a
            pathname string, each name is separated from the next by a single copy of
            the default &lt;em&gt;separator character&lt;/em&gt;.  The default name-separator
            character is defined by the system property <c>file.separator</c>, and
            is made available in the public static fields <c>{@link
            #separator}</c> and <c>{@link #separatorChar}</c> of this class.
            When a pathname string is converted into an abstract pathname, the names
            within it may be separated by the default name-separator character or by any
            other name-separator character that is supported by the underlying system.</para>
      <para>A pathname, whether abstract or in string form, may be either
            &lt;em&gt;absolute&lt;/em&gt; or &lt;em&gt;relative&lt;/em&gt;.  An absolute pathname is complete in
            that no other information is required in order to locate the file that it
            denotes.  A relative pathname, in contrast, must be interpreted in terms of
            information taken from some other pathname.  By default the classes in the
            <c>java.io</c> package always resolve relative pathnames against the
            current user directory.  This directory is named by the system property
            <c>user.dir</c>, and is typically the directory in which the Java
            virtual machine was invoked.</para>
      <para>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname may be obtained by invoking
            the <c>#getParent</c> method of this class and consists of the pathname's
            prefix and each name in the pathname's name sequence except for the last.
            Each directory's absolute pathname is an ancestor of any <c>File</c>
            object with an absolute abstract pathname which begins with the directory's
            absolute pathname.  For example, the directory denoted by the abstract
            pathname <c>"/usr"</c> is an ancestor of the directory denoted by the
            pathname <c>"/usr/local/bin"</c>.</para>
      <para>The prefix concept is used to handle root directories on UNIX platforms,
            and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,
            as follows:
            
            &lt;ul&gt;
            
            &lt;li&gt; For UNIX platforms, the prefix of an absolute pathname is always
            <c>"/"</c>.  Relative pathnames have no prefix.  The abstract pathname
            denoting the root directory has the prefix <c>"/"</c> and an empty
            name sequence.
            
            &lt;li&gt; For Microsoft Windows platforms, the prefix of a pathname that contains a drive
            specifier consists of the drive letter followed by <c>":"</c> and
            possibly followed by <c>"\\"</c> if the pathname is absolute.  The
            prefix of a UNC pathname is <c>"\\\\"</c>; the hostname and the share
            name are the first two names in the name sequence.  A relative pathname that
            does not specify a drive has no prefix.
            
            &lt;/ul&gt;</para>
      <para>Instances of this class may or may not denote an actual file-system
            object such as a file or a directory.  If it does denote such an object
            then that object resides in a <i>partition</i>.  A partition is an
            operating system-specific portion of storage for a file system.  A single
            storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may
            contain multiple partitions.  The object, if any, will reside on the
            partition "partName"&gt;named by some ancestor of the absolute
            form of this pathname.</para>
      <para>A file system may implement restrictions to certain operations on the
            actual file-system object, such as reading, writing, and executing.  These
            restrictions are collectively known as <i>access permissions</i>.  The file
            system may have multiple sets of access permissions on a single object.
            For example, one set may apply to the object's <i>owner</i>, and another
            may apply to all other users.  The access permissions on an object may
            cause some methods in this class to fail.</para>
      <para>Instances of the <c>File</c> class are immutable; that is, once
            created, the abstract pathname represented by a <c>File</c> object
            will never change.
            
            &lt;h3&gt;Interoperability with <c>java.nio.file</c> package&lt;/h3&gt;</para>
      <para>The &lt;c&gt;java.nio.file&lt;/c&gt;
            package defines interfaces and classes for the Java virtual machine to access
            files, file attributes, and file systems. This API may be used to overcome
            many of the limitations of the <c>java.io.File</c> class.
            The <c>#toPath toPath</c> method may be used to obtain a <c>Path</c> that uses the abstract path represented by a <c>File</c> object to
            locate a file. The resulting <c>Path</c> may be used with the <c>java.nio.file.Files</c> class to provide more efficient and extensive access to
            additional file operations, file attributes, and I/O exceptions to help
            diagnose errors when an operation on a file fails.</para>
      <para>On Android strings are converted to UTF-8 byte sequences when sending filenames to
            the operating system, and byte sequences returned by the operating system (from the
            various <c>list</c> methods) are converted to strings by decoding them as UTF-8
            byte sequences.</para>
      <para>Added in JDK1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/io/File" title="Reference documentation">Java documentation for <code>java.io.File</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (uri As URI)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; File(Java::Net::URI ^ uri);" />
      <MemberSignature Language="C#" Value="public File (Java.Net.URI uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Net.URI uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.#ctor(Java.Net.URI)" />
      <MemberSignature Language="F#" Value="new Java.IO.File : Java.Net.URI -&gt; Java.IO.File" Usage="new Java.IO.File uri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/net/URI;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/net/URI;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
      </Parameters>
      <Docs>
        <param name="uri">An absolute, hierarchical URI with a scheme equal to
                    <c>"file"</c>, a non-empty path component, and undefined
                    authority, query, and fragment components</param>
        <summary>Creates a new <c>File</c> instance by converting the given
            <c>file:</c> URI into an abstract pathname.</summary>
        <remarks>
          <para>Creates a new <c>File</c> instance by converting the given
            <c>file:</c> URI into an abstract pathname.</para>
          <para>The exact form of a <c>file:</c> URI is system-dependent, hence
            the transformation performed by this constructor is also
            system-dependent.</para>
          <para>For a given abstract pathname <i>f</i> it is guaranteed that
            
            &lt;blockquote&gt;<c>
            new File(</c><i>&amp;nbsp;f</i><c>.<c>#toURI() toURI</c>()).equals(</c><i>&amp;nbsp;f</i><c>.<c>#getAbsoluteFile() getAbsoluteFile</c>())
            </c>&lt;/blockquote&gt;
            
            so long as the original abstract pathname, the URI, and the new abstract
            pathname are all created in (possibly different invocations of) the same
            Java virtual machine.  This relationship typically does not hold,
            however, when a <c>file:</c> URI that is created in a virtual machine
            on one operating system is converted into an abstract pathname in a
            virtual machine on a different operating system.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#File(java.net.URI)" title="Reference documentation">Java documentation for <code>java.io.File.File(java.net.URI)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>uri == null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>uri</c> does not comply with the conditions above.</exception>
        <altmember cref="M:Java.IO.File.ToURI" />
        <altmember cref="T:Java.Net.URI" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (pathname As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; File(System::String ^ pathname);" />
      <MemberSignature Language="C#" Value="public File (string pathname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pathname) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Java.IO.File : string -&gt; Java.IO.File" Usage="new Java.IO.File pathname" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pathname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pathname">A pathname string</param>
        <summary>Creates a new <c>File</c> instance by converting the given
            pathname string into an abstract pathname.</summary>
        <remarks>
          <para>Creates a new <c>File</c> instance by converting the given
            pathname string into an abstract pathname.  If the given string is
            the empty string, then the result is the empty abstract pathname.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#File(java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.File.File(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>path</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As File, child As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; File(Java::IO::File ^ parent, System::String ^ child);" />
      <MemberSignature Language="C#" Value="public File (Java.IO.File? parent, string child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.IO.File parent, string child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.#ctor(Java.IO.File,System.String)" />
      <MemberSignature Language="F#" Value="new Java.IO.File : Java.IO.File * string -&gt; Java.IO.File" Usage="new Java.IO.File (parent, child)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/io/File;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/io/File;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="Java.IO.File">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="child" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">The parent abstract pathname</param>
        <param name="child">The child pathname string</param>
        <summary>Creates a new <c>File</c> instance from a parent abstract
            pathname and a child pathname string.</summary>
        <remarks>
          <para>Creates a new <c>File</c> instance from a parent abstract
            pathname and a child pathname string.</para>
          <para>If <c>parent</c> is <c>null</c> then the new
            <c>File</c> instance is created as if by invoking the
            single-argument <c>File</c> constructor on the given
            <c>child</c> pathname string.</para>
          <para>Otherwise the <c>parent</c> abstract pathname is taken to
            denote a directory, and the <c>child</c> pathname string is taken
            to denote either a directory or a file.  If the <c>child</c>
            pathname string is absolute then it is converted into a relative
            pathname in a system-dependent way.  If <c>parent</c> is the empty
            abstract pathname then the new <c>File</c> instance is created by
            converting <c>child</c> into an abstract pathname and resolving
            the result against a system-dependent default directory.  Otherwise each
            pathname string is converted into an abstract pathname and the child
            abstract pathname is resolved against the parent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#File(java.io.File,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.File.File(java.io.File, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; File(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected File (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.IO.File : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.IO.File" Usage="new Java.IO.File (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As String, child As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; File(System::String ^ parent, System::String ^ child);" />
      <MemberSignature Language="C#" Value="public File (string? parent, string child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string parent, string child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.#ctor(System.String,System.String)" />
      <MemberSignature Language="F#" Value="new Java.IO.File : string * string -&gt; Java.IO.File" Usage="new Java.IO.File (parent, child)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="child" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent">The parent pathname string</param>
        <param name="child">The child pathname string</param>
        <summary>Creates a new <c>File</c> instance from a parent pathname string
            and a child pathname string.</summary>
        <remarks>
          <para>Creates a new <c>File</c> instance from a parent pathname string
            and a child pathname string.</para>
          <para>If <c>parent</c> is <c>null</c> then the new
            <c>File</c> instance is created as if by invoking the
            single-argument <c>File</c> constructor on the given
            <c>child</c> pathname string.</para>
          <para>Otherwise the <c>parent</c> pathname string is taken to denote
            a directory, and the <c>child</c> pathname string is taken to
            denote either a directory or a file.  If the <c>child</c> pathname
            string is absolute then it is converted into a relative pathname in a
            system-dependent way.  If <c>parent</c> is the empty string then
            the new <c>File</c> instance is created by converting
            <c>child</c> into an abstract pathname and resolving the result
            against a system-dependent default directory.  Otherwise each pathname
            string is converted into an abstract pathname and the child abstract
            pathname is resolved against the parent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#File(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.File.File(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name == null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AbsoluteFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AbsoluteFile As File" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::IO::File ^ AbsoluteFile { Java::IO::File ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File AbsoluteFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File AbsoluteFile" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.AbsoluteFile" />
      <MemberSignature Language="F#" Value="member this.AbsoluteFile : Java.IO.File" Usage="Java.IO.File.AbsoluteFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getAbsoluteFile", "()Ljava/io/File;", "GetGetAbsoluteFileHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getAbsoluteFile", "()Ljava/io/File;", "GetGetAbsoluteFileHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute form of this abstract pathname.</summary>
        <value>The absolute abstract pathname denoting the same file or
                     directory as this abstract pathname</value>
        <remarks>
          <para>Returns the absolute form of this abstract pathname.  Equivalent to
            <c>new&amp;nbsp;File(this.{@link #getAbsolutePath})</c>.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getAbsoluteFile()" title="Reference documentation">Java documentation for <code>java.io.File.getAbsoluteFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AbsolutePath">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AbsolutePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AbsolutePath { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual string AbsolutePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AbsolutePath" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.AbsolutePath" />
      <MemberSignature Language="F#" Value="member this.AbsolutePath : string" Usage="Java.IO.File.AbsolutePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getAbsolutePath", "()Ljava/lang/String;", "GetGetAbsolutePathHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getAbsolutePath", "()Ljava/lang/String;", "GetGetAbsolutePathHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path of this file.</summary>
        <value>The absolute pathname string denoting the same file or
                     directory as this abstract pathname</value>
        <remarks>
          <para>Returns the absolute path of this file. An absolute path is a path that starts at a root
            of the file system. On Android, there is only one root: <c>/</c>.</para>
          <para>A common use for absolute paths is when passing paths to a <c>Process</c> as
            command-line arguments, to remove the requirement implied by relative paths, that the
            child must have the same working directory as its parent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getAbsolutePath()" title="Reference documentation">Java documentation for <code>java.io.File.getAbsolutePath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanExecute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanExecute();" />
      <MemberSignature Language="C#" Value="public virtual bool CanExecute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CanExecute" />
      <MemberSignature Language="F#" Value="abstract member CanExecute : unit -&gt; bool&#xA;override this.CanExecute : unit -&gt; bool" Usage="file.CanExecute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canExecute", "()Z", "GetCanExecuteHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canExecute", "()Z", "GetCanExecuteHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tests whether the application can execute the file denoted by this
            abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the abstract pathname exists
                     &lt;em&gt;and&lt;/em&gt; the application is allowed to execute the file</returns>
        <remarks>
          <para>Tests whether the application can execute the file denoted by this
            abstract pathname.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#canExecute()" title="Reference documentation">Java documentation for <code>java.io.File.canExecute()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="CanonicalFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanonicalFile As File" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::IO::File ^ CanonicalFile { Java::IO::File ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File CanonicalFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File CanonicalFile" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.CanonicalFile" />
      <MemberSignature Language="F#" Value="member this.CanonicalFile : Java.IO.File" Usage="Java.IO.File.CanonicalFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCanonicalFile", "()Ljava/io/File;", "GetGetCanonicalFileHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCanonicalFile", "()Ljava/io/File;", "GetGetCanonicalFileHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the canonical form of this abstract pathname.</summary>
        <value>The canonical pathname string denoting the same file or
                     directory as this abstract pathname</value>
        <remarks>
          <para>Returns the canonical form of this abstract pathname.  Equivalent to
            <c>new&amp;nbsp;File(this.{@link #getCanonicalPath})</c>.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getCanonicalFile()" title="Reference documentation">Java documentation for <code>java.io.File.getCanonicalFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CanonicalPath">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanonicalPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CanonicalPath { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual string CanonicalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CanonicalPath" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.CanonicalPath" />
      <MemberSignature Language="F#" Value="member this.CanonicalPath : string" Usage="Java.IO.File.CanonicalPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCanonicalPath", "()Ljava/lang/String;", "GetGetCanonicalPathHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCanonicalPath", "()Ljava/lang/String;", "GetGetCanonicalPathHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the canonical pathname string of this abstract pathname.</summary>
        <value>The canonical pathname string denoting the same file or
                     directory as this abstract pathname</value>
        <remarks>
          <para>Returns the canonical pathname string of this abstract pathname.</para>
          <para>A canonical pathname is both absolute and unique.  The precise
            definition of canonical form is system-dependent.  This method first
            converts this pathname to absolute form if necessary, as if by invoking the
            <c>#getAbsolutePath</c> method, and then maps it to its unique form in a
            system-dependent way.  This typically involves removing redundant names
            such as <c>"."</c> and <c>".."</c> from the pathname, resolving
            symbolic links (on UNIX platforms), and converting drive letters to a
            standard case (on Microsoft Windows platforms).</para>
          <para>Every pathname that denotes an existing file or directory has a
            unique canonical form.  Every pathname that denotes a nonexistent file
            or directory also has a unique canonical form.  The canonical form of
            the pathname of a nonexistent file or directory may be different from
            the canonical form of the same pathname after the file or directory is
            created.  Similarly, the canonical form of the pathname of an existing
            file or directory may be different from the canonical form of the same
            pathname after the file or directory is deleted.</para>
          <para>Added in JDK1.1.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getCanonicalPath()" title="Reference documentation">Java documentation for <code>java.io.File.getCanonicalPath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanRead () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead();" />
      <MemberSignature Language="C#" Value="public virtual bool CanRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CanRead" />
      <MemberSignature Language="F#" Value="abstract member CanRead : unit -&gt; bool&#xA;override this.CanRead : unit -&gt; bool" Usage="file.CanRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canRead", "()Z", "GetCanReadHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canRead", "()Z", "GetCanReadHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tests whether the application can read the file denoted by this
            abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the file specified by this
                     abstract pathname exists &lt;em&gt;and&lt;/em&gt; can be read by the
                     application; <c>false</c> otherwise</returns>
        <remarks>
          <para>Tests whether the application can read the file denoted by this
            abstract pathname.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#canRead()" title="Reference documentation">Java documentation for <code>java.io.File.canRead()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanWrite () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanWrite();" />
      <MemberSignature Language="C#" Value="public virtual bool CanWrite ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWrite() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CanWrite" />
      <MemberSignature Language="F#" Value="abstract member CanWrite : unit -&gt; bool&#xA;override this.CanWrite : unit -&gt; bool" Usage="file.CanWrite " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canWrite", "()Z", "GetCanWriteHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canWrite", "()Z", "GetCanWriteHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tests whether the application can modify the file denoted by this
            abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the file system actually
                     contains a file denoted by this abstract pathname &lt;em&gt;and&lt;/em&gt;
                     the application is allowed to write to the file;
                     <c>false</c> otherwise.</returns>
        <remarks>
          <para>Tests whether the application can modify the file denoted by this
            abstract pathname.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#canWrite()" title="Reference documentation">Java documentation for <code>java.io.File.canWrite()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompareTo (pathname As File) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(Java::IO::File ^ pathname);" />
      <MemberSignature Language="C#" Value="public virtual int CompareTo (Java.IO.File pathname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.IO.File pathname) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CompareTo(Java.IO.File)" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Java.IO.File -&gt; int&#xA;override this.CompareTo : Java.IO.File -&gt; int" Usage="file.CompareTo pathname" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/io/File;)I", "GetCompareTo_Ljava_io_File_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/io/File;)I", "GetCompareTo_Ljava_io_File_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathname" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="pathname">The abstract pathname to be compared to this abstract
                               pathname</param>
        <summary>Compares two abstract pathnames lexicographically.</summary>
        <returns>Zero if the argument is equal to this abstract pathname, a
                     value less than zero if this abstract pathname is
                     lexicographically less than the argument, or a value greater
                     than zero if this abstract pathname is lexicographically
                     greater than the argument</returns>
        <remarks>
          <para>Compares two abstract pathnames lexicographically.  The ordering
            defined by this method depends upon the underlying system.  On UNIX
            systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
            systems it is not.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#compareTo(java.io.File)" title="Reference documentation">Java documentation for <code>java.io.File.compareTo(java.io.File)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="CreateNewFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNewFile () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CreateNewFile();" />
      <MemberSignature Language="C#" Value="public virtual bool CreateNewFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CreateNewFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CreateNewFile" />
      <MemberSignature Language="F#" Value="abstract member CreateNewFile : unit -&gt; bool&#xA;override this.CreateNewFile : unit -&gt; bool" Usage="file.CreateNewFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createNewFile", "()Z", "GetCreateNewFileHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createNewFile", "()Z", "GetCreateNewFileHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Atomically creates a new, empty file named by this abstract pathname if
            and only if a file with this name does not yet exist.</summary>
        <returns>
          <c>true</c> if the named file does not exist and was
                     successfully created; <c>false</c> if the named file
                     already exists</returns>
        <remarks>
          <para>Atomically creates a new, empty file named by this abstract pathname if
            and only if a file with this name does not yet exist.  The check for the
            existence of the file and the creation of the file if it does not exist
            are a single operation that is atomic with respect to all other
            filesystem activities that might affect the file.</para>
          <para>Note: this method should <i>not</i> be used for file-locking, as
            the resulting protocol cannot be made to work reliably. The
            <c>java.nio.channels.FileLock FileLock</c>
            facility should be used instead.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#createNewFile()" title="Reference documentation">Java documentation for <code>java.io.File.createNewFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if it's not possible to create the file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTempFile">
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateTempFile (prefix As String, suffix As String) As File" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::IO::File ^ CreateTempFile(System::String ^ prefix, System::String ^ suffix);" />
      <MemberSignature Language="C#" Value="public static Java.IO.File CreateTempFile (string prefix, string? suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.File CreateTempFile(string prefix, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CreateTempFile(System.String,System.String)" />
      <MemberSignature Language="F#" Value="static member CreateTempFile : string * string -&gt; Java.IO.File" Usage="Java.IO.File.CreateTempFile (prefix, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="suffix" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="prefix">The prefix string to be used in generating the file's
                               name; must be at least three characters long</param>
        <param name="suffix">The suffix string to be used in generating the file's
                               name; may be <c>null</c>, in which case the
                               suffix <c>".tmp"</c> will be used</param>
        <summary>Creates an empty file in the default temporary-file directory, using
            the given prefix and suffix to generate its name.</summary>
        <returns>An abstract pathname denoting a newly-created empty file</returns>
        <remarks>
          <para>Creates an empty file in the default temporary-file directory, using
            the given prefix and suffix to generate its name. Invoking this method
            is equivalent to invoking <c>{@link #createTempFile(java.lang.String,
            java.lang.String, java.io.File)
            createTempFile(prefix,&amp;nbsp;suffix,&amp;nbsp;null)}</c>.</para>
          <para>The <c>java.nio.file.Files#createTempFile(String,String,java.nio.file.attribute.FileAttribute[])
            Files.createTempFile</c> method provides an alternative method to create an
            empty file in the temporary-file directory. Files created by that method
            may have more restrictive access permissions to files created by this
            method and so may be more suited to security-sensitive applications.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#createTempFile(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.io.File.createTempFile(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs when writing the file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTempFile">
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateTempFile (prefix As String, suffix As String, directory As File) As File" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::IO::File ^ CreateTempFile(System::String ^ prefix, System::String ^ suffix, Java::IO::File ^ directory);" />
      <MemberSignature Language="C#" Value="public static Java.IO.File CreateTempFile (string prefix, string? suffix, Java.IO.File? directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.File CreateTempFile(string prefix, string suffix, class Java.IO.File directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.CreateTempFile(System.String,System.String,Java.IO.File)" />
      <MemberSignature Language="F#" Value="static member CreateTempFile : string * string * Java.IO.File -&gt; Java.IO.File" Usage="Java.IO.File.CreateTempFile (prefix, suffix, directory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="suffix" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="directory" Type="Java.IO.File">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="prefix">The prefix string to be used in generating the file's
                               name; must be at least three characters long</param>
        <param name="suffix">The suffix string to be used in generating the file's
                               name; may be <c>null</c>, in which case the
                               suffix <c>".tmp"</c> will be used</param>
        <param name="directory">The directory in which the file is to be created, or
                               <c>null</c> if the default temporary-file
                               directory is to be used</param>
        <summary>Creates a new empty file in the specified directory, using the
            given prefix and suffix strings to generate its name.</summary>
        <returns>An abstract pathname denoting a newly-created empty file</returns>
        <remarks>
          <para>Creates a new empty file in the specified directory, using the
            given prefix and suffix strings to generate its name.  If this method
            returns successfully then it is guaranteed that:
            
            &lt;ol&gt;
            &lt;li&gt; The file denoted by the returned abstract pathname did not exist
                 before this method was invoked, and
            &lt;li&gt; Neither this method nor any of its variants will return the same
                 abstract pathname again in the current invocation of the virtual
                 machine.
            &lt;/ol&gt;
            
            This method provides only part of a temporary-file facility.  To arrange
            for a file created by this method to be deleted automatically, use the
            <c>{@link #deleteOnExit}</c> method.</para>
          <para>The <c>prefix</c> argument must be at least three characters
            long.  It is recommended that the prefix be a short, meaningful string
            such as <c>"hjb"</c> or <c>"mail"</c>.  The
            <c>suffix</c> argument may be <c>null</c>, in which case the
            suffix <c>".tmp"</c> will be used.</para>
          <para>To create the new file, the prefix and the suffix may first be
            adjusted to fit the limitations of the underlying platform.  If the
            prefix is too long then it will be truncated, but its first three
            characters will always be preserved.  If the suffix is too long then it
            too will be truncated, but if it begins with a period character
            (<c>'.'</c>) then the period and the first three characters
            following it will always be preserved.  Once these adjustments have been
            made the name of the new file will be generated by concatenating the
            prefix, five or more internally-generated characters, and the suffix.</para>
          <para>If the <c>directory</c> argument is <c>null</c> then the
            system-dependent default temporary-file directory will be used.  The
            default temporary-file directory is specified by the system property
            <c>java.io.tmpdir</c>.  On UNIX systems the default value of this
            property is typically <c>"/tmp"</c> or <c>"/var/tmp"</c>; on
            Microsoft Windows systems it is typically <c>"C:\\WINNT\\TEMP"</c>.  A different
            value may be given to this system property when the Java virtual machine
            is invoked, but programmatic changes to this property are not guaranteed
            to have any effect upon the temporary directory used by this method.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#createTempFile(java.lang.String,%20java.lang.String,%20java.io.File)" title="Reference documentation">Java documentation for <code>java.io.File.createTempFile(java.lang.String, java.lang.String, java.io.File)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the length of <c>prefix</c> is less than 3.</exception>
        <exception cref="T:Java.IO.IOException">if an error occurs when writing the file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Delete();" />
      <MemberSignature Language="C#" Value="public virtual bool Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Delete" />
      <MemberSignature Language="F#" Value="abstract member Delete : unit -&gt; bool&#xA;override this.Delete : unit -&gt; bool" Usage="file.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("delete", "()Z", "GetDeleteHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("delete", "()Z", "GetDeleteHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the file or directory denoted by this abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the file or directory is
                     successfully deleted; <c>false</c> otherwise</returns>
        <remarks>
          <para>Deletes the file or directory denoted by this abstract pathname.  If
            this pathname denotes a directory, then the directory must be empty in
            order to be deleted.</para>
          <para>Note that the <c>java.nio.file.Files</c> class defines the <c>java.nio.file.Files#delete(Path) delete</c> method to throw an <c>IOException</c>
            when a file cannot be deleted. This is useful for error reporting and to
            diagnose why a file cannot be deleted.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#delete()" title="Reference documentation">Java documentation for <code>java.io.File.delete()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeleteOnExit">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeleteOnExit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteOnExit();" />
      <MemberSignature Language="C#" Value="public virtual void DeleteOnExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteOnExit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.DeleteOnExit" />
      <MemberSignature Language="F#" Value="abstract member DeleteOnExit : unit -&gt; unit&#xA;override this.DeleteOnExit : unit -&gt; unit" Usage="file.DeleteOnExit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("deleteOnExit", "()V", "GetDeleteOnExitHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("deleteOnExit", "()V", "GetDeleteOnExitHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the file or directory denoted by this abstract
            pathname be deleted when the virtual machine terminates.</summary>
        <remarks>
          <para>Requests that the file or directory denoted by this abstract
            pathname be deleted when the virtual machine terminates.
            Files (or directories) are deleted in the reverse order that
            they are registered. Invoking this method to delete a file or
            directory that is already registered for deletion has no effect.
            Deletion will be attempted only for normal termination of the
            virtual machine, as defined by the Java Language Specification.</para>
          <para>Once deletion has been requested, it is not possible to cancel the
            request.  This method should therefore be used with care.</para>
          <para>Note: this method should <i>not</i> be used for file-locking, as
            the resulting protocol cannot be made to work reliably. The
            <c>java.nio.channels.FileLock FileLock</c>
            facility should be used instead.</para>
          <para>
            <i>Note that on Android, the application lifecycle does not include VM termination,
            so calling this method will not ensure that files are deleted</i>. Instead, you should
            use the most appropriate out of:
            &lt;ul&gt;
            &lt;li&gt;Use a <c>finally</c> clause to manually invoke <c>#delete</c>.
            &lt;li&gt;Maintain your own set of files to delete, and process it at an appropriate point
            in your application's lifecycle.
            &lt;li&gt;Use the Unix trick of deleting the file as soon as all readers and writers have
            opened it. No new readers/writers will be able to access the file, but all existing
            ones will still have access until the last one closes the file.
            &lt;/ul&gt;</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#deleteOnExit()" title="Reference documentation">Java documentation for <code>java.io.File.deleteOnExit()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Exists();" />
      <MemberSignature Language="C#" Value="public virtual bool Exists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Exists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Exists" />
      <MemberSignature Language="F#" Value="abstract member Exists : unit -&gt; bool&#xA;override this.Exists : unit -&gt; bool" Usage="file.Exists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("exists", "()Z", "GetExistsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("exists", "()Z", "GetExistsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tests whether the file or directory denoted by this abstract pathname
            exists.</summary>
        <returns>
          <c>true</c> if and only if the file or directory denoted
                     by this abstract pathname exists; <c>false</c> otherwise</returns>
        <remarks>
          <para>Tests whether the file or directory denoted by this abstract pathname
            exists.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#exists()" title="Reference documentation">Java documentation for <code>java.io.File.exists()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FreeSpace">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FreeSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long FreeSpace { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long FreeSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 FreeSpace" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.FreeSpace" />
      <MemberSignature Language="F#" Value="member this.FreeSpace : int64" Usage="Java.IO.File.FreeSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFreeSpace", "()J", "GetGetFreeSpaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFreeSpace", "()J", "GetGetFreeSpaceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of unallocated bytes in the partition named by this abstract path name.</summary>
        <value>The number of unallocated bytes on the partition or <c>0L</c>
                     if the abstract pathname does not name a partition.  This
                     value will be less than or equal to the total file system size
                     returned by <c>#getTotalSpace</c>.</value>
        <remarks>
          <para>Returns the number of unallocated bytes in the partition named by this abstract path name.</para>
          <para>The returned number of unallocated bytes is a hint, but not
            a guarantee, that it is possible to use most or any of these
            bytes.  The number of unallocated bytes is most likely to be
            accurate immediately after this call.  It is likely to be made
            inaccurate by any external I/O operations including those made
            on the system outside of this virtual machine.  This method
            makes no guarantee that write operations to this file system
            will succeed.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getFreeSpace()" title="Reference documentation">Java documentation for <code>java.io.File.getFreeSpace()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="IsAbsolute">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAbsolute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAbsolute { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsAbsolute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsolute" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.IsAbsolute" />
      <MemberSignature Language="F#" Value="member this.IsAbsolute : bool" Usage="Java.IO.File.IsAbsolute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAbsolute", "()Z", "GetIsAbsoluteHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isAbsolute", "()Z", "GetIsAbsoluteHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether this abstract pathname is absolute.</summary>
        <value>
          <c>true</c> if this abstract pathname is absolute,
                     <c>false</c> otherwise</value>
        <remarks>
          <para>Tests whether this abstract pathname is absolute.  The definition of
            absolute pathname is system dependent.  On Android, absolute paths start with
            the character '/'.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#isAbsolute()" title="Reference documentation">Java documentation for <code>java.io.File.isAbsolute()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.IO.File.Path" />
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.IsDirectory" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="Java.IO.File.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isDirectory", "()Z", "GetIsDirectoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isDirectory", "()Z", "GetIsDirectoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether the file denoted by this abstract pathname is a
            directory.</summary>
        <value>
          <c>true</c> if and only if the file denoted by this
                     abstract pathname exists &lt;em&gt;and&lt;/em&gt; is a directory;
                     <c>false</c> otherwise</value>
        <remarks>
          <para>Tests whether the file denoted by this abstract pathname is a
            directory.</para>
          <para>Where it is required to distinguish an I/O exception from the case
            that the file is not a directory, or where several attributes of the
            same file are required at the same time, then the <c>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
            Files.readAttributes</c> method may be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#isDirectory()" title="Reference documentation">Java documentation for <code>java.io.File.isDirectory()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFile { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFile" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.IsFile" />
      <MemberSignature Language="F#" Value="member this.IsFile : bool" Usage="Java.IO.File.IsFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isFile", "()Z", "GetIsFileHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isFile", "()Z", "GetIsFileHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether the file denoted by this abstract pathname is a normal
            file.</summary>
        <value>
          <c>true</c> if and only if the file denoted by this
                     abstract pathname exists &lt;em&gt;and&lt;/em&gt; is a normal file;
                     <c>false</c> otherwise</value>
        <remarks>
          <para>Tests whether the file denoted by this abstract pathname is a normal
            file.  A file is &lt;em&gt;normal&lt;/em&gt; if it is not a directory and, in
            addition, satisfies other system-dependent criteria.  Any non-directory
            file created by a Java application is guaranteed to be a normal file.</para>
          <para>Where it is required to distinguish an I/O exception from the case
            that the file is not a normal file, or where several attributes of the
            same file are required at the same time, then the <c>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
            Files.readAttributes</c> method may be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#isFile()" title="Reference documentation">Java documentation for <code>java.io.File.isFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsHidden { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.IsHidden" />
      <MemberSignature Language="F#" Value="member this.IsHidden : bool" Usage="Java.IO.File.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isHidden", "()Z", "GetIsHiddenHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isHidden", "()Z", "GetIsHiddenHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether the file named by this abstract pathname is a hidden
            file.</summary>
        <value>
          <c>true</c> if and only if the file denoted by this
                     abstract pathname is hidden according to the conventions of the
                     underlying platform</value>
        <remarks>
          <para>Tests whether the file named by this abstract pathname is a hidden
            file.  The exact definition of &lt;em&gt;hidden&lt;/em&gt; is system-dependent.  On
            UNIX systems, a file is considered to be hidden if its name begins with
            a period character (<c>'.'</c>).  On Microsoft Windows systems, a file is
            considered to be hidden if it has been marked as such in the filesystem.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#isHidden()" title="Reference documentation">Java documentation for <code>java.io.File.isHidden()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="VB.NET" Value="Function CompareTo (o As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int Java.Lang.IComparable.CompareTo(Java::Lang::Object ^ o) = Java::Lang::IComparable::CompareTo;" />
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Java#Lang#IComparable#CompareTo(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int&#xA;override this.Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int" Usage="file.Java.Lang.IComparable.CompareTo o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IComparable.CompareTo(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.IO.File.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastModified">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastModified () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long LastModified();" />
      <MemberSignature Language="C#" Value="public virtual long LastModified ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 LastModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.LastModified" />
      <MemberSignature Language="F#" Value="abstract member LastModified : unit -&gt; int64&#xA;override this.LastModified : unit -&gt; int64" Usage="file.LastModified " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lastModified", "()J", "GetLastModifiedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lastModified", "()J", "GetLastModifiedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the time that the file denoted by this abstract pathname was
            last modified.</summary>
        <returns>A <c>long</c> value representing the time the file was
                     last modified, measured in milliseconds since the epoch
                     (00:00:00 GMT, January 1, 1970), or <c>0L</c> if the
                     file does not exist or if an I/O error occurs</returns>
        <remarks>
          <para>Returns the time that the file denoted by this abstract pathname was
            last modified.</para>
          <para>Where it is required to distinguish an I/O exception from the case
            where <c>0L</c> is returned, or where several attributes of the
            same file are required at the same time, or where the time of last
            access or the creation time are required, then the <c>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
            Files.readAttributes</c> method may be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#lastModified()" title="Reference documentation">Java documentation for <code>java.io.File.lastModified()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Length () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long Length();" />
      <MemberSignature Language="C#" Value="public virtual long Length ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Length() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Length" />
      <MemberSignature Language="F#" Value="abstract member Length : unit -&gt; int64&#xA;override this.Length : unit -&gt; int64" Usage="file.Length " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("length", "()J", "GetLengthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("length", "()J", "GetLengthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the length of the file denoted by this abstract pathname.</summary>
        <returns>The length, in bytes, of the file denoted by this abstract
                     pathname, or <c>0L</c> if the file does not exist.  Some
                     operating systems may return <c>0L</c> for pathnames
                     denoting system-dependent entities such as devices or pipes.</returns>
        <remarks>
          <para>Returns the length of the file denoted by this abstract pathname.
            The return value is unspecified if this pathname denotes a directory.</para>
          <para>Where it is required to distinguish an I/O exception from the case
            that <c>0L</c> is returned, or where several attributes of the same file
            are required at the same time, then the <c>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])
            Files.readAttributes</c> method may be used.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#length()" title="Reference documentation">Java documentation for <code>java.io.File.length()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function List () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ List();" />
      <MemberSignature Language="C#" Value="public virtual string[]? List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] List() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.List" />
      <MemberSignature Language="F#" Value="abstract member List : unit -&gt; string[]&#xA;override this.List : unit -&gt; string[]" Usage="file.List " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("list", "()[Ljava/lang/String;", "GetListHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("list", "()[Ljava/lang/String;", "GetListHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname.</summary>
        <returns>An array of strings naming the files and directories in the
                     directory denoted by this abstract pathname.  The array will be
                     empty if the directory is empty.  Returns <c>null</c> if
                     this abstract pathname does not denote a directory, or if an
                     I/O error occurs.</returns>
        <remarks>
          <para>Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname.</para>
          <para>If this abstract pathname does not denote a directory, then this
            method returns <c>null</c>.  Otherwise an array of strings is
            returned, one for each file or directory in the directory.  Names
            denoting the directory itself and the directory's parent directory are
            not included in the result.  Each string is a file name rather than a
            complete path.</para>
          <para>There is no guarantee that the name strings in the resulting array
            will appear in any specific order; they are not, in particular,
            guaranteed to appear in alphabetical order.</para>
          <para>Note that the <c>java.nio.file.Files</c> class defines the <c>java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream</c> method to
            open a directory and iterate over the names of the files in the directory.
            This may use less resources when working with very large directories, and
            may be more responsive when working with remote directories.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#list()" title="Reference documentation">Java documentation for <code>java.io.File.list()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function List (filter As IFilenameFilter) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ List(Java::IO::IFilenameFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public virtual string[]? List (Java.IO.IFilenameFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] List(class Java.IO.IFilenameFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.List(Java.IO.IFilenameFilter)" />
      <MemberSignature Language="F#" Value="abstract member List : Java.IO.IFilenameFilter -&gt; string[]&#xA;override this.List : Java.IO.IFilenameFilter -&gt; string[]" Usage="file.List filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;", "GetList_Ljava_io_FilenameFilter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;", "GetList_Ljava_io_FilenameFilter_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFilenameFilter" />
      </Parameters>
      <Docs>
        <param name="filter">A filename filter</param>
        <summary>Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname that satisfy the specified
            filter.</summary>
        <returns>An array of strings naming the files and directories in the
                     directory denoted by this abstract pathname that were accepted
                     by the given <c>filter</c>.  The array will be empty if the
                     directory is empty or if no names were accepted by the filter.
                     Returns <c>null</c> if this abstract pathname does not denote
                     a directory, or if an I/O error occurs.</returns>
        <remarks>
          <para>Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname that satisfy the specified
            filter.  The behavior of this method is the same as that of the
            <c>#list()</c> method, except that the strings in the returned array
            must satisfy the filter.  If the given <c>filter</c> is <c>null</c>
            then all names are accepted.  Otherwise, a name satisfies the filter if
            and only if the value <c>true</c> results when the <c>FilenameFilter#accept FilenameFilter.accept(File,&amp;nbsp;String)</c> method
            of the filter is invoked on this abstract pathname and the name of a
            file or directory in the directory that it denotes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#list(java.io.FilenameFilter)" title="Reference documentation">Java documentation for <code>java.io.File.list(java.io.FilenameFilter)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ListAsync () As Task(Of String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::String ^&gt; ^&gt; ^ ListAsync();" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string[]?&gt; ListAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string[]&gt; ListAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListAsync" />
      <MemberSignature Language="F#" Value="member this.ListAsync : unit -&gt; System.Threading.Tasks.Task&lt;string[]&gt;" Usage="file.ListAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ListAsync (filter As IFilenameFilter) As Task(Of String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::String ^&gt; ^&gt; ^ ListAsync(Java::IO::IFilenameFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string[]?&gt; ListAsync (Java.IO.IFilenameFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string[]&gt; ListAsync(class Java.IO.IFilenameFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListAsync(Java.IO.IFilenameFilter)" />
      <MemberSignature Language="F#" Value="member this.ListAsync : Java.IO.IFilenameFilter -&gt; System.Threading.Tasks.Task&lt;string[]&gt;" Usage="file.ListAsync filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFilenameFilter" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListFiles">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListFiles () As File()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Java::IO::File ^&gt; ^ ListFiles();" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File[]? ListFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.File[] ListFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFiles" />
      <MemberSignature Language="F#" Value="abstract member ListFiles : unit -&gt; Java.IO.File[]&#xA;override this.ListFiles : unit -&gt; Java.IO.File[]" Usage="file.ListFiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("listFiles", "()[Ljava/io/File;", "GetListFilesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("listFiles", "()[Ljava/io/File;", "GetListFilesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of abstract pathnames denoting the files in the
            directory denoted by this abstract pathname.</summary>
        <returns>An array of abstract pathnames denoting the files and
                     directories in the directory denoted by this abstract pathname.
                     The array will be empty if the directory is empty.  Returns
                     <c>null</c> if this abstract pathname does not denote a
                     directory, or if an I/O error occurs.</returns>
        <remarks>
          <para>Returns an array of abstract pathnames denoting the files in the
            directory denoted by this abstract pathname.</para>
          <para>If this abstract pathname does not denote a directory, then this
            method returns <c>null</c>.  Otherwise an array of <c>File</c> objects
            is returned, one for each file or directory in the directory.  Pathnames
            denoting the directory itself and the directory's parent directory are
            not included in the result.  Each resulting abstract pathname is
            constructed from this abstract pathname using the <c>#File(File,
            String) File(File,&amp;nbsp;String)</c> constructor.  Therefore if this
            pathname is absolute then each resulting pathname is absolute; if this
            pathname is relative then each resulting pathname will be relative to
            the same directory.</para>
          <para>There is no guarantee that the name strings in the resulting array
            will appear in any specific order; they are not, in particular,
            guaranteed to appear in alphabetical order.</para>
          <para>Note that the <c>java.nio.file.Files</c> class defines the <c>java.nio.file.Files#newDirectoryStream(Path) newDirectoryStream</c> method
            to open a directory and iterate over the names of the files in the
            directory. This may use less resources when working with very large
            directories.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#listFiles()" title="Reference documentation">Java documentation for <code>java.io.File.listFiles()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ListFiles">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListFiles (filter As IFileFilter) As File()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Java::IO::File ^&gt; ^ ListFiles(Java::IO::IFileFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File[]? ListFiles (Java.IO.IFileFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.File[] ListFiles(class Java.IO.IFileFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFiles(Java.IO.IFileFilter)" />
      <MemberSignature Language="F#" Value="abstract member ListFiles : Java.IO.IFileFilter -&gt; Java.IO.File[]&#xA;override this.ListFiles : Java.IO.IFileFilter -&gt; Java.IO.File[]" Usage="file.ListFiles filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;", "GetListFiles_Ljava_io_FileFilter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;", "GetListFiles_Ljava_io_FileFilter_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFileFilter" />
      </Parameters>
      <Docs>
        <param name="filter">A file filter</param>
        <summary>Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.</summary>
        <returns>An array of abstract pathnames denoting the files and
                     directories in the directory denoted by this abstract pathname.
                     The array will be empty if the directory is empty.  Returns
                     <c>null</c> if this abstract pathname does not denote a
                     directory, or if an I/O error occurs.</returns>
        <remarks>
          <para>Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.  The behavior of this method is the same
            as that of the <c>#listFiles()</c> method, except that the pathnames in
            the returned array must satisfy the filter.  If the given <c>filter</c>
            is <c>null</c> then all pathnames are accepted.  Otherwise, a pathname
            satisfies the filter if and only if the value <c>true</c> results when
            the <c>FileFilter#accept FileFilter.accept(File)</c> method of the
            filter is invoked on the pathname.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#listFiles(java.io.FileFilter)" title="Reference documentation">Java documentation for <code>java.io.File.listFiles(java.io.FileFilter)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ListFiles">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListFiles (filter As IFilenameFilter) As File()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Java::IO::File ^&gt; ^ ListFiles(Java::IO::IFilenameFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File[]? ListFiles (Java.IO.IFilenameFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.File[] ListFiles(class Java.IO.IFilenameFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFiles(Java.IO.IFilenameFilter)" />
      <MemberSignature Language="F#" Value="abstract member ListFiles : Java.IO.IFilenameFilter -&gt; Java.IO.File[]&#xA;override this.ListFiles : Java.IO.IFilenameFilter -&gt; Java.IO.File[]" Usage="file.ListFiles filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;", "GetListFiles_Ljava_io_FilenameFilter_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;", "GetListFiles_Ljava_io_FilenameFilter_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFilenameFilter" />
      </Parameters>
      <Docs>
        <param name="filter">A filename filter</param>
        <summary>Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.</summary>
        <returns>An array of abstract pathnames denoting the files and
                     directories in the directory denoted by this abstract pathname.
                     The array will be empty if the directory is empty.  Returns
                     <c>null</c> if this abstract pathname does not denote a
                     directory, or if an I/O error occurs.</returns>
        <remarks>
          <para>Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.  The behavior of this method is the same
            as that of the <c>#listFiles()</c> method, except that the pathnames in
            the returned array must satisfy the filter.  If the given <c>filter</c>
            is <c>null</c> then all pathnames are accepted.  Otherwise, a pathname
            satisfies the filter if and only if the value <c>true</c> results when
            the <c>FilenameFilter#accept
            FilenameFilter.accept(File,&amp;nbsp;String)</c> method of the filter is
            invoked on this abstract pathname and the name of a file or directory in
            the directory that it denotes.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#listFiles(java.io.FilenameFilter)" title="Reference documentation">Java documentation for <code>java.io.File.listFiles(java.io.FilenameFilter)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ListFilesAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ListFilesAsync () As Task(Of File())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;Java::IO::File ^&gt; ^&gt; ^ ListFilesAsync();" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.IO.File[]?&gt; ListFilesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.IO.File[]&gt; ListFilesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFilesAsync" />
      <MemberSignature Language="F#" Value="member this.ListFilesAsync : unit -&gt; System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;" Usage="file.ListFilesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListFilesAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ListFilesAsync (filter As IFileFilter) As Task(Of File())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;Java::IO::File ^&gt; ^&gt; ^ ListFilesAsync(Java::IO::IFileFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.IO.File[]?&gt; ListFilesAsync (Java.IO.IFileFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.IO.File[]&gt; ListFilesAsync(class Java.IO.IFileFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFilesAsync(Java.IO.IFileFilter)" />
      <MemberSignature Language="F#" Value="member this.ListFilesAsync : Java.IO.IFileFilter -&gt; System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;" Usage="file.ListFilesAsync filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFileFilter" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListFilesAsync">
      <MemberSignature Language="VB.NET" Value="Public Function ListFilesAsync (filter As IFilenameFilter) As Task(Of File())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;Java::IO::File ^&gt; ^&gt; ^ ListFilesAsync(Java::IO::IFilenameFilter ^ filter);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.IO.File[]?&gt; ListFilesAsync (Java.IO.IFilenameFilter? filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.IO.File[]&gt; ListFilesAsync(class Java.IO.IFilenameFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListFilesAsync(Java.IO.IFilenameFilter)" />
      <MemberSignature Language="F#" Value="member this.ListFilesAsync : Java.IO.IFilenameFilter -&gt; System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;" Usage="file.ListFilesAsync filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Java.IO.IFilenameFilter" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListRoots">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListRoots () As File()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Java::IO::File ^&gt; ^ ListRoots();" />
      <MemberSignature Language="C#" Value="public static Java.IO.File[] ListRoots ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.File[] ListRoots() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListRoots" />
      <MemberSignature Language="F#" Value="static member ListRoots : unit -&gt; Java.IO.File[]" Usage="Java.IO.File.ListRoots " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("listRoots", "()[Ljava/io/File;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("listRoots", "()[Ljava/io/File;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the file system roots.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the file system roots. On Android and other Unix systems, there is
            a single root, <c>/</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#listRoots()" title="Reference documentation">Java documentation for <code>java.io.File.listRoots()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ListRootsAsync">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListRootsAsync () As Task(Of File())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;Java::IO::File ^&gt; ^&gt; ^ ListRootsAsync();" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Java.IO.File[]&gt; ListRootsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Java.IO.File[]&gt; ListRootsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ListRootsAsync" />
      <MemberSignature Language="F#" Value="static member ListRootsAsync : unit -&gt; System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;" Usage="Java.IO.File.ListRootsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.IO.File[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkdir">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Mkdir () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Mkdir();" />
      <MemberSignature Language="C#" Value="public virtual bool Mkdir ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Mkdir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Mkdir" />
      <MemberSignature Language="F#" Value="abstract member Mkdir : unit -&gt; bool&#xA;override this.Mkdir : unit -&gt; bool" Usage="file.Mkdir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mkdir", "()Z", "GetMkdirHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mkdir", "()Z", "GetMkdirHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the directory named by this abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the directory was
                     created; <c>false</c> otherwise</returns>
        <remarks>
          <para>Creates the directory named by this abstract pathname.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#mkdir()" title="Reference documentation">Java documentation for <code>java.io.File.mkdir()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Mkdirs">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Mkdirs () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Mkdirs();" />
      <MemberSignature Language="C#" Value="public virtual bool Mkdirs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Mkdirs() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.Mkdirs" />
      <MemberSignature Language="F#" Value="abstract member Mkdirs : unit -&gt; bool&#xA;override this.Mkdirs : unit -&gt; bool" Usage="file.Mkdirs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mkdirs", "()Z", "GetMkdirsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mkdirs", "()Z", "GetMkdirsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the directory named by this abstract pathname, including any
            necessary but nonexistent parent directories.</summary>
        <returns>
          <c>true</c> if and only if the directory was created,
                     along with all necessary parent directories; <c>false</c>
                     otherwise</returns>
        <remarks>
          <para>Creates the directory named by this abstract pathname, including any
            necessary but nonexistent parent directories.  Note that if this
            operation fails it may have succeeded in creating some of the necessary
            parent directories.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#mkdirs()" title="Reference documentation">Java documentation for <code>java.io.File.mkdirs()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Java.IO.File.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of the file or directory denoted by this abstract
            pathname.</summary>
        <value>The name of the file or directory denoted by this abstract
                     pathname, or the empty string if this pathname's name sequence
                     is empty</value>
        <remarks>
          <para>Returns the name of the file or directory denoted by this abstract
            pathname.  This is just the last name in the pathname's name
            sequence.  If the pathname's name sequence is empty, then the empty
            string is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getName()" title="Reference documentation">Java documentation for <code>java.io.File.getName()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Parent { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual string? Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parent" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : string" Usage="Java.IO.File.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParent", "()Ljava/lang/String;", "GetGetParentHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParent", "()Ljava/lang/String;", "GetGetParentHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the pathname string of this abstract pathname's parent, or
            <c>null</c> if this pathname does not name a parent directory.</summary>
        <value>The pathname string of the parent directory named by this
                     abstract pathname, or <c>null</c> if this pathname
                     does not name a parent</value>
        <remarks>
          <para>Returns the pathname string of this abstract pathname's parent, or
            <c>null</c> if this pathname does not name a parent directory.</para>
          <para>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname consists of the
            pathname's prefix, if any, and each name in the pathname's name
            sequence except for the last.  If the name sequence is empty then
            the pathname does not name a parent directory.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getParent()" title="Reference documentation">Java documentation for <code>java.io.File.getParent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParentFile As File" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::IO::File ^ ParentFile { Java::IO::File ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.IO.File? ParentFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File ParentFile" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.ParentFile" />
      <MemberSignature Language="F#" Value="member this.ParentFile : Java.IO.File" Usage="Java.IO.File.ParentFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParentFile", "()Ljava/io/File;", "GetGetParentFileHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParentFile", "()Ljava/io/File;", "GetGetParentFileHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the abstract pathname of this abstract pathname's parent,
            or <c>null</c> if this pathname does not name a parent
            directory.</summary>
        <value>The abstract pathname of the parent directory named by this
                     abstract pathname, or <c>null</c> if this pathname
                     does not name a parent</value>
        <remarks>
          <para>Returns the abstract pathname of this abstract pathname's parent,
            or <c>null</c> if this pathname does not name a parent
            directory.</para>
          <para>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname consists of the
            pathname's prefix, if any, and each name in the pathname's name
            sequence except for the last.  If the name sequence is empty then
            the pathname does not name a parent directory.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getParentFile()" title="Reference documentation">Java documentation for <code>java.io.File.getParentFile()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.Path" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="Java.IO.File.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPath", "()Ljava/lang/String;", "GetGetPathHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPath", "()Ljava/lang/String;", "GetGetPathHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converts this abstract pathname into a pathname string.</summary>
        <value>The string form of this abstract pathname</value>
        <remarks>
          <para>Converts this abstract pathname into a pathname string.  The resulting
            string uses the <c>#separator default name-separator character</c> to
            separate the names in the name sequence.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getPath()" title="Reference documentation">Java documentation for <code>java.io.File.getPath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PathSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ PathSeparator { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public static string? PathSeparator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PathSeparator" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.PathSeparator" />
      <MemberSignature Language="F#" Value="member this.PathSeparator : string" Usage="Java.IO.File.PathSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pathSeparator")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pathSeparator")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system-dependent path-separator character, represented as a string
            for convenience.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The system-dependent path-separator character, represented as a string
            for convenience.  This string contains a single character, namely
            <c>{@link #pathSeparatorChar}</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#pathSeparator" title="Reference documentation">Java documentation for <code>java.io.File.pathSeparator</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PathSeparatorChar">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PathSeparatorChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property char PathSeparatorChar { char get(); };" />
      <MemberSignature Language="C#" Value="public static char PathSeparatorChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property char PathSeparatorChar" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.PathSeparatorChar" />
      <MemberSignature Language="F#" Value="member this.PathSeparatorChar : char" Usage="Java.IO.File.PathSeparatorChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("pathSeparatorChar")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("pathSeparatorChar")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system-dependent path-separator character.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The system-dependent path-separator character.  This field is
            initialized to contain the first character of the value of the system
            property <c>path.separator</c>.  This character is used to
            separate filenames in a sequence of files given as a &lt;em&gt;path list&lt;/em&gt;.
            On UNIX systems, this character is <c>':'</c>; on Microsoft Windows systems it
            is <c>';'</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#pathSeparatorChar" title="Reference documentation">Java documentation for <code>java.io.File.pathSeparatorChar</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RenameTo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenameTo (dest As File) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool RenameTo(Java::IO::File ^ dest);" />
      <MemberSignature Language="C#" Value="public virtual bool RenameTo (Java.IO.File dest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RenameTo(class Java.IO.File dest) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.RenameTo(Java.IO.File)" />
      <MemberSignature Language="F#" Value="abstract member RenameTo : Java.IO.File -&gt; bool&#xA;override this.RenameTo : Java.IO.File -&gt; bool" Usage="file.RenameTo dest" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("renameTo", "(Ljava/io/File;)Z", "GetRenameTo_Ljava_io_File_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("renameTo", "(Ljava/io/File;)Z", "GetRenameTo_Ljava_io_File_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="dest">The new abstract pathname for the named file</param>
        <summary>Renames the file denoted by this abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the renaming succeeded;
                     <c>false</c> otherwise</returns>
        <remarks>
          <para>Renames the file denoted by this abstract pathname.</para>
          <para>Many failures are possible. Some of the more likely failures include:
            &lt;ul&gt;
            &lt;li&gt;Write permission is required on the directories containing both the source and
            destination paths.
            &lt;li&gt;Search permission is required for all parents of both paths.
            &lt;li&gt;Both paths be on the same mount point. On Android, applications are most likely to hit
            this restriction when attempting to copy between internal storage and an SD card.
            &lt;/ul&gt;</para>
          <para>The return value should always be checked to make sure
            that the rename operation was successful.</para>
          <para>Note that the <c>java.nio.file.Files</c> class defines the <c>java.nio.file.Files#move move</c> method to move or rename a file in a
            platform independent manner.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#renameTo(java.io.File)" title="Reference documentation">Java documentation for <code>java.io.File.renameTo(java.io.File)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Separator">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Separator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Separator { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public static string? Separator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Separator" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.Separator" />
      <MemberSignature Language="F#" Value="member this.Separator : string" Usage="Java.IO.File.Separator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("separator")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("separator")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system-dependent default name-separator character, represented as a
            string for convenience.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The system-dependent default name-separator character, represented as a
            string for convenience.  This string contains a single character, namely
            <c>{@link #separatorChar}</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#separator" title="Reference documentation">Java documentation for <code>java.io.File.separator</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SeparatorChar">
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SeparatorChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property char SeparatorChar { char get(); };" />
      <MemberSignature Language="C#" Value="public static char SeparatorChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property char SeparatorChar" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.SeparatorChar" />
      <MemberSignature Language="F#" Value="member this.SeparatorChar : char" Usage="Java.IO.File.SeparatorChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("separatorChar")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("separatorChar")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system-dependent default name-separator character.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The system-dependent default name-separator character.  This field is
            initialized to contain the first character of the value of the system
            property <c>file.separator</c>.  On UNIX systems the value of this
            field is <c>'/'</c>; on Microsoft Windows systems it is <c>'\\'</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#separatorChar" title="Reference documentation">Java documentation for <code>java.io.File.separatorChar</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetExecutable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetExecutable (executable As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetExecutable(bool executable);" />
      <MemberSignature Language="C#" Value="public virtual bool SetExecutable (bool executable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetExecutable(bool executable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetExecutable(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetExecutable : bool -&gt; bool&#xA;override this.SetExecutable : bool -&gt; bool" Usage="file.SetExecutable executable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExecutable", "(Z)Z", "GetSetExecutable_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExecutable", "(Z)Z", "GetSetExecutable_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="executable">If <c>true</c>, sets the access permission to allow execute
                     operations; if <c>false</c> to disallow execute operations</param>
        <summary>A convenience method to set the owner's execute permission for this
            abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded.  The
                      operation will fail if the user does not have permission to
                      change the access permissions of this abstract pathname.  If
                      <c>executable</c> is <c>false</c> and the underlying
                      file system does not implement an execute permission, then the
                      operation will fail.</returns>
        <remarks>
          <para>A convenience method to set the owner's execute permission for this
            abstract pathname.</para>
          <para>An invocation of this method of the form <c>file.setExcutable(arg)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">file.setExecutable(arg, true) </code>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setExecutable(boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setExecutable(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Java.IO.File.SetExecutable(System.Boolean, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetExecutable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetExecutable (executable As Boolean, ownerOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetExecutable(bool executable, bool ownerOnly);" />
      <MemberSignature Language="C#" Value="public virtual bool SetExecutable (bool executable, bool ownerOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetExecutable(bool executable, bool ownerOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetExecutable(System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetExecutable : bool * bool -&gt; bool&#xA;override this.SetExecutable : bool * bool -&gt; bool" Usage="file.SetExecutable (executable, ownerOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExecutable", "(ZZ)Z", "GetSetExecutable_ZZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExecutable", "(ZZ)Z", "GetSetExecutable_ZZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executable" Type="System.Boolean" />
        <Parameter Name="ownerOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="executable">If <c>true</c>, sets the access permission to allow execute
                     operations; if <c>false</c> to disallow execute operations</param>
        <param name="ownerOnly">If <c>true</c>, the execute permission applies only to the
                     owner's execute permission; otherwise, it applies to everybody.
                     If the underlying file system can not distinguish the owner's
                     execute permission from that of others, then the permission will
                     apply to everybody, regardless of this value.</param>
        <summary>Sets the owner's or everybody's execute permission for this abstract
            pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded.  The
                     operation will fail if the user does not have permission to
                     change the access permissions of this abstract pathname.  If
                     <c>executable</c> is <c>false</c> and the underlying
                     file system does not implement an execute permission, then the
                     operation will fail.</returns>
        <remarks>
          <para>Sets the owner's or everybody's execute permission for this abstract
            pathname.</para>
          <para>The <c>java.nio.file.Files</c> class defines methods that operate on
            file attributes including file permissions. This may be used when finer
            manipulation of file permissions is required.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setExecutable(boolean,%20boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setExecutable(boolean, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetLastModified">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLastModified (time As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetLastModified(long time);" />
      <MemberSignature Language="C#" Value="public virtual bool SetLastModified (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetLastModified(int64 time) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetLastModified(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetLastModified : int64 -&gt; bool&#xA;override this.SetLastModified : int64 -&gt; bool" Usage="file.SetLastModified time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLastModified", "(J)Z", "GetSetLastModified_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLastModified", "(J)Z", "GetSetLastModified_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The new last-modified time, measured in milliseconds since
                          the epoch (00:00:00 GMT, January 1, 1970)</param>
        <summary>Sets the last-modified time of the file or directory named by this
            abstract pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded;
                     <c>false</c> otherwise</returns>
        <remarks>
          <para>Sets the last-modified time of the file or directory named by this
            abstract pathname.</para>
          <para>All platforms support file-modification times to the nearest second,
            but some provide more precision.  The argument will be truncated to fit
            the supported precision.  If the operation succeeds and no intervening
            operations on the file take place, then the next invocation of the
            <c>{@link #lastModified}</c> method will return the (possibly
            truncated) <c>time</c> argument that was passed to this method.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setLastModified(long)" title="Reference documentation">Java documentation for <code>java.io.File.setLastModified(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>time </c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetReadable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetReadable (readable As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetReadable(bool readable);" />
      <MemberSignature Language="C#" Value="public virtual bool SetReadable (bool readable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetReadable(bool readable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetReadable(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetReadable : bool -&gt; bool&#xA;override this.SetReadable : bool -&gt; bool" Usage="file.SetReadable readable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setReadable", "(Z)Z", "GetSetReadable_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setReadable", "(Z)Z", "GetSetReadable_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="readable">If <c>true</c>, sets the access permission to allow read
                     operations; if <c>false</c> to disallow read operations</param>
        <summary>A convenience method to set the owner's read permission for this abstract
            pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded.  The
                     operation will fail if the user does not have permission to
                     change the access permissions of this abstract pathname.  If
                     <c>readable</c> is <c>false</c> and the underlying
                     file system does not implement a read permission, then the
                     operation will fail.</returns>
        <remarks>
          <para>A convenience method to set the owner's read permission for this abstract
            pathname.</para>
          <para>An invocation of this method of the form <c>file.setReadable(arg)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">file.setReadable(arg, true) </code>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setReadable(boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setReadable(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Java.IO.File.SetReadable(System.Boolean, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetReadable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetReadable (readable As Boolean, ownerOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetReadable(bool readable, bool ownerOnly);" />
      <MemberSignature Language="C#" Value="public virtual bool SetReadable (bool readable, bool ownerOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetReadable(bool readable, bool ownerOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetReadable(System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetReadable : bool * bool -&gt; bool&#xA;override this.SetReadable : bool * bool -&gt; bool" Usage="file.SetReadable (readable, ownerOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setReadable", "(ZZ)Z", "GetSetReadable_ZZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setReadable", "(ZZ)Z", "GetSetReadable_ZZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readable" Type="System.Boolean" />
        <Parameter Name="ownerOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="readable">If <c>true</c>, sets the access permission to allow read
                     operations; if <c>false</c> to disallow read operations</param>
        <param name="ownerOnly">If <c>true</c>, the read permission applies only to the
                     owner's read permission; otherwise, it applies to everybody.  If
                     the underlying file system can not distinguish the owner's read
                     permission from that of others, then the permission will apply to
                     everybody, regardless of this value.</param>
        <summary>Sets the owner's or everybody's read permission for this abstract
            pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded.  The
                     operation will fail if the user does not have permission to
                     change the access permissions of this abstract pathname.  If
                     <c>readable</c> is <c>false</c> and the underlying
                     file system does not implement a read permission, then the
                     operation will fail.</returns>
        <remarks>
          <para>Sets the owner's or everybody's read permission for this abstract
            pathname.</para>
          <para>The <c>java.nio.file.Files</c> class defines methods that operate on
            file attributes including file permissions. This may be used when finer
            manipulation of file permissions is required.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setReadable(boolean,%20boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setReadable(boolean, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetReadOnly();" />
      <MemberSignature Language="C#" Value="public virtual bool SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetReadOnly" />
      <MemberSignature Language="F#" Value="abstract member SetReadOnly : unit -&gt; bool&#xA;override this.SetReadOnly : unit -&gt; bool" Usage="file.SetReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setReadOnly", "()Z", "GetSetReadOnlyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setReadOnly", "()Z", "GetSetReadOnlyHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the file or directory named by this abstract pathname so that
            only read operations are allowed.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded;
                     <c>false</c> otherwise</returns>
        <remarks>
          <para>Marks the file or directory named by this abstract pathname so that
            only read operations are allowed. After invoking this method the file
            or directory will not change until it is either deleted or marked
            to allow write access. Whether or not a read-only file or
            directory may be deleted depends upon the underlying system.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setReadOnly()" title="Reference documentation">Java documentation for <code>java.io.File.setReadOnly()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.IO.File.SetWritable(System.Boolean, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetWritable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetWritable (writable As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetWritable(bool writable);" />
      <MemberSignature Language="C#" Value="public virtual bool SetWritable (bool writable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetWritable(bool writable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetWritable(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetWritable : bool -&gt; bool&#xA;override this.SetWritable : bool -&gt; bool" Usage="file.SetWritable writable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWritable", "(Z)Z", "GetSetWritable_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWritable", "(Z)Z", "GetSetWritable_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writable">If <c>true</c>, sets the access permission to allow write
                     operations; if <c>false</c> to disallow write operations</param>
        <summary>A convenience method to set the owner's write permission for this abstract
            pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded.  The
                     operation will fail if the user does not have permission to
                     change the access permissions of this abstract pathname.</returns>
        <remarks>
          <para>A convenience method to set the owner's write permission for this abstract
            pathname.</para>
          <para>An invocation of this method of the form <c>file.setWritable(arg)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">file.setWritable(arg, true) </code>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setWritable(boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setWritable(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <altmember cref="M:Java.IO.File.SetWritable(System.Boolean, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetWritable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetWritable (writable As Boolean, ownerOnly As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetWritable(bool writable, bool ownerOnly);" />
      <MemberSignature Language="C#" Value="public virtual bool SetWritable (bool writable, bool ownerOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetWritable(bool writable, bool ownerOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.SetWritable(System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetWritable : bool * bool -&gt; bool&#xA;override this.SetWritable : bool * bool -&gt; bool" Usage="file.SetWritable (writable, ownerOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWritable", "(ZZ)Z", "GetSetWritable_ZZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWritable", "(ZZ)Z", "GetSetWritable_ZZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writable" Type="System.Boolean" />
        <Parameter Name="ownerOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writable">If <c>true</c>, sets the access permission to allow write
                     operations; if <c>false</c> to disallow write operations</param>
        <param name="ownerOnly">If <c>true</c>, the write permission applies only to the
                     owner's write permission; otherwise, it applies to everybody.  If
                     the underlying file system can not distinguish the owner's write
                     permission from that of others, then the permission will apply to
                     everybody, regardless of this value.</param>
        <summary>Sets the owner's or everybody's write permission for this abstract
            pathname.</summary>
        <returns>
          <c>true</c> if and only if the operation succeeded. The
                     operation will fail if the user does not have permission to change
                     the access permissions of this abstract pathname.</returns>
        <remarks>
          <para>Sets the owner's or everybody's write permission for this abstract
            pathname.</para>
          <para>The <c>java.nio.file.Files</c> class defines methods that operate on
            file attributes including file permissions. This may be used when finer
            manipulation of file permissions is required.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#setWritable(boolean,%20boolean)" title="Reference documentation">Java documentation for <code>java.io.File.setWritable(boolean, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.IO.File.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.IO.File.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPath">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToPath () As IPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::FileNio::IPath ^ ToPath();" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.FileNio.IPath ToPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FileNio.IPath ToPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ToPath" />
      <MemberSignature Language="F#" Value="abstract member ToPath : unit -&gt; Java.Nio.FileNio.IPath&#xA;override this.ToPath : unit -&gt; Java.Nio.FileNio.IPath" Usage="file.ToPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toPath", "()Ljava/nio/file/Path;", "GetToPathHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toPath", "()Ljava/nio/file/Path;", "GetToPathHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FileNio.IPath</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>Path java.nio.file.Path</c> object constructed from the
            this abstract path.</summary>
        <returns>a <c>Path</c> constructed from this abstract path</returns>
        <remarks>
          <para>Returns a <c>Path java.nio.file.Path</c> object constructed from the
            this abstract path. The resulting <c>Path</c> is associated with the
            <c>java.nio.file.FileSystems#getDefault default-filesystem</c>.</para>
          <para>The first invocation of this method works as if invoking it were
            equivalent to evaluating the expression:
            &lt;blockquote&gt;</para>
          <code lang="text/java">{@link java.nio.file.FileSystems#getDefault FileSystems.getDefault}().{@link
            java.nio.file.FileSystem#getPath getPath}(this.{@link #getPath getPath}());
            </code>
          <para>&lt;/blockquote&gt;
            Subsequent invocations of this method return the same <c>Path</c>.</para>
          <para>If this abstract pathname is the empty abstract pathname then this
            method returns a <c>Path</c> that may be used to access the current
            user directory.</para>
          <para>Added in 1.7.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#toPath()" title="Reference documentation">Java documentation for <code>java.io.File.toPath()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalSpace">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TotalSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long TotalSpace { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long TotalSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TotalSpace" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.TotalSpace" />
      <MemberSignature Language="F#" Value="member this.TotalSpace : int64" Usage="Java.IO.File.TotalSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTotalSpace", "()J", "GetGetTotalSpaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTotalSpace", "()J", "GetGetTotalSpaceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the size of the partition named by this
            abstract pathname.</summary>
        <value>The size, in bytes, of the partition or <c>0L</c> if this
                     abstract pathname does not name a partition</value>
        <remarks>
          <para>Returns the size of the partition named by this
            abstract pathname.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getTotalSpace()" title="Reference documentation">Java documentation for <code>java.io.File.getTotalSpace()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ToURI">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToURI () As URI" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Net::URI ^ ToURI();" />
      <MemberSignature Language="C#" Value="public virtual Java.Net.URI ToURI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.URI ToURI() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ToURI" />
      <MemberSignature Language="F#" Value="abstract member ToURI : unit -&gt; Java.Net.URI&#xA;override this.ToURI : unit -&gt; Java.Net.URI" Usage="file.ToURI " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toURI", "()Ljava/net/URI;", "GetToURIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toURI", "()Ljava/net/URI;", "GetToURIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URI</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Constructs a <c>file:</c> URI that represents this abstract pathname.</summary>
        <returns>An absolute, hierarchical URI with a scheme equal to
                     <c>"file"</c>, a path representing this abstract pathname,
                     and undefined authority, query, and fragment components</returns>
        <remarks>
          <para>Constructs a <c>file:</c> URI that represents this abstract pathname.</para>
          <para>The exact form of the URI is system-dependent.  If it can be
            determined that the file denoted by this abstract pathname is a
            directory, then the resulting URI will end with a slash.</para>
          <para>For a given abstract pathname <i>f</i>, it is guaranteed that
            
            &lt;blockquote&gt;<c>
            new <c>#File(java.net.URI) File</c>(</c><i>&amp;nbsp;f</i><c>.toURI()).equals(</c><i>&amp;nbsp;f</i><c>.<c>#getAbsoluteFile() getAbsoluteFile</c>())
            </c>&lt;/blockquote&gt;
            
            so long as the original abstract pathname, the URI, and the new abstract
            pathname are all created in (possibly different invocations of) the same
            Java virtual machine.  Due to the system-dependent nature of abstract
            pathnames, however, this relationship typically does not hold when a
            <c>file:</c> URI that is created in a virtual machine on one operating
            system is converted into an abstract pathname in a virtual machine on a
            different operating system.</para>
          <para>Note that when this abstract pathname represents a UNC pathname then
            all components of the UNC (including the server name component) are encoded
            in the <c>URI</c> path. The authority component is undefined, meaning
            that it is represented as <c>null</c>. The <c>Path</c> class defines the
            <c>Path#toUri toUri</c> method to encode the server name in the authority
            component of the resulting <c>URI</c>. The <c>#toPath toPath</c> method
            may be used to obtain a <c>Path</c> representing this abstract pathname.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#toURI()" title="Reference documentation">Java documentation for <code>java.io.File.toURI()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToURL">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToURL () As URL" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Net::URL ^ ToURL();" />
      <MemberSignature Language="C#" Value="public virtual Java.Net.URL ToURL ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.URL ToURL() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.IO.File.ToURL" />
      <MemberSignature Language="F#" Value="abstract member ToURL : unit -&gt; Java.Net.URL&#xA;override this.ToURL : unit -&gt; Java.Net.URL" Usage="file.ToURL " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toURL", "()Ljava/net/URL;", "GetToURLHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toURL", "()Ljava/net/URL;", "GetToURLHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.URL</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts this abstract pathname into a <c>file:</c> URL.</summary>
        <returns>A URL object representing the equivalent file URL</returns>
        <remarks>
          <para>Converts this abstract pathname into a <c>file:</c> URL.  The
            exact form of the URL is system-dependent.  If it can be determined that
            the file denoted by this abstract pathname is a directory, then the
            resulting URL will end with a slash.</para>
          <para>Added in 1.2.</para>
          <para>This member is deprecated. This method does not automatically escape characters that
            are illegal in URLs.  It is recommended that new code convert an
            abstract pathname into a URL by first converting it into a URI, via the
            <c>#toURI() toURI</c> method, and then converting the URI into a URL
            via the <c>java.net.URI#toURL() URI.toURL</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#toURL()" title="Reference documentation">Java documentation for <code>java.io.File.toURL()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.MalformedURLException">if the path cannot be transformed into a URL.</exception>
      </Docs>
    </Member>
    <Member MemberName="UsableSpace">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property UsableSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long UsableSpace { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long UsableSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UsableSpace" />
      <MemberSignature Language="DocId" Value="P:Java.IO.File.UsableSpace" />
      <MemberSignature Language="F#" Value="member this.UsableSpace : int64" Usage="Java.IO.File.UsableSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getUsableSpace", "()J", "GetGetUsableSpaceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getUsableSpace", "()J", "GetGetUsableSpaceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of bytes available to this virtual machine on the
            partition named by this abstract pathname.</summary>
        <value>The number of available bytes on the partition or <c>0L</c>
                     if the abstract pathname does not name a partition.  On
                     systems where this information is not available, this method
                     will be equivalent to a call to <c>#getFreeSpace</c>.</value>
        <remarks>
          <para>Returns the number of bytes available to this virtual machine on the
            partition named by this abstract pathname.  When
            possible, this method checks for write permissions and other operating
            system restrictions and will therefore usually provide a more accurate
            estimate of how much new data can actually be written than <c>#getFreeSpace</c>.</para>
          <para>The returned number of available bytes is a hint, but not a
            guarantee, that it is possible to use most or any of these bytes.  The
            number of unallocated bytes is most likely to be accurate immediately
            after this call.  It is likely to be made inaccurate by any external
            I/O operations including those made on the system outside of this
            virtual machine.  This method makes no guarantee that write operations
            to this file system will succeed.</para>
          <para>On Android (and other Unix-based systems), this method returns the number of free bytes
            available to non-root users, regardless of whether you're actually running as root,
            and regardless of any quota or other restrictions that might apply to the user.
            (The <c>getFreeSpace</c> method returns the number of bytes potentially available to root.)</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/io/File#getUsableSpace()" title="Reference documentation">Java documentation for <code>java.io.File.getUsableSpace()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
  </Members>
</Type>
