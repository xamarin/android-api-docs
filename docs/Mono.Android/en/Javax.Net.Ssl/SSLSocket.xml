<Type Name="SSLSocket" FullName="Javax.Net.Ssl.SSLSocket">
  <TypeSignature Language="C#" Value="public abstract class SSLSocket : Java.Net.Socket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SSLSocket extends Java.Net.Socket" />
  <TypeSignature Language="DocId" Value="T:Javax.Net.Ssl.SSLSocket" />
  <TypeSignature Language="F#" Value="type SSLSocket = class&#xA;    inherit Socket" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.Socket</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("javax/net/ssl/SSLSocket", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("javax/net/ssl/SSLSocket", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class extends <c>Socket</c>s and provides secure
            socket using protocols such as the "Secure
            Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols.</summary>
    <remarks>
      <para>This class extends <c>Socket</c>s and provides secure
            socket using protocols such as the "Secure
            Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols.</para>
      <para>Such sockets are normal stream sockets, but they
            add a layer of security protections over the underlying network transport
            protocol, such as TCP.  Those protections include: &lt;UL&gt;
            
                 &lt;LI&gt; &lt;em&gt;Integrity Protection&lt;/em&gt;.  SSL protects against
                 modification of messages by an active wiretapper.
            
                 &lt;LI&gt; &lt;em&gt;Authentication&lt;/em&gt;.  In most modes, SSL provides
                 peer authentication.  Servers are usually authenticated,
                 and clients may be authenticated as requested by servers.
            
                 &lt;LI&gt; &lt;em&gt;Confidentiality (Privacy Protection)&lt;/em&gt;.  In most
                 modes, SSL encrypts data being sent between client and server.
                 This protects the confidentiality of data, so that passive
                 wiretappers won't see sensitive data such as financial
                 information or personal information of many kinds.
            
                 &lt;/UL&gt;</para>
      <para>These kinds of protection are specified by a "cipher suite", which
            is a combination of cryptographic algorithms used by a given SSL connection.
            During the negotiation process, the two endpoints must agree on
            a ciphersuite that is available in both environments.
            If there is no such suite in common, no SSL connection can
            be established, and no data can be exchanged.</para>
      <para>The cipher suite used is established by a negotiation process
            called "handshaking".  The goal of this
            process is to create or rejoin a "session", which may protect many
            connections over time.  After handshaking has completed, you can access
            session attributes by using the &lt;em&gt;getSession&lt;/em&gt; method.
            The initial handshake on this connection can be initiated in
            one of three ways: &lt;UL&gt;
            
                 &lt;LI&gt; calling <c>startHandshake</c> which explicitly
                         begins handshakes, or
                 &lt;LI&gt; any attempt to read or write application data on
                         this socket causes an implicit handshake, or
                 &lt;LI&gt; a call to <c>getSession</c> tries to set up a session
                         if there is no currently valid session, and
                         an implicit handshake is done.
            &lt;/UL&gt;</para>
      <para>If handshaking fails for any reason, the <c>SSLSocket</c>
            is closed, and no further communications can be done.</para>
      <para>There are two groups of cipher suites which you will need to know
            about when managing cipher suites: &lt;UL&gt;
            
                 &lt;LI&gt; &lt;em&gt;Supported&lt;/em&gt; cipher suites:  all the suites which are
                 supported by the SSL implementation.  This list is reported
                 using &lt;em&gt;getSupportedCipherSuites&lt;/em&gt;.
            
                 &lt;LI&gt; &lt;em&gt;Enabled&lt;/em&gt; cipher suites, which may be fewer
                 than the full set of supported suites.  This group is
                 set using the &lt;em&gt;setEnabledCipherSuites&lt;/em&gt; method, and
                 queried using the &lt;em&gt;getEnabledCipherSuites&lt;/em&gt; method.
                 Initially, a default set of cipher suites will be enabled on
                 a new socket that represents the minimum suggested configuration.
            
                 &lt;/UL&gt;</para>
      <para>Implementation defaults require that only cipher
            suites which authenticate servers and provide confidentiality
            be enabled by default.
            Only if both sides explicitly agree to unauthenticated and/or
            non-private (unencrypted) communications will such a ciphersuite be
            selected.</para>
      <para>When <c>SSLSocket</c>s are first created, no handshaking
            is done so that applications may first set their communication
            preferences:  what cipher suites to use, whether the socket should be
            in client or server mode, etc.
            However, security is always provided by the time that application data
            is sent over the connection.</para>
      <para>You may register to receive event notification of handshake
            completion.  This involves
            the use of two additional classes.  &lt;em&gt;HandshakeCompletedEvent&lt;/em&gt;
            objects are passed to &lt;em&gt;HandshakeCompletedListener&lt;/em&gt; instances,
            which are registered by users of this API.
            
            <c>SSLSocket</c>s are created by <c>SSLSocketFactory</c>s,
            or by <c>accept</c>ing a connection from a
            <c>SSLServerSocket</c>.</para>
      <para>A SSL socket must choose to operate in the client or server mode.
            This will determine who begins the handshaking process, as well
            as which messages should be sent by each party.  Each
            connection must have one client and one server, or handshaking
            will not progress properly.  Once the initial handshaking has started, a
            socket can not switch between client and server modes, even when
            performing renegotiations.
            
            &lt;h3&gt;Default configuration for different Android versions&lt;/h3&gt;</para>
      <para>
        <c>SSLSocket</c> instances obtained from default <c>SSLSocketFactory</c>,
            <c>SSLServerSocketFactory</c>, and <c>SSLContext</c> are configured as follows:
            
            &lt;style type="text/css"&gt;
              tr.deprecated {
                background-color: #ccc;
                color: #999;
                font-style: italic;
              }&lt;/style&gt;
            
            &lt;h4&gt;Protocols&lt;/h4&gt;</para>
      <para>Client socket:
            &lt;table&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;Protocol&lt;/th&gt;
                        &lt;th&gt;Supported (API Levels)&lt;/th&gt;
                        &lt;th&gt;Enabled by default (API Levels)&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;SSLv3&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;25&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.1&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                        &lt;td&gt;20+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.2&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                        &lt;td&gt;20+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.3&lt;/td&gt;
                        &lt;td&gt;29+&lt;/td&gt;
                        &lt;td&gt;29+&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>Server socket:
            &lt;table&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;Protocol&lt;/th&gt;
                        &lt;th&gt;Supported (API Levels)&lt;/th&gt;
                        &lt;th&gt;Enabled by default (API Levels)&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;SSLv3&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;25&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.1&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.2&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                        &lt;td&gt;16+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;TLSv1.3&lt;/td&gt;
                        &lt;td&gt;29+&lt;/td&gt;
                        &lt;td&gt;29+&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            
            &lt;h4&gt;Cipher suites&lt;/h4&gt;</para>
      <para>Methods that operate with cipher suite names (for example,
            <c>#getSupportedCipherSuites() getSupportedCipherSuites</c>,
            <c>#setEnabledCipherSuites(String[]) setEnabledCipherSuites</c>) have used
            standard names for cipher suites since API Level 9, as listed in the table
            below. Prior to API Level 9, non-standard (OpenSSL) names had been used (see
            the table following this table).
            &lt;table&gt;
              &lt;thead&gt;
                &lt;tr&gt;
                  &lt;th&gt;Cipher suite&lt;/th&gt;
                  &lt;th&gt;Supported (API Levels)&lt;/th&gt;
                  &lt;th&gt;Enabled by default (API Levels)&lt;/th&gt;
                &lt;/tr&gt;
              &lt;/thead&gt;
              &lt;tbody&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_DSS_WITH_DES_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DHE_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DH_anon_EXPORT_WITH_RC4_40_MD5&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DH_anon_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DH_anon_WITH_DES_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_DH_anon_WITH_RC4_128_MD5&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_EXPORT_WITH_RC4_40_MD5&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;SSL_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9+&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_WITH_NULL_MD5&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_WITH_RC4_128_MD5&lt;/td&gt;
                  &lt;td&gt;9-25&lt;/td&gt;
                  &lt;td&gt;9-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;SSL_RSA_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;9-25&lt;/td&gt;
                  &lt;td&gt;9-23&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_CHACHA20_POLY1305_SHA256&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                  &lt;td&gt;29+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_256_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_DSS_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-25&lt;/td&gt;
                  &lt;td&gt;9-25&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-25&lt;/td&gt;
                  &lt;td&gt;11-25&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                  &lt;td&gt;20-25&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_256_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_DH_anon_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_ECDSA_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;11-25&lt;/td&gt;
                  &lt;td&gt;11-23&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                  &lt;td&gt;24+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDHE_RSA_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;11-25&lt;/td&gt;
                  &lt;td&gt;11-23&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_ECDSA_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_RSA_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;11-19&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_anon_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_anon_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_anon_WITH_NULL_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_ECDH_anon_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;11-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_EMPTY_RENEGOTIATION_INFO_SCSV&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_FALLBACK_SCSV&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_PSK_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;21-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_PSK_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_PSK_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                  &lt;td&gt;21+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_PSK_WITH_RC4_128_SHA&lt;/td&gt;
                  &lt;td&gt;21-25&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9+&lt;/td&gt;
                  &lt;td&gt;9+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_128_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_128_GCM_SHA256&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                  &lt;td&gt;9+&lt;/td&gt;
                  &lt;td&gt;11+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_256_CBC_SHA256&lt;/td&gt;
                  &lt;td&gt;20-28&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                  &lt;td&gt;TLS_RSA_WITH_AES_256_GCM_SHA384&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                  &lt;td&gt;20+&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr class="deprecated"&gt;
                  &lt;td&gt;TLS_RSA_WITH_NULL_SHA256&lt;/td&gt;
                  &lt;td&gt;20-22&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
                &lt;/tr&gt;
              &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>&lt;em&gt;NOTE&lt;/em&gt;: PSK cipher suites are enabled by default only if the <c>SSLContext</c> through
            which the socket was created has been initialized with a <c>PSKKeyManager</c>.</para>
      <para>API Levels 1 to 8 use OpenSSL names for cipher suites. The table below
            lists these OpenSSL names and their corresponding standard names used in API
            Levels 9 and newer.
            &lt;table&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;OpenSSL cipher suite&lt;/th&gt;
                        &lt;th&gt;Standard cipher suite&lt;/th&gt;
                        &lt;th&gt;Supported (API Levels)&lt;/th&gt;
                        &lt;th&gt;Enabled by default (API Levels)&lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
            
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;AES128-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;AES256-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8, 11+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;DES-CBC-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_CK_DES_64_CBC_WITH_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;DES-CBC3-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_CK_DES_192_EDE3_CBC_WITH_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;DES-CBC3-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;DHE-DSS-AES128-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_DHE_DSS_WITH_AES_128_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;DHE-DSS-AES256-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_DHE_DSS_WITH_AES_256_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8, 11&amp;ndash;22&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;DHE-RSA-AES128-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;DHE-RSA-AES256-SHA&lt;/td&gt;
                        &lt;td&gt;TLS_DHE_RSA_WITH_AES_256_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1+&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8, 11+&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EDH-DSS-DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_DSS_WITH_DES_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EDH-DSS-DES-CBC3-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EDH-RSA-DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_RSA_WITH_DES_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EDH-RSA-DES-CBC3-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EXP-DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EXP-EDH-DSS-DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EXP-EDH-RSA-DES-CBC-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;EXP-RC2-CBC-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;EXP-RC4-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_EXPORT_WITH_RC4_40_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;22&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;RC2-CBC-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_CK_RC2_128_CBC_WITH_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;8&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;RC4-MD5&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_WITH_RC4_128_MD5&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;25&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;19&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr class="deprecated"&gt;
                        &lt;td&gt;RC4-SHA&lt;/td&gt;
                        &lt;td&gt;SSL_RSA_WITH_RC4_128_SHA&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;25&lt;/td&gt;
                        &lt;td&gt;1&amp;ndash;23&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Used only by subclasses.</summary>
        <remarks>
          <para>Used only by subclasses.
            Constructs an uninitialized, unconnected TCP socket.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#SSLSocket()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.SSLSocket()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (Java.Net.InetAddress? address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Net.InetAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor(Java.Net.InetAddress,System.Int32)" />
      <MemberSignature Language="F#" Value="new Javax.Net.Ssl.SSLSocket : Java.Net.InetAddress * int -&gt; Javax.Net.Ssl.SSLSocket" Usage="new Javax.Net.Ssl.SSLSocket (address, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.InetAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">the server's host</param>
        <param name="port">its port</param>
        <summary>Used only by subclasses.</summary>
        <remarks>
          <para>Used only by subclasses.
            Constructs a TCP connection to a server at a specified address
            and port.  This acts as the SSL client.</para>
          <para>If there is a security manager, its <c>checkConnect</c>
            method is called with the host address and <c>port</c>
            as its arguments. This could result in a SecurityException.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#SSLSocket(java.net.InetAddress,%20int)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.SSLSocket(java.net.InetAddress, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Javax.Net.Ssl.SSLSocket : nativeint * Android.Runtime.JniHandleOwnership -&gt; Javax.Net.Ssl.SSLSocket" Usage="new Javax.Net.Ssl.SSLSocket (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (string? host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="new Javax.Net.Ssl.SSLSocket : string * int -&gt; Javax.Net.Ssl.SSLSocket" Usage="new Javax.Net.Ssl.SSLSocket (host, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">name of the host with which to connect, or
                   <c>null</c> for the loopback address.</param>
        <param name="port">number of the server's port</param>
        <summary>Used only by subclasses.</summary>
        <remarks>
          <para>Used only by subclasses.
            Constructs a TCP connection to a named host at a specified port.
            This acts as the SSL client.</para>
          <para>If there is a security manager, its <c>checkConnect</c>
            method is called with the host address and <c>port</c>
            as its arguments. This could result in a SecurityException.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#SSLSocket(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.SSLSocket(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.</exception>
        <exception cref="T:Java.Net.UnknownHostException">if the specified host is not known.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (Java.Net.InetAddress? address, int port, Java.Net.InetAddress? clientAddress, int clientPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Net.InetAddress address, int32 port, class Java.Net.InetAddress clientAddress, int32 clientPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor(Java.Net.InetAddress,System.Int32,Java.Net.InetAddress,System.Int32)" />
      <MemberSignature Language="F#" Value="new Javax.Net.Ssl.SSLSocket : Java.Net.InetAddress * int * Java.Net.InetAddress * int -&gt; Javax.Net.Ssl.SSLSocket" Usage="new Javax.Net.Ssl.SSLSocket (address, port, clientAddress, clientPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.InetAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="clientAddress" Type="Java.Net.InetAddress" />
        <Parameter Name="clientPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">the server's host</param>
        <param name="port">its port</param>
        <param name="clientAddress">the client's address the socket is bound to, or
                   <c>null</c> for the <c>anyLocal</c> address.</param>
        <param name="clientPort">the client's port the socket is bound to, or
                   <c>zero</c> for a system selected free port.</param>
        <summary>Used only by subclasses.</summary>
        <remarks>
          <para>Used only by subclasses.
            Constructs an SSL connection to a server at a specified address
            and TCP port, binding the client side of the connection a given
            address and port.  This acts as the SSL client.</para>
          <para>If there is a security manager, its <c>checkConnect</c>
            method is called with the host address and <c>port</c>
            as its arguments. This could result in a SecurityException.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#SSLSocket(java.net.InetAddress,%20int,%20java.net.InetAddress,%20int)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.SSLSocket(java.net.InetAddress, int, java.net.InetAddress, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (string? host, int port, Java.Net.InetAddress? clientAddress, int clientPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string host, int32 port, class Java.Net.InetAddress clientAddress, int32 clientPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.#ctor(System.String,System.Int32,Java.Net.InetAddress,System.Int32)" />
      <MemberSignature Language="F#" Value="new Javax.Net.Ssl.SSLSocket : string * int * Java.Net.InetAddress * int -&gt; Javax.Net.Ssl.SSLSocket" Usage="new Javax.Net.Ssl.SSLSocket (host, port, clientAddress, clientPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;ILjava/net/InetAddress;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;ILjava/net/InetAddress;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="clientAddress" Type="Java.Net.InetAddress" />
        <Parameter Name="clientPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">name of the host with which to connect, or
                   <c>null</c> for the loopback address.</param>
        <param name="port">number of the server's port</param>
        <param name="clientAddress">the client's address the socket is bound to, or
                   <c>null</c> for the <c>anyLocal</c> address.</param>
        <param name="clientPort">the client's port the socket is bound to, or
                   <c>zero</c> for a system selected free port.</param>
        <summary>Used only by subclasses.</summary>
        <remarks>
          <para>Used only by subclasses.
            Constructs an SSL connection to a named host at a specified port,
            binding the client side of the connection a given address and port.
            This acts as the SSL client.</para>
          <para>If there is a security manager, its <c>checkConnect</c>
            method is called with the host address and <c>port</c>
            as its arguments. This could result in a SecurityException.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#SSLSocket(java.lang.String,%20int,%20java.net.InetAddress,%20int)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.SSLSocket(java.lang.String, int, java.net.InetAddress, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.</exception>
        <exception cref="T:Java.Net.UnknownHostException">if the specified host is not known.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHandshakeCompletedListener">
      <MemberSignature Language="C#" Value="public abstract void AddHandshakeCompletedListener (Javax.Net.Ssl.IHandshakeCompletedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandshakeCompletedListener(class Javax.Net.Ssl.IHandshakeCompletedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.AddHandshakeCompletedListener(Javax.Net.Ssl.IHandshakeCompletedListener)" />
      <MemberSignature Language="F#" Value="abstract member AddHandshakeCompletedListener : Javax.Net.Ssl.IHandshakeCompletedListener -&gt; unit" Usage="sSLSocket.AddHandshakeCompletedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetAddHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetAddHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Javax.Net.Ssl.IHandshakeCompletedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the HandShake Completed event listener</param>
        <summary>Registers an event listener to receive notifications that an
            SSL handshake has completed on this connection.</summary>
        <remarks>
          <para>Registers an event listener to receive notifications that an
            SSL handshake has completed on this connection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>listener</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationProtocol">
      <MemberSignature Language="C#" Value="public virtual string? ApplicationProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationProtocol" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.ApplicationProtocol" />
      <MemberSignature Language="F#" Value="member this.ApplicationProtocol : string" Usage="Javax.Net.Ssl.SSLSocket.ApplicationProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getApplicationProtocol", "()Ljava/lang/String;", "GetGetApplicationProtocolHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getApplicationProtocol", "()Ljava/lang/String;", "GetGetApplicationProtocolHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the most recent application protocol value negotiated for this
            connection.</summary>
        <value>null if it has not yet been determined if application
                    protocols might be used for this connection, an empty
                    <c>String</c> if application protocols values will not
                    be used, or a non-empty application protocol <c>String</c>
                    if a value was successfully negotiated.</value>
        <remarks>
          <para>Returns the most recent application protocol value negotiated for this
            connection.</para>
          <para>If supported by the underlying SSL/TLS implementation,
            application name negotiation mechanisms such as <see href="http://www.ietf.org/rfc/rfc7301.txt"> RFC 7301 </see>, the
            Application-Layer Protocol Negotiation (ALPN), can negotiate
            application-level values between peers.</para>
          <para />
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getApplicationProtocol()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getApplicationProtocol()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSessionCreation">
      <MemberSignature Language="C#" Value="public abstract bool EnableSessionCreation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSessionCreation" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.EnableSessionCreation" />
      <MemberSignature Language="F#" Value="member this.EnableSessionCreation : bool with get, set" Usage="Javax.Net.Ssl.SSLSocket.EnableSessionCreation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getEnableSessionCreation", "()Z", "GetGetEnableSessionCreationHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getEnableSessionCreation", "()Z", "GetGetEnableSessionCreationHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setEnableSessionCreation", "(Z)V", "GetSetEnableSessionCreation_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setEnableSessionCreation", "(Z)V", "GetSetEnableSessionCreation_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether new SSL sessions may be created by this socket or if
 existing sessions must be reused.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabledCipherSuites">
      <MemberSignature Language="C#" Value="public abstract string[]? GetEnabledCipherSuites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnabledCipherSuites() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.GetEnabledCipherSuites" />
      <MemberSignature Language="F#" Value="abstract member GetEnabledCipherSuites : unit -&gt; string[]" Usage="sSLSocket.GetEnabledCipherSuites " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getEnabledCipherSuites", "()[Ljava/lang/String;", "GetGetEnabledCipherSuitesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getEnabledCipherSuites", "()[Ljava/lang/String;", "GetGetEnabledCipherSuitesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the SSL cipher suites which are currently
            enabled for use on this connection.</summary>
        <returns>an array of cipher suite names</returns>
        <remarks>
          <para>Returns the names of the SSL cipher suites which are currently
            enabled for use on this connection.  When an SSLSocket is first
            created, all enabled cipher suites support a minimum quality of
            service.  Thus, in some environments this value might be empty.</para>
          <para>Even if a suite has been enabled, it might never be used.  (For
            example, the peer does not support it, the requisite certificates
            (and private keys) for the suite are not available, or an
            anonymous suite is enabled but authentication is required.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getEnabledCipherSuites()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getEnabledCipherSuites()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabledProtocols">
      <MemberSignature Language="C#" Value="public abstract string[]? GetEnabledProtocols ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnabledProtocols() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.GetEnabledProtocols" />
      <MemberSignature Language="F#" Value="abstract member GetEnabledProtocols : unit -&gt; string[]" Usage="sSLSocket.GetEnabledProtocols " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getEnabledProtocols", "()[Ljava/lang/String;", "GetGetEnabledProtocolsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getEnabledProtocols", "()[Ljava/lang/String;", "GetGetEnabledProtocolsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the protocol versions which are currently
            enabled for use on this connection.</summary>
        <returns>an array of protocols</returns>
        <remarks>
          <para>Returns the names of the protocol versions which are currently
            enabled for use on this connection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getEnabledProtocols()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getEnabledProtocols()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedCipherSuites">
      <MemberSignature Language="C#" Value="public abstract string[]? GetSupportedCipherSuites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetSupportedCipherSuites() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.GetSupportedCipherSuites" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedCipherSuites : unit -&gt; string[]" Usage="sSLSocket.GetSupportedCipherSuites " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSupportedCipherSuites", "()[Ljava/lang/String;", "GetGetSupportedCipherSuitesHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSupportedCipherSuites", "()[Ljava/lang/String;", "GetGetSupportedCipherSuitesHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the cipher suites which could be enabled for use
            on this connection.</summary>
        <returns>an array of cipher suite names</returns>
        <remarks>
          <para>Returns the names of the cipher suites which could be enabled for use
            on this connection.  Normally, only a subset of these will actually
            be enabled by default, since this list may include cipher suites which
            do not meet quality of service requirements for those defaults.  Such
            cipher suites might be useful in specialized applications.
            
            &lt;p class="caution"&gt;Applications should not blindly enable all supported
            cipher suites.  The supported cipher suites can include signaling cipher suite
            values that can cause connection problems if enabled inappropriately.</para>
          <para>The proper way to use this method is to either check if a specific cipher
            suite is supported via <c>Arrays.asList(getSupportedCipherSuites()).contains(...)</c>
            or to filter a desired list of cipher suites to only the supported ones via
            <c>desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites()))</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getSupportedCipherSuites()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getSupportedCipherSuites()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedProtocols">
      <MemberSignature Language="C#" Value="public abstract string[]? GetSupportedProtocols ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetSupportedProtocols() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.GetSupportedProtocols" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedProtocols : unit -&gt; string[]" Usage="sSLSocket.GetSupportedProtocols " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSupportedProtocols", "()[Ljava/lang/String;", "GetGetSupportedProtocolsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSupportedProtocols", "()[Ljava/lang/String;", "GetGetSupportedProtocolsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the protocols which could be enabled for use
            on an SSL connection.</summary>
        <returns>an array of protocols supported</returns>
        <remarks>
          <para>Returns the names of the protocols which could be enabled for use
            on an SSL connection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getSupportedProtocols()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getSupportedProtocols()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HandshakeApplicationProtocol">
      <MemberSignature Language="C#" Value="public virtual string? HandshakeApplicationProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HandshakeApplicationProtocol" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.HandshakeApplicationProtocol" />
      <MemberSignature Language="F#" Value="member this.HandshakeApplicationProtocol : string" Usage="Javax.Net.Ssl.SSLSocket.HandshakeApplicationProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHandshakeApplicationProtocol", "()Ljava/lang/String;", "GetGetHandshakeApplicationProtocolHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHandshakeApplicationProtocol", "()Ljava/lang/String;", "GetGetHandshakeApplicationProtocolHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the application protocol value negotiated on a SSL/TLS
            handshake currently in progress.</summary>
        <value>null if it has not yet been determined if application
                    protocols might be used for this handshake, an empty
                    <c>String</c> if application protocols values will not
                    be used, or a non-empty application protocol <c>String</c>
                    if a value was successfully negotiated.</value>
        <remarks>
          <para>Returns the application protocol value negotiated on a SSL/TLS
            handshake currently in progress.</para>
          <para>Like <c>#getHandshakeSession()</c>,
            a connection may be in the middle of a handshake. The
            application protocol may or may not yet be available.</para>
          <para />
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getHandshakeApplicationProtocol()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getHandshakeApplicationProtocol()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandshakeApplicationProtocolSelector">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Functions.IBiFunction? HandshakeApplicationProtocolSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Functions.IBiFunction HandshakeApplicationProtocolSelector" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.HandshakeApplicationProtocolSelector" />
      <MemberSignature Language="F#" Value="member this.HandshakeApplicationProtocolSelector : Java.Util.Functions.IBiFunction with get, set" Usage="Javax.Net.Ssl.SSLSocket.HandshakeApplicationProtocolSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHandshakeApplicationProtocolSelector", "()Ljava/util/function/BiFunction;", "GetGetHandshakeApplicationProtocolSelectorHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHandshakeApplicationProtocolSelector", "()Ljava/util/function/BiFunction;", "GetGetHandshakeApplicationProtocolSelectorHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setHandshakeApplicationProtocolSelector", "(Ljava/util/function/BiFunction;)V", "GetSetHandshakeApplicationProtocolSelector_Ljava_util_function_BiFunction_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setHandshakeApplicationProtocolSelector", "(Ljava/util/function/BiFunction;)V", "GetSetHandshakeApplicationProtocolSelector_Ljava_util_function_BiFunction_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Functions.IBiFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="selector">the callback function, or null to de-register.</param>
        <summary>Retrieves the callback function that selects an application protocol
            value during a SSL/TLS handshake. -or- Registers a callback function that selects an application protocol
            value for a SSL/TLS handshake.</summary>
        <value>the callback function, or null if none has been set.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Retrieves the callback function that selects an application protocol
            value during a SSL/TLS handshake.
            See <c>#setHandshakeApplicationProtocolSelector
            setHandshakeApplicationProtocolSelector</c>
            for the function's type parameters.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getHandshakeApplicationProtocolSelector()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getHandshakeApplicationProtocolSelector()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Registers a callback function that selects an application protocol
            value for a SSL/TLS handshake.
            The function overrides any values supplied using
            <c>SSLParameters#setApplicationProtocols
            SSLParameters.setApplicationProtocols</c> and it supports the following
            type parameters:
            &lt;blockquote&gt;
            &lt;dl&gt;
            &lt;dt&gt; <c>SSLSocket</c>&lt;dd&gt; The function's first argument allows the current <c>SSLSocket</c>
                 to be inspected, including the handshake session and configuration
                 settings.
            &lt;dt&gt; <c>List&lt;String&gt;</c>&lt;dd&gt; The function's second argument lists the application protocol names
                 advertised by the TLS peer.
            &lt;dt&gt; <c>String</c>&lt;dd&gt; The function's result is an application protocol name, or null to
                 indicate that none of the advertised names are acceptable.
                 If the return value is an empty <c>String</c> then application
                 protocol indications will not be used.
                 If the return value is null (no value chosen) or is a value that
                 was not advertised by the peer, the underlying protocol will
                 determine what action to take. (For example, ALPN will send a
                 "no_application_protocol" alert and terminate the connection.)
            &lt;/dl&gt;
            &lt;/blockquote&gt;
            
            For example, the following call registers a callback function that
            examines the TLS handshake parameters and selects an application protocol
            name:</para>
          <code lang="text/java">{@code
                serverSocket.setHandshakeApplicationProtocolSelector(
                    (serverSocket, clientProtocols) -&gt; {
                        SSLSession session = serverSocket.getHandshakeSession();
                        return chooseApplicationProtocol(
                            serverSocket,
                            clientProtocols,
                            session.getProtocol(),
                            session.getCipherSuite());
                    });
            }</code>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#setHandshakeApplicationProtocolSelector(java.util.function.BiFunction%3Cjavax.net.ssl.SSLSocket,%20java.util.List%3Cjava.lang.String%3E,%20java.lang.String%3E)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.setHandshakeApplicationProtocolSelector(java.util.function.BiFunction&lt;javax.net.ssl.SSLSocket, java.util.List&lt;java.lang.String&gt;, java.lang.String&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandshakeSession">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.ISSLSession? HandshakeSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.ISSLSession HandshakeSession" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.HandshakeSession" />
      <MemberSignature Language="F#" Value="member this.HandshakeSession : Javax.Net.Ssl.ISSLSession" Usage="Javax.Net.Ssl.SSLSocket.HandshakeSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHandshakeSession", "()Ljavax/net/ssl/SSLSession;", "GetGetHandshakeSessionHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHandshakeSession", "()Ljavax/net/ssl/SSLSession;", "GetGetHandshakeSessionHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.ISSLSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>SSLSession</c> being constructed during a SSL/TLS
            handshake.</summary>
        <value>null if this instance is not currently handshaking, or
                    if the current handshake has not progressed far enough to
                    create a basic SSLSession.  Otherwise, this method returns the
                    <c>SSLSession</c> currently being negotiated.</value>
        <remarks>
          <para>Returns the <c>SSLSession</c> being constructed during a SSL/TLS
            handshake.</para>
          <para>TLS protocols may negotiate parameters that are needed when using
            an instance of this class, but before the <c>SSLSession</c> has
            been completely initialized and made available via <c>getSession</c>.
            For example, the list of valid signature algorithms may restrict
            the type of certificates that can used during TrustManager
            decisions, or the maximum TLS fragment packet sizes can be
            resized to better support the network environment.</para>
          <para>This method provides early access to the <c>SSLSession</c> being
            constructed.  Depending on how far the handshake has progressed,
            some data may not yet be available for use.  For example, if a
            remote server will be sending a Certificate chain, but that chain
            has yet not been processed, the <c>getPeerCertificates</c>
            method of <c>SSLSession</c> will throw a
            SSLPeerUnverifiedException.  Once that chain has been processed,
            <c>getPeerCertificates</c> will return the proper value.</para>
          <para>Unlike <c>#getSession()</c>, this method does not initiate the
            initial handshake and does not block until handshaking is
            complete.</para>
          <para>Added in 1.7.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getHandshakeSession()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getHandshakeSession()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Javax.Net.Ssl.SSLSocket.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedClientAuth">
      <MemberSignature Language="C#" Value="public abstract bool NeedClientAuth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedClientAuth" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.NeedClientAuth" />
      <MemberSignature Language="F#" Value="member this.NeedClientAuth : bool with get, set" Usage="Javax.Net.Ssl.SSLSocket.NeedClientAuth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNeedClientAuth", "()Z", "GetGetNeedClientAuthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNeedClientAuth", "()Z", "GetGetNeedClientAuthHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNeedClientAuth", "(Z)V", "GetSetNeedClientAuth_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNeedClientAuth", "(Z)V", "GetSetNeedClientAuth_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the server socket should require client authentication.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandshakeCompletedListener">
      <MemberSignature Language="C#" Value="public abstract void RemoveHandshakeCompletedListener (Javax.Net.Ssl.IHandshakeCompletedListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandshakeCompletedListener(class Javax.Net.Ssl.IHandshakeCompletedListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.RemoveHandshakeCompletedListener(Javax.Net.Ssl.IHandshakeCompletedListener)" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandshakeCompletedListener : Javax.Net.Ssl.IHandshakeCompletedListener -&gt; unit" Usage="sSLSocket.RemoveHandshakeCompletedListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetRemoveHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetRemoveHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Javax.Net.Ssl.IHandshakeCompletedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the HandShake Completed event listener</param>
        <summary>Removes a previously registered handshake completion listener.</summary>
        <remarks>
          <para>Removes a previously registered handshake completion listener.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified listener is not registered or <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public abstract Javax.Net.Ssl.ISSLSession? Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.ISSLSession Session" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.Session" />
      <MemberSignature Language="F#" Value="member this.Session : Javax.Net.Ssl.ISSLSession" Usage="Javax.Net.Ssl.SSLSocket.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSession", "()Ljavax/net/ssl/SSLSession;", "GetGetSessionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSession", "()Ljavax/net/ssl/SSLSession;", "GetGetSessionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.ISSLSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>SSLSession</c> for this connection.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetEnabledCipherSuites">
      <MemberSignature Language="C#" Value="public abstract void SetEnabledCipherSuites (string[]? suites);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabledCipherSuites(string[] suites) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.SetEnabledCipherSuites(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member SetEnabledCipherSuites : string[] -&gt; unit" Usage="sSLSocket.SetEnabledCipherSuites suites" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setEnabledCipherSuites", "([Ljava/lang/String;)V", "GetSetEnabledCipherSuites_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setEnabledCipherSuites", "([Ljava/lang/String;)V", "GetSetEnabledCipherSuites_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suites" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="suites">Names of all the cipher suites to enable</param>
        <summary>Sets the cipher suites enabled for use on this connection.</summary>
        <remarks>
          <para>Sets the cipher suites enabled for use on this connection.</para>
          <para>Each cipher suite in the <c>suites</c> parameter must have
            been listed by getSupportedCipherSuites(), or the method will
            fail.  Following a successful call to this method, only suites
            listed in the <c>suites</c> parameter are enabled for use.</para>
          <para>See <c>#getEnabledCipherSuites()</c> for more information
            on why a specific ciphersuite may never be used on a connection.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#setEnabledCipherSuites(java.lang.String[])" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if one of the cipher suite names is not supported.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetEnabledProtocols">
      <MemberSignature Language="C#" Value="public abstract void SetEnabledProtocols (string[]? protocols);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabledProtocols(string[] protocols) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.SetEnabledProtocols(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member SetEnabledProtocols : string[] -&gt; unit" Usage="sSLSocket.SetEnabledProtocols protocols" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setEnabledProtocols", "([Ljava/lang/String;)V", "GetSetEnabledProtocols_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setEnabledProtocols", "([Ljava/lang/String;)V", "GetSetEnabledProtocols_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocols" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="protocols">Names of all the protocols to enable.</param>
        <summary>Sets the protocol versions enabled for use on this connection.</summary>
        <remarks>
          <para>Sets the protocol versions enabled for use on this connection.</para>
          <para>The protocols must have been listed by
            <c>getSupportedProtocols()</c> as being supported.
            Following a successful call to this method, only protocols listed
            in the <c>protocols</c> parameter are enabled for use.</para>
          <para>Because of the way the protocol version is negotiated, connections
            will only be able to use a member of the lowest set of contiguous
            enabled protocol versions.  For example, enabling TLSv1.2 and TLSv1
            will result in connections only being able to use TLSv1.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#setEnabledProtocols(java.lang.String[])" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if one of the protocols is not supported.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SSLParameters">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.SSLParameters? SSLParameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.SSLParameters SSLParameters" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.SSLParameters" />
      <MemberSignature Language="F#" Value="member this.SSLParameters : Javax.Net.Ssl.SSLParameters with get, set" Usage="Javax.Net.Ssl.SSLSocket.SSLParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSSLParameters", "()Ljavax/net/ssl/SSLParameters;", "GetGetSSLParametersHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSSLParameters", "()Ljavax/net/ssl/SSLParameters;", "GetGetSSLParametersHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setSSLParameters", "(Ljavax/net/ssl/SSLParameters;)V", "GetSetSSLParameters_Ljavax_net_ssl_SSLParameters_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setSSLParameters", "(Ljavax/net/ssl/SSLParameters;)V", "GetSetSSLParameters_Ljavax_net_ssl_SSLParameters_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.SSLParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="params">the parameters</param>
        <summary>Returns the SSLParameters in effect for this SSLSocket. -or- Applies SSLParameters to this socket.</summary>
        <value>the SSLParameters in effect for this SSLSocket.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns the SSLParameters in effect for this SSLSocket.
            The ciphersuites and protocols of the returned SSLParameters
            are always non-null.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#getSSLParameters()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.getSSLParameters()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Applies SSLParameters to this socket.</para>
          <para>This means:
            &lt;ul&gt;
            &lt;li&gt;If <c>params.getCipherSuites()</c> is non-null,
              <c>setEnabledCipherSuites()</c> is called with that value.&lt;/li&gt;
            &lt;li&gt;If <c>params.getProtocols()</c> is non-null,
              <c>setEnabledProtocols()</c> is called with that value.&lt;/li&gt;
            &lt;li&gt;If <c>params.getNeedClientAuth()</c> or
              <c>params.getWantClientAuth()</c> return <c>true</c>,
              <c>setNeedClientAuth(true)</c> and
              <c>setWantClientAuth(true)</c> are called, respectively;
              otherwise <c>setWantClientAuth(false)</c> is called.&lt;/li&gt;
            &lt;li&gt;If <c>params.getServerNames()</c> is non-null, the socket will
              configure its server names with that value.&lt;/li&gt;
            &lt;li&gt;If <c>params.getSNIMatchers()</c> is non-null, the socket will
              configure its SNI matchers with that value.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#setSSLParameters(javax.net.ssl.SSLParameters)" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.setSSLParameters(javax.net.ssl.SSLParameters)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="StartHandshake">
      <MemberSignature Language="C#" Value="public abstract void StartHandshake ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartHandshake() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Net.Ssl.SSLSocket.StartHandshake" />
      <MemberSignature Language="F#" Value="abstract member StartHandshake : unit -&gt; unit" Usage="sSLSocket.StartHandshake " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startHandshake", "()V", "GetStartHandshakeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startHandshake", "()V", "GetStartHandshakeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts an SSL handshake on this connection.</summary>
        <remarks>
          <para>Starts an SSL handshake on this connection.  Common reasons include
            a need to use new encryption keys, to change cipher suites, or to
            initiate a new session.  To force complete reauthentication, the
            current session could be invalidated before starting this handshake.</para>
          <para>If data has already been sent on the connection, it continues
            to flow during this handshake.  When the handshake completes, this
            will be signaled with an event.
            
            This method is synchronous for the initial handshake on a connection
            and returns when the negotiated handshake is complete. Some
            protocols may not support multiple handshakes on an existing socket
            and may throw an IOException.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocket#startHandshake()" title="Reference documentation">Java documentation for <code>javax.net.ssl.SSLSocket.startHandshake()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Javax.Net.Ssl.SSLSocket.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Javax.Net.Ssl.SSLSocket.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseClientMode">
      <MemberSignature Language="C#" Value="public abstract bool UseClientMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseClientMode" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.UseClientMode" />
      <MemberSignature Language="F#" Value="member this.UseClientMode : bool with get, set" Usage="Javax.Net.Ssl.SSLSocket.UseClientMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getUseClientMode", "()Z", "GetGetUseClientModeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getUseClientMode", "()Z", "GetGetUseClientModeHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setUseClientMode", "(Z)V", "GetSetUseClientMode_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setUseClientMode", "(Z)V", "GetSetUseClientMode_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this connection will act in client mode when handshaking.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WantClientAuth">
      <MemberSignature Language="C#" Value="public abstract bool WantClientAuth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WantClientAuth" />
      <MemberSignature Language="DocId" Value="P:Javax.Net.Ssl.SSLSocket.WantClientAuth" />
      <MemberSignature Language="F#" Value="member this.WantClientAuth : bool with get, set" Usage="Javax.Net.Ssl.SSLSocket.WantClientAuth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWantClientAuth", "()Z", "GetGetWantClientAuthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWantClientAuth", "()Z", "GetGetWantClientAuthHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setWantClientAuth", "(Z)V", "GetSetWantClientAuth_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setWantClientAuth", "(Z)V", "GetSetWantClientAuth_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the server should request client authentication.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
