<Type Name="SettingInjectorService" FullName="Android.Locations.SettingInjectorService">
  <TypeSignature Language="C#" Value="public abstract class SettingInjectorService : Android.App.Service" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SettingInjectorService extends Android.App.Service" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Service</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/location/SettingInjectorService", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Dynamically specifies the enabled status of a preference injected into
 the list of app settings displayed by the system settings app
 </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Dynamically specifies the enabled status of a preference injected into
 the list of app settings displayed by the system settings app
 </para>
      <para tool="javadoc-to-mdoc">
 For use only by apps that are included in the system image, for preferences that affect multiple
 apps. Location settings that apply only to one app should be shown within that app,
 rather than in the system settings.
 </para>
      <para tool="javadoc-to-mdoc">
 To add a preference to the list, a subclass of <c><see cref="T:Android.Locations.SettingInjectorService" /></c> must be declared in
 the manifest as so:

 <example><code lang="xml">
     &lt;service android:name="com.example.android.injector.MyInjectorService" &gt;
         &lt;intent-filter&gt;
             &lt;action android:name="android.location.SettingInjectorService" /&gt;
         &lt;/intent-filter&gt;

         &lt;meta-data
             android:name="android.location.SettingInjectorService"
             android:resource="@xml/my_injected_location_setting" /&gt;
     &lt;/service&gt;
 </code></example>
 The resource file specifies the static data for the setting:
 <example><code lang="xml">
     &lt;injected-location-setting xmlns:android="http://schemas.android.com/apk/res/android"
         android:title="@string/injected_setting_title"
         android:icon="@drawable/ic_acme_corp"
         android:settingsActivity="com.example.android.injector.MySettingActivity"
     /&gt;
 </code></example>
 Here:
 <list type="bullet"><item><term>title: The <c><see cref="P:Android.Preferences.Preference.TitleFormatted" /></c> value. The title should make
     it clear which apps are affected by the setting, typically by including the name of the
     developer. For example, "Acme Corp. ads preferences." </term></item><item><term>icon: The <c><see cref="P:Android.Preferences.Preference.Icon" /></c> value. Typically this will be a
     generic icon for the developer rather than the icon for an individual app.</term></item><item><term>settingsActivity: the activity which is launched to allow the user to modify the setting
     value.  The activity must be in the same package as the subclass of
     <c><see cref="T:Android.Locations.SettingInjectorService" /></c>. The activity should use your own branding to help emphasize
     to the user that it is not part of the system settings.</term></item></list>

 To ensure a good user experience, your <c><see cref="M:Android.App.Application.OnCreate" /></c>,
 and <c><see cref="M:Android.Locations.SettingInjectorService.OnGetEnabled" /></c> methods must all be fast. If either is slow,
 it can delay the display of settings values for other apps as well. Note further that these
 methods are called on your app's UI thread.
 </para>
      <para tool="javadoc-to-mdoc">
 For compactness, only one copy of a given setting should be injected. If each account has a
 distinct value for the setting, then only <c>settingsActivity</c> should display the value for
 each account.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SettingInjectorService (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#SettingInjectorService(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SettingInjectorService (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionInjectedSettingChanged">
      <MemberSignature Language="C#" Value="public const string ActionInjectedSettingChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionInjectedSettingChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_INJECTED_SETTING_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent action a client should broadcast when the value of one of its injected settings has
 changed, so that the setting can be updated in the UI.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent action a client should broadcast when the value of one of its injected settings has
 changed, so that the setting can be updated in the UI.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#ACTION_INJECTED_SETTING_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionServiceIntent">
      <MemberSignature Language="C#" Value="public const string ActionServiceIntent;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionServiceIntent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_SERVICE_INTENT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent action that must be declared in the manifest for the subclass.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent action that must be declared in the manifest for the subclass. Used to start the
 service to read the dynamic status for the setting.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#ACTION_SERVICE_INTENT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributesName">
      <MemberSignature Language="C#" Value="public const string AttributesName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string AttributesName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ATTRIBUTES_NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the XML tag that includes the attributes for the setting.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name of the XML tag that includes the attributes for the setting.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#ATTRIBUTES_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MetaDataName">
      <MemberSignature Language="C#" Value="public const string MetaDataName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MetaDataName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("META_DATA_NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the meta-data tag used to specify the resource file that includes the settings
 attributes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name of the meta-data tag used to specify the resource file that includes the settings
 attributes.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#META_DATA_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBind">
      <MemberSignature Language="C#" Value="public override sealed Android.OS.IBinder OnBind (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.IBinder OnBind(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent that was used to bind to this service,
 as given to <c><see cref="M:Android.Content.Context.BindService(Android.Content.Intent,Android.Content.IServiceConnection,Android.Content.IServiceConnection)" /></c>.  Note that any extras that were included with
 the Intent at that point will <i>not</i> be seen here.</param>
        <summary>Return the communication channel to the service.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the communication channel to the service.  May return null if 
 clients can not bind to the service.  The returned
 <c><see cref="T:Android.OS.BinderConsts" /></c> is usually for a complex interface
 that has been <format type="text/html"><a href="http://developer.android.com/reference/../guide/components/aidl.html">described using
 aidl</a></format>.
 
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note that unlike other application components, calls on to the
 IBinder interface returned here may not happen on the main thread
 of the process</i>.  More information about the main thread can be found in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html">Processes and
 Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#onBind(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGetEnabled">
      <MemberSignature Language="C#" Value="protected abstract bool OnGetEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnGetEnabled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onGetEnabled", "()Z", "GetOnGetEnabledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <c><see cref="P:Android.Preferences.Preference.Enabled" /></c> value.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c><see cref="P:Android.Preferences.Preference.Enabled" /></c> value. Should not perform
 unpredictably-long operations such as network access--see the running-time comments in the
 class-level javadoc.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that to prevent churn in the settings list, there is no support for dynamically choosing
 to hide a setting. Instead you should have this method return false, which will disable the
 setting and its link to your setting activity. One reason why you might choose to do this is
 if <c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../reference/android/provider/Settings.Secure.html#LOCATION_MODE" /></c> is <c><see cref="!:NoType:android/provider/Settings$Secure;Href=../../../reference/android/provider/Settings.Secure.html#LOCATION_MODE_OFF" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 It is possible that the user may click on the setting before this method returns, so your
 settings activity must handle the case where it is invoked even though the setting is
 disabled. The simplest approach may be to simply call <c><see cref="M:Android.App.Activity.Finish" /></c>
 when disabled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#onGetEnabled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGetSummary">
      <MemberSignature Language="C#" Value="protected abstract string OnGetSummary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string OnGetSummary() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onGetSummary", "()Ljava/lang/String;", "GetOnGetSummaryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is no longer called, because status values are no longer shown for any injected
 setting.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is no longer called, because status values are no longer shown for any injected
 setting.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#onGetSummary()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="public override sealed void OnStart (Android.Content.Intent intent, int startId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnStart(class Android.Content.Intent intent, int32 startId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "(Landroid/content/Intent;I)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="startId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">To be added.</param>
        <param name="startId">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#onStart(android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartCommand">
      <MemberSignature Language="C#" Value="public override sealed Android.App.StartCommandResult OnStartCommand (Android.Content.Intent intent, Android.App.StartCommandFlags flags, int startId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.App.StartCommandResult OnStartCommand(class Android.Content.Intent intent, valuetype Android.App.StartCommandFlags flags, int32 startId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartCommand", "(Landroid/content/Intent;II)I", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.StartCommandFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="startId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent supplied to <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>, 
 as given.  This may be null if the service is being restarted after
 its process has gone away, and it had previously returned anything
 except <c><see cref="!:Android.App.Service.START_STICKY_COMPATIBILITY" /></c>.</param>
        <param name="flags">Additional data about this start request.  Currently either
 0, <c><see cref="!:Android.App.Service.START_FLAG_REDELIVERY" /></c>, or <c><see cref="!:Android.App.Service.START_FLAG_RETRY" /></c>.</param>
        <param name="startId">A unique integer representing this specific request to 
 start.  Use with <c><see cref="M:Android.App.Service.StopSelfResult(System.Int32)" /></c>.</param>
        <summary>Called by the system every time a client explicitly starts the service by calling 
 <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>, providing the arguments it supplied and a 
 unique integer token representing the start request.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the system every time a client explicitly starts the service by calling 
 <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>, providing the arguments it supplied and a 
 unique integer token representing the start request.  Do not call this method directly.
 
 </para>
          <para tool="javadoc-to-mdoc">For backwards compatibility, the default implementation calls
 <c><see cref="M:Android.App.Service.OnStart(Android.Content.Intent,System.Int32)" /></c> and returns either <c><see cref="!:Android.App.Service.START_STICKY" /></c>
 or <c><see cref="!:Android.App.Service.START_STICKY_COMPATIBILITY" /></c>.
 
 </para>
          <para tool="javadoc-to-mdoc">If you need your application to run on platform versions prior to API
 level 5, you can use the following model to handle the older <c><see cref="M:Android.App.Service.OnStart(Android.Content.Intent,System.Int32)" /></c>
 callback in that case.  The <c>handleCommand</c> method is implemented by
 you as appropriate:
 
 <example><code lang="java">// This is the old onStart method that will be called on the pre-2.0
// platform.  On 2.0 or later we override onStartCommand() so this
// method will not be called.
@Override
public void onStart(Intent intent, int startId) {
    handleCommand(intent);
}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
    handleCommand(intent);
    // We want this service to continue running until it is explicitly
    // stopped, so return sticky.
    return START_STICKY;
}</code></example></para>
          <para tool="javadoc-to-mdoc">Note that the system calls this on your
 service's main thread.  A service's main thread is the same
 thread where UI operations take place for Activities running in the
 same process.  You should always avoid stalling the main
 thread's event loop.  When doing long-running operations,
 network calls, or heavy disk I/O, you should kick off a new
 thread, or use <c><see cref="T:Android.OS.AsyncTask`3" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/location/SettingInjectorService.html#onStartCommand(android.content.Intent, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
