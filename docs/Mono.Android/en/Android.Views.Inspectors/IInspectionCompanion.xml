<Type Name="IInspectionCompanion" FullName="Android.Views.Inspectors.IInspectionCompanion">
  <TypeSignature Language="VB.NET" Value="Public Interface IInspectionCompanion&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInspectionCompanion : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface IInspectionCompanion : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IInspectionCompanion implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.Inspectors.IInspectionCompanion" />
  <TypeSignature Language="F#" Value="type IInspectionCompanion = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/inspector/InspectionCompanion", "", "Android.Views.Inspectors.IInspectionCompanionInvoker", ApiSince=29)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/inspector/InspectionCompanion", "", "Android.Views.Inspectors.IInspectionCompanionInvoker", ApiSince=29)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="&lt;T&gt;&lt;T&gt;">The type of inspectable this is the companion to</param>
    <summary>An interface for companion objects used to inspect views.</summary>
    <remarks>
      <para>An interface for companion objects used to inspect views.</para>
      <para>Inspection companions only need to handle the properties and node name of the specific class
            they are defined for, not anything from a parent class. At runtime, the inspector instantiates
            one instance of each inspection companion, and handles visiting them in the correct inheritance
            order for each type it inspects.</para>
      <para>Properties are read from the top of the type tree to the bottom, so that classes that override
            a property in their parent class can overwrite it in the reader. In general, properties will
            cleanly inherit through their getters, and the inspector runtime will read the properties of a
            parent class via the parent's inspection companion, and the child companion will only read
            properties added or changed since the parent was defined.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/inspector/InspectionCompanion" title="Reference documentation">Java documentation for <code>android.view.inspector.InspectionCompanion</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="MapProperties">
      <MemberSignature Language="VB.NET" Value="Public Sub MapProperties (propertyMapper As IPropertyMapper)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MapProperties(Android::Views::Inspectors::IPropertyMapper ^ propertyMapper);" />
      <MemberSignature Language="C#" Value="public void MapProperties (Android.Views.Inspectors.IPropertyMapper propertyMapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MapProperties(class Android.Views.Inspectors.IPropertyMapper propertyMapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.Inspectors.IInspectionCompanion.MapProperties(Android.Views.Inspectors.IPropertyMapper)" />
      <MemberSignature Language="F#" Value="abstract member MapProperties : Android.Views.Inspectors.IPropertyMapper -&gt; unit" Usage="iInspectionCompanion.MapProperties propertyMapper" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mapProperties", "(Landroid/view/inspector/PropertyMapper;)V", "GetMapProperties_Landroid_view_inspector_PropertyMapper_Handler:Android.Views.Inspectors.IInspectionCompanionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mapProperties", "(Landroid/view/inspector/PropertyMapper;)V", "GetMapProperties_Landroid_view_inspector_PropertyMapper_Handler:Android.Views.Inspectors.IInspectionCompanionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyMapper" Type="Android.Views.Inspectors.IPropertyMapper" />
      </Parameters>
      <Docs>
        <param name="propertyMapper">A <c>PropertyMapper</c> maps string names to IDs.</param>
        <summary>Map the string names of the properties this companion knows about to integer IDs.</summary>
        <remarks>
          <para>Map the string names of the properties this companion knows about to integer IDs.
            
            Each companion is responsible for storing the integer IDs of all its properties. This is the
            only method that is allowed to modify the stored IDs.
            
            Calling <c>#readProperties(T, PropertyReader)</c> before calling this results in
            undefined behavior.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inspector/InspectionCompanion#mapProperties(android.view.inspector.PropertyMapper)" title="Reference documentation">Java documentation for <code>android.view.inspector.InspectionCompanion.mapProperties(android.view.inspector.PropertyMapper)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadProperties">
      <MemberSignature Language="VB.NET" Value="Public Sub ReadProperties (inspectable As Object, propertyReader As IPropertyReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadProperties(Java::Lang::Object ^ inspectable, Android::Views::Inspectors::IPropertyReader ^ propertyReader);" />
      <MemberSignature Language="C#" Value="public void ReadProperties (Java.Lang.Object inspectable, Android.Views.Inspectors.IPropertyReader propertyReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadProperties(class Java.Lang.Object inspectable, class Android.Views.Inspectors.IPropertyReader propertyReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.Inspectors.IInspectionCompanion.ReadProperties(Java.Lang.Object,Android.Views.Inspectors.IPropertyReader)" />
      <MemberSignature Language="F#" Value="abstract member ReadProperties : Java.Lang.Object * Android.Views.Inspectors.IPropertyReader -&gt; unit" Usage="iInspectionCompanion.ReadProperties (inspectable, propertyReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readProperties", "(Ljava/lang/Object;Landroid/view/inspector/PropertyReader;)V", "GetReadProperties_Ljava_lang_Object_Landroid_view_inspector_PropertyReader_Handler:Android.Views.Inspectors.IInspectionCompanionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readProperties", "(Ljava/lang/Object;Landroid/view/inspector/PropertyReader;)V", "GetReadProperties_Ljava_lang_Object_Landroid_view_inspector_PropertyReader_Handler:Android.Views.Inspectors.IInspectionCompanionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inspectable" Type="Java.Lang.Object" />
        <Parameter Name="propertyReader" Type="Android.Views.Inspectors.IPropertyReader" />
      </Parameters>
      <Docs>
        <param name="inspectable">A object of type {T} to read the properties of.</param>
        <param name="propertyReader">An object which receives the property IDs and values.</param>
        <summary>Read the values of an instance of this companion's type into a <c>PropertyReader</c>.</summary>
        <remarks>
          <para>Read the values of an instance of this companion's type into a <c>PropertyReader</c>.
            
            This method needs to return the property IDs stored by
            <c>#mapProperties(PropertyMapper)</c>. Implementations should track if their properties
            have been mapped and throw a <c>UninitializedPropertyMapException</c> if this method is
            called before {mapProperties}.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/inspector/InspectionCompanion#readProperties(T,%20android.view.inspector.PropertyReader)" title="Reference documentation">Java documentation for <code>android.view.inspector.InspectionCompanion.readProperties(T, android.view.inspector.PropertyReader)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
