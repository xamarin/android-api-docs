<Namespace Name="Android.Hardware.Camera2">
  <Docs>
    <summary>The android.hardware.camera2 package provides an interface to
individual camera devices connected to an Android device.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The android.hardware.camera2 package provides an interface to
individual camera devices connected to an Android device. It replaces
the deprecated <c><see cref="T:Android.Hardware.Camera" /></c> class.</para>
      <para tool="javadoc-to-mdoc">This package models a camera device as a pipeline, which takes in
input requests for capturing a single frame, captures the single image
per the request, and then outputs one capture result metadata packet,
plus a set of output image buffers for the request. The requests are
processed in-order, and multiple requests can be in flight at
once. Since the camera device is a pipeline with multiple stages,
having multiple requests in flight is required to maintain full
framerate on most Android devices.</para>
      <para tool="javadoc-to-mdoc">To enumerate, query, and open available camera devices, obtain a
<c><see cref="T:Android.Hardware.Camera2.CameraManager" /></c> instance.</para>
      <para tool="javadoc-to-mdoc">Individual <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c> provide a set of static property information that
describes the hardware device and the available settings and output
parameters for the device. This information is provided through the
<c><see cref="T:Android.Hardware.Camera2.CameraCharacteristics" /></c> object, and is
available through <c><see cref="M:Android.Hardware.Camera2.CameraManager.GetCameraCharacteristics(System.String)" /></c></para>
      <para tool="javadoc-to-mdoc">To capture or stream images from a camera device, the application
must first create a <c><see cref="T:Android.Hardware.Camera2.CameraCaptureSession" /></c>
with a set of output Surfaces for use with the camera device, with
<c><see cref="android.hardware.camera2.CameraCaptureSession.StateCallback," tool="ReplaceLinkValue" /></c>. Each
Surface has to be pre-configured with an <c><see cref="T:Android.Hardware.Camera2.Params.StreamConfigurationMap" /></c> (if applicable) to match the sizes and formats
available from the camera device. A target Surface can be obtained
from a variety of classes, including <c><see cref="T:Android.Views.SurfaceView" /></c>,
<c><see cref="T:Android.Graphics.SurfaceTexture" /></c> via
<c><see cref="C:Android.Views.Surface(Android.Graphics.SurfaceTexture)" /></c>,
<c><see cref="T:Android.Media.MediaCodec" /></c>, <c><see cref="T:Android.Media.MediaRecorder" /></c>,
<c><see cref="T:Android.Renderscripts.Allocation" /></c>, and <c><see cref="T:Android.Media.ImageReader" /></c>.
</para>
      <para tool="javadoc-to-mdoc">Generally, camera preview images are sent to <c><see cref="T:Android.Views.SurfaceView" /></c> or <c><see cref="T:Android.Views.TextureView" /></c> (via its
<c><see cref="T:Android.Graphics.SurfaceTexture" /></c>). Capture of JPEG images or
RAW buffers for <c><see cref="T:Android.Hardware.Camera2.DngCreator" /></c> can be
done with <c><see cref="T:Android.Media.ImageReader" /></c> with the <c><see cref="F:Android.Graphics.ImageFormat.Jpeg" /></c> and <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> formats.  Application-driven
processing of camera data in RenderScript, OpenGL ES, or directly in
managed or native code is best done through <c><see cref="T:Android.Renderscripts.Allocation" /></c> with a YUV <c><see cref="T:Android.Renderscripts.Type" /></c>, <c><see cref="T:Android.Graphics.SurfaceTexture" /></c>,
and <c><see cref="T:Android.Media.ImageReader" /></c> with a <c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c> format, respectively.</para>
      <para tool="javadoc-to-mdoc">The application then needs to construct a <c><see cref="T:Android.Hardware.Camera2.CaptureRequest" /></c>, which defines all the
capture parameters needed by a camera device to capture a single
image. The request also lists which of the configured output Surfaces
should be used as targets for this capture. The CameraDevice has a
<c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureRequest(Android.Hardware.Camera2.CameraTemplate)" /></c> for creating a <c><see cref="!:NoType:android/hardware/camera2/CaptureRequest$Builder;Href=../../../../reference/android/hardware/camera2/CaptureRequest.Builder.html" /></c> for a
given use case, which is optimized for the Android device the
application is running on.</para>
      <para tool="javadoc-to-mdoc">Once the request has been set up, it can be handed to the active
capture session either for a one-shot <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.Capture(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> or for
an endlessly <c><see cref="M:Android.Hardware.Camera2.CameraCaptureSession.SetRepeatingRequest(Android.Hardware.Camera2.CaptureRequest,.CaptureCallback,.CaptureCallback)" /></c> use. Both methods also have a variant that accepts a list
of requests to use as a burst capture / repeating burst. Repeating
requests have a lower priority than captures, so a request submitted
through <c>capture()</c> while there's a repeating request
configured will be captured before any new instances of the currently
repeating (burst) capture will begin capture.</para>
      <para tool="javadoc-to-mdoc">After processing a request, the camera device will produce a <c><see cref="T:Android.Hardware.Camera2.TotalCaptureResult" /></c> object, which contains
information about the state of the camera device at time of capture,
and the final settings used. These may vary somewhat from the request,
if rounding or resolving contradictory parameters was necessary. The
camera device will also send a frame of image data into each of the
output <c>Surfaces</c> included in the request. These are produced
asynchronously relative to the output CaptureResult, sometimes
substantially later.</para>
    </remarks>
  </Docs>
</Namespace>
