<Type Name="MediaProjectionManager" FullName="Android.Media.Projection.MediaProjectionManager">
  <TypeSignature Language="C#" Value="public sealed class MediaProjectionManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaProjectionManager extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Media.Projection.MediaProjectionManager" />
  <TypeSignature Language="F#" Value="type MediaProjectionManager = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/projection/MediaProjectionManager", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/projection/MediaProjectionManager", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Manages the retrieval of certain types of <c>MediaProjection</c> tokens.</summary>
    <remarks>
      <para>Manages the retrieval of certain types of <c>MediaProjection</c> tokens.</para>
      <para>&lt;ol&gt;An example flow of starting a media projection will be:
                &lt;li&gt;Declare a foreground service with the type <c>mediaProjection</c> in
                the <c>AndroidManifest.xml</c>.
                &lt;/li&gt;
                &lt;li&gt;Create an intent by calling <c>MediaProjectionManager#createScreenCaptureIntent()</c>
                    and pass this intent to <c>Activity#startActivityForResult(Intent, int)</c>.
                &lt;/li&gt;
                &lt;li&gt;On getting <c>Activity#onActivityResult(int, int, Intent)</c>,
                    start the foreground service with the type
                    <c>android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION</c>.
                &lt;/li&gt;
                &lt;li&gt;Retrieve the media projection token by calling
                    <c>MediaProjectionManager#getMediaProjection(int, Intent)</c> with the result code and
                    intent from the <c>Activity#onActivityResult(int, int, Intent)</c> above.
                &lt;/li&gt;
                &lt;li&gt;Start the screen capture session for media projection by calling
                    <c>MediaProjection#createVirtualDisplay(String, int, int, int, int, Surface,
                    android.hardware.display.VirtualDisplay.Callback, Handler)</c>.
                &lt;/li&gt;
            &lt;/ol&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/projection/MediaProjectionManager" title="Reference documentation">Java documentation for <code>android.media.projection.MediaProjectionManager</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateScreenCaptureIntent">
      <MemberSignature Language="C#" Value="public Android.Content.Intent CreateScreenCaptureIntent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.Intent CreateScreenCaptureIntent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.Projection.MediaProjectionManager.CreateScreenCaptureIntent" />
      <MemberSignature Language="F#" Value="member this.CreateScreenCaptureIntent : unit -&gt; Android.Content.Intent" Usage="mediaProjectionManager.CreateScreenCaptureIntent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createScreenCaptureIntent", "()Landroid/content/Intent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createScreenCaptureIntent", "()Landroid/content/Intent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an <c>Intent</c> that &lt;b&gt;must&lt;/b&gt; be passed to
            <c>Activity#startActivityForResult(Intent, int)</c> (or similar) in order to start screen
            capture.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns an <c>Intent</c> that &lt;b&gt;must&lt;/b&gt; be passed to
            <c>Activity#startActivityForResult(Intent, int)</c> (or similar) in order to start screen
            capture. The activity will prompt the user whether to allow screen capture.  The result of
            this activity (received by overriding <c>Activity#onActivityResult(int, int, Intent)
            onActivityResult(int, int, Intent)</c>) should be passed to
            <c>#getMediaProjection(int, Intent)</c>.</para>
          <para>Identical to calling <c>#createScreenCaptureIntent(MediaProjectionConfig)</c> with
            a <c>MediaProjectionConfig#createConfigForUserChoice()</c>.</para>
          <para>Should be used instead of <c>#createScreenCaptureIntent(MediaProjectionConfig)</c> when the
            calling app does not want to customize the activity shown to the user.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/projection/MediaProjectionManager#createScreenCaptureIntent()" title="Reference documentation">Java documentation for <code>android.media.projection.MediaProjectionManager.createScreenCaptureIntent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScreenCaptureIntent">
      <MemberSignature Language="C#" Value="public Android.Content.Intent CreateScreenCaptureIntent (Android.Media.Projection.MediaProjectionConfig config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.Intent CreateScreenCaptureIntent(class Android.Media.Projection.MediaProjectionConfig config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.Projection.MediaProjectionManager.CreateScreenCaptureIntent(Android.Media.Projection.MediaProjectionConfig)" />
      <MemberSignature Language="F#" Value="member this.CreateScreenCaptureIntent : Android.Media.Projection.MediaProjectionConfig -&gt; Android.Content.Intent" Usage="mediaProjectionManager.CreateScreenCaptureIntent config" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createScreenCaptureIntent", "(Landroid/media/projection/MediaProjectionConfig;)Landroid/content/Intent;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createScreenCaptureIntent", "(Landroid/media/projection/MediaProjectionConfig;)Landroid/content/Intent;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="Android.Media.Projection.MediaProjectionConfig" />
      </Parameters>
      <Docs>
        <param name="config">Customization for the <c>MediaProjection</c> that this <c>Intent</c> requests
                          the user's consent for.</param>
        <summary>Returns an <c>Intent</c> that &lt;b&gt;must&lt;/b&gt; be passed to
            <c>Activity#startActivityForResult(Intent, int)</c> (or similar) in order to start screen
            capture.</summary>
        <returns>An <c>Intent</c> requesting the user's consent, specialized based upon the given
            configuration.</returns>
        <remarks>
          <para>Returns an <c>Intent</c> that &lt;b&gt;must&lt;/b&gt; be passed to
            <c>Activity#startActivityForResult(Intent, int)</c> (or similar) in order to start screen
            capture. Customizes the activity and resulting <c>MediaProjection</c> session based up
            the provided <c>config</c>. The activity will prompt the user whether to allow screen
            capture. The result of this activity (received by overriding
            <c>Activity#onActivityResult(int, int, Intent) onActivityResult(int, int, Intent)</c>)
            should be passed to <c>#getMediaProjection(int, Intent)</c>.</para>
          <para>If <c>MediaProjectionConfig</c> was created from:
            &lt;ul&gt;
                &lt;li&gt;
                    <c>MediaProjectionConfig#createConfigForDefaultDisplay()</c>, then creates an
                    <c>Intent</c> for capturing the default display. The activity limits the user's
                    choice to just the display specified.
                &lt;/li&gt;
                &lt;li&gt;
                    <c>MediaProjectionConfig#createConfigForUserChoice()</c>, then creates an
                    <c>Intent</c> for deferring which region to capture to the user. This gives the
                    user the same behaviour as calling <c>#createScreenCaptureIntent()</c>. The
                    activity gives the user the choice between
                    <c>android.view.Display#DEFAULT_DISPLAY</c>, or a different region.
                &lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>Should be used instead of <c>#createScreenCaptureIntent()</c> when the calling app wants to
            customize the activity shown to the user.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/projection/MediaProjectionManager#createScreenCaptureIntent(android.media.projection.MediaProjectionConfig)" title="Reference documentation">Java documentation for <code>android.media.projection.MediaProjectionManager.createScreenCaptureIntent(android.media.projection.MediaProjectionConfig)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMediaProjection">
      <MemberSignature Language="C#" Value="public Android.Media.Projection.MediaProjection? GetMediaProjection (int resultCode, Android.Content.Intent resultData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Projection.MediaProjection GetMediaProjection(int32 resultCode, class Android.Content.Intent resultData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.Projection.MediaProjectionManager.GetMediaProjection(System.Int32,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="member this.GetMediaProjection : int * Android.Content.Intent -&gt; Android.Media.Projection.MediaProjection" Usage="mediaProjectionManager.GetMediaProjection (resultCode, resultData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getMediaProjection", "(ILandroid/content/Intent;)Landroid/media/projection/MediaProjection;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getMediaProjection", "(ILandroid/content/Intent;)Landroid/media/projection/MediaProjection;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Projection.MediaProjection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="System.Int32" />
        <Parameter Name="resultData" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="resultCode">The result code from <c>Activity#onActivityResult(int, int, Intent)
                              onActivityResult(int, int, Intent)</c>.</param>
        <param name="resultData">The result data from <c>Activity#onActivityResult(int, int, Intent)
                              onActivityResult(int, int, Intent)</c>.</param>
        <summary>Retrieves the <c>MediaProjection</c> obtained from a successful screen
            capture request.</summary>
        <returns>The media projection obtained from a successful screen capture request, or null if
            the result of the screen capture request is not <c>Activity#RESULT_OK RESULT_OK</c>.</returns>
        <remarks>
          <para>Retrieves the <c>MediaProjection</c> obtained from a successful screen
            capture request. The result code and data from the request are provided by overriding
            <c>Activity#onActivityResult(int, int, Intent) onActivityResult(int, int, Intent)</c>,
            which is called after starting an activity using <c>#createScreenCaptureIntent()</c>.</para>
          <para>Starting from Android <c>android.os.Build.VERSION_CODES#R R</c>, if your application
            requests the <c>android.Manifest.permission#SYSTEM_ALERT_WINDOW SYSTEM_ALERT_WINDOW</c>
            permission, and the user has not explicitly denied it, the permission will be automatically
            granted until the projection is stopped. The permission allows your app to display user
            controls on top of the screen being captured.</para>
          <para>An app targeting SDK version <c>android.os.Build.VERSION_CODES#Q Q</c> or later must
            invoke <c>getMediaProjection</c> and maintain the capture session
            (<c>MediaProjection#createVirtualDisplay(String, int, int, int, int, Surface,
            android.hardware.display.VirtualDisplay.Callback, Handler)
            MediaProjection#createVirtualDisplay</c>) while running a foreground service. The app must set
            the <c>android.R.attr#foregroundServiceType foregroundServiceType</c> attribute to
            <c>android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION
            FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION</c> in the
            &lt;c&gt;&amp;amp;lt;service&amp;amp;gt;&lt;/c&gt; element of
            the app's manifest file.</para>
          <para>For an app targeting SDK version <c>android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U</c> or
            later, the user must have granted the app with the permission to start a projection,
            before the app starts a foreground service with the type
            <c>android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION</c>.
            Additionally, the app must have started the foreground service with that type before calling
            this API here, or else it'll receive a <c>SecurityException</c> from this API call, unless
            it's a privileged app. Apps can request the permission via the
            <c>#createScreenCaptureIntent()</c> and <c>Activity#startActivityForResult(Intent, int)</c>
            (or similar APIs).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/projection/MediaProjectionManager#getMediaProjection(int,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.media.projection.MediaProjectionManager.getMediaProjection(int, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Media.Projection.MediaProjectionManager.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Media.Projection.MediaProjectionManager.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Media.Projection.MediaProjectionManager.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Media.Projection.MediaProjectionManager.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Media.Projection.MediaProjectionManager.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Media.Projection.MediaProjectionManager.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
