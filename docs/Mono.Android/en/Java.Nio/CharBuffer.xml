<Type Name="CharBuffer" FullName="Java.Nio.CharBuffer">
  <TypeSignature Language="C#" Value="public abstract class CharBuffer : Java.Nio.Buffer, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IAppendable, Java.Lang.ICharSequence, Java.Lang.IComparable, Java.Lang.IReadable, System.Collections.Generic.IEnumerable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CharBuffer extends Java.Nio.Buffer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IAppendable, class Java.Lang.ICharSequence, class Java.Lang.IComparable, class Java.Lang.IReadable, class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.CharBuffer" />
  <TypeSignature Language="F#" Value="type CharBuffer = class&#xA;    inherit Buffer&#xA;    interface IAppendable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface ICharSequence&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IReadable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Buffer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IAppendable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.ICharSequence</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IReadable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/CharBuffer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/CharBuffer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A char buffer.</summary>
    <remarks>
      <para>A char buffer.</para>
      <para>This class defines four categories of operations upon
            char buffers:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>Absolute and relative <c>#get() &lt;i&gt;get&lt;/i&gt;</c> and
              <c>#put(char) &lt;i&gt;put&lt;/i&gt;</c> methods that read and write
              single chars;</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Relative <c>#get(char[]) &lt;i&gt;bulk get&lt;/i&gt;</c>
              methods that transfer contiguous sequences of chars from this buffer
              into an array; and</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Relative <c>#put(char[]) &lt;i&gt;bulk put&lt;/i&gt;</c>
              methods that transfer contiguous sequences of chars from a
              char array,&amp;#32;a&amp;#32;string, or some other char
              buffer into this buffer;&amp;#32;and</para>
      <para>&lt;/li&gt;
            
            
              &lt;li&gt;</para>
      <para>Methods for <c>#compact compacting</c>, <c>#duplicate duplicating</c>, and <c>#slice slicing</c>
              a char buffer.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>Char buffers can be created either by <c>#allocate
            &lt;i&gt;allocation&lt;/i&gt;</c>, which allocates space for the buffer's
            
            
            content, by <c>#wrap(char[]) &lt;i&gt;wrapping&lt;/i&gt;</c> an existing
            char array or&amp;#32;string into a buffer, or by creating a
            &lt;i&gt;view&lt;/i&gt; of an existing byte buffer.</para>
      <para>Like a byte buffer, a char buffer is either &lt;i&gt;direct&lt;/i&gt; or &lt;i&gt;non-direct&lt;/i&gt;.  A
            char buffer created via the <c>wrap</c> methods of this class will
            be non-direct.  A char buffer created as a view of a byte buffer will
            be direct if, and only if, the byte buffer itself is direct.  Whether or not
            a char buffer is direct may be determined by invoking the <c>#isDirect isDirect</c> method.</para>
      <para>This class implements the <c>CharSequence</c> interface so that
            character buffers may be used wherever character sequences are accepted, for
            example in the regular-expression package <c><c>java.util.regex</c></c>.</para>
      <para>Methods in this class that do not otherwise have a value to return are
            specified to return the buffer upon which they are invoked.  This allows
            method invocations to be chained.
            
            
            The sequence of statements
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">cb.put("text/");
            cb.put(subtype);
            cb.put("; charset=");
            cb.put(enc);</code>
      <para>&lt;/blockquote&gt;
            
            can, for example, be replaced by the single statement
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">cb.put("text/").put(subtype).put("; charset=").put(enc);</code>
      <para>&lt;/blockquote&gt;</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/CharBuffer" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CharBuffer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.CharBuffer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.CharBuffer" Usage="new Java.Nio.CharBuffer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Allocate (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Allocate(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Allocate(System.Int32)" />
      <MemberSignature Language="F#" Value="static member Allocate : int -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Allocate capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("allocate", "(I)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("allocate", "(I)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">The new buffer's capacity, in chars</param>
        <summary>Allocates a new char buffer.</summary>
        <returns>The new char buffer</returns>
        <remarks>
          <para>Allocates a new char buffer.</para>
          <para>The new buffer's position will be zero, its limit will be its
            capacity, its mark will be undefined, and each of its elements will be
            initialized to zero.  It will have a <c>#array backing array</c>,
            and its <c>#arrayOffset array offset</c> will be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#allocate(int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.allocate(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>capacity</c> is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Append (Java.Lang.ICharSequence? csq);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Append(class Java.Lang.ICharSequence csq) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Append(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="abstract member Append : Java.Lang.ICharSequence -&gt; Java.Nio.CharBuffer&#xA;override this.Append : Java.Lang.ICharSequence -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Append csq" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("append", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", "GetAppend_Ljava_lang_CharSequence_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("append", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", "GetAppend_Ljava_lang_CharSequence_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence to append.  If <c>csq</c> is
                    <c>null</c>, then the four characters <c>"null"</c> are
                    appended to this character buffer.</param>
        <summary>Appends the specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Appends the specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>An invocation of this method of the form <c>dst.append(csq)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">dst.put(csq.toString()) </code>
          <para>Depending on the specification of <c>toString</c> for the
            character sequence <c>csq</c>, the entire sequence may not be
            appended.  For instance, invoking the <c>CharBuffer#toString()
            toString</c> method of a character buffer will return a subsequence whose
            content depends upon the buffer's position and limit.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#append(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.append(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than the length of csq.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Append (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Append(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Append(System.Char)" />
      <MemberSignature Language="F#" Value="abstract member Append : char -&gt; Java.Nio.CharBuffer&#xA;override this.Append : char -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Append c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("append", "(C)Ljava/nio/CharBuffer;", "GetAppend_CHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("append", "(C)Ljava/nio/CharBuffer;", "GetAppend_CHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">The 16-bit char to append</param>
        <summary>Appends the specified char  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Appends the specified char  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>An invocation of this method of the form <c>dst.append(c)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">dst.put(c) </code>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#append(char)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.append(char)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is equal or greater than limit.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public Java.Nio.CharBuffer? Append (string? csq);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.CharBuffer Append(string csq) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Append(System.String)" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Append csq" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence to append.  If <c>csq</c> is
                    <c>null</c>, then the four characters <c>"null"</c> are
                    appended to this character buffer.</param>
        <summary>Appends the specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Appends the specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>An invocation of this method of the form <c>dst.append(csq)</c>
            behaves in exactly the same way as the invocation</para>
          <code lang="text/java">dst.put(csq.toString()) </code>
          <para>Depending on the specification of <c>toString</c> for the
            character sequence <c>csq</c>, the entire sequence may not be
            appended.  For instance, invoking the <c>CharBuffer#toString()
            toString</c> method of a character buffer will return a subsequence whose
            content depends upon the buffer's position and limit.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#append(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.append(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Append (Java.Lang.ICharSequence? csq, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Append(class Java.Lang.ICharSequence csq, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Append(Java.Lang.ICharSequence,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Append : Java.Lang.ICharSequence * int * int -&gt; Java.Nio.CharBuffer&#xA;override this.Append : Java.Lang.ICharSequence * int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Append (csq, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("append", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", "GetAppend_Ljava_lang_CharSequence_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("append", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", "GetAppend_Ljava_lang_CharSequence_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the first char to write, must not be negative and not greater
            than <c>csq.length()</c>.</param>
        <param name="end">the last char to write (excluding), must be less than
            <c>start</c> and not greater than <c>csq.length()</c>.</param>
        <param name="csq">The character sequence from which a subsequence will be
                    appended.  If <c>csq</c> is <c>null</c>, then characters
                    will be appended as if <c>csq</c> contained the four
                    characters <c>"null"</c>.</param>
        <summary>Appends a subsequence of the  specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Appends a subsequence of the  specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>An invocation of this method of the form <c>dst.append(csq, start,
            end)</c> when <c>csq</c> is not <c>null</c>, behaves in exactly the
            same way as the invocation</para>
          <code lang="text/java">dst.put(csq.subSequence(start, end).toString()) </code>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#append(java.lang.CharSequence,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.append(java.lang.CharSequence, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>end - start</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>end</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public Java.Nio.CharBuffer? Append (string? csq, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.CharBuffer Append(string csq, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Append (csq, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="csq">The character sequence from which a subsequence will be
                    appended.  If <c>csq</c> is <c>null</c>, then characters
                    will be appended as if <c>csq</c> contained the four
                    characters <c>"null"</c>.</param>
        <summary>Appends a subsequence of the  specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Appends a subsequence of the  specified character sequence  to this
            buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>An invocation of this method of the form <c>dst.append(csq, start,
            end)</c> when <c>csq</c> is not <c>null</c>, behaves in exactly the
            same way as the invocation</para>
          <code lang="text/java">dst.put(csq.subSequence(start, end).toString()) </code>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#append(java.lang.CharSequence,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.append(java.lang.CharSequence, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayOffset">
      <MemberSignature Language="C#" Value="public override sealed int ArrayOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ArrayOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.ArrayOffset" />
      <MemberSignature Language="F#" Value="override this.ArrayOffset : unit -&gt; int" Usage="charBuffer.ArrayOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("arrayOffset", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("arrayOffset", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the offset within this buffer's backing array of the first
            element of the buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>The offset within this buffer's array
                     of the first element of the buffer</returns>
        <remarks>
          <para>Returns the offset within this buffer's backing array of the first
            element of the buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>If this buffer is backed by an array then buffer position <i>p</i>
            corresponds to array index <i>p</i>&amp;nbsp;+&amp;nbsp;<c>arrayOffset()</c>.</para>
          <para>Invoke the <c>#hasArray hasArray</c> method before invoking this
            method in order to ensure that this buffer has an accessible backing
            array.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#arrayOffset()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.arrayOffset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? AsReadOnlyBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer AsReadOnlyBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.AsReadOnlyBuffer" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyBuffer : unit -&gt; Java.Nio.CharBuffer" Usage="charBuffer.AsReadOnlyBuffer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/CharBuffer;", "GetAsReadOnlyBufferHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/CharBuffer;", "GetAsReadOnlyBufferHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new, read-only char buffer that shares this buffer's
            content.</summary>
        <returns>The new, read-only char buffer</returns>
        <remarks>
          <para>Creates a new, read-only char buffer that shares this buffer's
            content.</para>
          <para>The content of the new buffer will be that of this buffer.  Changes
            to this buffer's content will be visible in the new buffer; the new
            buffer itself, however, will be read-only and will not allow the shared
            content to be modified.  The two buffers' position, limit, and mark
            values will be independent.</para>
          <para>The new buffer's capacity, limit, position, and mark values will be
            identical to those of this buffer.</para>
          <para>If this buffer is itself read-only then this method behaves in
            exactly the same way as the <c>#duplicate duplicate</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#asReadOnlyBuffer()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.asReadOnlyBuffer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CharAt">
      <MemberSignature Language="C#" Value="public char CharAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char CharAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.CharAt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member CharAt : int -&gt; char&#xA;override this.CharAt : int -&gt; char" Usage="charBuffer.CharAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.ICharSequence.CharAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("charAt", "(I)C", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("charAt", "(I)C", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the character to be read, relative to the position;
                    must be non-negative and smaller than <c>remaining()</c></param>
        <summary>Reads the character at the given index relative to the current
            position.</summary>
        <returns>The character at index
                     <c>position()&amp;nbsp;+&amp;nbsp;index</c></returns>
        <remarks>
          <para>Reads the character at the given index relative to the current
            position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#charAt(int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.charAt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index </c> or <c>index &gt;= remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Compact">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? Compact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Compact() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Compact" />
      <MemberSignature Language="F#" Value="abstract member Compact : unit -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Compact " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compact", "()Ljava/nio/CharBuffer;", "GetCompactHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compact", "()Ljava/nio/CharBuffer;", "GetCompactHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compacts this buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Compacts this buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>The chars between the buffer's current position and its limit,
            if any, are copied to the beginning of the buffer.  That is, the
            char at index <i>p</i>&amp;nbsp;=&amp;nbsp;<c>position()</c> is copied
            to index zero, the char at index <i>p</i>&amp;nbsp;+&amp;nbsp;1 is copied
            to index one, and so forth until the char at index
            <c>limit()</c>&amp;nbsp;-&amp;nbsp;1 is copied to index
            <i>n</i>&amp;nbsp;=&amp;nbsp;<c>limit()</c>&amp;nbsp;-&amp;nbsp;<c>1</c>&amp;nbsp;-&amp;nbsp;<i>p</i>.
            The buffer's position is then set to <i>n+1</i> and its limit is set to
            its capacity.  The mark, if defined, is discarded.</para>
          <para>The buffer's position is set to the number of chars copied,
            rather than to zero, so that an invocation of this method can be
            followed immediately by an invocation of another relative <i>put</i>
            method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#compact()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.compact()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public virtual int CompareTo (Java.Nio.CharBuffer? that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Nio.CharBuffer that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.CompareTo(Java.Nio.CharBuffer)" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Java.Nio.CharBuffer -&gt; int&#xA;override this.CompareTo : Java.Nio.CharBuffer -&gt; int" Usage="charBuffer.CompareTo that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/nio/CharBuffer;)I", "GetCompareTo_Ljava_nio_CharBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/nio/CharBuffer;)I", "GetCompareTo_Ljava_nio_CharBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="Java.Nio.CharBuffer" />
      </Parameters>
      <Docs>
        <param name="that">To be added.</param>
        <summary>Compares this buffer to another.</summary>
        <returns>A negative integer, zero, or a positive integer as this buffer
                     is less than, equal to, or greater than the given buffer</returns>
        <remarks>
          <para>Compares this buffer to another.</para>
          <para>Two char buffers are compared by comparing their sequences of
            remaining elements lexicographically, without regard to the starting
            position of each sequence within its corresponding buffer.
            
            
            
            
            
            
            
            
            Pairs of <c>char</c> elements are compared as if by invoking
            <c>Character#compare(char,char)</c>.</para>
          <para>A char buffer is not comparable to any other type of object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#compareTo(java.nio.CharBuffer)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.compareTo(java.nio.CharBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>otherBuffer</c> is not a char buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Duplicate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? Duplicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Duplicate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Duplicate" />
      <MemberSignature Language="F#" Value="override this.Duplicate : unit -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Duplicate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("duplicate", "()Ljava/nio/CharBuffer;", "GetDuplicateHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("duplicate", "()Ljava/nio/CharBuffer;", "GetDuplicateHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new char buffer that shares this buffer's content.</summary>
        <returns>The new char buffer</returns>
        <remarks>
          <para>Creates a new char buffer that shares this buffer's content.</para>
          <para>The content of the new buffer will be that of this buffer.  Changes
            to this buffer's content will be visible in the new buffer, and vice
            versa; the two buffers' position, limit, and mark values will be
            independent.</para>
          <para>The new buffer's capacity, limit, position, and mark values will be
            identical to those of this buffer.  The new buffer will be direct if,
            and only if, this buffer is direct, and it will be read-only if, and
            only if, this buffer is read-only.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#duplicate()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.duplicate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract char Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Get" />
      <MemberSignature Language="F#" Value="abstract member Get : unit -&gt; char" Usage="charBuffer.Get " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "()C", "GetGetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "()C", "GetGetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Relative <i>get</i> method.</summary>
        <returns>The char at the buffer's current position</returns>
        <remarks>
          <para>Relative <i>get</i> method.  Reads the char at this buffer's
            current position, and then increments the position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#get()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.get()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is equal or greater than limit.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Get (char[]? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Get(char[] dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Get(System.Char[])" />
      <MemberSignature Language="F#" Value="abstract member Get : char[] -&gt; Java.Nio.CharBuffer&#xA;override this.Get : char[] -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Get dst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "([C)Ljava/nio/CharBuffer;", "GetGet_arrayCHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "([C)Ljava/nio/CharBuffer;", "GetGet_arrayCHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="dst">The destination array</param>
        <summary>Relative bulk <i>get</i> method.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>get</i> method.</para>
          <para>This method transfers chars from this buffer into the given
            destination array.  An invocation of this method of the form
            <c>src.get(a)</c> behaves in exactly the same way as the invocation</para>
          <code lang="text/java">src.get(a, 0, a.length) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#get(char[])" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.get(char[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>dst.length</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract char Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Get(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Get : int -&gt; char" Usage="charBuffer.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "(I)C", "GetGet_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "(I)C", "GetGet_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index from which the char will be read</param>
        <summary>Absolute <i>get</i> method.</summary>
        <returns>The char at the given index</returns>
        <remarks>
          <para>Absolute <i>get</i> method.  Reads the char at the given
            index.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#get(int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.get(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Get (char[]? dst, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Get(char[] dst, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Get(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Get : char[] * int * int -&gt; Java.Nio.CharBuffer&#xA;override this.Get : char[] * int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Get (dst, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "([CII)Ljava/nio/CharBuffer;", "GetGet_arrayCIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "([CII)Ljava/nio/CharBuffer;", "GetGet_arrayCIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dst">The array into which chars are to be written</param>
        <param name="offset">The offset within the array of the first char to be
                    written; must be non-negative and no larger than
                    <c>dst.length</c></param>
        <param name="length">The maximum number of chars to be written to the given
                    array; must be non-negative and no larger than
                    <c>dst.length - offset</c></param>
        <summary>Relative bulk <i>get</i> method.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>get</i> method.</para>
          <para>This method transfers chars from this buffer into the given
            destination array.  If there are fewer chars remaining in the
            buffer than are required to satisfy the request, that is, if
            <c>length</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>, then no
            chars are transferred and a <c>BufferUnderflowException</c> is
            thrown.</para>
          <para>Otherwise, this method copies <c>length</c> chars from this
            buffer into the given array, starting at the current position of this
            buffer and at the given offset in the array.  The position of this
            buffer is then incremented by <c>length</c>.</para>
          <para>In other words, an invocation of this method of the form
            <c>src.get(dst,&amp;nbsp;off,&amp;nbsp;len)</c> has exactly the same effect as
            the loop</para>
          <code lang="text/java">{@code
                for (int i = off; i &lt; off + len; i++)
                    dst[i] = src.get();
            }</code>
          <para>except that it first checks that there are sufficient chars in
            this buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#get(char[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.get(char[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>dstOffset</c> or <c>charCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>charCount</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;char&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;" Usage="charBuffer.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Java.Nio.CharBuffer+&lt;GetEnumerator&gt;d__122))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Java.Nio.CharBuffer+&lt;GetEnumerator&gt;d__122))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public override bool HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasArray" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.CharBuffer.HasArray" />
      <MemberSignature Language="F#" Value="member this.HasArray : bool" Usage="Java.Nio.CharBuffer.HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasArray", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasArray", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells whether or not this buffer is backed by an accessible char
            array.</summary>
        <value>
          <c>true</c> if, and only if, this buffer
                     is backed by an array and is not read-only</value>
        <remarks>
          <para>Tells whether or not this buffer is backed by an accessible char
            array.</para>
          <para>If this method returns <c>true</c> then the <c>#array() array</c>
            and <c>#arrayOffset() arrayOffset</c> methods may safely be invoked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#hasArray()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.hasArray()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.CharBuffer.IsEmpty" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="Java.Nio.CharBuffer.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isEmpty", "()Z", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isEmpty", "()Z", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this character buffer is empty.</summary>
        <value>
          <c>true</c> if there are <c>0</c> remaining characters,
                    otherwise <c>false</c></value>
        <remarks>
          <para>Returns <c>true</c> if this character buffer is empty.</para>
          <para>Added in 15.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#isEmpty()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.isEmpty()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IAppendable.Append">
      <MemberSignature Language="C#" Value="Java.Lang.IAppendable IAppendable.Append (Java.Lang.ICharSequence? csq);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.IAppendable Java.Lang.IAppendable.Append(class Java.Lang.ICharSequence csq) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Java#Lang#IAppendable#Append(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IAppendable.Append : Java.Lang.ICharSequence -&gt; Java.Lang.IAppendable&#xA;override this.Java.Lang.IAppendable.Append : Java.Lang.ICharSequence -&gt; Java.Lang.IAppendable" Usage="charBuffer.Java.Lang.IAppendable.Append csq" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAppendable.Append(Java.Lang.ICharSequence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.IAppendable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="csq">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IAppendable.Append">
      <MemberSignature Language="C#" Value="Java.Lang.IAppendable IAppendable.Append (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.IAppendable Java.Lang.IAppendable.Append(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Java#Lang#IAppendable#Append(System.Char)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IAppendable.Append : char -&gt; Java.Lang.IAppendable&#xA;override this.Java.Lang.IAppendable.Append : char -&gt; Java.Lang.IAppendable" Usage="charBuffer.Java.Lang.IAppendable.Append ch" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAppendable.Append(System.Char)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.IAppendable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IAppendable.Append">
      <MemberSignature Language="C#" Value="Java.Lang.IAppendable IAppendable.Append (Java.Lang.ICharSequence? csq, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.IAppendable Java.Lang.IAppendable.Append(class Java.Lang.ICharSequence csq, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Java#Lang#IAppendable#Append(Java.Lang.ICharSequence,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IAppendable.Append : Java.Lang.ICharSequence * int * int -&gt; Java.Lang.IAppendable&#xA;override this.Java.Lang.IAppendable.Append : Java.Lang.ICharSequence * int * int -&gt; Java.Lang.IAppendable" Usage="charBuffer.Java.Lang.IAppendable.Append (csq, start, end)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IAppendable.Append(Java.Lang.ICharSequence,System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.IAppendable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="csq">To be added.</param>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Java#Lang#IComparable#CompareTo(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int&#xA;override this.Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int" Usage="charBuffer.Java.Lang.IComparable.CompareTo o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IComparable.CompareTo(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.CharBuffer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.CharBuffer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Length() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Length" />
      <MemberSignature Language="F#" Value="abstract member Length : unit -&gt; int&#xA;override this.Length : unit -&gt; int" Usage="charBuffer.Length " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.ICharSequence.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("length", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("length", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the length of this character buffer.</summary>
        <returns>The length of this character buffer</returns>
        <remarks>
          <para>Returns the length of this character buffer.</para>
          <para>When viewed as a character sequence, the length of a character
            buffer is simply the number of characters between the position
            (inclusive) and the limit (exclusive); that is, it is equivalent to
            <c>remaining()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#length()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.length()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Mismatch">
      <MemberSignature Language="C#" Value="public virtual int Mismatch (Java.Nio.CharBuffer? that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Mismatch(class Java.Nio.CharBuffer that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Mismatch(Java.Nio.CharBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Mismatch : Java.Nio.CharBuffer -&gt; int&#xA;override this.Mismatch : Java.Nio.CharBuffer -&gt; int" Usage="charBuffer.Mismatch that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mismatch", "(Ljava/nio/CharBuffer;)I", "GetMismatch_Ljava_nio_CharBuffer_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mismatch", "(Ljava/nio/CharBuffer;)I", "GetMismatch_Ljava_nio_CharBuffer_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="Java.Nio.CharBuffer" />
      </Parameters>
      <Docs>
        <param name="that">The byte buffer to be tested for a mismatch with this buffer</param>
        <summary>Finds and returns the relative index of the first mismatch between this
            buffer and a given buffer.</summary>
        <returns>The relative index of the first mismatch between this and the
                     given buffer, otherwise -1 if no mismatch.</returns>
        <remarks>
          <para>Finds and returns the relative index of the first mismatch between this
            buffer and a given buffer.  The index is relative to the
            <c>#position() position</c> of each buffer and will be in the range of
            0 (inclusive) up to the smaller of the <c>#remaining() remaining</c>
            elements in each buffer (exclusive).</para>
          <para>If the two buffers share a common prefix then the returned index is
            the length of the common prefix and it follows that there is a mismatch
            between the two buffers at that index within the respective buffers.
            If one buffer is a proper prefix of the other then the returned index is
            the smaller of the remaining elements in each buffer, and it follows that
            the index is only valid for the buffer with the larger number of
            remaining elements.
            Otherwise, there is no mismatch.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#mismatch(java.nio.CharBuffer)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.mismatch(java.nio.CharBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteOrder? Order ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteOrder Order() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Order" />
      <MemberSignature Language="F#" Value="abstract member Order : unit -&gt; Java.Nio.ByteOrder" Usage="charBuffer.Order " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "GetOrderHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "GetOrderHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteOrder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves this buffer's byte order.</summary>
        <returns>This buffer's byte order</returns>
        <remarks>
          <para>Retrieves this buffer's byte order.</para>
          <para>The byte order of a char buffer created by allocation or by
            wrapping an existing <c>char</c> array is the <c>ByteOrder#nativeOrder native order</c> of the underlying
            hardware.  The byte order of a char buffer created as a view of a byte buffer is that of the
            byte buffer at the moment that the view is created.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#order()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.order()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Put (Java.Nio.CharBuffer? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Put(class Java.Nio.CharBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(Java.Nio.CharBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Put : Java.Nio.CharBuffer -&gt; Java.Nio.CharBuffer&#xA;override this.Put : Java.Nio.CharBuffer -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;", "GetPut_Ljava_nio_CharBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;", "GetPut_Ljava_nio_CharBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.CharBuffer" />
      </Parameters>
      <Docs>
        <param name="src">The source buffer from which chars are to be read;
                    must not be this buffer</param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers the chars remaining in the given source
            buffer into this buffer.  If there are more chars remaining in the
            source buffer than in this buffer, that is, if
            <c>src.remaining()</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>,
            then no chars are transferred and a <c>BufferOverflowException</c> is thrown.</para>
          <para>Otherwise, this method copies
            <i>n</i>&amp;nbsp;=&amp;nbsp;<c>src.remaining()</c> chars from the given
            buffer into this buffer, starting at each buffer's current position.
            The positions of both buffers are then incremented by <i>n</i>.</para>
          <para>In other words, an invocation of this method of the form
            <c>dst.put(src)</c> has exactly the same effect as the loop</para>
          <code lang="text/java">while (src.hasRemaining())
                    dst.put(src.get()); </code>
          <para>except that it first checks that there is sufficient space in this
            buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(java.nio.CharBuffer)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(java.nio.CharBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>src.remaining()</c> is greater than this buffer's
                <c>remaining()</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>src</c> is this buffer.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? Put (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Put(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.Char)" />
      <MemberSignature Language="F#" Value="abstract member Put : char -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(C)Ljava/nio/CharBuffer;", "GetPut_CHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(C)Ljava/nio/CharBuffer;", "GetPut_CHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">The char to be written</param>
        <summary>Relative <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>Writes the given char into this buffer at the current
            position, and then increments the position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(char)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(char)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is equal or greater than limit.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public Java.Nio.CharBuffer? Put (char[]? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.CharBuffer Put(char[] src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.Char[])" />
      <MemberSignature Language="F#" Value="member this.Put : char[] -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "([C)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "([C)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="src">The source array</param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers the entire content of the given source
            char array into this buffer.  An invocation of this method of the
            form <c>dst.put(a)</c> behaves in exactly the same way as the
            invocation</para>
          <code lang="text/java">dst.put(a, 0, a.length) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(char[])" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(char[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>src.length</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public Java.Nio.CharBuffer? Put (string? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.CharBuffer Put(string src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.String)" />
      <MemberSignature Language="F#" Value="member this.Put : string -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(Ljava/lang/String;)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(Ljava/lang/String;)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="src">The source string</param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers the entire content of the given source string
            into this buffer.  An invocation of this method of the form
            <c>dst.put(s)</c> behaves in exactly the same way as the invocation</para>
          <code lang="text/java">dst.put(s, 0, s.length()) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(java.lang.String)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than the length of string.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? Put (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Put(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.Int32,System.Char)" />
      <MemberSignature Language="F#" Value="abstract member Put : int * char -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(IC)Ljava/nio/CharBuffer;", "GetPut_ICHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(IC)Ljava/nio/CharBuffer;", "GetPut_ICHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">The index at which the char will be written</param>
        <param name="c">The char value to be written</param>
        <summary>Absolute <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Absolute <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>Writes the given char into this buffer at the given
            index.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(int,%20char)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(int, char)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Put (char[]? src, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Put(char[] src, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Put : char[] * int * int -&gt; Java.Nio.CharBuffer&#xA;override this.Put : char[] * int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put (src, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "([CII)Ljava/nio/CharBuffer;", "GetPut_arrayCIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "([CII)Ljava/nio/CharBuffer;", "GetPut_arrayCIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The array from which chars are to be read</param>
        <param name="offset">The offset within the array of the first char to be read;
                    must be non-negative and no larger than <c>array.length</c></param>
        <param name="length">The number of chars to be read from the given array;
                    must be non-negative and no larger than
                    <c>array.length - offset</c></param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers chars into this buffer from the given
            source array.  If there are more chars to be copied from the array
            than remain in this buffer, that is, if
            <c>length</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>, then no
            chars are transferred and a <c>BufferOverflowException</c> is
            thrown.</para>
          <para>Otherwise, this method copies <c>length</c> chars from the
            given array into this buffer, starting at the given offset in the array
            and at the current position of this buffer.  The position of this buffer
            is then incremented by <c>length</c>.</para>
          <para>In other words, an invocation of this method of the form
            <c>dst.put(src,&amp;nbsp;off,&amp;nbsp;len)</c> has exactly the same effect as
            the loop</para>
          <code lang="text/java">{@code
                for (int i = off; i &lt; off + len; i++)
                    dst.put(a[i]);
            }</code>
          <para>except that it first checks that there is sufficient space in this
            buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(char[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(char[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>charCount</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>srcOffset</c> or <c>charCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Put (string? src, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Put(string src, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Put(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Put : string * int * int -&gt; Java.Nio.CharBuffer&#xA;override this.Put : string * int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Put (src, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(Ljava/lang/String;II)Ljava/nio/CharBuffer;", "GetPut_Ljava_lang_String_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(Ljava/lang/String;II)Ljava/nio/CharBuffer;", "GetPut_Ljava_lang_String_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The string from which chars are to be read</param>
        <param name="start">The offset within the string of the first char to be read;
                    must be non-negative and no larger than
                    <c>string.length()</c></param>
        <param name="end">The offset within the string of the last char to be read,
                    plus one; must be non-negative and no larger than
                    <c>string.length()</c></param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers chars from the given string into this
            buffer.  If there are more chars to be copied from the string than
            remain in this buffer, that is, if
            <c>end&amp;nbsp;-&amp;nbsp;start</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>,
            then no chars are transferred and a <c>BufferOverflowException</c> is thrown.</para>
          <para>Otherwise, this method copies
            <i>n</i>&amp;nbsp;=&amp;nbsp;<c>end</c>&amp;nbsp;-&amp;nbsp;<c>start</c> chars
            from the given string into this buffer, starting at the given
            <c>start</c> index and at the current position of this buffer.  The
            position of this buffer is then incremented by <i>n</i>.</para>
          <para>In other words, an invocation of this method of the form
            <c>dst.put(src,&amp;nbsp;start,&amp;nbsp;end)</c> has exactly the same effect
            as the loop</para>
          <code lang="text/java">{@code
                for (int i = start; i &lt; end; i++)
                    dst.put(src.charAt(i));
            }</code>
          <para>except that it first checks that there is sufficient space in this
            buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#put(java.lang.String,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.put(java.lang.String, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>end - start</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>end</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Java.Nio.CharBuffer? target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.CharBuffer target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Read(Java.Nio.CharBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.CharBuffer -&gt; int&#xA;override this.Read : Java.Nio.CharBuffer -&gt; int" Usage="charBuffer.Read target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IReadable.Read(Java.Nio.CharBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("read", "(Ljava/nio/CharBuffer;)I", "GetRead_Ljava_nio_CharBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("read", "(Ljava/nio/CharBuffer;)I", "GetRead_Ljava_nio_CharBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.CharBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the buffer to read characters into</param>
        <summary>Attempts to read characters into the specified character buffer.</summary>
        <returns>The number of characters added to the buffer, or
                    -1 if this source of characters is at its end</returns>
        <remarks>
          <para>Attempts to read characters into the specified character buffer.
            The buffer is used as a repository of characters as-is: the only
            changes made are the results of a put operation. No flipping or
            rewinding of the buffer is performed.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#read(java.nio.CharBuffer)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.read(java.nio.CharBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>target</c> is this buffer.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of <c>target</c>.</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer? Slice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Slice() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Slice" />
      <MemberSignature Language="F#" Value="override this.Slice : unit -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Slice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("slice", "()Ljava/nio/CharBuffer;", "GetSliceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("slice", "()Ljava/nio/CharBuffer;", "GetSliceHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new char buffer whose content is a shared subsequence of
            this buffer's content.</summary>
        <returns>The new char buffer</returns>
        <remarks>
          <para>Creates a new char buffer whose content is a shared subsequence of
            this buffer's content.</para>
          <para>The content of the new buffer will start at this buffer's current
            position.  Changes to this buffer's content will be visible in the new
            buffer, and vice versa; the two buffers' position, limit, and mark
            values will be independent.</para>
          <para>The new buffer's position will be zero, its capacity and its limit
            will be the number of chars remaining in this buffer, and its mark
            will be undefined.  The new buffer will be direct if, and only if, this
            buffer is direct, and it will be read-only if, and only if, this buffer
            is read-only.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#slice()" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.slice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.CharBuffer? Slice (int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer Slice(int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.Slice : int * int -&gt; Java.Nio.CharBuffer" Usage="charBuffer.Slice (index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("slice", "(II)Ljava/nio/CharBuffer;", "GetSlice_IIHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("slice", "(II)Ljava/nio/CharBuffer;", "GetSlice_IIHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The position in this buffer at which the content of the new
                     buffer will start; must be non-negative and no larger than
                     <c>#limit() limit()</c></param>
        <param name="length">The number of elements the new buffer will contain; must be
                     non-negative and no larger than <c>limit() - index</c></param>
        <summary>Creates a new char buffer whose content is a shared subsequence of
            this buffer's content.</summary>
        <returns>The new buffer</returns>
        <remarks>
          <para>Creates a new char buffer whose content is a shared subsequence of
            this buffer's content.</para>
          <para>The content of the new buffer will start at position <c>index</c>
            in this buffer, and will contain <c>length</c> elements. Changes to
            this buffer's content will be visible in the new buffer, and vice versa;
            the two buffers' position, limit, and mark values will be independent.</para>
          <para>The new buffer's position will be zero, its capacity and its limit
            will be <c>length</c>, its mark will be undefined, and its byte order
            will be
            
            
            
            identical to that of this buffer.
            
            The new buffer will be direct if, and only if, this buffer is direct,
            and it will be read-only if, and only if, this buffer is read-only.</para>
          <para>Added in 13.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#slice(int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.slice(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubSequence">
      <MemberSignature Language="C#" Value="public string? SubSequence (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string SubSequence(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.SubSequence(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SubSequence : int * int -&gt; string" Usage="charBuffer.SubSequence (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">The index, relative to the current position, of the first
                    character in the subsequence; must be non-negative and no larger
                    than <c>remaining()</c></param>
        <param name="end">The index, relative to the current position, of the character
                    following the last character in the subsequence; must be no
                    smaller than <c>start</c> and no larger than
                    <c>remaining()</c></param>
        <summary>Creates a new character buffer that represents the specified subsequence
            of this buffer, relative to the current position.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#subSequence(int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.subSequence(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubSequenceFormatted">
      <MemberSignature Language="C#" Value="public abstract Java.Lang.ICharSequence? SubSequenceFormatted (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence SubSequenceFormatted(int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.SubSequenceFormatted(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SubSequenceFormatted : int * int -&gt; Java.Lang.ICharSequence" Usage="charBuffer.SubSequenceFormatted (start, end)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.ICharSequence.SubSequenceFormatted(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("subSequence", "(II)Ljava/lang/CharSequence;", "GetSubSequence_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("subSequence", "(II)Ljava/lang/CharSequence;", "GetSubSequence_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">The index, relative to the current position, of the first
                    character in the subsequence; must be non-negative and no larger
                    than <c>remaining()</c></param>
        <param name="end">The index, relative to the current position, of the character
                    following the last character in the subsequence; must be no
                    smaller than <c>start</c> and no larger than
                    <c>remaining()</c></param>
        <summary>Creates a new character buffer that represents the specified subsequence
            of this buffer, relative to the current position.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#subSequence(int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.subSequence(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>end</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="global::System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.global::System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member global::System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.global::System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="charBuffer.global::System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.CharBuffer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.CharBuffer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.CharBuffer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.CharBuffer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (Java.Lang.ICharSequence? csq);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(class Java.Lang.ICharSequence csq) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="static member Wrap : Java.Lang.ICharSequence -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap csq" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence from which the new character buffer is to
                    be created</param>
        <summary>Wraps a character sequence into a buffer.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>Wraps a character sequence into a buffer.</para>
          <para>The content of the new, read-only buffer will be the content of the
            given character sequence.  The new buffer's capacity and limit will be
            <c>csq.length()</c>, its position will be zero, and its mark will be
            undefined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (char[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(char[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(System.Char[])" />
      <MemberSignature Language="F#" Value="static member Wrap : char[] -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "([C)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "([C)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="array">The array that will back this buffer</param>
        <summary>Wraps a char array into a buffer.</summary>
        <returns>The new char buffer</returns>
        <remarks>
          <para>Wraps a char array into a buffer.</para>
          <para>The new buffer will be backed by the given char array;
            that is, modifications to the buffer will cause the array to be modified
            and vice versa.  The new buffer's capacity and limit will be
            <c>array.length</c>, its position will be zero, and its mark will be
            undefined.  Its <c>#array backing array</c> will be the
            given array, and its <c>#arrayOffset array offset&gt;</c> will
            be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(char[])" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(char[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (string? csq);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(string csq) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(System.String)" />
      <MemberSignature Language="F#" Value="static member Wrap : string -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap csq" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence from which the new character buffer is to
                    be created</param>
        <summary>Wraps a character sequence into a buffer.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>Wraps a character sequence into a buffer.</para>
          <para>The content of the new, read-only buffer will be the content of the
            given character sequence.  The new buffer's capacity and limit will be
            <c>csq.length()</c>, its position will be zero, and its mark will be
            undefined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (Java.Lang.ICharSequence? csq, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(class Java.Lang.ICharSequence csq, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(Java.Lang.ICharSequence,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Wrap : Java.Lang.ICharSequence * int * int -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap (csq, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence from which the new character buffer is to
                    be created</param>
        <param name="start">The index of the first character to be used;
                    must be non-negative and no larger than <c>csq.length()</c>.
                    The new buffer's position will be set to this value.</param>
        <param name="end">The index of the character following the last character to be
                    used; must be no smaller than <c>start</c> and no larger
                    than <c>csq.length()</c>.
                    The new buffer's limit will be set to this value.</param>
        <summary>Wraps a character sequence into a buffer.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>Wraps a character sequence into a buffer.</para>
          <para>The content of the new, read-only buffer will be the content of the
            given character sequence.  The buffer's capacity will be
            <c>csq.length()</c>, its position will be <c>start</c>, its limit
            will be <c>end</c>, and its mark will be undefined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(java.lang.CharSequence,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(java.lang.CharSequence, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>end</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (char[]? array, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(char[] array, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Wrap : char[] * int * int -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap (array, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "([CII)Ljava/nio/CharBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "([CII)Ljava/nio/CharBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array that will back the new buffer</param>
        <param name="offset">The offset of the subarray to be used; must be non-negative and
                    no larger than <c>array.length</c>.  The new buffer's position
                    will be set to this value.</param>
        <param name="length">The length of the subarray to be used;
                    must be non-negative and no larger than
                    <c>array.length - offset</c>.
                    The new buffer's limit will be set to <c>offset + length</c>.</param>
        <summary>Wraps a char array into a buffer.</summary>
        <returns>The new char buffer</returns>
        <remarks>
          <para>Wraps a char array into a buffer.</para>
          <para>The new buffer will be backed by the given char array;
            that is, modifications to the buffer will cause the array to be modified
            and vice versa.  The new buffer's capacity will be
            <c>array.length</c>, its position will be <c>offset</c>, its limit
            will be <c>offset + length</c>, and its mark will be undefined.  Its
            <c>#array backing array</c> will be the given array, and
            its <c>#arrayOffset array offset</c> will be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(char[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(char[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>charCount</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.CharBuffer? Wrap (string? csq, int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.CharBuffer Wrap(string csq, int32 start, int32 end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.CharBuffer.Wrap(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Wrap : string * int * int -&gt; Java.Nio.CharBuffer" Usage="Java.Nio.CharBuffer.Wrap (csq, start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="csq" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="csq">The character sequence from which the new character buffer is to
                    be created</param>
        <param name="start">The index of the first character to be used;
                    must be non-negative and no larger than <c>csq.length()</c>.
                    The new buffer's position will be set to this value.</param>
        <param name="end">The index of the character following the last character to be
                    used; must be no smaller than <c>start</c> and no larger
                    than <c>csq.length()</c>.
                    The new buffer's limit will be set to this value.</param>
        <summary>Wraps a character sequence into a buffer.</summary>
        <returns>The new character buffer</returns>
        <remarks>
          <para>Wraps a character sequence into a buffer.</para>
          <para>The content of the new, read-only buffer will be the content of the
            given character sequence.  The buffer's capacity will be
            <c>csq.length()</c>, its position will be <c>start</c>, its limit
            will be <c>end</c>, and its mark will be undefined.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/CharBuffer#wrap(java.lang.CharSequence,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.CharBuffer.wrap(java.lang.CharSequence, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
