<Type Name="DoubleBuffer" FullName="Java.Nio.DoubleBuffer">
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DoubleBuffer&#xA;Inherits Buffer&#xA;Implements IComparable, IDisposable, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DoubleBuffer abstract : Java::Nio::Buffer, IDisposable, Java::Interop::IJavaPeerable, Java::Lang::IComparable" />
  <TypeSignature Language="C#" Value="public abstract class DoubleBuffer : Java.Nio.Buffer, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DoubleBuffer extends Java.Nio.Buffer implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.IComparable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.DoubleBuffer" />
  <TypeSignature Language="F#" Value="type DoubleBuffer = class&#xA;    inherit Buffer&#xA;    interface IComparable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Buffer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/nio/DoubleBuffer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/nio/DoubleBuffer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A double buffer.</summary>
    <remarks>
      <para>A double buffer.</para>
      <para>This class defines four categories of operations upon
            double buffers:
            
            &lt;ul&gt;
            
              &lt;li&gt;</para>
      <para>Absolute and relative <c>#get() &lt;i&gt;get&lt;/i&gt;</c> and
              <c>#put(double) &lt;i&gt;put&lt;/i&gt;</c> methods that read and write
              single doubles;</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Relative <c>#get(double[]) &lt;i&gt;bulk get&lt;/i&gt;</c>
              methods that transfer contiguous sequences of doubles from this buffer
              into an array; and</para>
      <para>&lt;/li&gt;
            
              &lt;li&gt;</para>
      <para>Relative <c>#put(double[]) &lt;i&gt;bulk put&lt;/i&gt;</c>
              methods that transfer contiguous sequences of doubles from a
              double array or some other double
              buffer into this buffer;&amp;#32;and</para>
      <para>&lt;/li&gt;
            
            
              &lt;li&gt;</para>
      <para>Methods for <c>#compact compacting</c>, <c>#duplicate duplicating</c>, and <c>#slice slicing</c>
              a double buffer.</para>
      <para>&lt;/li&gt;
            
            &lt;/ul&gt;</para>
      <para>Double buffers can be created either by <c>#allocate
            &lt;i&gt;allocation&lt;/i&gt;</c>, which allocates space for the buffer's
            
            
            content, by <c>#wrap(double[]) &lt;i&gt;wrapping&lt;/i&gt;</c> an existing
            double array  into a buffer, or by creating a
            &lt;i&gt;view&lt;/i&gt; of an existing byte buffer.</para>
      <para>Like a byte buffer, a double buffer is either &lt;i&gt;direct&lt;/i&gt; or &lt;i&gt;non-direct&lt;/i&gt;.  A
            double buffer created via the <c>wrap</c> methods of this class will
            be non-direct.  A double buffer created as a view of a byte buffer will
            be direct if, and only if, the byte buffer itself is direct.  Whether or not
            a double buffer is direct may be determined by invoking the <c>#isDirect isDirect</c> method.</para>
      <para>Methods in this class that do not otherwise have a value to return are
            specified to return the buffer upon which they are invoked.  This allows
            method invocations to be chained.</para>
      <para>Added in 1.4.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/nio/DoubleBuffer" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DoubleBuffer(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected DoubleBuffer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.DoubleBuffer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.DoubleBuffer" Usage="new Java.Nio.DoubleBuffer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Allocate (capacity As Integer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Nio::DoubleBuffer ^ Allocate(int capacity);" />
      <MemberSignature Language="C#" Value="public static Java.Nio.DoubleBuffer? Allocate (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.DoubleBuffer Allocate(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Allocate(System.Int32)" />
      <MemberSignature Language="F#" Value="static member Allocate : int -&gt; Java.Nio.DoubleBuffer" Usage="Java.Nio.DoubleBuffer.Allocate capacity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("allocate", "(I)Ljava/nio/DoubleBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("allocate", "(I)Ljava/nio/DoubleBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">The new buffer's capacity, in doubles</param>
        <summary>Allocates a new double buffer.</summary>
        <returns>The new double buffer</returns>
        <remarks>
          <para>Allocates a new double buffer.</para>
          <para>The new buffer's position will be zero, its limit will be its
            capacity, its mark will be undefined, and each of its elements will be
            initialized to zero.  It will have a <c>#array backing array</c>,
            and its <c>#arrayOffset array offset</c> will be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#allocate(int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.allocate(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>capacity</c> is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayOffset">
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ArrayOffset () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ArrayOffset();" />
      <MemberSignature Language="C#" Value="public override sealed int ArrayOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ArrayOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.ArrayOffset" />
      <MemberSignature Language="F#" Value="override this.ArrayOffset : unit -&gt; int" Usage="doubleBuffer.ArrayOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("arrayOffset", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("arrayOffset", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the offset within this buffer's backing array of the first
            element of the buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>The offset within this buffer's array
                     of the first element of the buffer</returns>
        <remarks>
          <para>Returns the offset within this buffer's backing array of the first
            element of the buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>If this buffer is backed by an array then buffer position <i>p</i>
            corresponds to array index <i>p</i>&amp;nbsp;+&amp;nbsp;<c>arrayOffset()</c>.</para>
          <para>Invoke the <c>#hasArray hasArray</c> method before invoking this
            method in order to ensure that this buffer has an accessible backing
            array.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#arrayOffset()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.arrayOffset()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyBuffer">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AsReadOnlyBuffer () As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ AsReadOnlyBuffer();" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? AsReadOnlyBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer AsReadOnlyBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.AsReadOnlyBuffer" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyBuffer : unit -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.AsReadOnlyBuffer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/DoubleBuffer;", "GetAsReadOnlyBufferHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/DoubleBuffer;", "GetAsReadOnlyBufferHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new, read-only double buffer that shares this buffer's
            content.</summary>
        <returns>The new, read-only double buffer</returns>
        <remarks>
          <para>Creates a new, read-only double buffer that shares this buffer's
            content.</para>
          <para>The content of the new buffer will be that of this buffer.  Changes
            to this buffer's content will be visible in the new buffer; the new
            buffer itself, however, will be read-only and will not allow the shared
            content to be modified.  The two buffers' position, limit, and mark
            values will be independent.</para>
          <para>The new buffer's capacity, limit, position, and mark values will be
            identical to those of this buffer.</para>
          <para>If this buffer is itself read-only then this method behaves in
            exactly the same way as the <c>#duplicate duplicate</c> method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#asReadOnlyBuffer()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.asReadOnlyBuffer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compact">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compact () As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ Compact();" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? Compact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Compact() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Compact" />
      <MemberSignature Language="F#" Value="abstract member Compact : unit -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Compact " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compact", "()Ljava/nio/DoubleBuffer;", "GetCompactHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compact", "()Ljava/nio/DoubleBuffer;", "GetCompactHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compacts this buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Compacts this buffer&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>The doubles between the buffer's current position and its limit,
            if any, are copied to the beginning of the buffer.  That is, the
            double at index <i>p</i>&amp;nbsp;=&amp;nbsp;<c>position()</c> is copied
            to index zero, the double at index <i>p</i>&amp;nbsp;+&amp;nbsp;1 is copied
            to index one, and so forth until the double at index
            <c>limit()</c>&amp;nbsp;-&amp;nbsp;1 is copied to index
            <i>n</i>&amp;nbsp;=&amp;nbsp;<c>limit()</c>&amp;nbsp;-&amp;nbsp;<c>1</c>&amp;nbsp;-&amp;nbsp;<i>p</i>.
            The buffer's position is then set to <i>n+1</i> and its limit is set to
            its capacity.  The mark, if defined, is discarded.</para>
          <para>The buffer's position is set to the number of doubles copied,
            rather than to zero, so that an invocation of this method can be
            followed immediately by an invocation of another relative <i>put</i>
            method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#compact()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.compact()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompareTo (that As DoubleBuffer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(Java::Nio::DoubleBuffer ^ that);" />
      <MemberSignature Language="C#" Value="public virtual int CompareTo (Java.Nio.DoubleBuffer? that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Nio.DoubleBuffer that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.CompareTo(Java.Nio.DoubleBuffer)" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Java.Nio.DoubleBuffer -&gt; int&#xA;override this.CompareTo : Java.Nio.DoubleBuffer -&gt; int" Usage="doubleBuffer.CompareTo that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareTo", "(Ljava/nio/DoubleBuffer;)I", "GetCompareTo_Ljava_nio_DoubleBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareTo", "(Ljava/nio/DoubleBuffer;)I", "GetCompareTo_Ljava_nio_DoubleBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="Java.Nio.DoubleBuffer" />
      </Parameters>
      <Docs>
        <param name="that">To be added.</param>
        <summary>Compares this buffer to another.</summary>
        <returns>A negative integer, zero, or a positive integer as this buffer
                     is less than, equal to, or greater than the given buffer</returns>
        <remarks>
          <para>Compares this buffer to another.</para>
          <para>Two double buffers are compared by comparing their sequences of
            remaining elements lexicographically, without regard to the starting
            position of each sequence within its corresponding buffer.
            
            Pairs of <c>double</c> elements are compared as if by invoking
            <c>Double#compare(double,double)</c>, except that
            <c>-0.0</c> and <c>0.0</c> are considered to be equal.
            <c>Double.NaN</c> is considered by this method to be equal
            to itself and greater than all other <c>double</c> values
            (including <c>Double.POSITIVE_INFINITY</c>).</para>
          <para>A double buffer is not comparable to any other type of object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#compareTo(java.nio.DoubleBuffer)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.compareTo(java.nio.DoubleBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>other</c> is not a double buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Duplicate">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Duplicate () As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ Duplicate() = Java::Nio::Buffer::Duplicate;" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? Duplicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Duplicate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Duplicate" />
      <MemberSignature Language="F#" Value="override this.Duplicate : unit -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Duplicate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("duplicate", "()Ljava/nio/DoubleBuffer;", "GetDuplicateHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("duplicate", "()Ljava/nio/DoubleBuffer;", "GetDuplicateHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new double buffer that shares this buffer's content.</summary>
        <returns>The new double buffer</returns>
        <remarks>
          <para>Creates a new double buffer that shares this buffer's content.</para>
          <para>The content of the new buffer will be that of this buffer.  Changes
            to this buffer's content will be visible in the new buffer, and vice
            versa; the two buffers' position, limit, and mark values will be
            independent.</para>
          <para>The new buffer's capacity, limit, position, and mark values will be
            identical to those of this buffer.  The new buffer will be direct if,
            and only if, this buffer is direct, and it will be read-only if, and
            only if, this buffer is read-only.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#duplicate()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.duplicate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Get () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract double Get();" />
      <MemberSignature Language="C#" Value="public abstract double Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Get" />
      <MemberSignature Language="F#" Value="abstract member Get : unit -&gt; double" Usage="doubleBuffer.Get " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "()D", "GetGetHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "()D", "GetGetHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Relative <i>get</i> method.</summary>
        <returns>The double at the buffer's current position</returns>
        <remarks>
          <para>Relative <i>get</i> method.  Reads the double at this buffer's
            current position, and then increments the position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#get()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.get()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is equal or greater than limit.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (dst As Double()) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::DoubleBuffer ^ Get(cli::array &lt;double&gt; ^ dst);" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.DoubleBuffer? Get (double[]? dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Get(float64[] dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Get(System.Double[])" />
      <MemberSignature Language="F#" Value="abstract member Get : double[] -&gt; Java.Nio.DoubleBuffer&#xA;override this.Get : double[] -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Get dst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "([D)Ljava/nio/DoubleBuffer;", "GetGet_arrayDHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "([D)Ljava/nio/DoubleBuffer;", "GetGet_arrayDHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="dst">The destination array</param>
        <summary>Relative bulk <i>get</i> method.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>get</i> method.</para>
          <para>This method transfers doubles from this buffer into the given
            destination array.  An invocation of this method of the form
            <c>src.get(a)</c> behaves in exactly the same way as the invocation</para>
          <code lang="text/java">src.get(a, 0, a.length) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#get(double[])" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.get(double[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>dst.length</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Get (index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract double Get(int index);" />
      <MemberSignature Language="C#" Value="public abstract double Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Get(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Get : int -&gt; double" Usage="doubleBuffer.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "(I)D", "GetGet_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "(I)D", "GetGet_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index from which the double will be read</param>
        <summary>Absolute <i>get</i> method.</summary>
        <returns>The double at the given index</returns>
        <remarks>
          <para>Absolute <i>get</i> method.  Reads the double at the given
            index.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#get(int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.get(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (dst As Double(), offset As Integer, length As Integer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::DoubleBuffer ^ Get(cli::array &lt;double&gt; ^ dst, int offset, int length);" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.DoubleBuffer? Get (double[]? dst, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Get(float64[] dst, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Get(System.Double[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Get : double[] * int * int -&gt; Java.Nio.DoubleBuffer&#xA;override this.Get : double[] * int * int -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Get (dst, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "([DII)Ljava/nio/DoubleBuffer;", "GetGet_arrayDIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "([DII)Ljava/nio/DoubleBuffer;", "GetGet_arrayDIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="System.Double[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dst">The array into which doubles are to be written</param>
        <param name="offset">The offset within the array of the first double to be
                    written; must be non-negative and no larger than
                    <c>dst.length</c></param>
        <param name="length">The maximum number of doubles to be written to the given
                    array; must be non-negative and no larger than
                    <c>dst.length - offset</c></param>
        <summary>Relative bulk <i>get</i> method.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>get</i> method.</para>
          <para>This method transfers doubles from this buffer into the given
            destination array.  If there are fewer doubles remaining in the
            buffer than are required to satisfy the request, that is, if
            <c>length</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>, then no
            doubles are transferred and a <c>BufferUnderflowException</c> is
            thrown.</para>
          <para>Otherwise, this method copies <c>length</c> doubles from this
            buffer into the given array, starting at the current position of this
            buffer and at the given offset in the array.  The position of this
            buffer is then incremented by <c>length</c>.</para>
          <para>In other words, an invocation of this method of the form
            <c>src.get(dst,&amp;nbsp;off,&amp;nbsp;len)</c> has exactly the same effect as
            the loop</para>
          <code lang="text/java">{@code
                for (int i = off; i &lt; off + len; i++)
                    dst[i] = src.get();
            }</code>
          <para>except that it first checks that there are sufficient doubles in
            this buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#get(double[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.get(double[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>dstOffset</c> or <c>doubleCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>doubleCount</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasArray { bool get(); };" />
      <MemberSignature Language="C#" Value="public override bool HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasArray" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.DoubleBuffer.HasArray" />
      <MemberSignature Language="F#" Value="member this.HasArray : bool" Usage="Java.Nio.DoubleBuffer.HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasArray", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasArray", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells whether or not this buffer is backed by an accessible double
            array.</summary>
        <value>
          <c>true</c> if, and only if, this buffer
                     is backed by an array and is not read-only</value>
        <remarks>
          <para>Tells whether or not this buffer is backed by an accessible double
            array.</para>
          <para>If this method returns <c>true</c> then the <c>#array() array</c>
            and <c>#arrayOffset() arrayOffset</c> methods may safely be invoked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#hasArray()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.hasArray()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="VB.NET" Value="Function CompareTo (o As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int Java.Lang.IComparable.CompareTo(Java::Lang::Object ^ o) = Java::Lang::IComparable::CompareTo;" />
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Java#Lang#IComparable#CompareTo(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int&#xA;override this.Java.Lang.IComparable.CompareTo : Java.Lang.Object -&gt; int" Usage="doubleBuffer.Java.Lang.IComparable.CompareTo o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Lang.IComparable.CompareTo(Java.Lang.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.DoubleBuffer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.DoubleBuffer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mismatch">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Mismatch (that As DoubleBuffer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Mismatch(Java::Nio::DoubleBuffer ^ that);" />
      <MemberSignature Language="C#" Value="public virtual int Mismatch (Java.Nio.DoubleBuffer? that);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Mismatch(class Java.Nio.DoubleBuffer that) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Mismatch(Java.Nio.DoubleBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Mismatch : Java.Nio.DoubleBuffer -&gt; int&#xA;override this.Mismatch : Java.Nio.DoubleBuffer -&gt; int" Usage="doubleBuffer.Mismatch that" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("mismatch", "(Ljava/nio/DoubleBuffer;)I", "GetMismatch_Ljava_nio_DoubleBuffer_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("mismatch", "(Ljava/nio/DoubleBuffer;)I", "GetMismatch_Ljava_nio_DoubleBuffer_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="that" Type="Java.Nio.DoubleBuffer" />
      </Parameters>
      <Docs>
        <param name="that">The byte buffer to be tested for a mismatch with this buffer</param>
        <summary>Finds and returns the relative index of the first mismatch between this
            buffer and a given buffer.</summary>
        <returns>The relative index of the first mismatch between this and the
                     given buffer, otherwise -1 if no mismatch.</returns>
        <remarks>
          <para>Finds and returns the relative index of the first mismatch between this
            buffer and a given buffer.  The index is relative to the
            <c>#position() position</c> of each buffer and will be in the range of
            0 (inclusive) up to the smaller of the <c>#remaining() remaining</c>
            elements in each buffer (exclusive).</para>
          <para>If the two buffers share a common prefix then the returned index is
            the length of the common prefix and it follows that there is a mismatch
            between the two buffers at that index within the respective buffers.
            If one buffer is a proper prefix of the other then the returned index is
            the smaller of the remaining elements in each buffer, and it follows that
            the index is only valid for the buffer with the larger number of
            remaining elements.
            Otherwise, there is no mismatch.</para>
          <para>Added in 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#mismatch(java.nio.DoubleBuffer)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.mismatch(java.nio.DoubleBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Order () As ByteOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::ByteOrder ^ Order();" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteOrder? Order ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteOrder Order() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Order" />
      <MemberSignature Language="F#" Value="abstract member Order : unit -&gt; Java.Nio.ByteOrder" Usage="doubleBuffer.Order " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "GetOrderHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "GetOrderHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteOrder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves this buffer's byte order.</summary>
        <returns>This buffer's byte order</returns>
        <remarks>
          <para>Retrieves this buffer's byte order.</para>
          <para>The byte order of a double buffer created by allocation or by
            wrapping an existing <c>double</c> array is the <c>ByteOrder#nativeOrder native order</c> of the underlying
            hardware.  The byte order of a double buffer created as a view of a byte buffer is that of the
            byte buffer at the moment that the view is created.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#order()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.order()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Put (src As DoubleBuffer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::DoubleBuffer ^ Put(Java::Nio::DoubleBuffer ^ src);" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.DoubleBuffer? Put (Java.Nio.DoubleBuffer? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Put(class Java.Nio.DoubleBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Put(Java.Nio.DoubleBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Put : Java.Nio.DoubleBuffer -&gt; Java.Nio.DoubleBuffer&#xA;override this.Put : Java.Nio.DoubleBuffer -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Put src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(Ljava/nio/DoubleBuffer;)Ljava/nio/DoubleBuffer;", "GetPut_Ljava_nio_DoubleBuffer_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(Ljava/nio/DoubleBuffer;)Ljava/nio/DoubleBuffer;", "GetPut_Ljava_nio_DoubleBuffer_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.DoubleBuffer" />
      </Parameters>
      <Docs>
        <param name="src">The source buffer from which doubles are to be read;
                    must not be this buffer</param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers the doubles remaining in the given source
            buffer into this buffer.  If there are more doubles remaining in the
            source buffer than in this buffer, that is, if
            <c>src.remaining()</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>,
            then no doubles are transferred and a <c>BufferOverflowException</c> is thrown.</para>
          <para>Otherwise, this method copies
            <i>n</i>&amp;nbsp;=&amp;nbsp;<c>src.remaining()</c> doubles from the given
            buffer into this buffer, starting at each buffer's current position.
            The positions of both buffers are then incremented by <i>n</i>.</para>
          <para>In other words, an invocation of this method of the form
            <c>dst.put(src)</c> has exactly the same effect as the loop</para>
          <code lang="text/java">while (src.hasRemaining())
                    dst.put(src.get()); </code>
          <para>except that it first checks that there is sufficient space in this
            buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#put(java.nio.DoubleBuffer)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.put(java.nio.DoubleBuffer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>src.remaining()</c> is greater than this buffer's
                <c>remaining()</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>src</c> is this buffer.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Put (d As Double) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ Put(double d);" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? Put (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Put(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Put(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Put : double -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Put d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(D)Ljava/nio/DoubleBuffer;", "GetPut_DHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(D)Ljava/nio/DoubleBuffer;", "GetPut_DHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">The double to be written</param>
        <summary>Relative <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>Writes the given double into this buffer at the current
            position, and then increments the position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#put(double)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.put(double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is equal or greater than limit.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="VB.NET" Value="Public Function Put (src As Double()) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Nio::DoubleBuffer ^ Put(cli::array &lt;double&gt; ^ src);" />
      <MemberSignature Language="C#" Value="public Java.Nio.DoubleBuffer? Put (double[]? src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.DoubleBuffer Put(float64[] src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Put(System.Double[])" />
      <MemberSignature Language="F#" Value="member this.Put : double[] -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Put src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "([D)Ljava/nio/DoubleBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "([D)Ljava/nio/DoubleBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="src">The source array</param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers the entire content of the given source
            double array into this buffer.  An invocation of this method of the
            form <c>dst.put(a)</c> behaves in exactly the same way as the
            invocation</para>
          <code lang="text/java">dst.put(a, 0, a.length) </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#put(double[])" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.put(double[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>src.length</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Put (index As Integer, d As Double) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ Put(int index, double d);" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? Put (int index, double d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Put(int32 index, float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Put(System.Int32,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Put : int * double -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Put (index, d)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "(ID)Ljava/nio/DoubleBuffer;", "GetPut_IDHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "(ID)Ljava/nio/DoubleBuffer;", "GetPut_IDHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index">The index at which the double will be written</param>
        <param name="d">The double value to be written</param>
        <summary>Absolute <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Absolute <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>Writes the given double into this buffer at the given
            index.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#put(int,%20double)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.put(int, double)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Put (src As Double(), offset As Integer, length As Integer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::DoubleBuffer ^ Put(cli::array &lt;double&gt; ^ src, int offset, int length);" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.DoubleBuffer? Put (double[]? src, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Put(float64[] src, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Put(System.Double[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Put : double[] * int * int -&gt; Java.Nio.DoubleBuffer&#xA;override this.Put : double[] * int * int -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Put (src, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("put", "([DII)Ljava/nio/DoubleBuffer;", "GetPut_arrayDIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("put", "([DII)Ljava/nio/DoubleBuffer;", "GetPut_arrayDIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Double[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The array from which doubles are to be read</param>
        <param name="offset">The offset within the array of the first double to be read;
                    must be non-negative and no larger than <c>array.length</c></param>
        <param name="length">The number of doubles to be read from the given array;
                    must be non-negative and no larger than
                    <c>array.length - offset</c></param>
        <summary>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</summary>
        <returns>This buffer</returns>
        <remarks>
          <para>Relative bulk <i>put</i> method&amp;nbsp;&amp;nbsp;<i>(optional operation)</i>.</para>
          <para>This method transfers doubles into this buffer from the given
            source array.  If there are more doubles to be copied from the array
            than remain in this buffer, that is, if
            <c>length</c>&amp;nbsp;<c>&amp;gt;</c>&amp;nbsp;<c>remaining()</c>, then no
            doubles are transferred and a <c>BufferOverflowException</c> is
            thrown.</para>
          <para>Otherwise, this method copies <c>length</c> doubles from the
            given array into this buffer, starting at the given offset in the array
            and at the current position of this buffer.  The position of this buffer
            is then incremented by <c>length</c>.</para>
          <para>In other words, an invocation of this method of the form
            <c>dst.put(src,&amp;nbsp;off,&amp;nbsp;len)</c> has exactly the same effect as
            the loop</para>
          <code lang="text/java">{@code
                for (int i = off; i &lt; off + len; i++)
                    dst.put(a[i]);
            }</code>
          <para>except that it first checks that there is sufficient space in this
            buffer and it is potentially much more efficient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#put(double[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.put(double[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>doubleCount</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>srcOffset</c> or <c>doubleCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Slice () As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Java::Nio::DoubleBuffer ^ Slice() = Java::Nio::Buffer::Slice;" />
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer? Slice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Slice() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Slice" />
      <MemberSignature Language="F#" Value="override this.Slice : unit -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Slice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("slice", "()Ljava/nio/DoubleBuffer;", "GetSliceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("slice", "()Ljava/nio/DoubleBuffer;", "GetSliceHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new double buffer whose content is a shared subsequence of
            this buffer's content.</summary>
        <returns>The new double buffer</returns>
        <remarks>
          <para>Creates a new double buffer whose content is a shared subsequence of
            this buffer's content.</para>
          <para>The content of the new buffer will start at this buffer's current
            position.  Changes to this buffer's content will be visible in the new
            buffer, and vice versa; the two buffers' position, limit, and mark
            values will be independent.</para>
          <para>The new buffer's position will be zero, its capacity and its limit
            will be the number of doubles remaining in this buffer, and its mark
            will be undefined.  The new buffer will be direct if, and only if, this
            buffer is direct, and it will be read-only if, and only if, this buffer
            is read-only.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#slice()" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.slice()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Slice (index As Integer, length As Integer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Nio::DoubleBuffer ^ Slice(int index, int length) = Java::Nio::Buffer::Slice;" />
      <MemberSignature Language="C#" Value="public virtual Java.Nio.DoubleBuffer? Slice (int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer Slice(int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.Slice : int * int -&gt; Java.Nio.DoubleBuffer" Usage="doubleBuffer.Slice (index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("slice", "(II)Ljava/nio/DoubleBuffer;", "GetSlice_IIHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("slice", "(II)Ljava/nio/DoubleBuffer;", "GetSlice_IIHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.PreserveBaseOverrides]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.PreserveBaseOverrides&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The position in this buffer at which the content of the new
                     buffer will start; must be non-negative and no larger than
                     <c>#limit() limit()</c></param>
        <param name="length">The number of elements the new buffer will contain; must be
                     non-negative and no larger than <c>limit() - index</c></param>
        <summary>Creates a new double buffer whose content is a shared subsequence of
            this buffer's content.</summary>
        <returns>The new buffer</returns>
        <remarks>
          <para>Creates a new double buffer whose content is a shared subsequence of
            this buffer's content.</para>
          <para>The content of the new buffer will start at position <c>index</c>
            in this buffer, and will contain <c>length</c> elements. Changes to
            this buffer's content will be visible in the new buffer, and vice versa;
            the two buffers' position, limit, and mark values will be independent.</para>
          <para>The new buffer's position will be zero, its capacity and its limit
            will be <c>length</c>, its mark will be undefined, and its byte order
            will be
            
            
            
            identical to that of this buffer.
            
            The new buffer will be direct if, and only if, this buffer is direct,
            and it will be read-only if, and only if, this buffer is read-only.</para>
          <para>Added in 13.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#slice(int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.slice(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.DoubleBuffer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.DoubleBuffer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.DoubleBuffer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.DoubleBuffer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wrap (array As Double()) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Nio::DoubleBuffer ^ Wrap(cli::array &lt;double&gt; ^ array);" />
      <MemberSignature Language="C#" Value="public static Java.Nio.DoubleBuffer? Wrap (double[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.DoubleBuffer Wrap(float64[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Wrap(System.Double[])" />
      <MemberSignature Language="F#" Value="static member Wrap : double[] -&gt; Java.Nio.DoubleBuffer" Usage="Java.Nio.DoubleBuffer.Wrap array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "([D)Ljava/nio/DoubleBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "([D)Ljava/nio/DoubleBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="array">The array that will back this buffer</param>
        <summary>Wraps a double array into a buffer.</summary>
        <returns>The new double buffer</returns>
        <remarks>
          <para>Wraps a double array into a buffer.</para>
          <para>The new buffer will be backed by the given double array;
            that is, modifications to the buffer will cause the array to be modified
            and vice versa.  The new buffer's capacity and limit will be
            <c>array.length</c>, its position will be zero, and its mark will be
            undefined.  Its <c>#array backing array</c> will be the
            given array, and its <c>#arrayOffset array offset&gt;</c> will
            be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#wrap(double[])" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.wrap(double[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wrap (array As Double(), offset As Integer, length As Integer) As DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Nio::DoubleBuffer ^ Wrap(cli::array &lt;double&gt; ^ array, int offset, int length);" />
      <MemberSignature Language="C#" Value="public static Java.Nio.DoubleBuffer? Wrap (double[]? array, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.DoubleBuffer Wrap(float64[] array, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.DoubleBuffer.Wrap(System.Double[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member Wrap : double[] * int * int -&gt; Java.Nio.DoubleBuffer" Usage="Java.Nio.DoubleBuffer.Wrap (array, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("wrap", "([DII)Ljava/nio/DoubleBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("wrap", "([DII)Ljava/nio/DoubleBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Double[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array that will back the new buffer</param>
        <param name="offset">The offset of the subarray to be used; must be non-negative and
                    no larger than <c>array.length</c>.  The new buffer's position
                    will be set to this value.</param>
        <param name="length">The length of the subarray to be used;
                    must be non-negative and no larger than
                    <c>array.length - offset</c>.
                    The new buffer's limit will be set to <c>offset + length</c>.</param>
        <summary>Wraps a double array into a buffer.</summary>
        <returns>The new double buffer</returns>
        <remarks>
          <para>Wraps a double array into a buffer.</para>
          <para>The new buffer will be backed by the given double array;
            that is, modifications to the buffer will cause the array to be modified
            and vice versa.  The new buffer's capacity will be
            <c>array.length</c>, its position will be <c>offset</c>, its limit
            will be <c>offset + length</c>, and its mark will be undefined.  Its
            <c>#array backing array</c> will be the given array, and
            its <c>#arrayOffset array offset</c> will be zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/nio/DoubleBuffer#wrap(double[],%20int,%20int)" title="Reference documentation">Java documentation for <code>java.nio.DoubleBuffer.wrap(double[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>doubleCount</c> is invalid.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
