<Type Name="JobScheduler" FullName="Android.App.Job.JobScheduler">
  <TypeSignature Language="C#" Value="public abstract class JobScheduler : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JobScheduler extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/job/JobScheduler", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This is an API for scheduling various types of jobs against the framework that will be executed
 in your application's own process.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This is an API for scheduling various types of jobs against the framework that will be executed
 in your application's own process.
 </para>
      <para tool="javadoc-to-mdoc">
 See <c><see cref="T:Android.App.Job.JobInfo" /></c> for more description of the types of jobs that can be run
 and how to construct them. You will construct these JobInfo objects and pass them to the
 JobScheduler with <c><see cref="M:Android.App.Job.JobScheduler.Schedule(Android.App.Job.JobInfo)" /></c>. When the criteria declared are met, the
 system will execute this job on your application's <c><see cref="T:Android.App.Job.JobService" /></c>.
 You identify which JobService is meant to execute the logic for your job when you create the
 JobInfo with
 <c><see cref="!:NoType:android/app/job/JobInfo$Builder;Href=../../../../reference/android/app/job/JobInfo.Builder.html#JobInfo.Builder(int,android.content.ComponentName)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The framework will be intelligent about when you receive your callbacks, and attempt to batch
 and defer them as much as possible. Typically if you don't specify a deadline on your job, it
 can be run at any moment depending on the current state of the JobScheduler's internal queue,
 however it might be deferred as long as until the next time the device is connected to a power
 source.
 </para>
      <para tool="javadoc-to-mdoc">You do not
 instantiate this class directly; instead, retrieve it through
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobScheduler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#JobScheduler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JobScheduler (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllPendingJobs">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;Android.App.Job.JobInfo&gt; AllPendingJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.App.Job.JobInfo&gt; AllPendingJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllPendingJobs", "()Ljava/util/List;", "GetGetAllPendingJobsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.Job.JobInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#getAllPendingJobs()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public abstract void Cancel (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel(int32 jobId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "(I)V", "GetCancel_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">unique identifier for this job. Obtain this value from the jobs returned by
 <c><see cref="P:Android.App.Job.JobScheduler.AllPendingJobs" /></c>.</param>
        <summary>Cancel a job that is pending in the JobScheduler.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancel a job that is pending in the JobScheduler.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#cancel(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAll">
      <MemberSignature Language="C#" Value="public abstract void CancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelAll", "()V", "GetCancelAllHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel all jobs that have been registered with the JobScheduler by this package.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancel all jobs that have been registered with the JobScheduler by this package.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#cancelAll()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultFailure">
      <MemberSignature Language="C#" Value="public const int ResultFailure = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ResultFailure = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RESULT_FAILURE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Returned from <c><see cref="M:Android.App.Job.JobScheduler.Schedule(Android.App.Job.JobInfo)" /></c> when an invalid parameter was supplied.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Returned from <c><see cref="M:Android.App.Job.JobScheduler.Schedule(Android.App.Job.JobInfo)" /></c> when an invalid parameter was supplied. This can occur
 if the run-time for your job is too short, or perhaps the system can't resolve the
 requisite <c><see cref="T:Android.App.Job.JobService" /></c> in your package.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#RESULT_FAILURE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultSuccess">
      <MemberSignature Language="C#" Value="public const int ResultSuccess = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ResultSuccess = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RESULT_SUCCESS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Returned from <c><see cref="M:Android.App.Job.JobScheduler.Schedule(Android.App.Job.JobInfo)" /></c> if this application has made too many requests for
 work over too short a time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Returned from <c><see cref="M:Android.App.Job.JobScheduler.Schedule(Android.App.Job.JobInfo)" /></c> if this application has made too many requests for
 work over too short a time.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#RESULT_SUCCESS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public abstract int Schedule (Android.App.Job.JobInfo job);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Schedule(class Android.App.Job.JobInfo job) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Landroid/app/job/JobInfo;)I", "GetSchedule_Landroid_app_job_JobInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Android.App.Job.JobInfo" />
      </Parameters>
      <Docs>
        <param name="job">The job you wish scheduled. See
 <c><see cref="!:NoType:android/app/job/JobInfo$Builder;Href=../../../../reference/android/app/job/JobInfo.Builder.html" /></c> for more detail on the sorts of jobs
 you can schedule.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobScheduler.html#schedule(android.app.job.JobInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
