<Type Name="JobService" FullName="Android.App.Job.JobService">
  <TypeSignature Language="C#" Value="public abstract class JobService : Android.App.Service" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JobService extends Android.App.Service" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Service</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/job/JobService", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary tool="true">
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Entry point for the callback from the <c><see cref="T:Android.App.Job.JobScheduler" /></c>.</para>
      <para tool="javadoc-to-mdoc">This is the base class that handles asynchronous requests that were previously scheduled. You
 are responsible for overriding <c><see cref="M:Android.App.Job.JobService.OnStartJob(Android.App.Job.JobParameters)" /></c>, which is where
 you will implement your job logic.</para>
      <para tool="javadoc-to-mdoc">This service executes each incoming job on a <c><see cref="T:Android.OS.Handler" /></c> running on your
 application's main thread. This means that you <format type="text/html"><b>must</b></format> offload your execution logic to
 another thread/handler/<c><see cref="T:Android.OS.AsyncTask`3" /></c> of your choosing. Not doing so will result
 in blocking any future callbacks from the JobManager - specifically
 <c><see cref="M:Android.App.Job.JobService.OnStopJob(Android.App.Job.JobParameters)" /></c>, which is meant to inform you that the
 scheduling requirements are no longer being met.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/job/JobService.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobService.html#JobService()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JobService (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobFinished">
      <MemberSignature Language="C#" Value="public void JobFinished (Android.App.Job.JobParameters params, bool needsReschedule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JobFinished(class Android.App.Job.JobParameters params, bool needsReschedule) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("jobFinished", "(Landroid/app/job/JobParameters;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.App.Job.JobParameters" />
        <Parameter Name="needsReschedule" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="params">Parameters specifying system-provided info about this job, this was given to
               your application in <c><see cref="M:Android.App.Job.JobService.OnStartJob(Android.App.Job.JobParameters)" /></c>.</param>
        <param name="needsReschedule">True if this job should be rescheduled according to the back-off
                        criteria specified at schedule-time. False otherwise.
</param>
        <summary>Callback to inform the JobManager you've finished executing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Callback to inform the JobManager you've finished executing. This can be called from any
 thread, as it will ultimately be run on your application's main thread. When the system
 receives this message it will release the wakelock being held.
 </para>
          <para tool="javadoc-to-mdoc">
     You can specify post-execution behaviour to the scheduler here with
     <c>needsReschedule </c>. This will apply a back-off timer to your job based on
     the default, or what was set with
     <c><see cref="!:NoType:android/app/job/JobInfo$Builder;Href=../../../../reference/android/app/job/JobInfo.Builder.html#setBackoffCriteria(long,int)" /></c>. The original
     requirements are always honoured even for a backed-off job. Note that a job running in
     idle mode will not be backed-off. Instead what will happen is the job will be re-added
     to the queue and re-executed within a future idle maintenance window.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobService.html#jobFinished(android.app.job.JobParameters, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBind">
      <MemberSignature Language="C#" Value="public override sealed Android.OS.IBinder OnBind (Android.Content.Intent p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.IBinder OnBind(class Android.Content.Intent p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartJob">
      <MemberSignature Language="C#" Value="public abstract bool OnStartJob (Android.App.Job.JobParameters params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStartJob(class Android.App.Job.JobParameters params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartJob", "(Landroid/app/job/JobParameters;)Z", "GetOnStartJob_Landroid_app_job_JobParameters_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.App.Job.JobParameters" />
      </Parameters>
      <Docs>
        <param name="params">Parameters specifying info about this job, including the extras bundle you
               optionally provided at job-creation time.</param>
        <summary>Override this method with the callback logic for your job.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this method with the callback logic for your job. Any such logic needs to be
 performed on a separate thread, as this function is executed on your application's main
 thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobService.html#onStartJob(android.app.job.JobParameters)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopJob">
      <MemberSignature Language="C#" Value="public abstract bool OnStopJob (Android.App.Job.JobParameters params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStopJob(class Android.App.Job.JobParameters params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStopJob", "(Landroid/app/job/JobParameters;)Z", "GetOnStopJob_Landroid_app_job_JobParameters_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.App.Job.JobParameters" />
      </Parameters>
      <Docs>
        <param name="params">Parameters specifying info about this job.</param>
        <summary>This method is called if the system has determined that you must stop execution of your job
 even before you've had a chance to call <c><see cref="M:Android.App.Job.JobService.JobFinished(Android.App.Job.JobParameters,System.Boolean)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called if the system has determined that you must stop execution of your job
 even before you've had a chance to call <c><see cref="M:Android.App.Job.JobService.JobFinished(Android.App.Job.JobParameters,System.Boolean)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This will happen if the requirements specified at schedule time are no longer met. For
 example you may have requested WiFi with
 <c><see cref="!:NoType:android/app/job/JobInfo$Builder;Href=../../../../reference/android/app/job/JobInfo.Builder.html#setRequiredNetworkType(int)" /></c>, yet while your
 job was executing the user toggled WiFi. Another example is if you had specified
 <c><see cref="!:NoType:android/app/job/JobInfo$Builder;Href=../../../../reference/android/app/job/JobInfo.Builder.html#setRequiresDeviceIdle(boolean)" /></c>, and the phone left its
 idle maintenance window. You are solely responsible for the behaviour of your application
 upon receipt of this message; your app will likely start to misbehave if you ignore it. One
 immediate repercussion is that the system will cease holding a wakelock for you.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobService.html#onStopJob(android.app.job.JobParameters)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionBind">
      <MemberSignature Language="C#" Value="public const string PermissionBind;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PermissionBind" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PERMISSION_BIND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Job services must be protected with this permission:

 <sample external-id="C150BE36DB7871DB86368BBB6359E9C3" /></summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Job services must be protected with this permission:

 <sample external-id="C150BE36DB7871DB86368BBB6359E9C3" /></para>
          <para tool="javadoc-to-mdoc">If a job service is declared in the manifest but not protected with this
 permission, that service will be ignored by the OS.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/job/JobService.html#PERMISSION_BIND" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
