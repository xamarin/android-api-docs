<Type Name="AlarmManager" FullName="Android.App.AlarmManager">
  <TypeSignature Language="VB.NET" Value="Public Class AlarmManager&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class AlarmManager : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class AlarmManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AlarmManager extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.App.AlarmManager" />
  <TypeSignature Language="F#" Value="type AlarmManager = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/app/AlarmManager", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/app/AlarmManager", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class provides access to the system alarm services.</summary>
    <remarks>
      <para>This class provides access to the system alarm services.  These allow you
            to schedule your application to be run at some point in the future.  When
            an alarm goes off, the <c>Intent</c> that had been registered for it
            is broadcast by the system, automatically starting the target application
            if it is not already running.  Registered alarms are retained while the
            device is asleep (and can optionally wake the device up if they go off
            during that time), but will be cleared if it is turned off and rebooted.</para>
      <para>The Alarm Manager holds a CPU wake lock as long as the alarm receiver's
            onReceive() method is executing. This guarantees that the phone will not sleep
            until you have finished handling the broadcast. Once onReceive() returns, the
            Alarm Manager releases this wake lock. This means that the phone will in some
            cases sleep as soon as your onReceive() method completes.  If your alarm receiver
            called <c>android.content.Context#startService Context.startService()</c>, it
            is possible that the phone will sleep before the requested service is launched.
            To prevent this, your BroadcastReceiver and Service will need to implement a
            separate wake lock policy to ensure that the phone continues running until the
            service becomes available.</para>
      <para>&lt;b&gt;Note: The Alarm Manager is intended for cases where you want to have
            your application code run at a specific time, even if your application is
            not currently running.  For normal timing operations (ticks, timeouts,
            etc) it is easier and much more efficient to use
            <c>android.os.Handler</c>.&lt;/b&gt;
            
            &lt;p class="caution"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Beginning with API 19
            (<c>android.os.Build.VERSION_CODES#KITKAT</c>) alarm delivery is inexact:
            the OS will shift alarms in order to minimize wakeups and battery use.  There are
            new APIs to support applications which need strict delivery guarantees; see
            <c>#setWindow(int, long, long, PendingIntent)</c> and
            <c>#setExact(int, long, PendingIntent)</c>.  Applications whose <c>targetSdkVersion</c>
            is earlier than API 19 will continue to see the previous behavior in which all
            alarms are delivered exactly when requested.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/app/AlarmManager" title="Reference documentation">Java documentation for <code>android.app.AlarmManager</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AlarmManager(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected AlarmManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.App.AlarmManager : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.App.AlarmManager" Usage="new Android.App.AlarmManager (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionNextAlarmClockChanged">
      <MemberSignature Language="VB.NET" Value="Public Const ActionNextAlarmClockChanged As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ActionNextAlarmClockChanged;" />
      <MemberSignature Language="C#" Value="public const string ActionNextAlarmClockChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNextAlarmClockChanged" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.ActionNextAlarmClockChanged" />
      <MemberSignature Language="F#" Value="val mutable ActionNextAlarmClockChanged : string" Usage="Android.App.AlarmManager.ActionNextAlarmClockChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ACTION_NEXT_ALARM_CLOCK_CHANGED")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ACTION_NEXT_ALARM_CLOCK_CHANGED")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: Sent after the value returned by
            <c>#getNextAlarmClock()</c> has changed.</summary>
        <remarks>
          <para>Broadcast Action: Sent after the value returned by
            <c>#getNextAlarmClock()</c> has changed.
            
            &lt;p class="note"&gt;This is a protected intent that can only be sent by the system.
            It is only sent to registered receivers.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#ACTION_NEXT_ALARM_CLOCK_CHANGED" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionScheduleExactAlarmPermissionStateChanged">
      <MemberSignature Language="VB.NET" Value="Public Const ActionScheduleExactAlarmPermissionStateChanged As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ActionScheduleExactAlarmPermissionStateChanged;" />
      <MemberSignature Language="C#" Value="public const string ActionScheduleExactAlarmPermissionStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionScheduleExactAlarmPermissionStateChanged" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.ActionScheduleExactAlarmPermissionStateChanged" />
      <MemberSignature Language="F#" Value="val mutable ActionScheduleExactAlarmPermissionStateChanged : string" Usage="Android.App.AlarmManager.ActionScheduleExactAlarmPermissionStateChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: An app is granted the
            <c>android.Manifest.permission#SCHEDULE_EXACT_ALARM</c> permission.</summary>
        <remarks>
          <para>Broadcast Action: An app is granted the
            <c>android.Manifest.permission#SCHEDULE_EXACT_ALARM</c> permission.</para>
          <para>When the user revokes the <c>android.Manifest.permission#SCHEDULE_EXACT_ALARM</c>
            permission, all alarms scheduled with
            <c>#setExact</c>, <c>#setExactAndAllowWhileIdle</c> and
            <c>#setAlarmClock(AlarmClockInfo, PendingIntent)</c> will be deleted.</para>
          <para>When the user grants the <c>android.Manifest.permission#SCHEDULE_EXACT_ALARM</c>,
            this broadcast will be sent. Applications can reschedule all the necessary alarms when
            receiving it.</para>
          <para>This broadcast will &lt;em&gt;not&lt;/em&gt; be sent when the user revokes the permission.</para>
          <para>&lt;em&gt;Note:&lt;/em&gt;
            Applications are still required to check <c>#canScheduleExactAlarms()</c>
            before using the above APIs after receiving this broadcast,
            because it's possible that the permission is already revoked again by the time
            applications receive this broadcast.</para>
          <para>This broadcast will be sent to both runtime receivers and manifest receivers.</para>
          <para>This broadcast is sent as a foreground broadcast.
            See <c>android.content.Intent#FLAG_RECEIVER_FOREGROUND</c>.</para>
          <para>When an application receives this broadcast, it's allowed to start a foreground service.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Cancel (listener As AlarmManager.IOnAlarmListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Cancel(Android::App::AlarmManager::IOnAlarmListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void Cancel (Android.App.AlarmManager.IOnAlarmListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel(class Android.App.AlarmManager/IOnAlarmListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.Cancel(Android.App.AlarmManager.IOnAlarmListener)" />
      <MemberSignature Language="F#" Value="abstract member Cancel : Android.App.AlarmManager.IOnAlarmListener -&gt; unit&#xA;override this.Cancel : Android.App.AlarmManager.IOnAlarmListener -&gt; unit" Usage="alarmManager.Cancel listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "(Landroid/app/AlarmManager$OnAlarmListener;)V", "GetCancel_Landroid_app_AlarmManager_OnAlarmListener_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "(Landroid/app/AlarmManager$OnAlarmListener;)V", "GetCancel_Landroid_app_AlarmManager_OnAlarmListener_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.App.AlarmManager+IOnAlarmListener" />
      </Parameters>
      <Docs>
        <param name="listener">OnAlarmListener instance that is the target of a currently-set alarm.</param>
        <summary>Remove any alarm scheduled to be delivered to the given <c>OnAlarmListener</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#cancel(android.app.OnAlarmListener)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.cancel(android.app.OnAlarmListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Cancel (operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Cancel(Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void Cancel (Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel(class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member Cancel : Android.App.PendingIntent -&gt; unit&#xA;override this.Cancel : Android.App.PendingIntent -&gt; unit" Usage="alarmManager.Cancel operation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "(Landroid/app/PendingIntent;)V", "GetCancel_Landroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "(Landroid/app/PendingIntent;)V", "GetCancel_Landroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="operation">IntentSender which matches a previously added
            IntentSender. This parameter must not be <c>null</c>.</param>
        <summary>Remove any alarms with a matching <c>Intent</c>.</summary>
        <remarks>
          <para>Remove any alarms with a matching <c>Intent</c>.
            Any alarm, of any type, whose Intent matches this one (as defined by
            <c>Intent#filterEquals</c>), will be canceled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#cancel(android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.cancel(android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="CancelAll">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CancelAll();" />
      <MemberSignature Language="C#" Value="public virtual void CancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.CancelAll" />
      <MemberSignature Language="F#" Value="abstract member CancelAll : unit -&gt; unit&#xA;override this.CancelAll : unit -&gt; unit" Usage="alarmManager.CancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancelAll", "()V", "GetCancelAllHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancelAll", "()V", "GetCancelAllHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove all alarms previously set by the caller, if any.</summary>
        <remarks>
          <para>Remove all alarms previously set by the caller, if any.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#cancelAll()" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.cancelAll()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanScheduleExactAlarms">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanScheduleExactAlarms () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanScheduleExactAlarms();" />
      <MemberSignature Language="C#" Value="public virtual bool CanScheduleExactAlarms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanScheduleExactAlarms() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.CanScheduleExactAlarms" />
      <MemberSignature Language="F#" Value="abstract member CanScheduleExactAlarms : unit -&gt; bool&#xA;override this.CanScheduleExactAlarms : unit -&gt; bool" Usage="alarmManager.CanScheduleExactAlarms " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canScheduleExactAlarms", "()Z", "GetCanScheduleExactAlarmsHandler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canScheduleExactAlarms", "()Z", "GetCanScheduleExactAlarmsHandler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called to check if the caller can schedule exact alarms.</summary>
        <returns>
          <c>true</c> if the caller can schedule exact alarms, <c>false</c> otherwise.</returns>
        <remarks>
          <para>Called to check if the caller can schedule exact alarms.
            Your app schedules exact alarms when it calls any of the <c>setExact...</c> or
            <c>#setAlarmClock(AlarmClockInfo, PendingIntent) setAlarmClock</c> API methods.</para>
          <para>Apps targeting <c>Build.VERSION_CODES#S</c> or higher can schedule exact alarms only if they
            have the <c>Manifest.permission#SCHEDULE_EXACT_ALARM</c> permission or they are on the
            device's power-save exemption list.
            These apps can also
            start <c>android.provider.Settings#ACTION_REQUEST_SCHEDULE_EXACT_ALARM</c> to
            request this permission from the user.</para>
          <para>Apps targeting lower sdk versions, can always schedule exact alarms.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#canScheduleExactAlarms()" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.canScheduleExactAlarms()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromContext (context As Context) As AlarmManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::App::AlarmManager ^ FromContext(Android::Content::Context ^ context);" />
      <MemberSignature Language="C#" Value="public static Android.App.AlarmManager? FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.AlarmManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.FromContext(Android.Content.Context)" />
      <MemberSignature Language="F#" Value="static member FromContext : Android.Content.Context -&gt; Android.App.AlarmManager" Usage="Android.App.AlarmManager.FromContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.AlarmManager</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalDay">
      <MemberSignature Language="VB.NET" Value="Public Const IntervalDay As Long  = 86400000" />
      <MemberSignature Language="C++ CLI" Value="public: long IntervalDay = 86400000;" />
      <MemberSignature Language="C#" Value="public const long IntervalDay = 86400000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalDay = (86400000)" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.IntervalDay" />
      <MemberSignature Language="F#" Value="val mutable IntervalDay : int64" Usage="Android.App.AlarmManager.IntervalDay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INTERVAL_DAY")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INTERVAL_DAY")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>86400000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</summary>
        <remarks>
          <para>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#INTERVAL_DAY" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.INTERVAL_DAY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalFifteenMinutes">
      <MemberSignature Language="VB.NET" Value="Public Const IntervalFifteenMinutes As Long  = 900000" />
      <MemberSignature Language="C++ CLI" Value="public: long IntervalFifteenMinutes = 900000;" />
      <MemberSignature Language="C#" Value="public const long IntervalFifteenMinutes = 900000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalFifteenMinutes = (900000)" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.IntervalFifteenMinutes" />
      <MemberSignature Language="F#" Value="val mutable IntervalFifteenMinutes : int64" Usage="Android.App.AlarmManager.IntervalFifteenMinutes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INTERVAL_FIFTEEN_MINUTES")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INTERVAL_FIFTEEN_MINUTES")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>900000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</summary>
        <remarks>
          <para>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#INTERVAL_FIFTEEN_MINUTES" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.INTERVAL_FIFTEEN_MINUTES</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHalfDay">
      <MemberSignature Language="VB.NET" Value="Public Const IntervalHalfDay As Long  = 43200000" />
      <MemberSignature Language="C++ CLI" Value="public: long IntervalHalfDay = 43200000;" />
      <MemberSignature Language="C#" Value="public const long IntervalHalfDay = 43200000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHalfDay = (43200000)" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.IntervalHalfDay" />
      <MemberSignature Language="F#" Value="val mutable IntervalHalfDay : int64" Usage="Android.App.AlarmManager.IntervalHalfDay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INTERVAL_HALF_DAY")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INTERVAL_HALF_DAY")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>43200000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</summary>
        <remarks>
          <para>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#INTERVAL_HALF_DAY" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.INTERVAL_HALF_DAY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHalfHour">
      <MemberSignature Language="VB.NET" Value="Public Const IntervalHalfHour As Long  = 1800000" />
      <MemberSignature Language="C++ CLI" Value="public: long IntervalHalfHour = 1800000;" />
      <MemberSignature Language="C#" Value="public const long IntervalHalfHour = 1800000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHalfHour = (1800000)" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.IntervalHalfHour" />
      <MemberSignature Language="F#" Value="val mutable IntervalHalfHour : int64" Usage="Android.App.AlarmManager.IntervalHalfHour" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INTERVAL_HALF_HOUR")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INTERVAL_HALF_HOUR")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>1800000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</summary>
        <remarks>
          <para>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#INTERVAL_HALF_HOUR" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.INTERVAL_HALF_HOUR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHour">
      <MemberSignature Language="VB.NET" Value="Public Const IntervalHour As Long  = 3600000" />
      <MemberSignature Language="C++ CLI" Value="public: long IntervalHour = 3600000;" />
      <MemberSignature Language="C#" Value="public const long IntervalHour = 3600000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHour = (3600000)" />
      <MemberSignature Language="DocId" Value="F:Android.App.AlarmManager.IntervalHour" />
      <MemberSignature Language="F#" Value="val mutable IntervalHour : int64" Usage="Android.App.AlarmManager.IntervalHour" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INTERVAL_HOUR")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INTERVAL_HOUR")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>3600000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</summary>
        <remarks>
          <para>Available inexact recurrence interval recognized by
            <c>#setInexactRepeating(int, long, long, PendingIntent)</c>
            when running on Android prior to API 19.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#INTERVAL_HOUR" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.INTERVAL_HOUR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.App.AlarmManager.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.App.AlarmManager.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextAlarmClock">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NextAlarmClock As AlarmManager.AlarmClockInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::App::AlarmManager::AlarmClockInfo ^ NextAlarmClock { Android::App::AlarmManager::AlarmClockInfo ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.App.AlarmManager.AlarmClockInfo? NextAlarmClock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.AlarmManager/AlarmClockInfo NextAlarmClock" />
      <MemberSignature Language="DocId" Value="P:Android.App.AlarmManager.NextAlarmClock" />
      <MemberSignature Language="F#" Value="member this.NextAlarmClock : Android.App.AlarmManager.AlarmClockInfo" Usage="Android.App.AlarmManager.NextAlarmClock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNextAlarmClock", "()Landroid/app/AlarmManager$AlarmClockInfo;", "GetGetNextAlarmClockHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNextAlarmClock", "()Landroid/app/AlarmManager$AlarmClockInfo;", "GetGetNextAlarmClockHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.AlarmManager+AlarmClockInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the next alarm clock currently scheduled.</summary>
        <value>An <c>AlarmClockInfo</c> object describing the next upcoming alarm
              clock event that will occur.  If there are no alarm clock events currently
              scheduled, this method will return <c>null</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#getNextAlarmClock()" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.getNextAlarmClock()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.SetAlarmClock(.AlarmClockInfo, Android.App.PendingIntent)" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Set (type As AlarmType, triggerAtMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Set(Android::App::AlarmType type, long triggerAtMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void Set (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member Set : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.Set : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.Set (type, triggerAtMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("set", "(IJLandroid/app/PendingIntent;)V", "GetSet_IJLandroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("set", "(IJLandroid/app/PendingIntent;)V", "GetSet_IJLandroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
            off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
            typically comes from <c>PendingIntent#getBroadcast
            IntentSender.getBroadcast()</c>.</param>
        <summary>Schedule an alarm.</summary>
        <remarks>
          <para>Schedule an alarm.  &lt;b&gt;Note: for timing operations (ticks, timeouts,
            etc) it is easier and much more efficient to use <c>android.os.Handler</c>.&lt;/b&gt;
            If there is already an alarm scheduled for the same IntentSender, that previous
            alarm will first be canceled.</para>
          <para>If the stated trigger time is in the past, the alarm will be triggered
            immediately.  If there is already an alarm for this Intent
            scheduled (with the equality of two intents being defined by
            <c>Intent#filterEquals</c>), then it will be removed and replaced by
            this one.</para>
          <para>The alarm is an Intent broadcast that goes to a broadcast receiver that
            you registered with <c>android.content.Context#registerReceiver</c>
            or through the &amp;lt;receiver&amp;gt; tag in an AndroidManifest.xml file.</para>
          <para>Alarm intents are delivered with a data extra of type int called
            <c>Intent#EXTRA_ALARM_COUNT Intent.EXTRA_ALARM_COUNT</c> that indicates
            how many past alarm events have been accumulated into this intent
            broadcast.  Recurring alarms that have gone undelivered because the
            phone was asleep may have a count greater than one when delivered.
            
            &lt;div class="note"&gt;</para>
          <para>&lt;b&gt;Note:&lt;/b&gt; Beginning in API 19, the trigger time passed to this method
            is treated as inexact: the alarm will not be delivered before this time, but
            may be deferred and delivered some time later.  The OS will use
            this policy in order to "batch" alarms together across the entire system,
            minimizing the number of times the device needs to "wake up" and minimizing
            battery use.  In general, alarms scheduled in the near future will not
            be deferred as long as alarms scheduled far in the future.</para>
          <para>With the new batching policy, delivery ordering guarantees are not as
            strong as they were previously.  If the application sets multiple alarms,
            it is possible that these alarms' &lt;em&gt;actual&lt;/em&gt; delivery ordering may not match
            the order of their &lt;em&gt;requested&lt;/em&gt; delivery times.  If your application has
            strong ordering requirements there are other APIs that you can use to get
            the necessary behavior; see <c>#setWindow(int, long, long, PendingIntent)</c>
            and <c>#setExact(int, long, PendingIntent)</c>.</para>
          <para>Applications whose <c>targetSdkVersion</c> is before API 19 will
            continue to get the previous alarm behavior: all of their scheduled alarms
            will be treated as exact.
            &lt;/div&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#set(int,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.set(int, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Set (type As AlarmType, triggerAtMillis As Long, tag As String, listener As AlarmManager.IOnAlarmListener, targetHandler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Set(Android::App::AlarmType type, long triggerAtMillis, System::String ^ tag, Android::App::AlarmManager::IOnAlarmListener ^ listener, Android::OS::Handler ^ targetHandler);" />
      <MemberSignature Language="C#" Value="public virtual void Set (Android.App.AlarmType type, long triggerAtMillis, string? tag, Android.App.AlarmManager.IOnAlarmListener listener, Android.OS.Handler? targetHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(valuetype Android.App.AlarmType type, int64 triggerAtMillis, string tag, class Android.App.AlarmManager/IOnAlarmListener listener, class Android.OS.Handler targetHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,System.String,Android.App.AlarmManager.IOnAlarmListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member Set : Android.App.AlarmType * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit&#xA;override this.Set : Android.App.AlarmType * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit" Usage="alarmManager.Set (type, triggerAtMillis, tag, listener, targetHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("set", "(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSet_IJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("set", "(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSet_IJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="listener" Type="Android.App.AlarmManager+IOnAlarmListener">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="targetHandler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="triggerAtMillis">To be added.</param>
        <param name="tag">To be added.</param>
        <param name="listener">To be added.</param>
        <param name="targetHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlarmClock">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetAlarmClock (info As AlarmManager.AlarmClockInfo, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAlarmClock(Android::App::AlarmManager::AlarmClockInfo ^ info, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetAlarmClock (Android.App.AlarmManager.AlarmClockInfo info, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAlarmClock(class Android.App.AlarmManager/AlarmClockInfo info, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetAlarmClock(Android.App.AlarmManager.AlarmClockInfo,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetAlarmClock : Android.App.AlarmManager.AlarmClockInfo * Android.App.PendingIntent -&gt; unit&#xA;override this.SetAlarmClock : Android.App.AlarmManager.AlarmClockInfo * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetAlarmClock (info, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAlarmClock", "(Landroid/app/AlarmManager$AlarmClockInfo;Landroid/app/PendingIntent;)V", "GetSetAlarmClock_Landroid_app_AlarmManager_AlarmClockInfo_Landroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAlarmClock", "(Landroid/app/AlarmManager$AlarmClockInfo;Landroid/app/PendingIntent;)V", "GetSetAlarmClock_Landroid_app_AlarmManager_AlarmClockInfo_Landroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.App.AlarmManager+AlarmClockInfo" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="operation">Action to perform when the alarm goes off;
        typically comes from <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Android App PendingIntent GetBroadcast(Android Content Context,System Int32,System Int32,System Int32)';scope=Xamarin" title="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)">M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)</a></format>.</param>
        <summary>Schedule an alarm that represents an alarm clock, which will be used to notify the user
            when it goes off.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setAlarmClock(android.app.AlarmClockInfo,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setAlarmClock(android.app.AlarmClockInfo, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="P:Android.App.AlarmManager.NextAlarmClock" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetAndAllowWhileIdle">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetAndAllowWhileIdle (type As AlarmType, triggerAtMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAndAllowWhileIdle(Android::App::AlarmType type, long triggerAtMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetAndAllowWhileIdle (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAndAllowWhileIdle(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetAndAllowWhileIdle(Android.App.AlarmType,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetAndAllowWhileIdle : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetAndAllowWhileIdle : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetAndAllowWhileIdle (type, triggerAtMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAndAllowWhileIdle", "(IJLandroid/app/PendingIntent;)V", "GetSetAndAllowWhileIdle_IJLandroid_app_PendingIntent_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setAndAllowWhileIdle", "(IJLandroid/app/PendingIntent;)V", "GetSetAndAllowWhileIdle_IJLandroid_app_PendingIntent_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
            off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
            typically comes from <c>PendingIntent#getBroadcast
            IntentSender.getBroadcast()</c>.</param>
        <summary>Like <c>#set(int, long, PendingIntent)</c>, but this alarm will be allowed to execute
            even when the system is in low-power idle (a.</summary>
        <remarks>
          <para>Like <c>#set(int, long, PendingIntent)</c>, but this alarm will be allowed to execute
            even when the system is in low-power idle (a.k.a. doze) modes.  This type of alarm must
            &lt;b&gt;only&lt;/b&gt; be used for situations where it is actually required that the alarm go off while
            in idle -- a reasonable example would be for a calendar notification that should make a
            sound so the user is aware of it.  When the alarm is dispatched, the app will also be
            added to the system's temporary power exemption list for approximately 10 seconds to allow
            that application to acquire further wake locks in which to complete its work.&lt;/p&gt;</para>
          <para>These alarms can significantly impact the power use
            of the device when idle (and thus cause significant battery blame to the app scheduling
            them), so they should be used with care.  To reduce abuse, there are restrictions on how
            frequently these alarms will go off for a particular application.
            Under normal system operation, it will not dispatch these
            alarms more than about every minute (at which point every such pending alarm is
            dispatched); when in low-power idle modes this duration may be significantly longer,
            such as 15 minutes.</para>
          <para>Unlike other alarms, the system is free to reschedule this type of alarm to happen
            out of order with any other alarms, even those from the same app.  This will clearly happen
            when the device is idle (since this alarm can go off while idle, when any other alarms
            from the app will be held until later), but may also happen even when not idle.</para>
          <para>Regardless of the app's target SDK version, this call always allows batching of the
            alarm.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setAndAllowWhileIdle(int,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setAndAllowWhileIdle(int, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExact">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetExact (type As AlarmType, triggerAtMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetExact(Android::App::AlarmType type, long triggerAtMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetExact (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExact(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetExact : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetExact : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetExact (type, triggerAtMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExact", "(IJLandroid/app/PendingIntent;)V", "GetSetExact_IJLandroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExact", "(IJLandroid/app/PendingIntent;)V", "GetSetExact_IJLandroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
                   off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
                   typically comes from <c>PendingIntent#getBroadcast
                   IntentSender.getBroadcast()</c>.</param>
        <summary>Schedule an alarm to be delivered precisely at the stated time.</summary>
        <remarks>
          <para>Schedule an alarm to be delivered precisely at the stated time.</para>
          <para>This method is like <c>#set(int, long, PendingIntent)</c>, but does not permit
            the OS to adjust the delivery time.  The alarm will be delivered as nearly as
            possible to the requested trigger time.</para>
          <para>&lt;b&gt;Note:&lt;/b&gt; only alarms for which there is a strong demand for exact-time
            delivery (such as an alarm clock ringing at the requested time) should be
            scheduled as exact.  Applications are strongly discouraged from using exact
            alarms unnecessarily as they reduce the OS's ability to minimize battery use.
            
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;
            Starting with <c>Build.VERSION_CODES#S</c>, apps targeting SDK level 31 or higher
            need to request the
            <c>Manifest.permission#SCHEDULE_EXACT_ALARM SCHEDULE_EXACT_ALARM</c> permission to use this
            API, unless the app is exempt from battery restrictions.
            The user and the system can revoke this permission via the special app access screen in
            Settings.
            
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;
            Exact alarms should only be used for user-facing features.
            For more details, see <see href="https://developer.android.com/about/versions/12/behavior-changes-12#exact-alarm-permission">
            Exact alarm permission</see>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setExact(int,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setExact(int, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetExact">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetExact (type As AlarmType, triggerAtMillis As Long, tag As String, listener As AlarmManager.IOnAlarmListener, targetHandler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetExact(Android::App::AlarmType type, long triggerAtMillis, System::String ^ tag, Android::App::AlarmManager::IOnAlarmListener ^ listener, Android::OS::Handler ^ targetHandler);" />
      <MemberSignature Language="C#" Value="public virtual void SetExact (Android.App.AlarmType type, long triggerAtMillis, string? tag, Android.App.AlarmManager.IOnAlarmListener listener, Android.OS.Handler? targetHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExact(valuetype Android.App.AlarmType type, int64 triggerAtMillis, string tag, class Android.App.AlarmManager/IOnAlarmListener listener, class Android.OS.Handler targetHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.String,Android.App.AlarmManager.IOnAlarmListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetExact : Android.App.AlarmType * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit&#xA;override this.SetExact : Android.App.AlarmType * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit" Usage="alarmManager.SetExact (type, triggerAtMillis, tag, listener, targetHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExact", "(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSetExact_IJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExact", "(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSetExact_IJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="listener" Type="Android.App.AlarmManager+IOnAlarmListener">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="targetHandler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
                   off, using the appropriate clock (depending on the alarm type).</param>
        <param name="tag">To be added.</param>
        <param name="listener">To be added.</param>
        <param name="targetHandler">To be added.</param>
        <summary>Schedule an alarm to be delivered precisely at the stated time.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setExact(int,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setExact(int, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExactAndAllowWhileIdle">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetExactAndAllowWhileIdle (type As AlarmType, triggerAtMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetExactAndAllowWhileIdle(Android::App::AlarmType type, long triggerAtMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetExactAndAllowWhileIdle (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExactAndAllowWhileIdle(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetExactAndAllowWhileIdle(Android.App.AlarmType,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetExactAndAllowWhileIdle : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetExactAndAllowWhileIdle : Android.App.AlarmType * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetExactAndAllowWhileIdle (type, triggerAtMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExactAndAllowWhileIdle", "(IJLandroid/app/PendingIntent;)V", "GetSetExactAndAllowWhileIdle_IJLandroid_app_PendingIntent_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExactAndAllowWhileIdle", "(IJLandroid/app/PendingIntent;)V", "GetSetExactAndAllowWhileIdle_IJLandroid_app_PendingIntent_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SCHEDULE_EXACT_ALARM")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
                   off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
                   typically comes from <c>PendingIntent#getBroadcast
                   IntentSender.getBroadcast()</c>.</param>
        <summary>Like <c>#setExact(int, long, PendingIntent)</c>, but this alarm will be allowed to execute
            even when the system is in low-power idle modes.</summary>
        <remarks>
          <para>Like <c>#setExact(int, long, PendingIntent)</c>, but this alarm will be allowed to execute
            even when the system is in low-power idle modes.  If you don't need exact scheduling of
            the alarm but still need to execute while idle, consider using
            <c>#setAndAllowWhileIdle</c>.  This type of alarm must &lt;b&gt;only&lt;/b&gt;
            be used for situations where it is actually required that the alarm go off while in
            idle -- a reasonable example would be for a calendar notification that should make a
            sound so the user is aware of it.  When the alarm is dispatched, the app will also be
            added to the system's temporary power exemption list for approximately 10 seconds to allow
            that application to acquire further wake locks in which to complete its work.&lt;/p&gt;</para>
          <para>These alarms can significantly impact the power use
            of the device when idle (and thus cause significant battery blame to the app scheduling
            them), so they should be used with care.  To reduce abuse, there are restrictions on how
            frequently these alarms will go off for a particular application.
            Under normal system operation, it will not dispatch these
            alarms more than about every minute (at which point every such pending alarm is
            dispatched); when in low-power idle modes this duration may be significantly longer,
            such as 15 minutes.</para>
          <para>Unlike other alarms, the system is free to reschedule this type of alarm to happen
            out of order with any other alarms, even those from the same app.  This will clearly happen
            when the device is idle (since this alarm can go off while idle, when any other alarms
            from the app will be held until later), but may also happen even when not idle.
            Note that the OS will allow itself more flexibility for scheduling these alarms than
            regular exact alarms, since the application has opted into this behavior.  When the
            device is idle it may take even more liberties with scheduling in order to optimize
            for battery life.</para>
          <para>&lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;
            Starting with <c>Build.VERSION_CODES#S</c>, apps targeting SDK level 31 or higher
            need to request the
            <c>Manifest.permission#SCHEDULE_EXACT_ALARM SCHEDULE_EXACT_ALARM</c> permission to use this
            API, unless the app is exempt from battery restrictions.
            The user and the system can revoke this permission via the special app access screen in
            Settings.
            
            &lt;p class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;
            Exact alarms should only be used for user-facing features.
            For more details, see <see href="https://developer.android.com/about/versions/12/behavior-changes-12#exact-alarm-permission">
            Exact alarm permission</see>.</para>
          <para>Alarms scheduled via this API
            will be allowed to start a foreground service even if the app is in the background.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setExactAndAllowWhileIdle(int,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setExactAndAllowWhileIdle(int, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInexactRepeating">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetInexactRepeating (type As AlarmType, triggerAtMillis As Long, intervalMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetInexactRepeating(Android::App::AlarmType type, long triggerAtMillis, long intervalMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetInexactRepeating (Android.App.AlarmType type, long triggerAtMillis, long intervalMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInexactRepeating(valuetype Android.App.AlarmType type, int64 triggerAtMillis, int64 intervalMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetInexactRepeating : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetInexactRepeating : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetInexactRepeating (type, triggerAtMillis, intervalMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInexactRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetInexactRepeating_IJJLandroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInexactRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetInexactRepeating_IJJLandroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="intervalMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should first
            go off, using the appropriate clock (depending on the alarm type).  This
            is inexact: the alarm will not fire before this time, but there may be a
            delay of almost an entire alarm interval before the first invocation of
            the alarm.</param>
        <param name="intervalMillis">interval in milliseconds between subsequent repeats
            of the alarm.  Prior to API 19, if this is one of INTERVAL_FIFTEEN_MINUTES,
            INTERVAL_HALF_HOUR, INTERVAL_HOUR, INTERVAL_HALF_DAY, or INTERVAL_DAY
            then the alarm will be phase-aligned with other alarms to reduce the
            number of wakeups.  Otherwise, the alarm will be set as though the
            application had called <c>#setRepeating</c>.  As of API 19, all repeating
            alarms will be inexact and subject to batching with other alarms regardless
            of their stated repeat interval.</param>
        <param name="operation">Action to perform when the alarm goes off;
            typically comes from <c>PendingIntent#getBroadcast
            IntentSender.getBroadcast()</c>.</param>
        <summary>Schedule a repeating alarm that has inexact trigger time requirements;
            for example, an alarm that repeats every hour, but not necessarily at
            the top of every hour.</summary>
        <remarks>
          <para>Schedule a repeating alarm that has inexact trigger time requirements;
            for example, an alarm that repeats every hour, but not necessarily at
            the top of every hour.  These alarms are more power-efficient than
            the strict recurrences traditionally supplied by <c>#setRepeating</c>, since the
            system can adjust alarms' delivery times to cause them to fire simultaneously,
            avoiding waking the device from sleep more than necessary.</para>
          <para>Your alarm's first trigger will not be before the requested time,
            but it might not occur for almost a full interval after that time.  In
            addition, while the overall period of the repeating alarm will be as
            requested, the time between any two successive firings of the alarm
            may vary.  If your application demands very low jitter, use
            one-shot alarms with an appropriate window instead; see <c>#setWindow(int, long, long, PendingIntent)</c> and
            <c>#setExact(int, long, PendingIntent)</c>.
            
            &lt;p class="note"&gt;
            As of API 19, all repeating alarms are inexact.  Because this method has
            been available since API 3, your application can safely call it and be
            assured that it will get similar behavior on both current and older versions
            of Android.</para>
          <para>Apps targeting <c>Build.VERSION_CODES#S</c> will need to set the flag
            <c>PendingIntent#FLAG_MUTABLE</c> on the <c>PendingIntent</c> being used to set this alarm,
            if they want the alarm count to be supplied with the key <c>Intent#EXTRA_ALARM_COUNT</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setInexactRepeating(int,%20long,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setInexactRepeating(int, long, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
        <altmember cref="F:Android.App.AlarmManager.IntervalFifteenMinutes" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHalfHour" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHour" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHalfDay" />
        <altmember cref="F:Android.App.AlarmManager.IntervalDay" />
      </Docs>
    </Member>
    <Member MemberName="SetRepeating">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetRepeating (type As AlarmType, triggerAtMillis As Long, intervalMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetRepeating(Android::App::AlarmType type, long triggerAtMillis, long intervalMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetRepeating (Android.App.AlarmType type, long triggerAtMillis, long intervalMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRepeating(valuetype Android.App.AlarmType type, int64 triggerAtMillis, int64 intervalMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType,System.Int64,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetRepeating : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetRepeating : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetRepeating (type, triggerAtMillis, intervalMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetRepeating_IJJLandroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetRepeating_IJJLandroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="intervalMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should first
            go off, using the appropriate clock (depending on the alarm type).</param>
        <param name="intervalMillis">interval in milliseconds between subsequent repeats
            of the alarm.</param>
        <param name="operation">Action to perform when the alarm goes off;
            typically comes from <c>PendingIntent#getBroadcast
            IntentSender.getBroadcast()</c>.</param>
        <summary>Schedule a repeating alarm.</summary>
        <remarks>
          <para>Schedule a repeating alarm.  &lt;b&gt;Note: for timing operations (ticks,
            timeouts, etc) it is easier and much more efficient to use
            <c>android.os.Handler</c>.&lt;/b&gt;  If there is already an alarm scheduled
            for the same IntentSender, it will first be canceled.</para>
          <para>Like <c>#set</c>, except you can also supply a period at which
            the alarm will automatically repeat.  This alarm continues
            repeating until explicitly removed with <c>#cancel</c>.  If the stated
            trigger time is in the past, the alarm will be triggered immediately, with an
            alarm count depending on how far in the past the trigger time is relative
            to the repeat interval.</para>
          <para>If an alarm is delayed (by system sleep, for example, for non
            _WAKEUP alarm types), a skipped repeat will be delivered as soon as
            possible.  After that, future alarms will be delivered according to the
            original schedule; they do not drift over time.  For example, if you have
            set a recurring alarm for the top of every hour but the phone was asleep
            from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens,
            then the next alarm will be sent at 9:00.</para>
          <para>If your application wants to allow the delivery times to drift in
            order to guarantee that at least a certain time interval always elapses
            between alarms, then the approach to take is to use one-time alarms,
            scheduling the next one yourself when handling each alarm delivery.
            
            &lt;p class="note"&gt;
            &lt;b&gt;Note:&lt;/b&gt; as of API 19, all repeating alarms are inexact.  If your
            application needs precise delivery times then it must use one-time
            exact alarms, rescheduling each time as described above. Legacy applications
            whose <c>targetSdkVersion</c> is earlier than API 19 will continue to have all
            of their alarms, including repeating alarms, treated as exact.</para>
          <para>Apps targeting <c>Build.VERSION_CODES#S</c> will need to set the flag
            <c>PendingIntent#FLAG_MUTABLE</c> on the <c>PendingIntent</c> being used to set this alarm,
            if they want the alarm count to be supplied with the key <c>Intent#EXTRA_ALARM_COUNT</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setRepeating(int,%20long,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setRepeating(int, long, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetTime">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetTime (millis As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetTime(long millis);" />
      <MemberSignature Language="C#" Value="public virtual void SetTime (long millis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTime(int64 millis) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetTime(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetTime : int64 -&gt; unit&#xA;override this.SetTime : int64 -&gt; unit" Usage="alarmManager.SetTime millis" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTime", "(J)V", "GetSetTime_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTime", "(J)V", "GetSetTime_JHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_TIME")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_TIME")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="millis">time in milliseconds since the Epoch</param>
        <summary>Set the system wall clock time.</summary>
        <remarks>
          <para>Set the system wall clock time.
            Requires the permission android.permission.SET_TIME.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setTime(long)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setTime(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetTimeZone">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetTimeZone (timeZone As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetTimeZone(System::String ^ timeZone);" />
      <MemberSignature Language="C#" Value="public virtual void SetTimeZone (string? timeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTimeZone(string timeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetTimeZone(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetTimeZone : string -&gt; unit&#xA;override this.SetTimeZone : string -&gt; unit" Usage="alarmManager.SetTimeZone timeZone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTimeZone", "(Ljava/lang/String;)V", "GetSetTimeZone_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTimeZone", "(Ljava/lang/String;)V", "GetSetTimeZone_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_TIME_ZONE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_TIME_ZONE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeZone" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timeZone">one of the Olson ids from the list returned by
                <c>java.util.TimeZone#getAvailableIDs</c></param>
        <summary>Sets the system's persistent default time zone.</summary>
        <remarks>
          <para>Sets the system's persistent default time zone. This is the time zone for all apps, even
            after a reboot. Use <c>java.util.TimeZone#setDefault</c> if you just want to change the
            time zone within your app, and even then prefer to pass an explicit
            <c>java.util.TimeZone</c> to APIs that require it rather than changing the time zone for
            all threads.</para>
          <para>On android M and above, it is an error to pass in a non-Olson timezone to this
            function. Note that this is a bad idea on all Android releases because POSIX and
            the <c>TimeZone</c> class have opposite interpretations of <c>'+'</c> and <c>'-'</c>
            in the same non-Olson ID.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setTimeZone(java.lang.String)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setTimeZone(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWindow">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWindow (type As AlarmType, windowStartMillis As Long, windowLengthMillis As Long, operation As PendingIntent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWindow(Android::App::AlarmType type, long windowStartMillis, long windowLengthMillis, Android::App::PendingIntent ^ operation);" />
      <MemberSignature Language="C#" Value="public virtual void SetWindow (Android.App.AlarmType type, long windowStartMillis, long windowLengthMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWindow(valuetype Android.App.AlarmType type, int64 windowStartMillis, int64 windowLengthMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,Android.App.PendingIntent)" />
      <MemberSignature Language="F#" Value="abstract member SetWindow : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit&#xA;override this.SetWindow : Android.App.AlarmType * int64 * int64 * Android.App.PendingIntent -&gt; unit" Usage="alarmManager.SetWindow (type, windowStartMillis, windowLengthMillis, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWindow", "(IJJLandroid/app/PendingIntent;)V", "GetSetWindow_IJJLandroid_app_PendingIntent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWindow", "(IJJLandroid/app/PendingIntent;)V", "GetSetWindow_IJJLandroid_app_PendingIntent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="windowStartMillis" Type="System.Int64" />
        <Parameter Name="windowLengthMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="windowStartMillis">The earliest time, in milliseconds, that the alarm should
                   be delivered, expressed in the appropriate clock's units (depending on the alarm
                   type).</param>
        <param name="windowLengthMillis">The length of the requested delivery window,
                   in milliseconds.  The alarm will be delivered no later than this many
                   milliseconds after <c>windowStartMillis</c>.  Note that this parameter
                   is a <i>duration,</i> not the timestamp of the end of the window.</param>
        <param name="operation">Action to perform when the alarm goes off;
                   typically comes from <c>PendingIntent#getBroadcast
                   IntentSender.getBroadcast()</c>.</param>
        <summary>Schedule an alarm to be delivered within a given window of time.</summary>
        <remarks>
          <para>Schedule an alarm to be delivered within a given window of time.  This method
            is similar to <c>#set(int, long, PendingIntent)</c>, but allows the
            application to precisely control the degree to which its delivery might be
            adjusted by the OS. This method allows an application to take advantage of the
            battery optimizations that arise from delivery batching even when it has
            modest timeliness requirements for its alarms.</para>
          <para>Note: Starting with API <c>Build.VERSION_CODES#S</c>, apps should not pass in a window of
            less than 10 minutes. The system will try its best to accommodate smaller windows if the
            alarm is supposed to fire in the near future, but there are no guarantees and the app should
            expect any window smaller than 10 minutes to get elongated to 10 minutes.</para>
          <para>This method can also be used to achieve strict ordering guarantees among
            multiple alarms by ensuring that the windows requested for each alarm do
            not intersect.</para>
          <para>When precise delivery is not required, applications should use the standard
            <c>#set(int, long, PendingIntent)</c> method.  This will give the OS the most
            flexibility to minimize wakeups and battery use.  For alarms that must be delivered
            at precisely-specified times with no acceptable variation, applications can use
            <c>#setExact(int, long, PendingIntent)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setWindow(int,%20long,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setWindow(int, long, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetWindow">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWindow (type As AlarmType, windowStartMillis As Long, windowLengthMillis As Long, tag As String, listener As AlarmManager.IOnAlarmListener, targetHandler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWindow(Android::App::AlarmType type, long windowStartMillis, long windowLengthMillis, System::String ^ tag, Android::App::AlarmManager::IOnAlarmListener ^ listener, Android::OS::Handler ^ targetHandler);" />
      <MemberSignature Language="C#" Value="public virtual void SetWindow (Android.App.AlarmType type, long windowStartMillis, long windowLengthMillis, string? tag, Android.App.AlarmManager.IOnAlarmListener listener, Android.OS.Handler? targetHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWindow(valuetype Android.App.AlarmType type, int64 windowStartMillis, int64 windowLengthMillis, string tag, class Android.App.AlarmManager/IOnAlarmListener listener, class Android.OS.Handler targetHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,System.String,Android.App.AlarmManager.IOnAlarmListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member SetWindow : Android.App.AlarmType * int64 * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit&#xA;override this.SetWindow : Android.App.AlarmType * int64 * int64 * string * Android.App.AlarmManager.IOnAlarmListener * Android.OS.Handler -&gt; unit" Usage="alarmManager.SetWindow (type, windowStartMillis, windowLengthMillis, tag, listener, targetHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWindow", "(IJJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSetWindow_IJJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWindow", "(IJJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V", "GetSetWindow_IJJLjava_lang_String_Landroid_app_AlarmManager_OnAlarmListener_Landroid_os_Handler_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="windowStartMillis" Type="System.Int64" />
        <Parameter Name="windowLengthMillis" Type="System.Int64" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="listener" Type="Android.App.AlarmManager+IOnAlarmListener">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="targetHandler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="type">type of alarm.</param>
        <param name="windowStartMillis">The earliest time, in milliseconds, that the alarm should
                   be delivered, expressed in the appropriate clock's units (depending on the alarm
                   type).</param>
        <param name="windowLengthMillis">The length of the requested delivery window,
                   in milliseconds.  The alarm will be delivered no later than this many
                   milliseconds after <c>windowStartMillis</c>.  Note that this parameter
                   is a <i>duration,</i> not the timestamp of the end of the window.</param>
        <param name="tag">To be added.</param>
        <param name="listener">To be added.</param>
        <param name="targetHandler">To be added.</param>
        <summary>Schedule an alarm to be delivered within a given window of time.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/AlarmManager#setWindow(int,%20long,%20long,%20android.app.PendingIntent)" title="Reference documentation">Java documentation for <code>android.app.AlarmManager.setWindow(int, long, long, android.app.PendingIntent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWindow">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWindow (type As AlarmType, windowStartMillis As Long, windowLengthMillis As Long, tag As String, executor As IExecutor, listener As AlarmManager.IOnAlarmListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWindow(Android::App::AlarmType type, long windowStartMillis, long windowLengthMillis, System::String ^ tag, Java::Util::Concurrent::IExecutor ^ executor, Android::App::AlarmManager::IOnAlarmListener ^ listener);" />
      <MemberSignature Language="C#" Value="public virtual void SetWindow (Android.App.AlarmType type, long windowStartMillis, long windowLengthMillis, string? tag, Java.Util.Concurrent.IExecutor executor, Android.App.AlarmManager.IOnAlarmListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWindow(valuetype Android.App.AlarmType type, int64 windowStartMillis, int64 windowLengthMillis, string tag, class Java.Util.Concurrent.IExecutor executor, class Android.App.AlarmManager/IOnAlarmListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,System.String,Java.Util.Concurrent.IExecutor,Android.App.AlarmManager.IOnAlarmListener)" />
      <MemberSignature Language="F#" Value="abstract member SetWindow : Android.App.AlarmType * int64 * int64 * string * Java.Util.Concurrent.IExecutor * Android.App.AlarmManager.IOnAlarmListener -&gt; unit&#xA;override this.SetWindow : Android.App.AlarmType * int64 * int64 * string * Java.Util.Concurrent.IExecutor * Android.App.AlarmManager.IOnAlarmListener -&gt; unit" Usage="alarmManager.SetWindow (type, windowStartMillis, windowLengthMillis, tag, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWindow", "(IJJLjava/lang/String;Ljava/util/concurrent/Executor;Landroid/app/AlarmManager$OnAlarmListener;)V", "GetSetWindow_IJJLjava_lang_String_Ljava_util_concurrent_Executor_Landroid_app_AlarmManager_OnAlarmListener_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWindow", "(IJJLjava/lang/String;Ljava/util/concurrent/Executor;Landroid/app/AlarmManager$OnAlarmListener;)V", "GetSetWindow_IJJLjava_lang_String_Ljava_util_concurrent_Executor_Landroid_app_AlarmManager_OnAlarmListener_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="windowStartMillis" Type="System.Int64" />
        <Parameter Name="windowLengthMillis" Type="System.Int64" />
        <Parameter Name="tag" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Android.App.AlarmManager+IOnAlarmListener" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="windowStartMillis">To be added.</param>
        <param name="windowLengthMillis">To be added.</param>
        <param name="tag">To be added.</param>
        <param name="executor">To be added.</param>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.App.AlarmManager.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.App.AlarmManager.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.App.AlarmManager.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.App.AlarmManager.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
