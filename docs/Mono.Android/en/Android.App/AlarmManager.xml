<Type Name="AlarmManager" FullName="Android.App.AlarmManager">
  <TypeSignature Language="C#" Value="public class AlarmManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AlarmManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/AlarmManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class provides access to the system alarm services.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class provides access to the system alarm services.  These allow you
 to schedule your application to be run at some point in the future.  When
 an alarm goes off, the <c><see cref="T:Android.Content.Intent" /></c> that had been registered for it
 is broadcast by the system, automatically starting the target application
 if it is not already running.  Registered alarms are retained while the
 device is asleep (and can optionally wake the device up if they go off
 during that time), but will be cleared if it is turned off and rebooted.
 
 </para>
      <para tool="javadoc-to-mdoc">The Alarm Manager holds a CPU wake lock as long as the alarm receiver's
 onReceive() method is executing. This guarantees that the phone will not sleep
 until you have finished handling the broadcast. Once onReceive() returns, the
 Alarm Manager releases this wake lock. This means that the phone will in some
 cases sleep as soon as your onReceive() method completes.  If your alarm receiver
 called <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>, it
 is possible that the phone will sleep before the requested service is launched.
 To prevent this, your BroadcastReceiver and Service will need to implement a
 separate wake lock policy to ensure that the phone continues running until the
 service becomes available.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Note: The Alarm Manager is intended for cases where you want to have
 your application code run at a specific time, even if your application is
 not currently running.  For normal timing operations (ticks, timeouts,
 etc) it is easier and much more efficient to use
 <c><see cref="T:Android.OS.Handler" /></c>.</b>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> Beginning with API 19
 (<c><see cref="F:Android.OS.Build+VERSION_CODES.KitKat" tool="ReplaceLinkValue" /></c>) alarm delivery is inexact:
 the OS will shift alarms in order to minimize wakeups and battery use.  There are
 new APIs to support applications which need strict delivery guarantees; see
 <c><see cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c> and
 <c><see cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.Int64)" /></c>.  Applications whose <c>targetSdkVersion</c>
 is earlier than API 19 will continue to see the previous behavior in which all
 alarms are delivered exactly when requested.

 </para>
      <para tool="javadoc-to-mdoc">You do not
 instantiate this class directly; instead, retrieve it through
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/AlarmManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AlarmManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionNextAlarmClockChanged">
      <MemberSignature Language="C#" Value="public const string ActionNextAlarmClockChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNextAlarmClockChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_NEXT_ALARM_CLOCK_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: Sent after the value returned by
 <c><see cref="P:Android.App.AlarmManager.NextAlarmClock" /></c> has changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action: Sent after the value returned by
 <c><see cref="P:Android.App.AlarmManager.NextAlarmClock" /></c> has changed.

 </para>
          <para tool="javadoc-to-mdoc">This is a protected intent that can only be sent by the system.
 It is only sent to registered receivers.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#ACTION_NEXT_ALARM_CLOCK_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel (Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel(class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "(Landroid/app/PendingIntent;)V", "GetCancel_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="operation">IntentSender which matches a previously added
 IntentSender.</param>
        <summary>Remove any alarms with a matching <c><see cref="T:Android.Content.Intent" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove any alarms with a matching <c><see cref="T:Android.Content.Intent" /></c>.
 Any alarm, of any type, whose Intent matches this one (as defined by
 <c><see cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" /></c>), will be canceled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#cancel(android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.App.AlarmManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.AlarmManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.AlarmManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalDay">
      <MemberSignature Language="C#" Value="public const long IntervalDay = 86400000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalDay = (86400000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTERVAL_DAY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>86400000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#INTERVAL_DAY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalFifteenMinutes">
      <MemberSignature Language="C#" Value="public const long IntervalFifteenMinutes = 900000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalFifteenMinutes = (900000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTERVAL_FIFTEEN_MINUTES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>900000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#INTERVAL_FIFTEEN_MINUTES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHalfDay">
      <MemberSignature Language="C#" Value="public const long IntervalHalfDay = 43200000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHalfDay = (43200000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTERVAL_HALF_DAY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>43200000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#INTERVAL_HALF_DAY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHalfHour">
      <MemberSignature Language="C#" Value="public const long IntervalHalfHour = 1800000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHalfHour = (1800000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTERVAL_HALF_HOUR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>1800000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#INTERVAL_HALF_HOUR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="IntervalHour">
      <MemberSignature Language="C#" Value="public const long IntervalHour = 3600000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IntervalHour = (3600000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INTERVAL_HOUR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>3600000</MemberValue>
      <Docs>
        <summary>Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Available inexact recurrence interval recognized by
 <c><see cref="M:Android.App.AlarmManager.SetInexactRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 when running on Android prior to API 19.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#INTERVAL_HOUR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="NextAlarmClock">
      <MemberSignature Language="C#" Value="public virtual Android.App.AlarmManager.AlarmClockInfo NextAlarmClock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.AlarmManager/AlarmClockInfo NextAlarmClock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNextAlarmClock", "()Landroid/app/AlarmManager$AlarmClockInfo;", "GetGetNextAlarmClockHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.AlarmManager+AlarmClockInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the next alarm clock currently scheduled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets information about the next alarm clock currently scheduled.

 The alarm clocks considered are those scheduled by <c><see cref="M:Android.App.AlarmManager.SetAlarmClock(.AlarmClockInfo,Android.App.PendingIntent)" /></c>
 from any package of the calling user.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#getNextAlarmClock()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.SetAlarmClock(.AlarmClockInfo, Android.App.PendingIntent)" />
      </Docs>
      <since version="Added in API level 21" />
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public virtual void Set (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("set", "(IJLandroid/app/PendingIntent;)V", "GetSet_IJLandroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtTime" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">One of <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME" /></c>, <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME_WAKEUP" /></c>,
        <c><see cref="!:Android.App.AlarmManager.RTC" /></c>, or <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
 off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
 typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Schedule an alarm.  <format type="text/html"><b>Note: for timing operations (ticks, timeouts,
 etc) it is easier and much more efficient to use <c><see cref="T:Android.OS.Handler" /></c>.</b></format>
 If there is already an alarm scheduled for the same IntentSender, that previous
 alarm will first be canceled.

 </para>
          <para tool="javadoc-to-mdoc">If the stated trigger time is in the past, the alarm will be triggered
 immediately.  If there is already an alarm for this Intent
 scheduled (with the equality of two intents being defined by
 <c><see cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" /></c>), then it will be removed and replaced by
 this one.

 </para>
          <para tool="javadoc-to-mdoc">
 The alarm is an Intent broadcast that goes to a broadcast receiver that
 you registered with <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c>
 or through the &lt;receiver&gt; tag in an AndroidManifest.xml file.

 </para>
          <para tool="javadoc-to-mdoc">
 Alarm intents are delivered with a data extra of type int called
 <c><see cref="F:Android.Content.Intent.ExtraAlarmCount" /></c> that indicates
 how many past alarm events have been accumulated into this intent
 broadcast.  Recurring alarms that have gone undelivered because the
 phone was asleep may have a count greater than one when delivered.  

 <format type="text/html"><b>Note:</b></format> Beginning in API 19, the trigger time passed to this method
 is treated as inexact: the alarm will not be delivered before this time, but
 may be deferred and delivered some time later.  The OS will use
 this policy in order to "batch" alarms together across the entire system,
 minimizing the number of times the device needs to "wake up" and minimizing
 battery use.  In general, alarms scheduled in the near future will not
 be deferred as long as alarms scheduled far in the future.

 
 With the new batching policy, delivery ordering guarantees are not as
 strong as they were previously.  If the application sets multiple alarms,
 it is possible that these alarms' <i>actual</i> delivery ordering may not match
 the order of their <i>requested</i> delivery times.  If your application has
 strong ordering requirements there are other APIs that you can use to get
 the necessary behavior; see <c><see cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>
 and <c><see cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.Int64)" /></c>.

 
 Applications whose <c>targetSdkVersion</c> is before API 19 will
 continue to get the previous alarm behavior: all of their scheduled alarms
 will be treated as exact.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#set(int, long, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetAlarmClock">
      <MemberSignature Language="C#" Value="public virtual void SetAlarmClock (Android.App.AlarmManager.AlarmClockInfo info, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAlarmClock(class Android.App.AlarmManager/AlarmClockInfo info, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAlarmClock", "(Landroid/app/AlarmManager$AlarmClockInfo;Landroid/app/PendingIntent;)V", "GetSetAlarmClock_Landroid_app_AlarmManager_AlarmClockInfo_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.App.AlarmManager+AlarmClockInfo" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="operation">Action to perform when the alarm goes off;
        typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>Schedule an alarm that represents an alarm clock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule an alarm that represents an alarm clock.

 The system may choose to display information about this alarm to the user.

 </para>
          <para tool="javadoc-to-mdoc">
 This method is like <c><see cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.Int64)" /></c>, but implies
 <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setAlarmClock(android.app.AlarmManager.AlarmClockInfo, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="P:Android.App.AlarmManager.NextAlarmClock" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetExact">
      <MemberSignature Language="C#" Value="public virtual void SetExact (Android.App.AlarmType type, long triggerAtMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExact(valuetype Android.App.AlarmType type, int64 triggerAtMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setExact", "(IJLandroid/app/PendingIntent;)V", "GetSetExact_IJLandroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">One of <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME" /></c>, <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME_WAKEUP" /></c>,
        <c><see cref="!:Android.App.AlarmManager.RTC" /></c>, or <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should go
        off, using the appropriate clock (depending on the alarm type).</param>
        <param name="operation">Action to perform when the alarm goes off;
        typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>Schedule an alarm to be delivered precisely at the stated time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule an alarm to be delivered precisely at the stated time.

 </para>
          <para tool="javadoc-to-mdoc">
 This method is like <c><see cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,System.Int64)" /></c>, but does not permit
 the OS to adjust the delivery time.  The alarm will be delivered as nearly as
 possible to the requested trigger time.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Note:</b>
            </format> only alarms for which there is a strong demand for exact-time
 delivery (such as an alarm clock ringing at the requested time) should be
 scheduled as exact.  Applications are strongly discouraged from using exact
 alarms unnecessarily as they reduce the OS's ability to minimize battery use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setExact(int, long, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetInexactRepeating">
      <MemberSignature Language="C#" Value="public virtual void SetInexactRepeating (Android.App.AlarmType type, long triggerAtMillis, long intervalMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInexactRepeating(valuetype Android.App.AlarmType type, int64 triggerAtMillis, int64 intervalMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInexactRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetInexactRepeating_IJJLandroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtTime" Type="System.Int64" />
        <Parameter Name="interval" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">One of <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME" /></c>, <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME_WAKEUP" /></c>,
        <c><see cref="!:Android.App.AlarmManager.RTC" /></c>, or <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should first
 go off, using the appropriate clock (depending on the alarm type).  This
 is inexact: the alarm will not fire before this time, but there may be a
 delay of almost an entire alarm interval before the first invocation of
 the alarm.</param>
        <param name="intervalMillis">interval in milliseconds between subsequent repeats
 of the alarm.  Prior to API 19, if this is one of INTERVAL_FIFTEEN_MINUTES,
 INTERVAL_HALF_HOUR, INTERVAL_HOUR, INTERVAL_HALF_DAY, or INTERVAL_DAY
 then the alarm will be phase-aligned with other alarms to reduce the
 number of wakeups.  Otherwise, the alarm will be set as though the
 application had called <c><see cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>.  As of API 19, all repeating
 alarms will be inexact and subject to batching with other alarms regardless
 of their stated repeat interval.</param>
        <param name="operation">Action to perform when the alarm goes off;
 typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>Schedule a repeating alarm that has inexact trigger time requirements;
 for example, an alarm that repeats every hour, but not necessarily at
 the top of every hour.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a repeating alarm that has inexact trigger time requirements;
 for example, an alarm that repeats every hour, but not necessarily at
 the top of every hour.  These alarms are more power-efficient than
 the strict recurrences traditionally supplied by <c><see cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c>, since the
 system can adjust alarms' delivery times to cause them to fire simultaneously,
 avoiding waking the device from sleep more than necessary.

 </para>
          <para tool="javadoc-to-mdoc">Your alarm's first trigger will not be before the requested time,
 but it might not occur for almost a full interval after that time.  In
 addition, while the overall period of the repeating alarm will be as
 requested, the time between any two successive firings of the alarm
 may vary.  If your application demands very low jitter, use
 one-shot alarms with an appropriate window instead; see <c><see cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType,System.Int64,System.Int64,System.Int64)" /></c> and
 <c><see cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.Int64)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 As of API 19, all repeating alarms are inexact.  Because this method has
 been available since API 3, your application can safely call it and be
 assured that it will get similar behavior on both current and older versions
 of Android.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setInexactRepeating(int, long, long, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
        <altmember cref="F:Android.App.AlarmManager.IntervalFifteenMinutes" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHalfHour" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHour" />
        <altmember cref="F:Android.App.AlarmManager.IntervalHalfDay" />
        <altmember cref="F:Android.App.AlarmManager.IntervalDay" />
      </Docs>
    </Member>
    <Member MemberName="SetRepeating">
      <MemberSignature Language="C#" Value="public virtual void SetRepeating (Android.App.AlarmType type, long triggerAtMillis, long intervalMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRepeating(valuetype Android.App.AlarmType type, int64 triggerAtMillis, int64 intervalMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRepeating", "(IJJLandroid/app/PendingIntent;)V", "GetSetRepeating_IJJLandroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="triggerAtTime" Type="System.Int64" />
        <Parameter Name="interval" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">One of <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME" /></c>, <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME_WAKEUP" /></c>,
        <c><see cref="!:Android.App.AlarmManager.RTC" /></c>, or <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</param>
        <param name="triggerAtMillis">time in milliseconds that the alarm should first
 go off, using the appropriate clock (depending on the alarm type).</param>
        <param name="intervalMillis">interval in milliseconds between subsequent repeats
 of the alarm.</param>
        <param name="operation">Action to perform when the alarm goes off;
 typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>Schedule a repeating alarm.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a repeating alarm.  <format type="text/html"><b>Note: for timing operations (ticks,
 timeouts, etc) it is easier and much more efficient to use
 <c><see cref="T:Android.OS.Handler" /></c>.</b></format>  If there is already an alarm scheduled
 for the same IntentSender, it will first be canceled.

 </para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,System.Int64)" /></c>, except you can also supply a period at which
 the alarm will automatically repeat.  This alarm continues
 repeating until explicitly removed with <c><see cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" /></c>.  If the stated
 trigger time is in the past, the alarm will be triggered immediately, with an
 alarm count depending on how far in the past the trigger time is relative
 to the repeat interval.

 </para>
          <para tool="javadoc-to-mdoc">If an alarm is delayed (by system sleep, for example, for non
 _WAKEUP alarm types), a skipped repeat will be delivered as soon as
 possible.  After that, future alarms will be delivered according to the
 original schedule; they do not drift over time.  For example, if you have
 set a recurring alarm for the top of every hour but the phone was asleep
 from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens,
 then the next alarm will be sent at 9:00.
 
 </para>
          <para tool="javadoc-to-mdoc">If your application wants to allow the delivery times to drift in 
 order to guarantee that at least a certain time interval always elapses
 between alarms, then the approach to take is to use one-time alarms, 
 scheduling the next one yourself when handling each alarm delivery.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <b>Note:</b>
            </format> as of API 19, all repeating alarms are inexact.  If your
 application needs precise delivery times then it must use one-time
 exact alarms, rescheduling each time as described above. Legacy applications
 whose <c>targetSdkVersion</c> is earlier than API 19 will continue to have all
 of their alarms, including repeating alarms, treated as exact.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setRepeating(int, long, long, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.Handler" />
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetWindow(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetTime">
      <MemberSignature Language="C#" Value="public virtual void SetTime (long millis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTime(int64 millis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTime", "(J)V", "GetSetTime_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="millis">time in milliseconds since the Epoch
</param>
        <summary>Set the system wall clock time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the system wall clock time.
 Requires the permission android.permission.SET_TIME.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setTime(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetTimeZone">
      <MemberSignature Language="C#" Value="public virtual void SetTimeZone (string timeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTimeZone(string timeZone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTimeZone", "(Ljava/lang/String;)V", "GetSetTimeZone_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeZone" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timeZone">one of the Olson ids from the list returned by
     <c><see cref="M:Java.Util.TimeZone.GetAvailableIDs" /></c></param>
        <summary>Sets the system's persistent default time zone.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the system's persistent default time zone. This is the time zone for all apps, even
 after a reboot. Use <c><see cref="P:Java.Util.TimeZone.Default" /></c> if you just want to change the
 time zone within your app, and even then prefer to pass an explicit
 <c><see cref="T:Java.Util.TimeZone" /></c> to APIs that require it rather than changing the time zone for
 all threads.

 </para>
          <para tool="javadoc-to-mdoc"> On android M and above, it is an error to pass in a non-Olson timezone to this
 function. Note that this is a bad idea on all Android releases because POSIX and
 the <c>TimeZone</c> class have opposite interpretations of <c>'+'</c> and <c>'-'</c>
 in the same non-Olson ID.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setTimeZone(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWindow">
      <MemberSignature Language="C#" Value="public virtual void SetWindow (Android.App.AlarmType type, long windowStartMillis, long windowLengthMillis, Android.App.PendingIntent operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWindow(valuetype Android.App.AlarmType type, int64 windowStartMillis, int64 windowLengthMillis, class Android.App.PendingIntent operation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWindow", "(IJJLandroid/app/PendingIntent;)V", "GetSetWindow_IJJLandroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.App.AlarmType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="windowStartMillis" Type="System.Int64" />
        <Parameter Name="windowLengthMillis" Type="System.Int64" />
        <Parameter Name="operation" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="type">One of <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME" /></c>, <c><see cref="!:Android.App.AlarmManager.ELAPSED_REALTIME_WAKEUP" /></c>,
        <c><see cref="!:Android.App.AlarmManager.RTC" /></c>, or <c><see cref="!:Android.App.AlarmManager.RTC_WAKEUP" /></c>.</param>
        <param name="windowStartMillis">The earliest time, in milliseconds, that the alarm should
        be delivered, expressed in the appropriate clock's units (depending on the alarm
        type).</param>
        <param name="windowLengthMillis">The length of the requested delivery window,
        in milliseconds.  The alarm will be delivered no later than this many
        milliseconds after <c>windowStartMillis</c>.  Note that this parameter
        is a <format type="text/html"><i>duration,</i></format> not the timestamp of the end of the window.</param>
        <param name="operation">Action to perform when the alarm goes off;
        typically comes from <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</param>
        <summary>Schedule an alarm to be delivered within a given window of time.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule an alarm to be delivered within a given window of time.  This method
 is similar to <c><see cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,System.Int64)" /></c>, but allows the
 application to precisely control the degree to which its delivery might be
 adjusted by the OS. This method allows an application to take advantage of the
 battery optimizations that arise from delivery batching even when it has
 modest timeliness requirements for its alarms.

 </para>
          <para tool="javadoc-to-mdoc">
 This method can also be used to achieve strict ordering guarantees among
 multiple alarms by ensuring that the windows requested for each alarm do
 not intersect.

 </para>
          <para tool="javadoc-to-mdoc">
 When precise delivery is not required, applications should use the standard
 <c><see cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType,System.Int64,System.Int64)" /></c> method.  This will give the OS the most
 flexibility to minimize wakeups and battery use.  For alarms that must be delivered
 at precisely-specified times with no acceptable variation, applications can use
 <c><see cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType,System.Int64,System.Int64)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/AlarmManager.html#setWindow(int, long, long, android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.AlarmManager.Set(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetExact(Android.App.AlarmType, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.SetRepeating(Android.App.AlarmType, System.Int64, System.Int64, System.Int64)" />
        <altmember cref="M:Android.App.AlarmManager.Cancel(Android.App.PendingIntent)" />
        <altmember cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" />
        <altmember cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver, Android.Content.IntentFilter)" />
        <altmember cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
