<Type Name="StartCommandResult" FullName="Android.App.StartCommandResult">
  <TypeSignature Language="C#" Value="public enum StartCommandResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed StartCommandResult extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates values returned by  several types.</summary>
    <remarks>Enumerates value returned by the following: <list type="bullet"><item><term><see cref="F:Android.App.Service.OnStartCommand" /></term></item><item><term><see cref="F:Android.App.StartCommandResult.ContinuationMask" /></term></item><item><term><see cref="F:Android.App.StartCommandResult.NotSticky" /></term></item><item><term><see cref="F:Android.App.StartCommandResult.RedeliverIntent" /></term></item><item><term><see cref="F:Android.App.StartCommandResult.Sticky" /></term></item><item><term><see cref="F:Android.App.StartCommandResult.StickyCompatibility" /></term></item><item><term><see cref="F:Android.Locations.SettingInjectorService.OnStartCommand" /></term></item></list>
.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContinuationMask">
      <MemberSignature Language="C#" Value="ContinuationMask" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.StartCommandResult ContinuationMask = int32(15)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Bits returned by <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c> describing how to continue
 the service if it is killed.  May be <c><see cref="F:Android.App.StartCommandResult.Sticky" /></c>,
 <c><see cref="F:Android.App.StartCommandResult.NotSticky" /></c>, <c><see cref="F:Android.App.StartCommandResult.RedeliverIntent" /></c>,
 or <c><see cref="F:Android.App.StartCommandResult.StickyCompatibility" /></c>.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NotSticky">
      <MemberSignature Language="C#" Value="NotSticky" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.StartCommandResult NotSticky = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
            <c>
              <see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" />
            </c>
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
          </para>
          <para tool="javadoc-to-mdoc">This mode makes sense for things that want to do some work as a
 result of being started, but can be stopped when under memory pressure
 and will explicit start themselves again later to do more work.  An
 example of such a service would be one that polls for data from
 a server: it could schedule an alarm to poll every N minutes by having
 the alarm start its service.  When its <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c> is
 called from the alarm, it schedules a new alarm for N minutes later,
 and spawns a thread to do its networking.  If its process is killed
 while doing that check, the service will not be restarted until the
 alarm goes off.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RedeliverIntent">
      <MemberSignature Language="C#" Value="RedeliverIntent" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.StartCommandResult RedeliverIntent = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Constant to return from <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>: if this service's
 process is killed while it is started (after returning from
 <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>), then it will be scheduled for a restart
 and the last delivered Intent re-delivered to it again via
 <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>.  This Intent will remain scheduled for
 redelivery until the service calls <c><see cref="M:Android.App.Service.StopSelf(System.Int32)" /></c> with the
 start ID provided to <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>.  The
 service will not receive a <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>
 call with a null Intent because it will will only be re-started if
 it is not finished processing all Intents sent to it (and any such
 pending events will be delivered at the point of restart).
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Sticky">
      <MemberSignature Language="C#" Value="Sticky" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.StartCommandResult Sticky = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
            <c>
              <see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" />
            </c>
          </para>
          <para tool="javadoc-to-mdoc">This mode makes sense for things that will be explicitly started
 and stopped to run for arbitrary periods of time, such as a service
 performing background music playback.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="StickyCompatibility">
      <MemberSignature Language="C#" Value="StickyCompatibility" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.StartCommandResult StickyCompatibility = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.StartCommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Constant to return from <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c>: compatibility
 version of <c><see cref="F:Android.App.StartCommandResult.Sticky" /></c> that does not guarantee that
 <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c> will be called again after being killed.
</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
