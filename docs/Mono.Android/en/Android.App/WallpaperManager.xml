<Type Name="WallpaperManager" FullName="Android.App.WallpaperManager">
  <TypeSignature Language="VB.NET" Value="Public Class WallpaperManager&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class WallpaperManager : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class WallpaperManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WallpaperManager extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.App.WallpaperManager" />
  <TypeSignature Language="F#" Value="type WallpaperManager = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/app/WallpaperManager", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/app/WallpaperManager", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="5">
    <summary>Provides access to the system wallpaper.</summary>
    <remarks>
      <para>Provides access to the system wallpaper. With WallpaperManager, you can
            get the current wallpaper, get the desired dimensions for the wallpaper, set
            the wallpaper, and more.</para>
      <para>An app can check whether wallpapers are supported for the current user, by calling
            <c>#isWallpaperSupported()</c>, and whether setting of wallpapers is allowed, by calling
            <c>#isSetWallpaperAllowed()</c>.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/app/WallpaperManager" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 5" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WallpaperManager(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected WallpaperManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.App.WallpaperManager : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.App.WallpaperManager" Usage="new Android.App.WallpaperManager (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionChangeLiveWallpaper">
      <MemberSignature Language="VB.NET" Value="Public Const ActionChangeLiveWallpaper As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ActionChangeLiveWallpaper;" />
      <MemberSignature Language="C#" Value="public const string ActionChangeLiveWallpaper;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionChangeLiveWallpaper" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.ActionChangeLiveWallpaper" />
      <MemberSignature Language="F#" Value="val mutable ActionChangeLiveWallpaper : string" Usage="Android.App.WallpaperManager.ActionChangeLiveWallpaper" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ACTION_CHANGE_LIVE_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ACTION_CHANGE_LIVE_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Directly launch live wallpaper preview, allowing the user to immediately
            confirm to switch to a specific live wallpaper.</summary>
        <remarks>
          <para>Directly launch live wallpaper preview, allowing the user to immediately
            confirm to switch to a specific live wallpaper.  You must specify
            <c>#EXTRA_LIVE_WALLPAPER_COMPONENT</c> with the ComponentName of
            a live wallpaper component that is to be shown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#ACTION_CHANGE_LIVE_WALLPAPER" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ActionCropAndSetWallpaper">
      <MemberSignature Language="VB.NET" Value="Public Const ActionCropAndSetWallpaper As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ActionCropAndSetWallpaper;" />
      <MemberSignature Language="C#" Value="public const string ActionCropAndSetWallpaper;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionCropAndSetWallpaper" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.ActionCropAndSetWallpaper" />
      <MemberSignature Language="F#" Value="val mutable ActionCropAndSetWallpaper : string" Usage="Android.App.WallpaperManager.ActionCropAndSetWallpaper" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ACTION_CROP_AND_SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ACTION_CROP_AND_SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity Action: Show settings for choosing wallpaper.</summary>
        <remarks>
          <para>Activity Action: Show settings for choosing wallpaper. Do not use directly to construct
            an intent; instead, use <c>#getCropAndSetWallpaperIntent</c>.</para>
          <para>Input:  <c>Intent#getData</c> is the URI of the image to crop and set as wallpaper.</para>
          <para>Output: RESULT_OK if user decided to crop/set the wallpaper, RESULT_CANCEL otherwise
            Activities that support this intent should specify a MIME filter of "image/*"</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#ACTION_CROP_AND_SET_WALLPAPER" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.ACTION_CROP_AND_SET_WALLPAPER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionLiveWallpaperChooser">
      <MemberSignature Language="VB.NET" Value="Public Const ActionLiveWallpaperChooser As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ActionLiveWallpaperChooser;" />
      <MemberSignature Language="C#" Value="public const string ActionLiveWallpaperChooser;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionLiveWallpaperChooser" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.ActionLiveWallpaperChooser" />
      <MemberSignature Language="F#" Value="val mutable ActionLiveWallpaperChooser : string" Usage="Android.App.WallpaperManager.ActionLiveWallpaperChooser" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("ACTION_LIVE_WALLPAPER_CHOOSER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("ACTION_LIVE_WALLPAPER_CHOOSER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Launch an activity for the user to pick the current global live
            wallpaper.</summary>
        <remarks>
          <para>Launch an activity for the user to pick the current global live
            wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#ACTION_LIVE_WALLPAPER_CHOOSER" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.ACTION_LIVE_WALLPAPER_CHOOSER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="AddOnColorsChangedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddOnColorsChangedListener (listener As WallpaperManager.IOnColorsChangedListener, handler As Handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddOnColorsChangedListener(Android::App::WallpaperManager::IOnColorsChangedListener ^ listener, Android::OS::Handler ^ handler);" />
      <MemberSignature Language="C#" Value="public virtual void AddOnColorsChangedListener (Android.App.WallpaperManager.IOnColorsChangedListener listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOnColorsChangedListener(class Android.App.WallpaperManager/IOnColorsChangedListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.AddOnColorsChangedListener(Android.App.WallpaperManager.IOnColorsChangedListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="abstract member AddOnColorsChangedListener : Android.App.WallpaperManager.IOnColorsChangedListener * Android.OS.Handler -&gt; unit&#xA;override this.AddOnColorsChangedListener : Android.App.WallpaperManager.IOnColorsChangedListener * Android.OS.Handler -&gt; unit" Usage="wallpaperManager.AddOnColorsChangedListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addOnColorsChangedListener", "(Landroid/app/WallpaperManager$OnColorsChangedListener;Landroid/os/Handler;)V", "GetAddOnColorsChangedListener_Landroid_app_WallpaperManager_OnColorsChangedListener_Landroid_os_Handler_Handler", ApiSince=27)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addOnColorsChangedListener", "(Landroid/app/WallpaperManager$OnColorsChangedListener;Landroid/os/Handler;)V", "GetAddOnColorsChangedListener_Landroid_app_WallpaperManager_OnColorsChangedListener_Landroid_os_Handler_Handler", ApiSince=27)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.App.WallpaperManager+IOnColorsChangedListener" />
        <Parameter Name="handler" Type="Android.OS.Handler">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuiltInDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BuiltInDrawable As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Graphics::Drawables::Drawable ^ BuiltInDrawable { Android::Graphics::Drawables::Drawable ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? BuiltInDrawable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Drawables.Drawable BuiltInDrawable" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.BuiltInDrawable" />
      <MemberSignature Language="F#" Value="member this.BuiltInDrawable : Android.Graphics.Drawables.Drawable" Usage="Android.App.WallpaperManager.BuiltInDrawable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getBuiltInDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getBuiltInDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtain a drawable for the built-in static system wallpaper.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Obtain a drawable for the built-in static system wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getBuiltInDrawable()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getBuiltInDrawable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.Clear" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="wallpaperManager.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clear", "()V", "GetClearHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clear", "()V", "GetClearHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove any currently set system wallpaper, reverting to the system's built-in
            wallpaper.</summary>
        <remarks>
          <para>Remove any currently set system wallpaper, reverting to the system's built-in
            wallpaper. On success, the intent <c>Intent#ACTION_WALLPAPER_CHANGED</c>
            is broadcast.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#clear()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.clear()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">If an error occurs reverting to the built-in
 wallpaper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear (which As WallpaperManagerFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual void Clear (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.Clear(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member Clear : Android.App.WallpaperManagerFlags -&gt; unit&#xA;override this.Clear : Android.App.WallpaperManagerFlags -&gt; unit" Usage="wallpaperManager.Clear which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clear", "(I)V", "GetClear_IHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clear", "(I)V", "GetClear_IHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">A bitwise combination of <c>#FLAG_SYSTEM</c> or
              <c>#FLAG_LOCK</c></param>
        <summary>Remove one or more currently set wallpapers, reverting to the system default
            display for each one.</summary>
        <remarks>
          <para>Remove one or more currently set wallpapers, reverting to the system default
            display for each one.  If <c>#FLAG_SYSTEM</c> is set in the <c>which</c>
            parameter, the intent <c>Intent#ACTION_WALLPAPER_CHANGED</c> will be broadcast
            upon success.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#clear(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.clear(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearWallpaper">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearWallpaper ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearWallpaper();" />
      <MemberSignature Language="C#" Value="public virtual void ClearWallpaper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearWallpaper() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.ClearWallpaper" />
      <MemberSignature Language="F#" Value="abstract member ClearWallpaper : unit -&gt; unit&#xA;override this.ClearWallpaper : unit -&gt; unit" Usage="wallpaperManager.ClearWallpaper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearWallpaper", "()V", "GetClearWallpaperHandler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearWallpaper", "()V", "GetClearWallpaperHandler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset all wallpaper to the factory default.</summary>
        <remarks>
          <para>Reset all wallpaper to the factory default.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#clearWallpaper()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.clearWallpaper()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearWallpaperOffsets">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ClearWallpaperOffsets (windowToken As IBinder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearWallpaperOffsets(Android::OS::IBinder ^ windowToken);" />
      <MemberSignature Language="C#" Value="public virtual void ClearWallpaperOffsets (Android.OS.IBinder? windowToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearWallpaperOffsets(class Android.OS.IBinder windowToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.ClearWallpaperOffsets(Android.OS.IBinder)" />
      <MemberSignature Language="F#" Value="abstract member ClearWallpaperOffsets : Android.OS.IBinder -&gt; unit&#xA;override this.ClearWallpaperOffsets : Android.OS.IBinder -&gt; unit" Usage="wallpaperManager.ClearWallpaperOffsets windowToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearWallpaperOffsets", "(Landroid/os/IBinder;)V", "GetClearWallpaperOffsets_Landroid_os_IBinder_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearWallpaperOffsets", "(Landroid/os/IBinder;)V", "GetClearWallpaperOffsets_Landroid_os_IBinder_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowToken" Type="Android.OS.IBinder" />
      </Parameters>
      <Docs>
        <param name="windowToken">The window who these offsets should be associated
            with, as returned by <c>android.view.View#getWindowToken()
            View.getWindowToken()</c>.</param>
        <summary>Clear the offsets previously associated with this window through
            <c>#setWallpaperOffsets(IBinder, float, float)</c>.</summary>
        <remarks>
          <para>Clear the offsets previously associated with this window through
            <c>#setWallpaperOffsets(IBinder, float, float)</c>.  This reverts
            the window to its default state, where it does not cause the wallpaper
            to scroll from whatever its last offsets were.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#clearWallpaperOffsets(android.os.IBinder)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.clearWallpaperOffsets(android.os.IBinder)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ColorsChanged">
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColorsChanged As EventHandler(Of WallpaperManager.ColorsChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Android::App::WallpaperManager::ColorsChangedEventArgs ^&gt; ^ ColorsChanged;" />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.App.WallpaperManager.ColorsChangedEventArgs&gt; ColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.App.WallpaperManager/ColorsChangedEventArgs&gt; ColorsChanged" />
      <MemberSignature Language="DocId" Value="E:Android.App.WallpaperManager.ColorsChanged" />
      <MemberSignature Language="F#" Value="member this.ColorsChanged : EventHandler&lt;Android.App.WallpaperManager.ColorsChangedEventArgs&gt; " Usage="member this.ColorsChanged : System.EventHandler&lt;Android.App.WallpaperManager.ColorsChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[add: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;add: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[remove: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;remove: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.App.WallpaperManager+ColorsChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandDrop">
      <MemberSignature Language="VB.NET" Value="Public Const CommandDrop As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ CommandDrop;" />
      <MemberSignature Language="C#" Value="public const string CommandDrop;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CommandDrop" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.CommandDrop" />
      <MemberSignature Language="F#" Value="val mutable CommandDrop : string" Usage="Android.App.WallpaperManager.CommandDrop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("COMMAND_DROP")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("COMMAND_DROP")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user drops an object into an area of the host.</summary>
        <remarks>
          <para>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user drops an object into an area of the host.  The x
            and y arguments are the location of the drop.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#COMMAND_DROP" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.COMMAND_DROP</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="CommandSecondaryTap">
      <MemberSignature Language="VB.NET" Value="Public Const CommandSecondaryTap As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ CommandSecondaryTap;" />
      <MemberSignature Language="C#" Value="public const string CommandSecondaryTap;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CommandSecondaryTap" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.CommandSecondaryTap" />
      <MemberSignature Language="F#" Value="val mutable CommandSecondaryTap : string" Usage="Android.App.WallpaperManager.CommandSecondaryTap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("COMMAND_SECONDARY_TAP")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("COMMAND_SECONDARY_TAP")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user releases a secondary pointer on an empty area
            (not performing an action in the host).</summary>
        <remarks>
          <para>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user releases a secondary pointer on an empty area
            (not performing an action in the host).  The x and y arguments are
            the location of the secondary tap in screen coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#COMMAND_SECONDARY_TAP" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.COMMAND_SECONDARY_TAP</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CommandTap">
      <MemberSignature Language="VB.NET" Value="Public Const CommandTap As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ CommandTap;" />
      <MemberSignature Language="C#" Value="public const string CommandTap;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CommandTap" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.CommandTap" />
      <MemberSignature Language="F#" Value="val mutable CommandTap : string" Usage="Android.App.WallpaperManager.CommandTap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("COMMAND_TAP")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("COMMAND_TAP")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user taps on an empty area (not performing an action
            in the host).</summary>
        <remarks>
          <para>Command for <c>#sendWallpaperCommand</c>: reported by the wallpaper
            host when the user taps on an empty area (not performing an action
            in the host).  The x and y arguments are the location of the tap in
            screen coordinates.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#COMMAND_TAP" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.COMMAND_TAP</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="DesiredMinimumHeight">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DesiredMinimumHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DesiredMinimumHeight { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int DesiredMinimumHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DesiredMinimumHeight" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.DesiredMinimumHeight" />
      <MemberSignature Language="F#" Value="member this.DesiredMinimumHeight : int" Usage="Android.App.WallpaperManager.DesiredMinimumHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDesiredMinimumHeight", "()I", "GetGetDesiredMinimumHeightHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDesiredMinimumHeight", "()I", "GetGetDesiredMinimumHeightHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the desired minimum height for the wallpaper.</summary>
        <value>The desired minimum height for the wallpaper. This value should
            be honored by applications that set the wallpaper but it is not
            mandatory.</value>
        <remarks>
          <para>Returns the desired minimum height for the wallpaper. Callers of
            <c>#setBitmap(android.graphics.Bitmap)</c> or
            <c>#setStream(java.io.InputStream)</c> should check this value
            beforehand to make sure the supplied wallpaper respects the desired
            minimum height.
            
            If the returned value is &lt;= 0, the caller should use the height of
            the default display instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getDesiredMinimumHeight()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getDesiredMinimumHeight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="DesiredMinimumWidth">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DesiredMinimumWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DesiredMinimumWidth { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int DesiredMinimumWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DesiredMinimumWidth" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.DesiredMinimumWidth" />
      <MemberSignature Language="F#" Value="member this.DesiredMinimumWidth : int" Usage="Android.App.WallpaperManager.DesiredMinimumWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDesiredMinimumWidth", "()I", "GetGetDesiredMinimumWidthHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDesiredMinimumWidth", "()I", "GetGetDesiredMinimumWidthHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the desired minimum width for the wallpaper.</summary>
        <value>The desired minimum width for the wallpaper. This value should
            be honored by applications that set the wallpaper but it is not
            mandatory.</value>
        <remarks>
          <para>Returns the desired minimum width for the wallpaper. Callers of
            <c>#setBitmap(android.graphics.Bitmap)</c> or
            <c>#setStream(java.io.InputStream)</c> should check this value
            beforehand to make sure the supplied wallpaper respects the desired
            minimum width.
            
            If the returned value is &lt;= 0, the caller should use the width of
            the default display instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getDesiredMinimumWidth()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getDesiredMinimumWidth()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="Drawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Drawable As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Graphics::Drawables::Drawable ^ Drawable { Android::Graphics::Drawables::Drawable ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? Drawable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Drawables.Drawable Drawable" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.Drawable" />
      <MemberSignature Language="F#" Value="member this.Drawable : Android.Graphics.Drawables.Drawable" Usage="Android.App.WallpaperManager.Drawable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetDrawableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetDrawableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <value>A Drawable object for the requested wallpaper.</value>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getDrawable()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getDrawable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ExtraLiveWallpaperComponent">
      <MemberSignature Language="VB.NET" Value="Public Const ExtraLiveWallpaperComponent As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ ExtraLiveWallpaperComponent;" />
      <MemberSignature Language="C#" Value="public const string ExtraLiveWallpaperComponent;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraLiveWallpaperComponent" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.ExtraLiveWallpaperComponent" />
      <MemberSignature Language="F#" Value="val mutable ExtraLiveWallpaperComponent : string" Usage="Android.App.WallpaperManager.ExtraLiveWallpaperComponent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("EXTRA_LIVE_WALLPAPER_COMPONENT")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("EXTRA_LIVE_WALLPAPER_COMPONENT")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra in <c>#ACTION_CHANGE_LIVE_WALLPAPER</c> that specifies the
            ComponentName of a live wallpaper that should be shown as a preview,
            for the user to confirm.</summary>
        <remarks>
          <para>Extra in <c>#ACTION_CHANGE_LIVE_WALLPAPER</c> that specifies the
            ComponentName of a live wallpaper that should be shown as a preview,
            for the user to confirm.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#EXTRA_LIVE_WALLPAPER_COMPONENT" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FastDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FastDrawable As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::Graphics::Drawables::Drawable ^ FastDrawable { Android::Graphics::Drawables::Drawable ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? FastDrawable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Drawables.Drawable FastDrawable" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.FastDrawable" />
      <MemberSignature Language="F#" Value="member this.FastDrawable : Android.Graphics.Drawables.Drawable" Usage="Android.App.WallpaperManager.FastDrawable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFastDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetFastDrawableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFastDrawable", "()Landroid/graphics/drawable/Drawable;", "GetGetFastDrawableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <value>A Drawable object for the requested wallpaper.</value>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getFastDrawable()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getFastDrawable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="FlagLock">
      <MemberSignature Language="VB.NET" Value="Public Const FlagLock As WallpaperManagerFlags  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: Android::App::WallpaperManagerFlags FlagLock = 2;" />
      <MemberSignature Language="C#" Value="public const Android.App.WallpaperManagerFlags FlagLock = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.WallpaperManagerFlags FlagLock = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.FlagLock" />
      <MemberSignature Language="F#" Value="val mutable FlagLock : Android.App.WallpaperManagerFlags" Usage="Android.App.WallpaperManager.FlagLock" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FLAG_LOCK", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FLAG_LOCK", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.WallpaperManagerFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.WallpaperManagerFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Flag: set or retrieve the lock-screen-specific wallpaper.</summary>
        <remarks>
          <para>Flag: set or retrieve the lock-screen-specific wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#FLAG_LOCK" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.FLAG_LOCK</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagSystem">
      <MemberSignature Language="VB.NET" Value="Public Const FlagSystem As WallpaperManagerFlags  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: Android::App::WallpaperManagerFlags FlagSystem = 1;" />
      <MemberSignature Language="C#" Value="public const Android.App.WallpaperManagerFlags FlagSystem = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.WallpaperManagerFlags FlagSystem = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.FlagSystem" />
      <MemberSignature Language="F#" Value="val mutable FlagSystem : Android.App.WallpaperManagerFlags" Usage="Android.App.WallpaperManager.FlagSystem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FLAG_SYSTEM", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FLAG_SYSTEM", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.WallpaperManagerFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.WallpaperManagerFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperManagerFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag: set or retrieve the general system wallpaper.</summary>
        <remarks>
          <para>Flag: set or retrieve the general system wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#FLAG_SYSTEM" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.FLAG_SYSTEM</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForgetLoadedWallpaper">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ForgetLoadedWallpaper ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ForgetLoadedWallpaper();" />
      <MemberSignature Language="C#" Value="public virtual void ForgetLoadedWallpaper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForgetLoadedWallpaper() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.ForgetLoadedWallpaper" />
      <MemberSignature Language="F#" Value="abstract member ForgetLoadedWallpaper : unit -&gt; unit&#xA;override this.ForgetLoadedWallpaper : unit -&gt; unit" Usage="wallpaperManager.ForgetLoadedWallpaper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("forgetLoadedWallpaper", "()V", "GetForgetLoadedWallpaperHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("forgetLoadedWallpaper", "()V", "GetForgetLoadedWallpaperHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove all internal references to the last loaded wallpaper.</summary>
        <remarks>
          <para>Remove all internal references to the last loaded wallpaper.  Useful
            for apps that want to reduce memory usage when they only temporarily
            need to have the wallpaper.  After calling, the next request for the
            wallpaper will require reloading it again from disk.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#forgetLoadedWallpaper()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.forgetLoadedWallpaper()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="GetBuiltInDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBuiltInDrawable (which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ GetBuiltInDrawable(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? GetBuiltInDrawable (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable GetBuiltInDrawable(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetBuiltInDrawable(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetBuiltInDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.GetBuiltInDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.GetBuiltInDrawable which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBuiltInDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBuiltInDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type.  Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>Obtain a drawable for the specified built-in static system wallpaper.</summary>
        <returns>A Drawable presenting the specified wallpaper image, or <c>null</c>
                if no built-in default image for that wallpaper type exists.</returns>
        <remarks>
          <para>Obtain a drawable for the specified built-in static system wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getBuiltInDrawable(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getBuiltInDrawable(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuiltInDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBuiltInDrawable (outWidth As Integer, outHeight As Integer, scaleToFit As Boolean, horizontalAlignment As Single, verticalAlignment As Single) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ GetBuiltInDrawable(int outWidth, int outHeight, bool scaleToFit, float horizontalAlignment, float verticalAlignment);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? GetBuiltInDrawable (int outWidth, int outHeight, bool scaleToFit, float horizontalAlignment, float verticalAlignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable GetBuiltInDrawable(int32 outWidth, int32 outHeight, bool scaleToFit, float32 horizontalAlignment, float32 verticalAlignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetBuiltInDrawable(System.Int32,System.Int32,System.Boolean,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member GetBuiltInDrawable : int * int * bool * single * single -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.GetBuiltInDrawable : int * int * bool * single * single -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.GetBuiltInDrawable (outWidth, outHeight, scaleToFit, horizontalAlignment, verticalAlignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBuiltInDrawable", "(IIZFF)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IIZFFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBuiltInDrawable", "(IIZFF)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IIZFFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outWidth" Type="System.Int32" />
        <Parameter Name="outHeight" Type="System.Int32" />
        <Parameter Name="scaleToFit" Type="System.Boolean" />
        <Parameter Name="horizontalAlignment" Type="System.Single" />
        <Parameter Name="verticalAlignment" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="outHeight">To be added.</param>
        <param name="outWidth">The height of the returned drawable</param>
        <param name="scaleToFit">If true, scale the wallpaper down rather than just cropping it</param>
        <param name="horizontalAlignment">A float value between 0 and 1 specifying where to crop the image;
                   0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned</param>
        <param name="verticalAlignment">A float value between 0 and 1 specifying where to crop the image;
                   0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned</param>
        <summary>Returns a drawable for the system built-in static wallpaper.</summary>
        <returns>A Drawable presenting the built-in default system wallpaper image,
                   or <c>null</c> if no such default image is defined on this device.</returns>
        <remarks>
          <para>Returns a drawable for the system built-in static wallpaper. Based on the parameters, the
            drawable can be cropped and scaled</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getBuiltInDrawable(int,%20int,%20boolean,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuiltInDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBuiltInDrawable (outWidth As Integer, outHeight As Integer, scaleToFit As Boolean, horizontalAlignment As Single, verticalAlignment As Single, which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ GetBuiltInDrawable(int outWidth, int outHeight, bool scaleToFit, float horizontalAlignment, float verticalAlignment, Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? GetBuiltInDrawable (int outWidth, int outHeight, bool scaleToFit, float horizontalAlignment, float verticalAlignment, Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable GetBuiltInDrawable(int32 outWidth, int32 outHeight, bool scaleToFit, float32 horizontalAlignment, float32 verticalAlignment, valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetBuiltInDrawable(System.Int32,System.Int32,System.Boolean,System.Single,System.Single,Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetBuiltInDrawable : int * int * bool * single * single * Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.GetBuiltInDrawable : int * int * bool * single * single * Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.GetBuiltInDrawable (outWidth, outHeight, scaleToFit, horizontalAlignment, verticalAlignment, which)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBuiltInDrawable", "(IIZFFI)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IIZFFIHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBuiltInDrawable", "(IIZFFI)Landroid/graphics/drawable/Drawable;", "GetGetBuiltInDrawable_IIZFFIHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outWidth" Type="System.Int32" />
        <Parameter Name="outHeight" Type="System.Int32" />
        <Parameter Name="scaleToFit" Type="System.Boolean" />
        <Parameter Name="horizontalAlignment" Type="System.Single" />
        <Parameter Name="verticalAlignment" Type="System.Single" />
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="outHeight">To be added.</param>
        <param name="outWidth">The height of the returned drawable</param>
        <param name="scaleToFit">If true, scale the wallpaper down rather than just cropping it</param>
        <param name="horizontalAlignment">A float value between 0 and 1 specifying where to crop the image;
                   0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned</param>
        <param name="verticalAlignment">A float value between 0 and 1 specifying where to crop the image;
                   0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned</param>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type.  Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>Returns a drawable for the built-in static wallpaper of the specified type.</summary>
        <returns>A Drawable presenting the built-in default wallpaper image of the given type,
                   or <c>null</c> if no default image of that type is defined on this device.</returns>
        <remarks>
          <para>Returns a drawable for the built-in static wallpaper of the specified type.  Based on the
            parameters, the drawable can be cropped and scaled.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getBuiltInDrawable(int,%20int,%20boolean,%20float,%20float,%20int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCropAndSetWallpaperIntent">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCropAndSetWallpaperIntent (imageUri As Uri) As Intent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Content::Intent ^ GetCropAndSetWallpaperIntent(Android::Net::Uri ^ imageUri);" />
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent? GetCropAndSetWallpaperIntent (Android.Net.Uri? imageUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Intent GetCropAndSetWallpaperIntent(class Android.Net.Uri imageUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetCropAndSetWallpaperIntent(Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="abstract member GetCropAndSetWallpaperIntent : Android.Net.Uri -&gt; Android.Content.Intent&#xA;override this.GetCropAndSetWallpaperIntent : Android.Net.Uri -&gt; Android.Content.Intent" Usage="wallpaperManager.GetCropAndSetWallpaperIntent imageUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCropAndSetWallpaperIntent", "(Landroid/net/Uri;)Landroid/content/Intent;", "GetGetCropAndSetWallpaperIntent_Landroid_net_Uri_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCropAndSetWallpaperIntent", "(Landroid/net/Uri;)Landroid/content/Intent;", "GetGetCropAndSetWallpaperIntent_Landroid_net_Uri_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageUri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="imageUri">The image URI that will be set in the intent. The must be a content
                            URI and its provider must resolve its type to "image/*"</param>
        <summary>Gets an Intent that will launch an activity that crops the given
            image and sets the device's wallpaper.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Gets an Intent that will launch an activity that crops the given
            image and sets the device's wallpaper. If there is a default HOME activity
            that supports cropping wallpapers, it will be preferred as the default.
            Use this method instead of directly creating a <c>#ACTION_CROP_AND_SET_WALLPAPER</c>
            intent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getCropAndSetWallpaperIntent(android.net.Uri)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getCropAndSetWallpaperIntent(android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the URI is not a content URI or its MIME type is
         not "image/*"
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDrawable (which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ GetDrawable(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? GetDrawable (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable GetDrawable(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetDrawable(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.GetDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.GetDrawable which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetDrawable_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetDrawable_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type. Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>A Drawable object for the requested wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getDrawable(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getDrawable(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFastDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFastDrawable (which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ GetFastDrawable(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? GetFastDrawable (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable GetFastDrawable(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetFastDrawable(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetFastDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.GetFastDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.GetFastDrawable which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFastDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetFastDrawable_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFastDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetGetFastDrawable_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type.  Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>An optimized Drawable object for the requested wallpaper, or <c>null</c>
                in some cases as specified in <c>#getDrawable(int)</c>.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getFastDrawable(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getFastDrawable(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (context As Context) As WallpaperManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Android::App::WallpaperManager ^ GetInstance(Android::Content::Context ^ context);" />
      <MemberSignature Language="C#" Value="public static Android.App.WallpaperManager? GetInstance (Android.Content.Context? context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.WallpaperManager GetInstance(class Android.Content.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetInstance(Android.Content.Context)" />
      <MemberSignature Language="F#" Value="static member GetInstance : Android.Content.Context -&gt; Android.App.WallpaperManager" Usage="Android.App.WallpaperManager.GetInstance context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getInstance", "(Landroid/content/Context;)Landroid/app/WallpaperManager;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getInstance", "(Landroid/content/Context;)Landroid/app/WallpaperManager;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Retrieve a WallpaperManager associated with the given Context.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Retrieve a WallpaperManager associated with the given Context.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getInstance(android.content.Context)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getInstance(android.content.Context)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="GetWallpaperColors">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWallpaperColors (which As Integer) As WallpaperColors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::App::WallpaperColors ^ GetWallpaperColors(int which);" />
      <MemberSignature Language="C#" Value="public virtual Android.App.WallpaperColors? GetWallpaperColors (int which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.WallpaperColors GetWallpaperColors(int32 which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetWallpaperColors(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetWallpaperColors : int -&gt; Android.App.WallpaperColors&#xA;override this.GetWallpaperColors : int -&gt; Android.App.WallpaperColors" Usage="wallpaperManager.GetWallpaperColors which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWallpaperColors", "(I)Landroid/app/WallpaperColors;", "GetGetWallpaperColors_IHandler", ApiSince=27)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWallpaperColors", "(I)Landroid/app/WallpaperColors;", "GetGetWallpaperColors_IHandler", ApiSince=27)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperColors</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="which">Wallpaper type. Must be either <c>#FLAG_SYSTEM</c> or
                <c>#FLAG_LOCK</c>.</param>
        <summary>Get the primary colors of a wallpaper.</summary>
        <returns>Current <c>WallpaperColors</c> or null if colors are unknown.</returns>
        <remarks>
          <para>Get the primary colors of a wallpaper.</para>
          <para>This method can return <c>null</c> when:
            &lt;ul&gt;
            &lt;li&gt;Colors are still being processed by the system.&lt;/li&gt;
            &lt;li&gt;The user has chosen to use a live wallpaper:  live wallpapers might not
            implement
            <c>android.service.wallpaper.WallpaperService.Engine#onComputeColors()
                WallpaperService.Engine#onComputeColors()</c>.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>Please note that this API will go through IPC and may take some time to
            calculate the wallpaper color, which could block the caller thread, so it is
            not recommended to call this in the UI thread.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperColors(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getWallpaperColors(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWallpaperFile">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWallpaperFile (which As WallpaperManagerFlags) As ParcelFileDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::OS::ParcelFileDescriptor ^ GetWallpaperFile(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor? GetWallpaperFile (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor GetWallpaperFile(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetWallpaperFile(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetWallpaperFile : Android.App.WallpaperManagerFlags -&gt; Android.OS.ParcelFileDescriptor&#xA;override this.GetWallpaperFile : Android.App.WallpaperManagerFlags -&gt; Android.OS.ParcelFileDescriptor" Usage="wallpaperManager.GetWallpaperFile which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWallpaperFile", "(I)Landroid/os/ParcelFileDescriptor;", "GetGetWallpaperFile_IHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWallpaperFile", "(I)Landroid/os/ParcelFileDescriptor;", "GetGetWallpaperFile_IHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The wallpaper whose image file is to be retrieved.  Must be a single
                defined kind of wallpaper, either <c>#FLAG_SYSTEM</c> or
                <c>#FLAG_LOCK</c>.</param>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>An open, readable file descriptor to the requested wallpaper image file;
                or <c>null</c> if no such wallpaper is configured or if the calling app does
                not have permission to read the current wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperFile(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getWallpaperFile(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWallpaperId">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWallpaperId (which As WallpaperManagerFlags) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetWallpaperId(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual int GetWallpaperId (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetWallpaperId(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetWallpaperId(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetWallpaperId : Android.App.WallpaperManagerFlags -&gt; int&#xA;override this.GetWallpaperId : Android.App.WallpaperManagerFlags -&gt; int" Usage="wallpaperManager.GetWallpaperId which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWallpaperId", "(I)I", "GetGetWallpaperId_IHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWallpaperId", "(I)I", "GetGetWallpaperId_IHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The wallpaper whose ID is to be returned.  Must be a single
                defined kind of wallpaper, either <c>#FLAG_SYSTEM</c> or
                <c>#FLAG_LOCK</c>.</param>
        <summary>Get the ID of the current wallpaper of the given kind.</summary>
        <returns>The positive numeric ID of the current wallpaper of the given kind,
                or a negative value if no such wallpaper is configured.</returns>
        <remarks>
          <para>Get the ID of the current wallpaper of the given kind.  If there is no
            such wallpaper configured, returns a negative number.</para>
          <para>Every time the wallpaper image is set, a new ID is assigned to it.
            This method allows the caller to determine whether the wallpaper imagery
            has changed, regardless of how that change happened.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperId(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getWallpaperId(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWallpaperInfo">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWallpaperInfo (which As WallpaperManagerFlags) As WallpaperInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::App::WallpaperInfo ^ GetWallpaperInfo(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.App.WallpaperInfo? GetWallpaperInfo (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.WallpaperInfo GetWallpaperInfo(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.GetWallpaperInfo(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member GetWallpaperInfo : Android.App.WallpaperManagerFlags -&gt; Android.App.WallpaperInfo&#xA;override this.GetWallpaperInfo : Android.App.WallpaperManagerFlags -&gt; Android.App.WallpaperInfo" Usage="wallpaperManager.GetWallpaperInfo which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWallpaperInfo", "(I)Landroid/app/WallpaperInfo;", "GetGetWallpaperInfo_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWallpaperInfo", "(I)Landroid/app/WallpaperInfo;", "GetGetWallpaperInfo_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">Specifies wallpaper to request (home or lock).</param>
        <summary>Returns the information about the home screen wallpaper if its current wallpaper is a live
            wallpaper component.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Returns the information about the home screen wallpaper if its current wallpaper is a live
            wallpaper component. Otherwise, if the wallpaper is a static image or is not set, this
            returns null.</para>
          <para>In order to use this, apps should declare a <c>&lt;queries&gt;</c> tag with the action
            <c>"android.service.wallpaper.WallpaperService"</c>. Otherwise,
            this method will return <c>null</c> if the caller doesn't otherwise have
            <see href="https://developer.android.com/training/package-visibility">visibility</see> of the wallpaper package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperInfo(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getWallpaperInfo(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasResourceWallpaper">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasResourceWallpaper (resid As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasResourceWallpaper(int resid);" />
      <MemberSignature Language="C#" Value="public virtual bool HasResourceWallpaper (int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasResourceWallpaper(int32 resid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.HasResourceWallpaper(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member HasResourceWallpaper : int -&gt; bool&#xA;override this.HasResourceWallpaper : int -&gt; bool" Usage="wallpaperManager.HasResourceWallpaper resid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hasResourceWallpaper", "(I)Z", "GetHasResourceWallpaper_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hasResourceWallpaper", "(I)Z", "GetHasResourceWallpaper_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resid">To be added.</param>
        <summary>Return whether any users are currently set to use the wallpaper
            with the given resource ID.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Return whether any users are currently set to use the wallpaper
            with the given resource ID.  That is, their wallpaper has been
            set through <c>#setResource(int)</c> with the same resource id.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#hasResourceWallpaper(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.hasResourceWallpaper(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="IsSetWallpaperAllowed">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSetWallpaperAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSetWallpaperAllowed { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsSetWallpaperAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSetWallpaperAllowed" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.IsSetWallpaperAllowed" />
      <MemberSignature Language="F#" Value="member this.IsSetWallpaperAllowed : bool" Usage="Android.App.WallpaperManager.IsSetWallpaperAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isSetWallpaperAllowed", "()Z", "GetIsSetWallpaperAllowedHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isSetWallpaperAllowed", "()Z", "GetIsSetWallpaperAllowedHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the calling package is allowed to set the wallpaper for the calling user.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns whether the calling package is allowed to set the wallpaper for the calling user.
            If this function returns <c>false</c>, any attempts to change the wallpaper will have
            no effect. Always returns <c>true</c> for device owner and profile owner.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#isSetWallpaperAllowed()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.isSetWallpaperAllowed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWallpaperSupported">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsWallpaperSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsWallpaperSupported { bool get(); };" />
      <MemberSignature Language="C#" Value="public virtual bool IsWallpaperSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWallpaperSupported" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.IsWallpaperSupported" />
      <MemberSignature Language="F#" Value="member this.IsWallpaperSupported : bool" Usage="Android.App.WallpaperManager.IsWallpaperSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isWallpaperSupported", "()Z", "GetIsWallpaperSupportedHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isWallpaperSupported", "()Z", "GetIsWallpaperSupportedHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether wallpapers are supported for the calling user.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns whether wallpapers are supported for the calling user. If this function returns
            <c>false</c>, any attempts to changing the wallpaper will have no effect,
            and any attempt to obtain of the wallpaper will return <c>null</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#isWallpaperSupported()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.isWallpaperSupported()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.App.WallpaperManager.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PeekDrawable () As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ PeekDrawable();" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? PeekDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable PeekDrawable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.PeekDrawable" />
      <MemberSignature Language="F#" Value="abstract member PeekDrawable : unit -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.PeekDrawable : unit -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.PeekDrawable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("peekDrawable", "()Landroid/graphics/drawable/Drawable;", "GetPeekDrawableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("peekDrawable", "()Landroid/graphics/drawable/Drawable;", "GetPeekDrawableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>A Drawable object for the requested wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#peekDrawable()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.peekDrawable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="PeekDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PeekDrawable (which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ PeekDrawable(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? PeekDrawable (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable PeekDrawable(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.PeekDrawable(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member PeekDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.PeekDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.PeekDrawable which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("peekDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetPeekDrawable_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("peekDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetPeekDrawable_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type. Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>A Drawable object for the requested wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#peekDrawable(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.peekDrawable(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekFastDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PeekFastDrawable () As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ PeekFastDrawable();" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? PeekFastDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable PeekFastDrawable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.PeekFastDrawable" />
      <MemberSignature Language="F#" Value="abstract member PeekFastDrawable : unit -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.PeekFastDrawable : unit -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.PeekFastDrawable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("peekFastDrawable", "()Landroid/graphics/drawable/Drawable;", "GetPeekFastDrawableHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("peekFastDrawable", "()Landroid/graphics/drawable/Drawable;", "GetPeekFastDrawableHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>An optimized Drawable object for the requested wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#peekFastDrawable()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.peekFastDrawable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="PeekFastDrawable">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PeekFastDrawable (which As WallpaperManagerFlags) As Drawable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Android::Graphics::Drawables::Drawable ^ PeekFastDrawable(Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Drawables.Drawable? PeekFastDrawable (Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Drawables.Drawable PeekFastDrawable(valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.PeekFastDrawable(Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member PeekFastDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable&#xA;override this.PeekFastDrawable : Android.App.WallpaperManagerFlags -&gt; Android.Graphics.Drawables.Drawable" Usage="wallpaperManager.PeekFastDrawable which" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("peekFastDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetPeekFastDrawable_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("peekFastDrawable", "(I)Landroid/graphics/drawable/Drawable;", "GetPeekFastDrawable_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="which">The <c>FLAG_*</c> identifier of a valid wallpaper type.  Throws
                IllegalArgumentException if an invalid wallpaper is requested.</param>
        <summary>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.</summary>
        <returns>An optimized Drawable object for the requested wallpaper.</returns>
        <remarks>
          <para>&lt;strong&gt; Important note: &lt;/strong&gt;
            &lt;ul&gt;
                &lt;li&gt;Up to version S, this method requires the
                <c>android.Manifest.permission#READ_EXTERNAL_STORAGE</c> permission.&lt;/li&gt;
                &lt;li&gt;Starting in T, directly accessing the wallpaper is not possible anymore,
                instead the default system wallpaper is returned
                (some versions of T may throw a <c>SecurityException</c>).&lt;/li&gt;
                &lt;li&gt;From version U, this method should not be used
                and will always throw a</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#peekFastDrawable(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.peekFastDrawable(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnColorsChangedListener">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveOnColorsChangedListener (callback As WallpaperManager.IOnColorsChangedListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveOnColorsChangedListener(Android::App::WallpaperManager::IOnColorsChangedListener ^ callback);" />
      <MemberSignature Language="C#" Value="public virtual void RemoveOnColorsChangedListener (Android.App.WallpaperManager.IOnColorsChangedListener callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOnColorsChangedListener(class Android.App.WallpaperManager/IOnColorsChangedListener callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.RemoveOnColorsChangedListener(Android.App.WallpaperManager.IOnColorsChangedListener)" />
      <MemberSignature Language="F#" Value="abstract member RemoveOnColorsChangedListener : Android.App.WallpaperManager.IOnColorsChangedListener -&gt; unit&#xA;override this.RemoveOnColorsChangedListener : Android.App.WallpaperManager.IOnColorsChangedListener -&gt; unit" Usage="wallpaperManager.RemoveOnColorsChangedListener callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeOnColorsChangedListener", "(Landroid/app/WallpaperManager$OnColorsChangedListener;)V", "GetRemoveOnColorsChangedListener_Landroid_app_WallpaperManager_OnColorsChangedListener_Handler", ApiSince=27)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeOnColorsChangedListener", "(Landroid/app/WallpaperManager$OnColorsChangedListener;)V", "GetRemoveOnColorsChangedListener_Landroid_app_WallpaperManager_OnColorsChangedListener_Handler", ApiSince=27)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.WallpaperManager+IOnColorsChangedListener" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendWallpaperCommand">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SendWallpaperCommand (windowToken As IBinder, action As String, x As Integer, y As Integer, z As Integer, extras As Bundle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SendWallpaperCommand(Android::OS::IBinder ^ windowToken, System::String ^ action, int x, int y, int z, Android::OS::Bundle ^ extras);" />
      <MemberSignature Language="C#" Value="public virtual void SendWallpaperCommand (Android.OS.IBinder? windowToken, string? action, int x, int y, int z, Android.OS.Bundle? extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendWallpaperCommand(class Android.OS.IBinder windowToken, string action, int32 x, int32 y, int32 z, class Android.OS.Bundle extras) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SendWallpaperCommand(Android.OS.IBinder,System.String,System.Int32,System.Int32,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member SendWallpaperCommand : Android.OS.IBinder * string * int * int * int * Android.OS.Bundle -&gt; unit&#xA;override this.SendWallpaperCommand : Android.OS.IBinder * string * int * int * int * Android.OS.Bundle -&gt; unit" Usage="wallpaperManager.SendWallpaperCommand (windowToken, action, x, y, z, extras)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("sendWallpaperCommand", "(Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)V", "GetSendWallpaperCommand_Landroid_os_IBinder_Ljava_lang_String_IIILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("sendWallpaperCommand", "(Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)V", "GetSendWallpaperCommand_Landroid_os_IBinder_Ljava_lang_String_IIILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowToken" Type="Android.OS.IBinder" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="z" Type="System.Int32" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="windowToken">The window who these offsets should be associated
            with, as returned by <c>android.view.View#getWindowToken()
            View.getWindowToken()</c>.</param>
        <param name="action">Name of the command to perform.  This must be a scoped
            name to avoid collisions, such as "com.mycompany.wallpaper.DOIT".</param>
        <param name="x">Arbitrary integer argument based on command.</param>
        <param name="y">Arbitrary integer argument based on command.</param>
        <param name="z">Arbitrary integer argument based on command.</param>
        <param name="extras">Optional additional information for the command, or null.</param>
        <summary>Send an arbitrary command to the current active wallpaper.</summary>
        <remarks>
          <para>Send an arbitrary command to the current active wallpaper.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#sendWallpaperCommand(android.os.IBinder,%20java.lang.String,%20int,%20int,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="SetBitmap">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetBitmap (bitmap As Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetBitmap(Android::Graphics::Bitmap ^ bitmap);" />
      <MemberSignature Language="C#" Value="public virtual void SetBitmap (Android.Graphics.Bitmap? bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBitmap(class Android.Graphics.Bitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetBitmap(Android.Graphics.Bitmap)" />
      <MemberSignature Language="F#" Value="abstract member SetBitmap : Android.Graphics.Bitmap -&gt; unit&#xA;override this.SetBitmap : Android.Graphics.Bitmap -&gt; unit" Usage="wallpaperManager.SetBitmap bitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;)V", "GetSetBitmap_Landroid_graphics_Bitmap_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;)V", "GetSetBitmap_Landroid_graphics_Bitmap_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">The bitmap to be used as the new system wallpaper.</param>
        <summary>Change the current system wallpaper to a bitmap.</summary>
        <remarks>
          <para>Change the current system wallpaper to a bitmap.  The given bitmap is
            converted to a PNG and stored as the wallpaper.  On success, the intent
            <c>Intent#ACTION_WALLPAPER_CHANGED</c> is broadcast.</para>
          <para>This method is equivalent to calling
            <c>#setBitmap(Bitmap, Rect, boolean)</c> and passing <c>null</c> for the
            <c>visibleCrop</c> rectangle and <c>true</c> for the <c>allowBackup</c>
            parameter.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setBitmap(android.graphics.Bitmap)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setBitmap(android.graphics.Bitmap)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">If an error occurs reverting to the built-in
 wallpaper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetBitmap">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetBitmap (fullImage As Bitmap, visibleCropHint As Rect, allowBackup As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SetBitmap(Android::Graphics::Bitmap ^ fullImage, Android::Graphics::Rect ^ visibleCropHint, bool allowBackup);" />
      <MemberSignature Language="C#" Value="public virtual int SetBitmap (Android.Graphics.Bitmap? fullImage, Android.Graphics.Rect? visibleCropHint, bool allowBackup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetBitmap(class Android.Graphics.Bitmap fullImage, class Android.Graphics.Rect visibleCropHint, bool allowBackup) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetBitmap(Android.Graphics.Bitmap,Android.Graphics.Rect,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * bool -&gt; int&#xA;override this.SetBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * bool -&gt; int" Usage="wallpaperManager.SetBitmap (fullImage, visibleCropHint, allowBackup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I", "GetSetBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_ZHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I", "GetSetBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_ZHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullImage" Type="Android.Graphics.Bitmap" />
        <Parameter Name="visibleCropHint" Type="Android.Graphics.Rect" />
        <Parameter Name="allowBackup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fullImage">A bitmap that will supply the wallpaper imagery.</param>
        <param name="visibleCropHint">The rectangular subregion of <c>fullImage</c> that should be
                displayed as wallpaper.  Passing <c>null</c> for this parameter means that
                the full image should be displayed if possible given the image's and device's
                aspect ratios, etc.</param>
        <param name="allowBackup">
          <c>true</c> if the OS is permitted to back up this wallpaper
                image for restore to a future device; <c>false</c> otherwise.</param>
        <summary>Change the current system wallpaper to a bitmap, specifying a hint about
            which subrectangle of the full image is to be visible.</summary>
        <returns>An integer ID assigned to the newly active wallpaper; or zero on failure.</returns>
        <remarks>
          <para>Change the current system wallpaper to a bitmap, specifying a hint about
            which subrectangle of the full image is to be visible.  The OS will then
            try to best present the given portion of the full image as the static system
            wallpaper image.  On success, the intent
            <c>Intent#ACTION_WALLPAPER_CHANGED</c> is broadcast.</para>
          <para>Passing <c>null</c> as the <c>visibleHint</c> parameter is equivalent to
            passing (0, 0, <c>fullImage.getWidth()</c>, <c>fullImage.getHeight()</c>).</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20boolean)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBitmap">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetBitmap (fullImage As Bitmap, visibleCropHint As Rect, allowBackup As Boolean, which As WallpaperManagerFlags) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SetBitmap(Android::Graphics::Bitmap ^ fullImage, Android::Graphics::Rect ^ visibleCropHint, bool allowBackup, Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual int SetBitmap (Android.Graphics.Bitmap? fullImage, Android.Graphics.Rect? visibleCropHint, bool allowBackup, Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetBitmap(class Android.Graphics.Bitmap fullImage, class Android.Graphics.Rect visibleCropHint, bool allowBackup, valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetBitmap(Android.Graphics.Bitmap,Android.Graphics.Rect,System.Boolean,Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member SetBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * bool * Android.App.WallpaperManagerFlags -&gt; int&#xA;override this.SetBitmap : Android.Graphics.Bitmap * Android.Graphics.Rect * bool * Android.App.WallpaperManagerFlags -&gt; int" Usage="wallpaperManager.SetBitmap (fullImage, visibleCropHint, allowBackup, which)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I", "GetSetBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_ZIHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setBitmap", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I", "GetSetBitmap_Landroid_graphics_Bitmap_Landroid_graphics_Rect_ZIHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullImage" Type="Android.Graphics.Bitmap" />
        <Parameter Name="visibleCropHint" Type="Android.Graphics.Rect" />
        <Parameter Name="allowBackup" Type="System.Boolean" />
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fullImage">A bitmap that will supply the wallpaper imagery.</param>
        <param name="visibleCropHint">The rectangular subregion of <c>fullImage</c> that should be
                displayed as wallpaper.  Passing <c>null</c> for this parameter means that
                the full image should be displayed if possible given the image's and device's
                aspect ratios, etc.</param>
        <param name="allowBackup">
          <c>true</c> if the OS is permitted to back up this wallpaper
                image for restore to a future device; <c>false</c> otherwise.</param>
        <param name="which">Flags indicating which wallpaper(s) to configure with the new imagery.</param>
        <summary>Version of <c>#setBitmap(Bitmap, Rect, boolean)</c> that allows the caller
            to specify which of the supported wallpaper categories to set.</summary>
        <returns>An integer ID assigned to the newly active wallpaper; or zero on failure.</returns>
        <remarks>
          <para>Version of <c>#setBitmap(Bitmap, Rect, boolean)</c> that allows the caller
            to specify which of the supported wallpaper categories to set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20boolean,%20int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDisplayPadding">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDisplayPadding (padding As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDisplayPadding(Android::Graphics::Rect ^ padding);" />
      <MemberSignature Language="C#" Value="public virtual void SetDisplayPadding (Android.Graphics.Rect? padding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDisplayPadding(class Android.Graphics.Rect padding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetDisplayPadding(Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member SetDisplayPadding : Android.Graphics.Rect -&gt; unit&#xA;override this.SetDisplayPadding : Android.Graphics.Rect -&gt; unit" Usage="wallpaperManager.SetDisplayPadding padding" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDisplayPadding", "(Landroid/graphics/Rect;)V", "GetSetDisplayPadding_Landroid_graphics_Rect_Handler", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDisplayPadding", "(Landroid/graphics/Rect;)V", "GetSetDisplayPadding_Landroid_graphics_Rect_Handler", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER_HINTS")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER_HINTS")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="padding" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="padding">The number of pixels the wallpaper should extend beyond the display,
            on its left, top, right, and bottom sides.</param>
        <summary>Specify extra padding that the wallpaper should have outside of the display.</summary>
        <remarks>
          <para>Specify extra padding that the wallpaper should have outside of the display.
            That is, the given padding supplies additional pixels the wallpaper should extend
            outside of the display itself.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER_HINTS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setDisplayPadding(android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setDisplayPadding(android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetResource (resid As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetResource(int resid);" />
      <MemberSignature Language="C#" Value="public virtual void SetResource (int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetResource(int32 resid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetResource(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetResource : int -&gt; unit&#xA;override this.SetResource : int -&gt; unit" Usage="wallpaperManager.SetResource resid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setResource", "(I)V", "GetSetResource_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setResource", "(I)V", "GetSetResource_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resid">The resource ID of the bitmap to be used as the wallpaper image</param>
        <summary>Change the current system wallpaper to the bitmap in the given resource.</summary>
        <remarks>
          <para>Change the current system wallpaper to the bitmap in the given resource.
            The resource is opened as a raw data stream and copied into the
            wallpaper; it must be a valid PNG or JPEG image.  On success, the intent
            <c>Intent#ACTION_WALLPAPER_CHANGED</c> is broadcast.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setResource(int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setResource(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">If an error occurs reverting to the built-in
 wallpaper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetResource">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetResource (resid As Integer, which As WallpaperManagerFlags) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SetResource(int resid, Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual int SetResource (int resid, Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetResource(int32 resid, valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetResource(System.Int32,Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member SetResource : int * Android.App.WallpaperManagerFlags -&gt; int&#xA;override this.SetResource : int * Android.App.WallpaperManagerFlags -&gt; int" Usage="wallpaperManager.SetResource (resid, which)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setResource", "(II)I", "GetSetResource_IIHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setResource", "(II)I", "GetSetResource_IIHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resid" Type="System.Int32" />
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resid">The resource ID of the bitmap to be used as the wallpaper image</param>
        <param name="which">Flags indicating which wallpaper(s) to configure with the new imagery</param>
        <summary>Version of <c>#setResource(int)</c> that allows the caller to specify which
            of the supported wallpaper categories to set.</summary>
        <returns>An integer ID assigned to the newly active wallpaper; or zero on failure.</returns>
        <remarks>
          <para>Version of <c>#setResource(int)</c> that allows the caller to specify which
            of the supported wallpaper categories to set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setResource(int,%20int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setResource(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStream">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetStream (bitmapData As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetStream(System::IO::Stream ^ bitmapData);" />
      <MemberSignature Language="C#" Value="public virtual void SetStream (System.IO.Stream? bitmapData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStream(class System.IO.Stream bitmapData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetStream(System.IO.Stream)" />
      <MemberSignature Language="F#" Value="abstract member SetStream : System.IO.Stream -&gt; unit&#xA;override this.SetStream : System.IO.Stream -&gt; unit" Usage="wallpaperManager.SetStream bitmapData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStream", "(Ljava/io/InputStream;)V", "GetSetStream_Ljava_io_InputStream_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setStream", "(Ljava/io/InputStream;)V", "GetSetStream_Ljava_io_InputStream_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmapData" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="bitmapData">A stream containing the raw data to install as a wallpaper.  This
                data can be in any format handled by <c>BitmapRegionDecoder</c>.</param>
        <summary>Change the current system wallpaper to a specific byte stream.</summary>
        <remarks>
          <para>Change the current system wallpaper to a specific byte stream.  The
            give InputStream is copied into persistent storage and will now be
            used as the wallpaper.  Currently it must be either a JPEG or PNG
            image.  On success, the intent <c>Intent#ACTION_WALLPAPER_CHANGED</c>
            is broadcast.</para>
          <para>This method is equivalent to calling
            <c>#setStream(InputStream, Rect, boolean)</c> and passing <c>null</c> for the
            <c>visibleCrop</c> rectangle and <c>true</c> for the <c>allowBackup</c>
            parameter.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setStream(java.io.InputStream)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setStream(java.io.InputStream)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">If an error occurs reverting to the built-in
 wallpaper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetStream">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetStream (bitmapData As Stream, visibleCropHint As Rect, allowBackup As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SetStream(System::IO::Stream ^ bitmapData, Android::Graphics::Rect ^ visibleCropHint, bool allowBackup);" />
      <MemberSignature Language="C#" Value="public virtual int SetStream (System.IO.Stream? bitmapData, Android.Graphics.Rect? visibleCropHint, bool allowBackup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetStream(class System.IO.Stream bitmapData, class Android.Graphics.Rect visibleCropHint, bool allowBackup) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetStream(System.IO.Stream,Android.Graphics.Rect,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetStream : System.IO.Stream * Android.Graphics.Rect * bool -&gt; int&#xA;override this.SetStream : System.IO.Stream * Android.Graphics.Rect * bool -&gt; int" Usage="wallpaperManager.SetStream (bitmapData, visibleCropHint, allowBackup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStream", "(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I", "GetSetStream_Ljava_io_InputStream_Landroid_graphics_Rect_ZHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setStream", "(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I", "GetSetStream_Ljava_io_InputStream_Landroid_graphics_Rect_ZHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmapData" Type="System.IO.Stream" />
        <Parameter Name="visibleCropHint" Type="Android.Graphics.Rect" />
        <Parameter Name="allowBackup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bitmapData">A stream containing the raw data to install as a wallpaper.  This
                data can be in any format handled by <c>BitmapRegionDecoder</c>.</param>
        <param name="visibleCropHint">The rectangular subregion of the streamed image that should be
                displayed as wallpaper.  Passing <c>null</c> for this parameter means that
                the full image should be displayed if possible given the image's and device's
                aspect ratios, etc.</param>
        <param name="allowBackup">
          <c>true</c> if the OS is permitted to back up this wallpaper
                image for restore to a future device; <c>false</c> otherwise.</param>
        <summary>Change the current system wallpaper to a specific byte stream, specifying a
            hint about which subrectangle of the full image is to be visible.</summary>
        <returns>An integer ID assigned to the newly active wallpaper; or zero on failure.</returns>
        <remarks>
          <para>Change the current system wallpaper to a specific byte stream, specifying a
            hint about which subrectangle of the full image is to be visible.  The OS will
            then try to best present the given portion of the full image as the static system
            wallpaper image.  The data from the given InputStream is copied into persistent
            storage and will then be used as the system wallpaper.  Currently the data must
            be either a JPEG or PNG image.  On success, the intent
            <c>Intent#ACTION_WALLPAPER_CHANGED</c> is broadcast.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setStream(java.io.InputStream,%20android.graphics.Rect,%20boolean)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setStream(java.io.InputStream, android.graphics.Rect, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStream">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetStream (bitmapData As Stream, visibleCropHint As Rect, allowBackup As Boolean, which As WallpaperManagerFlags) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SetStream(System::IO::Stream ^ bitmapData, Android::Graphics::Rect ^ visibleCropHint, bool allowBackup, Android::App::WallpaperManagerFlags which);" />
      <MemberSignature Language="C#" Value="public virtual int SetStream (System.IO.Stream? bitmapData, Android.Graphics.Rect? visibleCropHint, bool allowBackup, Android.App.WallpaperManagerFlags which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SetStream(class System.IO.Stream bitmapData, class Android.Graphics.Rect visibleCropHint, bool allowBackup, valuetype Android.App.WallpaperManagerFlags which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetStream(System.IO.Stream,Android.Graphics.Rect,System.Boolean,Android.App.WallpaperManagerFlags)" />
      <MemberSignature Language="F#" Value="abstract member SetStream : System.IO.Stream * Android.Graphics.Rect * bool * Android.App.WallpaperManagerFlags -&gt; int&#xA;override this.SetStream : System.IO.Stream * Android.Graphics.Rect * bool * Android.App.WallpaperManagerFlags -&gt; int" Usage="wallpaperManager.SetStream (bitmapData, visibleCropHint, allowBackup, which)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStream", "(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I", "GetSetStream_Ljava_io_InputStream_Landroid_graphics_Rect_ZIHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setStream", "(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I", "GetSetStream_Ljava_io_InputStream_Landroid_graphics_Rect_ZIHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.SET_WALLPAPER")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmapData" Type="System.IO.Stream" />
        <Parameter Name="visibleCropHint" Type="Android.Graphics.Rect" />
        <Parameter Name="allowBackup" Type="System.Boolean" />
        <Parameter Name="which" Type="Android.App.WallpaperManagerFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="bitmapData">A stream containing the raw data to install as a wallpaper.  This
                data can be in any format handled by <c>BitmapRegionDecoder</c>.</param>
        <param name="visibleCropHint">The rectangular subregion of the streamed image that should be
                displayed as wallpaper.  Passing <c>null</c> for this parameter means that
                the full image should be displayed if possible given the image's and device's
                aspect ratios, etc.</param>
        <param name="allowBackup">
          <c>true</c> if the OS is permitted to back up this wallpaper
                image for restore to a future device; <c>false</c> otherwise.</param>
        <param name="which">Flags indicating which wallpaper(s) to configure with the new imagery.</param>
        <summary>Version of <c>#setStream(InputStream, Rect, boolean)</c> that allows the caller
            to specify which of the supported wallpaper categories to set.</summary>
        <returns>An integer ID assigned to the newly active wallpaper; or zero on failure.</returns>
        <remarks>
          <para>Version of <c>#setStream(InputStream, Rect, boolean)</c> that allows the caller
            to specify which of the supported wallpaper categories to set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setStream(java.io.InputStream,%20android.graphics.Rect,%20boolean,%20int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setStream(java.io.InputStream, android.graphics.Rect, boolean, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWallpaperOffsets">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWallpaperOffsets (windowToken As IBinder, xOffset As Single, yOffset As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWallpaperOffsets(Android::OS::IBinder ^ windowToken, float xOffset, float yOffset);" />
      <MemberSignature Language="C#" Value="public virtual void SetWallpaperOffsets (Android.OS.IBinder? windowToken, float xOffset, float yOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWallpaperOffsets(class Android.OS.IBinder windowToken, float32 xOffset, float32 yOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetWallpaperOffsets(Android.OS.IBinder,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetWallpaperOffsets : Android.OS.IBinder * single * single -&gt; unit&#xA;override this.SetWallpaperOffsets : Android.OS.IBinder * single * single -&gt; unit" Usage="wallpaperManager.SetWallpaperOffsets (windowToken, xOffset, yOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWallpaperOffsets", "(Landroid/os/IBinder;FF)V", "GetSetWallpaperOffsets_Landroid_os_IBinder_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWallpaperOffsets", "(Landroid/os/IBinder;FF)V", "GetSetWallpaperOffsets_Landroid_os_IBinder_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowToken" Type="Android.OS.IBinder" />
        <Parameter Name="xOffset" Type="System.Single" />
        <Parameter Name="yOffset" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="windowToken">The window who these offsets should be associated
            with, as returned by <c>android.view.View#getWindowToken()
            View.getWindowToken()</c>.</param>
        <param name="xOffset">The offset along the X dimension, from 0 to 1.</param>
        <param name="yOffset">The offset along the Y dimension, from 0 to 1.</param>
        <summary>Set the display position of the current wallpaper within any larger space, when
            that wallpaper is visible behind the given window.</summary>
        <remarks>
          <para>Set the display position of the current wallpaper within any larger space, when
            that wallpaper is visible behind the given window.  The X and Y offsets
            are floating point numbers ranging from 0 to 1, representing where the
            wallpaper should be positioned within the screen space.  These only
            make sense when the wallpaper is larger than the display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setWallpaperOffsets(android.os.IBinder,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setWallpaperOffsets(android.os.IBinder, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="SetWallpaperOffsetSteps">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetWallpaperOffsetSteps (xStep As Single, yStep As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetWallpaperOffsetSteps(float xStep, float yStep);" />
      <MemberSignature Language="C#" Value="public virtual void SetWallpaperOffsetSteps (float xStep, float yStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWallpaperOffsetSteps(float32 xStep, float32 yStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SetWallpaperOffsetSteps(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetWallpaperOffsetSteps : single * single -&gt; unit&#xA;override this.SetWallpaperOffsetSteps : single * single -&gt; unit" Usage="wallpaperManager.SetWallpaperOffsetSteps (xStep, yStep)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setWallpaperOffsetSteps", "(FF)V", "GetSetWallpaperOffsetSteps_FFHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setWallpaperOffsetSteps", "(FF)V", "GetSetWallpaperOffsetSteps_FFHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xStep" Type="System.Single" />
        <Parameter Name="yStep" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="xStep">The X offset delta from one screen to the next one</param>
        <param name="yStep">The Y offset delta from one screen to the next one</param>
        <summary>For applications that use multiple virtual screens showing a wallpaper,
            specify the step size between virtual screens.</summary>
        <remarks>
          <para>For applications that use multiple virtual screens showing a wallpaper,
            specify the step size between virtual screens. For example, if the
            launcher has 3 virtual screens, it would specify an xStep of 0.5,
            since the X offset for those screens are 0.0, 0.5 and 1.0</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#setWallpaperOffsetSteps(float,%20float)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.setWallpaperOffsetSteps(float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="SuggestDesiredDimensions">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SuggestDesiredDimensions (minimumWidth As Integer, minimumHeight As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SuggestDesiredDimensions(int minimumWidth, int minimumHeight);" />
      <MemberSignature Language="C#" Value="public virtual void SuggestDesiredDimensions (int minimumWidth, int minimumHeight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SuggestDesiredDimensions(int32 minimumWidth, int32 minimumHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.WallpaperManager.SuggestDesiredDimensions(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SuggestDesiredDimensions : int * int -&gt; unit&#xA;override this.SuggestDesiredDimensions : int * int -&gt; unit" Usage="wallpaperManager.SuggestDesiredDimensions (minimumWidth, minimumHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("suggestDesiredDimensions", "(II)V", "GetSuggestDesiredDimensions_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("suggestDesiredDimensions", "(II)V", "GetSuggestDesiredDimensions_IIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minimumWidth" Type="System.Int32" />
        <Parameter Name="minimumHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minimumWidth">Desired minimum width</param>
        <param name="minimumHeight">Desired minimum height</param>
        <summary>For use only by the current home application, to specify the size of
            wallpaper it would like to use.</summary>
        <remarks>
          <para>For use only by the current home application, to specify the size of
            wallpaper it would like to use.  This allows such applications to have
            a virtual wallpaper that is larger than the physical screen, matching
            the size of their workspace.
            
            &lt;p class="note"&gt;Calling this method from apps other than the active
            home app is not guaranteed to work properly.  Other apps that supply
            wallpaper imagery should use <c>#getDesiredMinimumWidth()</c> and
            <c>#getDesiredMinimumHeight()</c> and construct a wallpaper that
            matches those dimensions.</para>
          <para>This method requires the caller to hold the permission
            <c>android.Manifest.permission#SET_WALLPAPER_HINTS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#suggestDesiredDimensions(int,%20int)" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.suggestDesiredDimensions(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.App.WallpaperManager.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.App.WallpaperManager.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WallpaperInfo">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WallpaperInfo As WallpaperInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Android::App::WallpaperInfo ^ WallpaperInfo { Android::App::WallpaperInfo ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Android.App.WallpaperInfo? WallpaperInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.WallpaperInfo WallpaperInfo" />
      <MemberSignature Language="DocId" Value="P:Android.App.WallpaperManager.WallpaperInfo" />
      <MemberSignature Language="F#" Value="member this.WallpaperInfo : Android.App.WallpaperInfo" Usage="Android.App.WallpaperManager.WallpaperInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWallpaperInfo", "()Landroid/app/WallpaperInfo;", "GetGetWallpaperInfoHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWallpaperInfo", "()Landroid/app/WallpaperInfo;", "GetGetWallpaperInfoHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.WallpaperInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the information about the home screen wallpaper if its current wallpaper is a live
            wallpaper component.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the information about the home screen wallpaper if its current wallpaper is a live
            wallpaper component. Otherwise, if the wallpaper is a static image, this returns null.</para>
          <para>In order to use this, apps should declare a <c>&lt;queries&gt;</c> tag with the action
            <c>"android.service.wallpaper.WallpaperService"</c>. Otherwise,
            this method will return <c>null</c> if the caller doesn't otherwise have
            <see href="https://developer.android.com/training/package-visibility">visibility</see> of the wallpaper package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperInfo()" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.getWallpaperInfo()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="WallpaperPreviewMetaData">
      <MemberSignature Language="VB.NET" Value="Public Const WallpaperPreviewMetaData As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ WallpaperPreviewMetaData;" />
      <MemberSignature Language="C#" Value="public const string WallpaperPreviewMetaData;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string WallpaperPreviewMetaData" />
      <MemberSignature Language="DocId" Value="F:Android.App.WallpaperManager.WallpaperPreviewMetaData" />
      <MemberSignature Language="F#" Value="val mutable WallpaperPreviewMetaData : string" Usage="Android.App.WallpaperManager.WallpaperPreviewMetaData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("WALLPAPER_PREVIEW_META_DATA")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("WALLPAPER_PREVIEW_META_DATA")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Manifest entry for activities that respond to <c>Intent#ACTION_SET_WALLPAPER</c>
            which allows them to provide a custom large icon associated with this action.</summary>
        <remarks>
          <para>Manifest entry for activities that respond to <c>Intent#ACTION_SET_WALLPAPER</c>
            which allows them to provide a custom large icon associated with this action.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/WallpaperManager#WALLPAPER_PREVIEW_META_DATA" title="Reference documentation">Java documentation for <code>android.app.WallpaperManager.WALLPAPER_PREVIEW_META_DATA</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
