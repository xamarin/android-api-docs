<Type Name="Fragment" FullName="Android.App.Fragment">
  <TypeSignature Language="C#" Value="public class Fragment : Java.Lang.Object, Android.Content.IComponentCallbacks2, Android.Views.View.IOnCreateContextMenuListener, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Fragment extends Java.Lang.Object implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class Android.Views.View/IOnCreateContextMenuListener, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.View+IOnCreateContextMenuListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/Fragment", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>A Fragment is a piece of an application's user interface or behavior
 that can be placed in an <c><see cref="T:Android.App.Activity" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A Fragment is a piece of an application's user interface or behavior
 that can be placed in an <c><see cref="T:Android.App.Activity" /></c>.  Interaction with fragments
 is done through <c><see cref="T:Android.App.FragmentManager" /></c>, which can be obtained via
 <c><see cref="P:Android.App.Activity.FragmentManager" /></c> and
 <c><see cref="P:Android.App.Fragment.FragmentManager" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">The Fragment class can be used many ways to achieve a wide variety of
 results. In its core, it represents a particular operation or interface
 that is running within a larger <c><see cref="T:Android.App.Activity" /></c>.  A Fragment is closely
 tied to the Activity it is in, and can not be used apart from one.  Though
 Fragment defines its own lifecycle, that lifecycle is dependent on its
 activity: if the activity is stopped, no fragments inside of it can be
 started; when the activity is destroyed, all fragments will be destroyed.

 </para>
      <para tool="javadoc-to-mdoc">All subclasses of Fragment must include a public no-argument constructor.
 The framework will often re-instantiate a fragment class when needed,
 in particular during state restore, and needs to be able to find this
 constructor to instantiate it.  If the no-argument constructor is not
 available, a runtime exception will occur in some cases during state
 restore.

 </para>
      <para tool="javadoc-to-mdoc">Topics covered here:
 <list type="number"><item><term /></item><item><term /></item><item><term /></item><item><term></term></item></list><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about using fragments, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/fragments.html">Fragments</a></format> developer guide.</para>
      <format type="text/html">
        <h3>Older Platforms</h3>
      </format>

 While the Fragment API was introduced in
 <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>, a version of the API
 at is also available for use on older platforms through
 <c><see cref="!:NoType:android/support/v4/app/FragmentActivity;Href=../../../reference/android/support/v4/app/FragmentActivity.html" /></c>.  See the blog post
  for more details.

 <format type="text/html"><h3>Lifecycle</h3></format><para tool="javadoc-to-mdoc">Though a Fragment's lifecycle is tied to its owning activity, it has
 its own wrinkle on the standard activity lifecycle.  It includes basic
 activity lifecycle methods such as <c><see cref="M:Android.App.Fragment.OnResume" /></c>, but also important
 are methods related to interactions with the activity and UI generation.

 </para><para tool="javadoc-to-mdoc">The core series of lifecycle methods that are called to bring a fragment
 up to resumed state (interacting with the user) are:

 <list type="number"><item><term><c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c> called once the fragment is associated with its activity.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c> called to do initial creation of the fragment.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> creates and returns the view hierarchy associated
 with the fragment.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c> tells the fragment that its activity has
 completed its own <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnViewStateRestored(Android.OS.Bundle)" /></c> tells the fragment that all of the saved
 state of its view hierarchy has been restored.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnStart" /></c> makes the fragment visible to the user (based on its
 containing activity being started).
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnResume" /></c> makes the fragment begin interacting with the user
 (based on its containing activity being resumed).
 </term></item></list></para><para tool="javadoc-to-mdoc">As a fragment is no longer being used, it goes through a reverse
 series of callbacks:

 <list type="number"><item><term><c><see cref="M:Android.App.Fragment.OnPause" /></c> fragment is no longer interacting with the user either
 because its activity is being paused or a fragment operation is modifying it
 in the activity.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnStop" /></c> fragment is no longer visible to the user either
 because its activity is being stopped or a fragment operation is modifying it
 in the activity.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnDestroyView" /></c> allows the fragment to clean up resources
 associated with its View.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnDestroy" /></c> called to do final cleanup of the fragment's state.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnDetach" /></c> called immediately prior to the fragment no longer
 being associated with its activity.
 </term></item></list><format type="text/html"><h3>Layout</h3></format></para><para tool="javadoc-to-mdoc">Fragments can be used as part of your application's layout, allowing
 you to better modularize your code and more easily adjust your user
 interface to the screen it is running on.  As an example, we can look
 at a simple program consisting of a list of items, and display of the
 details of each item.</para><para tool="javadoc-to-mdoc">An activity's layout XML can include <c>&lt;fragment&gt;</c> tags
 to embed fragment instances inside of the layout.  For example, here is
 a simple layout that embeds one fragment:</para><example><code lang="xml">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent" android:layout_height="match_parent"&gt;
    &lt;fragment class="com.example.android.apis.app.FragmentLayout$TitlesFragment"
            android:id="@+id/titles"
            android:layout_width="match_parent" android:layout_height="match_parent" /&gt;
&lt;/FrameLayout&gt;</code></example><para tool="javadoc-to-mdoc">The layout is installed in the activity in the normal way:<example><code lang="java">@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setContentView(R.layout.fragment_layout);
}</code></example></para><para tool="javadoc-to-mdoc">The titles fragment, showing a list of titles, is fairly simple, relying
 on <c><see cref="T:Android.App.ListFragment" /></c> for most of its work.  Note the implementation of
 clicking an item: depending on the current activity's layout, it can either
 create and display a new fragment to show the details in-place (more about
 this later), or start a new activity to show the details.</para><example><code lang="java">public static class TitlesFragment extends ListFragment {
    boolean mDualPane;
    int mCurCheckPosition = 0;

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        // Populate list with our static array of titles.
        setListAdapter(new ArrayAdapter&lt;String&gt;(getActivity(),
                android.R.layout.simple_list_item_activated_1, Shakespeare.TITLES));

        // Check to see if we have a frame in which to embed the details
        // fragment directly in the containing UI.
        View detailsFrame = getActivity().findViewById(R.id.details);
        mDualPane = detailsFrame != null &amp;&amp; detailsFrame.getVisibility() == View.VISIBLE;

        if (savedInstanceState != null) {
            // Restore last state for checked position.
            mCurCheckPosition = savedInstanceState.getInt("curChoice", 0);
        }

        if (mDualPane) {
            // In dual-pane mode, the list view highlights the selected item.
            getListView().setChoiceMode(ListView.CHOICE_MODE_SINGLE);
            // Make sure our UI is in the correct state.
            showDetails(mCurCheckPosition);
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt("curChoice", mCurCheckPosition);
    }

    @Override
    public void onListItemClick(ListView l, View v, int position, long id) {
        showDetails(position);
    }

    /**
     * Helper function to show the details of a selected item, either by
     * displaying a fragment in-place in the current UI, or starting a
     * whole new activity in which it is displayed.
     */
    void showDetails(int index) {
        mCurCheckPosition = index;

        if (mDualPane) {
            // We can display everything in-place with fragments, so update
            // the list to highlight the selected item and show the data.
            getListView().setItemChecked(index, true);

            // Check what fragment is currently shown, replace if needed.
            DetailsFragment details = (DetailsFragment)
                    getFragmentManager().findFragmentById(R.id.details);
            if (details == null || details.getShownIndex() != index) {
                // Make new fragment to show this selection.
                details = DetailsFragment.newInstance(index);

                // Execute a transaction, replacing any existing fragment
                // with this one inside the frame.
                FragmentTransaction ft = getFragmentManager().beginTransaction();
                if (index == 0) {
                    ft.replace(R.id.details, details);
                } else {
                    ft.replace(R.id.a_item, details);
                }
                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
                ft.commit();
            }

        } else {
            // Otherwise we need to launch a new activity to display
            // the dialog fragment with selected text.
            Intent intent = new Intent();
            intent.setClass(getActivity(), DetailsActivity.class);
            intent.putExtra("index", index);
            startActivity(intent);
        }
    }
}</code></example><para tool="javadoc-to-mdoc">The details fragment showing the contents of a selected item just
 displays a string of text based on an index of a string array built in to
 the app:<example><code lang="java">public static class DetailsFragment extends Fragment {
    /**
     * Create a new instance of DetailsFragment, initialized to
     * show the text at 'index'.
     */
    public static DetailsFragment newInstance(int index) {
        DetailsFragment f = new DetailsFragment();

        // Supply index input as an argument.
        Bundle args = new Bundle();
        args.putInt("index", index);
        f.setArguments(args);

        return f;
    }

    public int getShownIndex() {
        return getArguments().getInt("index", 0);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        if (container == null) {
            // We have different layouts, and in one of them this
            // fragment's containing frame doesn't exist.  The fragment
            // may still be created from its saved state, but there is
            // no reason to try to create its view hierarchy because it
            // won't be displayed.  Note this is not needed -- we could
            // just run the code below, where we would create and return
            // the view hierarchy; it would just never be used.
            return null;
        }

        ScrollView scroller = new ScrollView(getActivity());
        TextView text = new TextView(getActivity());
        int padding = (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                4, getActivity().getResources().getDisplayMetrics());
        text.setPadding(padding, padding, padding, padding);
        scroller.addView(text);
        text.setText(Shakespeare.DIALOGUE[getShownIndex()]);
        return scroller;
    }
}</code></example></para><para tool="javadoc-to-mdoc">In this case when the user clicks on a title, there is no details
 container in the current activity, so the titles fragment's click code will
 launch a new activity to display the details fragment:<example><code lang="java">public static class DetailsActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (getResources().getConfiguration().orientation
                == Configuration.ORIENTATION_LANDSCAPE) {
            // If the screen is now in landscape mode, we can show the
            // dialog in-line with the list so we don't need this activity.
            finish();
            return;
        }

        if (savedInstanceState == null) {
            // During initial setup, plug in the details fragment.
            DetailsFragment details = new DetailsFragment();
            details.setArguments(getIntent().getExtras());
            getFragmentManager().beginTransaction().add(android.R.id.content, details).commit();
        }
    }
}</code></example></para><para tool="javadoc-to-mdoc">However the screen may be large enough to show both the list of titles
 and details about the currently selected title.  To use such a layout on
 a landscape screen, this alternative layout can be placed under layout-land:<example><code lang="xml">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="match_parent" android:layout_height="match_parent"&gt;

    &lt;fragment class="com.example.android.apis.app.FragmentLayout$TitlesFragment"
            android:id="@+id/titles" android:layout_weight="1"
            android:layout_width="0px" android:layout_height="match_parent" /&gt;

    &lt;FrameLayout android:id="@+id/details" android:layout_weight="1"
            android:layout_width="0px" android:layout_height="match_parent"
            android:background="?android:attr/detailsElementBackground" /&gt;

&lt;/LinearLayout&gt;</code></example></para><para tool="javadoc-to-mdoc">Note how the prior code will adjust to this alternative UI flow: the titles
 fragment will now embed the details fragment inside of this activity, and the
 details activity will finish itself if it is running in a configuration
 where the details can be shown in-place.

 </para><para tool="javadoc-to-mdoc">When a configuration change causes the activity hosting these fragments
 to restart, its new instance may use a different layout that doesn't
 include the same fragments as the previous layout.  In this case all of
 the previous fragments will still be instantiated and running in the new
 instance.  However, any that are no longer associated with a &lt;fragment&gt;
 tag in the view hierarchy will not have their content view created
 and will return false from <c><see cref="P:Android.App.Fragment.IsInLayout" /></c>.  (The code here also shows
 how you can determine if a fragment placed in a container is no longer
 running in a layout with that container and avoid creating its view hierarchy
 in that case.)

 </para><para tool="javadoc-to-mdoc">The attributes of the &lt;fragment&gt; tag are used to control the
 LayoutParams provided when attaching the fragment's view to the parent
 container.  They can also be parsed by the fragment in <c><see cref="M:Android.App.Fragment.OnInflate(Android.App.Activity,Android.Util.IAttributeSet,Android.Util.IAttributeSet)" /></c>
 as parameters.

 </para><para tool="javadoc-to-mdoc">The fragment being instantiated must have some kind of unique identifier
 so that it can be re-associated with a previous instance if the parent
 activity needs to be destroyed and recreated.  This can be provided these
 ways:

 <list type="bullet"><item><term>If nothing is explicitly supplied, the view ID of the container will
 be used.
 </term></item><item><term><c>android:tag</c> can be used in &lt;fragment&gt; to provide
 a specific tag name for the fragment.
 </term></item><item><term><c>android:id</c> can be used in &lt;fragment&gt; to provide
 a specific identifier for the fragment.
 </term></item></list><format type="text/html"><h3>Back Stack</h3></format></para><para tool="javadoc-to-mdoc">The transaction in which fragments are modified can be placed on an
 internal back-stack of the owning activity.  When the user presses back
 in the activity, any transactions on the back stack are popped off before
 the activity itself is finished.

 </para><para tool="javadoc-to-mdoc">For example, consider this simple fragment that is instantiated with
 an integer argument and displays that in a TextView in its UI:<example><code lang="java">public static class CountingFragment extends Fragment {
    int mNum;

    /**
     * Create a new instance of CountingFragment, providing "num"
     * as an argument.
     */
    static CountingFragment newInstance(int num) {
        CountingFragment f = new CountingFragment();

        // Supply num input as an argument.
        Bundle args = new Bundle();
        args.putInt("num", num);
        f.setArguments(args);

        return f;
    }

    /**
     * When creating, retrieve this instance's number from its arguments.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mNum = getArguments() != null ? getArguments().getInt("num") : 1;
    }

    /**
     * The Fragment's UI is just a simple text view showing its
     * instance number.
     */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.hello_world, container, false);
        View tv = v.findViewById(R.id.text);
        ((TextView)tv).setText("Fragment #" + mNum);
        tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));
        return v;
    }
}</code></example></para><para tool="javadoc-to-mdoc">A function that creates a new instance of the fragment, replacing
 whatever current fragment instance is being shown and pushing that change
 on to the back stack could be written as:

 <example><code lang="java">void addFragmentToStack() {
    mStackLevel++;

    // Instantiate a new fragment.
    Fragment newFragment = CountingFragment.newInstance(mStackLevel);

    // Add the fragment to the activity, pushing this transaction
    // on to the back stack.
    FragmentTransaction ft = getFragmentManager().beginTransaction();
    ft.replace(R.id.simple_fragment, newFragment);
    ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
    ft.addToBackStack(null);
    ft.commit();
}</code></example></para><para tool="javadoc-to-mdoc">After each call to this function, a new entry is on the stack, and
 pressing back will pop it to return the user to whatever previous state
 the activity UI was in.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Fragment.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Fragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor.  <i>Every</i> fragment must have an
 empty constructor, so it can be instantiated when restoring its
 activity's state.  It is strongly recommended that subclasses do not
 have other constructors with parameters, since these constructors
 will not be called when the fragment is re-instantiated; instead,
 arguments can be supplied by the caller with <c><see cref="P:Android.App.Fragment.Arguments" /></c>
 and later retrieved by the Fragment with <c><see cref="P:Android.App.Fragment.Arguments" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Applications should generally not implement a constructor.  The
 first place application code can run where the fragment is ready to
 be used is in <c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c>, the point where the fragment
 is actually associated with its activity.  Some applications may also
 want to implement <c><see cref="M:Android.App.Fragment.OnInflate(Android.App.Activity,Android.Util.IAttributeSet,Android.Util.IAttributeSet)" /></c> to retrieve attributes from a
 layout resource, though should take care here because this happens for
 the fragment is attached to its activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#Fragment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Fragment (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activity">
      <MemberSignature Language="C#" Value="public Android.App.Activity Activity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Activity Activity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActivity", "()Landroid/app/Activity;", "GetGetActivityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Activity this fragment is currently associated with.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Activity this fragment is currently associated with.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getActivity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AllowEnterTransitionOverlap">
      <MemberSignature Language="C#" Value="public virtual bool AllowEnterTransitionOverlap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEnterTransitionOverlap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllowEnterTransitionOverlap", "()Z", "GetGetAllowEnterTransitionOverlapHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAllowEnterTransitionOverlap", "(Z)V", "GetSetAllowEnterTransitionOverlap_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the the exit transition and enter transition overlap or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getAllowEnterTransitionOverlap()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether the the exit transition and enter transition overlap or not.
 When true, the enter transition will start as soon as possible. When false, the
 enter transition will wait until the exit transition completes before starting.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setAllowEnterTransitionOverlap(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the the exit transition and enter transition overlap or not.
 When true, the enter transition will start as soon as possible. When false, the
 enter transition will wait until the exit transition completes before starting.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReturnTransitionOverlap">
      <MemberSignature Language="C#" Value="public virtual bool AllowReturnTransitionOverlap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReturnTransitionOverlap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllowReturnTransitionOverlap", "()Z", "GetGetAllowReturnTransitionOverlapHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAllowReturnTransitionOverlap", "(Z)V", "GetSetAllowReturnTransitionOverlap_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the the return transition and reenter transition overlap or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getAllowReturnTransitionOverlap()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether the the return transition and reenter transition overlap or not.
 When true, the reenter transition will start as soon as possible. When false, the
 reenter transition will wait until the return transition completes before starting.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setAllowReturnTransitionOverlap(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the the return transition and reenter transition overlap or not.
 When true, the reenter transition will start as soon as possible. When false, the
 reenter transition will wait until the return transition completes before starting.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public Android.OS.Bundle Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Bundle Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getArguments", "()Landroid/os/Bundle;", "GetGetArgumentsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setArguments", "(Landroid/os/Bundle;)V", "GetSetArguments_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the arguments supplied to <c><see cref="P:Android.App.Fragment.Arguments" /></c>, if any.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getArguments()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the arguments supplied to <c><see cref="P:Android.App.Fragment.Arguments" /></c>, if any.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setArguments(android.os.Bundle)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Supply the construction arguments for this fragment.  This can only
 be called before the fragment has been attached to its activity; that
 is, you should call it immediately after constructing the fragment.  The
 arguments supplied here will be retained across fragment destroy and
 creation.
</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ChildFragmentManager">
      <MemberSignature Language="C#" Value="public Android.App.FragmentManager ChildFragmentManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.FragmentManager ChildFragmentManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChildFragmentManager", "()Landroid/app/FragmentManager;", "GetGetChildFragmentManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FragmentManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a private FragmentManager for placing and managing Fragments
 inside of this Fragment.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a private FragmentManager for placing and managing Fragments
 inside of this Fragment.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getChildFragmentManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (string prefix, Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(string prefix, class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_lang_String_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prefix">Text to print at the front of each line.</param>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
 closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the Fragments's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the Fragments's state into the given stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="EnterTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition EnterTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition EnterTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getEnterTransition", "()Landroid/transition/Transition;", "GetGetEnterTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setEnterTransition", "(Landroid/transition/Transition;)V", "GetSetEnterTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Transition that will be used to move Views into the initial scene.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getEnterTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the Transition that will be used to move Views into the initial scene. The entering
 Views will be those that are regular Views or ViewGroups that have
 <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as entering is governed by changing visibility from
 <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c> to <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setEnterTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used to move Views into the initial scene. The entering
 Views will be those that are regular Views or ViewGroups that have
 <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as entering is governed by changing visibility from
 <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c> to <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c>. If <c>transition</c> is null,
 entering Views will remain unaffected.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (Java.Lang.Object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(class Java.Lang.Object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("equals", "(Ljava/lang/Object;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o">the object to compare this instance with.</param>
        <summary>Subclasses can not override equals().</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses can not override equals().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#equals(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ExitTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExitTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition ExitTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExitTransition", "()Landroid/transition/Transition;", "GetGetExitTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setExitTransition", "(Landroid/transition/Transition;)V", "GetSetExitTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Transition that will be used to move Views out of the scene when the
 fragment is removed, hidden, or detached when not popping the back stack.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getExitTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the Transition that will be used to move Views out of the scene when the
 fragment is removed, hidden, or detached when not popping the back stack.
 The exiting Views will be those that are regular Views or ViewGroups that
 have <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as exiting is governed by changing visibility
 from <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If transition is null, the views will
 remain unaffected.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setExitTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used to move Views out of the scene when the
 fragment is removed, hidden, or detached when not popping the back stack.
 The exiting Views will be those that are regular Views or ViewGroups that
 have <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as exiting is governed by changing visibility
 from <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If transition is null, the views will
 remain unaffected.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FragmentManager">
      <MemberSignature Language="C#" Value="public Android.App.FragmentManager FragmentManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.FragmentManager FragmentManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFragmentManager", "()Landroid/app/FragmentManager;", "GetGetFragmentManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FragmentManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the FragmentManager for interacting with fragments associated
 with this fragment's activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the FragmentManager for interacting with fragments associated
 with this fragment's activity.  Note that this will be non-null slightly
 before <c><see cref="P:Android.App.Fragment.Activity" /></c>, during the time from when the fragment is
 placed in a <c><see cref="T:Android.App.FragmentTransaction" /></c> until it is committed and
 attached to its activity.

 </para>
          <para tool="javadoc-to-mdoc">If this Fragment is a child of another Fragment, the FragmentManager
 returned here will be the parent's <c><see cref="P:Android.App.Fragment.ChildFragmentManager" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getFragmentManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hashCode", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses can not override hashCode().</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses can not override hashCode().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#hashCode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (int resId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(int32 resId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getString", "(I)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resId">Resource id for the string
</param>
        <summary>Return a localized string from the application's package's
 default string table.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a localized string from the application's package's
 default string table.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getString(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (int resId, Java.Lang.Object[] formatArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(int32 resId, class Java.Lang.Object[] formatArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getString", "(I[Ljava/lang/Object;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resId" Type="System.Int32" />
        <Parameter Name="formatArgs" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resId">To be added.</param>
        <param name="formatArgs">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int resId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetText(int32 resId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetTextFormatted (int resId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.ICharSequence GetTextFormatted(int32 resId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getText", "(I)Ljava/lang/CharSequence;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resId">Resource id for the CharSequence text
</param>
        <summary>Return a localized, styled CharSequence from the application's package's
 default string table.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a localized, styled CharSequence from the application's package's
 default string table.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getText(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()I", "GetGetIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the identifier this fragment is known by.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the identifier this fragment is known by.  This is either
 the android:id value supplied in a layout or the container view ID
 supplied when adding the fragment.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Instantiate">
      <MemberSignature Language="C#" Value="public static Android.App.Fragment Instantiate (Android.Content.Context context, string fname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.Fragment Instantiate(class Android.Content.Context context, string fname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("instantiate", "(Landroid/content/Context;Ljava/lang/String;)Landroid/app/Fragment;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Fragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="fname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="fname">To be added.</param>
        <summary tool="true">Like <c><see cref="M:Android.App.Fragment.Instantiate(Android.Content.Context,System.String,System.String)" /></c> but with a null
 argument Bundle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.Fragment.Instantiate(Android.Content.Context,System.String,System.String)" /></c> but with a null
 argument Bundle.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#instantiate(android.content.Context, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Instantiate">
      <MemberSignature Language="C#" Value="public static Android.App.Fragment Instantiate (Android.Content.Context context, string fname, Android.OS.Bundle args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.Fragment Instantiate(class Android.Content.Context context, string fname, class Android.OS.Bundle args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("instantiate", "(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)Landroid/app/Fragment;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Fragment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="fname" Type="System.String" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="context">The calling context being used to instantiate the fragment.
 This is currently just used to get its ClassLoader.</param>
        <param name="fname">The class name of the fragment to instantiate.</param>
        <param name="args">Bundle of arguments to supply to the fragment, which it
 can retrieve with <c><see cref="P:Android.App.Fragment.Arguments" /></c>.  May be null.</param>
        <summary>Create a new instance of a Fragment with the given class name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new instance of a Fragment with the given class name.  This is
 the same as calling its empty constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#instantiate(android.content.Context, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Java.Lang.InstantiationException">If there is a failure in instantiating
 the given fragment class.  This is a runtime exception; it is not
 normally expected to happen.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAdded">
      <MemberSignature Language="C#" Value="public bool IsAdded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAdded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAdded", "()Z", "GetIsAddedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the fragment is currently added to its activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the fragment is currently added to its activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isAdded()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsDetached">
      <MemberSignature Language="C#" Value="public bool IsDetached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDetached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDetached", "()Z", "GetIsDetachedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the fragment has been explicitly detached from the UI.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the fragment has been explicitly detached from the UI.
 That is, <c><see cref="M:Android.App.FragmentTransaction.Detach(Android.App.Fragment)" /></c> has been used on it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isDetached()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHidden", "()Z", "GetIsHiddenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the fragment has been hidden.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the fragment has been hidden.  By default fragments
 are shown.  You can find out about changes to this state with
 <c><see cref="M:Android.App.Fragment.OnHiddenChanged(System.Boolean)" /></c>.  Note that the hidden state is orthogonal
 to other states -- that is, to be visible to the user, a fragment
 must be both started and not hidden.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isHidden()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsInLayout">
      <MemberSignature Language="C#" Value="public bool IsInLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInLayout", "()Z", "GetIsInLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">Return true if the layout is included as part of an activity view
 hierarchy via the &lt;fragment&gt; tag.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the layout is included as part of an activity view
 hierarchy via the &lt;fragment&gt; tag.  This will always be true when
 fragments are created through the &lt;fragment&gt; tag, <i>except</i>
 in the case where an old fragment is restored from a previous state and
 it does not appear in the layout of the current state.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isInLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsRemoving">
      <MemberSignature Language="C#" Value="public bool IsRemoving { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRemoving" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRemoving", "()Z", "GetIsRemovingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if this fragment is currently being removed from its
 activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if this fragment is currently being removed from its
 activity.  This is  <i>not</i> whether its activity is finishing, but
 rather whether it is in the process of being removed from its activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isRemoving()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsResumed">
      <MemberSignature Language="C#" Value="public bool IsResumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isResumed", "()Z", "GetIsResumedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the fragment is in the resumed state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the fragment is in the resumed state.  This is true
 for the duration of <c><see cref="M:Android.App.Fragment.OnResume" /></c> and <c><see cref="M:Android.App.Fragment.OnPause" /></c> as well.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isResumed()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isVisible", "()Z", "GetIsVisibleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the fragment is currently visible to the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the fragment is currently visible to the user.  This means
 it: (1) has been added, (2) has its view attached to the window, and 
 (3) is not hidden.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#isVisible()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="LoaderManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.LoaderManager LoaderManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.LoaderManager LoaderManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoaderManager", "()Landroid/app/LoaderManager;", "GetGetLoaderManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.LoaderManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the LoaderManager for this fragment, creating it if needed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the LoaderManager for this fragment, creating it if needed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getLoaderManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActivityCreated">
      <MemberSignature Language="C#" Value="public virtual void OnActivityCreated (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityCreated(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActivityCreated", "(Landroid/os/Bundle;)V", "GetOnActivityCreated_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the fragment is being re-created from
 a previous saved state, this is the state.
</param>
        <summary>Called when the fragment's activity has been created and this
 fragment's view hierarchy instantiated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the fragment's activity has been created and this
 fragment's view hierarchy instantiated.  It can be used to do final
 initialization once these pieces are in place, such as retrieving
 views or restoring state.  It is also useful for fragments that use
 <c><see cref="P:Android.App.Fragment.RetainInstance" /></c> to retain their instance,
 as this callback tells the fragment when it is fully associated with
 the new activity instance.  This is called after <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>
 and before <c><see cref="M:Android.App.Fragment.OnViewStateRestored(Android.OS.Bundle)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onActivityCreated(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActivityResult">
      <MemberSignature Language="C#" Value="public virtual void OnActivityResult (int requestCode, Android.App.Result resultCode, Android.Content.Intent data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityResult(int32 requestCode, valuetype Android.App.Result resultCode, class Android.Content.Intent data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActivityResult", "(IILandroid/content/Intent;)V", "GetOnActivityResult_IILandroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="requestCode">The integer request code originally supplied to
                    startActivityForResult(), allowing you to identify who this
                    result came from.</param>
        <param name="resultCode">The integer result code returned by the child activity
                   through its setResult().</param>
        <param name="data">An Intent, which can return result data to the caller
               (various data can be attached to Intent "extras").
</param>
        <summary>Receive the result from a previous call to
 <c><see cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive the result from a previous call to
 <c><see cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.  This follows the
 related Activity API as described there in
 <c><see cref="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onActivityResult(int, int, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnAttach">
      <MemberSignature Language="C#" Value="public virtual void OnAttach (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttach(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAttach", "(Landroid/app/Activity;)V", "GetOnAttach_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onAttach(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.
</param>
        <summary>Called by the system when the device configuration changes while your
 component is running.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the system when the device configuration changes while your
 component is running.  Note that, unlike activities, other components
 are never restarted when a configuration changes: they must always deal
 with the results of the change, such as by re-retrieving resources.

 </para>
          <para tool="javadoc-to-mdoc">At the time that this function has been called, your Resources
 object will have been updated to return resource values matching the
 new configuration.

 </para>
          <para tool="javadoc-to-mdoc">For more information, read <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/runtime-changes.html">Handling Runtime Changes</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnContextItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnContextItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnContextItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContextItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnContextItemSelected_Landroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The context menu item that was selected.</param>
        <summary>This hook is called whenever an item in a context menu is selected.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever an item in a context menu is selected. The
 default implementation simply returns false to have the normal processing
 happen (calling the item's Runnable or sending a message to its Handler
 as appropriate). You can use this method for any items for which you
 would like to do processing without those other facilities.
 </para>
          <para tool="javadoc-to-mdoc">
 Use <c><see cref="P:Android.Views.IMenuItem.MenuInfo" /></c> to get extra information set by the
 View that added this menu item.
 </para>
          <para tool="javadoc-to-mdoc">
 Derived classes should call through to the base class for it to perform
 the default menu handling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onContextItemSelected(android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public virtual void OnCreate (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;)V", "GetOnCreate_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the fragment is being re-created from
 a previous saved state, this is the state.
</param>
        <summary>Called to do initial creation of a fragment.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to do initial creation of a fragment.  This is called after
 <c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c> and before
 <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Note that this can be called while the fragment's activity is
 still in the process of being created.  As such, you can not rely
 on things like the activity's content view hierarchy being initialized
 at this point.  If you want to do work once the activity itself is
 created, see <c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onCreate(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAnimator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator OnCreateAnimator (Android.App.FragmentTransit transit, bool enter, int nextAnim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator OnCreateAnimator(valuetype Android.App.FragmentTransit transit, bool enter, int32 nextAnim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateAnimator", "(IZI)Landroid/animation/Animator;", "GetOnCreateAnimator_IZIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transit" Type="Android.App.FragmentTransit">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="enter" Type="System.Boolean" />
        <Parameter Name="nextAnim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="transit">To be added.</param>
        <param name="enter">To be added.</param>
        <param name="nextAnim">To be added.</param>
        <summary>Called when a fragment loads an animation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a fragment loads an animation.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onCreateAnimator(int, boolean, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateContextMenu">
      <MemberSignature Language="C#" Value="public virtual void OnCreateContextMenu (Android.Views.IContextMenu menu, Android.Views.View v, Android.Views.IContextMenuContextMenuInfo menuInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateContextMenu(class Android.Views.IContextMenu menu, class Android.Views.View v, class Android.Views.IContextMenuContextMenuInfo menuInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateContextMenu", "(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V", "GetOnCreateContextMenu_Landroid_view_ContextMenu_Landroid_view_View_Landroid_view_ContextMenu_ContextMenuInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="menuInfo" Type="Android.Views.IContextMenuContextMenuInfo" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu that is being built</param>
        <param name="v">The view for which the context menu is being built</param>
        <param name="menuInfo">Extra information about the item for which the
            context menu should be shown. This information will vary
            depending on the class of v.
</param>
        <summary>Called when a context menu for the <c>view</c> is about to be shown.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a context menu for the <c>view</c> is about to be shown.
 Unlike <c><see cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu,Android.Views.MenuInflater)" /></c>, this will be called every
 time the context menu is about to be shown and should be populated for
 the view (or item inside the view for <c><see cref="T:Android.Widget.AdapterView" /></c> subclasses,
 this can be found in the <c>menuInfo</c>)).
 </para>
          <para tool="javadoc-to-mdoc">
 Use <c><see cref="M:Android.App.Fragment.OnContextItemSelected(Android.Views.IMenuItem)" /></c> to know when an
 item has been selected.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation calls up to
 <c><see cref="M:Android.App.Activity.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.View)" /></c>, though
 you can not call this implementation if you don't want that behavior.
 </para>
          <para tool="javadoc-to-mdoc">
 It is not safe to hold onto the context menu after this method returns.
 Called when the context menu for this view is being built. It is not
 safe to hold onto the menu after this method returns.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void OnCreateOptionsMenu (Android.Views.IMenu menu, Android.Views.MenuInflater inflater);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateOptionsMenu(class Android.Views.IMenu menu, class Android.Views.MenuInflater inflater) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateOptionsMenu", "(Landroid/view/Menu;Landroid/view/MenuInflater;)V", "GetOnCreateOptionsMenu_Landroid_view_Menu_Landroid_view_MenuInflater_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
        <Parameter Name="inflater" Type="Android.Views.MenuInflater" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu in which you place your items.</param>
        <param name="inflater">To be added.</param>
        <summary>Initialize the contents of the Activity's standard options menu.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initialize the contents of the Activity's standard options menu.  You
 should place your menu items in to <format type="text/html"><var>menu</var></format>.  For this method
 to be called, you must have first called <c><see cref="M:Android.App.Fragment.SetHasOptionsMenu(System.Boolean)" /></c>.  See
 <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c>
 for more information.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onCreateOptionsMenu(android.view.Menu, android.view.MenuInflater)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Fragment.SetHasOptionsMenu(System.Boolean)" />
        <altmember cref="M:Android.App.Fragment.OnPrepareOptionsMenu(Android.Views.IMenu)" />
        <altmember cref="M:Android.App.Fragment.OnOptionsItemSelected(Android.Views.IMenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreateView (Android.Views.LayoutInflater inflater, Android.Views.ViewGroup container, Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateView(class Android.Views.LayoutInflater inflater, class Android.Views.ViewGroup container, class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateView", "(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;", "GetOnCreateView_Landroid_view_LayoutInflater_Landroid_view_ViewGroup_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inflater" Type="Android.Views.LayoutInflater" />
        <Parameter Name="container" Type="Android.Views.ViewGroup" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="inflater">The LayoutInflater object that can be used to inflate
 any views in the fragment,</param>
        <param name="container">If non-null, this is the parent view that the fragment's
 UI should be attached to.  The fragment should not add the view itself,
 but this can be used to generate the LayoutParams of the view.</param>
        <param name="savedInstanceState">If non-null, this fragment is being re-constructed
 from a previous saved state as given here.</param>
        <summary>Called to have the fragment instantiate its user interface view.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to have the fragment instantiate its user interface view.
 This is optional, and non-graphical fragments can return null (which
 is the default implementation).  This will be called between
 <c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c> and <c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If you return a View from here, you will later be called in
 <c><see cref="M:Android.App.Fragment.OnDestroyView" /></c> when the view is being released.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroy">
      <MemberSignature Language="C#" Value="public virtual void OnDestroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDestroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDestroy", "()V", "GetOnDestroyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the fragment is no longer in use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the fragment is no longer in use.  This is called
 after <c><see cref="M:Android.App.Fragment.OnStop" /></c> and before <c><see cref="M:Android.App.Fragment.OnDetach" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onDestroy()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroyOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void OnDestroyOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDestroyOptionsMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDestroyOptionsMenu", "()V", "GetOnDestroyOptionsMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when this fragment's option menu items are no longer being
 included in the overall options menu.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when this fragment's option menu items are no longer being
 included in the overall options menu.  Receiving this call means that
 the menu needed to be rebuilt, but this fragment's items were not
 included in the newly built menu (its <c><see cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu,Android.Views.MenuInflater)" /></c>
 was not called).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onDestroyOptionsMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroyView">
      <MemberSignature Language="C#" Value="public virtual void OnDestroyView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDestroyView() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDestroyView", "()V", "GetOnDestroyViewHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the view previously created by <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> has
 been detached from the fragment.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the view previously created by <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> has
 been detached from the fragment.  The next time the fragment needs
 to be displayed, a new view will be created.  This is called
 after <c><see cref="M:Android.App.Fragment.OnStop" /></c> and before <c><see cref="M:Android.App.Fragment.OnDestroy" /></c>.  It is called
 <i>regardless</i> of whether <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> returned a
 non-null view.  Internally it is called after the view's state has
 been saved but before it has been removed from its parent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onDestroyView()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDetach">
      <MemberSignature Language="C#" Value="public virtual void OnDetach ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetach() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDetach", "()V", "GetOnDetachHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the fragment is no longer attached to its activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the fragment is no longer attached to its activity.  This
 is called after <c><see cref="M:Android.App.Fragment.OnDestroy" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onDetach()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnHiddenChanged">
      <MemberSignature Language="C#" Value="public virtual void OnHiddenChanged (bool hidden);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHiddenChanged(bool hidden) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onHiddenChanged", "(Z)V", "GetOnHiddenChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hidden" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hidden">True if the fragment is now hidden, false if it is not
 visible.
</param>
        <summary>Called when the hidden state (as returned by <c><see cref="P:Android.App.Fragment.IsHidden" /></c> of
 the fragment has changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the hidden state (as returned by <c><see cref="P:Android.App.Fragment.IsHidden" /></c> of
 the fragment has changed.  Fragments start out not hidden; this will
 be called whenever the fragment changes state from that.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onHiddenChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnInflate">
      <MemberSignature Language="C#" Value="public virtual void OnInflate (Android.Util.IAttributeSet attrs, Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInflate(class Android.Util.IAttributeSet attrs, class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInflate", "(Landroid/util/AttributeSet;Landroid/os/Bundle;)V", "GetOnInflate_Landroid_util_AttributeSet_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="attrs">To be added.</param>
        <param name="savedInstanceState">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onInflate(android.util.AttributeSet, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnInflate">
      <MemberSignature Language="C#" Value="public virtual void OnInflate (Android.App.Activity activity, Android.Util.IAttributeSet attrs, Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnInflate(class Android.App.Activity activity, class Android.Util.IAttributeSet attrs, class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInflate", "(Landroid/app/Activity;Landroid/util/AttributeSet;Landroid/os/Bundle;)V", "GetOnInflate_Landroid_app_Activity_Landroid_util_AttributeSet_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">The Activity that is inflating this fragment.</param>
        <param name="attrs">The attributes at the tag where the fragment is
 being created.</param>
        <param name="savedInstanceState">If the fragment is being re-created from
 a previous saved state, this is the state.
</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.  While
 the exact point at which this will be called is not defined, generally
 it will happen when all background process have been killed.
 That is, before reaching the point of killing processes hosting
 service and foreground UI that we would like to avoid killing.

 </para>
          <para tool="javadoc-to-mdoc">You should implement this method to release
 any caches or other unnecessary resources you may be holding on to.
 The system will perform a garbage collection for you after returning from this method.
 </para>
          <para tool="javadoc-to-mdoc">Preferably, you should implement <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> from
 <c><see cref="T:Android.Content.ComponentCallbacks2" /></c> to incrementally unload your resources based on various
 levels of memory demands.  That API is available for API level 14 and higher, so you should
 only use this <c><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" /></c> method as a fallback for older versions, which can be
 treated the same as <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> with the <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c> level.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onLowMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnOptionsItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnOptionsItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOptionsItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnOptionsItemSelected_Landroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The menu item that was selected.</param>
        <summary>This hook is called whenever an item in your options menu is selected.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever an item in your options menu is selected.
 The default implementation simply returns false to have the normal
 processing happen (calling the item's Runnable or sending a message to
 its Handler as appropriate).  You can use this method for any items
 for which you would like to do processing without those other
 facilities.

 </para>
          <para tool="javadoc-to-mdoc">Derived classes should call through to the base class for it to
 perform the default menu handling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onOptionsItemSelected(android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu, Android.Views.MenuInflater)" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsMenuClosed">
      <MemberSignature Language="C#" Value="public virtual void OnOptionsMenuClosed (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnOptionsMenuClosed(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOptionsMenuClosed", "(Landroid/view/Menu;)V", "GetOnOptionsMenuClosed_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
             onCreateOptionsMenu().
</param>
        <summary>This hook is called whenever the options menu is being closed (either by the user canceling
 the menu with the back/menu button, or when an item is selected).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the options menu is being closed (either by the user canceling
 the menu with the back/menu button, or when an item is selected).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onOptionsMenuClosed(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="public virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPause", "()V", "GetOnPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the Fragment is no longer resumed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the Fragment is no longer resumed.  This is generally
 tied to <c><see cref="M:Android.App.Activity.OnPause" /></c> of the containing
 Activity's lifecycle.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onPause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void OnPrepareOptionsMenu (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPrepareOptionsMenu(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareOptionsMenu", "(Landroid/view/Menu;)V", "GetOnPrepareOptionsMenu_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
             onCreateOptionsMenu().</param>
        <summary>Prepare the Screen's standard options menu to be displayed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare the Screen's standard options menu to be displayed.  This is
 called right before the menu is shown, every time it is shown.  You can
 use this method to efficiently enable/disable items or otherwise
 dynamically modify the contents.  See
 <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c>
 for more information.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onPrepareOptionsMenu(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Fragment.SetHasOptionsMenu(System.Boolean)" />
        <altmember cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu, Android.Views.MenuInflater)" />
      </Docs>
    </Member>
    <Member MemberName="OnResume">
      <MemberSignature Language="C#" Value="public virtual void OnResume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnResume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onResume", "()V", "GetOnResumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the fragment is visible to the user and actively running.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the fragment is visible to the user and actively running.
 This is generally
 tied to <c><see cref="M:Android.App.Activity.OnResume" /></c> of the containing
 Activity's lifecycle.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onResume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual void OnSaveInstanceState (Android.OS.Bundle outState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSaveInstanceState(class Android.OS.Bundle outState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="outState">Bundle in which to place your saved state.
</param>
        <summary>Called to ask the fragment to save its current dynamic state, so it
 can later be reconstructed in a new instance of its process is
 restarted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to ask the fragment to save its current dynamic state, so it
 can later be reconstructed in a new instance of its process is
 restarted.  If a new instance of the fragment later needs to be
 created, the data you place in the Bundle here will be available
 in the Bundle given to <c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c>,
 <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>, and
 <c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This corresponds to <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> and most of the discussion there
 applies here as well.  Note however: <i>this method may be called
 at any time before <c><see cref="M:Android.App.Fragment.OnDestroy" /></c></i>.  There are many situations
 where a fragment may be mostly torn down (such as when placed on the
 back stack with no UI showing), but its state will not be saved until
 its owning activity actually needs to save its state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onSaveInstanceState(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="public virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the Fragment is visible to the user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the Fragment is visible to the user.  This is generally
 tied to <c><see cref="M:Android.App.Activity.OnStart" /></c> of the containing
 Activity's lifecycle.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="public virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStop", "()V", "GetOnStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the Fragment is no longer started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the Fragment is no longer started.  This is generally
 tied to <c><see cref="M:Android.App.Activity.OnStop" /></c> of the containing
 Activity's lifecycle.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onStop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory" />
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.  This will
 happen for example when it goes in the background and there is not enough
 memory to keep as many background processes running as desired.  You
 should never compare to exact values of the level, since new intermediate
 values may be added -- you will typically want to compare if the value
 is greater or equal to a level you are interested in.

 </para>
          <para tool="javadoc-to-mdoc">To retrieve the processes current trim level at any point, you can
 use <c><see cref="M:Android.App.ActivityManager.GetMyMemoryState(.RunningAppProcessInfo)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onTrimMemory(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnViewCreated">
      <MemberSignature Language="C#" Value="public virtual void OnViewCreated (Android.Views.View view, Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnViewCreated(class Android.Views.View view, class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onViewCreated", "(Landroid/view/View;Landroid/os/Bundle;)V", "GetOnViewCreated_Landroid_view_View_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="view">The View returned by <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>.</param>
        <param name="savedInstanceState">If non-null, this fragment is being re-constructed
 from a previous saved state as given here.
</param>
        <summary>Called immediately after <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>
 has returned, but before any saved state has been restored in to the view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called immediately after <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>
 has returned, but before any saved state has been restored in to the view.
 This gives subclasses a chance to initialize themselves once
 they know their view hierarchy has been completely created.  The fragment's
 view hierarchy is not however attached to its parent at this point.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onViewCreated(android.view.View, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="OnViewStateRestored">
      <MemberSignature Language="C#" Value="public virtual void OnViewStateRestored (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnViewStateRestored(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onViewStateRestored", "(Landroid/os/Bundle;)V", "GetOnViewStateRestored_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the fragment is being re-created from
 a previous saved state, this is the state.
</param>
        <summary>Called when all saved state has been restored into the view hierarchy
 of the fragment.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when all saved state has been restored into the view hierarchy
 of the fragment.  This can be used to do initialization based on saved
 state that you are letting the view hierarchy track itself, such as
 whether check box widgets are currently checked.  This is called
 after <c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c> and before
 <c><see cref="M:Android.App.Fragment.OnStart" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#onViewStateRestored(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ParentFragment">
      <MemberSignature Language="C#" Value="public Android.App.Fragment ParentFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Fragment ParentFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParentFragment", "()Landroid/app/Fragment;", "GetGetParentFragmentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Fragment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the parent Fragment containing this Fragment.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the parent Fragment containing this Fragment.  If this Fragment
 is attached directly to an Activity, returns null.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getParentFragment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ReenterTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ReenterTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition ReenterTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReenterTransition", "()Landroid/transition/Transition;", "GetGetReenterTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReenterTransition", "(Landroid/transition/Transition;)V", "GetSetReenterTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Transition that will be used to move Views in to the scene when returning due
 to popping a back stack.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getReenterTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the Transition that will be used to move Views in to the scene when returning due
 to popping a back stack. The entering Views will be those that are regular Views
 or ViewGroups that have <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions
 will extend <c><see cref="T:Android.Transitions.Visibility" /></c> as exiting is governed by changing
 visibility from <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If transition is null,
 the views will remain unaffected. If nothing is set, the default will be to use the same
 transition as <c><see cref="P:Android.App.Fragment.ExitTransition" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setReenterTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used to move Views in to the scene when returning due
 to popping a back stack. The entering Views will be those that are regular Views
 or ViewGroups that have <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions
 will extend <c><see cref="T:Android.Transitions.Visibility" /></c> as exiting is governed by changing
 visibility from <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If transition is null,
 the views will remain unaffected. If nothing is set, the default will be to use the same
 transition as <c><see cref="P:Android.App.Fragment.ExitTransition" /></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void RegisterForContextMenu (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerForContextMenu", "(Landroid/view/View;)V", "GetRegisterForContextMenu_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should show a context menu.
</param>
        <summary>Registers a context menu to be shown for the given view (multiple views
 can show the context menu).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a context menu to be shown for the given view (multiple views
 can show the context menu). This method will set the
 <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html" /></c> on the view to this fragment, so
 <c><see cref="M:Android.App.Fragment.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.View)" /></c> will be
 called when it is time to show the context menu.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#registerForContextMenu(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Fragment.UnregisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public Android.Content.Res.Resources Resources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.Resources Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getResources", "()Landroid/content/res/Resources;", "GetGetResourcesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.Resources</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return <c>getActivity().getResources()</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return <c>getActivity().getResources()</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getResources()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RetainInstance">
      <MemberSignature Language="C#" Value="public bool RetainInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetainInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRetainInstance", "()Z", "GetGetRetainInstanceHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRetainInstance", "(Z)V", "GetSetRetainInstance_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getRetainInstance()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setRetainInstance(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Control whether a fragment instance is retained across Activity
 re-creation (such as from a configuration change).  This can only
 be used with fragments not in the back stack.  If set, the fragment
 lifecycle will be slightly different when an activity is recreated:
 <list type="bullet"><item><term><c><see cref="M:Android.App.Fragment.OnDestroy" /></c> will not be called (but <c><see cref="M:Android.App.Fragment.OnDetach" /></c> still
 will be, because the fragment is being detached from its current activity).
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c> will not be called since the fragment
 is not being re-created.
 </term></item><item><term><c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c> and <c><see cref="M:Android.App.Fragment.OnActivityCreated(Android.OS.Bundle)" /></c><format type="text/html"><b>will</b></format>
 still be called.
 </term></item></list></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ReturnTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ReturnTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition ReturnTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReturnTransition", "()Landroid/transition/Transition;", "GetGetReturnTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReturnTransition", "(Landroid/transition/Transition;)V", "GetSetReturnTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Transition that will be used to move Views out of the scene when the Fragment is
 preparing to be removed, hidden, or detached because of popping the back stack.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getReturnTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the Transition that will be used to move Views out of the scene when the Fragment is
 preparing to be removed, hidden, or detached because of popping the back stack. The exiting
 Views will be those that are regular Views or ViewGroups that have
 <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as entering is governed by changing visibility from
 <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If <c>transition</c> is null,
 entering Views will remain unaffected.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setReturnTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used to move Views out of the scene when the Fragment is
 preparing to be removed, hidden, or detached because of popping the back stack. The exiting
 Views will be those that are regular Views or ViewGroups that have
 <c><see cref="P:Android.Views.ViewGroup.TransitionGroup" /></c> return true. Typical Transitions will extend
 <c><see cref="T:Android.Transitions.Visibility" /></c> as entering is governed by changing visibility from
 <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> to <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>. If <c>transition</c> is null,
 entering Views will remain unaffected. If nothing is set, the default will be to
 use the same value as set in <c><see cref="P:Android.App.Fragment.EnterTransition" /></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnterSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetEnterSharedElementCallback (Android.App.SharedElementCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnterSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEnterSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetEnterSharedElementCallback_Landroid_app_SharedElementCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate the shared element transitions on this Fragment
                 when added not as a pop from the back stack.
</param>
        <summary>When custom transitions are used with Fragments, the enter transition callback
 is called when this Fragment is attached or detached when not popping the back stack.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When custom transitions are used with Fragments, the enter transition callback
 is called when this Fragment is attached or detached when not popping the back stack.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setEnterSharedElementCallback(android.app.SharedElementCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExitSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetExitSharedElementCallback (Android.App.SharedElementCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExitSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setExitSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetExitSharedElementCallback_Landroid_app_SharedElementCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate the shared element transitions on this Fragment
                 when added as a pop from the back stack.
</param>
        <summary>When custom transitions are used with Fragments, the exit transition callback
 is called when this Fragment is attached or detached when popping the back stack.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When custom transitions are used with Fragments, the exit transition callback
 is called when this Fragment is attached or detached when popping the back stack.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setExitSharedElementCallback(android.app.SharedElementCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHasOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void SetHasOptionsMenu (bool hasMenu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHasOptionsMenu(bool hasMenu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setHasOptionsMenu", "(Z)V", "GetSetHasOptionsMenu_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasMenu" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasMenu">If true, the fragment has menu items to contribute.
</param>
        <summary>Report that this fragment would like to participate in populating
 the options menu by receiving a call to <c><see cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu,Android.Views.MenuInflater)" /></c>
 and related methods.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Report that this fragment would like to participate in populating
 the options menu by receiving a call to <c><see cref="M:Android.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu,Android.Views.MenuInflater)" /></c>
 and related methods.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setHasOptionsMenu(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetInitialSavedState">
      <MemberSignature Language="C#" Value="public virtual void SetInitialSavedState (Android.App.Fragment.SavedState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInitialSavedState(class Android.App.Fragment/SavedState state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInitialSavedState", "(Landroid/app/Fragment$SavedState;)V", "GetSetInitialSavedState_Landroid_app_Fragment_SavedState_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Android.App.Fragment+SavedState" />
      </Parameters>
      <Docs>
        <param name="state">The state the fragment should be restored from.
</param>
        <summary>Set the initial saved state that this Fragment should restore itself
 from when first being constructed, as returned by
 <c><see cref="M:Android.App.FragmentManager.SaveFragmentInstanceState(Android.App.Fragment)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the initial saved state that this Fragment should restore itself
 from when first being constructed, as returned by
 <c><see cref="M:Android.App.FragmentManager.SaveFragmentInstanceState(Android.App.Fragment)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setInitialSavedState(android.app.Fragment.SavedState)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="SetMenuVisibility">
      <MemberSignature Language="C#" Value="public virtual void SetMenuVisibility (bool menuVisible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMenuVisibility(bool menuVisible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMenuVisibility", "(Z)V", "GetSetMenuVisibility_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuVisible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="menuVisible">The default is true, meaning the fragment's menu will
 be shown as usual.  If false, the user will not see the menu.
</param>
        <summary>Set a hint for whether this fragment's menu should be visible.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a hint for whether this fragment's menu should be visible.  This
 is useful if you know that a fragment has been placed in your view
 hierarchy so that the user can not currently seen it, so any menu items
 it has should also not be shown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setMenuVisibility(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetFragment">
      <MemberSignature Language="C#" Value="public virtual void SetTargetFragment (Android.App.Fragment fragment, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTargetFragment(class Android.App.Fragment fragment, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTargetFragment", "(Landroid/app/Fragment;I)V", "GetSetTargetFragment_Landroid_app_Fragment_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fragment">The fragment that is the target of this one.</param>
        <param name="requestCode">Optional request code, for convenience if you
 are going to call back with <c><see cref="M:Android.App.Fragment.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c>.
</param>
        <summary>Optional target for this fragment.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Optional target for this fragment.  This may be used, for example,
 if this fragment is being started by another, and when done wants to
 give a result back to the first.  The target set here is retained
 across instances via <c><see cref="M:Android.App.FragmentManager.PutFragment(Android.OS.Bundle,System.String,System.String)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setTargetFragment(android.app.Fragment, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SharedElementEnterTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition SharedElementEnterTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition SharedElementEnterTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSharedElementEnterTransition", "()Landroid/transition/Transition;", "GetGetSharedElementEnterTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSharedElementEnterTransition", "(Landroid/transition/Transition;)V", "GetSetSharedElementEnterTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the Transition that will be used for shared elements transferred into the content
 Scene.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getSharedElementEnterTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the Transition that will be used for shared elements transferred into the content
 Scene. Typical Transitions will affect size and location, such as
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c>. A null
 value will cause transferred shared elements to blink to the final position.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setSharedElementEnterTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used for shared elements transferred into the content
 Scene. Typical Transitions will affect size and location, such as
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c>. A null
 value will cause transferred shared elements to blink to the final position.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedElementReturnTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition SharedElementReturnTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Transition SharedElementReturnTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSharedElementReturnTransition", "()Landroid/transition/Transition;", "GetGetSharedElementReturnTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSharedElementReturnTransition", "(Landroid/transition/Transition;)V", "GetSetSharedElementReturnTransition_Landroid_transition_Transition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Transition that will be used for shared elements transferred back during a
 pop of the back stack.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getSharedElementReturnTransition()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the Transition that will be used for shared elements transferred back during a
 pop of the back stack. This Transition acts in the leaving Fragment.
 Typical Transitions will affect size and location, such as
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c>. A null
 value will cause transferred shared elements to blink to the final position.
 If no value is set, the default will be to use the same value as
 <c><see cref="P:Android.App.Fragment.SharedElementEnterTransition" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setSharedElementReturnTransition(android.transition.Transition)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the Transition that will be used for shared elements transferred back during a
 pop of the back stack. This Transition acts in the leaving Fragment.
 Typical Transitions will affect size and location, such as
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c>. A null
 value will cause transferred shared elements to blink to the final position.
 If no value is set, the default will be to use the same value as
 <c><see cref="P:Android.App.Fragment.SharedElementEnterTransition" /></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public virtual void StartActivity (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivity(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Landroid/content/Intent;)V", "GetStartActivity_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.
</param>
        <summary>Call <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c> from the fragment's
 containing Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c> from the fragment's
 containing Activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#startActivity(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public virtual void StartActivity (Android.Content.Intent intent, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivity(class Android.Content.Intent intent, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)V", "GetStartActivity_Landroid_content_Intent_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.
</param>
        <summary>Call <c><see cref="!:Android.App.Activity.startActivity(android.content.Intent,android.os.Bundle)" /></c> from the fragment's
 containing Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call <c><see cref="!:Android.App.Activity.startActivity(android.content.Intent,android.os.Bundle)" /></c> from the fragment's
 containing Activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#startActivity(android.content.Intent, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;I)V", "GetStartActivityForResult_Landroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <summary>Call <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> from the fragment's
 containing Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> from the fragment's
 containing Activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#startActivityForResult(android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityForResult_Landroid_content_Intent_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Call <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32,System.Int32)" /></c> from the fragment's
 containing Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32,System.Int32)" /></c> from the fragment's
 containing Activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#startActivityForResult(android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTag", "()Ljava/lang/String;", "GetGetTagHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the tag name of the fragment, if specified.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the tag name of the fragment, if specified.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getTag()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="TargetFragment">
      <MemberSignature Language="C#" Value="public Android.App.Fragment TargetFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Fragment TargetFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetFragment", "()Landroid/app/Fragment;", "GetGetTargetFragmentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Fragment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the target fragment set by <c><see cref="M:Android.App.Fragment.SetTargetFragment(Android.App.Fragment,System.Int32)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the target fragment set by <c><see cref="M:Android.App.Fragment.SetTargetFragment(Android.App.Fragment,System.Int32)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getTargetFragment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="TargetRequestCode">
      <MemberSignature Language="C#" Value="public int TargetRequestCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TargetRequestCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetRequestCode", "()I", "GetGetTargetRequestCodeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the target request code set by <c><see cref="M:Android.App.Fragment.SetTargetFragment(Android.App.Fragment,System.Int32)" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the target request code set by <c><see cref="M:Android.App.Fragment.SetTargetFragment(Android.App.Fragment,System.Int32)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getTargetRequestCode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void UnregisterForContextMenu (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterForContextMenu", "(Landroid/view/View;)V", "GetUnregisterForContextMenu_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should stop showing a context menu.
</param>
        <summary>Prevents a context menu to be shown for the given view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prevents a context menu to be shown for the given view. This method will
 remove the <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html" /></c> on the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#unregisterForContextMenu(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Fragment.RegisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="UserVisibleHint">
      <MemberSignature Language="C#" Value="public virtual bool UserVisibleHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserVisibleHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUserVisibleHint", "()Z", "GetGetUserVisibleHintHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setUserVisibleHint", "(Z)V", "GetSetUserVisibleHint_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getUserVisibleHint()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Fragment.html#setUserVisibleHint(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set a hint to the system about whether this fragment's UI is currently visible
 to the user. This hint defaults to true and is persistent across fragment instance
 state save and restore.

 </para>
          <para tool="javadoc-to-mdoc">An app may set this to false to indicate that the fragment's UI is
 scrolled out of visibility or is otherwise not directly visible to the user.
 This may be used by the system to prioritize operations such as fragment lifecycle updates
 or loader ordering behavior.</para>
        </remarks>
        <since version="Added in API level 15" />
        <altmember cref="P:Android.App.Fragment.UserVisibleHint" />
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getView", "()Landroid/view/View;", "GetGetViewHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the root view for the fragment's layout (the one returned by <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>),
 if provided.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the root view for the fragment's layout (the one returned by <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>),
 if provided.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Fragment.html#getView()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
