<Type Name="PendingIntent" FullName="Android.App.PendingIntent">
  <TypeSignature Language="C#" Value="public sealed class PendingIntent : Java.Lang.Object, Android.OS.IParcelable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PendingIntent extends Java.Lang.Object implements class Android.OS.IParcelable, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IParcelable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/PendingIntent", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A description of an Intent and target action to perform with it.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A description of an Intent and target action to perform with it.  Instances
 of this class are created with <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.App.PendingIntent.GetActivities(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, and <c><see cref="M:Android.App.PendingIntent.GetService(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>; the returned object can be
 handed to other applications so that they can perform the action you
 described on your behalf at a later time.

 </para>
      <para tool="javadoc-to-mdoc">By giving a PendingIntent to another application,
 you are granting it the right to perform the operation you have specified
 as if the other application was yourself (with the same permissions and
 identity).  As such, you should be careful about how you build the PendingIntent:
 almost always, for example, the base Intent you supply should have the component
 name explicitly set to one of your own components, to ensure it is ultimately
 sent there and nowhere else.

 </para>
      <para tool="javadoc-to-mdoc">A PendingIntent itself is simply a reference to a token maintained by
 the system describing the original data used to retrieve it.  This means
 that, even if its owning application's process is killed, the
 PendingIntent itself will remain usable from other processes that
 have been given it.  If the creating application later re-retrieves the
 same kind of PendingIntent (same operation, same Intent action, data,
 categories, and components, and same flags), it will receive a PendingIntent
 representing the same token if that is still valid, and can thus call
 <c><see cref="M:Android.App.PendingIntent.Cancel" /></c> to remove it.

 </para>
      <para tool="javadoc-to-mdoc">Because of this behavior, it is important to know when two Intents
 are considered to be the same for purposes of retrieving a PendingIntent.
 A common mistake people make is to create multiple PendingIntent objects
 with Intents that only vary in their "extra" contents, expecting to get
 a different PendingIntent each time.  This does <i>not</i> happen.  The
 parts of the Intent that are used for matching are the same ones defined
 by <c><see cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" /></c>.  If you use two
 Intent objects that are equivalent as per
 <c><see cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" /></c>, then you will get
 the same PendingIntent for both of them.

 </para>
      <para tool="javadoc-to-mdoc">There are two typical ways to deal with this.

 </para>
      <para tool="javadoc-to-mdoc">If you truly need multiple distinct PendingIntent objects active at
 the same time (such as to use as two notifications that are both shown
 at the same time), then you will need to ensure there is something that
 is different about them to associate them with different PendingIntents.
 This may be any of the Intent attributes considered by
 <c><see cref="M:Android.Content.Intent.FilterEquals(Android.Content.Intent)" /></c>, or different
 request code integers supplied to <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, <c><see cref="M:Android.App.PendingIntent.GetActivities(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, or <c><see cref="M:Android.App.PendingIntent.GetService(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">If you only need one PendingIntent active at a time for any of the
 Intents you will use, then you can alternatively use the flags
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c> to either
 cancel or modify whatever current PendingIntent is associated with the
 Intent you are supplying.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/PendingIntent.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel a currently active PendingIntent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancel a currently active PendingIntent.  Only the original application
 owning a PendingIntent can cancel it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#cancel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public static Android.OS.IParcelableCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.IParcelableCreator Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CREATOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelableCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#CREATOR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreatorPackage">
      <MemberSignature Language="C#" Value="public string CreatorPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreatorPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorPackage", "()Ljava/lang/String;", "GetGetCreatorPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the package name of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.  The returned string is supplied by the system, so
 that an application can not spoof its package.

 </para>
          <para tool="javadoc-to-mdoc">Be careful about how you use this.  All this tells you is
 who created the PendingIntent.  It does <i>not</i> tell you who
 handed the PendingIntent to you: that is, PendingIntent objects are intended to be
 passed between applications, so the PendingIntent you receive from an application
 could actually be one it received from another application, meaning the result
 you get here will identify the original application.  Because of this, you should
 only use this information to identify who you expect to be interacting with
 through a <c><see cref="M:Android.App.PendingIntent.Send" /></c> call, not who gave you the PendingIntent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getCreatorPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUid">
      <MemberSignature Language="C#" Value="public int CreatorUid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CreatorUid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorUid", "()I", "GetGetCreatorUidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the uid of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the uid of the application that created this
 PendingIntent, that is the identity under which you will actually be
 sending the Intent.  The returned integer is supplied by the system, so
 that an application can not spoof its uid.

 </para>
          <para tool="javadoc-to-mdoc">Be careful about how you use this.  All this tells you is
 who created the PendingIntent.  It does <i>not</i> tell you who
 handed the PendingIntent to you: that is, PendingIntent objects are intended to be
 passed between applications, so the PendingIntent you receive from an application
 could actually be one it received from another application, meaning the result
 you get here will identify the original application.  Because of this, you should
 only use this information to identify who you expect to be interacting with
 through a <c><see cref="M:Android.App.PendingIntent.Send" /></c> call, not who gave you the PendingIntent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getCreatorUid()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUserHandle">
      <MemberSignature Language="C#" Value="public Android.OS.UserHandle CreatorUserHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.UserHandle CreatorUserHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCreatorUserHandle", "()Landroid/os/UserHandle;", "GetGetCreatorUserHandleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the user handle of the application that created this
 PendingIntent, that is the user under which you will actually be
 sending the Intent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the user handle of the application that created this
 PendingIntent, that is the user under which you will actually be
 sending the Intent.  The returned UserHandle is supplied by the system, so
 that an application can not spoof its user.  See
 <c><see cref="M:Android.OS.Process.MyUserHandle" /></c> for
 more explanation of user handles.

 </para>
          <para tool="javadoc-to-mdoc">Be careful about how you use this.  All this tells you is
 who created the PendingIntent.  It does <i>not</i> tell you who
 handed the PendingIntent to you: that is, PendingIntent objects are intended to be
 passed between applications, so the PendingIntent you receive from an application
 could actually be one it received from another application, meaning the result
 you get here will identify the original application.  Because of this, you should
 only use this information to identify who you expect to be interacting with
 through a <c><see cref="M:Android.App.PendingIntent.Send" /></c> call, not who gave you the PendingIntent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getCreatorUserHandle()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DescribeContents">
      <MemberSignature Language="C#" Value="public int DescribeContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DescribeContents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("describeContents", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#describeContents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetActivities">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetActivities (Android.Content.Context context, int requestCode, Android.Content.Intent[] intents, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivities(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent[] intents, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;I)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
 the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intents">Array of Intents of the activities to be launched.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <summary>Like <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, but allows an
 array of Intents to be supplied.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, but allows an
 array of Intents to be supplied.  The last Intent in the array is
 taken as the primary key for the PendingIntent, like the single Intent
 given to <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.  Upon sending
 the resulting PendingIntent, all of the Intents are started in the same
 way as they would be by passing them to <c><see cref="M:Android.Content.Context.StartActivities(Android.Content.Intent[])" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 The <i>first</i> intent in the array will be started outside of the context of an
 existing activity, so you must use the <c><see cref="F:Android.Content.ActivityFlags.NewTask" tool="ReplaceLinkValue" /></c> launch flag in the Intent.  (Activities after
 the first in the array are started in the context of the previous activity
 in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
 </para>
          <para tool="javadoc-to-mdoc">
 The <i>last</i> intent in the array represents the key for the
 PendingIntent.  In other words, it is the significant element for matching
 (as done with the single intent given to <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 its content will be the subject of replacement by
 <c><see cref="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.App.Result)" /></c> and <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>, etc.
 This is because it is the most specific of the supplied intents, and the
 UI the user actually sees when the intents are started.
 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c> objects
 you supply here should almost always be <i>explicit intents</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetActivities">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetActivities (Android.Content.Context context, int requestCode, Android.Content.Intent[] intents, Android.App.PendingIntentFlags flags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivities(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent[] intents, valuetype Android.App.PendingIntentFlags flags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
 the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intents">Array of Intents of the activities to be launched.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <param name="options">To be added.</param>
        <summary>Like <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, but allows an
 array of Intents to be supplied.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, but allows an
 array of Intents to be supplied.  The last Intent in the array is
 taken as the primary key for the PendingIntent, like the single Intent
 given to <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.  Upon sending
 the resulting PendingIntent, all of the Intents are started in the same
 way as they would be by passing them to <c><see cref="M:Android.Content.Context.StartActivities(Android.Content.Intent[])" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 The <i>first</i> intent in the array will be started outside of the context of an
 existing activity, so you must use the <c><see cref="F:Android.Content.ActivityFlags.NewTask" tool="ReplaceLinkValue" /></c> launch flag in the Intent.  (Activities after
 the first in the array are started in the context of the previous activity
 in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
 </para>
          <para tool="javadoc-to-mdoc">
 The <i>last</i> intent in the array represents the key for the
 PendingIntent.  In other words, it is the significant element for matching
 (as done with the single intent given to <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 its content will be the subject of replacement by
 <c><see cref="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.App.Result)" /></c> and <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>, etc.
 This is because it is the most specific of the supplied intents, and the
 UI the user actually sees when the intents are started.
 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c> objects
 you supply here should almost always be <i>explicit intents</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetActivity">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetActivity (Android.Content.Context context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivity(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
 the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">Intent of the activity to be launched.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will start a new activity, like calling
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a PendingIntent that will start a new activity, like calling
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>.
 Note that the activity will be started outside of the context of an
 existing activity, so you must use the <c><see cref="F:Android.Content.ActivityFlags.NewTask" tool="ReplaceLinkValue" /></c> launch flag in the Intent.

 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c>
 you supply here should almost always be an <i>explicit intent</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetActivity">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetActivity (Android.Content.Context context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivity(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
 the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">Intent of the activity to be launched.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <param name="options">Additional options for how the Activity should be started.
 May be null if there are no options.</param>
        <summary>Retrieve a PendingIntent that will start a new activity, like calling
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a PendingIntent that will start a new activity, like calling
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>.
 Note that the activity will be started outside of the context of an
 existing activity, so you must use the <c><see cref="F:Android.Content.ActivityFlags.NewTask" tool="ReplaceLinkValue" /></c> launch flag in the Intent.

 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c>
 you supply here should almost always be an <i>explicit intent</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcast">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetBroadcast (Android.Content.Context context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetBroadcast(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getBroadcast", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should perform
 the broadcast.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">The Intent to be broadcast.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will perform a broadcast, like calling
 <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a PendingIntent that will perform a broadcast, like calling
 <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c>
 you supply here should almost always be an <i>explicit intent</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getBroadcast(android.content.Context, int, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent GetService (Android.Content.Context context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetService(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getService", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
 the service.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">An Intent describing the service to be started.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>, <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>, <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will start a service, like calling
 <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a PendingIntent that will start a service, like calling
 <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c>.  The start
 arguments given to the service will come from the extras of the Intent.

 </para>
          <para tool="javadoc-to-mdoc">For security reasons, the <c><see cref="T:Android.Content.Intent" /></c>
 you supply here should almost always be an <i>explicit intent</i>,
 that is specify an explicit component to be delivered to through
 <c><see cref="!:Android.Content.Intent.setClass(android.content.Context, java.lang.Class&lt;?&gt;)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getService(android.content.Context, int, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IntentSender">
      <MemberSignature Language="C#" Value="public Android.Content.IntentSender IntentSender { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.IntentSender IntentSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getIntentSender", "()Landroid/content/IntentSender;", "GetGetIntentSenderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.IntentSender</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a IntentSender object that wraps the existing sender of the PendingIntent</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a IntentSender object that wraps the existing sender of the PendingIntent</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getIntentSender()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="ReadPendingIntentOrNullFromParcel">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent ReadPendingIntentOrNullFromParcel (Android.OS.Parcel in);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent ReadPendingIntentOrNullFromParcel(class Android.OS.Parcel in) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readPendingIntentOrNullFromParcel", "(Landroid/os/Parcel;)Landroid/app/PendingIntent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="in">The Parcel containing the written Messenger.</param>
        <summary>Convenience function for reading either a Messenger or null pointer from
 a Parcel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience function for reading either a Messenger or null pointer from
 a Parcel.  You must have previously written the Messenger with
 <c><see cref="M:Android.App.PendingIntent.WritePendingIntentOrNullToParcel(Android.App.PendingIntent,Android.OS.Parcel)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#readPendingIntentOrNullFromParcel(android.os.Parcel)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.App.Result code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(valuetype Android.App.Result code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.App.Result code, Android.App.PendingIntent.IOnFinished onFinished, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(valuetype Android.App.Result code, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(ILandroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <summary>Perform the operation associated with this PendingIntent, allowing the
 caller to be notified when the send has completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent, allowing the
 caller to be notified when the send has completed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send(int, android.app.PendingIntent.OnFinished, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context context, Android.App.Result code, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> for information on how this is applied to the
 original Intent. If flag <c><see cref="!:Android.App.PendingIntent.FLAG_IMMUTABLE" /></c> was set when this
 pending intent was created, this argument will be ignored.</param>
        <summary>Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send(android.content.Context, int, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context context, Android.App.Result code, Android.Content.Intent intent, Android.App.PendingIntent.IOnFinished onFinished, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.
 If flag <c><see cref="!:Android.App.PendingIntent.FLAG_IMMUTABLE" /></c> was set when this pending intent was
 created, this argument will be ignored.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <summary>Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.

 </para>
          <para tool="javadoc-to-mdoc">For the intent parameter, a PendingIntent
 often has restrictions on which fields can be supplied here, based on
 how the PendingIntent was retrieved in <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, or <c><see cref="M:Android.App.PendingIntent.GetService(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send(android.content.Context, int, android.content.Intent, android.app.PendingIntent.OnFinished, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result, .IOnFinished, .IOnFinished)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context context, Android.App.Result code, Android.Content.Intent intent, Android.App.PendingIntent.IOnFinished onFinished, Android.OS.Handler handler, string requiredPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler, string requiredPermission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="requiredPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.
 If flag <c><see cref="!:Android.App.PendingIntent.FLAG_IMMUTABLE" /></c> was set when this pending intent was
 created, this argument will be ignored.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <param name="requiredPermission">Name of permission that a recipient of the PendingIntent
 is required to hold.  This is only valid for broadcast intents, and
 corresponds to the permission argument in
 <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent,System.String)" /></c>.
 If null, no permission is required.</param>
        <summary>Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform the operation associated with this PendingIntent, allowing the
 caller to specify information about the Intent to use and be notified
 when the send has completed.

 </para>
          <para tool="javadoc-to-mdoc">For the intent parameter, a PendingIntent
 often has restrictions on which fields can be supplied here, based on
 how the PendingIntent was retrieved in <c><see cref="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>,
 <c><see cref="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>, or <c><see cref="M:Android.App.PendingIntent.GetService(Android.Content.Context,System.Int32,System.Int32,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#send(android.content.Context, int, android.content.Intent, android.app.PendingIntent.OnFinished, android.os.Handler, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="!:NoType:android/app/PendingIntent$CanceledException;Href=../../../reference/android/app/PendingIntent.CanceledException.html">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result, .IOnFinished, .IOnFinished)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="TargetPackage">
      <MemberSignature Language="C#" Value="public string TargetPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetPackage", "()Ljava/lang/String;", "GetGetTargetPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#getTargetPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePendingIntentOrNullToParcel">
      <MemberSignature Language="C#" Value="public static void WritePendingIntentOrNullToParcel (Android.App.PendingIntent sender, Android.OS.Parcel out);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WritePendingIntentOrNullToParcel(class Android.App.PendingIntent sender, class Android.OS.Parcel out) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writePendingIntentOrNullToParcel", "(Landroid/app/PendingIntent;Landroid/os/Parcel;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Android.App.PendingIntent" />
        <Parameter Name="out" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="sender">The PendingIntent to write, or null.</param>
        <param name="out">Where to write the PendingIntent.
</param>
        <summary>Convenience function for writing either a PendingIntent or null pointer to
 a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience function for writing either a PendingIntent or null pointer to
 a Parcel.  You must use this with <c><see cref="M:Android.App.PendingIntent.ReadPendingIntentOrNullFromParcel(Android.OS.Parcel)" /></c>
 for later reading it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#writePendingIntentOrNullToParcel(android.app.PendingIntent, android.os.Parcel)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WriteToParcel">
      <MemberSignature Language="C#" Value="public void WriteToParcel (Android.OS.Parcel out, Android.OS.ParcelableWriteFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToParcel(class Android.OS.Parcel out, valuetype Android.OS.ParcelableWriteFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.ParcelableWriteFlags" />
      </Parameters>
      <Docs>
        <param name="out">The Parcel in which the object should be written.</param>
        <param name="flags">Additional flags about how the object should be written.
 May be 0 or <c><see cref="F:Android.OS.Parcelable.ParcelableWriteReturnValue" /></c>.
</param>
        <summary>Flatten this object in to a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flatten this object in to a Parcel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/PendingIntent.html#writeToParcel(android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
