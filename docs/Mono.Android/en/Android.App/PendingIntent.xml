<Type Name="PendingIntent" FullName="Android.App.PendingIntent">
  <TypeSignature Language="C#" Value="public sealed class PendingIntent : Java.Lang.Object, Android.OS.IParcelable, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PendingIntent extends Java.Lang.Object implements class Android.OS.IParcelable, class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.App.PendingIntent" />
  <TypeSignature Language="F#" Value="type PendingIntent = class&#xA;    inherit Object&#xA;    interface IParcelable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IParcelable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/app/PendingIntent", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/app/PendingIntent", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A description of an Intent and target action to perform with it.</summary>
    <remarks>
      <para>A description of an Intent and target action to perform with it.  Instances
            of this class are created with <c>#getActivity</c>, <c>#getActivities</c>,
            <c>#getBroadcast</c>, and <c>#getService</c>; the returned object can be
            handed to other applications so that they can perform the action you
            described on your behalf at a later time.</para>
      <para>By giving a PendingIntent to another application,
            you are granting it the right to perform the operation you have specified
            as if the other application was yourself (with the same permissions and
            identity).  As such, you should be careful about how you build the PendingIntent:
            almost always, for example, the base Intent you supply should have the component
            name explicitly set to one of your own components, to ensure it is ultimately
            sent there and nowhere else.</para>
      <para>A PendingIntent itself is simply a reference to a token maintained by
            the system describing the original data used to retrieve it.  This means
            that, even if its owning application's process is killed, the
            PendingIntent itself will remain usable from other processes that
            have been given it.  If the creating application later re-retrieves the
            same kind of PendingIntent (same operation, same Intent action, data,
            categories, and components, and same flags), it will receive a PendingIntent
            representing the same token if that is still valid, and can thus call
            <c>#cancel</c> to remove it.</para>
      <para>Because of this behavior, it is important to know when two Intents
            are considered to be the same for purposes of retrieving a PendingIntent.
            A common mistake people make is to create multiple PendingIntent objects
            with Intents that only vary in their "extra" contents, expecting to get
            a different PendingIntent each time.  This does &lt;em&gt;not&lt;/em&gt; happen.  The
            parts of the Intent that are used for matching are the same ones defined
            by <c>Intent#filterEquals(Intent) Intent.filterEquals</c>.  If you use two
            Intent objects that are equivalent as per
            <c>Intent#filterEquals(Intent) Intent.filterEquals</c>, then you will get
            the same PendingIntent for both of them.</para>
      <para>There are two typical ways to deal with this.</para>
      <para>If you truly need multiple distinct PendingIntent objects active at
            the same time (such as to use as two notifications that are both shown
            at the same time), then you will need to ensure there is something that
            is different about them to associate them with different PendingIntents.
            This may be any of the Intent attributes considered by
            <c>Intent#filterEquals(Intent) Intent.filterEquals</c>, or different
            request code integers supplied to <c>#getActivity</c>, <c>#getActivities</c>,
            <c>#getBroadcast</c>, or <c>#getService</c>.</para>
      <para>If you only need one PendingIntent active at a time for any of the
            Intents you will use, then you can alternatively use the flags
            <c>#FLAG_CANCEL_CURRENT</c> or <c>#FLAG_UPDATE_CURRENT</c> to either
            cancel or modify whatever current PendingIntent is associated with the
            Intent you are supplying.</para>
      <para>Also note that flags like <c>#FLAG_ONE_SHOT</c> or <c>#FLAG_IMMUTABLE</c> describe the
            PendingIntent instance and thus, are used to identify it. Any calls to retrieve or modify a
            PendingIntent created with these flags will also require these flags to be supplied in
            conjunction with others. E.g. To retrieve an existing PendingIntent created with
            FLAG_ONE_SHOT, &lt;b&gt;both&lt;/b&gt; FLAG_ONE_SHOT and FLAG_NO_CREATE need to be supplied.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/app/PendingIntent" title="Reference documentation">Java documentation for <code>android.app.PendingIntent</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Cancel" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; unit" Usage="pendingIntent.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancel a currently active PendingIntent.</summary>
        <remarks>
          <para>Cancel a currently active PendingIntent.  Only the original application
            owning a PendingIntent can cancel it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#cancel()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.cancel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public static Android.OS.IParcelableCreator? Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.IParcelableCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.Creator" />
      <MemberSignature Language="F#" Value="static member Creator : Android.OS.IParcelableCreator" Usage="Android.App.PendingIntent.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CREATOR")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("CREATOR")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelableCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreatorPackage">
      <MemberSignature Language="C#" Value="public string? CreatorPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CreatorPackage" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.CreatorPackage" />
      <MemberSignature Language="F#" Value="member this.CreatorPackage : string" Usage="Android.App.PendingIntent.CreatorPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCreatorPackage", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCreatorPackage", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the application that created this
            PendingIntent, that is the identity under which you will actually be
            sending the Intent.</summary>
        <value>The package name of the PendingIntent.</value>
        <remarks>
          <para>Return the package name of the application that created this
            PendingIntent, that is the identity under which you will actually be
            sending the Intent.  The returned string is supplied by the system, so
            that an application can not spoof its package.
            
            &lt;p class="note"&gt;Be careful about how you use this.  All this tells you is
            who created the PendingIntent.  It does &lt;strong&gt;not&lt;/strong&gt; tell you who
            handed the PendingIntent to you: that is, PendingIntent objects are intended to be
            passed between applications, so the PendingIntent you receive from an application
            could actually be one it received from another application, meaning the result
            you get here will identify the original application.  Because of this, you should
            only use this information to identify who you expect to be interacting with
            through a <c>#send</c> call, not who gave you the PendingIntent.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getCreatorPackage()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getCreatorPackage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUid">
      <MemberSignature Language="C#" Value="public int CreatorUid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CreatorUid" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.CreatorUid" />
      <MemberSignature Language="F#" Value="member this.CreatorUid : int" Usage="Android.App.PendingIntent.CreatorUid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCreatorUid", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCreatorUid", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the uid of the application that created this
            PendingIntent, that is the identity under which you will actually be
            sending the Intent.</summary>
        <value>The uid of the PendingIntent, or -1 if there is
            none associated with it.</value>
        <remarks>
          <para>Return the uid of the application that created this
            PendingIntent, that is the identity under which you will actually be
            sending the Intent.  The returned integer is supplied by the system, so
            that an application can not spoof its uid.
            
            &lt;p class="note"&gt;Be careful about how you use this.  All this tells you is
            who created the PendingIntent.  It does &lt;strong&gt;not&lt;/strong&gt; tell you who
            handed the PendingIntent to you: that is, PendingIntent objects are intended to be
            passed between applications, so the PendingIntent you receive from an application
            could actually be one it received from another application, meaning the result
            you get here will identify the original application.  Because of this, you should
            only use this information to identify who you expect to be interacting with
            through a <c>#send</c> call, not who gave you the PendingIntent.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getCreatorUid()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getCreatorUid()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatorUserHandle">
      <MemberSignature Language="C#" Value="public Android.OS.UserHandle CreatorUserHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.UserHandle CreatorUserHandle" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.CreatorUserHandle" />
      <MemberSignature Language="F#" Value="member this.CreatorUserHandle : Android.OS.UserHandle" Usage="Android.App.PendingIntent.CreatorUserHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCreatorUserHandle", "()Landroid/os/UserHandle;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCreatorUserHandle", "()Landroid/os/UserHandle;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the user handle of the application that created this
            PendingIntent, that is the user under which you will actually be
            sending the Intent.</summary>
        <value>The user handle of the PendingIntent</value>
        <remarks>
          <para>Return the user handle of the application that created this
            PendingIntent, that is the user under which you will actually be
            sending the Intent.  The returned UserHandle is supplied by the system, so
            that an application can not spoof its user.  See
            <c>android.os.Process#myUserHandle() Process.myUserHandle()</c> for
            more explanation of user handles.
            
            &lt;p class="note"&gt;Be careful about how you use this.  All this tells you is
            who created the PendingIntent.  It does &lt;strong&gt;not&lt;/strong&gt; tell you who
            handed the PendingIntent to you: that is, PendingIntent objects are intended to be
            passed between applications, so the PendingIntent you receive from an application
            could actually be one it received from another application, meaning the result
            you get here will identify the original application.  Because of this, you should
            only use this information to identify who you expect to be interacting with
            through a <c>#send</c> call, not who gave you the PendingIntent.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getCreatorUserHandle()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getCreatorUserHandle()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DescribeContents">
      <MemberSignature Language="C#" Value="public int DescribeContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DescribeContents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.DescribeContents" />
      <MemberSignature Language="F#" Value="abstract member DescribeContents : unit -&gt; int&#xA;override this.DescribeContents : unit -&gt; int" Usage="pendingIntent.DescribeContents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.OS.IParcelable.DescribeContents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("describeContents", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("describeContents", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FlagAllowUnsafeImplicitIntent">
      <MemberSignature Language="C#" Value="public const Android.App.PendingIntentFlags FlagAllowUnsafeImplicitIntent = 16777216;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.PendingIntentFlags FlagAllowUnsafeImplicitIntent = (16777216)" />
      <MemberSignature Language="DocId" Value="F:Android.App.PendingIntent.FlagAllowUnsafeImplicitIntent" />
      <MemberSignature Language="F#" Value="val mutable FlagAllowUnsafeImplicitIntent : Android.App.PendingIntentFlags" Usage="Android.App.PendingIntent.FlagAllowUnsafeImplicitIntent" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.OS.IParcelable.ContentsFileDescriptor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.PendingIntentFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.PendingIntentFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntentFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>Flag indicating that the created PendingIntent with <c>#FLAG_MUTABLE</c>
            is allowed to have an unsafe implicit Intent within.</summary>
        <remarks>
          <para>Flag indicating that the created PendingIntent with <c>#FLAG_MUTABLE</c>
            is allowed to have an unsafe implicit Intent within.</para>
          <para>Starting with
            <c>android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE</c>, for apps that
            target SDK <c>android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE</c> or
            higher, creation of a PendingIntent with <c>#FLAG_MUTABLE</c> and an
            implicit Intent within will throw an <c>IllegalArgumentException</c>
            for security reasons. To bypass this check, use
            <c>#FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT</c> when creating a PendingIntent.
            However, it is strongly recommended to not to use this flag and make the
            Intent explicit or the PendingIntent immutable, thereby making the Intent
            safe.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagMutable">
      <MemberSignature Language="C#" Value="public const Android.App.PendingIntentFlags FlagMutable = 33554432;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.PendingIntentFlags FlagMutable = (33554432)" />
      <MemberSignature Language="DocId" Value="F:Android.App.PendingIntent.FlagMutable" />
      <MemberSignature Language="F#" Value="val mutable FlagMutable : Android.App.PendingIntentFlags" Usage="Android.App.PendingIntent.FlagMutable" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.OS.IParcelable.ContentsFileDescriptor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FLAG_MUTABLE", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FLAG_MUTABLE", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.PendingIntentFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.PendingIntentFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntentFlags</ReturnType>
      </ReturnValue>
      <MemberValue>33554432</MemberValue>
      <Docs>
        <summary>Flag indicating that the created PendingIntent should be mutable.</summary>
        <remarks>
          <para>Flag indicating that the created PendingIntent should be mutable.
            This flag cannot be combined with <c>#FLAG_IMMUTABLE</c>.</para>
          <para>Up until
            <c>android.os.Build.VERSION_CODES#R</c>, PendingIntents are assumed to
            be mutable by default, unless <c>#FLAG_IMMUTABLE</c> is set. Starting
            with <c>android.os.Build.VERSION_CODES#S</c>, it will be required to
            explicitly specify the mutability of PendingIntents on creation with
            either (</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#FLAG_MUTABLE" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.FLAG_MUTABLE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivities">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetActivities (Android.Content.Context? context, int requestCode, Android.Content.Intent[] intents, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivities(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent[] intents, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetActivities(Android.Content.Context,System.Int32,Android.Content.Intent[],Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="static member GetActivities : Android.Content.Context * int * Android.Content.Intent[] * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetActivities (context, requestCode, intents, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;I)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;I)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
            the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intents">Array of Intents of the activities to be launched.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Like <c>#getActivity(Context, int, Intent, int)</c>, but allows an
            array of Intents to be supplied.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Like <c>#getActivity(Context, int, Intent, int)</c>, but allows an
            array of Intents to be supplied.  The last Intent in the array is
            taken as the primary key for the PendingIntent, like the single Intent
            given to <c>#getActivity(Context, int, Intent, int)</c>.  Upon sending
            the resulting PendingIntent, all of the Intents are started in the same
            way as they would be by passing them to <c>Context#startActivities(Intent[])</c>.
            
            &lt;p class="note"&gt;
            The &lt;em&gt;first&lt;/em&gt; intent in the array will be started outside of the context of an
            existing activity, so you must use the <c>Intent#FLAG_ACTIVITY_NEW_TASK
            Intent.FLAG_ACTIVITY_NEW_TASK</c> launch flag in the Intent.  (Activities after
            the first in the array are started in the context of the previous activity
            in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
            &lt;/p&gt;
            
            &lt;p class="note"&gt;
            The &lt;em&gt;last&lt;/em&gt; intent in the array represents the key for the
            PendingIntent.  In other words, it is the significant element for matching
            (as done with the single intent given to <c>#getActivity(Context, int, Intent, int)</c>,
            its content will be the subject of replacement by
            <c>#send(Context, int, Intent)</c> and <c>#FLAG_UPDATE_CURRENT</c>, etc.
            This is because it is the most specific of the supplied intents, and the
            UI the user actually sees when the intents are started.
            &lt;/p&gt;
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c> objects
            you supply here should almost always be &lt;em&gt;explicit intents&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getActivities(android.content.Context,%20int,%20android.content.Intent[],%20int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getActivities(android.content.Context, int, android.content.Intent[], int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetActivities">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetActivities (Android.Content.Context? context, int requestCode, Android.Content.Intent[] intents, Android.App.PendingIntentFlags flags, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivities(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent[] intents, valuetype Android.App.PendingIntentFlags flags, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetActivities(Android.Content.Context,System.Int32,Android.Content.Intent[],Android.App.PendingIntentFlags,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="static member GetActivities : Android.Content.Context * int * Android.Content.Intent[] * Android.App.PendingIntentFlags * Android.OS.Bundle -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetActivities (context, requestCode, intents, flags, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getActivities", "(Landroid/content/Context;I[Landroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <param name="context">The Context in which this PendingIntent should start
            the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intents">Array of Intents of the activities to be launched.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            <c>#FLAG_IMMUTABLE</c> or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Like <c>#getActivity(Context, int, Intent, int)</c>, but allows an
            array of Intents to be supplied.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Like <c>#getActivity(Context, int, Intent, int)</c>, but allows an
            array of Intents to be supplied.  The last Intent in the array is
            taken as the primary key for the PendingIntent, like the single Intent
            given to <c>#getActivity(Context, int, Intent, int)</c>.  Upon sending
            the resulting PendingIntent, all of the Intents are started in the same
            way as they would be by passing them to <c>Context#startActivities(Intent[])</c>.
            
            &lt;p class="note"&gt;
            The &lt;em&gt;first&lt;/em&gt; intent in the array will be started outside of the context of an
            existing activity, so you must use the <c>Intent#FLAG_ACTIVITY_NEW_TASK
            Intent.FLAG_ACTIVITY_NEW_TASK</c> launch flag in the Intent.  (Activities after
            the first in the array are started in the context of the previous activity
            in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)
            &lt;/p&gt;
            
            &lt;p class="note"&gt;
            The &lt;em&gt;last&lt;/em&gt; intent in the array represents the key for the
            PendingIntent.  In other words, it is the significant element for matching
            (as done with the single intent given to <c>#getActivity(Context, int, Intent, int)</c>,
            its content will be the subject of replacement by
            <c>#send(Context, int, Intent)</c> and <c>#FLAG_UPDATE_CURRENT</c>, etc.
            This is because it is the most specific of the supplied intents, and the
            UI the user actually sees when the intents are started.
            &lt;/p&gt;
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c> objects
            you supply here should almost always be &lt;em&gt;explicit intents&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getActivities(android.content.Context,%20int,%20android.content.Intent[],%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getActivities(android.content.Context, int, android.content.Intent[], int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetActivity">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetActivity (Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivity(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="static member GetActivity : Android.Content.Context * int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetActivity (context, requestCode, intent, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
            the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">Intent of the activity to be launched.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will start a new activity, like calling
            <c>Context#startActivity(Intent) Context.startActivity(Intent)</c>.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Retrieve a PendingIntent that will start a new activity, like calling
            <c>Context#startActivity(Intent) Context.startActivity(Intent)</c>.
            Note that the activity will be started outside of the context of an
            existing activity, so you must use the <c>Intent#FLAG_ACTIVITY_NEW_TASK
            Intent.FLAG_ACTIVITY_NEW_TASK</c> launch flag in the Intent.
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c>
            you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getActivity(android.content.Context,%20int,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getActivity(android.content.Context, int, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetActivity">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetActivity (Android.Content.Context? context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetActivity(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetActivity(Android.Content.Context,System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="static member GetActivity : Android.Content.Context * int * Android.Content.Intent * Android.App.PendingIntentFlags * Android.OS.Bundle -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetActivity (context, requestCode, intent, flags, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getActivity", "(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
            the activity.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">Intent of the activity to be launched.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <param name="options">Additional options for how the Activity should be started.
            May be null if there are no options.</param>
        <summary>Retrieve a PendingIntent that will start a new activity, like calling
            <c>Context#startActivity(Intent) Context.startActivity(Intent)</c>.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Retrieve a PendingIntent that will start a new activity, like calling
            <c>Context#startActivity(Intent) Context.startActivity(Intent)</c>.
            Note that the activity will be started outside of the context of an
            existing activity, so you must use the <c>Intent#FLAG_ACTIVITY_NEW_TASK
            Intent.FLAG_ACTIVITY_NEW_TASK</c> launch flag in the Intent.
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c>
            you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getActivity(android.content.Context,%20int,%20android.content.Intent,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getActivity(android.content.Context, int, android.content.Intent, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcast">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetBroadcast (Android.Content.Context? context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetBroadcast(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetBroadcast(Android.Content.Context,System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="static member GetBroadcast : Android.Content.Context * int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetBroadcast (context, requestCode, intent, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBroadcast", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBroadcast", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should perform
            the broadcast.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">The Intent to be broadcast.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            <c>#FLAG_IMMUTABLE</c> or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will perform a broadcast, like calling
            <c>Context#sendBroadcast(Intent) Context.sendBroadcast()</c>.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Retrieve a PendingIntent that will perform a broadcast, like calling
            <c>Context#sendBroadcast(Intent) Context.sendBroadcast()</c>.
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c>
            you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getBroadcast(android.content.Context,%20int,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getBroadcast(android.content.Context, int, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetForegroundService">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetForegroundService (Android.Content.Context? context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetForegroundService(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetForegroundService(Android.Content.Context,System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="static member GetForegroundService : Android.Content.Context * int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetForegroundService (context, requestCode, intent, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getForegroundService", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getForegroundService", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
            the service.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">An Intent describing the service to be started.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            <c>#FLAG_IMMUTABLE</c> or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will start a foreground service, like calling
            <c>Context#startForegroundService Context.startForegroundService()</c>.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Retrieve a PendingIntent that will start a foreground service, like calling
            <c>Context#startForegroundService Context.startForegroundService()</c>.  The start
            arguments given to the service will come from the extras of the Intent.
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c>
            you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getForegroundService(android.content.Context,%20int,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getForegroundService(android.content.Context, int, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? GetService (Android.Content.Context? context, int requestCode, Android.Content.Intent intent, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent GetService(class Android.Content.Context context, int32 requestCode, class Android.Content.Intent intent, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.GetService(Android.Content.Context,System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="static member GetService : Android.Content.Context * int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.GetService (context, requestCode, intent, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getService", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getService", "(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The Context in which this PendingIntent should start
            the service.</param>
        <param name="requestCode">Private request code for the sender</param>
        <param name="intent">An Intent describing the service to be started.</param>
        <param name="flags">May be <c>#FLAG_ONE_SHOT</c>, <c>#FLAG_NO_CREATE</c>,
            <c>#FLAG_CANCEL_CURRENT</c>, <c>#FLAG_UPDATE_CURRENT</c>,
            <c>#FLAG_IMMUTABLE</c> or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Retrieve a PendingIntent that will start a service, like calling
            <c>Context#startService Context.startService()</c>.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if <c>#FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Retrieve a PendingIntent that will start a service, like calling
            <c>Context#startService Context.startService()</c>.  The start
            arguments given to the service will come from the extras of the Intent.
            
            &lt;p class="note"&gt;For security reasons, the <c>android.content.Intent</c>
            you supply here should almost always be an &lt;em&gt;explicit intent&lt;/em&gt;,
            that is specify an explicit component to be delivered to through
            <c>Intent#setClass(android.content.Context, Class) Intent.setClass</c>&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getService(android.content.Context,%20int,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getService(android.content.Context, int, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IntentSender">
      <MemberSignature Language="C#" Value="public Android.Content.IntentSender IntentSender { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.IntentSender IntentSender" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IntentSender" />
      <MemberSignature Language="F#" Value="member this.IntentSender : Android.Content.IntentSender" Usage="Android.App.PendingIntent.IntentSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getIntentSender", "()Landroid/content/IntentSender;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getIntentSender", "()Landroid/content/IntentSender;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.IntentSender</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a IntentSender object that wraps the existing sender of the PendingIntent</summary>
        <value>Returns a IntentSender object that wraps the sender of PendingIntent</value>
        <remarks>
          <para>Retrieve a IntentSender object that wraps the existing sender of the PendingIntent</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getIntentSender()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getIntentSender()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="IsActivity">
      <MemberSignature Language="C#" Value="public bool IsActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActivity" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IsActivity" />
      <MemberSignature Language="F#" Value="member this.IsActivity : bool" Usage="Android.App.PendingIntent.IsActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isActivity", "()Z", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isActivity", "()Z", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>TRUE if this <c>PendingIntent</c> was created with
            <c>#getActivity</c> or <c>#getActivities</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#isActivity()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.isActivity()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBroadcast">
      <MemberSignature Language="C#" Value="public bool IsBroadcast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBroadcast" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IsBroadcast" />
      <MemberSignature Language="F#" Value="member this.IsBroadcast : bool" Usage="Android.App.PendingIntent.IsBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isBroadcast", "()Z", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isBroadcast", "()Z", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>TRUE if this <c>PendingIntent</c> was created with <c>#getBroadcast</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#isBroadcast()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.isBroadcast()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsForegroundService">
      <MemberSignature Language="C#" Value="public bool IsForegroundService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsForegroundService" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IsForegroundService" />
      <MemberSignature Language="F#" Value="member this.IsForegroundService : bool" Usage="Android.App.PendingIntent.IsForegroundService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isForegroundService", "()Z", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isForegroundService", "()Z", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>TRUE if this <c>PendingIntent</c> was created with <c>#getForegroundService</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#isForegroundService()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.isForegroundService()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmutable">
      <MemberSignature Language="C#" Value="public bool IsImmutable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImmutable" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IsImmutable" />
      <MemberSignature Language="F#" Value="member this.IsImmutable : bool" Usage="Android.App.PendingIntent.IsImmutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isImmutable", "()Z", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isImmutable", "()Z", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check if this PendingIntent is marked with <c>#FLAG_IMMUTABLE</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Check if this PendingIntent is marked with <c>#FLAG_IMMUTABLE</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#isImmutable()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.isImmutable()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsService">
      <MemberSignature Language="C#" Value="public bool IsService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsService" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.IsService" />
      <MemberSignature Language="F#" Value="member this.IsService : bool" Usage="Android.App.PendingIntent.IsService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isService", "()Z", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isService", "()Z", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>TRUE if this <c>PendingIntent</c> was created with <c>#getService</c>.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#isService()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.isService()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.App.PendingIntent.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadPendingIntentOrNullFromParcel">
      <MemberSignature Language="C#" Value="public static Android.App.PendingIntent? ReadPendingIntentOrNullFromParcel (Android.OS.Parcel in);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.PendingIntent ReadPendingIntentOrNullFromParcel(class Android.OS.Parcel in) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.ReadPendingIntentOrNullFromParcel(Android.OS.Parcel)" />
      <MemberSignature Language="F#" Value="static member ReadPendingIntentOrNullFromParcel : Android.OS.Parcel -&gt; Android.App.PendingIntent" Usage="Android.App.PendingIntent.ReadPendingIntentOrNullFromParcel in" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("readPendingIntentOrNullFromParcel", "(Landroid/os/Parcel;)Landroid/app/PendingIntent;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("readPendingIntentOrNullFromParcel", "(Landroid/os/Parcel;)Landroid/app/PendingIntent;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="in">The Parcel containing the written PendingIntent.</param>
        <summary>Convenience function for reading either a PendingIntent or null pointer from
            a Parcel.</summary>
        <returns>Returns the PendingIntent read from the Parcel, or null if null had
            been written.</returns>
        <remarks>
          <para>Convenience function for reading either a PendingIntent or null pointer from
            a Parcel.  You must have previously written the PendingIntent with
            <c>#writePendingIntentOrNullToParcel</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#readPendingIntentOrNullFromParcel(android.os.Parcel)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.readPendingIntentOrNullFromParcel(android.os.Parcel)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send" />
      <MemberSignature Language="F#" Value="member this.Send : unit -&gt; unit" Usage="pendingIntent.Send " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>Perform the operation associated with this PendingIntent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.App.Result code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(valuetype Android.App.Result code) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.App.Result)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.App.Result -&gt; unit" Usage="pendingIntent.Send code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>Perform the operation associated with this PendingIntent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send(int)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.OS.Bundle -&gt; unit" Usage="pendingIntent.Send options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Landroid/os/Bundle;)V", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Landroid/os/Bundle;)V", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="options">Additional options the caller would like to provide to modify the
            sending behavior.  May be built from an <c>ActivityOptions</c> to apply to an
            activity start.</param>
        <summary>Perform the operation associated with this PendingIntent, supplying additional
            options for the operation.</summary>
        <remarks>
          <para>Perform the operation associated with this PendingIntent, supplying additional
            options for the operation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.App.Result code, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(valuetype Android.App.Result code, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.App.Result,Android.App.PendingIntent.IOnFinished,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.App.Result * Android.App.PendingIntent.IOnFinished * Android.OS.Handler -&gt; unit" Usage="pendingIntent.Send (code, onFinished, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(ILandroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(ILandroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context? context, Android.App.Result code, Android.Content.Intent? intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.Content.Context * Android.App.Result * Android.Content.Intent -&gt; unit" Usage="pendingIntent.Send (context, code, intent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <c>Intent#fillIn
            Intent.fillIn()</c> for information on how this is applied to the
            original Intent. If flag <c>#FLAG_IMMUTABLE</c> was set when this
            pending intent was created, this argument will be ignored.</param>
        <summary>Perform the operation associated with this PendingIntent, allowing the
            caller to specify information about the Intent to use.</summary>
        <remarks>
          <para>Perform the operation associated with this PendingIntent, allowing the
            caller to specify information about the Intent to use.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send(android.content.Context,%20int,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send(android.content.Context, int, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context? context, Android.App.Result code, Android.Content.Intent? intent, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.Content.Intent,Android.App.PendingIntent.IOnFinished,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.Content.Context * Android.App.Result * Android.Content.Intent * Android.App.PendingIntent.IOnFinished * Android.OS.Handler -&gt; unit" Usage="pendingIntent.Send (context, code, intent, onFinished, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.
 If flag <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='Android App PendingIntent FLAG_IMMUTABLE';scope=Xamarin" title="Android.App.PendingIntent.FLAG_IMMUTABLE">Android.App.PendingIntent.FLAG_IMMUTABLE</a></format> was set when this pending intent was
 created, this argument will be ignored.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result, .IOnFinished, .IOnFinished)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context? context, Android.App.Result code, Android.Content.Intent? intent, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler, string? requiredPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler, string requiredPermission) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.Content.Intent,Android.App.PendingIntent.IOnFinished,Android.OS.Handler,System.String)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.Content.Context * Android.App.Result * Android.Content.Intent * Android.App.PendingIntent.IOnFinished * Android.OS.Handler * string -&gt; unit" Usage="pendingIntent.Send (context, code, intent, onFinished, handler, requiredPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="requiredPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The Context of the caller.  This may be null if
 <format type="text/html"><var>intent</var></format> is also null.</param>
        <param name="code">Result code to supply back to the PendingIntent's target.</param>
        <param name="intent">Additional Intent data.  See <see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /> for information on how this is applied to the
 original Intent.  Use null to not modify the original Intent.
 If flag <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='Android App PendingIntent FLAG_IMMUTABLE';scope=Xamarin" title="Android.App.PendingIntent.FLAG_IMMUTABLE">Android.App.PendingIntent.FLAG_IMMUTABLE</a></format> was set when this pending intent was
 created, this argument will be ignored.</param>
        <param name="onFinished">The object to call back on when the send has
 completed, or null for no callback.</param>
        <param name="handler">Handler identifying the thread on which the callback
 should happen.  If null, the callback will happen from the thread
 pool of the process.</param>
        <param name="requiredPermission">Name of permission that a recipient of the PendingIntent
 is required to hold.  This is only valid for broadcast intents, and
 corresponds to the permission argument in
 <see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent,System.String)" />.
 If null, no permission is required.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="T:Android.App.PendingIntent.CanceledException">Throws CanceledException if the PendingIntent
 is no longer allowing more intents to be sent through it.
</exception>
        <altmember cref="M:Android.App.PendingIntent.Send" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.App.Result, .IOnFinished, .IOnFinished)" />
        <altmember cref="M:Android.App.PendingIntent.Send(Android.Content.Context, Android.App.Result, Android.App.Result, Android.App.Result, Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Android.Content.Context? context, Android.App.Result code, Android.Content.Intent? intent, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler, string? requiredPermission, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Android.Content.Context context, valuetype Android.App.Result code, class Android.Content.Intent intent, class Android.App.PendingIntent/IOnFinished onFinished, class Android.OS.Handler handler, string requiredPermission, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.Send(Android.Content.Context,Android.App.Result,Android.Content.Intent,Android.App.PendingIntent.IOnFinished,Android.OS.Handler,System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="member this.Send : Android.Content.Context * Android.App.Result * Android.Content.Intent * Android.App.PendingIntent.IOnFinished * Android.OS.Handler * string * Android.OS.Bundle -&gt; unit" Usage="pendingIntent.Send (context, code, intent, onFinished, handler, requiredPermission, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;Ljava/lang/String;Landroid/os/Bundle;)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("send", "(Landroid/content/Context;ILandroid/content/Intent;Landroid/app/PendingIntent$OnFinished;Landroid/os/Handler;Ljava/lang/String;Landroid/os/Bundle;)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="code" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="onFinished" Type="Android.App.PendingIntent+IOnFinished" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="requiredPermission" Type="System.String" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="code">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="onFinished">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="requiredPermission">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Perform the operation associated with this PendingIntent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#send()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.send()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetPackage">
      <MemberSignature Language="C#" Value="public string? TargetPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetPackage" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.TargetPackage" />
      <MemberSignature Language="F#" Value="member this.TargetPackage : string" Usage="Android.App.PendingIntent.TargetPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTargetPackage", "()Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTargetPackage", "()Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This member is deprecated.</summary>
        <value>To be added.</value>
        <remarks>
          <para>This member is deprecated. Renamed to <c>#getCreatorPackage()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#getTargetPackage()" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.getTargetPackage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.App.PendingIntent.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.App.PendingIntent.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.App.PendingIntent.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePendingIntentOrNullToParcel">
      <MemberSignature Language="C#" Value="public static void WritePendingIntentOrNullToParcel (Android.App.PendingIntent? sender, Android.OS.Parcel out);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WritePendingIntentOrNullToParcel(class Android.App.PendingIntent sender, class Android.OS.Parcel out) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.WritePendingIntentOrNullToParcel(Android.App.PendingIntent,Android.OS.Parcel)" />
      <MemberSignature Language="F#" Value="static member WritePendingIntentOrNullToParcel : Android.App.PendingIntent * Android.OS.Parcel -&gt; unit" Usage="Android.App.PendingIntent.WritePendingIntentOrNullToParcel (sender, out)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writePendingIntentOrNullToParcel", "(Landroid/app/PendingIntent;Landroid/os/Parcel;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writePendingIntentOrNullToParcel", "(Landroid/app/PendingIntent;Landroid/os/Parcel;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Android.App.PendingIntent" />
        <Parameter Name="out" Type="Android.OS.Parcel" />
      </Parameters>
      <Docs>
        <param name="sender">The PendingIntent to write, or null.</param>
        <param name="out">Where to write the PendingIntent.</param>
        <summary>Convenience function for writing either a PendingIntent or null pointer to
            a Parcel.</summary>
        <remarks>
          <para>Convenience function for writing either a PendingIntent or null pointer to
            a Parcel.  You must use this with <c>#readPendingIntentOrNullFromParcel</c>
            for later reading it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/PendingIntent#writePendingIntentOrNullToParcel(android.app.PendingIntent,%20android.os.Parcel)" title="Reference documentation">Java documentation for <code>android.app.PendingIntent.writePendingIntentOrNullToParcel(android.app.PendingIntent, android.os.Parcel)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WriteToParcel">
      <MemberSignature Language="C#" Value="public void WriteToParcel (Android.OS.Parcel? out, Android.OS.ParcelableWriteFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToParcel(class Android.OS.Parcel out, valuetype Android.OS.ParcelableWriteFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.PendingIntent.WriteToParcel(Android.OS.Parcel,Android.OS.ParcelableWriteFlags)" />
      <MemberSignature Language="F#" Value="abstract member WriteToParcel : Android.OS.Parcel * Android.OS.ParcelableWriteFlags -&gt; unit&#xA;override this.WriteToParcel : Android.OS.Parcel * Android.OS.ParcelableWriteFlags -&gt; unit" Usage="pendingIntent.WriteToParcel (out, flags)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.OS.IParcelable.WriteToParcel(Android.OS.Parcel,Android.OS.ParcelableWriteFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.ParcelableWriteFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="out">The Parcel in which the object should be written.</param>
        <param name="flags">Additional flags about how the object should be written.
 May be 0 or <see cref="F:Android.OS.Parcelable.ParcelableWriteReturnValue" />.
</param>
        <summary>Flatten this object in to a Parcel.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
