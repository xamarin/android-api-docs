<Type Name="DialogFragment" FullName="Android.App.DialogFragment">
  <TypeSignature Language="C#" Value="public class DialogFragment : Android.App.Fragment, Android.Content.IDialogInterfaceOnCancelListener, Android.Content.IDialogInterfaceOnDismissListener, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DialogFragment extends Android.App.Fragment implements class Android.Content.IDialogInterfaceOnCancelListener, class Android.Content.IDialogInterfaceOnDismissListener, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Fragment</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IDialogInterfaceOnCancelListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Content.IDialogInterfaceOnDismissListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/DialogFragment", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>A fragment that displays a dialog window, floating on top of its
 activity's window.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A fragment that displays a dialog window, floating on top of its
 activity's window.  This fragment contains a Dialog object, which it
 displays as appropriate based on the fragment's state.  Control of
 the dialog (deciding when to show, hide, dismiss it) should be done through
 the API here, not with direct calls on the dialog.

 </para>
      <para tool="javadoc-to-mdoc">Implementations should override this class and implement
 <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> to supply the
 content of the dialog.  Alternatively, they can override
 <c><see cref="M:Android.App.DialogFragment.OnCreateDialog(Android.OS.Bundle)" /></c> to create an entirely custom dialog, such
 as an AlertDialog, with its own content.

 </para>
      <para tool="javadoc-to-mdoc">Topics covered here:
 <list type="number"><item><term /></item><item><term /></item><item><term /></item><item><term></term></item></list><format type="text/html"><h3>Lifecycle</h3></format></para>
      <para tool="javadoc-to-mdoc">DialogFragment does various things to keep the fragment's lifecycle
 driving it, instead of the Dialog.  Note that dialogs are generally
 autonomous entities -- they are their own window, receiving their own
 input events, and often deciding on their own when to disappear (by
 receiving a back key event or the user clicking on a button).

 </para>
      <para tool="javadoc-to-mdoc">DialogFragment needs to ensure that what is happening with the Fragment
 and Dialog states remains consistent.  To do this, it watches for dismiss
 events from the dialog and takes care of removing its own state when they
 happen.  This means you should use <c><see cref="M:Android.App.DialogFragment.Show(Android.App.FragmentManager,System.String)" /></c>
 or <c><see cref="M:Android.App.DialogFragment.Show(Android.App.FragmentTransaction,System.String)" /></c> to add an instance of
 DialogFragment to your UI, as these keep track of how DialogFragment should
 remove itself when the dialog is dismissed.

 <format type="text/html"><h3>Basic Dialog</h3></format></para>
      <para tool="javadoc-to-mdoc">The simplest use of DialogFragment is as a floating container for the
 fragment's view hierarchy.  A simple implementation may look like this:

 <example><code lang="java">public static class MyDialogFragment extends DialogFragment {
    int mNum;

    /**
     * Create a new instance of MyDialogFragment, providing "num"
     * as an argument.
     */
    static MyDialogFragment newInstance(int num) {
        MyDialogFragment f = new MyDialogFragment();

        // Supply num input as an argument.
        Bundle args = new Bundle();
        args.putInt("num", num);
        f.setArguments(args);

        return f;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mNum = getArguments().getInt("num");

        // Pick a style based on the num.
        int style = DialogFragment.STYLE_NORMAL, theme = 0;
        switch ((mNum-1)%6) {
            case 1: style = DialogFragment.STYLE_NO_TITLE; break;
            case 2: style = DialogFragment.STYLE_NO_FRAME; break;
            case 3: style = DialogFragment.STYLE_NO_INPUT; break;
            case 4: style = DialogFragment.STYLE_NORMAL; break;
            case 5: style = DialogFragment.STYLE_NORMAL; break;
            case 6: style = DialogFragment.STYLE_NO_TITLE; break;
            case 7: style = DialogFragment.STYLE_NO_FRAME; break;
            case 8: style = DialogFragment.STYLE_NORMAL; break;
        }
        switch ((mNum-1)%6) {
            case 4: theme = android.R.style.Theme_Holo; break;
            case 5: theme = android.R.style.Theme_Holo_Light_Dialog; break;
            case 6: theme = android.R.style.Theme_Holo_Light; break;
            case 7: theme = android.R.style.Theme_Holo_Light_Panel; break;
            case 8: theme = android.R.style.Theme_Holo_Light; break;
        }
        setStyle(style, theme);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_dialog, container, false);
        View tv = v.findViewById(R.id.text);
        ((TextView)tv).setText("Dialog #" + mNum + ": using style "
                + getNameForNum(mNum));

        // Watch for button clicks.
        Button button = (Button)v.findViewById(R.id.show);
        button.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // When button is clicked, call up to owning activity.
                ((FragmentDialog)getActivity()).showDialog();
            }
        });

        return v;
    }
}</code></example></para>
      <para tool="javadoc-to-mdoc">An example showDialog() method on the Activity could be:

 <example><code lang="java">void showDialog() {
    mStackLevel++;

    // DialogFragment.show() will take care of adding the fragment
    // in a transaction.  We also want to remove any currently showing
    // dialog, so make our own transaction and take care of that here.
    FragmentTransaction ft = getFragmentManager().beginTransaction();
    Fragment prev = getFragmentManager().findFragmentByTag("dialog");
    if (prev != null) {
        ft.remove(prev);
    }
    ft.addToBackStack(null);

    // Create and show the dialog.
    DialogFragment newFragment = MyDialogFragment.newInstance(mStackLevel);
    newFragment.show(ft, "dialog");
}</code></example></para>
      <para tool="javadoc-to-mdoc">This removes any currently shown dialog, creates a new DialogFragment
 with an argument, and shows it as a new state on the back stack.  When the
 transaction is popped, the current DialogFragment and its Dialog will be
 destroyed, and the previous one (if any) re-shown.  Note that in this case
 DialogFragment will take care of popping the transaction of the Dialog
 is dismissed separately from it.

 <format type="text/html"><h3>Alert Dialog</h3></format></para>
      <para tool="javadoc-to-mdoc">Instead of (or in addition to) implementing <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> to
 generate the view hierarchy inside of a dialog, you may implement
 <c><see cref="M:Android.App.DialogFragment.OnCreateDialog(Android.OS.Bundle)" /></c> to create your own custom Dialog object.

 </para>
      <para tool="javadoc-to-mdoc">This is most useful for creating an <c><see cref="T:Android.App.AlertDialog" /></c>, allowing you
 to display standard alerts to the user that are managed by a fragment.
 A simple example implementation of this is:

 <example><code lang="java">public static class MyAlertDialogFragment extends DialogFragment {

    public static MyAlertDialogFragment newInstance(int title) {
        MyAlertDialogFragment frag = new MyAlertDialogFragment();
        Bundle args = new Bundle();
        args.putInt("title", title);
        frag.setArguments(args);
        return frag;
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        int title = getArguments().getInt("title");

        return new AlertDialog.Builder(getActivity())
                .setIcon(R.drawable.alert_dialog_icon)
                .setTitle(title)
                .setPositiveButton(R.string.alert_dialog_ok,
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            ((FragmentAlertDialog)getActivity()).doPositiveClick();
                        }
                    }
                )
                .setNegativeButton(R.string.alert_dialog_cancel,
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            ((FragmentAlertDialog)getActivity()).doNegativeClick();
                        }
                    }
                )
                .create();
    }
}</code></example></para>
      <para tool="javadoc-to-mdoc">The activity creating this fragment may have the following methods to
 show the dialog and receive results from it:

 <example><code lang="java">void showDialog() {
    DialogFragment newFragment = MyAlertDialogFragment.newInstance(
            R.string.alert_dialog_two_buttons_title);
    newFragment.show(getFragmentManager(), "dialog");
}

public void doPositiveClick() {
    // Do stuff here.
    Log.i("FragmentAlertDialog", "Positive click!");
}

public void doNegativeClick() {
    // Do stuff here.
    Log.i("FragmentAlertDialog", "Negative click!");
}</code></example></para>
      <para tool="javadoc-to-mdoc">Note that in this case the fragment is not placed on the back stack, it
 is just added as an indefinitely running fragment.  Because dialogs normally
 are modal, this will still operate as a back stack, since the dialog will
 capture user input until it is dismissed.  When it is dismissed, DialogFragment
 will take care of removing itself from its fragment manager.

 <format type="text/html"><h3>Selecting Between Dialog or Embedding</h3></format></para>
      <para tool="javadoc-to-mdoc">A DialogFragment can still optionally be used as a normal fragment, if
 desired.  This is useful if you have a fragment that in some cases should
 be shown as a dialog and others embedded in a larger UI.  This behavior
 will normally be automatically selected for you based on how you are using
 the fragment, but can be customized with <c><see cref="P:Android.App.DialogFragment.ShowsDialog" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">For example, here is a simple dialog fragment:

 <example><code lang="java">public static class MyDialogFragment extends DialogFragment {
    static MyDialogFragment newInstance() {
        return new MyDialogFragment();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.hello_world, container, false);
        View tv = v.findViewById(R.id.text);
        ((TextView)tv).setText("This is an instance of MyDialogFragment");
        return v;
    }
}</code></example></para>
      <para tool="javadoc-to-mdoc">An instance of this fragment can be created and shown as a dialog:

 <example><code lang="java">void showDialog() {
    // Create the fragment and show it as a dialog.
    DialogFragment newFragment = MyDialogFragment.newInstance();
    newFragment.show(getFragmentManager(), "dialog");
}</code></example></para>
      <para tool="javadoc-to-mdoc">It can also be added as content in a view hierarchy:

 <example><code lang="java">FragmentTransaction ft = getFragmentManager().beginTransaction();
DialogFragment newFragment = MyDialogFragment.newInstance();
ft.add(R.id.embedded, newFragment);
ft.commit();</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/DialogFragment.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#DialogFragment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DialogFragment (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelable">
      <MemberSignature Language="C#" Value="public virtual bool Cancelable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCancelable", "()Z", "GetIsCancelableHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setCancelable", "(Z)V", "GetSetCancelable_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current value of <c><see cref="P:Android.App.DialogFragment.Cancelable" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#isCancelable()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the current value of <c><see cref="P:Android.App.DialogFragment.Cancelable" /></c>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#setCancelable(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Control whether the shown Dialog is cancelable.  Use this instead of
 directly calling <c><see cref="M:Android.App.Dialog.SetCancelable(System.Boolean)" /></c>, because DialogFragment needs to change
 its behavior based on this.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Dialog">
      <MemberSignature Language="C#" Value="public virtual Android.App.Dialog Dialog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Dialog Dialog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDialog", "()Landroid/app/Dialog;", "GetGetDialogHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#getDialog()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Dismiss">
      <MemberSignature Language="C#" Value="public virtual void Dismiss ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dismiss() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dismiss", "()V", "GetDismissHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismiss the fragment and its dialog.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dismiss the fragment and its dialog.  If the fragment was added to the
 back stack, all back stack state up to and including this entry will
 be popped.  Otherwise, a new transaction will be committed to remove
 the fragment.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#dismiss()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DismissAllowingStateLoss">
      <MemberSignature Language="C#" Value="public virtual void DismissAllowingStateLoss ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissAllowingStateLoss() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dismissAllowingStateLoss", "()V", "GetDismissAllowingStateLossHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Version of <c><see cref="M:Android.App.DialogFragment.Dismiss" /></c> that uses
 <c><see cref="M:Android.App.FragmentTransaction.CommitAllowingStateLoss" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.App.DialogFragment.Dismiss" /></c> that uses
 <c><see cref="M:Android.App.FragmentTransaction.CommitAllowingStateLoss" /></c>.  See linked
 documentation for further details.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#dismissAllowingStateLoss()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnCancel">
      <MemberSignature Language="C#" Value="public virtual void OnCancel (Android.Content.IDialogInterface dialog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCancel(class Android.Content.IDialogInterface dialog) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCancel", "(Landroid/content/DialogInterface;)V", "GetOnCancel_Landroid_content_DialogInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dialog" Type="Android.Content.IDialogInterface" />
      </Parameters>
      <Docs>
        <param name="dialog">The dialog that was canceled will be passed into the
            method.
</param>
        <summary>This method will be invoked when the dialog is canceled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method will be invoked when the dialog is canceled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#onCancel(android.content.DialogInterface)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDialog">
      <MemberSignature Language="C#" Value="public virtual Android.App.Dialog OnCreateDialog (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Dialog OnCreateDialog(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateDialog", "(Landroid/os/Bundle;)Landroid/app/Dialog;", "GetOnCreateDialog_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">The last saved instance state of the Fragment,
 or null if this is a freshly created Fragment.</param>
        <summary>Override to build your own custom Dialog container.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Override to build your own custom Dialog container.  This is typically
 used to show an AlertDialog instead of a generic Dialog; when doing so,
 <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c> does not need
 to be implemented since the AlertDialog takes care of its own content.
 
 </para>
          <para tool="javadoc-to-mdoc">This method will be called after <c><see cref="!:Android.App.DialogFragment.onCreate(android.os.Bundle)" /></c> and
 before <c><see cref="M:Android.App.Fragment.OnCreateView(Android.Views.LayoutInflater,Android.Views.ViewGroup,Android.Views.ViewGroup)" /></c>.  The
 default implementation simply instantiates and returns a <c><see cref="T:Android.App.Dialog" /></c>
 class.
 
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note: DialogFragment own the <c><see cref="M:Android.App.Dialog.SetOnCancelListener(Android.Content.IDialogInterfaceOnCancelListener)" /></c> and <c><see cref="M:Android.App.Dialog.SetOnDismissListener(Android.Content.IDialogInterfaceOnDismissListener)" /></c> callbacks.  You must not set them yourself.</i>
 To find out about these events, override <c><see cref="M:Android.App.DialogFragment.OnCancel(Android.Content.IDialogInterface)" /></c>
 and <c><see cref="M:Android.App.DialogFragment.OnDismiss(Android.Content.IDialogInterface)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#onCreateDialog(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnDismiss">
      <MemberSignature Language="C#" Value="public virtual void OnDismiss (Android.Content.IDialogInterface dialog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDismiss(class Android.Content.IDialogInterface dialog) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDismiss", "(Landroid/content/DialogInterface;)V", "GetOnDismiss_Landroid_content_DialogInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dialog" Type="Android.Content.IDialogInterface" />
      </Parameters>
      <Docs>
        <param name="dialog">The dialog that was dismissed will be passed into the
            method.
</param>
        <summary>This method will be invoked when the dialog is dismissed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method will be invoked when the dialog is dismissed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#onDismiss(android.content.DialogInterface)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="public virtual void SetStyle (Android.App.DialogFragmentStyle style, int theme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStyle(valuetype Android.App.DialogFragmentStyle style, int32 theme) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStyle", "(II)V", "GetSetStyle_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="Android.App.DialogFragmentStyle">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="theme" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="style">Selects a standard style: may be <c><see cref="!:Android.App.DialogFragment.STYLE_NORMAL" /></c>,
 <c><see cref="!:Android.App.DialogFragment.STYLE_NO_TITLE" /></c>, <c><see cref="!:Android.App.DialogFragment.STYLE_NO_FRAME" /></c>, or
 <c><see cref="!:Android.App.DialogFragment.STYLE_NO_INPUT" /></c>.</param>
        <param name="theme">Optional custom theme.  If 0, an appropriate theme (based
 on the style) will be selected for you.
</param>
        <summary>Call to customize the basic appearance and behavior of the
 fragment's dialog.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call to customize the basic appearance and behavior of the
 fragment's dialog.  This can be used for some common dialog behaviors,
 taking care of selecting flags, theme, and other options for you.  The
 same effect can be achieve by manually setting Dialog and Window
 attributes yourself.  Calling this after the fragment's Dialog is
 created will have no effect.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#setStyle(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public virtual void Show (Android.App.FragmentManager manager, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Show(class Android.App.FragmentManager manager, string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("show", "(Landroid/app/FragmentManager;Ljava/lang/String;)V", "GetShow_Landroid_app_FragmentManager_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="Android.App.FragmentManager" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="manager">The FragmentManager this fragment will be added to.</param>
        <param name="tag">The tag for this fragment, as per
 <c><see cref="M:Android.App.FragmentTransaction.Add(Android.App.Fragment,System.String)" /></c>.
</param>
        <summary tool="true">Display the dialog, adding the fragment to the given FragmentManager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display the dialog, adding the fragment to the given FragmentManager.  This
 is a convenience for explicitly creating a transaction, adding the
 fragment to it with the given tag, and committing it.  This does
 <i>not</i> add the transaction to the back stack.  When the fragment
 is dismissed, a new transaction will be executed to remove it from
 the activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#show(android.app.FragmentManager, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public virtual int Show (Android.App.FragmentTransaction transaction, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Show(class Android.App.FragmentTransaction transaction, string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("show", "(Landroid/app/FragmentTransaction;Ljava/lang/String;)I", "GetShow_Landroid_app_FragmentTransaction_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="Android.App.FragmentTransaction" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transaction">An existing transaction in which to add the fragment.</param>
        <param name="tag">The tag for this fragment, as per
 <c><see cref="M:Android.App.FragmentTransaction.Add(Android.App.Fragment,System.String)" /></c>.</param>
        <summary>Display the dialog, adding the fragment using an existing transaction
 and then committing the transaction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Display the dialog, adding the fragment using an existing transaction
 and then committing the transaction.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#show(android.app.FragmentTransaction, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ShowsDialog">
      <MemberSignature Language="C#" Value="public virtual bool ShowsDialog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsDialog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getShowsDialog", "()Z", "GetGetShowsDialogHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setShowsDialog", "(Z)V", "GetSetShowsDialog_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current value of <c><see cref="P:Android.App.DialogFragment.ShowsDialog" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#getShowsDialog()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the current value of <c><see cref="P:Android.App.DialogFragment.ShowsDialog" /></c>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#setShowsDialog(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls whether this fragment should be shown in a dialog.  If not
 set, no Dialog will be created in <c><see cref="!:Android.App.DialogFragment.onActivityCreated(android.os.Bundle)" /></c>,
 and the fragment's view hierarchy will thus not be added to it.  This
 allows you to instead use it as a normal fragment (embedded inside of
 its activity).

 This is normally set for you based on whether the fragment is
 associated with a container view ID passed to
 <c><see cref="M:Android.App.FragmentTransaction.Add(System.Int32,Android.App.Fragment)" /></c>.
 If the fragment was added with a container, setShowsDialog will be
 initialized to false; otherwise, it will be true.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public virtual Android.App.DialogFragmentStyle Theme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.App.DialogFragmentStyle Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTheme", "()I", "GetGetThemeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.DialogFragmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/DialogFragment.html#getTheme()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
