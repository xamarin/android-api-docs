<Type Name="Activity" FullName="Android.App.Activity">
  <TypeSignature Language="C#" Value="public class Activity : Android.Views.ContextThemeWrapper, Android.Content.IComponentCallbacks2, Android.Views.KeyEvent.ICallback, Android.Views.LayoutInflater.IFactory2, Android.Views.View.IOnCreateContextMenuListener, Android.Views.Window.ICallback, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Activity extends Android.Views.ContextThemeWrapper implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class Android.Views.KeyEvent/ICallback, class Android.Views.LayoutInflater/IFactory, class Android.Views.LayoutInflater/IFactory2, class Android.Views.View/IOnCreateContextMenuListener, class Android.Views.Window/ICallback, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.ContextThemeWrapper</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.KeyEvent+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.LayoutInflater+IFactory2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.View+IOnCreateContextMenuListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.Window+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/Activity", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An activity is a single, focused thing that the user can do.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An activity is a single, focused thing that the user can do.  Almost all
 activities interact with the user, so the Activity class takes care of
 creating a window for you in which you can place your UI with
 <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View)" /></c>.  While activities are often presented to the user
 as full-screen windows, they can also be used in other ways: as floating
 windows (via a theme with <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#windowIsFloating" /></c> set)
 or embedded inside of another activity (using <c><see cref="T:Android.App.ActivityGroup" /></c>).

 There are two methods almost all subclasses of Activity will implement:

 <list type="bullet"><item><term><c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> is where you initialize your activity.  Most
     importantly, here you will usually call <c><see cref="M:Android.App.Activity.SetContentView(System.Int32)" /></c>
     with a layout resource defining your UI, and using <c><see cref="M:Android.App.Activity.FindViewById(System.Int32)" /></c>
     to retrieve the widgets in that UI that you need to interact with
     programmatically.

     </term></item><item><term><c><see cref="M:Android.App.Activity.OnPause" /></c> is where you deal with the user leaving your
     activity.  Most importantly, any changes made by the user should at this
     point be committed (usually to the
     <c><see cref="T:Android.Content.ContentProvider" /></c> holding the data).
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">To be of use with <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>, all
 activity classes must have a corresponding
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestActivity" /></c>
 declaration in their package's <c>AndroidManifest.xml</c>.</para>
      <para tool="javadoc-to-mdoc">Topics covered here:
 <list type="number"><item><term /></item><item><term /></item><item><term /></item><item><term /></item><item><term /></item><item><term /></item><item><term></term></item></list><format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">The Activity class is an important part of an application's overall lifecycle,
 and the way activities are launched and put together is a fundamental
 part of the platform's application model. For a detailed perspective on the structure of an
 Android application and how activities behave, please read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals.html">Application Fundamentals</a></format> and
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back Stack</a></format>
 developer guides.</para>
      <para tool="javadoc-to-mdoc">You can also find a detailed discussion about how to create activities in the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/activities.html">Activities</a></format>
 developer guide.</para>
      <format type="text/html">
        <h3>Fragments</h3>
      </format>
      <para tool="javadoc-to-mdoc">Starting with <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>, Activity
 implementations can make use of the <c><see cref="T:Android.App.Fragment" /></c> class to better
 modularize their code, build more sophisticated user interfaces for larger
 screens, and help scale their application between small and large screens.

 <format type="text/html"><h3>Activity Lifecycle</h3></format></para>
      <para tool="javadoc-to-mdoc">Activities in the system are managed as an <i>activity stack</i>.
 When a new activity is started, it is placed on the top of the stack
 and becomes the running activity -- the previous activity always remains
 below it in the stack, and will not come to the foreground again until
 the new activity exits.</para>
      <para tool="javadoc-to-mdoc">An activity has essentially four states:<list type="bullet"><item><term> If an activity in the foreground of the screen (at the top of
         the stack),
         it is <i>active</i> or  <i>running</i>. </term></item><item><term>If an activity has lost focus but is still visible (that is, a new non-full-sized
         or transparent activity has focus on top of your activity), it
         is <i>paused</i>. A paused activity is completely alive (it
         maintains all state and member information and remains attached to
         the window manager), but can be killed by the system in extreme
         low memory situations.
     </term></item><item><term>If an activity is completely obscured by another activity,
         it is <i>stopped</i>. It still retains all state and member information,
         however, it is no longer visible to the user so its window is hidden
         and it will often be killed by the system when memory is needed
         elsewhere.</term></item><item><term>If an activity is paused or stopped, the system can drop the activity
         from memory by either asking it to finish, or simply killing its
         process.  When it is displayed again to the user, it must be
         completely restarted and restored to its previous state.</term></item></list></para>
      <para tool="javadoc-to-mdoc">The following diagram shows the important state paths of an Activity.
 The square rectangles represent callback methods you can implement to
 perform operations when the Activity moves between states.  The colored
 ovals are major states the Activity can be in.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <img src="../../../images/activity_lifecycle.png" alt="State diagram for an Android Activity Lifecycle." border="0" />
        </format>
      </para>
      <para tool="javadoc-to-mdoc">There are three key loops you may be interested in monitoring within your
 activity:

 <list type="bullet"><item><term>The <format type="text/html"><b>entire lifetime</b></format> of an activity happens between the first call
 to <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> through to a single final call
 to <c><see cref="M:Android.App.Activity.OnDestroy" /></c>.  An activity will do all setup
 of "global" state in onCreate(), and release all remaining resources in
 onDestroy().  For example, if it has a thread running in the background
 to download data from the network, it may create that thread in onCreate()
 and then stop the thread in onDestroy().

 </term></item><item><term>The <format type="text/html"><b>visible lifetime</b></format> of an activity happens between a call to
 <c><see cref="M:Android.App.Activity.OnStart" /></c> until a corresponding call to
 <c><see cref="M:Android.App.Activity.OnStop" /></c>.  During this time the user can see the
 activity on-screen, though it may not be in the foreground and interacting
 with the user.  Between these two methods you can maintain resources that
 are needed to show the activity to the user.  For example, you can register
 a <c><see cref="T:Android.Content.BroadcastReceiver" /></c> in onStart() to monitor for changes
 that impact your UI, and unregister it in onStop() when the user no
 longer sees what you are displaying.  The onStart() and onStop() methods
 can be called multiple times, as the activity becomes visible and hidden
 to the user.

 </term></item><item><term>The <format type="text/html"><b>foreground lifetime</b></format> of an activity happens between a call to
 <c><see cref="M:Android.App.Activity.OnResume" /></c> until a corresponding call to
 <c><see cref="M:Android.App.Activity.OnPause" /></c>.  During this time the activity is
 in front of all other activities and interacting with the user.  An activity
 can frequently go between the resumed and paused states -- for example when
 the device goes to sleep, when an activity result is delivered, when a new
 intent is delivered -- so the code in these methods should be fairly
 lightweight.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">The entire lifecycle of an activity is defined by the following
 Activity methods.  All of these are hooks that you can override
 to do appropriate work when the activity changes state.  All
 activities will implement <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>
 to do their initial setup; many will also implement
 <c><see cref="M:Android.App.Activity.OnPause" /></c> to commit changes to data and
 otherwise prepare to stop interacting with the user.  You should always
 call up to your superclass when implementing these methods.</para>
      <example>
        <code lang="java">
 public class Activity extends ApplicationContext {
     protected void onCreate(Bundle savedInstanceState);

     protected void onStart();

     protected void onRestart();

     protected void onResume();

     protected void onPause();

     protected void onStop();

     protected void onDestroy();
 }
 </code>
      </example>
      <para tool="javadoc-to-mdoc">In general the movement through an activity's lifecycle looks like
 this:<format type="text/html"><table border="2" width="85%" align="center" frame="hsides" rules="rows"><colgroup align="left" span="3" /><colgroup align="left" /><colgroup align="center" /><colgroup align="center" /><thead><tr><th colspan="3">Method</th><th>Description</th><th>Killable?</th><th>Next</th></tr></thead><tbody><tr><th colspan="3" align="left" border="0"><c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c></th><td>Called when the activity is first created.
             This is where you should do all of your normal static set up:
             create views, bind data to lists, etc.  This method also
             provides you with a Bundle containing the activity's previously
             frozen state, if there was one.
             Always followed by <c>onStart()</c>.</td><td align="center">No</td><td align="center"><c>onStart()</c></td></tr><tr><td rowspan="5" style="border-left: none; border-right: none;">    </td><th colspan="2" align="left" border="0"><c><see cref="M:Android.App.Activity.OnRestart" /></c></th><td>Called after your activity has been stopped, prior to it being
             started again.
             Always followed by <c>onStart()</c></td><td align="center">No</td><td align="center"><c>onStart()</c></td></tr><tr><th colspan="2" align="left" border="0"><c><see cref="M:Android.App.Activity.OnStart" /></c></th><td>Called when the activity is becoming visible to the user.
             Followed by <c>onResume()</c> if the activity comes
             to the foreground, or <c>onStop()</c> if it becomes hidden.</td><td align="center">No</td><td align="center"><c>onResume()</c> or <c>onStop()</c></td></tr><tr><td rowspan="2" style="border-left: none;">    </td><th align="left" border="0"><c><see cref="M:Android.App.Activity.OnResume" /></c></th><td>Called when the activity will start
             interacting with the user.  At this point your activity is at
             the top of the activity stack, with user input going to it.
             Always followed by <c>onPause()</c>.</td><td align="center">No</td><td align="center"><c>onPause()</c></td></tr><tr><th align="left" border="0"><c><see cref="M:Android.App.Activity.OnPause" /></c></th><td>Called when the system is about to start resuming a previous
             activity.  This is typically used to commit unsaved changes to
             persistent data, stop animations and other things that may be consuming
             CPU, etc.  Implementations of this method must be very quick because
             the next activity will not be resumed until this method returns.
             Followed by either <c>onResume()</c> if the activity
             returns back to the front, or <c>onStop()</c> if it becomes
             invisible to the user.</td><td align="center"><font color="#800000"><i>Pre-<c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c></i></font></td><td align="center"><c>onResume()</c> or<br /><c>onStop()</c></td></tr><tr><th colspan="2" align="left" border="0"><c><see cref="M:Android.App.Activity.OnStop" /></c></th><td>Called when the activity is no longer visible to the user, because
             another activity has been resumed and is covering this one.  This
             may happen either because a new activity is being started, an existing
             one is being brought in front of this one, or this one is being
             destroyed.
             Followed by either <c>onRestart()</c> if
             this activity is coming back to interact with the user, or
             <c>onDestroy()</c> if this activity is going away.</td><td align="center"><font color="#800000"><i>Yes</i></font></td><td align="center"><c>onRestart()</c> or<br /><c>onDestroy()</c></td></tr><tr><th colspan="3" align="left" border="0"><c><see cref="M:Android.App.Activity.OnDestroy" /></c></th><td>The final call you receive before your
             activity is destroyed.  This can happen either because the
             activity is finishing (someone called <c><see cref="M:Android.App.Activity.Finish" /></c> on
             it, or because the system is temporarily destroying this
             instance of the activity to save space.  You can distinguish
             between these two scenarios with the <c><see cref="P:Android.App.Activity.IsFinishing" /></c> method.</td><td align="center"><font color="#800000"><i>Yes</i></font></td><td align="center"><i>nothing</i></td></tr></tbody></table></format></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Note the "Killable" column in the above table -- for those methods that
 are marked as being killable, after that method returns the process hosting the
 activity may be killed by the system <i>at any time</i> without another line
 of its code being executed.  Because of this, you should use the
 <c><see cref="M:Android.App.Activity.OnPause" /></c> method to write any persistent data (such as user edits)
 to storage.  In addition, the method
 <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> is called before placing the activity
 in such a background state, allowing you to save away any dynamic instance
 state in your activity into the given Bundle, to be later received in
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> if the activity needs to be re-created.
 See the 
 section for more information on how the lifecycle of a process is tied
 to the activities it is hosting.  Note that it is important to save
 persistent data in <c><see cref="M:Android.App.Activity.OnPause" /></c> instead of <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>
 because the latter is not part of the lifecycle callbacks, so will not
 be called in every situation as described in its documentation.</para>
      <para tool="javadoc-to-mdoc">Be aware that these semantics will change slightly between
 applications targeting platforms starting with <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 vs. those targeting prior platforms.  Starting with Honeycomb, an application
 is not in the killable state until its <c><see cref="M:Android.App.Activity.OnStop" /></c> has returned.  This
 impacts when <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> may be called (it may be
 safely called after <c><see cref="M:Android.App.Activity.OnPause" /></c> and allows and application to safely
 wait until <c><see cref="M:Android.App.Activity.OnStop" /></c> to save persistent state.</para>
      <para tool="javadoc-to-mdoc">For those methods that are not marked as being killable, the activity's
 process will not be killed by the system starting from the time the method
 is called and continuing after it returns.  Thus an activity is in the killable
 state, for example, between after <c>onPause()</c> to the start of
 <c>onResume()</c>.</para>
      <format type="text/html">
        <h3>Configuration Changes</h3>
      </format>
      <para tool="javadoc-to-mdoc">If the configuration of the device (as defined by the
 <c><see cref="T:Android.Content.Res.Configuration" /></c> class) changes,
 then anything displaying a user interface will need to update to match that
 configuration.  Because Activity is the primary mechanism for interacting
 with the user, it includes special support for handling configuration
 changes.</para>
      <para tool="javadoc-to-mdoc">Unless you specify otherwise, a configuration change (such as a change
 in screen orientation, language, input devices, etc) will cause your
 current activity to be <i>destroyed</i>, going through the normal activity
 lifecycle process of <c><see cref="M:Android.App.Activity.OnPause" /></c>,
 <c><see cref="M:Android.App.Activity.OnStop" /></c>, and <c><see cref="M:Android.App.Activity.OnDestroy" /></c> as appropriate.  If the activity
 had been in the foreground or visible to the user, once <c><see cref="M:Android.App.Activity.OnDestroy" /></c> is
 called in that instance then a new instance of the activity will be
 created, with whatever savedInstanceState the previous instance had generated
 from <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.</para>
      <para tool="javadoc-to-mdoc">This is done because any application resource,
 including layout files, can change based on any configuration value.  Thus
 the only safe way to handle a configuration change is to re-retrieve all
 resources, including layouts, drawables, and strings.  Because activities
 must already know how to save their state and re-create themselves from
 that state, this is a convenient way to have an activity restart itself
 with a new configuration.</para>
      <para tool="javadoc-to-mdoc">In some special cases, you may want to bypass restarting of your
 activity based on one or more types of configuration changes.  This is
 done with the <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#configChanges" /></c>
 attribute in its manifest.  For any types of configuration changes you say
 that you handle there, you will receive a call to your current activity's
 <c><see cref="M:Android.App.Activity.OnConfigurationChanged(Android.Content.Res.Configuration)" /></c> method instead of being restarted.  If
 a configuration change involves any that you do not handle, however, the
 activity will still be restarted and <c><see cref="M:Android.App.Activity.OnConfigurationChanged(Android.Content.Res.Configuration)" /></c>
 will not be called.</para>
      <format type="text/html">
        <h3>Starting Activities and Getting Results</h3>
      </format>
      <para tool="javadoc-to-mdoc">The <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>
 method is used to start a
 new activity, which will be placed at the top of the activity stack.  It
 takes a single argument, an <c><see cref="T:Android.Content.Intent" /></c>,
 which describes the activity
 to be executed.</para>
      <para tool="javadoc-to-mdoc">Sometimes you want to get a result back from an activity when it
 ends.  For example, you may start an activity that lets the user pick
 a person in a list of contacts; when it ends, it returns the person
 that was selected.  To do this, you call the
 <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 version with a second integer parameter identifying the call.  The result
 will come back through your <c><see cref="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c>
 method.</para>
      <para tool="javadoc-to-mdoc">When an activity exits, it can call
 <c><see cref="M:Android.App.Activity.SetResult(Android.App.Result)" /></c>
 to return data back to its parent.  It must always supply a result code,
 which can be the standard results RESULT_CANCELED, RESULT_OK, or any
 custom values starting at RESULT_FIRST_USER.  In addition, it can optionally
 return back an Intent containing any additional data it wants.  All of this
 information appears back on the
 parent's <c>Activity.onActivityResult()</c>, along with the integer
 identifier it originally supplied.</para>
      <para tool="javadoc-to-mdoc">If a child activity fails for any reason (such as crashing), the parent
 activity will receive a result with the code RESULT_CANCELED.<example><code lang="java">
 public class MyActivity extends Activity {
     ...

     static final int PICK_CONTACT_REQUEST = 0;

     public boolean onKeyDown(int keyCode, KeyEvent event) {
         if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
             // When the user center presses, let them pick a contact.
             startActivityForResult(
                 new Intent(Intent.ACTION_PICK,
                 new Uri("content://contacts")),
                 PICK_CONTACT_REQUEST);
            return true;
         }
         return false;
     }

     protected void onActivityResult(int requestCode, int resultCode,
             Intent data) {
         if (requestCode == PICK_CONTACT_REQUEST) {
             if (resultCode == RESULT_OK) {
                 // A contact was picked.  Here we will just display it
                 // to the user.
                 startActivity(new Intent(Intent.ACTION_VIEW, data));
             }
         }
     }
 }
 </code></example><format type="text/html"><h3>Saving Persistent State</h3></format></para>
      <para tool="javadoc-to-mdoc">There are generally two kinds of persistent state than an activity
 will deal with: shared document-like data (typically stored in a SQLite
 database using a <see cref="T:Android.Content.ContentProvider" />)
 and internal state such as user preferences.</para>
      <para tool="javadoc-to-mdoc">For content provider data, we suggest that activities use a
 "edit in place" user model.  That is, any edits a user makes are effectively
 made immediately without requiring an additional confirmation step.
 Supporting this model is generally a simple matter of following two rules:<list type="bullet"><item><term /></item><item><term /></item></list></para>
      <para tool="javadoc-to-mdoc">When creating a new document, the backing database entry or file for
             it is created immediately.  For example, if the user chooses to write
             a new e-mail, a new entry for that e-mail is created as soon as they
             start entering data, so that if they go to any other activity after
             that point this e-mail will now appear in the list of drafts.</para>
      <para tool="javadoc-to-mdoc">When an activity's <c>onPause()</c> method is called, it should
             commit to the backing content provider or file any changes the user
             has made.  This ensures that those changes will be seen by any other
             activity that is about to run.  You will probably want to commit
             your data even more aggressively at key times during your
             activity's lifecycle: for example before starting a new
             activity, before finishing your own activity, when the user
             switches between input fields, etc.</para>
      <para tool="javadoc-to-mdoc">This model is designed to prevent data loss when a user is navigating
 between activities, and allows the system to safely kill an activity (because
 system resources are needed somewhere else) at any time after it has been
 paused.  Note this implies
 that the user pressing BACK from your activity does <i>not</i>
 mean "cancel" -- it means to leave the activity with its current contents
 saved away.  Canceling edits in an activity must be provided through
 some other mechanism, such as an explicit "revert" or "undo" option.</para>
      <para tool="javadoc-to-mdoc">See the <see cref="T:Android.Content.ContentProvider" /> for
 more information about content providers.  These are a key aspect of how
 different activities invoke and propagate data between themselves.</para>
      <para tool="javadoc-to-mdoc">The Activity class also provides an API for managing internal persistent state
 associated with an activity.  This can be used, for example, to remember
 the user's preferred initial display in a calendar (day view or week view)
 or the user's default home page in a web browser.</para>
      <para tool="javadoc-to-mdoc">Activity persistent state is managed
 with the method <c><see cref="M:Android.App.Activity.GetPreferences(Android.Content.FileCreationMode)" /></c>,
 allowing you to retrieve and
 modify a set of name/value pairs associated with the activity.  To use
 preferences that are shared across multiple application components
 (activities, receivers, services, providers), you can use the underlying
 <c><see cref="M:Android.Content.Context.GetSharedPreferences(System.String,Android.Content.FileCreationMode)" /></c> method
 to retrieve a preferences
 object stored under a specific name.
 (Note that it is not possible to share settings data across application
 packages -- for that you will need a content provider.)</para>
      <para tool="javadoc-to-mdoc">Here is an excerpt from a calendar activity that stores the user's
 preferred view mode in its persistent settings:<example><code lang="java">
 public class CalendarActivity extends Activity {
     ...

     static final int DAY_VIEW_MODE = 0;
     static final int WEEK_VIEW_MODE = 1;

     private SharedPreferences mPrefs;
     private int mCurViewMode;

     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         SharedPreferences mPrefs = getSharedPreferences();
         mCurViewMode = mPrefs.getInt("view_mode", DAY_VIEW_MODE);
     }

     protected void onPause() {
         super.onPause();

         SharedPreferences.Editor ed = mPrefs.edit();
         ed.putInt("view_mode", mCurViewMode);
         ed.commit();
     }
 }
 </code></example><format type="text/html"><h3>Permissions</h3></format></para>
      <para tool="javadoc-to-mdoc">The ability to start a particular Activity can be enforced when it is
 declared in its
 manifest's <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestActivity" /></c>
 tag.  By doing so, other applications will need to declare a corresponding
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestUsesPermission" /></c>
 element in their own manifest to be able to start that activity.

 </para>
      <para tool="javadoc-to-mdoc">When starting an Activity you can set <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> and/or <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c> on the Intent.  This will grant the
 Activity access to the specific URIs in the Intent.  Access will remain
 until the Activity has finished (it will remain across the hosting
 process being killed and other temporary destruction).  As of
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#GINGERBREAD" /></c>, if the Activity
 was already created and a new Intent is being delivered to
 <c><see cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" /></c>, any newly granted URI permissions will be added
 to the existing ones it holds.

 </para>
      <para tool="javadoc-to-mdoc">See the <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/security/security.html">Security and Permissions</a></format>
 document for more information on permissions and security in general.

 <format type="text/html"><h3>Process Lifecycle</h3></format></para>
      <para tool="javadoc-to-mdoc">The Android system attempts to keep application process around for as
 long as possible, but eventually will need to remove old processes when
 memory runs low.  As described in , the decision about which process to remove is intimately
 tied to the state of the user's interaction with it.  In general, there
 are four states a process can be in based on the activities running in it,
 listed here in order of importance.  The system will kill less important
 processes (the last ones) before it resorts to killing more important
 processes (the first ones).

 <list type="number"><item><term>The <format type="text/html"><b>foreground activity</b></format> (the activity at the top of the screen
 that the user is currently interacting with) is considered the most important.
 Its process will only be killed as a last resort, if it uses more memory
 than is available on the device.  Generally at this point the device has
 reached a memory paging state, so this is required in order to keep the user
 interface responsive.
 </term></item><item><term>A <format type="text/html"><b>visible activity</b></format> (an activity that is visible to the user
 but not in the foreground, such as one sitting behind a foreground dialog)
 is considered extremely important and will not be killed unless that is
 required to keep the foreground activity running.
 </term></item><item><term>A <format type="text/html"><b>background activity</b></format> (an activity that is not visible to
 the user and has been paused) is no longer critical, so the system may
 safely kill its process to reclaim memory for other foreground or
 visible processes.  If its process needs to be killed, when the user navigates
 back to the activity (making it visible on the screen again), its
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> method will be called with the savedInstanceState it had previously
 supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> so that it can restart itself in the same
 state as the user last left it.
 </term></item><item><term>An <format type="text/html"><b>empty process</b></format> is one hosting no activities or other
 application components (such as <c><see cref="T:Android.App.Service" /></c> or
 <c><see cref="T:Android.Content.BroadcastReceiver" /></c> classes).  These are killed very
 quickly by the system as memory becomes low.  For this reason, any
 background operation you do outside of an activity must be executed in the
 context of an activity BroadcastReceiver or Service to ensure that the system
 knows it needs to keep your process around.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Sometimes an Activity may need to do a long-running operation that exists
 independently of the activity lifecycle itself.  An example may be a camera
 application that allows you to upload a picture to a web site.  The upload
 may take a long time, and the application should allow the user to leave
 the application will it is executing.  To accomplish this, your Activity
 should start a <c><see cref="T:Android.App.Service" /></c> in which the upload takes place.  This allows
 the system to properly prioritize your process (considering it to be more
 important than other non-visible applications) for the duration of the
 upload, independent of whether the original activity is paused, stopped,
 or finished.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/Activity.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#Activity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Activity (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionBar">
      <MemberSignature Language="C#" Value="public virtual Android.App.ActionBar ActionBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.ActionBar ActionBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActionBar", "()Landroid/app/ActionBar;", "GetGetActionBarHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.ActionBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a reference to this activity's ActionBar.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a reference to this activity's ActionBar.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getActionBar()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddContentView">
      <MemberSignature Language="C#" Value="public virtual void AddContentView (Android.Views.View view, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.
</param>
        <summary>Add an additional content view to the activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add an additional content view to the activity.  Added after any existing
 ones in the activity -- existing views are NOT removed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#addContentView(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Android.App.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Application Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getApplication", "()Landroid/app/Application;", "GetGetApplicationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the application that owns this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the application that owns this activity. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getApplication()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingActivity">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName CallingActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ComponentName CallingActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingActivity", "()Landroid/content/ComponentName;", "GetGetCallingActivityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the activity that invoked this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the name of the activity that invoked this activity.  This is
 who the data in <c><see cref="M:Android.App.Activity.SetResult(Android.App.Result)" /></c> will be sent to.  You
 can use this information to validate that the recipient is allowed to
 receive the data.

 </para>
          <para tool="javadoc-to-mdoc">Note: if the calling activity is not expecting a result (that is it
 did not use the <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 form that includes a request code), then the calling package will be
 null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getCallingActivity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingPackage">
      <MemberSignature Language="C#" Value="public virtual string CallingPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "GetGetCallingPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the package that invoked this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the name of the package that invoked this activity.  This is who
 the data in <c><see cref="M:Android.App.Activity.SetResult(Android.App.Result)" /></c> will be sent to.  You can
 use this information to validate that the recipient is allowed to
 receive the data.

 </para>
          <para tool="javadoc-to-mdoc">Note: if the calling activity is not expecting a result (that is it
 did not use the <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 form that includes a request code), then the calling package will be
 null.</para>
          <para tool="javadoc-to-mdoc">Note: prior to <c><see cref="F:Android.OS.Build+VERSION.JellyBeanMr2" tool="ReplaceLinkValue" /></c>,
 the result from this method was unstable.  If the process hosting the calling
 package was no longer running, it would return null instead of the proper package
 name.  You can use <c><see cref="P:Android.App.Activity.CallingActivity" /></c> and retrieve the package name
 from that instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getCallingPackage()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChangingConfigurations">
      <MemberSignature Language="C#" Value="public virtual Android.Content.PM.ConfigChanges ChangingConfigurations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Content.PM.ConfigChanges ChangingConfigurations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChangingConfigurations", "()I", "GetGetChangingConfigurationsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ConfigChanges</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this activity is being destroyed because it can not handle a
 configuration parameter being changed (and thus its
 <c><see cref="M:Android.App.Activity.OnConfigurationChanged(Android.Content.Res.Configuration)" /></c> method is
 <i>not</i> being called), then you can use this method to discover
 the set of changes that have occurred while in the process of being
 destroyed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">If this activity is being destroyed because it can not handle a
 configuration parameter being changed (and thus its
 <c><see cref="M:Android.App.Activity.OnConfigurationChanged(Android.Content.Res.Configuration)" /></c> method is
 <i>not</i> being called), then you can use this method to discover
 the set of changes that have occurred while in the process of being
 destroyed.  Note that there is no guarantee that these will be
 accurate (other changes could have happened at any time), so you should
 only use this as an optimization hint.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getChangingConfigurations()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CloseContextMenu">
      <MemberSignature Language="C#" Value="public virtual void CloseContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseContextMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("closeContextMenu", "()V", "GetCloseContextMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Programmatically closes the most recently opened context menu, if showing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Programmatically closes the most recently opened context menu, if showing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#closeContextMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CloseOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void CloseOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseOptionsMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("closeOptionsMenu", "()V", "GetCloseOptionsMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Progammatically closes the options menu.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Progammatically closes the options menu. If the options menu is already
 closed, this method does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#closeOptionsMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ComponentName">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName ComponentName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ComponentName ComponentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getComponentName", "()Landroid/content/ComponentName;", "GetGetComponentNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns complete component name of this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns complete component name of this activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getComponentName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ContentScene">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Scene ContentScene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Scene ContentScene" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContentScene", "()Landroid/transition/Scene;", "GetGetContentSceneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Scene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the <c><see cref="T:Android.Transitions.Scene" /></c> representing this window's current content.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the <c><see cref="T:Android.Transitions.Scene" /></c> representing this window's current content.
 Requires <c><see cref="!:Android.Views.Window.FEATURE_CONTENT_TRANSITIONS" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method will return null if the current content is not represented by a Scene.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getContentScene()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTransitionManager">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.TransitionManager ContentTransitionManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.TransitionManager ContentTransitionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContentTransitionManager", "()Landroid/transition/TransitionManager;", "GetGetContentTransitionManagerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setContentTransitionManager", "(Landroid/transition/TransitionManager;)V", "GetSetContentTransitionManager_Landroid_transition_TransitionManager_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.TransitionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the <c><see cref="T:Android.Transitions.TransitionManager" /></c> responsible for default transitions in this window.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getContentTransitionManager()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Retrieve the <c><see cref="T:Android.Transitions.TransitionManager" /></c> responsible for default transitions in this window.
 Requires <c><see cref="!:Android.Views.Window.FEATURE_CONTENT_TRANSITIONS" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method will return non-null after content has been initialized (e.g. by using
 <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View)" /></c>) if <c><see cref="!:Android.Views.Window.FEATURE_CONTENT_TRANSITIONS" /></c> has been granted.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setContentTransitionManager(android.transition.TransitionManager)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the <c><see cref="T:Android.Transitions.TransitionManager" /></c> to use for default transitions in this window.
 Requires <c><see cref="!:Android.Views.Window.FEATURE_CONTENT_TRANSITIONS" /></c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePendingResult">
      <MemberSignature Language="C#" Value="public virtual Android.App.PendingIntent CreatePendingResult (int requestCode, Android.Content.Intent data, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.PendingIntent CreatePendingResult(int32 requestCode, class Android.Content.Intent data, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createPendingResult", "(ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "GetCreatePendingResult_ILandroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="data" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="requestCode">Private request code for the sender that will be
 associated with the result data when it is returned.  The sender can not
 modify this value, allowing you to identify incoming results.</param>
        <param name="data">Default data to supply in the result, which may be modified
 by the sender.</param>
        <param name="flags">May be <c><see cref="!:Android.App.PendingIntent.FLAG_ONE_SHOT" /></c>,
 <c><see cref="!:Android.App.PendingIntent.FLAG_NO_CREATE" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.CancelCurrent" tool="ReplaceLinkValue" /></c>,
 <c><see cref="F:Android.App.PendingIntentFlags.UpdateCurrent" tool="ReplaceLinkValue" /></c>,
 or any of the flags as supported by
 <c><see cref="M:Android.Content.Intent.FillIn(Android.Content.Intent,Android.Content.FillInFlags)" /></c> to control which unspecified parts
 of the intent that can be supplied when the actual send happens.</param>
        <summary>Create a new PendingIntent object which you can hand to others
 for them to use to send result data back to your
 <c><see cref="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c> callback.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new PendingIntent object which you can hand to others
 for them to use to send result data back to your
 <c><see cref="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.App.Result)" /></c> callback.  The created object will be either
 one-shot (becoming invalid after a result is sent back) or multiple
 (allowing any number of results to be sent through it).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#createPendingResult(int, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.App.PendingIntent" />
      </Docs>
    </Member>
    <Member MemberName="CurrentFocus">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View CurrentFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View CurrentFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentFocus", "()Landroid/view/View;", "GetGetCurrentFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calls <c><see cref="P:Android.Views.Window.CurrentFocus" /></c> on the
 Window of this Activity to return the currently focused view.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Calls <c><see cref="P:Android.Views.Window.CurrentFocus" /></c> on the
 Window of this Activity to return the currently focused view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getCurrentFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Window" />
        <altmember cref="P:Android.Views.Window.CurrentFocus" />
      </Docs>
    </Member>
    <Member MemberName="DismissDialog">
      <MemberSignature Language="C#" Value="public void DismissDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DismissDialog(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dismissDialog", "(I)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <summary>Dismiss a dialog that was previously shown via <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Dismiss a dialog that was previously shown via <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dismissDialog(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the id was not previously shown via
   <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32)" /></c>.</exception>
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchGenericMotionEvent (Android.Views.MotionEvent ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchGenericMotionEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericMotionEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The generic motion event.</param>
        <summary>Called to process generic motion events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process generic motion events.  You can override this to
 intercept all generic motion events before they are dispatched to the
 window.  Be sure to call this implementation for generic motion events
 that should be handled normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchGenericMotionEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <summary>Called to process key events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process key events.  You can override this to intercept all
 key events before they are dispatched to the window.  Be sure to call
 this implementation for key events that should be handled normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchKeyEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyShortcutEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyShortcutEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyShortcutEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyShortcutEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key shortcut event.</param>
        <summary>Called to process a key shortcut event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process a key shortcut event.
 You can override this to intercept all key shortcut events before they are
 dispatched to the window.  Be sure to call this implementation for key shortcut
 events that should be handled normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchKeyShortcutEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchPopulateAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchPopulateAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event.</param>
        <summary>Called to process population of <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process population of <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>s.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTouchEvent (Android.Views.MotionEvent ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTouchEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The touch screen event.</param>
        <summary>Called to process touch screen events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process touch screen events.  You can override this to
 intercept all touch screen events before they are dispatched to the
 window.  Be sure to call this implementation for touch screen events
 that should be handled normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTrackballEvent (Android.Views.MotionEvent ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTrackballEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTrackballEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The trackball event.</param>
        <summary>Called to process trackball events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process trackball events.  You can override this to
 intercept all trackball events before they are dispatched to the
 window.  Be sure to call this implementation for trackball events
 that should be handled normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchTrackballEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (string prefix, Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(string prefix, class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_lang_String_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prefix">Desired prefix to prepend at each line of output.</param>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
 closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the Activity's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the Activity's state into the given stream.  This gets invoked if
 you run "adb shell dumpsys activity &lt;activity_component_name&gt;".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FindViewById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FindViewById(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findViewById", "(I)Landroid/view/View;", "GetFindViewById_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Finds a view that was identified by the id attribute from the XML that
 was processed in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Finds a view that was identified by the id attribute from the XML that
 was processed in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#findViewById(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T FindViewById&lt;T&gt; (int id) where T : Android.Views.View;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T FindViewById&lt;(class Android.Views.View) T&gt;(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Android.Views.View</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">The Type of the view to be returned (Button, ListView, etc.).</typeparam>
        <param name="id">The id of the view to find.</param>
        <summary>Finds a view that was identified by the id attribute from the XML layout resource.</summary>
        <returns>The view if found or null otherwise.</returns>
        <remarks>Finds a view that was identified by the id attribute from the XML layout resource.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finish">
      <MemberSignature Language="C#" Value="public virtual void Finish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Finish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finish", "()V", "GetFinishHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this when your activity is done and should be closed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this when your activity is done and should be closed.  The
 ActivityResult is propagated back to whoever launched you via
 onActivityResult().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finish()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishActivity">
      <MemberSignature Language="C#" Value="public virtual void FinishActivity (int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishActivity(int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishActivity", "(I)V", "GetFinishActivity_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="requestCode">The request code of the activity that you had
                    given to startActivityForResult().  If there are multiple
                    activities started with this request code, they
                    will all be finished.
</param>
        <summary>Force finish another activity that you had previously started with
 <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Force finish another activity that you had previously started with
 <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishActivity(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void FinishActivityFromChild (Android.App.Activity child, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishActivityFromChild(class Android.App.Activity child, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishActivityFromChild", "(Landroid/app/Activity;I)V", "GetFinishActivityFromChild_Landroid_app_Activity_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="requestCode">Request code that had been used to start the
                    activity.
</param>
        <summary>This is called when a child activity of this one calls its
 finishActivity().</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a child activity of this one calls its
 finishActivity().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishActivityFromChild(android.app.Activity, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishAffinity">
      <MemberSignature Language="C#" Value="public virtual void FinishAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAffinity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishAffinity", "()V", "GetFinishAffinityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish this activity as well as all activities immediately below it
 in the current task that have the same affinity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Finish this activity as well as all activities immediately below it
 in the current task that have the same affinity.  This is typically
 used when an application can be launched on to another task (such as
 from an ACTION_VIEW of a content type it understands) and the user
 has used the up navigation to switch out of the current task and in
 to its own task.  In this case, if the user has navigated down into
 any other activities of the second application, all of those should
 be removed from the original task as part of the task switch.

 </para>
          <para tool="javadoc-to-mdoc">Note that this finish does <i>not</i> allow you to deliver results
 to the previous activity, and an exception will be thrown if you are trying
 to do so.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishAffinity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FinishAfterTransition">
      <MemberSignature Language="C#" Value="public virtual void FinishAfterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAfterTransition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishAfterTransition", "()V", "GetFinishAfterTransitionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverses the Activity Scene entry Transition and triggers the calling Activity
 to reverse its exit Transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reverses the Activity Scene entry Transition and triggers the calling Activity
 to reverse its exit Transition. When the exit Transition completes,
 <c><see cref="M:Android.App.Activity.Finish" /></c> is called. If no entry Transition was used, finish() is called
 immediately and the Activity exit Transition is run.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishAfterTransition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishAndRemoveTask">
      <MemberSignature Language="C#" Value="public virtual void FinishAndRemoveTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAndRemoveTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishAndRemoveTask", "()V", "GetFinishAndRemoveTaskHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this when your activity is done and should be closed and the task should be completely
 removed as a part of finishing the Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this when your activity is done and should be closed and the task should be completely
 removed as a part of finishing the Activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishFromChild">
      <MemberSignature Language="C#" Value="public virtual void FinishFromChild (Android.App.Activity child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishFromChild(class Android.App.Activity child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishFromChild", "(Landroid/app/Activity;)V", "GetFinishFromChild_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <summary>This is called when a child activity of this one calls its
 <c><see cref="M:Android.App.Activity.Finish" /></c> method.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a child activity of this one calls its
 <c><see cref="M:Android.App.Activity.Finish" /></c> method.  The default implementation simply calls
 finish() on this activity (the parent), finishing the entire group.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#finishFromChild(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.Finish" />
      </Docs>
    </Member>
    <Member MemberName="FocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt; FocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FOCUSED_STATE_SET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#FOCUSED_STATE_SET" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FragmentManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.FragmentManager FragmentManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.FragmentManager FragmentManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFragmentManager", "()Landroid/app/FragmentManager;", "GetGetFragmentManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FragmentManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the FragmentManager for interacting with fragments associated
 with this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the FragmentManager for interacting with fragments associated
 with this activity.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getFragmentManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferences">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ISharedPreferences GetPreferences (Android.Content.FileCreationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ISharedPreferences GetPreferences(valuetype Android.Content.FileCreationMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPreferences", "(I)Landroid/content/SharedPreferences;", "GetGetPreferences_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ISharedPreferences</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">Operating mode.  Use <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the default
             operation, <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c> and
             <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control permissions.</param>
        <summary>Retrieve a <c><see cref="T:Android.Content.ISharedPreferences" /></c> object for accessing preferences
 that are private to this activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a <c><see cref="T:Android.Content.ISharedPreferences" /></c> object for accessing preferences
 that are private to this activity.  This simply calls the underlying
 <c><see cref="M:Android.Content.ContextWrapper.GetSharedPreferences(System.String,Android.Content.FileCreationMode)" /></c> method by passing in this activity's
 class name as the preferences name.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getPreferences(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasWindowFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasWindowFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWindowFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasWindowFocus", "()Z", "GetHasWindowFocusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this activity's <i>main</i> window currently has window focus.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if this activity's <i>main</i> window currently has window focus.
 Note that this is not the same as the view itself having focus.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#hasWindowFocus()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnWindowAttributesChanged(Android.Views.WindowManagerLayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="Immersive">
      <MemberSignature Language="C#" Value="public virtual bool Immersive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Immersive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isImmersive", "()Z", "GetIsImmersiveHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setImmersive", "(Z)V", "GetSetImmersive_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bit indicating that this activity is "immersive" and should not be
 interrupted by notifications if possible.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#isImmersive()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Bit indicating that this activity is "immersive" and should not be
 interrupted by notifications if possible.

 This value is initially set by the manifest property
 <c>android:immersive</c> but may be changed at runtime by
 <c><see cref="P:Android.App.Activity.Immersive" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setImmersive(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Adjust the current immersive mode setting.

 Note that changing this value will have no effect on the activity's
 <c><see cref="T:Android.Content.PM.ActivityInfo" /></c> structure; that is, if
 <c>android:immersive</c> is set to <c>true</c>
 in the application's manifest entry for this activity, the <c><see cref="P:Android.Content.PM.ActivityInfo.Flags" /></c> member will
 always have its <c><see cref="!:Android.Content.PM.ActivityInfo.FLAG_IMMERSIVE" /></c> bit set.</para>
        </remarks>
        <since version="Added in API level 18" />
        <altmember cref="P:Android.App.Activity.Immersive" />
        <altmember cref="P:Android.App.Activity.Immersive" />
      </Docs>
    </Member>
    <Member MemberName="InstanceCount">
      <MemberSignature Language="C#" Value="public static long InstanceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 InstanceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInstanceCount", "()J", "GetGetInstanceCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent Intent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Intent Intent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getIntent", "()Landroid/content/Intent;", "GetGetIntentHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setIntent", "(Landroid/content/Intent;)V", "GetSetIntent_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the intent that started this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getIntent()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the intent that started this activity. </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setIntent(android.content.Intent)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the intent returned by <c><see cref="P:Android.App.Activity.Intent" /></c>.  This holds a
 reference to the given intent; it does not copy it.  Often used in
 conjunction with <c><see cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" /></c>.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Intent" />
        <altmember cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void InvalidateOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateOptionsMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateOptionsMenu", "()V", "GetInvalidateOptionsMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Declare that the options menu has changed, so should be recreated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Declare that the options menu has changed, so should be recreated.
 The <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c> method will be called the next
 time it needs to be displayed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#invalidateOptionsMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsChangingConfigurations">
      <MemberSignature Language="C#" Value="public virtual bool IsChangingConfigurations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChangingConfigurations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isChangingConfigurations", "()Z", "GetIsChangingConfigurationsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see whether this activity is in the process of being destroyed in order to be
 recreated with a new configuration.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check to see whether this activity is in the process of being destroyed in order to be
 recreated with a new configuration. This is often used in
 <c><see cref="M:Android.App.Activity.OnStop" /></c> to determine whether the state needs to be cleaned up or will be passed
 on to the next instance of the activity via <c><see cref="M:Android.App.Activity.OnRetainNonConfigurationInstance" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsChild">
      <MemberSignature Language="C#" Value="public bool IsChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isChild", "()Z", "GetIsChildHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this activity embedded inside of another activity? </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Is this activity embedded inside of another activity? </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#isChild()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDestroyed">
      <MemberSignature Language="C#" Value="public virtual bool IsDestroyed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDestroyed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDestroyed", "()Z", "GetIsDestroyedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the final <c><see cref="M:Android.App.Activity.OnDestroy" /></c> call has been made
 on the Activity, so this instance is now dead.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the final <c><see cref="M:Android.App.Activity.OnDestroy" /></c> call has been made
 on the Activity, so this instance is now dead.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#isDestroyed()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="IsFinishing">
      <MemberSignature Language="C#" Value="public virtual bool IsFinishing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinishing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFinishing", "()Z", "GetIsFinishingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see whether this activity is in the process of finishing,
 either because you called <c><see cref="M:Android.App.Activity.Finish" /></c> on it or someone else
 has requested that it finished.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check to see whether this activity is in the process of finishing,
 either because you called <c><see cref="M:Android.App.Activity.Finish" /></c> on it or someone else
 has requested that it finished.  This is often used in
 <c><see cref="M:Android.App.Activity.OnPause" /></c> to determine whether the activity is simply pausing or
 completely finishing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#isFinishing()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.Finish" />
      </Docs>
    </Member>
    <Member MemberName="IsTaskRoot">
      <MemberSignature Language="C#" Value="public virtual bool IsTaskRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTaskRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTaskRoot", "()Z", "GetIsTaskRootHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this activity is the root of a task.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return whether this activity is the root of a task.  The root is the
 first activity in a task.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#isTaskRoot()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LastNonConfigurationInstance">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object LastNonConfigurationInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object LastNonConfigurationInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLastNonConfigurationInstance", "()Ljava/lang/Object;", "GetGetLastNonConfigurationInstanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the non-configuration instance data that was previously
 returned by <c><see cref="M:Android.App.Activity.OnRetainNonConfigurationInstance" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the non-configuration instance data that was previously
 returned by <c><see cref="M:Android.App.Activity.OnRetainNonConfigurationInstance" /></c>.  This will
 be available from the initial <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> and
 <c><see cref="M:Android.App.Activity.OnStart" /></c> calls to the new instance, allowing you to extract
 any useful dynamic state from the previous instance.

 </para>
          <para tool="javadoc-to-mdoc">Note that the data you retrieve here should <i>only</i> be used
 as an optimization for handling configuration changes.  You should always
 be able to handle getting a null pointer back, and an activity must
 still be able to restore itself to its previous state (through the
 normal <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> mechanism) even if this
 function returns null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getLastNonConfigurationInstance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutInflater">
      <MemberSignature Language="C#" Value="public virtual Android.Views.LayoutInflater LayoutInflater { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.LayoutInflater LayoutInflater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutInflater", "()Landroid/view/LayoutInflater;", "GetGetLayoutInflaterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Convenience for calling
 <c><see cref="P:Android.Views.Window.LayoutInflater" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for calling
 <c><see cref="P:Android.Views.Window.LayoutInflater" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getLayoutInflater()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LoaderManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.LoaderManager LoaderManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.LoaderManager LoaderManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoaderManager", "()Landroid/app/LoaderManager;", "GetGetLoaderManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.LoaderManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the LoaderManager for this activity, creating it if needed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the LoaderManager for this activity, creating it if needed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getLoaderManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="LocalClassName">
      <MemberSignature Language="C#" Value="public virtual string LocalClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalClassName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLocalClassName", "()Ljava/lang/String;", "GetGetLocalClassNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns class name for this activity with the package prefix removed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns class name for this activity with the package prefix removed.
 This is the default name used to read and write settings.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getLocalClassName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ManagedQuery">
      <MemberSignature Language="C#" Value="public Android.Database.ICursor ManagedQuery (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Database.ICursor ManagedQuery(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("managedQuery", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI of the content provider to query.</param>
        <param name="projection">List of columns to return.</param>
        <param name="selection">SQL WHERE clause.</param>
        <param name="selectionArgs">The arguments to selection, if any ?s are pesent</param>
        <param name="sortOrder">SQL ORDER BY clause.</param>
        <summary>Wrapper around
 <c><see cref="M:Android.Content.ContentResolver.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>
 that gives the resulting <c><see cref="T:Android.Database.ICursor" /></c> to call
 <c><see cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" /></c> so that the activity will manage its
 lifecycle for you.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Wrapper around
 <c><see cref="M:Android.Content.ContentResolver.Query(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>
 that gives the resulting <c><see cref="T:Android.Database.ICursor" /></c> to call
 <c><see cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" /></c> so that the activity will manage its
 lifecycle for you.

 <i>If you are targeting <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 or later, consider instead using <c><see cref="T:Android.App.LoaderManager" /></c> instead, available
 via <c><see cref="P:Android.App.Activity.LoaderManager" /></c>.</i></para>
          <para tool="javadoc-to-mdoc">
            <i>Warning:</i> Do not call <c><see cref="M:Android.Database.ICursor.Close" /></c> on a cursor obtained using
 this method, because the activity will do that for you at the appropriate time. However, if
 you call <c><see cref="M:Android.App.Activity.StopManagingCursor(Android.Database.ICursor)" /></c> on a cursor from a managed query, the system <i>will
 not</i> automatically close the cursor and, in that case, you must call
 <c><see cref="M:Android.Database.ICursor.Close" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Content.ContentResolver.Query(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" />
        <altmember cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="MediaController">
      <MemberSignature Language="C#" Value="public Android.Media.Session.MediaController MediaController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.Session.MediaController MediaController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMediaController", "()Landroid/media/session/MediaController;", "GetGetMediaControllerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMediaController", "(Landroid/media/session/MediaController;)V", "GetSetMediaController_Landroid_media_session_MediaController_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the controller which should be receiving media key and volume events
 while this activity is in the foreground.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getMediaController()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the controller which should be receiving media key and volume events
 while this activity is in the foreground.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setMediaController(android.media.session.MediaController)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets a <c><see cref="T:Android.Media.Session.MediaController" /></c> to send media keys and volume changes to.
 
 The controller will be tied to the window of this Activity. Media key and
 volume events which are received while the Activity is in the foreground
 will be forwarded to the controller and used to invoke transport controls
 or adjust the volume. This may be used instead of or in addition to
 <c><see cref="P:Android.App.Activity.VolumeControlStream" /></c> to affect a specific session instead of a
 specific stream.
 
 It is not guaranteed that the hardware volume controls will always change
 this session's volume (for example, if a call is in progress, its
 stream's volume may be changed instead). To reset back to the default use
 null as the controller.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <altmember cref="P:Android.App.Activity.MediaController" />
      </Docs>
    </Member>
    <Member MemberName="MenuInflater">
      <MemberSignature Language="C#" Value="public virtual Android.Views.MenuInflater MenuInflater { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.MenuInflater MenuInflater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMenuInflater", "()Landroid/view/MenuInflater;", "GetGetMenuInflaterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.MenuInflater</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c><see cref="T:Android.Views.MenuInflater" /></c> with this context.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a <c><see cref="T:Android.Views.MenuInflater" /></c> with this context.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getMenuInflater()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MoveTaskToBack">
      <MemberSignature Language="C#" Value="public virtual bool MoveTaskToBack (bool nonRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveTaskToBack(bool nonRoot) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("moveTaskToBack", "(Z)Z", "GetMoveTaskToBack_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonRoot">If false then this only works if the activity is the root
                of a task; if true it will work for any activity in
                a task.</param>
        <summary>Move the task containing this activity to the back of the activity
 stack.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Move the task containing this activity to the back of the activity
 stack.  The activity's order within the task is unchanged.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#moveTaskToBack(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUpTo">
      <MemberSignature Language="C#" Value="public virtual bool NavigateUpTo (Android.Content.Intent upIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NavigateUpTo(class Android.Content.Intent upIntent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("navigateUpTo", "(Landroid/content/Intent;)Z", "GetNavigateUpTo_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="upIntent">An intent representing the target destination for up navigation</param>
        <summary>Navigate from this activity to the activity specified by upIntent, finishing this activity
 in the process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Navigate from this activity to the activity specified by upIntent, finishing this activity
 in the process. If the activity indicated by upIntent already exists in the task's history,
 this activity and all others before the indicated activity in the history stack will be
 finished.

 </para>
          <para tool="javadoc-to-mdoc">If the indicated activity does not appear in the history stack, this will finish
 each activity in this task until the root activity of the task is reached, resulting in
 an "in-app home" behavior. This can be useful in apps with a complex navigation hierarchy
 when an activity may be reached by a path not passing through a canonical parent
 activity.</para>
          <para tool="javadoc-to-mdoc">This method should be used when performing up navigation from within the same task
 as the destination. If up navigation should cross tasks in some cases, see
 <c><see cref="M:Android.App.Activity.ShouldUpRecreateTask(Android.Content.Intent)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#navigateUpTo(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUpToFromChild">
      <MemberSignature Language="C#" Value="public virtual bool NavigateUpToFromChild (Android.App.Activity child, Android.Content.Intent upIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NavigateUpToFromChild(class Android.App.Activity child, class Android.Content.Intent upIntent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("navigateUpToFromChild", "(Landroid/app/Activity;Landroid/content/Intent;)Z", "GetNavigateUpToFromChild_Landroid_app_Activity_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="upIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="upIntent">An intent representing the target destination for up navigation</param>
        <summary>This is called when a child activity of this one calls its
 <c><see cref="M:Android.App.Activity.NavigateUpTo(Android.Content.Intent)" /></c> method.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a child activity of this one calls its
 <c><see cref="M:Android.App.Activity.NavigateUpTo(Android.Content.Intent)" /></c> method.  The default implementation simply calls
 navigateUpTo(upIntent) on this activity (the parent).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#navigateUpToFromChild(android.app.Activity, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeFinished">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeFinished (Android.Views.ActionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeFinished(class Android.Views.ActionMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActionModeFinished", "(Landroid/view/ActionMode;)V", "GetOnActionModeFinished_Landroid_view_ActionMode_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The action mode that just finished.
</param>
        <summary>Notifies the activity that an action mode has finished.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies the activity that an action mode has finished.
 Activity subclasses overriding this method should call the superclass implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onActionModeFinished(android.view.ActionMode)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeStarted">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeStarted (Android.Views.ActionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeStarted(class Android.Views.ActionMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActionModeStarted", "(Landroid/view/ActionMode;)V", "GetOnActionModeStarted_Landroid_view_ActionMode_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The new action mode.
</param>
        <summary>Notifies the Activity that an action mode has been started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies the Activity that an action mode has been started.
 Activity subclasses overriding this method should call the superclass implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onActionModeStarted(android.view.ActionMode)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActivityReenter">
      <MemberSignature Language="C#" Value="public virtual void OnActivityReenter (int resultCode, Android.Content.Intent data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityReenter(int32 resultCode, class Android.Content.Intent data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActivityReenter", "(ILandroid/content/Intent;)V", "GetOnActivityReenter_ILandroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="System.Int32" />
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="resultCode">The integer result code returned by the child activity
                   through its setResult().</param>
        <param name="data">An Intent, which can return result data to the caller
               (various data can be attached to Intent "extras").
</param>
        <summary>Called when an activity you launched with an activity transition exposes this
 Activity through a returning activity transition, giving you the resultCode
 and any additional data from it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when an activity you launched with an activity transition exposes this
 Activity through a returning activity transition, giving you the resultCode
 and any additional data from it. This method will only be called if the activity
 set a result code other than <c><see cref="F:Android.App.Result.Canceled" tool="ReplaceLinkValue" /></c> and it supports activity
 transitions with <c><see cref="F:Android.Views.WindowsFeatures.ActivityTransitions" tool="ReplaceLinkValue" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The purpose of this function is to let the called Activity send a hint about
 its state so that this underlying Activity can prepare to be exposed. A call to
 this method does not guarantee that the called Activity has or will be exiting soon.
 It only indicates that it will expose this Activity's Window and it has
 some data to pass to prepare it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onActivityReenter(int, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityResult">
      <MemberSignature Language="C#" Value="protected virtual void OnActivityResult (int requestCode, Android.App.Result resultCode, Android.Content.Intent data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivityResult(int32 requestCode, valuetype Android.App.Result resultCode, class Android.Content.Intent data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActivityResult", "(IILandroid/content/Intent;)V", "GetOnActivityResult_IILandroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="requestCode">The integer request code originally supplied to
                    startActivityForResult(), allowing you to identify who this
                    result came from.</param>
        <param name="resultCode">The integer result code returned by the child activity
                   through its setResult().</param>
        <param name="data">An Intent, which can return result data to the caller
               (various data can be attached to Intent "extras").</param>
        <summary>Called when an activity you launched exits, giving you the requestCode
 you started it with, the resultCode it returned, and any additional
 data from it.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when an activity you launched exits, giving you the requestCode
 you started it with, the resultCode it returned, and any additional
 data from it.  The <format type="text/html"><var>resultCode</var></format> will be
 <c><see cref="F:Android.App.Result.Canceled" tool="ReplaceLinkValue" /></c> if the activity explicitly returned that,
 didn't return any result, or crashed during its operation.

 </para>
          <para tool="javadoc-to-mdoc">You will receive this call immediately before onResume() when your
 activity is re-starting.

 </para>
          <para tool="javadoc-to-mdoc">This method is never invoked if your activity sets
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestActivity_noHistory" /></c> to
 <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
        <altmember cref="M:Android.App.Activity.CreatePendingResult(System.Int32, Android.Content.Intent, Android.Content.Intent)" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="OnAttachedToWindow">
      <MemberSignature Language="C#" Value="public virtual void OnAttachedToWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttachedToWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the main window associated with the activity has been
 attached to the window manager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the main window associated with the activity has been
 attached to the window manager.
 See <c><see cref="M:Android.Views.View.OnAttachedToWindow" /></c>
 for more information.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onAttachedToWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.OnAttachedToWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnAttachFragment">
      <MemberSignature Language="C#" Value="public virtual void OnAttachFragment (Android.App.Fragment fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttachFragment(class Android.App.Fragment fragment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAttachFragment", "(Landroid/app/Fragment;)V", "GetOnAttachFragment_Landroid_app_Fragment_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
      </Parameters>
      <Docs>
        <param name="fragment">To be added.</param>
        <summary>Called when a Fragment is being attached to this activity, immediately
 after the call to its <c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c>
 method and before <c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a Fragment is being attached to this activity, immediately
 after the call to its <c><see cref="M:Android.App.Fragment.OnAttach(Android.App.Activity)" /></c>
 method and before <c><see cref="M:Android.App.Fragment.OnCreate(Android.OS.Bundle)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onAttachFragment(android.app.Fragment)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnBackPressed">
      <MemberSignature Language="C#" Value="public virtual void OnBackPressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnBackPressed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onBackPressed", "()V", "GetOnBackPressedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the activity has detected the user's press of the back
 key.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the activity has detected the user's press of the back
 key.  The default implementation simply finishes the current activity,
 but you can override this to do whatever you want.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onBackPressed()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OnChildTitleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildTitleChanged (Android.App.Activity childActivity, Java.Lang.ICharSequence title);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildTitleChanged(class Android.App.Activity childActivity, class Java.Lang.ICharSequence title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onChildTitleChanged", "(Landroid/app/Activity;Ljava/lang/CharSequence;)V", "GetOnChildTitleChanged_Landroid_app_Activity_Ljava_lang_CharSequence_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childActivity" Type="Android.App.Activity" />
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="childActivity">To be added.</param>
        <param name="title">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onChildTitleChanged(android.app.Activity, java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnChildTitleChanged">
      <MemberSignature Language="C#" Value="protected void OnChildTitleChanged (Android.App.Activity childActivity, string title);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChildTitleChanged(class Android.App.Activity childActivity, string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childActivity" Type="Android.App.Activity" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childActivity">To be added.</param>
        <param name="title">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.
</param>
        <summary>Called by the system when the device configuration changes while your
 activity is running.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the system when the device configuration changes while your
 activity is running.  Note that this will <i>only</i> be called if
 you have selected configurations you would like to handle with the
 <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#configChanges" /></c> attribute in your manifest.  If
 any configuration change occurs that is not selected to be reported
 by that attribute, then instead of reporting it the system will stop
 and restart the activity (to have it launched with the new
 configuration).

 </para>
          <para tool="javadoc-to-mdoc">At the time that this function has been called, your Resources
 object will have been updated to return resource values matching the
 new configuration.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="public virtual void OnContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContentChanged", "()V", "GetOnContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This hook is called whenever the content view of the screen changes
 (due to a call to
 <c><see cref="M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)" /></c> or
 <c><see cref="M:Android.Views.Window.AddContentView(Android.Views.View,.LayoutParams)" /></c>).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the content view of the screen changes
 (due to a call to
 <c><see cref="M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)" /></c> or
 <c><see cref="M:Android.Views.Window.AddContentView(Android.Views.View,.LayoutParams)" /></c>).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContextItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnContextItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnContextItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContextItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnContextItemSelected_Landroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The context menu item that was selected.</param>
        <summary>This hook is called whenever an item in a context menu is selected.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever an item in a context menu is selected. The
 default implementation simply returns false to have the normal processing
 happen (calling the item's Runnable or sending a message to its Handler
 as appropriate). You can use this method for any items for which you
 would like to do processing without those other facilities.
 </para>
          <para tool="javadoc-to-mdoc">
 Use <c><see cref="P:Android.Views.IMenuItem.MenuInfo" /></c> to get extra information set by the
 View that added this menu item.
 </para>
          <para tool="javadoc-to-mdoc">
 Derived classes should call through to the base class for it to perform
 the default menu handling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onContextItemSelected(android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosed">
      <MemberSignature Language="C#" Value="public virtual void OnContextMenuClosed (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContextMenuClosed(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContextMenuClosed", "(Landroid/view/Menu;)V", "GetOnContextMenuClosed_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu that is being closed.
</param>
        <summary>This hook is called whenever the context menu is being closed (either by
 the user canceling the menu with the back/menu button, or when an item is
 selected).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the context menu is being closed (either by
 the user canceling the menu with the back/menu button, or when an item is
 selected).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onContextMenuClosed(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="protected virtual void OnCreate (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;)V", "GetOnCreate_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the activity is being re-initialized after
     previously being shut down then this Bundle contains the data it most
     recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.  <format type="text/html"><b><i>Note: Otherwise it is null.</i></b></format></param>
        <summary>Called when the activity is starting.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the activity is starting.  This is where most initialization
 should go: calling <c><see cref="M:Android.App.Activity.SetContentView(System.Int32)" /></c> to inflate the
 activity's UI, using <c><see cref="M:Android.App.Activity.FindViewById(System.Int32)" /></c> to programmatically interact
 with widgets in the UI, calling
 <c><see cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c> to retrieve
 cursors for data being displayed, etc.

 </para>
          <para tool="javadoc-to-mdoc">You can call <c><see cref="M:Android.App.Activity.Finish" /></c> from within this function, in
 which case onDestroy() will be immediately called without any of the rest
 of the activity lifecycle (<c><see cref="M:Android.App.Activity.OnStart" /></c>, <c><see cref="M:Android.App.Activity.OnResume" /></c>,
 <c><see cref="M:Android.App.Activity.OnPause" /></c>, etc) executing.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public virtual void OnCreate (Android.OS.Bundle savedInstanceState, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">if the activity is being re-initialized after
     previously being shut down then this Bundle contains the data it most
     recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.
     <format type="text/html"><b><i>Note: Otherwise it is null.</i></b></format></param>
        <param name="persistentState">if the activity is being re-initialized after
     previously being shut down or powered off then this Bundle contains the data it most
     recently supplied to outPersistentState in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.
     <format type="text/html"><b><i>Note: Otherwise it is null.</i></b></format></param>
        <summary>Same as <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> but called for those activities created with
 the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> but called for those activities created with
 the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle, android.os.PersistableBundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateContextMenu">
      <MemberSignature Language="C#" Value="public virtual void OnCreateContextMenu (Android.Views.IContextMenu menu, Android.Views.View v, Android.Views.IContextMenuContextMenuInfo menuInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateContextMenu(class Android.Views.IContextMenu menu, class Android.Views.View v, class Android.Views.IContextMenuContextMenuInfo menuInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateContextMenu", "(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V", "GetOnCreateContextMenu_Landroid_view_ContextMenu_Landroid_view_View_Landroid_view_ContextMenu_ContextMenuInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="menuInfo" Type="Android.Views.IContextMenuContextMenuInfo" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu that is being built</param>
        <param name="v">The view for which the context menu is being built</param>
        <param name="menuInfo">Extra information about the item for which the
            context menu should be shown. This information will vary
            depending on the class of v.
</param>
        <summary>Called when a context menu for the <c>view</c> is about to be shown.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a context menu for the <c>view</c> is about to be shown.
 Unlike <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c>, this will be called every
 time the context menu is about to be shown and should be populated for
 the view (or item inside the view for <c><see cref="T:Android.Widget.AdapterView" /></c> subclasses,
 this can be found in the <c>menuInfo</c>)).
 </para>
          <para tool="javadoc-to-mdoc">
 Use <c><see cref="M:Android.App.Activity.OnContextItemSelected(Android.Views.IMenuItem)" /></c> to know when an
 item has been selected.
 </para>
          <para tool="javadoc-to-mdoc">
 It is not safe to hold onto the context menu after this method returns.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDescription">
      <MemberSignature Language="C#" Value="public string OnCreateDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string OnCreateDescription() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateDescriptionFormatted">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ICharSequence OnCreateDescriptionFormatted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence OnCreateDescriptionFormatted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateDescription", "()Ljava/lang/CharSequence;", "GetOnCreateDescriptionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generate a new description for this activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Generate a new description for this activity.  This method is called
 before pausing the activity and can, if desired, return some textual
 description of its current state to be displayed to the user.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation returns null, which will cause you to
 inherit the description from the previous activity.  If all activities
 return null, generally the label of the top activity will be used as the
 description.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateDescription()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateThumbnail(Android.Graphics.Bitmap, Android.Graphics.Canvas)" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDialog">
      <MemberSignature Language="C#" Value="protected virtual Android.App.Dialog OnCreateDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.App.Dialog OnCreateDialog(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateDialog", "(I)Landroid/app/Dialog;", "GetOnCreateDialog_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateDialog(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDialog">
      <MemberSignature Language="C#" Value="protected virtual Android.App.Dialog OnCreateDialog (int id, Android.OS.Bundle args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.App.Dialog OnCreateDialog(int32 id, class Android.OS.Bundle args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateDialog", "(ILandroid/os/Bundle;)Landroid/app/Dialog;", "GetOnCreateDialog_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the dialog.</param>
        <param name="args">The dialog arguments provided to <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" /></c>.</param>
        <summary>Callback for creating dialogs that are managed (saved and restored) for you
 by the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Callback for creating dialogs that are managed (saved and restored) for you
 by the activity.  The default implementation calls through to
 <c><see cref="M:Android.App.Activity.OnCreateDialog(System.Int32)" /></c> for compatibility.

 <i>If you are targeting <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 or later, consider instead using a <c><see cref="T:Android.App.DialogFragment" /></c> instead.</i></para>
          <para tool="javadoc-to-mdoc">If you use <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32)" /></c>, the activity will call through to
 this method the first time, and hang onto it thereafter.  Any dialog
 that is created by this method will automatically be saved and restored
 for you, including whether it is showing.

 </para>
          <para tool="javadoc-to-mdoc">If you would like the activity to manage saving and restoring dialogs
 for you, you should override this method and handle any ids that are
 passed to <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If you would like an opportunity to prepare your dialog before it is shown,
 override <c><see cref="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog,Android.App.Dialog)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateDialog(int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateNavigateUpTaskStack">
      <MemberSignature Language="C#" Value="public virtual void OnCreateNavigateUpTaskStack (Android.App.TaskStackBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateNavigateUpTaskStack(class Android.App.TaskStackBuilder builder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnCreateNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Android.App.TaskStackBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">An empty TaskStackBuilder - the application should add intents representing
                the desired task stack
</param>
        <summary>Define the synthetic task stack that will be generated during Up navigation from
 a different task.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Define the synthetic task stack that will be generated during Up navigation from
 a different task.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation of this method adds the parent chain of this activity
 as specified in the manifest to the supplied <c><see cref="T:Android.App.TaskStackBuilder" /></c>. Applications
 may choose to override this method to construct the desired task stack in a different
 way.</para>
          <para tool="javadoc-to-mdoc">This method will be invoked by the default implementation of <c><see cref="M:Android.App.Activity.OnNavigateUp" /></c>
 if <c><see cref="M:Android.App.Activity.ShouldUpRecreateTask(Android.Content.Intent)" /></c> returns true when supplied with the intent
 returned by <c><see cref="P:Android.App.Activity.ParentActivityIntent" /></c>.</para>
          <para tool="javadoc-to-mdoc">Applications that wish to supply extra Intent parameters to the parent stack defined
 by the manifest should override <c><see cref="M:Android.App.Activity.OnPrepareNavigateUpTaskStack(Android.App.TaskStackBuilder)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnCreateOptionsMenu (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreateOptionsMenu(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnCreateOptionsMenu_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu in which you place your items.</param>
        <summary>Initialize the contents of the Activity's standard options menu.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Initialize the contents of the Activity's standard options menu.  You
 should place your menu items in to <format type="text/html"><var>menu</var></format>.

 </para>
          <para tool="javadoc-to-mdoc">This is only called once, the first time the options menu is
 displayed.  To update the menu every time it is displayed, see
 <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation populates the menu with standard system
 menu items.  These are placed in the <c><see cref="!:Android.Views.Menu.CATEGORY_SYSTEM" /></c> group so that
 they will be correctly ordered with application-defined menu items.
 Deriving classes should always call through to the base implementation.

 </para>
          <para tool="javadoc-to-mdoc">You can safely hold on to <format type="text/html"><var>menu</var></format> (and any items created
 from it), making modifications to it as desired, until the next
 time onCreateOptionsMenu() is called.

 </para>
          <para tool="javadoc-to-mdoc">When you add items to the menu, you can implement the Activity's
 <c><see cref="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" /></c> method to handle them there.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateOptionsMenu(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" />
        <altmember cref="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnCreatePanelMenu (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreatePanelMenu(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreatePanelMenu", "(ILandroid/view/Menu;)Z", "GetOnCreatePanelMenu_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel being created.</param>
        <param name="menu">The menu inside the panel.</param>
        <summary>Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onCreatePanelMenu(int,android.view.Menu)" /></c>
 for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onCreatePanelMenu(int,android.view.Menu)" /></c>
 for activities.  This calls through to the new
 <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c> method for the
 <c><see cref="!:Android.Views.Window.FEATURE_OPTIONS_PANEL" /></c> panel,
 so that subclasses of Activity don't need to deal with feature codes.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreatePanelMenu(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreatePanelView (int featureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreatePanelView(int32 featureId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreatePanelView", "(I)Landroid/view/View;", "GetOnCreatePanelView_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">Which panel is being created.</param>
        <summary>Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onCreatePanelView(int)" /></c>
 for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onCreatePanelView(int)" /></c>
 for activities. This
 simply returns null so that all panel sub-windows will have the default
 menu behavior.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreatePanelView(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateThumbnail">
      <MemberSignature Language="C#" Value="public virtual bool OnCreateThumbnail (Android.Graphics.Bitmap outBitmap, Android.Graphics.Canvas canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreateThumbnail(class Android.Graphics.Bitmap outBitmap, class Android.Graphics.Canvas canvas) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateThumbnail", "(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z", "GetOnCreateThumbnail_Landroid_graphics_Bitmap_Landroid_graphics_Canvas_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outBitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="outBitmap">The bitmap to contain the thumbnail.</param>
        <param name="canvas">Can be used to render into the bitmap.</param>
        <summary>Generate a new thumbnail for this activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Generate a new thumbnail for this activity.  This method is called before
 pausing the activity, and should draw into <format type="text/html"><var>outBitmap</var></format> the
 imagery for the desired thumbnail in the dimensions of that bitmap.  It
 can use the given <format type="text/html"><var>canvas</var></format>, which is configured to draw into the
 bitmap, for rendering if desired.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation returns fails and does not draw a thumbnail;
 this will result in the platform creating its own thumbnail if needed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateThumbnail(android.graphics.Bitmap, android.graphics.Canvas)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateDescriptionFormatted" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreateView (string name, Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateView(string name, class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateView", "(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="name">Tag name to be inflated.</param>
        <param name="context">The context the view is being created in.</param>
        <param name="attrs">Inflation attributes as specified in XML file.</param>
        <summary>Standard implementation of
 <c><see cref="!:NoType:android/view/LayoutInflater$Factory;Href=../../../reference/android/view/LayoutInflater.Factory.html#onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)" /></c> used when
 inflating with the LayoutInflater returned by <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard implementation of
 <c><see cref="!:NoType:android/view/LayoutInflater$Factory;Href=../../../reference/android/view/LayoutInflater.Factory.html#onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)" /></c> used when
 inflating with the LayoutInflater returned by <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.
 This implementation does nothing and is for
 pre-<c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c> apps.  Newer apps
 should use <c><see cref="M:Android.App.Activity.OnCreateView(Android.Views.View,System.String,System.String,System.String)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.LayoutInflater.CreateView(System.String, System.String, System.String)" />
        <altmember cref="P:Android.Views.Window.LayoutInflater" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreateView (Android.Views.View parent, string name, Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateView(class Android.Views.View parent, string name, class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateView", "(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Landroid_view_View_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.View" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="parent">The parent that the created view will be placed
 in; <i>note that this may be null</i>.</param>
        <param name="name">Tag name to be inflated.</param>
        <param name="context">The context the view is being created in.</param>
        <param name="attrs">Inflation attributes as specified in XML file.</param>
        <summary>Standard implementation of
 <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html#onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" /></c>
 used when inflating with the LayoutInflater returned by <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard implementation of
 <c><see cref="!:NoType:android/view/LayoutInflater$Factory2;Href=../../../reference/android/view/LayoutInflater.Factory2.html#onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)" /></c>
 used when inflating with the LayoutInflater returned by <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" tool="ReplaceLinkValue" /></c>.
 This implementation handles <format type="text/html"><fragment> tags to embed fragments inside
 of the activity.</fragment></format></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.LayoutInflater.CreateView(System.String, System.String, System.String)" />
        <altmember cref="P:Android.Views.Window.LayoutInflater" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroy">
      <MemberSignature Language="C#" Value="protected virtual void OnDestroy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDestroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDestroy", "()V", "GetOnDestroyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Perform any final cleanup before an activity is destroyed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform any final cleanup before an activity is destroyed.  This can
 happen either because the activity is finishing (someone called
 <c><see cref="M:Android.App.Activity.Finish" /></c> on it, or because the system is temporarily destroying
 this instance of the activity to save space.  You can distinguish
 between these two scenarios with the <c><see cref="P:Android.App.Activity.IsFinishing" /></c> method.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note: do not count on this method being called as a place for
 saving data! For example, if an activity is editing data in a content
 provider, those edits should be committed in either <c><see cref="M:Android.App.Activity.OnPause" /></c> or
 <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>, not here.</i> This method is usually implemented to
 free resources like threads that are associated with an activity, so
 that a destroyed activity does not leave such things around while the
 rest of its application is still running.  There are situations where
 the system will simply kill the activity's hosting process without
 calling this method (or any others) in it, so it should not be used to
 do things that are intended to remain around after the process goes
 away.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onDestroy()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnPause" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.Finish" />
        <altmember cref="P:Android.App.Activity.IsFinishing" />
      </Docs>
    </Member>
    <Member MemberName="OnDetachedFromWindow">
      <MemberSignature Language="C#" Value="public virtual void OnDetachedFromWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetachedFromWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the main window associated with the activity has been
 detached from the window manager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the main window associated with the activity has been
 detached from the window manager.
 See <c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c>
 for more information.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onDetachedFromWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.OnDetachedFromWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnEnterAnimationComplete">
      <MemberSignature Language="C#" Value="public virtual void OnEnterAnimationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterAnimationComplete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onEnterAnimationComplete", "()V", "GetOnEnterAnimationCompleteHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activities cannot draw during the period that their windows are animating in.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Activities cannot draw during the period that their windows are animating in. In order
 to know when it is safe to begin drawing they can override this method which will be
 called when the entering animation has completed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onEnterAnimationComplete()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnGenericMotionEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnGenericMotionEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetOnGenericMotionEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The generic motion event being processed.</param>
        <summary>Called when a generic motion event was not handled by any of the
 views inside of the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a generic motion event was not handled by any of the
 views inside of the activity.
 </para>
          <para tool="javadoc-to-mdoc">
 Generic motion events describe joystick movements, mouse hovers, track pad
 touches, scroll wheel movements and other input events.  The
 <c><see cref="P:Android.Views.MotionEvent.Source" /></c> of the motion event specifies
 the class of input that was received.  Implementations of this method
 must examine the bits in the source before processing the event.
 The following code example shows how this is done.
 </para>
          <para tool="javadoc-to-mdoc">
 Generic motion events with source class
 <c><see cref="F:Android.Views.InputDevice.SourceClassPointer" /></c>
 are delivered to the view under the pointer.  All other generic motion events are
 delivered to the focused view.
 </para>
          <para tool="javadoc-to-mdoc">
 See <c><see cref="M:Android.Views.View.OnGenericMotionEvent(Android.Views.MotionEvent)" /></c> for an example of how to
 handle this event.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onGenericMotionEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyDown (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyDown(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyDown", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyDown_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called when a key was pressed down and not handled by any of the views
 inside of the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a key was pressed down and not handled by any of the views
 inside of the activity. So, for example, key presses while the cursor
 is inside a TextView will not trigger the event (unless it is a navigation
 to another object) because TextView handles its own key presses.

 </para>
          <para tool="javadoc-to-mdoc">If the focused view didn't want this event, this method is called.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation takes care of <c><see cref="!:Android.Views.KeyEvent.KEYCODE_BACK" /></c>
 by calling <c><see cref="M:Android.App.Activity.OnBackPressed" /></c>, though the behavior varies based
 on the application compatibility mode: for
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#ECLAIR" /></c> or later applications,
 it will set up the dispatch to call <c><see cref="M:Android.App.Activity.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)" /></c> where the action
 will be performed; for earlier applications, it will perform the
 action immediately in on-down, as those versions of the platform
 behaved.

 </para>
          <para tool="javadoc-to-mdoc">Other additional default key handling may be performed
 if configured with <c><see cref="M:Android.App.Activity.SetDefaultKeyMode(Android.App.DefaultKey)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onKeyDown(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyUp(Android.Views.Keycode, Android.Views.KeyEvent)" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyLongPress">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyLongPress (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyLongPress(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyLongPress", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyLongPress_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyLongPress(int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyLongPress(int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onKeyLongPress(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyMultiple">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyMultiple (Android.Views.Keycode keyCode, int repeatCount, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyMultiple(valuetype Android.Views.Keycode keyCode, int32 repeatCount, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyMultiple", "(IILandroid/view/KeyEvent;)Z", "GetOnKeyMultiple_IILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="repeatCount">Number of pairs as returned by event.getRepeatCount().</param>
        <param name="e">Description of the key event.</param>
        <summary>Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyMultiple(int,int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of <c><see cref="!:NoType:android/view/KeyEvent$Callback;Href=../../../reference/android/view/KeyEvent.Callback.html#onKeyMultiple(int,int,android.view.KeyEvent)" /></c>: always returns false (doesn't handle
 the event).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onKeyMultiple(int, int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyShortcut">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyShortcut (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyShortcut(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyShortcut", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyShortcut_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called when a key shortcut event is not handled by any of the views in the Activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a key shortcut event is not handled by any of the views in the Activity.
 Override this method to implement global key shortcuts for the Activity.
 Key shortcuts can also be implemented by setting the
 <c><see cref="M:Android.Views.IMenuItem.SetShortcut(System.Char,System.Char)" /></c> property of menu items.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onKeyShortcut(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyUp (Android.Views.Keycode keyCode, Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyUp(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onKeyUp", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyUp_ILandroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called when a key was released and not handled by any of the views
 inside of the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a key was released and not handled by any of the views
 inside of the activity. So, for example, key presses while the cursor
 is inside a TextView will not trigger the event (unless it is a navigation
 to another object) because TextView handles its own key presses.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation handles KEYCODE_BACK to stop the activity
 and go back.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onKeyUp(int, android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyDown(Android.Views.Keycode, Android.Views.KeyEvent)" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.  While
 the exact point at which this will be called is not defined, generally
 it will happen when all background process have been killed.
 That is, before reaching the point of killing processes hosting
 service and foreground UI that we would like to avoid killing.

 </para>
          <para tool="javadoc-to-mdoc">You should implement this method to release
 any caches or other unnecessary resources you may be holding on to.
 The system will perform a garbage collection for you after returning from this method.
 </para>
          <para tool="javadoc-to-mdoc">Preferably, you should implement <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> from
 <c><see cref="T:Android.Content.ComponentCallbacks2" /></c> to incrementally unload your resources based on various
 levels of memory demands.  That API is available for API level 14 and higher, so you should
 only use this <c><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" /></c> method as a fallback for older versions, which can be
 treated the same as <c><see cref="M:Android.App.Application.OnTrimMemory" tool="ReplaceLinkValue" /></c> with the <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c> level.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onLowMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuItemSelected (int featureId, Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuItemSelected(int32 featureId, class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onMenuItemSelected", "(ILandroid/view/MenuItem;)Z", "GetOnMenuItemSelected_ILandroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="item">The menu item that was selected.</param>
        <summary>Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onMenuItemSelected(int,android.view.MenuItem)" /></c>
 for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onMenuItemSelected(int,android.view.MenuItem)" /></c>
 for activities.  This calls through to the new
 <c><see cref="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" /></c> method for the
 <c><see cref="!:Android.Views.Window.FEATURE_OPTIONS_PANEL" /></c>
 panel, so that subclasses of
 Activity don't need to deal with feature codes.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onMenuItemSelected(int, android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuOpened">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuOpened (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuOpened(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onMenuOpened", "(ILandroid/view/Menu;)Z", "GetOnMenuOpened_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="menu">The menu that is opened.</param>
        <summary>Called when a panel's menu is opened by the user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a panel's menu is opened by the user. This may also be
 called when the menu is changing from one type to another (for
 example, from the icon menu to the expanded menu).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onMenuOpened(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigateUp">
      <MemberSignature Language="C#" Value="public virtual bool OnNavigateUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNavigateUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNavigateUp", "()Z", "GetOnNavigateUpHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called whenever the user chooses to navigate Up within your application's
 activity hierarchy from the action bar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called whenever the user chooses to navigate Up within your application's
 activity hierarchy from the action bar.

 </para>
          <para tool="javadoc-to-mdoc">If the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#parentActivityName" /></c>
 was specified in the manifest for this activity or an activity-alias to it,
 default Up navigation will be handled automatically. If any activity
 along the parent chain requires extra Intent arguments, the Activity subclass
 should override the method <c><see cref="M:Android.App.Activity.OnPrepareNavigateUpTaskStack(Android.App.TaskStackBuilder)" /></c>
 to supply those arguments.</para>
          <para tool="javadoc-to-mdoc">See <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back Stack</a></format>
 from the developer guide and <format type="text/html"><a href="http://developer.android.com/reference/../design/patterns/navigation.html">Navigation</a></format>
 from the design guide for more information about navigating within your app.</para>
          <para tool="javadoc-to-mdoc">See the <c><see cref="T:Android.App.TaskStackBuilder" /></c> class and the Activity methods
 <c><see cref="P:Android.App.Activity.ParentActivityIntent" /></c>, <c><see cref="M:Android.App.Activity.ShouldUpRecreateTask(Android.Content.Intent)" /></c>, and
 <c><see cref="M:Android.App.Activity.NavigateUpTo(Android.Content.Intent)" /></c> for help implementing custom Up navigation.
 The AppNavigation sample application in the Android SDK is also available for reference.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onNavigateUp()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigateUpFromChild">
      <MemberSignature Language="C#" Value="public virtual bool OnNavigateUpFromChild (Android.App.Activity child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNavigateUpFromChild(class Android.App.Activity child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNavigateUpFromChild", "(Landroid/app/Activity;)Z", "GetOnNavigateUpFromChild_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.
</param>
        <summary>This is called when a child activity of this one attempts to navigate up.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a child activity of this one attempts to navigate up.
 The default implementation simply calls onNavigateUp() on this activity (the parent).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onNavigateUpFromChild(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnNewIntent">
      <MemberSignature Language="C#" Value="protected virtual void OnNewIntent (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNewIntent(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNewIntent", "(Landroid/content/Intent;)V", "GetOnNewIntent_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The new intent that was started for the activity.</param>
        <summary>This is called for activities that set launchMode to "singleTop" in
 their package, or if a client used the <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_SINGLE_TOP" /></c>
 flag when calling <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called for activities that set launchMode to "singleTop" in
 their package, or if a client used the <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_SINGLE_TOP" /></c>
 flag when calling <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>.  In either case, when the
 activity is re-launched while at the top of the activity stack instead
 of a new instance of the activity being started, onNewIntent() will be
 called on the existing instance with the Intent that was used to
 re-launch it.

 </para>
          <para tool="javadoc-to-mdoc">An activity will always be paused before receiving a new intent, so
 you can count on <c><see cref="M:Android.App.Activity.OnResume" /></c> being called after this method.

 </para>
          <para tool="javadoc-to-mdoc">Note that <c><see cref="P:Android.App.Activity.Intent" /></c> still returns the original Intent.  You
 can use <c><see cref="P:Android.App.Activity.Intent" /></c> to update it to this new Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onNewIntent(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Intent" />
        <altmember cref="P:Android.App.Activity.Intent" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnOptionsItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnOptionsItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOptionsItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnOptionsItemSelected_Landroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The menu item that was selected.</param>
        <summary>This hook is called whenever an item in your options menu is selected.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever an item in your options menu is selected.
 The default implementation simply returns false to have the normal
 processing happen (calling the item's Runnable or sending a message to
 its Handler as appropriate).  You can use this method for any items
 for which you would like to do processing without those other
 facilities.

 </para>
          <para tool="javadoc-to-mdoc">Derived classes should call through to the base class for it to
 perform the default menu handling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onOptionsItemSelected(android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsMenuClosed">
      <MemberSignature Language="C#" Value="public virtual void OnOptionsMenuClosed (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnOptionsMenuClosed(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onOptionsMenuClosed", "(Landroid/view/Menu;)V", "GetOnOptionsMenuClosed_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
             onCreateOptionsMenu().
</param>
        <summary>This hook is called whenever the options menu is being closed (either by the user canceling
 the menu with the back/menu button, or when an item is selected).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the options menu is being closed (either by the user canceling
 the menu with the back/menu button, or when an item is selected).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onOptionsMenuClosed(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPanelClosed">
      <MemberSignature Language="C#" Value="public virtual void OnPanelClosed (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPanelClosed(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPanelClosed", "(ILandroid/view/Menu;)V", "GetOnPanelClosed_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
            being displayed in the panel.
</param>
        <summary>Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onPanelClosed(int,android.view.Menu)" /></c> for
 activities.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onPanelClosed(int,android.view.Menu)" /></c> for
 activities. This calls through to <c><see cref="M:Android.App.Activity.OnOptionsMenuClosed(Android.Views.IMenu)" /></c>
 method for the <c><see cref="!:Android.Views.Window.FEATURE_OPTIONS_PANEL" /></c> panel,
 so that subclasses of Activity don't need to deal with feature codes.
 For context menus (<c><see cref="!:Android.Views.Window.FEATURE_CONTEXT_MENU" /></c>), the
 <c><see cref="M:Android.App.Activity.OnContextMenuClosed(Android.Views.IMenu)" /></c> will be called.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPanelClosed(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPause", "()V", "GetOnPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called as part of the activity lifecycle when an activity is going into
 the background, but has not (yet) been killed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called as part of the activity lifecycle when an activity is going into
 the background, but has not (yet) been killed.  The counterpart to
 <c><see cref="M:Android.App.Activity.OnResume" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">When activity B is launched in front of activity A, this callback will
 be invoked on A.  B will not be created until A's <c><see cref="M:Android.App.Activity.OnPause" /></c> returns,
 so be sure to not do anything lengthy here.

 </para>
          <para tool="javadoc-to-mdoc">This callback is mostly used for saving any persistent state the
 activity is editing, to present a "edit in place" model to the user and
 making sure nothing is lost if there are not enough resources to start
 the new activity without first killing this one.  This is also a good
 place to do things like stop animations and other things that consume a
 noticeable amount of CPU in order to make the switch to the next activity
 as fast as possible, or to close resources that are exclusive access
 such as the camera.

 </para>
          <para tool="javadoc-to-mdoc">In situations where the system needs more memory it may kill paused
 processes to reclaim resources.  Because of this, you should be sure
 that all of your state is saved by the time you return from
 this function.  In general <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> is used to save
 per-instance state in the activity and this method is used to store
 global persistent data (in content providers, files, etc.)

 </para>
          <para tool="javadoc-to-mdoc">After receiving this call you will usually receive a following call
 to <c><see cref="M:Android.App.Activity.OnStop" /></c> (after the next activity has been resumed and
 displayed), however in some cases there will be a direct call back to
 <c><see cref="M:Android.App.Activity.OnResume" /></c> without going through the stopped state.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPause()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPostCreate">
      <MemberSignature Language="C#" Value="protected virtual void OnPostCreate (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostCreate(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the activity is being re-initialized after
     previously being shut down then this Bundle contains the data it most
     recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.  <format type="text/html"><b><i>Note: Otherwise it is null.</i></b></format></param>
        <summary>Called when activity start-up is complete (after <c><see cref="M:Android.App.Activity.OnStart" /></c>
 and <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> have been called).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when activity start-up is complete (after <c><see cref="M:Android.App.Activity.OnStart" /></c>
 and <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> have been called).  Applications will
 generally not implement this method; it is intended for system
 classes to do final initialization after application code has run.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPostCreate(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnPostCreate">
      <MemberSignature Language="C#" Value="public virtual void OnPostCreate (Android.OS.Bundle savedInstanceState, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPostCreate(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">The data most recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c></param>
        <param name="persistentState">The data caming from the PersistableBundle first
 saved in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle,Android.OS.PersistableBundle)" /></c>.</param>
        <summary>This is the same as <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is the same as <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPostCreate(android.os.Bundle, android.os.PersistableBundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnPostResume">
      <MemberSignature Language="C#" Value="protected virtual void OnPostResume ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostResume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPostResume", "()V", "GetOnPostResumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when activity resume is complete (after <c><see cref="M:Android.App.Activity.OnResume" /></c> has
 been called).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when activity resume is complete (after <c><see cref="M:Android.App.Activity.OnResume" /></c> has
 been called). Applications will generally not implement this method;
 it is intended for system classes to do final setup after application
 resume code has run.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPostResume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareDialog">
      <MemberSignature Language="C#" Value="protected virtual void OnPrepareDialog (int id, Android.App.Dialog dialog);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrepareDialog(int32 id, class Android.App.Dialog dialog) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="dialog" Type="Android.App.Dialog" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <param name="dialog">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPrepareDialog(int, android.app.Dialog)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareDialog">
      <MemberSignature Language="C#" Value="protected virtual void OnPrepareDialog (int id, Android.App.Dialog dialog, Android.OS.Bundle args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrepareDialog(int32 id, class Android.App.Dialog dialog, class Android.OS.Bundle args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;Landroid/os/Bundle;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="dialog" Type="Android.App.Dialog" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <param name="dialog">The dialog.</param>
        <param name="args">The dialog arguments provided to <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" /></c>.</param>
        <summary>Provides an opportunity to prepare a managed dialog before it is being
 shown.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Provides an opportunity to prepare a managed dialog before it is being
 shown.  The default implementation calls through to
 <c><see cref="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog)" /></c> for compatibility.

 </para>
          <para tool="javadoc-to-mdoc">
 Override this if you need to update a managed dialog based on the state
 of the application each time it is shown. For example, a time picker
 dialog might want to be updated with the current time. You should call
 through to the superclass's implementation. The default implementation
 will set this Activity as the owner activity on the Dialog.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPrepareDialog(int, android.app.Dialog, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareNavigateUpTaskStack">
      <MemberSignature Language="C#" Value="public virtual void OnPrepareNavigateUpTaskStack (Android.App.TaskStackBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPrepareNavigateUpTaskStack(class Android.App.TaskStackBuilder builder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnPrepareNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Android.App.TaskStackBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">A TaskStackBuilder that has been populated with Intents by
                onCreateNavigateUpTaskStack.
</param>
        <summary>Prepare the synthetic task stack that will be generated during Up navigation
 from a different task.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare the synthetic task stack that will be generated during Up navigation
 from a different task.

 </para>
          <para tool="javadoc-to-mdoc">This method receives the <c><see cref="T:Android.App.TaskStackBuilder" /></c> with the constructed series of
 Intents as generated by <c><see cref="M:Android.App.Activity.OnCreateNavigateUpTaskStack(Android.App.TaskStackBuilder)" /></c>.
 If any extra data should be added to these intents before launching the new task,
 the application should override this method and add that data here.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnPrepareOptionsMenu (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPrepareOptionsMenu(class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnPrepareOptionsMenu_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
             onCreateOptionsMenu().</param>
        <summary>Prepare the Screen's standard options menu to be displayed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare the Screen's standard options menu to be displayed.  This is
 called right before the menu is shown, every time it is shown.  You can
 use this method to efficiently enable/disable items or otherwise
 dynamically modify the contents.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation updates the system menu items based on the
 activity's state.  Deriving classes should always call through to the
 base class implementation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPrepareOptionsMenu(android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreparePanel">
      <MemberSignature Language="C#" Value="public virtual bool OnPreparePanel (int featureId, Android.Views.View view, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPreparePanel(int32 featureId, class Android.Views.View view, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPreparePanel", "(ILandroid/view/View;Landroid/view/Menu;)Z", "GetOnPreparePanel_ILandroid_view_View_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="view">The View that was returned by onCreatePanelView().</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
             being displayed in the panel.</param>
        <summary>Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onPreparePanel(int,android.view.View,android.view.Menu)" /></c>
 for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation of
 <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../reference/android/view/Window.Callback.html#onPreparePanel(int,android.view.View,android.view.Menu)" /></c>
 for activities.  This
 calls through to the new <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c> method for the
 <c><see cref="!:Android.Views.Window.FEATURE_OPTIONS_PANEL" /></c>
 panel, so that subclasses of
 Activity don't need to deal with feature codes.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onPreparePanel(int, android.view.View, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnProvideAssistData">
      <MemberSignature Language="C#" Value="public virtual void OnProvideAssistData (Android.OS.Bundle data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnProvideAssistData(class Android.OS.Bundle data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onProvideAssistData", "(Landroid/os/Bundle;)V", "GetOnProvideAssistData_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>This is called when the user is requesting an assist, to build a full
 <c><see cref="F:Android.Content.Intent.ActionAssist" /></c> Intent with all of the context of the current
 application.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when the user is requesting an assist, to build a full
 <c><see cref="F:Android.Content.Intent.ActionAssist" /></c> Intent with all of the context of the current
 application.  You can override this method to place into the bundle anything
 you would like to appear in the <c><see cref="F:Android.Content.Intent.ExtraAssistContext" /></c> part
 of the assist Intent.

 </para>
          <para tool="javadoc-to-mdoc">This function will be called after any global assist callbacks that had
 been registered with <c><see cref="M:Android.App.Application.RegisterOnProvideAssistDataListener(.IOnProvideAssistDataListener)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onProvideAssistData(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="OnRestart">
      <MemberSignature Language="C#" Value="protected virtual void OnRestart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRestart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRestart", "()V", "GetOnRestartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c><see cref="M:Android.App.Activity.OnStop" /></c> when the current activity is being
 re-displayed to the user (the user has navigated back to it).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after <c><see cref="M:Android.App.Activity.OnStop" /></c> when the current activity is being
 re-displayed to the user (the user has navigated back to it).  It will
 be followed by <c><see cref="M:Android.App.Activity.OnStart" /></c> and then <c><see cref="M:Android.App.Activity.OnResume" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">For activities that are using raw <c><see cref="T:Android.Database.ICursor" /></c> objects (instead of
 creating them through
 <c><see cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>,
 this is usually the place
 where the cursor should be requeried (because you had deactivated it in
 <c><see cref="M:Android.App.Activity.OnStop" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onRestart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnRestoreInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void OnRestoreInstanceState (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRestoreInstanceState(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">the data most recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.</param>
        <summary>This method is called after <c><see cref="M:Android.App.Activity.OnStart" /></c> when the activity is
 being re-initialized from a previously saved state, given here in
 <format type="text/html"><var>savedInstanceState</var></format>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called after <c><see cref="M:Android.App.Activity.OnStart" /></c> when the activity is
 being re-initialized from a previously saved state, given here in
 <format type="text/html"><var>savedInstanceState</var></format>.  Most implementations will simply use <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>
 to restore their state, but it is sometimes convenient to do it here
 after all of the initialization has been done or to allow subclasses to
 decide whether to use your default implementation.  The default
 implementation of this method performs a restore of any view state that
 had previously been frozen by <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method is called between <c><see cref="M:Android.App.Activity.OnStart" /></c> and
 <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnRestoreInstanceState">
      <MemberSignature Language="C#" Value="public virtual void OnRestoreInstanceState (Android.OS.Bundle savedInstanceState, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRestoreInstanceState(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">the data most recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.</param>
        <param name="persistentState">the data most recently supplied in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>.</param>
        <summary>This is the same as <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is the same as <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>. The <c><see cref="T:Android.OS.PersistableBundle" /></c> passed
 came from the restored PersistableBundle first
 saved in <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle,Android.OS.PersistableBundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method is called between <c><see cref="M:Android.App.Activity.OnStart" /></c> and
 <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If this method is called <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> will not be called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle, android.os.PersistableBundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnResume">
      <MemberSignature Language="C#" Value="protected virtual void OnResume ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onResume", "()V", "GetOnResumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>, <c><see cref="M:Android.App.Activity.OnRestart" /></c>, or
 <c><see cref="M:Android.App.Activity.OnPause" /></c>, for your activity to start interacting with the user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>, <c><see cref="M:Android.App.Activity.OnRestart" /></c>, or
 <c><see cref="M:Android.App.Activity.OnPause" /></c>, for your activity to start interacting with the user.
 This is a good place to begin animations, open exclusive-access devices
 (such as the camera), etc.

 </para>
          <para tool="javadoc-to-mdoc">Keep in mind that onResume is not the best indicator that your activity
 is visible to the user; a system window such as the keyguard may be in
 front.  Use <c><see cref="M:Android.App.Activity.OnWindowFocusChanged(System.Boolean)" /></c> to know for certain that your
 activity is visible to the user (for example, to resume a game).

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onResume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestart" />
        <altmember cref="M:Android.App.Activity.OnPostResume" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnRetainNonConfigurationInstance">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object OnRetainNonConfigurationInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object OnRetainNonConfigurationInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRetainNonConfigurationInstance", "()Ljava/lang/Object;", "GetOnRetainNonConfigurationInstanceHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system, as part of destroying an
 activity due to a configuration change, when it is known that a new
 instance will immediately be created for the new configuration.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the system, as part of destroying an
 activity due to a configuration change, when it is known that a new
 instance will immediately be created for the new configuration.  You
 can return any object you like here, including the activity instance
 itself, which can later be retrieved by calling
 <c><see cref="P:Android.App.Activity.LastNonConfigurationInstance" /></c> in the new activity
 instance.

 <i>If you are targeting <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 or later, consider instead using a <c><see cref="T:Android.App.Fragment" /></c> with
 <c><see cref="P:Android.App.Fragment.RetainInstance" /></c>.</i></para>
          <para tool="javadoc-to-mdoc">This function is called purely as an optimization, and you must
 not rely on it being called.  When it is called, a number of guarantees
 will be made to help optimize configuration switching:
 <list type="bullet"><item><term> The function will be called between <c><see cref="M:Android.App.Activity.OnStop" /></c> and
 <c><see cref="M:Android.App.Activity.OnDestroy" /></c>.
 </term></item><item><term> A new instance of the activity will <i>always</i> be immediately
 created after this one's <c><see cref="M:Android.App.Activity.OnDestroy" /></c> is called.  In particular,
 <i>no</i> messages will be dispatched during this time (when the returned
 object does not have an activity to be associated with).
 </term></item><item><term> The object you return here will <i>always</i> be available from
 the <c><see cref="P:Android.App.Activity.LastNonConfigurationInstance" /></c> method of the following
 activity instance as described there.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">These guarantees are designed so that an activity can use this API
 to propagate extensive state from the old to new activity instance, from
 loaded bitmaps, to network connections, to evenly actively running
 threads.  Note that you should <i>not</i> propagate any data that
 may change based on the configuration, including any data loaded from
 resources such as strings, layouts, or drawables.

 </para>
          <para tool="javadoc-to-mdoc">The guarantee of no message handling during the switch to the next
 activity simplifies use with active objects.  For example if your retained
 state is an <c><see cref="T:Android.OS.AsyncTask`3" /></c> you are guaranteed that its
 call back functions (like <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>) will
 not be called from the call here until you execute the next instance's
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.  (Note however that there is of course no such
 guarantee for <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c> since that is
 running in a separate thread.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onRetainNonConfigurationInstance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void OnSaveInstanceState (Android.OS.Bundle outState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSaveInstanceState(class Android.OS.Bundle outState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="outState">Bundle in which to place your saved state.</param>
        <summary>Called to retrieve per-instance state from an activity before being killed
 so that the state can be restored in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> or
 <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> (the <c><see cref="T:Android.OS.Bundle" /></c> populated by this method
 will be passed to both).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to retrieve per-instance state from an activity before being killed
 so that the state can be restored in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> or
 <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c> (the <c><see cref="T:Android.OS.Bundle" /></c> populated by this method
 will be passed to both).

 </para>
          <para tool="javadoc-to-mdoc">This method is called before an activity may be killed so that when it
 comes back some time in the future it can restore its state.  For example,
 if activity B is launched in front of activity A, and at some point activity
 A is killed to reclaim resources, activity A will have a chance to save the
 current state of its user interface via this method so that when the user
 returns to activity A, the state of the user interface can be restored
 via <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> or <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Do not confuse this method with activity lifecycle callbacks such as
 <c><see cref="M:Android.App.Activity.OnPause" /></c>, which is always called when an activity is being placed
 in the background or on its way to destruction, or <c><see cref="M:Android.App.Activity.OnStop" /></c> which
 is called before destruction.  One example of when <c><see cref="M:Android.App.Activity.OnPause" /></c> and
 <c><see cref="M:Android.App.Activity.OnStop" /></c> is called and not this method is when a user navigates back
 from activity B to activity A: there is no need to call <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>
 on B because that particular instance will never be restored, so the
 system avoids calling it.  An example when <c><see cref="M:Android.App.Activity.OnPause" /></c> is called and
 not <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> is when activity B is launched in front of activity A:
 the system may avoid calling <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> on activity A if it isn't
 killed during the lifetime of B since the state of the user interface of
 A will stay intact.

 </para>
          <para tool="javadoc-to-mdoc">The default implementation takes care of most of the UI per-instance
 state for you by calling <c><see cref="M:Android.Views.View.OnSaveInstanceState" /></c> on each
 view in the hierarchy that has an id, and by saving the id of the currently
 focused view (all of which is restored by the default implementation of
 <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>).  If you override this method to save additional
 information not captured by each individual view, you will likely want to
 call through to the default implementation, otherwise be prepared to save
 all of the state of each view yourself.

 </para>
          <para tool="javadoc-to-mdoc">If called, this method will occur before <c><see cref="M:Android.App.Activity.OnStop" /></c>.  There are
 no guarantees about whether it will occur before or after <c><see cref="M:Android.App.Activity.OnPause" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual void OnSaveInstanceState (Android.OS.Bundle outState, Android.OS.PersistableBundle outPersistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSaveInstanceState(class Android.OS.Bundle outState, class Android.OS.PersistableBundle outPersistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.OS.Bundle" />
        <Parameter Name="outPersistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="outState">Bundle in which to place your saved state.</param>
        <param name="outPersistentState">State which will be saved across reboots.</param>
        <summary>This is the same as <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is the same as <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> but is called for activities
 created with the attribute <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#persistableMode" /></c> set to
 <c>persistAcrossReboots</c>. The <c><see cref="T:Android.OS.PersistableBundle" /></c> passed
 in will be saved and presented in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle,Android.OS.PersistableBundle)" /></c>
 the first time that this activity is restarted following the next device reboot.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle, android.os.PersistableBundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle, Android.OS.PersistableBundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnSearchRequested">
      <MemberSignature Language="C#" Value="public virtual bool OnSearchRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnSearchRequested() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSearchRequested", "()Z", "GetOnSearchRequestedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the user signals the desire to start a search.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the user signals the desire to start a search.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onSearchRequested()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnSearchRequested(Android.Views.SearchEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> &amp;mdash; or after <c><see cref="M:Android.App.Activity.OnRestart" /></c> when
 the activity had been stopped, but is now again being displayed to the
 user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called after <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> &amp;mdash; or after <c><see cref="M:Android.App.Activity.OnRestart" /></c> when
 the activity had been stopped, but is now again being displayed to the
 user.  It will be followed by <c><see cref="M:Android.App.Activity.OnResume" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStop", "()V", "GetOnStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when you are no longer visible to the user.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when you are no longer visible to the user.  You will next
 receive either <c><see cref="M:Android.App.Activity.OnRestart" /></c>, <c><see cref="M:Android.App.Activity.OnDestroy" /></c>, or nothing,
 depending on later user activity.

 </para>
          <para tool="javadoc-to-mdoc">Note that this method may never be called, in low memory situations
 where the system does not have enough memory to keep your activity's
 process running after its <c><see cref="M:Android.App.Activity.OnPause" /></c> method is called.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Derived classes must call through to the super class's
 implementation of this method.  If they do not, an exception will be
 thrown.</i>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onStop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnRestart" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnDestroy" />
      </Docs>
    </Member>
    <Member MemberName="OnTitleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTitleChanged (Java.Lang.ICharSequence title, Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTitleChanged(class Java.Lang.ICharSequence title, valuetype Android.Graphics.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTitleChanged", "(Ljava/lang/CharSequence;I)V", "GetOnTitleChanged_Ljava_lang_CharSequence_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="color">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onTitleChanged(java.lang.CharSequence, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTitleChanged">
      <MemberSignature Language="C#" Value="protected void OnTitleChanged (string title, Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnTitleChanged(string title, valuetype Android.Graphics.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="color">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTouchEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTouchEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The touch screen event being processed.</param>
        <summary>Called when a touch screen event was not handled by any of the views
 under it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a touch screen event was not handled by any of the views
 under it.  This is most useful to process touch events that happen
 outside of your window bounds, where there is no view to receive it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTrackballEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTrackballEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTrackballEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The trackball event being processed.</param>
        <summary>Called when the trackball was moved and not handled by any of the
 views inside of the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the trackball was moved and not handled by any of the
 views inside of the activity.  So, for example, if the trackball moves
 while focus is on a button, you will receive a call here because
 buttons do not normally do anything with trackball events.  The call
 here happens <i>before</i> trackball movements are converted to
 DPAD key events, which then get sent back to the view hierarchy, and
 will be processed at the point for things like focus navigation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onTrackballEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory" />
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.  This will
 happen for example when it goes in the background and there is not enough
 memory to keep as many background processes running as desired.  You
 should never compare to exact values of the level, since new intermediate
 values may be added -- you will typically want to compare if the value
 is greater or equal to a level you are interested in.

 </para>
          <para tool="javadoc-to-mdoc">To retrieve the processes current trim level at any point, you can
 use <c><see cref="M:Android.App.ActivityManager.GetMyMemoryState(.RunningAppProcessInfo)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onTrimMemory(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnUserInteraction">
      <MemberSignature Language="C#" Value="public virtual void OnUserInteraction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnUserInteraction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onUserInteraction", "()V", "GetOnUserInteractionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called whenever a key, touch, or trackball event is dispatched to the
 activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called whenever a key, touch, or trackball event is dispatched to the
 activity.  Implement this method if you wish to know that the user has
 interacted with the device in some way while your activity is running.
 This callback and <c><see cref="M:Android.App.Activity.OnUserLeaveHint" /></c> are intended to help
 activities manage status bar notifications intelligently; specifically,
 for helping activities determine the proper time to cancel a notfication.

 </para>
          <para tool="javadoc-to-mdoc">All calls to your activity's <c><see cref="M:Android.App.Activity.OnUserLeaveHint" /></c> callback will
 be accompanied by calls to <c><see cref="M:Android.App.Activity.OnUserInteraction" /></c>.  This
 ensures that your activity will be told of relevant user activity such
 as pulling down the notification pane and touching an item there.

 </para>
          <para tool="javadoc-to-mdoc">Note that this callback will be invoked for the touch down action
 that begins a touch gesture, but may not be invoked for the touch-moved
 and touch-up actions that follow.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onUserInteraction()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnUserLeaveHint" />
      </Docs>
    </Member>
    <Member MemberName="OnUserLeaveHint">
      <MemberSignature Language="C#" Value="protected virtual void OnUserLeaveHint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserLeaveHint() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onUserLeaveHint", "()V", "GetOnUserLeaveHintHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called as part of the activity lifecycle when an activity is about to go
 into the background as the result of user choice.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called as part of the activity lifecycle when an activity is about to go
 into the background as the result of user choice.  For example, when the
 user presses the Home key, <c><see cref="M:Android.App.Activity.OnUserLeaveHint" /></c> will be called, but
 when an incoming phone call causes the in-call Activity to be automatically
 brought to the foreground, <c><see cref="M:Android.App.Activity.OnUserLeaveHint" /></c> will not be called on
 the activity being interrupted.  In cases when it is invoked, this method
 is called right before the activity's <c><see cref="M:Android.App.Activity.OnPause" /></c> callback.

 </para>
          <para tool="javadoc-to-mdoc">This callback and <c><see cref="M:Android.App.Activity.OnUserInteraction" /></c> are intended to help
 activities manage status bar notifications intelligently; specifically,
 for helping activities determine the proper time to cancel a notfication.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onUserLeaveHint()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnUserInteraction" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleBehindCanceled">
      <MemberSignature Language="C#" Value="public virtual void OnVisibleBehindCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnVisibleBehindCanceled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onVisibleBehindCanceled", "()V", "GetOnVisibleBehindCanceledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when a translucent activity over this activity is becoming opaque or another
 activity is being launched.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a translucent activity over this activity is becoming opaque or another
 activity is being launched. Activities that override this method must call
 <c>super.onVisibleBehindCanceled()</c> or a SuperNotCalledException will be thrown.

 </para>
          <para tool="javadoc-to-mdoc">When this method is called the activity has 500 msec to release any resources it may be
 using while visible in the background.
 If the activity has not returned from this method in 500 msec the system will destroy
 the activity and kill the process in order to recover the resources for another
 process. Otherwise <c><see cref="M:Android.App.Activity.OnStop" /></c> will be called following return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onVisibleBehindCanceled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.RequestVisibleBehind(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowAttributesChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowAttributesChanged (Android.Views.WindowManagerLayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowAttributesChanged(class Android.Views.WindowManagerLayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowAttributesChanged", "(Landroid/view/WindowManager$LayoutParams;)V", "GetOnWindowAttributesChanged_Landroid_view_WindowManager_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.Views.WindowManagerLayoutParams" />
      </Parameters>
      <Docs>
        <param name="params">To be added.</param>
        <summary>This is called whenever the current window attributes change.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called whenever the current window attributes change.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onWindowAttributesChanged(android.view.WindowManager.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowFocusChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowFocusChanged (bool hasFocus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowFocusChanged(bool hasFocus) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowFocusChanged", "(Z)V", "GetOnWindowFocusChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasFocus" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasFocus">Whether the window of this activity has focus.</param>
        <summary>Called when the current <c><see cref="T:Android.Views.Window" /></c> of the activity gains or loses
 focus.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the current <c><see cref="T:Android.Views.Window" /></c> of the activity gains or loses
 focus.  This is the best indicator of whether this activity is visible
 to the user.  The default implementation clears the key tracking
 state, so should always be called.

 </para>
          <para tool="javadoc-to-mdoc">Note that this provides information about global focus state, which
 is managed independently of activity lifecycles.  As such, while focus
 changes will generally have some relation to lifecycle changes (an
 activity that is stopped will not generally get window focus), you
 should not rely on any particular order between the callbacks here and
 those in the other lifecycle methods such as <c><see cref="M:Android.App.Activity.OnResume" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">As a general rule, however, a resumed activity will have window
 focus...  unless it has displayed other dialogs or popups that take
 input focus, in which case the activity itself will not have focus
 when the other windows have it.  Likewise, the system may display
 system-level windows (such as the status bar notification panel or
 a system alert) which will temporarily take window input focus without
 pausing the foreground activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onWindowFocusChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.HasWindowFocus" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.Views.View.OnWindowFocusChanged(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowStartingActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode OnWindowStartingActionMode (Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode OnWindowStartingActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">The callback that should control the new action mode</param>
        <summary>Give the Activity a chance to control the UI for an action mode requested
 by the system.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Give the Activity a chance to control the UI for an action mode requested
 by the system.

 </para>
          <para tool="javadoc-to-mdoc">Note: If you are looking for a notification callback that an action mode
 has been started for this activity, see <c><see cref="M:Android.App.Activity.OnActionModeStarted(Android.Views.ActionMode)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#onWindowStartingActionMode(android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OpenContextMenu">
      <MemberSignature Language="C#" Value="public virtual void OpenContextMenu (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenContextMenu(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openContextMenu", "(Landroid/view/View;)V", "GetOpenContextMenu_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to show the context menu for.
</param>
        <summary>Programmatically opens the context menu for a particular <c>view</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Programmatically opens the context menu for a particular <c>view</c>.
 The <c>view</c> should have been added via
 <c><see cref="M:Android.App.Activity.RegisterForContextMenu(Android.Views.View)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#openContextMenu(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void OpenOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenOptionsMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOptionsMenu", "()V", "GetOpenOptionsMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Programmatically opens the options menu.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Programmatically opens the options menu. If the options menu is already
 open, this method does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#openOptionsMenu()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OverridePendingTransition">
      <MemberSignature Language="C#" Value="public virtual void OverridePendingTransition (int enterAnim, int exitAnim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OverridePendingTransition(int32 enterAnim, int32 exitAnim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("overridePendingTransition", "(II)V", "GetOverridePendingTransition_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enterAnim" Type="System.Int32" />
        <Parameter Name="exitAnim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enterAnim">A resource ID of the animation resource to use for
 the incoming activity.  Use 0 for no animation.</param>
        <param name="exitAnim">A resource ID of the animation resource to use for
 the outgoing activity.  Use 0 for no animation.
</param>
        <summary>Call immediately after one of the flavors of <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>
 or <c><see cref="M:Android.App.Activity.Finish" /></c> to specify an explicit transition animation to
 perform next.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call immediately after one of the flavors of <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c>
 or <c><see cref="M:Android.App.Activity.Finish" /></c> to specify an explicit transition animation to
 perform next.

 </para>
          <para tool="javadoc-to-mdoc">As of <c><see cref="F:Android.OS.Build+VERSION.JellyBean" tool="ReplaceLinkValue" /></c> an alternative
 to using this with starting activities is to supply the desired animation
 information through a <c><see cref="T:Android.App.ActivityOptions" /></c> bundle to
 {@link #startActivity(Intent, Bundle) or a related function.  This allows
 you to specify a custom animation even when starting an activity from
 outside the context of the current top activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#overridePendingTransition(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.App.Activity Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Activity Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParent", "()Landroid/app/Activity;", "GetGetParentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the parent activity if this view is an embedded child.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the parent activity if this view is an embedded child. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getParent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentActivityIntent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent ParentActivityIntent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Intent ParentActivityIntent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParentActivityIntent", "()Landroid/content/Intent;", "GetGetParentActivityIntentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtain an <c><see cref="T:Android.Content.Intent" /></c> that will launch an explicit target activity specified by
 this activity's logical parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtain an <c><see cref="T:Android.Content.Intent" /></c> that will launch an explicit target activity specified by
 this activity's logical parent. The logical parent is named in the application's manifest
 by the <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#parentActivityName" /></c> attribute.
 Activity subclasses may override this method to modify the Intent returned by
 super.getParentActivityIntent() or to implement a different mechanism of retrieving
 the parent intent entirely.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getParentActivityIntent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="PostponeEnterTransition">
      <MemberSignature Language="C#" Value="public virtual void PostponeEnterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostponeEnterTransition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postponeEnterTransition", "()V", "GetPostponeEnterTransitionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Postpone the entering activity transition when Activity was started with
 <c><see cref="!:Android.App.ActivityOptions.makeSceneTransitionAnimation(android.app.Activity,android.util.Pair&lt;android.view.View,java.lang.String&gt;...)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Postpone the entering activity transition when Activity was started with
 <c><see cref="!:Android.App.ActivityOptions.makeSceneTransitionAnimation(android.app.Activity,android.util.Pair&lt;android.view.View,java.lang.String&gt;...)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">This method gives the Activity the ability to delay starting the entering and
 shared element transitions until all data is loaded. Until then, the Activity won't
 draw into its window, leaving the window transparent. This may also cause the
 returning animation to be delayed until data is ready. This method should be
 called in <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> or in
 <c><see cref="M:Android.App.Activity.OnActivityReenter(System.Int32,Android.Content.Intent)" /></c>.
 <c><see cref="M:Android.App.Activity.StartPostponedEnterTransition" /></c> must be called to allow the Activity to
 start the transitions. If the Activity did not use
 <c><see cref="!:Android.App.ActivityOptions.makeSceneTransitionAnimation(android.app.Activity,android.util.Pair&lt;android.view.View,java.lang.String&gt;...)" /></c>, then this method does nothing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#postponeEnterTransition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Recreate">
      <MemberSignature Language="C#" Value="public virtual void Recreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Recreate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("recreate", "()V", "GetRecreateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cause this Activity to be recreated with a new instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cause this Activity to be recreated with a new instance.  This results
 in essentially the same flow as when the Activity is created due to
 a configuration change -- the current instance will go through its
 lifecycle to <c><see cref="M:Android.App.Activity.OnDestroy" /></c> and a new instance then created after it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#recreate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void RegisterForContextMenu (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerForContextMenu", "(Landroid/view/View;)V", "GetRegisterForContextMenu_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should show a context menu.
</param>
        <summary>Registers a context menu to be shown for the given view (multiple views
 can show the context menu).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a context menu to be shown for the given view (multiple views
 can show the context menu). This method will set the
 <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html" /></c> on the view to this activity, so
 <c><see cref="M:Android.App.Activity.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.View)" /></c> will be
 called when it is time to show the context menu.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#registerForContextMenu(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.UnregisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public virtual bool ReleaseInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReleaseInstance() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseInstance", "()Z", "GetReleaseInstanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that the local app instance of this activity be released to free up its memory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Ask that the local app instance of this activity be released to free up its memory.
 This is asking for the activity to be destroyed, but does <format type="text/html"><b>not</b></format> finish the activity --
 a new instance of the activity will later be re-created if needed due to the user
 navigating back to it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#releaseInstance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDialog">
      <MemberSignature Language="C#" Value="public void RemoveDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDialog(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeDialog", "(I)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <summary>Removes any internal references to a dialog managed by this Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes any internal references to a dialog managed by this Activity.
 If the dialog is showing, it will dismiss it as part of the clean up.

 </para>
          <para tool="javadoc-to-mdoc">This can be useful if you know that you will never show a dialog again and
 want to avoid the overhead of saving and restoring it in the future.

 </para>
          <para tool="javadoc-to-mdoc">As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#GINGERBREAD" /></c>, this function
 will not throw an exception if you try to remove an ID that does not
 currently have an associated dialog.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#removeDialog(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReportFullyDrawn">
      <MemberSignature Language="C#" Value="public virtual void ReportFullyDrawn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportFullyDrawn() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reportFullyDrawn", "()V", "GetReportFullyDrawnHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Report to the system that your app is now fully drawn, purely for diagnostic
 purposes (calling it does not impact the visible behavior of the activity).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Report to the system that your app is now fully drawn, purely for diagnostic
 purposes (calling it does not impact the visible behavior of the activity).
 This is only used to help instrument application launch times, so that the
 app can report when it is fully in a usable state; without this, the only thing
 the system itself can determine is the point at which the activity's window
 is <i>first</i> drawn and displayed.  To participate in app launch time
 measurement, you should always call this method after first launch (when
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> is called), at the point where you have
 entirely drawn your UI and populated with all of the significant data.  You
 can safely call this method any time after first launch as well, in which case
 it will simply be ignored.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#reportFullyDrawn()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestedOrientation">
      <MemberSignature Language="C#" Value="public virtual Android.Content.PM.ScreenOrientation RequestedOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Content.PM.ScreenOrientation RequestedOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRequestedOrientation", "()I", "GetGetRequestedOrientationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRequestedOrientation", "(I)V", "GetSetRequestedOrientation_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ScreenOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current requested orientation of the activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getRequestedOrientation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the current requested orientation of the activity.  This will
 either be the orientation requested in its component's manifest, or
 the last requested orientation given to
 <c><see cref="P:Android.App.Activity.RequestedOrientation" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setRequestedOrientation(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the desired orientation of this activity.  If the activity
 is currently in the foreground or otherwise impacting the screen
 orientation, the screen will immediately be changed (possibly causing
 the activity to be restarted). Otherwise, this will be used the next
 time the activity is visible.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestVisibleBehind">
      <MemberSignature Language="C#" Value="public virtual bool RequestVisibleBehind (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestVisibleBehind(bool visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestVisibleBehind", "(Z)Z", "GetRequestVisibleBehind_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">true to notify the system that the activity wishes to be visible behind other
                translucent activities, false to indicate otherwise. Resources must be
                released when passing false to this method.</param>
        <summary>Activities that want to remain visible behind a translucent activity above them must call
 this method anytime between the start of <c><see cref="M:Android.App.Activity.OnResume" /></c> and the return from
 <c><see cref="M:Android.App.Activity.OnPause" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Activities that want to remain visible behind a translucent activity above them must call
 this method anytime between the start of <c><see cref="M:Android.App.Activity.OnResume" /></c> and the return from
 <c><see cref="M:Android.App.Activity.OnPause" /></c>. If this call is successful then the activity will remain visible after
 <c><see cref="M:Android.App.Activity.OnPause" /></c> is called, and is allowed to continue playing media in the background.

 </para>
          <para tool="javadoc-to-mdoc">The actions of this call are reset each time that this activity is brought to the
 front. That is, every time <c><see cref="M:Android.App.Activity.OnResume" /></c> is called the activity will be assumed
 to not have requested visible behind. Therefore, if you want this activity to continue to
 be visible in the background you must call this method again.

 </para>
          <para tool="javadoc-to-mdoc">Only fullscreen opaque activities may make this call. I.e. this call is a nop
 for dialog and translucent activities.

 </para>
          <para tool="javadoc-to-mdoc">Under all circumstances, the activity must stop playing and release resources prior to or
 within a call to <c><see cref="M:Android.App.Activity.OnVisibleBehindCanceled" /></c> or if this call returns false.

 </para>
          <para tool="javadoc-to-mdoc">False will be returned any time this method is called between the return of onPause and
      the next call to onResume.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#requestVisibleBehind(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnVisibleBehindCanceled" />
      </Docs>
    </Member>
    <Member MemberName="RequestWindowFeature">
      <MemberSignature Language="C#" Value="public bool RequestWindowFeature (Android.Views.WindowFeatures featureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequestWindowFeature(valuetype Android.Views.WindowFeatures featureId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestWindowFeature", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="featureId">The desired feature as defined in
                  <c><see cref="T:Android.Views.Window" /></c>.</param>
        <summary>Enable extended window features.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Enable extended window features.  This is a convenience for calling
 <c><see cref="M:Android.Views.Window.RequestFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#requestWindowFeature(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.Window.RequestFeature(Android.Views.WindowFeatures)" />
      </Docs>
    </Member>
    <Member MemberName="RunOnUiThread">
      <MemberSignature Language="C#" Value="public void RunOnUiThread (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunOnUiThread(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("runOnUiThread", "(Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">the action to run on the UI thread
</param>
        <summary>Runs the specified action on the UI thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Runs the specified action on the UI thread. If the current thread is the UI
 thread, then the action is executed immediately. If the current thread is
 not the UI thread, the action is posted to the event queue of the UI thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunOnUiThread">
      <MemberSignature Language="C#" Value="public void RunOnUiThread (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunOnUiThread(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionBar">
      <MemberSignature Language="C#" Value="public virtual void SetActionBar (Android.Widget.Toolbar toolbar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionBar(class Android.Widget.Toolbar toolbar) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setActionBar", "(Landroid/widget/Toolbar;)V", "GetSetActionBar_Landroid_widget_Toolbar_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolbar" Type="Android.Widget.Toolbar" />
      </Parameters>
      <Docs>
        <param name="toolbar">Toolbar to set as the Activity's action bar
</param>
        <summary>Set a <c><see cref="T:Android.Widget.Toolbar" /></c> to act as the <c><see cref="T:Android.App.ActionBar" /></c> for this
 Activity window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a <c><see cref="T:Android.Widget.Toolbar" /></c> to act as the <c><see cref="T:Android.App.ActionBar" /></c> for this
 Activity window.

 </para>
          <para tool="javadoc-to-mdoc">When set to a non-null value the <c><see cref="P:Android.App.Activity.ActionBar" /></c> method will return
 an <c><see cref="T:Android.App.ActionBar" /></c> object that can be used to control the given toolbar as if it were
 a traditional window decor action bar. The toolbar's menu will be populated with the
 Activity's options menu and the navigation button will be wired through the standard
 <c><see cref="!:NoType:android/R$id;Href=../../../reference/android/R.id.html#home" /></c> menu select action.</para>
          <para tool="javadoc-to-mdoc">In order to use a Toolbar within the Activity's window content the application
 must not request the window feature <c><see cref="!:Android.Views.Window.FEATURE_ACTION_BAR" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setActionBar(android.widget.Toolbar)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(Landroid/view/View;)V", "GetSetContentView_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <summary tool="true">Set the activity content to an explicit view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the activity content to an explicit view.  This view is placed
 directly into the activity's view hierarchy.  It can itself be a complex
 view hierarchy.  When calling this method, the layout parameters of the
 specified view are ignored.  Both the width and the height of the view are
 set by default to <c><see cref="F:Android.Views.ViewGroup+LayoutParams.MatchParent" tool="ReplaceLinkValue" /></c>. To use
 your own layout parameters, invoke
 <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View,.LayoutParams)" /></c>
 instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setContentView(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(System.Int32)" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (int layoutResID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(int32 layoutResID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(I)V", "GetSetContentView_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutResID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="layoutResID">Resource ID to be inflated.</param>
        <summary>Set the activity content from a layout resource.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the activity content from a layout resource.  The resource will be
 inflated, adding all top-level views to the activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setContentView(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View view, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetSetContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.</param>
        <summary>Set the activity content to an explicit view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the activity content to an explicit view.  This view is placed
 directly into the activity's view hierarchy.  It can itself be a complex
 view hierarchy.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.App.Activity.SetContentView(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetDefaultKeyMode">
      <MemberSignature Language="C#" Value="public void SetDefaultKeyMode (Android.App.DefaultKey mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDefaultKeyMode(valuetype Android.App.DefaultKey mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDefaultKeyMode", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.App.DefaultKey">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">The desired default key mode constant.</param>
        <summary>Select the default key handling for this activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Select the default key handling for this activity.  This controls what
 will happen to key events that are not otherwise handled.  The default
 mode (<c><see cref="!:Android.App.Activity.DEFAULT_KEYS_DISABLE" /></c>) will simply drop them on the
 floor. Other modes allow you to launch the dialer
 (<c><see cref="!:Android.App.Activity.DEFAULT_KEYS_DIALER" /></c>), execute a shortcut in your options
 menu without requiring the menu key be held down
 (<c><see cref="!:Android.App.Activity.DEFAULT_KEYS_SHORTCUT" /></c>), or launch a search (<c><see cref="!:Android.App.Activity.DEFAULT_KEYS_SEARCH_LOCAL" /></c>
 and <c><see cref="!:Android.App.Activity.DEFAULT_KEYS_SEARCH_GLOBAL" /></c>).

 </para>
          <para tool="javadoc-to-mdoc">Note that the mode selected here does not impact the default
 handling of system keys, such as the "back" and "menu" keys, and your
 activity and its views always get a first chance to receive and handle
 all application keys.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setDefaultKeyMode(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyDown(Android.Views.Keycode, Android.Views.KeyEvent)" />
      </Docs>
    </Member>
    <Member MemberName="SetEnterSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetEnterSharedElementCallback (Android.App.SharedElementCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnterSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEnterSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetEnterSharedElementCallback_Landroid_app_SharedElementCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate shared element transitions on the launched Activity.
</param>
        <summary>When <c><see cref="M:Android.App.ActivityOptions.MakeSceneTransitionAnimation(Android.App.Activity,Android.Views.View,Android.Views.View)" /></c> was used to start an Activity, <format type="text/html"><var>callback</var></format>
 will be called to handle shared elements on the <format type="text/html"><i>launched</i></format> Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When <c><see cref="M:Android.App.ActivityOptions.MakeSceneTransitionAnimation(Android.App.Activity,Android.Views.View,Android.Views.View)" /></c> was used to start an Activity, <format type="text/html"><var>callback</var></format>
 will be called to handle shared elements on the <format type="text/html"><i>launched</i></format> Activity. This requires
 <c><see cref="F:Android.Views.WindowsFeatures.ActivityTransitions" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setEnterSharedElementCallback(android.app.SharedElementCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExitSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetExitSharedElementCallback (Android.App.SharedElementCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExitSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setExitSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetExitSharedElementCallback_Landroid_app_SharedElementCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate shared element transitions on the launching Activity.
</param>
        <summary>When <c><see cref="M:Android.App.ActivityOptions.MakeSceneTransitionAnimation(Android.App.Activity,Android.Views.View,Android.Views.View)" /></c> was used to start an Activity, <format type="text/html"><var>callback</var></format>
 will be called to handle shared elements on the <format type="text/html"><i>launching</i></format> Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">When <c><see cref="M:Android.App.ActivityOptions.MakeSceneTransitionAnimation(Android.App.Activity,Android.Views.View,Android.Views.View)" /></c> was used to start an Activity, <format type="text/html"><var>callback</var></format>
 will be called to handle shared elements on the <format type="text/html"><i>launching</i></format> Activity. Most
 calls will only come when returning from the started Activity.
 This requires <c><see cref="F:Android.Views.WindowsFeatures.ActivityTransitions" tool="ReplaceLinkValue" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setExitSharedElementCallback(android.app.SharedElementCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawable">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawable (Android.Views.WindowFeatures featureId, Android.Graphics.Drawables.Drawable drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawable(valuetype Android.Views.WindowFeatures featureId, class Android.Graphics.Drawables.Drawable drawable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFeatureDrawable", "(ILandroid/graphics/drawable/Drawable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="drawable" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="drawable">To be added.</param>
        <summary>Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawable(Android.Views.WindowFeatures,Android.Graphics.Drawables.Drawable)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawable(Android.Views.WindowFeatures,Android.Graphics.Drawables.Drawable)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setFeatureDrawable(int, android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableAlpha">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableAlpha (Android.Views.WindowFeatures featureId, int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableAlpha(valuetype Android.Views.WindowFeatures featureId, int32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFeatureDrawableAlpha", "(II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableAlpha(Android.Views.WindowFeatures,System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableAlpha(Android.Views.WindowFeatures,System.Int32)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setFeatureDrawableAlpha(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableResource">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableResource (Android.Views.WindowFeatures featureId, int resId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableResource(valuetype Android.Views.WindowFeatures featureId, int32 resId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFeatureDrawableResource", "(II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="resId">To be added.</param>
        <summary>Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableResource(Android.Views.WindowFeatures,System.Int32)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableResource(Android.Views.WindowFeatures,System.Int32)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setFeatureDrawableResource(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableUri">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableUri (Android.Views.WindowFeatures featureId, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableUri(valuetype Android.Views.WindowFeatures featureId, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFeatureDrawableUri", "(ILandroid/net/Uri;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableUri(Android.Views.WindowFeatures,Android.Net.Uri)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience for calling
 <c><see cref="M:Android.Views.Window.SetFeatureDrawableUri(Android.Views.WindowFeatures,Android.Net.Uri)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setFeatureDrawableUri(int, android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFinishOnTouchOutside">
      <MemberSignature Language="C#" Value="public virtual void SetFinishOnTouchOutside (bool finish);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFinishOnTouchOutside(bool finish) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFinishOnTouchOutside", "(Z)V", "GetSetFinishOnTouchOutside_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finish" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finish">To be added.</param>
        <summary>Sets whether this activity is finished when touched outside its window's
 bounds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets whether this activity is finished when touched outside its window's
 bounds.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setFinishOnTouchOutside(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPersistent">
      <MemberSignature Language="C#" Value="public virtual void SetPersistent (bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPersistent(bool isPersistent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPersistent", "(Z)V", "GetSetPersistent_ZHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isPersistent">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProgress">
      <MemberSignature Language="C#" Value="public void SetProgress (int progress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgress(int32 progress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProgress", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="progress">The progress for the progress bar. Valid ranges are from
            0 to 10000 (both inclusive). If 10000 is given, the progress
            bar will be completely filled and will fade out.
</param>
        <summary>Sets the progress for the progress bars in the title.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the progress for the progress bars in the title.
 </para>
          <para tool="javadoc-to-mdoc">
 In order for the progress bar to be shown, the feature must be requested
 via <c><see cref="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setProgress(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarIndeterminate">
      <MemberSignature Language="C#" Value="public void SetProgressBarIndeterminate (bool indeterminate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarIndeterminate(bool indeterminate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProgressBarIndeterminate", "(Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indeterminate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indeterminate">Whether the horizontal progress bar should be indeterminate.
</param>
        <summary>Sets whether the horizontal progress bar in the title should be indeterminate (the circular
 is always indeterminate).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets whether the horizontal progress bar in the title should be indeterminate (the circular
 is always indeterminate).
 </para>
          <para tool="javadoc-to-mdoc">
 In order for the progress bar to be shown, the feature must be requested
 via <c><see cref="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setProgressBarIndeterminate(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarIndeterminateVisibility">
      <MemberSignature Language="C#" Value="public void SetProgressBarIndeterminateVisibility (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarIndeterminateVisibility(bool visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProgressBarIndeterminateVisibility", "(Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">Whether to show the progress bars in the title.
</param>
        <summary>Sets the visibility of the indeterminate progress bar in the title.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the visibility of the indeterminate progress bar in the title.
 </para>
          <para tool="javadoc-to-mdoc">
 In order for the progress bar to be shown, the feature must be requested
 via <c><see cref="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setProgressBarIndeterminateVisibility(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarVisibility">
      <MemberSignature Language="C#" Value="public void SetProgressBarVisibility (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarVisibility(bool visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProgressBarVisibility", "(Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">Whether to show the progress bars in the title.
</param>
        <summary>Sets the visibility of the progress bar in the title.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the visibility of the progress bar in the title.
 </para>
          <para tool="javadoc-to-mdoc">
 In order for the progress bar to be shown, the feature must be requested
 via <c><see cref="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setProgressBarVisibility(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (Android.App.Result resultCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(valuetype Android.App.Result resultCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setResult", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resultCode">The result code to propagate back to the originating
                   activity, often RESULT_CANCELED or RESULT_OK</param>
        <summary>Call this to set the result that your activity will return to its
 caller.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to set the result that your activity will return to its
 caller.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setResult(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result, Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (Android.App.Result resultCode, Android.Content.Intent data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(valuetype Android.App.Result resultCode, class Android.Content.Intent data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setResult", "(ILandroid/content/Intent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="resultCode">The result code to propagate back to the originating
                   activity, often RESULT_CANCELED or RESULT_OK</param>
        <param name="data">The data to propagate back to the originating activity.</param>
        <summary>Call this to set the result that your activity will return to its
 caller.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this to set the result that your activity will return to its
 caller.

 </para>
          <para tool="javadoc-to-mdoc">As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#GINGERBREAD" /></c>, the Intent
 you supply here can have <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> and/or <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c> set.  This will grant the
 Activity receiving the result access to the specific URIs in the Intent.
 Access will remain until the Activity has finished (it will remain across the hosting
 process being killed and other temporary destruction) and will be added
 to any existing set of URI permissions it already holds.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setResult(int, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="SetSecondaryProgress">
      <MemberSignature Language="C#" Value="public void SetSecondaryProgress (int secondaryProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSecondaryProgress(int32 secondaryProgress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSecondaryProgress", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secondaryProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="secondaryProgress">The secondary progress for the progress bar. Valid ranges are from
            0 to 10000 (both inclusive).
</param>
        <summary>Sets the secondary progress for the progress bar in the title.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the secondary progress for the progress bar in the title. This
 progress is drawn between the primary progress (set via
 <c><see cref="M:Android.App.Activity.SetProgress(System.Int32)" /></c> and the background. It can be ideal for media
 scenarios such as showing the buffering progress while the default
 progress shows the play progress.
 </para>
          <para tool="javadoc-to-mdoc">
 In order for the progress bar to be shown, the feature must be requested
 via <c><see cref="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setSecondaryProgress(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetTaskDescription">
      <MemberSignature Language="C#" Value="public virtual void SetTaskDescription (Android.App.ActivityManager.TaskDescription taskDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTaskDescription(class Android.App.ActivityManager/TaskDescription taskDescription) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTaskDescription", "(Landroid/app/ActivityManager$TaskDescription;)V", "GetSetTaskDescription_Landroid_app_ActivityManager_TaskDescription_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskDescription" Type="Android.App.ActivityManager+TaskDescription" />
      </Parameters>
      <Docs>
        <param name="taskDescription">The TaskDescription properties that describe the task with this activity
</param>
        <summary>Sets information describing the task with this activity for presentation inside the Recents
 System UI.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets information describing the task with this activity for presentation inside the Recents
 System UI. When <c><see cref="M:Android.App.ActivityManager.GetRecentTasks(System.Int32,Android.App.RecentTaskFlags)" /></c> is called, the activities of each task
 are traversed in order from the topmost activity to the bottommost. The traversal continues
 for each property until a suitable value is found. For each task the taskDescription will be
 returned in <c><see cref="!:NoType:android/app/ActivityManager$TaskDescription;Href=../../../reference/android/app/ActivityManager.TaskDescription.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setTaskDescription(android.app.ActivityManager.TaskDescription)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.App.ActivityManager.GetRecentTasks(System.Int32, Android.App.RecentTaskFlags)" />
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (int titleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(int32 titleId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTitle", "(I)V", "GetSetTitle_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="titleId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="titleId">To be added.</param>
        <summary>Change the title associated with this activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Change the title associated with this activity.  If this is a
 top-level activity, the title for its window will change.  If it
 is an embedded activity, the parent can do whatever it wants
 with it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setTitle(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetVisible">
      <MemberSignature Language="C#" Value="public virtual void SetVisible (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisible(bool visible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVisible", "(Z)V", "GetSetVisible_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">To be added.</param>
        <summary>Control whether this activity's main window is visible.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Control whether this activity's main window is visible.  This is intended
 only for the special case of an activity that is not going to show a
 UI itself, but can't just finish prior to onResume() because it needs
 to wait for a service binding or such.  Setting this to false allows
 you to prevent your UI from being shown during that time.

 </para>
          <para tool="javadoc-to-mdoc">The default value for this is taken from the
 <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#windowNoDisplay" /></c> attribute of the activity's theme.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#setVisible(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ShouldUpRecreateTask">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpRecreateTask (Android.Content.Intent targetIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpRecreateTask(class Android.Content.Intent targetIntent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldUpRecreateTask", "(Landroid/content/Intent;)Z", "GetShouldUpRecreateTask_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="targetIntent">An intent representing the target destination for up navigation</param>
        <summary>Returns true if the app should recreate the task when navigating 'up' from this activity
 by using targetIntent.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the app should recreate the task when navigating 'up' from this activity
 by using targetIntent.

 </para>
          <para tool="javadoc-to-mdoc">If this method returns false the app can trivially call
 <c><see cref="M:Android.App.Activity.NavigateUpTo(Android.Content.Intent)" /></c> using the same parameters to correctly perform
 up navigation. If this method returns false, the app should synthesize a new task stack
 by using <c><see cref="T:Android.App.TaskStackBuilder" /></c> or another similar mechanism to perform up navigation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#shouldUpRecreateTask(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public void ShowDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowDialog(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showDialog", "(I)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Simple version of <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" /></c> that does not
 take any arguments.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Simple version of <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" /></c> that does not
 take any arguments.  Simply calls <c><see cref="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" /></c>
 with null arguments.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#showDialog(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public bool ShowDialog (int id, Android.OS.Bundle args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShowDialog(int32 id, class Android.OS.Bundle args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showDialog", "(ILandroid/os/Bundle;)Z", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <param name="args">Arguments to pass through to the dialog.  These will be saved
 and restored for you.  Note that if the dialog is already created,
 <c><see cref="M:Android.App.Activity.OnCreateDialog(System.Int32,Android.OS.Bundle)" /></c> will not be called with the new
 arguments but <c><see cref="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog,Android.App.Dialog)" /></c> will be.
 If you need to rebuild the dialog, call <c><see cref="M:Android.App.Activity.RemoveDialog(System.Int32)" /></c> first.</param>
        <summary>Show a dialog managed by this activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Show a dialog managed by this activity.  A call to <c><see cref="M:Android.App.Activity.OnCreateDialog(System.Int32,Android.OS.Bundle)" /></c>
 will be made with the same id the first time this is called for a given
 id.  From thereafter, the dialog will be automatically saved and restored.

 <i>If you are targeting <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 or later, consider instead using a <c><see cref="T:Android.App.DialogFragment" /></c> instead.</i></para>
          <para tool="javadoc-to-mdoc">Each time a dialog is shown, <c><see cref="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog,Android.App.Dialog)" /></c> will
 be made to provide an opportunity to do any timely preparation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#showDialog(int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="T:Android.App.Dialog" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode StartActionMode (Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">Callback that will manage lifecycle events for this action mode</param>
        <summary>Start an action mode of the default type <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start an action mode of the default type <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActionMode(android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="T:Android.Views.ActionMode" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;I)V", "GetStartActivityForResult_Landroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits.</param>
        <summary>Same as calling <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32,System.Int32)" /></c>
 with no options.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32,System.Int32)" /></c>
 with no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public void StartActivityForResult (Type activityType, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartActivityForResult(class System.Type activityType, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityType" Type="System.Type" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="activityType">To be added.</param>
        <param name="requestCode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityForResult_Landroid_content_Intent_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>Launch an activity for which you would like a result when it finished.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Launch an activity for which you would like a result when it finished.
 When this activity exits, your
 onActivityResult() method will be called with the given requestCode.
 Using a negative requestCode is the same as calling
 <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c> (the activity is not launched as a sub-activity).

 </para>
          <para tool="javadoc-to-mdoc">Note that this method should only be used with Intent protocols
 that are defined to return a result.  In other protocols (such as
 <c><see cref="F:Android.Content.Intent.ActionMain" /></c> or <c><see cref="F:Android.Content.Intent.ActionView" /></c>), you may
 not get the result when you expect.  For example, if the activity you
 are launching uses the singleTask launch mode, it will not run in your
 task and thus you will immediately receive a cancel result.

 </para>
          <para tool="javadoc-to-mdoc">As a special case, if you call startActivityForResult() with a requestCode
 &gt;= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your
 activity, then your window will not be displayed until a result is
 returned back from the started activity.  This is to avoid visible
 flickering when redirecting to another activity.

 </para>
          <para tool="javadoc-to-mdoc">This method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>
 if there was no Activity found to run the given Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromChild (Android.App.Activity child, Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromChild(class Android.App.Activity child, class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;I)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  </param>
        <summary>Same as calling <c><see cref="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityFromChild(android.app.Activity, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromChild (Android.App.Activity child, Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromChild(class Android.App.Activity child, class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  </param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>This is called when a child activity of this one calls its
 <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c> or <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> method.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a child activity of this one calls its
 <c><see cref="M:Android.Content.Context.StartActivity" tool="ReplaceLinkValue" /></c> or <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> method.

 </para>
          <para tool="javadoc-to-mdoc">This method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>
 if there was no Activity found to run the given Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityFromChild(android.app.Activity, android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromFragment">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromFragment (Android.App.Fragment fragment, Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromFragment(class Android.App.Fragment fragment, class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;I)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fragment">The fragment making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  </param>
        <summary>Same as calling <c><see cref="M:Android.App.Activity.StartActivityFromFragment(Android.App.Fragment,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartActivityFromFragment(Android.App.Fragment,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityFromFragment(android.app.Fragment, android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" />
        <altmember cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromFragment">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromFragment (Android.App.Fragment fragment, Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromFragment(class Android.App.Fragment fragment, class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="fragment">The fragment making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  </param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>This is called when a Fragment in this activity calls its
 <c><see cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" /></c> or <c><see cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 method.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called when a Fragment in this activity calls its
 <c><see cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" /></c> or <c><see cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 method.

 </para>
          <para tool="javadoc-to-mdoc">This method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>
 if there was no Activity found to run the given Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityFromFragment(android.app.Fragment, android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" />
        <altmember cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityIfNeeded">
      <MemberSignature Language="C#" Value="public virtual bool StartActivityIfNeeded (Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartActivityIfNeeded(class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;I)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
         onActivityResult() when the activity exits, as described in
         <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.</param>
        <summary>Same as calling <c><see cref="M:Android.App.Activity.StartActivityIfNeeded(Android.Content.Intent,System.Int32,System.Int32)" /></c>
 with no options.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartActivityIfNeeded(Android.Content.Intent,System.Int32,System.Int32)" /></c>
 with no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityIfNeeded(android.content.Intent, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityIfNeeded">
      <MemberSignature Language="C#" Value="public virtual bool StartActivityIfNeeded (Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartActivityIfNeeded(class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;ILandroid/os/Bundle;)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
         onActivityResult() when the activity exits, as described in
         <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>A special variation to launch an activity only if a new activity
 instance is needed to handle the given Intent.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">A special variation to launch an activity only if a new activity
 instance is needed to handle the given Intent.  In other words, this is
 just like <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c> except: if you are
 using the <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_SINGLE_TOP" /></c> flag, or
 singleTask or singleTop
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#AndroidManifestActivity_launchMode" /></c>,
 and the activity
 that handles <format type="text/html"><var>intent</var></format> is the same as your currently running
 activity, then a new instance is not needed.  In this case, instead of
 the normal behavior of calling <c><see cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" /></c> this function will
 return and you can handle the Intent yourself.

 </para>
          <para tool="javadoc-to-mdoc">This function can only be called from a top-level activity; if it is
 called from a child activity, a runtime exception will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startActivityIfNeeded(android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderForResult">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderForResult (Android.Content.IntentSender intent, int requestCode, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderForResult(class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
 intent parameter to <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
 would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
 <format type="text/html"><var>flagsMask</var></format></param>
        <param name="extraFlags">Always set to 0.
</param>
        <summary tool="true">Same as calling <c><see cref="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> with no options.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> with no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderForResult">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderForResult (Android.Content.IntentSender intent, int requestCode, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderForResult(class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
 intent parameter to <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
 would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
 <format type="text/html"><var>flagsMask</var></format></param>
        <param name="extraFlags">Always set to 0.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.  If options
 have also been supplied by the IntentSender, options given here will
 override any that conflict with those given by the IntentSender.
</param>
        <summary>Like <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>, but allowing you
 to use a IntentSender to describe the activity to be started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>, but allowing you
 to use a IntentSender to describe the activity to be started.  If
 the IntentSender is for an activity, that activity will be started
 as if you had called the regular <c><see cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" /></c>
 here; otherwise, its associated action will be executed (such as
 sending a broadcast) as if you had called
 <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c> on it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderFromChild (Android.App.Activity child, Android.Content.IntentSender intent, int requestCode, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderFromChild(class Android.App.Activity child, class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <param name="fillInIntent">To be added.</param>
        <param name="flagsMask">To be added.</param>
        <param name="flagsValues">To be added.</param>
        <param name="extraFlags">To be added.</param>
        <summary>Same as calling <c><see cref="M:Android.App.Activity.StartIntentSenderFromChild(Android.App.Activity,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender)" /></c> with no options.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartIntentSenderFromChild(Android.App.Activity,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender,Android.Content.IntentSender)" /></c> with no options.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderFromChild (Android.App.Activity child, Android.Content.IntentSender intent, int requestCode, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderFromChild(class Android.App.Activity child, class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <param name="fillInIntent">To be added.</param>
        <param name="flagsMask">To be added.</param>
        <param name="flagsValues">To be added.</param>
        <param name="extraFlags">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Like <c><see cref="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,Android.Content.Intent)" /></c>, but
 taking a IntentSender; see
 <c><see cref="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 for more information.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,Android.Content.Intent)" /></c>, but
 taking a IntentSender; see
 <c><see cref="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 for more information.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartLockTask">
      <MemberSignature Language="C#" Value="public virtual void StartLockTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLockTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startLockTask", "()V", "GetStartLockTaskHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Request to put this Activity in a mode where the user is locked to the
 current task.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Request to put this Activity in a mode where the user is locked to the
 current task.

 This will prevent the user from launching other apps, going to settings, or reaching the
 home screen. This does not include those apps whose <c><see cref="!:NoType:android/R$attr;Href=../../../reference/android/R.attr.html#lockTaskMode" /></c>
 values permit launching while locked.

 If <c><see cref="M:Android.App.Admin.DevicePolicyManager.IsLockTaskPermitted(System.String)" /></c> returns true or
 lockTaskMode=lockTaskModeAlways for this component then the app will go directly into
 Lock Task mode. The user will not be able to exit this mode until
 <c><see cref="M:Android.App.Activity.StopLockTask" /></c> is called.

 If <c><see cref="M:Android.App.Admin.DevicePolicyManager.IsLockTaskPermitted(System.String)" /></c> returns false
 then the system will prompt the user with a dialog requesting permission to enter
 this mode.  When entered through this method the user can exit at any time through
 an action described by the request dialog.  Calling stopLockTask will also exit the
 mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startLockTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartManagingCursor">
      <MemberSignature Language="C#" Value="public virtual void StartManagingCursor (Android.Database.ICursor c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartManagingCursor(class Android.Database.ICursor c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startManagingCursor", "(Landroid/database/Cursor;)V", "GetStartManagingCursor_Landroid_database_Cursor_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Android.Database.ICursor" />
      </Parameters>
      <Docs>
        <param name="c">The Cursor to be managed.</param>
        <summary>This method allows the activity to take care of managing the given
 <c><see cref="T:Android.Database.ICursor" /></c>'s lifecycle for you based on the activity's lifecycle.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method allows the activity to take care of managing the given
 <c><see cref="T:Android.Database.ICursor" /></c>'s lifecycle for you based on the activity's lifecycle.
 That is, when the activity is stopped it will automatically call
 <c><see cref="M:Android.Database.ICursor.Deactivate" /></c> on the given Cursor, and when it is later restarted
 it will call <c><see cref="M:Android.Database.ICursor.Requery" /></c> for you.  When the activity is
 destroyed, all managed Cursors will be closed automatically.

 <i>If you are targeting <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>
 or later, consider instead using <c><see cref="T:Android.App.LoaderManager" /></c> instead, available
 via <c><see cref="P:Android.App.Activity.LoaderManager" /></c>.</i></para>
          <para tool="javadoc-to-mdoc">
            <i>Warning:</i> Do not call <c><see cref="M:Android.Database.ICursor.Close" /></c> on cursor obtained from
 <c><see cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri,System.String[],System.String[],System.String[],System.String[])" /></c>, because the activity will do that for you at the appropriate time.
 However, if you call <c><see cref="M:Android.App.Activity.StopManagingCursor(Android.Database.ICursor)" /></c> on a cursor from a managed query, the system
 <i>will not</i> automatically close the cursor and, in that case, you must call
 <c><see cref="M:Android.Database.ICursor.Close" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startManagingCursor(android.database.Cursor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" />
        <altmember cref="M:Android.App.Activity.StopManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="StartNextMatchingActivity">
      <MemberSignature Language="C#" Value="public virtual bool StartNextMatchingActivity (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartNextMatchingActivity(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to dispatch to the next activity.  For
 correct behavior, this must be the same as the Intent that started
 your own activity; the only changes you can make are to the extras
 inside of it.</param>
        <summary tool="true">Same as calling <c><see cref="M:Android.App.Activity.StartNextMatchingActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> with
 no options.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as calling <c><see cref="M:Android.App.Activity.StartNextMatchingActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> with
 no options.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startNextMatchingActivity(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartNextMatchingActivity">
      <MemberSignature Language="C#" Value="public virtual bool StartNextMatchingActivity (Android.Content.Intent intent, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartNextMatchingActivity(class Android.Content.Intent intent, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to dispatch to the next activity.  For
 correct behavior, this must be the same as the Intent that started
 your own activity; the only changes you can make are to the extras
 inside of it.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>Special version of starting an activity, for use when you are replacing
 other activity components.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Special version of starting an activity, for use when you are replacing
 other activity components.  You can use this to hand the Intent off
 to the next Activity that can handle it.  You typically call this in
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> with the Intent returned by <c><see cref="P:Android.App.Activity.Intent" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startNextMatchingActivity(android.content.Intent, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartPostponedEnterTransition">
      <MemberSignature Language="C#" Value="public virtual void StartPostponedEnterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPostponedEnterTransition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPostponedEnterTransition", "()V", "GetStartPostponedEnterTransitionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begin postponed transitions after <c><see cref="M:Android.App.Activity.PostponeEnterTransition" /></c> was called.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begin postponed transitions after <c><see cref="M:Android.App.Activity.PostponeEnterTransition" /></c> was called.
 If postponeEnterTransition() was called, you must call startPostponedEnterTransition()
 to have your Activity start drawing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startPostponedEnterTransition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSearch">
      <MemberSignature Language="C#" Value="public virtual void StartSearch (string initialQuery, bool selectInitialQuery, Android.OS.Bundle appSearchData, bool globalSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartSearch(string initialQuery, bool selectInitialQuery, class Android.OS.Bundle appSearchData, bool globalSearch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startSearch", "(Ljava/lang/String;ZLandroid/os/Bundle;Z)V", "GetStartSearch_Ljava_lang_String_ZLandroid_os_Bundle_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialQuery" Type="System.String" />
        <Parameter Name="selectInitialQuery" Type="System.Boolean" />
        <Parameter Name="appSearchData" Type="Android.OS.Bundle" />
        <Parameter Name="globalSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialQuery">Any non-null non-empty string will be inserted as
 pre-entered text in the search query box.</param>
        <param name="selectInitialQuery">If true, the initial query will be preselected, which means that
 any further typing will replace it.  This is useful for cases where an entire pre-formed
 query is being inserted.  If false, the selection point will be placed at the end of the
 inserted query.  This is useful when the inserted query is text that the user entered,
 and the user would expect to be able to keep typing.  <format type="text/html"><i>This parameter is only meaningful
 if initialQuery is a non-empty string.</i></format></param>
        <param name="appSearchData">An application can insert application-specific
 context here, in order to improve quality or specificity of its own
 searches.  This data will be returned with SEARCH intent(s).  Null if
 no extra data is required.</param>
        <param name="globalSearch">If false, this will only launch the search that has been specifically
 defined by the application (which is usually defined as a local search).  If no default
 search is defined in the current application or activity, global search will be launched.
 If true, this will always launch a platform-global (e.g. web-based) search instead.</param>
        <summary>This hook is called to launch the search UI.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called to launch the search UI.

 </para>
          <para tool="javadoc-to-mdoc">It is typically called from onSearchRequested(), either directly from
 Activity.onSearchRequested() or from an overridden version in any given
 Activity.  If your goal is simply to activate search, it is preferred to call
 onSearchRequested(), which may have been overridden elsewhere in your Activity.  If your goal
 is to inject specific data such as context data, it is preferred to <format type="text/html"><i>override</i></format>
 onSearchRequested(), so that any callers to it will benefit from the override.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#startSearch(java.lang.String, boolean, android.os.Bundle, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.App.SearchManager" />
        <altmember cref="M:Android.App.Activity.OnSearchRequested" />
      </Docs>
    </Member>
    <Member MemberName="StopLockTask">
      <MemberSignature Language="C#" Value="public virtual void StopLockTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLockTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopLockTask", "()V", "GetStopLockTaskHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allow the user to switch away from the current task.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Allow the user to switch away from the current task.

 Called to end the mode started by <c><see cref="M:Android.App.Activity.StartLockTask" /></c>. This
 can only be called by activities that have successfully called
 startLockTask previously.

 This will allow the user to exit this app and move onto other activities.
 </para>
          <para tool="javadoc-to-mdoc">Note: This method should only be called when the activity is user-facing. That is,
 between onResume() and onPause().
 </para>
          <para tool="javadoc-to-mdoc">Note: If there are other tasks below this one that are also locked then calling this
 method will immediately finish this task and resume the previous locked one, remaining in
 lockTask mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#stopLockTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.App.ActivityManager.LockTaskModeState" />
      </Docs>
    </Member>
    <Member MemberName="StopManagingCursor">
      <MemberSignature Language="C#" Value="public virtual void StopManagingCursor (Android.Database.ICursor c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopManagingCursor(class Android.Database.ICursor c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopManagingCursor", "(Landroid/database/Cursor;)V", "GetStopManagingCursor_Landroid_database_Cursor_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Android.Database.ICursor" />
      </Parameters>
      <Docs>
        <param name="c">The Cursor that was being managed.</param>
        <summary>Given a Cursor that was previously given to
 <c><see cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" /></c>, stop the activity's management of that
 cursor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Given a Cursor that was previously given to
 <c><see cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" /></c>, stop the activity's management of that
 cursor.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Warning:</i> After calling this method on a cursor from a managed query,
 the system <i>will not</i> automatically close the cursor and you must call
 <c><see cref="M:Android.Database.ICursor.Close" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#stopManagingCursor(android.database.Cursor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="TakeKeyEvents">
      <MemberSignature Language="C#" Value="public virtual void TakeKeyEvents (bool get);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TakeKeyEvents(bool get) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("takeKeyEvents", "(Z)V", "GetTakeKeyEvents_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="get" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="get">To be added.</param>
        <summary>Request that key events come to this activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that key events come to this activity. Use this if your
 activity has no views with focus, but the activity still wants
 a chance to process key events.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#takeKeyEvents(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.Window.TakeKeyEvents(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TaskId">
      <MemberSignature Language="C#" Value="public virtual int TaskId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TaskId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTaskId", "()I", "GetGetTaskIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the identifier of the task this activity is in.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the identifier of the task this activity is in.  This identifier
 will remain the same for the lifetime of the activity.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getTaskId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleColor">
      <MemberSignature Language="C#" Value="public Android.Graphics.Color TitleColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.Color TitleColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTitleColor", "()I", "GetGetTitleColorHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTitleColor", "(I)V", "GetSetTitleColor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getTitleColor()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setTitleColor(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the color of the title associated with this activity.
 
 This method is deprecated starting in API Level 11 and replaced by action
 bar styles. For information on styling the Action Bar, read the <format type="text/html"><a href="http://developer.android.com/reference/../ guide/topics/ui/actionbar.html">Action Bar</a></format> developer
 guide.</para>
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TitleFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence TitleFormatted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ICharSequence TitleFormatted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTitle", "()Ljava/lang/CharSequence;", "GetGetTitleHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTitle", "(Ljava/lang/CharSequence;)V", "GetSetTitle_Ljava_lang_CharSequence_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getTitle()" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setTitle(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Change the title associated with this activity.  If this is a
 top-level activity, the title for its window will change.  If it
 is an embedded activity, the parent can do whatever it wants
 with it.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TriggerSearch">
      <MemberSignature Language="C#" Value="public virtual void TriggerSearch (string query, Android.OS.Bundle appSearchData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TriggerSearch(string query, class Android.OS.Bundle appSearchData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("triggerSearch", "(Ljava/lang/String;Landroid/os/Bundle;)V", "GetTriggerSearch_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="appSearchData" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="query">The query to trigger.  If empty, the request will be ignored.</param>
        <param name="appSearchData">An application can insert application-specific
 context here, in order to improve quality or specificity of its own
 searches.  This data will be returned with SEARCH intent(s).  Null if
 no extra data is required.
</param>
        <summary>Similar to <c><see cref="M:Android.App.Activity.StartSearch(System.String,System.Boolean,System.Boolean,System.Boolean)" /></c>, but actually fires off the search query after invoking
 the search dialog.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Similar to <c><see cref="M:Android.App.Activity.StartSearch(System.String,System.Boolean,System.Boolean,System.Boolean)" /></c>, but actually fires off the search query after invoking
 the search dialog.  Made available for testing purposes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#triggerSearch(java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void UnregisterForContextMenu (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterForContextMenu", "(Landroid/view/View;)V", "GetUnregisterForContextMenu_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should stop showing a context menu.
</param>
        <summary>Prevents a context menu to be shown for the given view.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prevents a context menu to be shown for the given view. This method will remove the
 <c><see cref="!:NoType:android/view/View$OnCreateContextMenuListener;Href=../../../reference/android/view/View.OnCreateContextMenuListener.html" /></c> on the view.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#unregisterForContextMenu(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.RegisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="VolumeControlStream">
      <MemberSignature Language="C#" Value="public Android.Media.Stream VolumeControlStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Stream VolumeControlStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVolumeControlStream", "()I", "GetGetVolumeControlStreamHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setVolumeControlStream", "(I)V", "GetSetVolumeControlStream_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the suggested audio stream whose volume should be changed by the
 hardware volume controls.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#getVolumeControlStream()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Gets the suggested audio stream whose volume should be changed by the
 hardware volume controls.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/app/Activity.html#setVolumeControlStream(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Suggests an audio stream whose volume should be changed by the hardware
 volume controls.
 
 The suggested audio stream will be tied to the window of this Activity.
 Volume requests which are received while the Activity is in the
 foreground will affect this stream.
 
 It is not guaranteed that the hardware volume controls will always change
 this stream's volume (for example, if a call is in progress, its stream's
 volume may be changed instead). To reset back to the default, use
 <c><see cref="F:Android.Media.AudioManager.UseDefaultStreamType" /></c>.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.VolumeControlStream" />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Window Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Window Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindow", "()Landroid/view/Window;", "GetGetWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the current <c><see cref="T:Android.Views.Window" /></c> for the activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the current <c><see cref="T:Android.Views.Window" /></c> for the activity.
 This can be used to directly access parts of the Window API that
 are not available through Activity/Screen.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WindowManager">
      <MemberSignature Language="C#" Value="public virtual Android.Views.IWindowManager WindowManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IWindowManager WindowManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowManager", "()Landroid/view/WindowManager;", "GetGetWindowManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IWindowManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the window manager for showing custom windows.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the window manager for showing custom windows. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/Activity.html#getWindowManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
