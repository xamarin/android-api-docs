<Type Name="Activity" FullName="Android.App.Activity">
  <TypeSignature Language="C#" Value="public class Activity : Android.Views.ContextThemeWrapper, Android.Content.IComponentCallbacks2, Android.Views.KeyEvent.ICallback, Android.Views.LayoutInflater.IFactory2, Android.Views.View.IOnCreateContextMenuListener, Android.Views.Window.ICallback, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Activity extends Android.Views.ContextThemeWrapper implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class Android.Views.KeyEvent/ICallback, class Android.Views.LayoutInflater/IFactory, class Android.Views.LayoutInflater/IFactory2, class Android.Views.View/IOnCreateContextMenuListener, class Android.Views.Window/ICallback, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.App.Activity" />
  <TypeSignature Language="F#" Value="type Activity = class&#xA;    inherit ContextThemeWrapper&#xA;    interface IComponentCallbacks&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable&#xA;    interface IComponentCallbacks2&#xA;    interface KeyEvent.ICallback&#xA;    interface LayoutInflater.IFactory&#xA;    interface LayoutInflater.IFactory2&#xA;    interface View.IOnCreateContextMenuListener&#xA;    interface Window.ICallback" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.ContextThemeWrapper</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.KeyEvent+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.LayoutInflater+IFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.LayoutInflater+IFactory2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.View+IOnCreateContextMenuListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.Window+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/app/Activity", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/app/Activity", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An activity is a single, focused thing that the user can do.</summary>
    <remarks>
      <para>An activity is a single, focused thing that the user can do.  Almost all
            activities interact with the user, so the Activity class takes care of
            creating a window for you in which you can place your UI with
            <c>#setContentView</c>.  While activities are often presented to the user
            as full-screen windows, they can also be used in other ways: as floating
            windows (via a theme with <c>android.R.attr#windowIsFloating</c> set),
            <see href="https://developer.android.com/guide/topics/ui/multi-window">
            Multi-Window mode</see> or embedded into other windows.
            
            There are two methods almost all subclasses of Activity will implement:
            
            &lt;ul&gt;
                &lt;li&gt; <c>#onCreate</c> is where you initialize your activity.  Most
                importantly, here you will usually call <c>#setContentView(int)</c>
                with a layout resource defining your UI, and using <c>#findViewById</c>
                to retrieve the widgets in that UI that you need to interact with
                programmatically.
            
                &lt;li&gt; <c>#onPause</c> is where you deal with the user pausing active
                interaction with the activity. Any changes made by the user should at
                this point be committed (usually to the
                <c>android.content.ContentProvider</c> holding the data). In this
                state the activity is still visible on screen.
            &lt;/ul&gt;</para>
      <para>To be of use with <c>android.content.Context#startActivity Context.startActivity()</c>, all
            activity classes must have a corresponding
            <c>android.R.styleable#AndroidManifestActivity &amp;lt;activity&amp;gt;</c>
            declaration in their package's <c>AndroidManifest.xml</c>.</para>
      <para>Topics covered here:
            &lt;ol&gt;
            &lt;li&gt;Fragments&lt;li&gt;Activity Lifecycle&lt;li&gt;Configuration Changes&lt;li&gt;Starting Activities and Getting Results&lt;li&gt;Saving Persistent State&lt;li&gt;Permissions&lt;li&gt;Process Lifecycle&lt;/ol&gt;
            
            &lt;div class="special reference"&gt;
            &lt;h3&gt;Developer Guides&lt;/h3&gt;</para>
      <para>The Activity class is an important part of an application's overall lifecycle,
            and the way activities are launched and put together is a fundamental
            part of the platform's application model. For a detailed perspective on the structure of an
            Android application and how activities behave, please read the
            <see href="https://developer.android.com/guide/topics/fundamentals.html">Application Fundamentals</see> and
            <see href="https://developer.android.com/guide/components/tasks-and-back-stack.html">Tasks and Back Stack</see>
            developer guides.</para>
      <para>You can also find a detailed discussion about how to create activities in the
            <see href="https://developer.android.com/guide/components/activities.html">Activities</see>
            developer guide.</para>
      <para>&lt;/div&gt;
            
            "Fragments"&gt;&lt;h3&gt;Fragments&lt;/h3&gt;</para>
      <para>The <c>androidx.fragment.app.FragmentActivity</c> subclass
            can make use of the <c>androidx.fragment.app.Fragment</c> class to better
            modularize their code, build more sophisticated user interfaces for larger
            screens, and help scale their application between small and large screens.</para>
      <para>For more information about using fragments, read the
            <see href="https://developer.android.com/guide/components/fragments.html">Fragments</see> developer guide.</para>
      <para>"ActivityLifecycle"&gt;&lt;h3&gt;Activity Lifecycle&lt;/h3&gt;</para>
      <para>Activities in the system are managed as
            <see href="https://developer.android.com/guide/components/activities/tasks-and-back-stack">
            activity stacks</see>. When a new activity is started, it is usually placed on the top of the
            current stack and becomes the running activity -- the previous activity always remains
            below it in the stack, and will not come to the foreground again until
            the new activity exits. There can be one or multiple activity stacks visible
            on screen.</para>
      <para>An activity has essentially four states:</para>
      <para>&lt;ul&gt;
                &lt;li&gt;If an activity is in the foreground of the screen (at the highest position of the topmost
                    stack), it is &lt;em&gt;active&lt;/em&gt; or &lt;em&gt;running&lt;/em&gt;. This is usually the activity that the
                    user is currently interacting with.&lt;/li&gt;
                &lt;li&gt;If an activity has lost focus but is still presented to the user, it is &lt;em&gt;visible&lt;/em&gt;.
                    It is possible if a new non-full-sized or transparent activity has focus on top of your
                    activity, another activity has higher position in multi-window mode, or the activity
                    itself is not focusable in current windowing mode. Such activity is completely alive (it
                    maintains all state and member information and remains attached to the window manager).
                &lt;li&gt;If an activity is completely obscured by another activity,
                    it is &lt;em&gt;stopped&lt;/em&gt; or &lt;em&gt;hidden&lt;/em&gt;. It still retains all state and member
                    information, however, it is no longer visible to the user so its window is hidden
                    and it will often be killed by the system when memory is needed elsewhere.&lt;/li&gt;
                &lt;li&gt;The system can drop the activity from memory by either asking it to finish,
                    or simply killing its process, making it &lt;em&gt;destroyed&lt;/em&gt;. When it is displayed again
                    to the user, it must be completely restarted and restored to its previous state.&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>The following diagram shows the important state paths of an Activity.
            The square rectangles represent callback methods you can implement to
            perform operations when the Activity moves between states.  The colored
            ovals are major states the Activity can be in.</para>
      <para>&lt;img src="../../../images/activity_lifecycle.png"
                 alt="State diagram for an Android Activity Lifecycle." border="0" /&gt;</para>
      <para>There are three key loops you may be interested in monitoring within your
            activity:
            
            &lt;ul&gt;
            &lt;li&gt;The &lt;b&gt;entire lifetime&lt;/b&gt; of an activity happens between the first call
            to <c>android.app.Activity#onCreate</c> through to a single final call
            to <c>android.app.Activity#onDestroy</c>.  An activity will do all setup
            of "global" state in onCreate(), and release all remaining resources in
            onDestroy().  For example, if it has a thread running in the background
            to download data from the network, it may create that thread in onCreate()
            and then stop the thread in onDestroy().
            
            &lt;li&gt;The &lt;b&gt;visible lifetime&lt;/b&gt; of an activity happens between a call to
            <c>android.app.Activity#onStart</c> until a corresponding call to
            <c>android.app.Activity#onStop</c>.  During this time the user can see the
            activity on-screen, though it may not be in the foreground and interacting
            with the user.  Between these two methods you can maintain resources that
            are needed to show the activity to the user.  For example, you can register
            a <c>android.content.BroadcastReceiver</c> in onStart() to monitor for changes
            that impact your UI, and unregister it in onStop() when the user no
            longer sees what you are displaying.  The onStart() and onStop() methods
            can be called multiple times, as the activity becomes visible and hidden
            to the user.
            
            &lt;li&gt;The &lt;b&gt;foreground lifetime&lt;/b&gt; of an activity happens between a call to
            <c>android.app.Activity#onResume</c> until a corresponding call to
            <c>android.app.Activity#onPause</c>.  During this time the activity is
            visible, active and interacting with the user.  An activity
            can frequently go between the resumed and paused states -- for example when
            the device goes to sleep, when an activity result is delivered, when a new
            intent is delivered -- so the code in these methods should be fairly
            lightweight.
            &lt;/ul&gt;</para>
      <para>The entire lifecycle of an activity is defined by the following
            Activity methods.  All of these are hooks that you can override
            to do appropriate work when the activity changes state.  All
            activities will implement <c>android.app.Activity#onCreate</c>
            to do their initial setup; many will also implement
            <c>android.app.Activity#onPause</c> to commit changes to data and
            prepare to pause interacting with the user, and <c>android.app.Activity#onStop</c>
            to handle no longer being visible on screen. You should always
            call up to your superclass when implementing these methods.</para>
      <para>&lt;/p&gt;</para>
      <code lang="text/java">public class Activity extends ApplicationContext {
                protected void onCreate(Bundle savedInstanceState);
            
                protected void onStart();
            
                protected void onRestart();
            
                protected void onResume();
            
                protected void onPause();
            
                protected void onStop();
            
                protected void onDestroy();
            }
            </code>
      <para>In general the movement through an activity's lifecycle looks like
            this:</para>
      <para>&lt;table border="2" width="85%" align="center" frame="hsides" rules="rows"&gt;
                &lt;colgroup align="left" span="3" /&gt;
                &lt;colgroup align="left" /&gt;
                &lt;colgroup align="center" /&gt;
                &lt;colgroup align="center" /&gt;
            
                &lt;thead&gt;
                &lt;tr&gt;&lt;th colspan="3"&gt;Method&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Killable?&lt;/th&gt; &lt;th&gt;Next&lt;/th&gt;&lt;/tr&gt;
                &lt;/thead&gt;
            
                &lt;tbody&gt;
                &lt;tr&gt;&lt;td colspan="3" align="left" border="0"&gt;<c>android.app.Activity#onCreate onCreate()</c>&lt;/td&gt;
                    &lt;td&gt;Called when the activity is first created.
                        This is where you should do all of your normal static set up:
                        create views, bind data to lists, etc.  This method also
                        provides you with a Bundle containing the activity's previously
                        frozen state, if there was one.</para>
      <para>Always followed by <c>onStart()</c>.&lt;/td&gt;
                    &lt;td align="center"&gt;No&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onStart()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td rowspan="5" style="border-left: none; border-right: none;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
                    &lt;td colspan="2" align="left" border="0"&gt;<c>android.app.Activity#onRestart onRestart()</c>&lt;/td&gt;
                    &lt;td&gt;Called after your activity has been stopped, prior to it being
                        started again.</para>
      <para>Always followed by <c>onStart()</c>&lt;/td&gt;
                    &lt;td align="center"&gt;No&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onStart()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td colspan="2" align="left" border="0"&gt;<c>android.app.Activity#onStart onStart()</c>&lt;/td&gt;
                    &lt;td&gt;Called when the activity is becoming visible to the user.</para>
      <para>Followed by <c>onResume()</c> if the activity comes
                        to the foreground, or <c>onStop()</c> if it becomes hidden.&lt;/td&gt;
                    &lt;td align="center"&gt;No&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onResume()</c> or <c>onStop()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td rowspan="2" style="border-left: none;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;
                    &lt;td align="left" border="0"&gt;<c>android.app.Activity#onResume onResume()</c>&lt;/td&gt;
                    &lt;td&gt;Called when the activity will start
                        interacting with the user.  At this point your activity is at
                        the top of its activity stack, with user input going to it.</para>
      <para>Always followed by <c>onPause()</c>.&lt;/td&gt;
                    &lt;td align="center"&gt;No&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onPause()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td align="left" border="0"&gt;<c>android.app.Activity#onPause onPause()</c>&lt;/td&gt;
                    &lt;td&gt;Called when the activity loses foreground state, is no longer focusable or before
                        transition to stopped/hidden or destroyed state. The activity is still visible to
                        user, so it's recommended to keep it visually active and continue updating the UI.
                        Implementations of this method must be very quick because
                        the next activity will not be resumed until this method returns.</para>
      <para>Followed by either <c>onResume()</c> if the activity
                        returns back to the front, or <c>onStop()</c> if it becomes
                        invisible to the user.&lt;/td&gt;
                    &lt;td align="center"&gt;&lt;font color="#800000"&gt;&lt;strong&gt;Pre-<c>android.os.Build.VERSION_CODES#HONEYCOMB</c>&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onResume()</c> or&lt;br&gt;
                            <c>onStop()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td colspan="2" align="left" border="0"&gt;<c>android.app.Activity#onStop onStop()</c>&lt;/td&gt;
                    &lt;td&gt;Called when the activity is no longer visible to the user.  This may happen either
                        because a new activity is being started on top, an existing one is being brought in
                        front of this one, or this one is being destroyed. This is typically used to stop
                        animations and refreshing the UI, etc.</para>
      <para>Followed by either <c>onRestart()</c> if
                        this activity is coming back to interact with the user, or
                        <c>onDestroy()</c> if this activity is going away.&lt;/td&gt;
                    &lt;td align="center"&gt;&lt;font color="#800000"&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
                    &lt;td align="center"&gt;<c>onRestart()</c> or&lt;br&gt;
                            <c>onDestroy()</c>&lt;/td&gt;
                &lt;/tr&gt;
            
                &lt;tr&gt;&lt;td colspan="3" align="left" border="0"&gt;<c>android.app.Activity#onDestroy onDestroy()</c>&lt;/td&gt;
                    &lt;td&gt;The final call you receive before your
                        activity is destroyed.  This can happen either because the
                        activity is finishing (someone called <c>Activity#finish</c> on
                        it), or because the system is temporarily destroying this
                        instance of the activity to save space.  You can distinguish
                        between these two scenarios with the <c>Activity#isFinishing</c> method.&lt;/td&gt;
                    &lt;td align="center"&gt;&lt;font color="#800000"&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
                    &lt;td align="center"&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;</para>
      <para>Note the "Killable" column in the above table -- for those methods that
            are marked as being killable, after that method returns the process hosting the
            activity may be killed by the system &lt;em&gt;at any time&lt;/em&gt; without another line
            of its code being executed.  Because of this, you should use the
            <c>#onPause</c> method to write any persistent data (such as user edits)
            to storage.  In addition, the method
            <c>#onSaveInstanceState(Bundle)</c> is called before placing the activity
            in such a background state, allowing you to save away any dynamic instance
            state in your activity into the given Bundle, to be later received in
            <c>#onCreate</c> if the activity needs to be re-created.
            See the Process Lifecycle
            section for more information on how the lifecycle of a process is tied
            to the activities it is hosting.  Note that it is important to save
            persistent data in <c>#onPause</c> instead of <c>#onSaveInstanceState</c>
            because the latter is not part of the lifecycle callbacks, so will not
            be called in every situation as described in its documentation.</para>
      <para>&lt;p class="note"&gt;Be aware that these semantics will change slightly between
            applications targeting platforms starting with <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            vs. those targeting prior platforms.  Starting with Honeycomb, an application
            is not in the killable state until its <c>#onStop</c> has returned.  This
            impacts when <c>#onSaveInstanceState(Bundle)</c> may be called (it may be
            safely called after <c>#onPause()</c>) and allows an application to safely
            wait until <c>#onStop()</c> to save persistent state.&lt;/p&gt;
            
            &lt;p class="note"&gt;For applications targeting platforms starting with
            <c>android.os.Build.VERSION_CODES#P</c><c>#onSaveInstanceState(Bundle)</c>
            will always be called after <c>#onStop</c>, so an application may safely
            perform fragment transactions in <c>#onStop</c> and will be able to save
            persistent state later.&lt;/p&gt;</para>
      <para>For those methods that are not marked as being killable, the activity's
            process will not be killed by the system starting from the time the method
            is called and continuing after it returns.  Thus an activity is in the killable
            state, for example, between after <c>onStop()</c> to the start of
            <c>onResume()</c>. Keep in mind that under extreme memory pressure the
            system can kill the application process at any time.</para>
      <para>"ConfigurationChanges"&gt;&lt;h3&gt;Configuration Changes&lt;/h3&gt;</para>
      <para>If the configuration of the device (as defined by the
            <c>Configuration Resources.Configuration</c> class) changes,
            then anything displaying a user interface will need to update to match that
            configuration.  Because Activity is the primary mechanism for interacting
            with the user, it includes special support for handling configuration
            changes.</para>
      <para>Unless you specify otherwise, a configuration change (such as a change
            in screen orientation, language, input devices, etc) will cause your
            current activity to be &lt;em&gt;destroyed&lt;/em&gt;, going through the normal activity
            lifecycle process of <c>#onPause</c>,
            <c>#onStop</c>, and <c>#onDestroy</c> as appropriate.  If the activity
            had been in the foreground or visible to the user, once <c>#onDestroy</c> is
            called in that instance then a new instance of the activity will be
            created, with whatever savedInstanceState the previous instance had generated
            from <c>#onSaveInstanceState</c>.</para>
      <para>This is done because any application resource,
            including layout files, can change based on any configuration value.  Thus
            the only safe way to handle a configuration change is to re-retrieve all
            resources, including layouts, drawables, and strings.  Because activities
            must already know how to save their state and re-create themselves from
            that state, this is a convenient way to have an activity restart itself
            with a new configuration.</para>
      <para>In some special cases, you may want to bypass restarting of your
            activity based on one or more types of configuration changes.  This is
            done with the <c>android.R.attr#configChanges android:configChanges</c>
            attribute in its manifest.  For any types of configuration changes you say
            that you handle there, you will receive a call to your current activity's
            <c>#onConfigurationChanged</c> method instead of being restarted.  If
            a configuration change involves any that you do not handle, however, the
            activity will still be restarted and <c>#onConfigurationChanged</c>
            will not be called.</para>
      <para>"StartingActivities"&gt;&lt;h3&gt;Starting Activities and Getting Results&lt;/h3&gt;</para>
      <para>The <c>android.app.Activity#startActivity</c>
            method is used to start a
            new activity, which will be placed at the top of the activity stack.  It
            takes a single argument, an <c>android.content.Intent Intent</c>,
            which describes the activity
            to be executed.</para>
      <para>Sometimes you want to get a result back from an activity when it
            ends.  For example, you may start an activity that lets the user pick
            a person in a list of contacts; when it ends, it returns the person
            that was selected.  To do this, you call the
            <c>android.app.Activity#startActivityForResult(Intent, int)</c>
            version with a second integer parameter identifying the call.  The result
            will come back through your <c>android.app.Activity#onActivityResult</c>
            method.</para>
      <para>When an activity exits, it can call
            <c>android.app.Activity#setResult(int)</c>
            to return data back to its parent.  It must always supply a result code,
            which can be the standard results RESULT_CANCELED, RESULT_OK, or any
            custom values starting at RESULT_FIRST_USER.  In addition, it can optionally
            return back an Intent containing any additional data it wants.  All of this
            information appears back on the
            parent's <c>Activity.onActivityResult()</c>, along with the integer
            identifier it originally supplied.</para>
      <para>If a child activity fails for any reason (such as crashing), the parent
            activity will receive a result with the code RESULT_CANCELED.</para>
      <code lang="text/java">public class MyActivity extends Activity {
                ...
            
                static final int PICK_CONTACT_REQUEST = 0;
            
                public boolean onKeyDown(int keyCode, KeyEvent event) {
                    if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
                        // When the user center presses, let them pick a contact.
                        startActivityForResult(
                            new Intent(Intent.ACTION_PICK,
                            new Uri("content://contacts")),
                            PICK_CONTACT_REQUEST);
                       return true;
                    }
                    return false;
                }
            
                protected void onActivityResult(int requestCode, int resultCode,
                        Intent data) {
                    if (requestCode == PICK_CONTACT_REQUEST) {
                        if (resultCode == RESULT_OK) {
                            // A contact was picked.  Here we will just display it
                            // to the user.
                            startActivity(new Intent(Intent.ACTION_VIEW, data));
                        }
                    }
                }
            }
            </code>
      <para>"SavingPersistentState"&gt;&lt;h3&gt;Saving Persistent State&lt;/h3&gt;</para>
      <para>There are generally two kinds of persistent state that an activity
            will deal with: shared document-like data (typically stored in a SQLite
            database using a android.content.ContentProvider content provider)
            and internal state such as user preferences.</para>
      <para>For content provider data, we suggest that activities use an
            "edit in place" user model.  That is, any edits a user makes are effectively
            made immediately without requiring an additional confirmation step.
            Supporting this model is generally a simple matter of following two rules:</para>
      <para>&lt;ul&gt;
                &lt;li&gt;</para>
      <para>When creating a new document, the backing database entry or file for
                        it is created immediately.  For example, if the user chooses to write
                        a new email, a new entry for that email is created as soon as they
                        start entering data, so that if they go to any other activity after
                        that point this email will now appear in the list of drafts.</para>
      <para>&lt;li&gt;</para>
      <para>When an activity's <c>onPause()</c> method is called, it should
                        commit to the backing content provider or file any changes the user
                        has made.  This ensures that those changes will be seen by any other
                        activity that is about to run.  You will probably want to commit
                        your data even more aggressively at key times during your
                        activity's lifecycle: for example before starting a new
                        activity, before finishing your own activity, when the user
                        switches between input fields, etc.</para>
      <para>&lt;/ul&gt;</para>
      <para>This model is designed to prevent data loss when a user is navigating
            between activities, and allows the system to safely kill an activity (because
            system resources are needed somewhere else) at any time after it has been
            stopped (or paused on platform versions before <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>).
            Note this implies that the user pressing BACK from your activity does &lt;em&gt;not&lt;/em&gt;
            mean "cancel" -- it means to leave the activity with its current contents
            saved away.  Canceling edits in an activity must be provided through
            some other mechanism, such as an explicit "revert" or "undo" option.</para>
      <para>See the android.content.ContentProvider content package for
            more information about content providers.  These are a key aspect of how
            different activities invoke and propagate data between themselves.</para>
      <para>The Activity class also provides an API for managing internal persistent state
            associated with an activity.  This can be used, for example, to remember
            the user's preferred initial display in a calendar (day view or week view)
            or the user's default home page in a web browser.</para>
      <para>Activity persistent state is managed
            with the method <c>#getPreferences</c>,
            allowing you to retrieve and
            modify a set of name/value pairs associated with the activity.  To use
            preferences that are shared across multiple application components
            (activities, receivers, services, providers), you can use the underlying
            <c>Context#getSharedPreferences Context.getSharedPreferences()</c> method
            to retrieve a preferences
            object stored under a specific name.
            (Note that it is not possible to share settings data across application
            packages -- for that you will need a content provider.)</para>
      <para>Here is an excerpt from a calendar activity that stores the user's
            preferred view mode in its persistent settings:</para>
      <code lang="text/java">public class CalendarActivity extends Activity {
                ...
            
                static final int DAY_VIEW_MODE = 0;
                static final int WEEK_VIEW_MODE = 1;
            
                private SharedPreferences mPrefs;
                private int mCurViewMode;
            
                protected void onCreate(Bundle savedInstanceState) {
                    super.onCreate(savedInstanceState);
            
                    mPrefs = getSharedPreferences(getLocalClassName(), MODE_PRIVATE);
                    mCurViewMode = mPrefs.getInt("view_mode", DAY_VIEW_MODE);
                }
            
                protected void onPause() {
                    super.onPause();
            
                    SharedPreferences.Editor ed = mPrefs.edit();
                    ed.putInt("view_mode", mCurViewMode);
                    ed.commit();
                }
            }
            </code>
      <para>"Permissions"&gt;&lt;h3&gt;Permissions&lt;/h3&gt;</para>
      <para>The ability to start a particular Activity can be enforced when it is
            declared in its
            manifest's <c>android.R.styleable#AndroidManifestActivity &amp;lt;activity&amp;gt;</c>
            tag.  By doing so, other applications will need to declare a corresponding
            <c>android.R.styleable#AndroidManifestUsesPermission &amp;lt;uses-permission&amp;gt;</c>
            element in their own manifest to be able to start that activity.</para>
      <para>When starting an Activity you can set <c>Intent#FLAG_GRANT_READ_URI_PERMISSION
            Intent.FLAG_GRANT_READ_URI_PERMISSION</c> and/or <c>Intent#FLAG_GRANT_WRITE_URI_PERMISSION
            Intent.FLAG_GRANT_WRITE_URI_PERMISSION</c> on the Intent.  This will grant the
            Activity access to the specific URIs in the Intent.  Access will remain
            until the Activity has finished (it will remain across the hosting
            process being killed and other temporary destruction).  As of
            <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>, if the Activity
            was already created and a new Intent is being delivered to
            <c>#onNewIntent(Intent)</c>, any newly granted URI permissions will be added
            to the existing ones it holds.</para>
      <para>See the <see href="https://developer.android.com/guide/topics/security/security.html">Security and Permissions</see>
            document for more information on permissions and security in general.
            
            "ProcessLifecycle"&gt;&lt;h3&gt;Process Lifecycle&lt;/h3&gt;</para>
      <para>The Android system attempts to keep an application process around for as
            long as possible, but eventually will need to remove old processes when
            memory runs low. As described in Activity
            Lifecycle, the decision about which process to remove is intimately
            tied to the state of the user's interaction with it. In general, there
            are four states a process can be in based on the activities running in it,
            listed here in order of importance. The system will kill less important
            processes (the last ones) before it resorts to killing more important
            processes (the first ones).
            
            &lt;ol&gt;
            &lt;li&gt;</para>
      <para>The &lt;b&gt;foreground activity&lt;/b&gt; (the activity at the top of the screen
            that the user is currently interacting with) is considered the most important.
            Its process will only be killed as a last resort, if it uses more memory
            than is available on the device.  Generally at this point the device has
            reached a memory paging state, so this is required in order to keep the user
            interface responsive.
            &lt;li&gt;</para>
      <para>A &lt;b&gt;visible activity&lt;/b&gt; (an activity that is visible to the user
            but not in the foreground, such as one sitting behind a foreground dialog
            or next to other activities in multi-window mode)
            is considered extremely important and will not be killed unless that is
            required to keep the foreground activity running.
            &lt;li&gt;</para>
      <para>A &lt;b&gt;background activity&lt;/b&gt; (an activity that is not visible to
            the user and has been stopped) is no longer critical, so the system may
            safely kill its process to reclaim memory for other foreground or
            visible processes.  If its process needs to be killed, when the user navigates
            back to the activity (making it visible on the screen again), its
            <c>#onCreate</c> method will be called with the savedInstanceState it had previously
            supplied in <c>#onSaveInstanceState</c> so that it can restart itself in the same
            state as the user last left it.
            &lt;li&gt;</para>
      <para>An &lt;b&gt;empty process&lt;/b&gt; is one hosting no activities or other
            application components (such as <c>Service</c> or
            <c>android.content.BroadcastReceiver</c> classes).  These are killed very
            quickly by the system as memory becomes low.  For this reason, any
            background operation you do outside of an activity must be executed in the
            context of an activity BroadcastReceiver or Service to ensure that the system
            knows it needs to keep your process around.
            &lt;/ol&gt;</para>
      <para>Sometimes an Activity may need to do a long-running operation that exists
            independently of the activity lifecycle itself.  An example may be a camera
            application that allows you to upload a picture to a web site.  The upload
            may take a long time, and the application should allow the user to leave
            the application while it is executing.  To accomplish this, your Activity
            should start a <c>Service</c> in which the upload takes place.  This allows
            the system to properly prioritize your process (considering it to be more
            important than other non-visible applications) for the duration of the
            upload, independent of whether the original activity is paused, stopped,
            or finished.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/app/Activity" title="Reference documentation">Java documentation for <code>android.app.Activity</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Activity (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.App.Activity : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.App.Activity" Usage="new Android.App.Activity (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionBar">
      <MemberSignature Language="C#" Value="public virtual Android.App.ActionBar? ActionBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.ActionBar ActionBar" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ActionBar" />
      <MemberSignature Language="F#" Value="member this.ActionBar : Android.App.ActionBar" Usage="Android.App.Activity.ActionBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getActionBar", "()Landroid/app/ActionBar;", "GetGetActionBarHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getActionBar", "()Landroid/app/ActionBar;", "GetGetActionBarHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.ActionBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a reference to this activity's ActionBar.</summary>
        <value>The Activity's ActionBar, or null if it does not have one.</value>
        <remarks>
          <para>Retrieve a reference to this activity's ActionBar.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getActionBar()" title="Reference documentation">Java documentation for <code>android.app.Activity.getActionBar()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="AddContentView">
      <MemberSignature Language="C#" Value="public virtual void AddContentView (Android.Views.View? view, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.AddContentView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)" />
      <MemberSignature Language="F#" Value="abstract member AddContentView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.AddContentView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="activity.AddContentView (view, params)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.</param>
        <summary>Add an additional content view to the activity.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#addContentView(android.view.View,%20android.view.LayoutParams)" title="Reference documentation">Java documentation for <code>android.app.Activity.addContentView(android.view.View, android.view.LayoutParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Android.App.Application? Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Application Application" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Application" />
      <MemberSignature Language="F#" Value="member this.Application : Android.App.Application" Usage="Android.App.Activity.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getApplication", "()Landroid/app/Application;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getApplication", "()Landroid/app/Application;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the application that owns this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the application that owns this activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getApplication()" title="Reference documentation">Java documentation for <code>android.app.Activity.getApplication()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingActivity">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName? CallingActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ComponentName CallingActivity" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.CallingActivity" />
      <MemberSignature Language="F#" Value="member this.CallingActivity : Android.Content.ComponentName" Usage="Android.App.Activity.CallingActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingActivity", "()Landroid/content/ComponentName;", "GetGetCallingActivityHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingActivity", "()Landroid/content/ComponentName;", "GetGetCallingActivityHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the activity that invoked this activity.</summary>
        <value>The ComponentName of the activity that will receive your
                    reply, or null if none.</value>
        <remarks>
          <para>Return the name of the activity that invoked this activity.  This is
            who the data in <c>#setResult setResult()</c> will be sent to.  You
            can use this information to validate that the recipient is allowed to
            receive the data.
            
            &lt;p class="note"&gt;Note: if the calling activity is not expecting a result (that is it
            did not use the <c>#startActivityForResult</c>
            form that includes a request code), then the calling package will be
            null.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getCallingActivity()" title="Reference documentation">Java documentation for <code>android.app.Activity.getCallingActivity()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingPackage">
      <MemberSignature Language="C#" Value="public virtual string? CallingPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackage" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.CallingPackage" />
      <MemberSignature Language="F#" Value="member this.CallingPackage : string" Usage="Android.App.Activity.CallingPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "GetGetCallingPackageHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "GetGetCallingPackageHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the package that invoked this activity.</summary>
        <value>The package of the activity that will receive your
                    reply, or null if none.</value>
        <remarks>
          <para>Return the name of the package that invoked this activity.  This is who
            the data in <c>#setResult setResult()</c> will be sent to.  You can
            use this information to validate that the recipient is allowed to
            receive the data.
            
            &lt;p class="note"&gt;Note: if the calling activity is not expecting a result (that is it
            did not use the <c>#startActivityForResult</c>
            form that includes a request code), then the calling package will be
            null.&lt;/p&gt;
            
            &lt;p class="note"&gt;Note: prior to <c>android.os.Build.VERSION_CODES#JELLY_BEAN_MR2</c>,
            the result from this method was unstable.  If the process hosting the calling
            package was no longer running, it would return null instead of the proper package
            name.  You can use <c>#getCallingActivity()</c> and retrieve the package name
            from that instead.&lt;/p&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getCallingPackage()" title="Reference documentation">Java documentation for <code>android.app.Activity.getCallingPackage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChangingConfigurations">
      <MemberSignature Language="C#" Value="public virtual Android.Content.PM.ConfigChanges ChangingConfigurations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Content.PM.ConfigChanges ChangingConfigurations" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ChangingConfigurations" />
      <MemberSignature Language="F#" Value="member this.ChangingConfigurations : Android.Content.PM.ConfigChanges" Usage="Android.App.Activity.ChangingConfigurations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getChangingConfigurations", "()I", "GetGetChangingConfigurationsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getChangingConfigurations", "()I", "GetGetChangingConfigurationsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ConfigChanges</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this activity is being destroyed because it can not handle a
            configuration parameter being changed (and thus its
            <c>#onConfigurationChanged(Configuration)</c> method is
            &lt;em&gt;not&lt;/em&gt; being called), then you can use this method to discover
            the set of changes that have occurred while in the process of being
            destroyed.</summary>
        <value>Returns a bit field of the configuration parameters that are
            changing, as defined by the <c>android.content.res.Configuration</c>
            class.</value>
        <remarks>
          <para>If this activity is being destroyed because it can not handle a
            configuration parameter being changed (and thus its
            <c>#onConfigurationChanged(Configuration)</c> method is
            &lt;em&gt;not&lt;/em&gt; being called), then you can use this method to discover
            the set of changes that have occurred while in the process of being
            destroyed.  Note that there is no guarantee that these will be
            accurate (other changes could have happened at any time), so you should
            only use this as an optimization hint.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getChangingConfigurations()" title="Reference documentation">Java documentation for <code>android.app.Activity.getChangingConfigurations()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearOverrideActivityTransition">
      <MemberSignature Language="C#" Value="public virtual void ClearOverrideActivityTransition (Android.App.OverrideTransition overrideType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearOverrideActivityTransition(valuetype Android.App.OverrideTransition overrideType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ClearOverrideActivityTransition(Android.App.OverrideTransition)" />
      <MemberSignature Language="F#" Value="abstract member ClearOverrideActivityTransition : Android.App.OverrideTransition -&gt; unit&#xA;override this.ClearOverrideActivityTransition : Android.App.OverrideTransition -&gt; unit" Usage="activity.ClearOverrideActivityTransition overrideType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearOverrideActivityTransition", "(I)V", "GetClearOverrideActivityTransition_IHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearOverrideActivityTransition", "(I)V", "GetClearOverrideActivityTransition_IHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrideType" Type="Android.App.OverrideTransition">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="overrideType">
          <c>OVERRIDE_TRANSITION_OPEN</c> clear the animation set for starting a
                                new activity. <c>OVERRIDE_TRANSITION_CLOSE</c> clear the animation set
                                for finishing an activity.</param>
        <summary>Clears the animations which are set from <c>#overrideActivityTransition</c>.</summary>
        <remarks>
          <para>Clears the animations which are set from <c>#overrideActivityTransition</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#clearOverrideActivityTransition(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.clearOverrideActivityTransition(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseContextMenu">
      <MemberSignature Language="C#" Value="public virtual void CloseContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.CloseContextMenu" />
      <MemberSignature Language="F#" Value="abstract member CloseContextMenu : unit -&gt; unit&#xA;override this.CloseContextMenu : unit -&gt; unit" Usage="activity.CloseContextMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("closeContextMenu", "()V", "GetCloseContextMenuHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("closeContextMenu", "()V", "GetCloseContextMenuHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Programmatically closes the most recently opened context menu, if showing.</summary>
        <remarks>
          <para>Programmatically closes the most recently opened context menu, if showing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#closeContextMenu()" title="Reference documentation">Java documentation for <code>android.app.Activity.closeContextMenu()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CloseOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void CloseOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseOptionsMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.CloseOptionsMenu" />
      <MemberSignature Language="F#" Value="abstract member CloseOptionsMenu : unit -&gt; unit&#xA;override this.CloseOptionsMenu : unit -&gt; unit" Usage="activity.CloseOptionsMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("closeOptionsMenu", "()V", "GetCloseOptionsMenuHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("closeOptionsMenu", "()V", "GetCloseOptionsMenuHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Progammatically closes the options menu.</summary>
        <remarks>
          <para>Progammatically closes the options menu. If the options menu is already
            closed, this method does nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#closeOptionsMenu()" title="Reference documentation">Java documentation for <code>android.app.Activity.closeOptionsMenu()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ComponentName">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName? ComponentName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ComponentName ComponentName" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ComponentName" />
      <MemberSignature Language="F#" Value="member this.ComponentName : Android.Content.ComponentName" Usage="Android.App.Activity.ComponentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getComponentName", "()Landroid/content/ComponentName;", "GetGetComponentNameHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getComponentName", "()Landroid/content/ComponentName;", "GetGetComponentNameHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the complete component name of this activity.</summary>
        <value>Returns the complete component name for this activity</value>
        <remarks>
          <para>Returns the complete component name of this activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getComponentName()" title="Reference documentation">Java documentation for <code>android.app.Activity.getComponentName()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ContentScene">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Scene? ContentScene { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.Scene ContentScene" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ContentScene" />
      <MemberSignature Language="F#" Value="member this.ContentScene : Android.Transitions.Scene" Usage="Android.App.Activity.ContentScene" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getContentScene", "()Landroid/transition/Scene;", "GetGetContentSceneHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getContentScene", "()Landroid/transition/Scene;", "GetGetContentSceneHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Scene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the <c>Scene</c> representing this window's current content.</summary>
        <value>Current Scene being shown or null</value>
        <remarks>
          <para>Retrieve the <c>Scene</c> representing this window's current content.
            Requires <c>Window#FEATURE_CONTENT_TRANSITIONS</c>.</para>
          <para>This method will return null if the current content is not represented by a Scene.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getContentScene()" title="Reference documentation">Java documentation for <code>android.app.Activity.getContentScene()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTransitionManager">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.TransitionManager? ContentTransitionManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.TransitionManager ContentTransitionManager" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ContentTransitionManager" />
      <MemberSignature Language="F#" Value="member this.ContentTransitionManager : Android.Transitions.TransitionManager with get, set" Usage="Android.App.Activity.ContentTransitionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getContentTransitionManager", "()Landroid/transition/TransitionManager;", "GetGetContentTransitionManagerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getContentTransitionManager", "()Landroid/transition/TransitionManager;", "GetGetContentTransitionManagerHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setContentTransitionManager", "(Landroid/transition/TransitionManager;)V", "GetSetContentTransitionManager_Landroid_transition_TransitionManager_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setContentTransitionManager", "(Landroid/transition/TransitionManager;)V", "GetSetContentTransitionManager_Landroid_transition_TransitionManager_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.TransitionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="tm">The TransitionManager to use for scene changes.</param>
        <summary>Retrieve the <c>TransitionManager</c> responsible for default transitions in this window. -or- Set the <c>TransitionManager</c> to use for default transitions in this window.</summary>
        <value>This window's content TransitionManager or null if none is set.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Retrieve the <c>TransitionManager</c> responsible for default transitions in this window.
            Requires <c>Window#FEATURE_CONTENT_TRANSITIONS</c>.</para>
          <para>This method will return non-null after content has been initialized (e.g. by using
            <c>#setContentView</c>) if <c>Window#FEATURE_CONTENT_TRANSITIONS</c> has been granted.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getContentTransitionManager()" title="Reference documentation">Java documentation for <code>android.app.Activity.getContentTransitionManager()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the <c>TransitionManager</c> to use for default transitions in this window.
            Requires <c>Window#FEATURE_CONTENT_TRANSITIONS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setContentTransitionManager(android.transition.TransitionManager)" title="Reference documentation">Java documentation for <code>android.app.Activity.setContentTransitionManager(android.transition.TransitionManager)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePendingResult">
      <MemberSignature Language="C#" Value="public virtual Android.App.PendingIntent? CreatePendingResult (int requestCode, Android.Content.Intent data, Android.App.PendingIntentFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.PendingIntent CreatePendingResult(int32 requestCode, class Android.Content.Intent data, valuetype Android.App.PendingIntentFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.CreatePendingResult(System.Int32,Android.Content.Intent,Android.App.PendingIntentFlags)" />
      <MemberSignature Language="F#" Value="abstract member CreatePendingResult : int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent&#xA;override this.CreatePendingResult : int * Android.Content.Intent * Android.App.PendingIntentFlags -&gt; Android.App.PendingIntent" Usage="activity.CreatePendingResult (requestCode, data, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createPendingResult", "(ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "GetCreatePendingResult_ILandroid_content_Intent_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createPendingResult", "(ILandroid/content/Intent;I)Landroid/app/PendingIntent;", "GetCreatePendingResult_ILandroid_content_Intent_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="data" Type="Android.Content.Intent" />
        <Parameter Name="flags" Type="Android.App.PendingIntentFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="requestCode">Private request code for the sender that will be
            associated with the result data when it is returned.  The sender can not
            modify this value, allowing you to identify incoming results.</param>
        <param name="data">Default data to supply in the result, which may be modified
            by the sender.</param>
        <param name="flags">May be <c>PendingIntent#FLAG_ONE_SHOT PendingIntent.FLAG_ONE_SHOT</c>,
            <c>PendingIntent#FLAG_NO_CREATE PendingIntent.FLAG_NO_CREATE</c>,
            <c>PendingIntent#FLAG_CANCEL_CURRENT PendingIntent.FLAG_CANCEL_CURRENT</c>,
            <c>PendingIntent#FLAG_UPDATE_CURRENT PendingIntent.FLAG_UPDATE_CURRENT</c>,
            or any of the flags as supported by
            <c>Intent#fillIn Intent.fillIn()</c> to control which unspecified parts
            of the intent that can be supplied when the actual send happens.</param>
        <summary>Create a new PendingIntent object which you can hand to others
            for them to use to send result data back to your
            <c>#onActivityResult</c> callback.</summary>
        <returns>Returns an existing or new PendingIntent matching the given
            parameters.  May return null only if
            <c>PendingIntent#FLAG_NO_CREATE PendingIntent.FLAG_NO_CREATE</c> has been
            supplied.</returns>
        <remarks>
          <para>Create a new PendingIntent object which you can hand to others
            for them to use to send result data back to your
            <c>#onActivityResult</c> callback.  The created object will be either
            one-shot (becoming invalid after a result is sent back) or multiple
            (allowing any number of results to be sent through it).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#createPendingResult(int,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.createPendingResult(int, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.App.PendingIntent" />
      </Docs>
    </Member>
    <Member MemberName="CurrentFocus">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? CurrentFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View CurrentFocus" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.CurrentFocus" />
      <MemberSignature Language="F#" Value="member this.CurrentFocus : Android.Views.View" Usage="Android.App.Activity.CurrentFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCurrentFocus", "()Landroid/view/View;", "GetGetCurrentFocusHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCurrentFocus", "()Landroid/view/View;", "GetGetCurrentFocusHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Calls <c>android.view.Window#getCurrentFocus</c> on the
            Window of this Activity to return the currently focused view.</summary>
        <value>View The current View with focus or null.</value>
        <remarks>
          <para>Calls <c>android.view.Window#getCurrentFocus</c> on the
            Window of this Activity to return the currently focused view.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getCurrentFocus()" title="Reference documentation">Java documentation for <code>android.app.Activity.getCurrentFocus()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Window" />
        <altmember cref="P:Android.Views.Window.CurrentFocus" />
      </Docs>
    </Member>
    <Member MemberName="DismissDialog">
      <MemberSignature Language="C#" Value="public void DismissDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DismissDialog(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DismissDialog(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.DismissDialog : int -&gt; unit" Usage="activity.DismissDialog id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dismissDialog", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dismissDialog", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <summary>Dismiss a dialog that was previously shown via <c>#showDialog(int)</c>.</summary>
        <remarks>
          <para>Dismiss a dialog that was previously shown via <c>#showDialog(int)</c>.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dismissDialog(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.dismissDialog(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the id was not previously shown via
   <see cref="M:Android.App.Activity.ShowDialog(System.Int32)" />.</exception>
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DismissKeyboardShortcutsHelper">
      <MemberSignature Language="C#" Value="public void DismissKeyboardShortcutsHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DismissKeyboardShortcutsHelper() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DismissKeyboardShortcutsHelper" />
      <MemberSignature Language="F#" Value="member this.DismissKeyboardShortcutsHelper : unit -&gt; unit" Usage="activity.DismissKeyboardShortcutsHelper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dismissKeyboardShortcutsHelper", "()V", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dismissKeyboardShortcutsHelper", "()V", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismiss the Keyboard Shortcuts screen.</summary>
        <remarks>
          <para>Dismiss the Keyboard Shortcuts screen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dismissKeyboardShortcutsHelper()" title="Reference documentation">Java documentation for <code>android.app.Activity.dismissKeyboardShortcutsHelper()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchGenericMotionEvent (Android.Views.MotionEvent? ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchGenericMotionEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchGenericMotionEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchGenericMotionEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.DispatchGenericMotionEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.DispatchGenericMotionEvent ev" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchGenericMotionEvent(Android.Views.MotionEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericMotionEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericMotionEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The generic motion event.</param>
        <summary>Called to process generic motion events.</summary>
        <returns>boolean Return true if this event was consumed.</returns>
        <remarks>
          <para>Called to process generic motion events.  You can override this to
            intercept all generic motion events before they are dispatched to the
            window.  Be sure to call this implementation for generic motion events
            that should be handled normally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dispatchGenericMotionEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.dispatchGenericMotionEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyEvent (Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchKeyEvent(Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchKeyEvent : Android.Views.KeyEvent -&gt; bool&#xA;override this.DispatchKeyEvent : Android.Views.KeyEvent -&gt; bool" Usage="activity.DispatchKeyEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchKeyEvent(Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEvent_Landroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEvent_Landroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <param name="event">The key event.</param>
        <summary>Called to process key events.</summary>
        <returns>boolean Return true if this event was consumed.</returns>
        <remarks>
          <para>Called to process key events.  You can override this to intercept all
            key events before they are dispatched to the window.  Be sure to call
            this implementation for key events that should be handled normally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dispatchKeyEvent(android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.dispatchKeyEvent(android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyShortcutEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyShortcutEvent (Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyShortcutEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchKeyShortcutEvent(Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchKeyShortcutEvent : Android.Views.KeyEvent -&gt; bool&#xA;override this.DispatchKeyShortcutEvent : Android.Views.KeyEvent -&gt; bool" Usage="activity.DispatchKeyShortcutEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchKeyShortcutEvent(Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyShortcutEvent_Landroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyShortcutEvent_Landroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key shortcut event.</param>
        <param name="event">The key shortcut event.</param>
        <summary>Called to process a key shortcut event.</summary>
        <returns>True if this event was consumed.</returns>
        <remarks>
          <para>Called to process a key shortcut event.
            You can override this to intercept all key shortcut events before they are
            dispatched to the window.  Be sure to call this implementation for key shortcut
            events that should be handled normally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dispatchKeyShortcutEvent(android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.dispatchKeyShortcutEvent(android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchPopulateAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchPopulateAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchPopulateAccessibilityEvent : Android.Views.Accessibility.AccessibilityEvent -&gt; bool&#xA;override this.DispatchPopulateAccessibilityEvent : Android.Views.Accessibility.AccessibilityEvent -&gt; bool" Usage="activity.DispatchPopulateAccessibilityEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchPopulateAccessibilityEvent(Android.Views.Accessibility.AccessibilityEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event.</param>
        <summary>Called to process population of <see cref="T:Android.Views.Accessibility.AccessibilityEvent" />s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTouchEvent (Android.Views.MotionEvent? ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTouchEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchTouchEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchTouchEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.DispatchTouchEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.DispatchTouchEvent ev" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchTouchEvent(Android.Views.MotionEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTouchEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTouchEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The touch screen event.</param>
        <summary>Called to process touch screen events.</summary>
        <returns>boolean Return true if this event was consumed.</returns>
        <remarks>
          <para>Called to process touch screen events.  You can override this to
            intercept all touch screen events before they are dispatched to the
            window.  Be sure to call this implementation for touch screen events
            that should be handled normally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dispatchTouchEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.dispatchTouchEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTrackballEvent (Android.Views.MotionEvent? ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTrackballEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.DispatchTrackballEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member DispatchTrackballEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.DispatchTrackballEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.DispatchTrackballEvent ev" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.DispatchTrackballEvent(Android.Views.MotionEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTrackballEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTrackballEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The trackball event.</param>
        <summary>Called to process trackball events.</summary>
        <returns>boolean Return true if this event was consumed.</returns>
        <remarks>
          <para>Called to process trackball events.  You can override this to
            intercept all trackball events before they are dispatched to the
            window.  Be sure to call this implementation for trackball events
            that should be handled normally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dispatchTrackballEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.dispatchTrackballEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (string prefix, Java.IO.FileDescriptor? fd, Java.IO.PrintWriter writer, string[]? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(string prefix, class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.Dump(System.String,Java.IO.FileDescriptor,Java.IO.PrintWriter,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member Dump : string * Java.IO.FileDescriptor * Java.IO.PrintWriter * string[] -&gt; unit&#xA;override this.Dump : string * Java.IO.FileDescriptor * Java.IO.PrintWriter * string[] -&gt; unit" Usage="activity.Dump (prefix, fd, writer, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dump", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_lang_String_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("dump", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_lang_String_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prefix">Desired prefix to prepend at each line of output.</param>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
            closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.</param>
        <summary>Print the Activity's state into the given stream.</summary>
        <remarks>
          <para>Print the Activity's state into the given stream.  This gets invoked if
            you run <c>adb shell dumpsys activity &amp;lt;activity_component_name&amp;gt;</c>.</para>
          <para>This method won't be called if the app targets
            <c>android.os.Build.VERSION_CODES#TIRAMISU</c> or later if the dump request starts with one
            of the following arguments:
            &lt;ul&gt;
              &lt;li&gt;--autofill
              &lt;li&gt;--contentcapture
              &lt;li&gt;--translation
              &lt;li&gt;--list-dumpables
              &lt;li&gt;--dump-dumpable
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#dump(java.lang.String,%20java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String[])" title="Reference documentation">Java documentation for <code>android.app.Activity.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="EnterPictureInPictureMode">
      <MemberSignature Language="C#" Value="public virtual void EnterPictureInPictureMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterPictureInPictureMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.EnterPictureInPictureMode" />
      <MemberSignature Language="F#" Value="abstract member EnterPictureInPictureMode : unit -&gt; unit&#xA;override this.EnterPictureInPictureMode : unit -&gt; unit" Usage="activity.EnterPictureInPictureMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("enterPictureInPictureMode", "()V", "GetEnterPictureInPictureModeHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("enterPictureInPictureMode", "()V", "GetEnterPictureInPictureModeHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Puts the activity in picture-in-picture mode if possible in the current system state.</summary>
        <remarks>
          <para>Puts the activity in picture-in-picture mode if possible in the current system state. Any
            prior calls to <c>#setPictureInPictureParams(PictureInPictureParams)</c> will still apply
            when entering picture-in-picture through this call.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#enterPictureInPictureMode()" title="Reference documentation">Java documentation for <code>android.app.Activity.enterPictureInPictureMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterPictureInPictureMode">
      <MemberSignature Language="C#" Value="public virtual bool EnterPictureInPictureMode (Android.App.PictureInPictureParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnterPictureInPictureMode(class Android.App.PictureInPictureParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.EnterPictureInPictureMode(Android.App.PictureInPictureParams)" />
      <MemberSignature Language="F#" Value="abstract member EnterPictureInPictureMode : Android.App.PictureInPictureParams -&gt; bool&#xA;override this.EnterPictureInPictureMode : Android.App.PictureInPictureParams -&gt; bool" Usage="activity.EnterPictureInPictureMode params" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("enterPictureInPictureMode", "(Landroid/app/PictureInPictureParams;)Z", "GetEnterPictureInPictureMode_Landroid_app_PictureInPictureParams_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("enterPictureInPictureMode", "(Landroid/app/PictureInPictureParams;)Z", "GetEnterPictureInPictureMode_Landroid_app_PictureInPictureParams_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.App.PictureInPictureParams" />
      </Parameters>
      <Docs>
        <param name="params">non-null parameters to be combined with previously set parameters when entering
            picture-in-picture.</param>
        <summary>Puts the activity in picture-in-picture mode if possible in the current system state.</summary>
        <returns>true if the system successfully put this activity into picture-in-picture mode or was
            already in picture-in-picture mode (see <c>#isInPictureInPictureMode()</c>). If the device
            does not support picture-in-picture, return false.</returns>
        <remarks>
          <para>Puts the activity in picture-in-picture mode if possible in the current system state. The
            set parameters in <paramref>params</paramref> will be combined with the parameters from prior calls to
            <c>#setPictureInPictureParams(PictureInPictureParams)</c>.
            
            The system may disallow entering picture-in-picture in various cases, including when the
            activity is not visible, if the screen is locked or if the user has an activity pinned.</para>
          <para>By default, system calculates the dimension of picture-in-picture window based on the
            given <paramref>params</paramref>.
            See <see href="https://developer.android.com/guide/topics/ui/picture-in-picture">Picture-in-picture Support</see>
            on how to override this behavior.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#enterPictureInPictureMode(android.app.PictureInPictureParams)" title="Reference documentation">Java documentation for <code>android.app.Activity.enterPictureInPictureMode(android.app.PictureInPictureParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindViewById">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? FindViewById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FindViewById(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FindViewById(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member FindViewById : int -&gt; Android.Views.View&#xA;override this.FindViewById : int -&gt; Android.Views.View" Usage="activity.FindViewById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("findViewById", "(I)Landroid/view/View;", "GetFindViewById_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("findViewById", "(I)Landroid/view/View;", "GetFindViewById_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">the ID to search for</param>
        <summary>Finds a view that was identified by the <c>android:id</c> XML attribute
            that was processed in <c>#onCreate</c>.</summary>
        <returns>a view with given ID if found, or <c>null</c> otherwise</returns>
        <remarks>
          <para>Finds a view that was identified by the <c>android:id</c> XML attribute
            that was processed in <c>#onCreate</c>.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; In most cases -- depending on compiler support --
            the resulting view is automatically cast to the target class type. If
            the target class type is unconstrained, an explicit cast may be
            necessary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#findViewById(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.findViewById(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T? FindViewById&lt;T&gt; (int id) where T : Android.Views.View;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T FindViewById&lt;(class Android.Views.View) T&gt;(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FindViewById``1(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.FindViewById : int -&gt; 'T (requires 'T :&gt; Android.Views.View)" Usage="activity.FindViewById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Android.Views.View</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">The Type of the view to be returned (Button, ListView, etc.).</typeparam>
        <param name="id">The id of the view to find.</param>
        <summary>Finds a view that was identified by the id attribute from the XML layout resource.</summary>
        <returns>The view if found or null otherwise.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finish">
      <MemberSignature Language="C#" Value="public virtual void Finish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Finish() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.Finish" />
      <MemberSignature Language="F#" Value="abstract member Finish : unit -&gt; unit&#xA;override this.Finish : unit -&gt; unit" Usage="activity.Finish " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finish", "()V", "GetFinishHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finish", "()V", "GetFinishHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this when your activity is done and should be closed.</summary>
        <remarks>
          <para>Call this when your activity is done and should be closed.  The
            ActivityResult is propagated back to whoever launched you via
            onActivityResult().</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finish()" title="Reference documentation">Java documentation for <code>android.app.Activity.finish()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishActivity">
      <MemberSignature Language="C#" Value="public virtual void FinishActivity (int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishActivity(int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishActivity(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member FinishActivity : int -&gt; unit&#xA;override this.FinishActivity : int -&gt; unit" Usage="activity.FinishActivity requestCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishActivity", "(I)V", "GetFinishActivity_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishActivity", "(I)V", "GetFinishActivity_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="requestCode">The request code of the activity that you had
                               given to startActivityForResult().  If there are multiple
                               activities started with this request code, they
                               will all be finished.</param>
        <summary>Force finish another activity that you had previously started with
            <c>#startActivityForResult</c>.</summary>
        <remarks>
          <para>Force finish another activity that you had previously started with
            <c>#startActivityForResult</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishActivity(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.finishActivity(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void FinishActivityFromChild (Android.App.Activity child, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishActivityFromChild(class Android.App.Activity child, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishActivityFromChild(Android.App.Activity,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member FinishActivityFromChild : Android.App.Activity * int -&gt; unit&#xA;override this.FinishActivityFromChild : Android.App.Activity * int -&gt; unit" Usage="activity.FinishActivityFromChild (child, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishActivityFromChild", "(Landroid/app/Activity;I)V", "GetFinishActivityFromChild_Landroid_app_Activity_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishActivityFromChild", "(Landroid/app/Activity;I)V", "GetFinishActivityFromChild_Landroid_app_Activity_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="requestCode">Request code that had been used to start the
                               activity.</param>
        <summary>This is called when a child activity of this one calls its
            finishActivity().</summary>
        <remarks>
          <para>This is called when a child activity of this one calls its
            finishActivity().</para>
          <para>This member is deprecated. Use <c>#finishActivity(int)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishActivityFromChild(android.app.Activity,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.finishActivityFromChild(android.app.Activity, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FinishAffinity">
      <MemberSignature Language="C#" Value="public virtual void FinishAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishAffinity" />
      <MemberSignature Language="F#" Value="abstract member FinishAffinity : unit -&gt; unit&#xA;override this.FinishAffinity : unit -&gt; unit" Usage="activity.FinishAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishAffinity", "()V", "GetFinishAffinityHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishAffinity", "()V", "GetFinishAffinityHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish this activity as well as all activities immediately below it
            in the current task that have the same affinity.</summary>
        <remarks>
          <para>Finish this activity as well as all activities immediately below it
            in the current task that have the same affinity.  This is typically
            used when an application can be launched on to another task (such as
            from an ACTION_VIEW of a content type it understands) and the user
            has used the up navigation to switch out of the current task and in
            to its own task.  In this case, if the user has navigated down into
            any other activities of the second application, all of those should
            be removed from the original task as part of the task switch.</para>
          <para>Note that this finish does &lt;em&gt;not&lt;/em&gt; allow you to deliver results
            to the previous activity, and an exception will be thrown if you are trying
            to do so.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishAffinity()" title="Reference documentation">Java documentation for <code>android.app.Activity.finishAffinity()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="FinishAfterTransition">
      <MemberSignature Language="C#" Value="public virtual void FinishAfterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAfterTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishAfterTransition" />
      <MemberSignature Language="F#" Value="abstract member FinishAfterTransition : unit -&gt; unit&#xA;override this.FinishAfterTransition : unit -&gt; unit" Usage="activity.FinishAfterTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishAfterTransition", "()V", "GetFinishAfterTransitionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishAfterTransition", "()V", "GetFinishAfterTransitionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverses the Activity Scene entry Transition and triggers the calling Activity
            to reverse its exit Transition.</summary>
        <remarks>
          <para>Reverses the Activity Scene entry Transition and triggers the calling Activity
            to reverse its exit Transition. When the exit Transition completes,
            <c>#finish()</c> is called. If no entry Transition was used, finish() is called
            immediately and the Activity exit Transition is run.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishAfterTransition()" title="Reference documentation">Java documentation for <code>android.app.Activity.finishAfterTransition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishAndRemoveTask">
      <MemberSignature Language="C#" Value="public virtual void FinishAndRemoveTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAndRemoveTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishAndRemoveTask" />
      <MemberSignature Language="F#" Value="abstract member FinishAndRemoveTask : unit -&gt; unit&#xA;override this.FinishAndRemoveTask : unit -&gt; unit" Usage="activity.FinishAndRemoveTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishAndRemoveTask", "()V", "GetFinishAndRemoveTaskHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishAndRemoveTask", "()V", "GetFinishAndRemoveTaskHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this when your activity is done and should be closed and the task should be completely
            removed as a part of finishing the root activity of the task.</summary>
        <remarks>
          <para>Call this when your activity is done and should be closed and the task should be completely
            removed as a part of finishing the root activity of the task.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishAndRemoveTask()" title="Reference documentation">Java documentation for <code>android.app.Activity.finishAndRemoveTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishFromChild">
      <MemberSignature Language="C#" Value="public virtual void FinishFromChild (Android.App.Activity? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishFromChild(class Android.App.Activity child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.FinishFromChild(Android.App.Activity)" />
      <MemberSignature Language="F#" Value="abstract member FinishFromChild : Android.App.Activity -&gt; unit&#xA;override this.FinishFromChild : Android.App.Activity -&gt; unit" Usage="activity.FinishFromChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishFromChild", "(Landroid/app/Activity;)V", "GetFinishFromChild_Landroid_app_Activity_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishFromChild", "(Landroid/app/Activity;)V", "GetFinishFromChild_Landroid_app_Activity_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <summary>This is called when a child activity of this one calls its
            <c>#finish</c> method.</summary>
        <remarks>
          <para>This is called when a child activity of this one calls its
            <c>#finish</c> method.  The default implementation simply calls
            finish() on this activity (the parent), finishing the entire group.</para>
          <para>This member is deprecated. Use <c>#finish()</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#finishFromChild(android.app.Activity)" title="Reference documentation">Java documentation for <code>android.app.Activity.finishFromChild(android.app.Activity)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.Finish" />
      </Docs>
    </Member>
    <Member MemberName="FocusedStateSet">
      <MemberSignature Language="C#" Value="protected static System.Collections.Generic.IList&lt;int&gt;? FocusedStateSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;int32&gt; FocusedStateSet" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.FocusedStateSet" />
      <MemberSignature Language="F#" Value="static member FocusedStateSet : System.Collections.Generic.IList&lt;int&gt;" Usage="Android.App.Activity.FocusedStateSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FOCUSED_STATE_SET")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FOCUSED_STATE_SET")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FragmentManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.FragmentManager? FragmentManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.FragmentManager FragmentManager" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.FragmentManager" />
      <MemberSignature Language="F#" Value="member this.FragmentManager : Android.App.FragmentManager" Usage="Android.App.Activity.FragmentManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFragmentManager", "()Landroid/app/FragmentManager;", "GetGetFragmentManagerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getFragmentManager", "()Landroid/app/FragmentManager;", "GetGetFragmentManagerHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FragmentManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the FragmentManager for interacting with fragments associated
            with this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the FragmentManager for interacting with fragments associated
            with this activity.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#getSupportFragmentManager()</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getFragmentManager()" title="Reference documentation">Java documentation for <code>android.app.Activity.getFragmentManager()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="FullscreenModeRequestEnter">
      <MemberSignature Language="C#" Value="public const Android.App.FullscreenModeRequest FullscreenModeRequestEnter = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.FullscreenModeRequest FullscreenModeRequestEnter = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.App.Activity.FullscreenModeRequestEnter" />
      <MemberSignature Language="F#" Value="val mutable FullscreenModeRequestEnter : Android.App.FullscreenModeRequest" Usage="Android.App.Activity.FullscreenModeRequestEnter" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.Window.ICallback._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onPointerCaptureChanged_Z</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_I</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FULLSCREEN_MODE_REQUEST_ENTER", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FULLSCREEN_MODE_REQUEST_ENTER", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.FullscreenModeRequest enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.FullscreenModeRequest enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FullscreenModeRequest</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Request type of <c>#requestFullscreenMode(int, OutcomeReceiver)</c>, to request enter
             fullscreen mode from multi-window mode.</summary>
        <remarks>
          <para>Request type of <c>#requestFullscreenMode(int, OutcomeReceiver)</c>, to request enter
             fullscreen mode from multi-window mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#FULLSCREEN_MODE_REQUEST_ENTER" title="Reference documentation">Java documentation for <code>android.app.Activity.FULLSCREEN_MODE_REQUEST_ENTER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullscreenModeRequestExit">
      <MemberSignature Language="C#" Value="public const Android.App.FullscreenModeRequest FullscreenModeRequestExit = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.FullscreenModeRequest FullscreenModeRequestExit = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.App.Activity.FullscreenModeRequestExit" />
      <MemberSignature Language="F#" Value="val mutable FullscreenModeRequestExit : Android.App.FullscreenModeRequest" Usage="Android.App.Activity.FullscreenModeRequestExit" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.Window.ICallback._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onPointerCaptureChanged_Z</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_I</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FULLSCREEN_MODE_REQUEST_EXIT", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FULLSCREEN_MODE_REQUEST_EXIT", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.FullscreenModeRequest enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.FullscreenModeRequest enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.FullscreenModeRequest</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Request type of <c>#requestFullscreenMode(int, OutcomeReceiver)</c>, to request exiting the
             requested fullscreen mode and restore to the previous multi-window mode.</summary>
        <remarks>
          <para>Request type of <c>#requestFullscreenMode(int, OutcomeReceiver)</c>, to request exiting the
             requested fullscreen mode and restore to the previous multi-window mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#FULLSCREEN_MODE_REQUEST_EXIT" title="Reference documentation">Java documentation for <code>android.app.Activity.FULLSCREEN_MODE_REQUEST_EXIT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferences">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ISharedPreferences? GetPreferences (Android.Content.FileCreationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ISharedPreferences GetPreferences(valuetype Android.Content.FileCreationMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.GetPreferences(Android.Content.FileCreationMode)" />
      <MemberSignature Language="F#" Value="abstract member GetPreferences : Android.Content.FileCreationMode -&gt; Android.Content.ISharedPreferences&#xA;override this.GetPreferences : Android.Content.FileCreationMode -&gt; Android.Content.ISharedPreferences" Usage="activity.GetPreferences mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPreferences", "(I)Landroid/content/SharedPreferences;", "GetGetPreferences_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPreferences", "(I)Landroid/content/SharedPreferences;", "GetGetPreferences_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ISharedPreferences</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">Operating mode.  Use <c>#MODE_PRIVATE</c> for the default
                        operation.</param>
        <summary>Retrieve a <c>SharedPreferences</c> object for accessing preferences
            that are private to this activity.</summary>
        <returns>Returns the single SharedPreferences instance that can be used
                    to retrieve and modify the preference values.</returns>
        <remarks>
          <para>Retrieve a <c>SharedPreferences</c> object for accessing preferences
            that are private to this activity.  This simply calls the underlying
            <c>#getSharedPreferences(String, int)</c> method by passing in this activity's
            class name as the preferences name.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getPreferences(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.getPreferences(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HasWindowFocus">
      <MemberSignature Language="C#" Value="public virtual bool HasWindowFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWindowFocus" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.HasWindowFocus" />
      <MemberSignature Language="F#" Value="member this.HasWindowFocus : bool" Usage="Android.App.Activity.HasWindowFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("hasWindowFocus", "()Z", "GetHasWindowFocusHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("hasWindowFocus", "()Z", "GetHasWindowFocusHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this activity's &lt;em&gt;main&lt;/em&gt; window currently has window focus.</summary>
        <value>True if this activity's main window currently has window focus.</value>
        <remarks>
          <para>Returns true if this activity's &lt;em&gt;main&lt;/em&gt; window currently has window focus.
            Note that this is not the same as the view itself having focus.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#hasWindowFocus()" title="Reference documentation">Java documentation for <code>android.app.Activity.hasWindowFocus()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnWindowAttributesChanged(Android.Views.WindowManagerLayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="Immersive">
      <MemberSignature Language="C#" Value="public virtual bool Immersive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Immersive" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Immersive" />
      <MemberSignature Language="F#" Value="member this.Immersive : bool with get, set" Usage="Android.App.Activity.Immersive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isImmersive", "()Z", "GetIsImmersiveHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isImmersive", "()Z", "GetIsImmersiveHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setImmersive", "(Z)V", "GetSetImmersive_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setImmersive", "(Z)V", "GetSetImmersive_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bit indicating that this activity is "immersive" and should not be
            interrupted by notifications if possible. -or- Adjust the current immersive mode setting.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Bit indicating that this activity is "immersive" and should not be
            interrupted by notifications if possible.
            
            This value is initially set by the manifest property
            <c>android:immersive</c> but may be changed at runtime by
            <c>#setImmersive</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isImmersive()" title="Reference documentation">Java documentation for <code>android.app.Activity.isImmersive()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Adjust the current immersive mode setting.
            
            Note that changing this value will have no effect on the activity's
            <c>android.content.pm.ActivityInfo</c> structure; that is, if
            <c>android:immersive</c> is set to <c>true</c>
            in the application's manifest entry for this activity, the <c>android.content.pm.ActivityInfo#flags ActivityInfo.flags</c> member will
            always have its <c>android.content.pm.ActivityInfo#FLAG_IMMERSIVE
            FLAG_IMMERSIVE</c> bit set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setImmersive(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setImmersive(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <altmember cref="P:Android.App.Activity.Immersive" />
      </Docs>
    </Member>
    <Member MemberName="InstanceCount">
      <MemberSignature Language="C#" Value="public static long InstanceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 InstanceCount" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.InstanceCount" />
      <MemberSignature Language="F#" Value="static member InstanceCount : int64" Usage="Android.App.Activity.InstanceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getInstanceCount", "()J", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getInstanceCount", "()J", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent? Intent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Intent Intent" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Intent" />
      <MemberSignature Language="F#" Value="member this.Intent : Android.Content.Intent with get, set" Usage="Android.App.Activity.Intent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getIntent", "()Landroid/content/Intent;", "GetGetIntentHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getIntent", "()Landroid/content/Intent;", "GetGetIntentHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setIntent", "(Landroid/content/Intent;)V", "GetSetIntent_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setIntent", "(Landroid/content/Intent;)V", "GetSetIntent_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newIntent">The new Intent object to return from getIntent</param>
        <summary>Return the intent that started this activity. -or- Change the intent returned by <c>#getIntent</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return the intent that started this activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getIntent()" title="Reference documentation">Java documentation for <code>android.app.Activity.getIntent()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Change the intent returned by <c>#getIntent</c>.  This holds a
            reference to the given intent; it does not copy it.  Often used in
            conjunction with <c>#onNewIntent</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setIntent(android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.setIntent(android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Intent" />
        <altmember cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void InvalidateOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateOptionsMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.InvalidateOptionsMenu" />
      <MemberSignature Language="F#" Value="abstract member InvalidateOptionsMenu : unit -&gt; unit&#xA;override this.InvalidateOptionsMenu : unit -&gt; unit" Usage="activity.InvalidateOptionsMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invalidateOptionsMenu", "()V", "GetInvalidateOptionsMenuHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invalidateOptionsMenu", "()V", "GetInvalidateOptionsMenuHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Declare that the options menu has changed, so should be recreated.</summary>
        <remarks>
          <para>Declare that the options menu has changed, so should be recreated.
            The <c>#onCreateOptionsMenu(Menu)</c> method will be called the next
            time it needs to be displayed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#invalidateOptionsMenu()" title="Reference documentation">Java documentation for <code>android.app.Activity.invalidateOptionsMenu()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsActivityTransitionRunning">
      <MemberSignature Language="C#" Value="public virtual bool IsActivityTransitionRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActivityTransitionRunning" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsActivityTransitionRunning" />
      <MemberSignature Language="F#" Value="member this.IsActivityTransitionRunning : bool" Usage="Android.App.Activity.IsActivityTransitionRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isActivityTransitionRunning", "()Z", "GetIsActivityTransitionRunningHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isActivityTransitionRunning", "()Z", "GetIsActivityTransitionRunningHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether there are any activity transitions currently running on this
            activity.</summary>
        <value>true if a transition is currently running on this activity, false otherwise.</value>
        <remarks>
          <para>Returns whether there are any activity transitions currently running on this
            activity. A return value of <c>true</c> can mean that either an enter or
            exit transition is running, including whether the background of the activity
            is animating as a part of that transition.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isActivityTransitionRunning()" title="Reference documentation">Java documentation for <code>android.app.Activity.isActivityTransitionRunning()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsChangingConfigurations">
      <MemberSignature Language="C#" Value="public virtual bool IsChangingConfigurations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChangingConfigurations" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsChangingConfigurations" />
      <MemberSignature Language="F#" Value="member this.IsChangingConfigurations : bool" Usage="Android.App.Activity.IsChangingConfigurations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isChangingConfigurations", "()Z", "GetIsChangingConfigurationsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isChangingConfigurations", "()Z", "GetIsChangingConfigurationsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see whether this activity is in the process of being destroyed in order to be
            recreated with a new configuration.</summary>
        <value>If the activity is being torn down in order to be recreated with a new configuration,
            returns true; else returns false.</value>
        <remarks>
          <para>Check to see whether this activity is in the process of being destroyed in order to be
            recreated with a new configuration. This is often used in
            <c>#onStop</c> to determine whether the state needs to be cleaned up or will be passed
            on to the next instance of the activity via <c>#onRetainNonConfigurationInstance()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isChangingConfigurations()" title="Reference documentation">Java documentation for <code>android.app.Activity.isChangingConfigurations()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsChild">
      <MemberSignature Language="C#" Value="public bool IsChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChild" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsChild" />
      <MemberSignature Language="F#" Value="member this.IsChild : bool" Usage="Android.App.Activity.IsChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isChild", "()Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isChild", "()Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this activity embedded inside of another activity?</summary>
        <value>To be added.</value>
        <remarks>
          <para>Is this activity embedded inside of another activity?</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isChild()" title="Reference documentation">Java documentation for <code>android.app.Activity.isChild()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDestroyed">
      <MemberSignature Language="C#" Value="public virtual bool IsDestroyed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDestroyed" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsDestroyed" />
      <MemberSignature Language="F#" Value="member this.IsDestroyed : bool" Usage="Android.App.Activity.IsDestroyed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isDestroyed", "()Z", "GetIsDestroyedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isDestroyed", "()Z", "GetIsDestroyedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the final <c>#onDestroy()</c> call has been made
            on the Activity, so this instance is now dead.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns true if the final <c>#onDestroy()</c> call has been made
            on the Activity, so this instance is now dead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isDestroyed()" title="Reference documentation">Java documentation for <code>android.app.Activity.isDestroyed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="IsFinishing">
      <MemberSignature Language="C#" Value="public virtual bool IsFinishing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinishing" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsFinishing" />
      <MemberSignature Language="F#" Value="member this.IsFinishing : bool" Usage="Android.App.Activity.IsFinishing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isFinishing", "()Z", "GetIsFinishingHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isFinishing", "()Z", "GetIsFinishingHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see whether this activity is in the process of finishing,
            either because you called <c>#finish</c> on it or someone else
            has requested that it finished.</summary>
        <value>If the activity is finishing, returns true; else returns false.</value>
        <remarks>
          <para>Check to see whether this activity is in the process of finishing,
            either because you called <c>#finish</c> on it or someone else
            has requested that it finished.  This is often used in
            <c>#onPause</c> to determine whether the activity is simply pausing or
            completely finishing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isFinishing()" title="Reference documentation">Java documentation for <code>android.app.Activity.isFinishing()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.Finish" />
      </Docs>
    </Member>
    <Member MemberName="IsInMultiWindowMode">
      <MemberSignature Language="C#" Value="public virtual bool IsInMultiWindowMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInMultiWindowMode" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsInMultiWindowMode" />
      <MemberSignature Language="F#" Value="member this.IsInMultiWindowMode : bool" Usage="Android.App.Activity.IsInMultiWindowMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isInMultiWindowMode", "()Z", "GetIsInMultiWindowModeHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isInMultiWindowMode", "()Z", "GetIsInMultiWindowModeHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the activity is currently in multi-window mode.</summary>
        <value>True if the activity is in multi-window mode.</value>
        <remarks>
          <para>Returns true if the activity is currently in multi-window mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isInMultiWindowMode()" title="Reference documentation">Java documentation for <code>android.app.Activity.isInMultiWindowMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInPictureInPictureMode">
      <MemberSignature Language="C#" Value="public virtual bool IsInPictureInPictureMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInPictureInPictureMode" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsInPictureInPictureMode" />
      <MemberSignature Language="F#" Value="member this.IsInPictureInPictureMode : bool" Usage="Android.App.Activity.IsInPictureInPictureMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isInPictureInPictureMode", "()Z", "GetIsInPictureInPictureModeHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isInPictureInPictureMode", "()Z", "GetIsInPictureInPictureModeHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the activity is currently in picture-in-picture mode.</summary>
        <value>True if the activity is in picture-in-picture mode.</value>
        <remarks>
          <para>Returns true if the activity is currently in picture-in-picture mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isInPictureInPictureMode()" title="Reference documentation">Java documentation for <code>android.app.Activity.isInPictureInPictureMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLaunchedFromBubble">
      <MemberSignature Language="C#" Value="public virtual bool IsLaunchedFromBubble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLaunchedFromBubble" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsLaunchedFromBubble" />
      <MemberSignature Language="F#" Value="member this.IsLaunchedFromBubble : bool" Usage="Android.App.Activity.IsLaunchedFromBubble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLaunchedFromBubble", "()Z", "GetIsLaunchedFromBubbleHandler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLaunchedFromBubble", "()Z", "GetIsLaunchedFromBubbleHandler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this activity is launched from a bubble.</summary>
        <value>
          <c>true</c> if the activity is launched from a bubble.</value>
        <remarks>
          <para>Indicates whether this activity is launched from a bubble. A bubble is a floating shortcut
            on the screen that expands to show an activity.</para>
          <para>If your activity can be used normally or as a bubble, you might use this method to check
            if the activity is bubbled to modify any behaviour that might be different between the
            normal activity and the bubbled activity. For example, if you normally cancel the
            notification associated with the activity when you open the activity, you might not want to
            do that when you're bubbled as that would remove the bubble.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isLaunchedFromBubble()" title="Reference documentation">Java documentation for <code>android.app.Activity.isLaunchedFromBubble()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocalVoiceInteractionSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsLocalVoiceInteractionSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocalVoiceInteractionSupported" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsLocalVoiceInteractionSupported" />
      <MemberSignature Language="F#" Value="member this.IsLocalVoiceInteractionSupported : bool" Usage="Android.App.Activity.IsLocalVoiceInteractionSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLocalVoiceInteractionSupported", "()Z", "GetIsLocalVoiceInteractionSupportedHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLocalVoiceInteractionSupported", "()Z", "GetIsLocalVoiceInteractionSupportedHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether the currently enabled voice interaction service supports returning
            a voice interactor for use by the activity.</summary>
        <value>whether the current voice interaction service supports local voice interaction</value>
        <remarks>
          <para>Queries whether the currently enabled voice interaction service supports returning
            a voice interactor for use by the activity. This is valid only for the duration of the
            activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isLocalVoiceInteractionSupported()" title="Reference documentation">Java documentation for <code>android.app.Activity.isLocalVoiceInteractionSupported()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTaskRoot">
      <MemberSignature Language="C#" Value="public virtual bool IsTaskRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTaskRoot" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsTaskRoot" />
      <MemberSignature Language="F#" Value="member this.IsTaskRoot : bool" Usage="Android.App.Activity.IsTaskRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTaskRoot", "()Z", "GetIsTaskRootHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTaskRoot", "()Z", "GetIsTaskRootHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this activity is the root of a task.</summary>
        <value>True if this is the root activity, else false.</value>
        <remarks>
          <para>Return whether this activity is the root of a task.  The root is the
            first activity in a task.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isTaskRoot()" title="Reference documentation">Java documentation for <code>android.app.Activity.isTaskRoot()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsVoiceInteraction">
      <MemberSignature Language="C#" Value="public virtual bool IsVoiceInteraction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVoiceInteraction" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsVoiceInteraction" />
      <MemberSignature Language="F#" Value="member this.IsVoiceInteraction : bool" Usage="Android.App.Activity.IsVoiceInteraction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isVoiceInteraction", "()Z", "GetIsVoiceInteractionHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isVoiceInteraction", "()Z", "GetIsVoiceInteractionHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check whether this activity is running as part of a voice interaction with the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Check whether this activity is running as part of a voice interaction with the user.
            If true, it should perform its interaction with the user through the
            <c>VoiceInteractor</c> returned by <c>#getVoiceInteractor</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isVoiceInteraction()" title="Reference documentation">Java documentation for <code>android.app.Activity.isVoiceInteraction()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVoiceInteractionRoot">
      <MemberSignature Language="C#" Value="public virtual bool IsVoiceInteractionRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVoiceInteractionRoot" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.IsVoiceInteractionRoot" />
      <MemberSignature Language="F#" Value="member this.IsVoiceInteractionRoot : bool" Usage="Android.App.Activity.IsVoiceInteractionRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isVoiceInteractionRoot", "()Z", "GetIsVoiceInteractionRootHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isVoiceInteractionRoot", "()Z", "GetIsVoiceInteractionRootHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Like <c>#isVoiceInteraction</c>, but only returns <c>true</c> if this is also the root
            of a voice interaction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Like <c>#isVoiceInteraction</c>, but only returns <c>true</c> if this is also the root
            of a voice interaction.  That is, returns <c>true</c> if this activity was directly
            started by the voice interaction service as the initiation of a voice interaction.
            Otherwise, for example if it was started by another activity while under voice
            interaction, returns <c>false</c>.
            If the activity <c>android.R.styleable#AndroidManifestActivity_launchMode launchMode</c> is
            <c>singleTask</c>, it forces the activity to launch in a new task, separate from the one
            that started it. Therefore, there is no longer a relationship between them, and
            <c>#isVoiceInteractionRoot()</c> return <c>false</c> in this case.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#isVoiceInteractionRoot()" title="Reference documentation">Java documentation for <code>android.app.Activity.isVoiceInteractionRoot()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.App.Activity.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastNonConfigurationInstance">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? LastNonConfigurationInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object LastNonConfigurationInstance" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LastNonConfigurationInstance" />
      <MemberSignature Language="F#" Value="member this.LastNonConfigurationInstance : Java.Lang.Object" Usage="Android.App.Activity.LastNonConfigurationInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLastNonConfigurationInstance", "()Ljava/lang/Object;", "GetGetLastNonConfigurationInstanceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLastNonConfigurationInstance", "()Ljava/lang/Object;", "GetGetLastNonConfigurationInstanceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the non-configuration instance data that was previously
            returned by <c>#onRetainNonConfigurationInstance()</c>.</summary>
        <value>the object previously returned by <c>#onRetainNonConfigurationInstance()</c></value>
        <remarks>
          <para>Retrieve the non-configuration instance data that was previously
            returned by <c>#onRetainNonConfigurationInstance()</c>.  This will
            be available from the initial <c>#onCreate</c> and
            <c>#onStart</c> calls to the new instance, allowing you to extract
            any useful dynamic state from the previous instance.</para>
          <para>Note that the data you retrieve here should &lt;em&gt;only&lt;/em&gt; be used
            as an optimization for handling configuration changes.  You should always
            be able to handle getting a null pointer back, and an activity must
            still be able to restore itself to its previous state (through the
            normal <c>#onSaveInstanceState(Bundle)</c> mechanism) even if this
            function returns null.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; For most cases you should use the <c>Fragment</c> API
            <c>Fragment#setRetainInstance(boolean)</c> instead; this is also
            available on older platforms through the Android support libraries.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLastNonConfigurationInstance()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLastNonConfigurationInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LaunchedFromPackage">
      <MemberSignature Language="C#" Value="public virtual string? LaunchedFromPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LaunchedFromPackage" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LaunchedFromPackage" />
      <MemberSignature Language="F#" Value="member this.LaunchedFromPackage : string" Usage="Android.App.Activity.LaunchedFromPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLaunchedFromPackage", "()Ljava/lang/String;", "GetGetLaunchedFromPackageHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLaunchedFromPackage", "()Ljava/lang/String;", "GetGetLaunchedFromPackageHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the package name of the app that initially launched this activity.</summary>
        <value>the package name of the launching app or null if the current activity
            cannot access the identity of the launching app</value>
        <remarks>
          <para>Returns the package name of the app that initially launched this activity.</para>
          <para>In order to receive the launching app's package name, at least one of the following has
            to be met:
            &lt;ul&gt;
                &lt;li&gt;The app must call <c>ActivityOptions#setShareIdentityEnabled(boolean)</c> with a
                value of <c>true</c> and launch this activity with the resulting
                <c>ActivityOptions</c>.
                &lt;li&gt;The launched activity has the same uid as the launching app.
                &lt;li&gt;The launched activity is running in a package that is signed with the same key
                used to sign the platform (typically only system packages such as Settings will
                meet this requirement).
            &lt;/ul&gt;.
            These are the same requirements for <c>#getLaunchedFromUid()</c>; if any of these are
            met, then these methods can be used to obtain the uid and package name of the launching
            app. If none are met, then <c>null</c> is returned.</para>
          <para>Note, even if the above conditions are not met, the launching app's identity may
            still be available from <c>#getCallingPackage()</c> if this activity was started with
            <c>Activity#startActivityForResult</c> to allow validation of the result's recipient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLaunchedFromPackage()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLaunchedFromPackage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LaunchedFromUid">
      <MemberSignature Language="C#" Value="public virtual int LaunchedFromUid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LaunchedFromUid" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LaunchedFromUid" />
      <MemberSignature Language="F#" Value="member this.LaunchedFromUid : int" Usage="Android.App.Activity.LaunchedFromUid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLaunchedFromUid", "()I", "GetGetLaunchedFromUidHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLaunchedFromUid", "()I", "GetGetLaunchedFromUidHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the uid of the app that initially launched this activity.</summary>
        <value>the uid of the launching app or <c>Process#INVALID_UID</c> if the current
            activity cannot access the identity of the launching app</value>
        <remarks>
          <para>Returns the uid of the app that initially launched this activity.</para>
          <para>In order to receive the launching app's uid, at least one of the following has to
            be met:
            &lt;ul&gt;
                &lt;li&gt;The app must call <c>ActivityOptions#setShareIdentityEnabled(boolean)</c> with a
                value of <c>true</c> and launch this activity with the resulting <c>ActivityOptions</c>.
                &lt;li&gt;The launched activity has the same uid as the launching app.
                &lt;li&gt;The launched activity is running in a package that is signed with the same key
                used to sign the platform (typically only system packages such as Settings will
                meet this requirement).
            &lt;/ul&gt;.
            These are the same requirements for <c>#getLaunchedFromPackage()</c>; if any of these are
            met, then these methods can be used to obtain the uid and package name of the launching
            app. If none are met, then <c>Process#INVALID_UID</c> is returned.</para>
          <para>Note, even if the above conditions are not met, the launching app's identity may
            still be available from <c>#getCallingPackage()</c> if this activity was started with
            <c>Activity#startActivityForResult</c> to allow validation of the result's recipient.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLaunchedFromUid()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLaunchedFromUid()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutInflater">
      <MemberSignature Language="C#" Value="public virtual Android.Views.LayoutInflater LayoutInflater { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.LayoutInflater LayoutInflater" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LayoutInflater" />
      <MemberSignature Language="F#" Value="member this.LayoutInflater : Android.Views.LayoutInflater" Usage="Android.App.Activity.LayoutInflater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutInflater", "()Landroid/view/LayoutInflater;", "GetGetLayoutInflaterHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLayoutInflater", "()Landroid/view/LayoutInflater;", "GetGetLayoutInflaterHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutInflater</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Convenience for calling
            <c>android.view.Window#getLayoutInflater</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Convenience for calling
            <c>android.view.Window#getLayoutInflater</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLayoutInflater()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLayoutInflater()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LoaderManager">
      <MemberSignature Language="C#" Value="public virtual Android.App.LoaderManager? LoaderManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.LoaderManager LoaderManager" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LoaderManager" />
      <MemberSignature Language="F#" Value="member this.LoaderManager : Android.App.LoaderManager" Usage="Android.App.Activity.LoaderManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLoaderManager", "()Landroid/app/LoaderManager;", "GetGetLoaderManagerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLoaderManager", "()Landroid/app/LoaderManager;", "GetGetLoaderManagerHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.LoaderManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the LoaderManager for this activity, creating it if needed.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the LoaderManager for this activity, creating it if needed.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#getSupportLoaderManager()</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLoaderManager()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLoaderManager()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="LocalClassName">
      <MemberSignature Language="C#" Value="public virtual string LocalClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalClassName" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.LocalClassName" />
      <MemberSignature Language="F#" Value="member this.LocalClassName : string" Usage="Android.App.Activity.LocalClassName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLocalClassName", "()Ljava/lang/String;", "GetGetLocalClassNameHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLocalClassName", "()Ljava/lang/String;", "GetGetLocalClassNameHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns class name for this activity with the package prefix removed.</summary>
        <value>The local class name.</value>
        <remarks>
          <para>Returns class name for this activity with the package prefix removed.
            This is the default name used to read and write settings.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getLocalClassName()" title="Reference documentation">Java documentation for <code>android.app.Activity.getLocalClassName()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ManagedQuery">
      <MemberSignature Language="C#" Value="public Android.Database.ICursor? ManagedQuery (Android.Net.Uri? uri, string[]? projection, string? selection, string[]? selectionArgs, string? sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Database.ICursor ManagedQuery(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ManagedQuery(Android.Net.Uri,System.String[],System.String,System.String[],System.String)" />
      <MemberSignature Language="F#" Value="member this.ManagedQuery : Android.Net.Uri * string[] * string * string[] * string -&gt; Android.Database.ICursor" Usage="activity.ManagedQuery (uri, projection, selection, selectionArgs, sortOrder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("managedQuery", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("managedQuery", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI of the content provider to query.</param>
        <param name="projection">List of columns to return.</param>
        <param name="selection">SQL WHERE clause.</param>
        <param name="selectionArgs">The arguments to selection, if any ?s are pesent</param>
        <param name="sortOrder">SQL ORDER BY clause.</param>
        <summary>Wrapper around
            <c>ContentResolver#query(android.net.Uri , String[], String, String[], String)</c>
            that gives the resulting <c>Cursor</c> to call
            <c>#startManagingCursor</c> so that the activity will manage its
            lifecycle for you.</summary>
        <returns>The Cursor that was returned by query().</returns>
        <remarks>
          <para>Wrapper around
            <c>ContentResolver#query(android.net.Uri , String[], String, String[], String)</c>
            that gives the resulting <c>Cursor</c> to call
            <c>#startManagingCursor</c> so that the activity will manage its
            lifecycle for you.
            
            &lt;em&gt;If you are targeting <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            or later, consider instead using <c>LoaderManager</c> instead, available
            via <c>#getLoaderManager()</c>.&lt;/em&gt;</para>
          <para>&lt;strong&gt;Warning:&lt;/strong&gt; Do not call <c>Cursor#close()</c> on a cursor obtained using
            this method, because the activity will do that for you at the appropriate time. However, if
            you call <c>#stopManagingCursor</c> on a cursor from a managed query, the system &lt;em&gt;will
            not&lt;/em&gt; automatically close the cursor and, in that case, you must call
            <c>Cursor#close()</c>.</para>
          <para>This member is deprecated. Use <c>CursorLoader</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#managedQuery(android.net.Uri,%20java.lang.String[],%20java.lang.String,%20java.lang.String[],%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.app.Activity.managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Content.ContentResolver.Query(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" />
        <altmember cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="MaxNumPictureInPictureActions">
      <MemberSignature Language="C#" Value="public virtual int MaxNumPictureInPictureActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxNumPictureInPictureActions" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.MaxNumPictureInPictureActions" />
      <MemberSignature Language="F#" Value="member this.MaxNumPictureInPictureActions : int" Usage="Android.App.Activity.MaxNumPictureInPictureActions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaxNumPictureInPictureActions", "()I", "GetGetMaxNumPictureInPictureActionsHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaxNumPictureInPictureActions", "()I", "GetGetMaxNumPictureInPictureActionsHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the number of actions that will be displayed in the picture-in-picture UI when the
            user interacts with the activity currently in picture-in-picture mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the number of actions that will be displayed in the picture-in-picture UI when the
            user interacts with the activity currently in picture-in-picture mode. This number may change
            if the global configuration changes (ie. if the device is plugged into an external display),
            but will always be at least three.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getMaxNumPictureInPictureActions()" title="Reference documentation">Java documentation for <code>android.app.Activity.getMaxNumPictureInPictureActions()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaController">
      <MemberSignature Language="C#" Value="public Android.Media.Session.MediaController? MediaController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.Session.MediaController MediaController" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.MediaController" />
      <MemberSignature Language="F#" Value="member this.MediaController : Android.Media.Session.MediaController with get, set" Usage="Android.App.Activity.MediaController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMediaController", "()Landroid/media/session/MediaController;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMediaController", "()Landroid/media/session/MediaController;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setMediaController", "(Landroid/media/session/MediaController;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setMediaController", "(Landroid/media/session/MediaController;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaController</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="controller">The controller for the session which should receive
                       media keys and volume changes.</param>
        <summary>Gets the controller which should be receiving media key and volume events
            while this activity is in the foreground. -or- Sets a <c>MediaController</c> to send media keys and volume changes to.</summary>
        <value>The controller which should receive events.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the controller which should be receiving media key and volume events
            while this activity is in the foreground.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getMediaController()" title="Reference documentation">Java documentation for <code>android.app.Activity.getMediaController()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets a <c>MediaController</c> to send media keys and volume changes to.</para>
          <para>The controller will be tied to the window of this Activity. Media key and
            volume events which are received while the Activity is in the foreground
            will be forwarded to the controller and used to invoke transport controls
            or adjust the volume. This may be used instead of or in addition to
            <c>#setVolumeControlStream</c> to affect a specific session instead of a
            specific stream.</para>
          <para>It is not guaranteed that the hardware volume controls will always change
            this session's volume (for example, if a call is in progress, its
            stream's volume may be changed instead). To reset back to the default use
            null as the controller.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setMediaController(android.media.session.MediaController)" title="Reference documentation">Java documentation for <code>android.app.Activity.setMediaController(android.media.session.MediaController)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="P:Android.App.Activity.MediaController" />
      </Docs>
    </Member>
    <Member MemberName="MenuInflater">
      <MemberSignature Language="C#" Value="public virtual Android.Views.MenuInflater MenuInflater { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.MenuInflater MenuInflater" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.MenuInflater" />
      <MemberSignature Language="F#" Value="member this.MenuInflater : Android.Views.MenuInflater" Usage="Android.App.Activity.MenuInflater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMenuInflater", "()Landroid/view/MenuInflater;", "GetGetMenuInflaterHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMenuInflater", "()Landroid/view/MenuInflater;", "GetGetMenuInflaterHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.MenuInflater</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c>MenuInflater</c> with this context.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns a <c>MenuInflater</c> with this context.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getMenuInflater()" title="Reference documentation">Java documentation for <code>android.app.Activity.getMenuInflater()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MoveTaskToBack">
      <MemberSignature Language="C#" Value="public virtual bool MoveTaskToBack (bool nonRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveTaskToBack(bool nonRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.MoveTaskToBack(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member MoveTaskToBack : bool -&gt; bool&#xA;override this.MoveTaskToBack : bool -&gt; bool" Usage="activity.MoveTaskToBack nonRoot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("moveTaskToBack", "(Z)Z", "GetMoveTaskToBack_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("moveTaskToBack", "(Z)Z", "GetMoveTaskToBack_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonRoot">If false then this only works if the activity is the root
                           of a task; if true it will work for any activity in
                           a task.</param>
        <summary>Move the task containing this activity to the back of the activity
            stack.</summary>
        <returns>If the task was moved (or it was already at the
                    back) true is returned, else false.</returns>
        <remarks>
          <para>Move the task containing this activity to the back of the activity
            stack.  The activity's order within the task is unchanged.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#moveTaskToBack(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.moveTaskToBack(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUpTo">
      <MemberSignature Language="C#" Value="public virtual bool NavigateUpTo (Android.Content.Intent? upIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NavigateUpTo(class Android.Content.Intent upIntent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.NavigateUpTo(Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member NavigateUpTo : Android.Content.Intent -&gt; bool&#xA;override this.NavigateUpTo : Android.Content.Intent -&gt; bool" Usage="activity.NavigateUpTo upIntent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("navigateUpTo", "(Landroid/content/Intent;)Z", "GetNavigateUpTo_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("navigateUpTo", "(Landroid/content/Intent;)Z", "GetNavigateUpTo_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="upIntent">An intent representing the target destination for up navigation</param>
        <summary>Navigate from this activity to the activity specified by upIntent, finishing this activity
            in the process.</summary>
        <returns>true if up navigation successfully reached the activity indicated by upIntent and
                    upIntent was delivered to it. false if an instance of the indicated activity could
                    not be found and this activity was simply finished normally.</returns>
        <remarks>
          <para>Navigate from this activity to the activity specified by upIntent, finishing this activity
            in the process. If the activity indicated by upIntent already exists in the task's history,
            this activity and all others before the indicated activity in the history stack will be
            finished.</para>
          <para>If the indicated activity does not appear in the history stack, this will finish
            each activity in this task until the root activity of the task is reached, resulting in
            an "in-app home" behavior. This can be useful in apps with a complex navigation hierarchy
            when an activity may be reached by a path not passing through a canonical parent
            activity.</para>
          <para>This method should be used when performing up navigation from within the same task
            as the destination. If up navigation should cross tasks in some cases, see
            <c>#shouldUpRecreateTask(Intent)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#navigateUpTo(android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.navigateUpTo(android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUpToFromChild">
      <MemberSignature Language="C#" Value="public virtual bool NavigateUpToFromChild (Android.App.Activity? child, Android.Content.Intent? upIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NavigateUpToFromChild(class Android.App.Activity child, class Android.Content.Intent upIntent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.NavigateUpToFromChild(Android.App.Activity,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member NavigateUpToFromChild : Android.App.Activity * Android.Content.Intent -&gt; bool&#xA;override this.NavigateUpToFromChild : Android.App.Activity * Android.Content.Intent -&gt; bool" Usage="activity.NavigateUpToFromChild (child, upIntent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("navigateUpToFromChild", "(Landroid/app/Activity;Landroid/content/Intent;)Z", "GetNavigateUpToFromChild_Landroid_app_Activity_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("navigateUpToFromChild", "(Landroid/app/Activity;Landroid/content/Intent;)Z", "GetNavigateUpToFromChild_Landroid_app_Activity_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="upIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="upIntent">An intent representing the target destination for up navigation</param>
        <summary>This is called when a child activity of this one calls its
            <c>#navigateUpTo</c> method.</summary>
        <returns>true if up navigation successfully reached the activity indicated by upIntent and
                    upIntent was delivered to it. false if an instance of the indicated activity could
                    not be found and this activity was simply finished normally.</returns>
        <remarks>
          <para>This is called when a child activity of this one calls its
            <c>#navigateUpTo</c> method.  The default implementation simply calls
            navigateUpTo(upIntent) on this activity (the parent).</para>
          <para>This member is deprecated. Use <c>#navigateUpTo(Intent)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#navigateUpToFromChild(android.app.Activity,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.navigateUpToFromChild(android.app.Activity, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeFinished">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeFinished (Android.Views.ActionMode? mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeFinished(class Android.Views.ActionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnActionModeFinished(Android.Views.ActionMode)" />
      <MemberSignature Language="F#" Value="abstract member OnActionModeFinished : Android.Views.ActionMode -&gt; unit&#xA;override this.OnActionModeFinished : Android.Views.ActionMode -&gt; unit" Usage="activity.OnActionModeFinished mode" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnActionModeFinished(Android.Views.ActionMode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onActionModeFinished", "(Landroid/view/ActionMode;)V", "GetOnActionModeFinished_Landroid_view_ActionMode_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onActionModeFinished", "(Landroid/view/ActionMode;)V", "GetOnActionModeFinished_Landroid_view_ActionMode_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The action mode that just finished.</param>
        <summary>Notifies the activity that an action mode has finished.</summary>
        <remarks>
          <para>Notifies the activity that an action mode has finished.
            Activity subclasses overriding this method should call the superclass implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onActionModeFinished(android.view.ActionMode)" title="Reference documentation">Java documentation for <code>android.app.Activity.onActionModeFinished(android.view.ActionMode)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeStarted">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeStarted (Android.Views.ActionMode? mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeStarted(class Android.Views.ActionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnActionModeStarted(Android.Views.ActionMode)" />
      <MemberSignature Language="F#" Value="abstract member OnActionModeStarted : Android.Views.ActionMode -&gt; unit&#xA;override this.OnActionModeStarted : Android.Views.ActionMode -&gt; unit" Usage="activity.OnActionModeStarted mode" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnActionModeStarted(Android.Views.ActionMode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onActionModeStarted", "(Landroid/view/ActionMode;)V", "GetOnActionModeStarted_Landroid_view_ActionMode_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onActionModeStarted", "(Landroid/view/ActionMode;)V", "GetOnActionModeStarted_Landroid_view_ActionMode_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The new action mode.</param>
        <summary>Notifies the Activity that an action mode has been started.</summary>
        <remarks>
          <para>Notifies the Activity that an action mode has been started.
            Activity subclasses overriding this method should call the superclass implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onActionModeStarted(android.view.ActionMode)" title="Reference documentation">Java documentation for <code>android.app.Activity.onActionModeStarted(android.view.ActionMode)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnActivityReenter">
      <MemberSignature Language="C#" Value="public virtual void OnActivityReenter (int resultCode, Android.Content.Intent? data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityReenter(int32 resultCode, class Android.Content.Intent data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnActivityReenter(System.Int32,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member OnActivityReenter : int * Android.Content.Intent -&gt; unit&#xA;override this.OnActivityReenter : int * Android.Content.Intent -&gt; unit" Usage="activity.OnActivityReenter (resultCode, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onActivityReenter", "(ILandroid/content/Intent;)V", "GetOnActivityReenter_ILandroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onActivityReenter", "(ILandroid/content/Intent;)V", "GetOnActivityReenter_ILandroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="System.Int32" />
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="resultCode">The integer result code returned by the child activity
                              through its setResult().</param>
        <param name="data">An Intent, which can return result data to the caller
                          (various data can be attached to Intent "extras").</param>
        <summary>Called when an activity you launched with an activity transition exposes this
            Activity through a returning activity transition, giving you the resultCode
            and any additional data from it.</summary>
        <remarks>
          <para>Called when an activity you launched with an activity transition exposes this
            Activity through a returning activity transition, giving you the resultCode
            and any additional data from it. This method will only be called if the activity
            set a result code other than <c>#RESULT_CANCELED</c> and it supports activity
            transitions with <c>Window#FEATURE_ACTIVITY_TRANSITIONS</c>.</para>
          <para>The purpose of this function is to let the called Activity send a hint about
            its state so that this underlying Activity can prepare to be exposed. A call to
            this method does not guarantee that the called Activity has or will be exiting soon.
            It only indicates that it will expose this Activity's Window and it has
            some data to pass to prepare it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onActivityReenter(int,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onActivityReenter(int, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityResult">
      <MemberSignature Language="C#" Value="protected virtual void OnActivityResult (int requestCode, Android.App.Result resultCode, Android.Content.Intent? data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivityResult(int32 requestCode, valuetype Android.App.Result resultCode, class Android.Content.Intent data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member OnActivityResult : int * Android.App.Result * Android.Content.Intent -&gt; unit&#xA;override this.OnActivityResult : int * Android.App.Result * Android.Content.Intent -&gt; unit" Usage="activity.OnActivityResult (requestCode, resultCode, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onActivityResult", "(IILandroid/content/Intent;)V", "GetOnActivityResult_IILandroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onActivityResult", "(IILandroid/content/Intent;)V", "GetOnActivityResult_IILandroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="requestCode">The integer request code originally supplied to
                               startActivityForResult(), allowing you to identify who this
                               result came from.</param>
        <param name="resultCode">The integer result code returned by the child activity
                              through its setResult().</param>
        <param name="data">An Intent, which can return result data to the caller
                          (various data can be attached to Intent "extras").</param>
        <summary>Called when an activity you launched exits, giving you the requestCode
            you started it with, the resultCode it returned, and any additional
            data from it.</summary>
        <remarks>
          <para>Called when an activity you launched exits, giving you the requestCode
            you started it with, the resultCode it returned, and any additional
            data from it.  The &lt;var&gt;resultCode&lt;/var&gt; will be
            <c>#RESULT_CANCELED</c> if the activity explicitly returned that,
            didn't return any result, or crashed during its operation.</para>
          <para>An activity can never receive a result in the resumed state. You can count on
            <c>#onResume</c> being called after this method, though not necessarily immediately after.
            If the activity was resumed, it will be paused and the result will be delivered, followed
            by <c>#onResume</c>.  If the activity wasn't in the resumed state, then the result will
            be delivered, with <c>#onResume</c> called sometime later when the activity becomes active
            again.</para>
          <para>This method is never invoked if your activity sets
            <c>android.R.styleable#AndroidManifestActivity_noHistory noHistory</c> to
            <c>true</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onActivityResult(int,%20int,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onActivityResult(int, int, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
        <altmember cref="M:Android.App.Activity.CreatePendingResult(System.Int32, Android.Content.Intent, Android.Content.Intent)" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="OnAttachedToWindow">
      <MemberSignature Language="C#" Value="public virtual void OnAttachedToWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttachedToWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnAttachedToWindow" />
      <MemberSignature Language="F#" Value="abstract member OnAttachedToWindow : unit -&gt; unit&#xA;override this.OnAttachedToWindow : unit -&gt; unit" Usage="activity.OnAttachedToWindow " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnAttachedToWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the main window associated with the activity has been
            attached to the window manager.</summary>
        <remarks>
          <para>Called when the main window associated with the activity has been
            attached to the window manager.
            See <c>View#onAttachedToWindow() View.onAttachedToWindow()</c>
            for more information.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onAttachedToWindow()" title="Reference documentation">Java documentation for <code>android.app.Activity.onAttachedToWindow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.OnAttachedToWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnAttachFragment">
      <MemberSignature Language="C#" Value="public virtual void OnAttachFragment (Android.App.Fragment? fragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttachFragment(class Android.App.Fragment fragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnAttachFragment(Android.App.Fragment)" />
      <MemberSignature Language="F#" Value="abstract member OnAttachFragment : Android.App.Fragment -&gt; unit&#xA;override this.OnAttachFragment : Android.App.Fragment -&gt; unit" Usage="activity.OnAttachFragment fragment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onAttachFragment", "(Landroid/app/Fragment;)V", "GetOnAttachFragment_Landroid_app_Fragment_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onAttachFragment", "(Landroid/app/Fragment;)V", "GetOnAttachFragment_Landroid_app_Fragment_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
      </Parameters>
      <Docs>
        <param name="fragment">To be added.</param>
        <summary>Called when a Fragment is being attached to this activity, immediately
            after the call to its <c>Fragment#onAttach Fragment.onAttach()</c>
            method and before <c>Fragment#onCreate Fragment.onCreate()</c>.</summary>
        <remarks>
          <para>Called when a Fragment is being attached to this activity, immediately
            after the call to its <c>Fragment#onAttach Fragment.onAttach()</c>
            method and before <c>Fragment#onCreate Fragment.onCreate()</c>.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#onAttachFragment(androidx.fragment.app.Fragment)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onAttachFragment(android.app.Fragment)" title="Reference documentation">Java documentation for <code>android.app.Activity.onAttachFragment(android.app.Fragment)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnBackInvokedDispatcher">
      <MemberSignature Language="C#" Value="public virtual Android.Window.IOnBackInvokedDispatcher OnBackInvokedDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Window.IOnBackInvokedDispatcher OnBackInvokedDispatcher" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.OnBackInvokedDispatcher" />
      <MemberSignature Language="F#" Value="member this.OnBackInvokedDispatcher : Android.Window.IOnBackInvokedDispatcher" Usage="Android.App.Activity.OnBackInvokedDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getOnBackInvokedDispatcher", "()Landroid/window/OnBackInvokedDispatcher;", "GetGetOnBackInvokedDispatcherHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getOnBackInvokedDispatcher", "()Landroid/window/OnBackInvokedDispatcher;", "GetGetOnBackInvokedDispatcherHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Window.IOnBackInvokedDispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>OnBackInvokedDispatcher</c> instance associated with the window that this
            activity is attached to.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the <c>OnBackInvokedDispatcher</c> instance associated with the window that this
            activity is attached to.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getOnBackInvokedDispatcher()" title="Reference documentation">Java documentation for <code>android.app.Activity.getOnBackInvokedDispatcher()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackPressed">
      <MemberSignature Language="C#" Value="public virtual void OnBackPressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnBackPressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnBackPressed" />
      <MemberSignature Language="F#" Value="abstract member OnBackPressed : unit -&gt; unit&#xA;override this.OnBackPressed : unit -&gt; unit" Usage="activity.OnBackPressed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onBackPressed", "()V", "GetOnBackPressedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onBackPressed", "()V", "GetOnBackPressedHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the activity has detected the user's press of the back key.</summary>
        <remarks>
          <para>Called when the activity has detected the user's press of the back key. The default
            implementation depends on the platform version:
            
            &lt;ul&gt;
                &lt;li&gt;On platform versions prior to <c>android.os.Build.VERSION_CODES#S</c>, it
                    finishes the current activity, but you can override this to do whatever you want.
            
                &lt;li&gt;</para>
          <para>Starting with platform version <c>android.os.Build.VERSION_CODES#S</c>, for
                    activities that are the root activity of the task and also declare an
                    <c>android.content.IntentFilter</c> with <c>Intent#ACTION_MAIN</c> and
                    <c>Intent#CATEGORY_LAUNCHER</c> in the manifest, the current activity and its
                    task will be moved to the back of the activity stack instead of being finished.
                    Other activities will simply be finished.
            
                 &lt;li&gt;</para>
          <para>If you target version <c>android.os.Build.VERSION_CODES#S</c> and
                    override this method, we strongly recommend to call through to the superclass
                    implementation after you finish handling navigation within the app.
            
                 &lt;li&gt;</para>
          <para>If you target version <c>android.os.Build.VERSION_CODES#TIRAMISU</c> or later,
                     you should not use this method but register an <c>OnBackInvokedCallback</c> on an
                     <c>OnBackInvokedDispatcher</c> that you can retrieve using
                     <c>#getOnBackInvokedDispatcher()</c>. You should also set
                     <c>android:enableOnBackInvokedCallback="true"</c> in the application manifest.</para>
          <para>Alternatively, you can use
                     <c>androidx.activity.ComponentActivity#getOnBackPressedDispatcher()</c>
                     for backward compatibility.
            &lt;/ul&gt;</para>
          <para>This member is deprecated. Use <c>OnBackInvokedCallback</c> or
            <c>androidx.activity.OnBackPressedCallback</c> to handle back navigation instead.
            &lt;p&gt;
            Starting from Android 13 (API level 33), back event handling is
            moving to an ahead-of-time model and <c>Activity#onBackPressed()</c> and
            <c>KeyEvent#KEYCODE_BACK</c> should not be used to handle back events (back gesture or
            back button click). Instead, an <c>OnBackInvokedCallback</c> should be registered using
            <c>Activity#getOnBackInvokedDispatcher()</c><c>OnBackInvokedDispatcher#registerOnBackInvokedCallback(int, OnBackInvokedCallback)
            .registerOnBackInvokedCallback(priority, callback)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onBackPressed()" title="Reference documentation">Java documentation for <code>android.app.Activity.onBackPressed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OnChildTitleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildTitleChanged (Android.App.Activity? childActivity, Java.Lang.ICharSequence? title);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildTitleChanged(class Android.App.Activity childActivity, class Java.Lang.ICharSequence title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnChildTitleChanged(Android.App.Activity,Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="abstract member OnChildTitleChanged : Android.App.Activity * Java.Lang.ICharSequence -&gt; unit&#xA;override this.OnChildTitleChanged : Android.App.Activity * Java.Lang.ICharSequence -&gt; unit" Usage="activity.OnChildTitleChanged (childActivity, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onChildTitleChanged", "(Landroid/app/Activity;Ljava/lang/CharSequence;)V", "GetOnChildTitleChanged_Landroid_app_Activity_Ljava_lang_CharSequence_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onChildTitleChanged", "(Landroid/app/Activity;Ljava/lang/CharSequence;)V", "GetOnChildTitleChanged_Landroid_app_Activity_Ljava_lang_CharSequence_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childActivity" Type="Android.App.Activity" />
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="childActivity">To be added.</param>
        <param name="title">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnChildTitleChanged">
      <MemberSignature Language="C#" Value="protected void OnChildTitleChanged (Android.App.Activity? childActivity, string? title);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChildTitleChanged(class Android.App.Activity childActivity, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnChildTitleChanged(Android.App.Activity,System.String)" />
      <MemberSignature Language="F#" Value="member this.OnChildTitleChanged : Android.App.Activity * string -&gt; unit" Usage="activity.OnChildTitleChanged (childActivity, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childActivity" Type="Android.App.Activity" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childActivity">To be added.</param>
        <param name="title">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnConfigurationChanged(Android.Content.Res.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member OnConfigurationChanged : Android.Content.Res.Configuration -&gt; unit&#xA;override this.OnConfigurationChanged : Android.Content.Res.Configuration -&gt; unit" Usage="activity.OnConfigurationChanged newConfig" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks.OnConfigurationChanged(Android.Content.Res.Configuration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.</param>
        <summary>Called by the system when the device configuration changes while your
            activity is running.</summary>
        <remarks>
          <para>Called by the system when the device configuration changes while your
            activity is running.  Note that this will &lt;em&gt;only&lt;/em&gt; be called if
            you have selected configurations you would like to handle with the
            <c>android.R.attr#configChanges</c> attribute in your manifest.  If
            any configuration change occurs that is not selected to be reported
            by that attribute, then instead of reporting it the system will stop
            and restart the activity (to have it launched with the new
            configuration).</para>
          <para>At the time that this function has been called, your Resources
            object will have been updated to return resource values matching the
            new configuration.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onConfigurationChanged(android.content.res.Configuration)" title="Reference documentation">Java documentation for <code>android.app.Activity.onConfigurationChanged(android.content.res.Configuration)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="public virtual void OnContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContentChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnContentChanged" />
      <MemberSignature Language="F#" Value="abstract member OnContentChanged : unit -&gt; unit&#xA;override this.OnContentChanged : unit -&gt; unit" Usage="activity.OnContentChanged " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnContentChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onContentChanged", "()V", "GetOnContentChangedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onContentChanged", "()V", "GetOnContentChangedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This hook is called whenever the content view of the screen changes
 (due to a call to
 <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search='M:Android Views Window SetContentView(Android Views View, LayoutParams)';scope=Xamarin" title="M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)">M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)</a></format> or
 <see cref="M:Android.Views.Window.AddContentView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)" />).</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContextItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnContextItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnContextItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnContextItemSelected(Android.Views.IMenuItem)" />
      <MemberSignature Language="F#" Value="abstract member OnContextItemSelected : Android.Views.IMenuItem -&gt; bool&#xA;override this.OnContextItemSelected : Android.Views.IMenuItem -&gt; bool" Usage="activity.OnContextItemSelected item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onContextItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnContextItemSelected_Landroid_view_MenuItem_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onContextItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnContextItemSelected_Landroid_view_MenuItem_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The context menu item that was selected.</param>
        <summary>This hook is called whenever an item in a context menu is selected.</summary>
        <returns>boolean Return false to allow normal context menu processing to
                    proceed, true to consume it here.</returns>
        <remarks>
          <para>This hook is called whenever an item in a context menu is selected. The
            default implementation simply returns false to have the normal processing
            happen (calling the item's Runnable or sending a message to its Handler
            as appropriate). You can use this method for any items for which you
            would like to do processing without those other facilities.</para>
          <para>Use <c>MenuItem#getMenuInfo()</c> to get extra information set by the
            View that added this menu item.</para>
          <para>Derived classes should call through to the base class for it to perform
            the default menu handling.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onContextItemSelected(android.view.MenuItem)" title="Reference documentation">Java documentation for <code>android.app.Activity.onContextItemSelected(android.view.MenuItem)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosed">
      <MemberSignature Language="C#" Value="public virtual void OnContextMenuClosed (Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContextMenuClosed(class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnContextMenuClosed(Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosed : Android.Views.IMenu -&gt; unit&#xA;override this.OnContextMenuClosed : Android.Views.IMenu -&gt; unit" Usage="activity.OnContextMenuClosed menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onContextMenuClosed", "(Landroid/view/Menu;)V", "GetOnContextMenuClosed_Landroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onContextMenuClosed", "(Landroid/view/Menu;)V", "GetOnContextMenuClosed_Landroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu that is being closed.</param>
        <summary>This hook is called whenever the context menu is being closed (either by
            the user canceling the menu with the back/menu button, or when an item is
            selected).</summary>
        <remarks>
          <para>This hook is called whenever the context menu is being closed (either by
            the user canceling the menu with the back/menu button, or when an item is
            selected).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onContextMenuClosed(android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onContextMenuClosed(android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="protected virtual void OnCreate (Android.OS.Bundle? savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnCreate : Android.OS.Bundle -&gt; unit&#xA;override this.OnCreate : Android.OS.Bundle -&gt; unit" Usage="activity.OnCreate savedInstanceState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;)V", "GetOnCreate_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;)V", "GetOnCreate_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the activity is being re-initialized after
                previously being shut down then this Bundle contains the data it most
                recently supplied in <c>#onSaveInstanceState</c>.  &lt;b&gt;<i>Note: Otherwise it is null.</i>&lt;/b&gt;</param>
        <summary>Called when the activity is starting.</summary>
        <remarks>
          <para>Called when the activity is starting.  This is where most initialization
            should go: calling <c>#setContentView(int)</c> to inflate the
            activity's UI, using <c>#findViewById</c> to programmatically interact
            with widgets in the UI, calling
            <c>#managedQuery(android.net.Uri , String[], String, String[], String)</c> to retrieve
            cursors for data being displayed, etc.</para>
          <para>You can call <c>#finish</c> from within this function, in
            which case onDestroy() will be immediately called after <c>#onCreate</c> without any of the
            rest of the activity lifecycle (<c>#onStart</c>, <c>#onResume</c>, <c>#onPause</c>, etc)
            executing.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreate(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreate(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public virtual void OnCreate (Android.OS.Bundle? savedInstanceState, Android.OS.PersistableBundle? persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreate(Android.OS.Bundle,Android.OS.PersistableBundle)" />
      <MemberSignature Language="F#" Value="abstract member OnCreate : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit&#xA;override this.OnCreate : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit" Usage="activity.OnCreate (savedInstanceState, persistentState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">if the activity is being re-initialized after
                previously being shut down then this Bundle contains the data it most
                recently supplied in <c>#onSaveInstanceState</c>.
                &lt;b&gt;<i>Note: Otherwise it is null.</i>&lt;/b&gt;</param>
        <param name="persistentState">if the activity is being re-initialized after
                previously being shut down or powered off then this Bundle contains the data it most
                recently supplied to outPersistentState in <c>#onSaveInstanceState</c>.
                &lt;b&gt;<i>Note: Otherwise it is null.</i>&lt;/b&gt;</param>
        <summary>Same as <c>#onCreate(android.os.Bundle)</c> but called for those activities created with
            the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para>Same as <c>#onCreate(android.os.Bundle)</c> but called for those activities created with
            the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreate(android.os.Bundle,%20android.os.PersistableBundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreate(android.os.Bundle, android.os.PersistableBundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateContextMenu">
      <MemberSignature Language="C#" Value="public virtual void OnCreateContextMenu (Android.Views.IContextMenu? menu, Android.Views.View? v, Android.Views.IContextMenuContextMenuInfo? menuInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateContextMenu(class Android.Views.IContextMenu menu, class Android.Views.View v, class Android.Views.IContextMenuContextMenuInfo menuInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.IContextMenuContextMenuInfo)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateContextMenu : Android.Views.IContextMenu * Android.Views.View * Android.Views.IContextMenuContextMenuInfo -&gt; unit&#xA;override this.OnCreateContextMenu : Android.Views.IContextMenu * Android.Views.View * Android.Views.IContextMenuContextMenuInfo -&gt; unit" Usage="activity.OnCreateContextMenu (menu, v, menuInfo)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.View.IOnCreateContextMenuListener.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.IContextMenuContextMenuInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateContextMenu", "(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V", "GetOnCreateContextMenu_Landroid_view_ContextMenu_Landroid_view_View_Landroid_view_ContextMenu_ContextMenuInfo_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateContextMenu", "(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V", "GetOnCreateContextMenu_Landroid_view_ContextMenu_Landroid_view_View_Landroid_view_ContextMenu_ContextMenuInfo_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="menuInfo" Type="Android.Views.IContextMenuContextMenuInfo" />
      </Parameters>
      <Docs>
        <param name="menu">The context menu that is being built</param>
        <param name="v">The view for which the context menu is being built</param>
        <param name="menuInfo">Extra information about the item for which the
            context menu should be shown. This information will vary
            depending on the class of v.
</param>
        <summary>Called when a context menu for the <c>view</c> is about to be shown.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateContextMenu(android.view.ContextMenu,%20android.view.View,%20android.view.ContextMenuInfo)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenuInfo)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDescription">
      <MemberSignature Language="C#" Value="public string? OnCreateDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string OnCreateDescription() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateDescription" />
      <MemberSignature Language="F#" Value="member this.OnCreateDescription : unit -&gt; string" Usage="activity.OnCreateDescription " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generate a new description for this activity.</summary>
        <returns>A description of what the user is doing.  It should be short and
                    sweet (only a few words).</returns>
        <remarks>
          <para>Generate a new description for this activity.  This method is called
            before stopping the activity and can, if desired, return some textual
            description of its current state to be displayed to the user.</para>
          <para>The default implementation returns null, which will cause you to
            inherit the description from the previous activity.  If all activities
            return null, generally the label of the top activity will be used as the
            description.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateDescription()" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateDescription()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateDescriptionFormatted">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ICharSequence? OnCreateDescriptionFormatted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence OnCreateDescriptionFormatted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateDescriptionFormatted" />
      <MemberSignature Language="F#" Value="abstract member OnCreateDescriptionFormatted : unit -&gt; Java.Lang.ICharSequence&#xA;override this.OnCreateDescriptionFormatted : unit -&gt; Java.Lang.ICharSequence" Usage="activity.OnCreateDescriptionFormatted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateDescription", "()Ljava/lang/CharSequence;", "GetOnCreateDescriptionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateDescription", "()Ljava/lang/CharSequence;", "GetOnCreateDescriptionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generate a new description for this activity.</summary>
        <returns>A description of what the user is doing.  It should be short and
                    sweet (only a few words).</returns>
        <remarks>
          <para>Generate a new description for this activity.  This method is called
            before stopping the activity and can, if desired, return some textual
            description of its current state to be displayed to the user.</para>
          <para>The default implementation returns null, which will cause you to
            inherit the description from the previous activity.  If all activities
            return null, generally the label of the top activity will be used as the
            description.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateDescription()" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateDescription()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateThumbnail(Android.Graphics.Bitmap, Android.Graphics.Canvas)" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDialog">
      <MemberSignature Language="C#" Value="protected virtual Android.App.Dialog? OnCreateDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.App.Dialog OnCreateDialog(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateDialog(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateDialog : int -&gt; Android.App.Dialog&#xA;override this.OnCreateDialog : int -&gt; Android.App.Dialog" Usage="activity.OnCreateDialog id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateDialog", "(I)Landroid/app/Dialog;", "GetOnCreateDialog_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateDialog", "(I)Landroid/app/Dialog;", "GetOnCreateDialog_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>This member is deprecated.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This member is deprecated. Old no-arguments version of <c>#onCreateDialog(int, Bundle)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateDialog(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateDialog(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateDialog">
      <MemberSignature Language="C#" Value="protected virtual Android.App.Dialog? OnCreateDialog (int id, Android.OS.Bundle? args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.App.Dialog OnCreateDialog(int32 id, class Android.OS.Bundle args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateDialog(System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateDialog : int * Android.OS.Bundle -&gt; Android.App.Dialog&#xA;override this.OnCreateDialog : int * Android.OS.Bundle -&gt; Android.App.Dialog" Usage="activity.OnCreateDialog (id, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateDialog", "(ILandroid/os/Bundle;)Landroid/app/Dialog;", "GetOnCreateDialog_ILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateDialog", "(ILandroid/os/Bundle;)Landroid/app/Dialog;", "GetOnCreateDialog_ILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Dialog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the dialog.</param>
        <param name="args">The dialog arguments provided to <c>#showDialog(int, Bundle)</c>.</param>
        <summary>Callback for creating dialogs that are managed (saved and restored) for you
            by the activity.</summary>
        <returns>The dialog.  If you return null, the dialog will not be created.</returns>
        <remarks>
          <para>Callback for creating dialogs that are managed (saved and restored) for you
            by the activity.  The default implementation calls through to
            <c>#onCreateDialog(int)</c> for compatibility.
            
            &lt;em&gt;If you are targeting <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            or later, consider instead using a <c>DialogFragment</c> instead.&lt;/em&gt;</para>
          <para>If you use <c>#showDialog(int)</c>, the activity will call through to
            this method the first time, and hang onto it thereafter.  Any dialog
            that is created by this method will automatically be saved and restored
            for you, including whether it is showing.</para>
          <para>If you would like the activity to manage saving and restoring dialogs
            for you, you should override this method and handle any ids that are
            passed to <c>#showDialog</c>.</para>
          <para>If you would like an opportunity to prepare your dialog before it is shown,
            override <c>#onPrepareDialog(int, Dialog, Bundle)</c>.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateDialog(int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateDialog(int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateNavigateUpTaskStack">
      <MemberSignature Language="C#" Value="public virtual void OnCreateNavigateUpTaskStack (Android.App.TaskStackBuilder? builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreateNavigateUpTaskStack(class Android.App.TaskStackBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateNavigateUpTaskStack(Android.App.TaskStackBuilder)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateNavigateUpTaskStack : Android.App.TaskStackBuilder -&gt; unit&#xA;override this.OnCreateNavigateUpTaskStack : Android.App.TaskStackBuilder -&gt; unit" Usage="activity.OnCreateNavigateUpTaskStack builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnCreateNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnCreateNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Android.App.TaskStackBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">An empty TaskStackBuilder - the application should add intents representing
                           the desired task stack</param>
        <summary>Define the synthetic task stack that will be generated during Up navigation from
            a different task.</summary>
        <remarks>
          <para>Define the synthetic task stack that will be generated during Up navigation from
            a different task.</para>
          <para>The default implementation of this method adds the parent chain of this activity
            as specified in the manifest to the supplied <c>TaskStackBuilder</c>. Applications
            may choose to override this method to construct the desired task stack in a different
            way.</para>
          <para>This method will be invoked by the default implementation of <c>#onNavigateUp()</c>
            if <c>#shouldUpRecreateTask(Intent)</c> returns true when supplied with the intent
            returned by <c>#getParentActivityIntent()</c>.</para>
          <para>Applications that wish to supply extra Intent parameters to the parent stack defined
            by the manifest should override <c>#onPrepareNavigateUpTaskStack(TaskStackBuilder)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnCreateOptionsMenu (Android.Views.IMenu? menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreateOptionsMenu(class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateOptionsMenu : Android.Views.IMenu -&gt; bool&#xA;override this.OnCreateOptionsMenu : Android.Views.IMenu -&gt; bool" Usage="activity.OnCreateOptionsMenu menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnCreateOptionsMenu_Landroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnCreateOptionsMenu_Landroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu in which you place your items.</param>
        <summary>Initialize the contents of the Activity's standard options menu.</summary>
        <returns>You must return true for the menu to be displayed;
                    if you return false it will not be shown.</returns>
        <remarks>
          <para>Initialize the contents of the Activity's standard options menu.  You
            should place your menu items in to &lt;var&gt;menu&lt;/var&gt;.</para>
          <para>This is only called once, the first time the options menu is
            displayed.  To update the menu every time it is displayed, see
            <c>#onPrepareOptionsMenu</c>.</para>
          <para>The default implementation populates the menu with standard system
            menu items.  These are placed in the <c>Menu#CATEGORY_SYSTEM</c> group so that
            they will be correctly ordered with application-defined menu items.
            Deriving classes should always call through to the base implementation.</para>
          <para>You can safely hold on to &lt;var&gt;menu&lt;/var&gt; (and any items created
            from it), making modifications to it as desired, until the next
            time onCreateOptionsMenu() is called.</para>
          <para>When you add items to the menu, you can implement the Activity's
            <c>#onOptionsItemSelected</c> method to handle them there.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateOptionsMenu(android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateOptionsMenu(android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" />
        <altmember cref="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnCreatePanelMenu (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreatePanelMenu(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreatePanelMenu(System.Int32,Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnCreatePanelMenu : int * Android.Views.IMenu -&gt; bool&#xA;override this.OnCreatePanelMenu : int * Android.Views.IMenu -&gt; bool" Usage="activity.OnCreatePanelMenu (featureId, menu)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnCreatePanelMenu(System.Int32,Android.Views.IMenu)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreatePanelMenu", "(ILandroid/view/Menu;)Z", "GetOnCreatePanelMenu_ILandroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreatePanelMenu", "(ILandroid/view/Menu;)Z", "GetOnCreatePanelMenu_ILandroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel being created.</param>
        <param name="menu">The menu inside the panel.</param>
        <summary>Default implementation of
            <c>android.view.Window.Callback#onCreatePanelMenu</c>
            for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of
            <c>android.view.Window.Callback#onCreatePanelMenu</c>
            for activities.  This calls through to the new
            <c>#onCreateOptionsMenu</c> method for the
            <c>android.view.Window#FEATURE_OPTIONS_PANEL</c> panel,
            so that subclasses of Activity don't need to deal with feature codes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreatePanelMenu(int,%20android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreatePanelMenu(int, android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? OnCreatePanelView (int featureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreatePanelView(int32 featureId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreatePanelView(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnCreatePanelView : int -&gt; Android.Views.View&#xA;override this.OnCreatePanelView : int -&gt; Android.Views.View" Usage="activity.OnCreatePanelView featureId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnCreatePanelView(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreatePanelView", "(I)Landroid/view/View;", "GetOnCreatePanelView_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreatePanelView", "(I)Landroid/view/View;", "GetOnCreatePanelView_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">Which panel is being created.</param>
        <summary>Default implementation of
            <c>android.view.Window.Callback#onCreatePanelView</c>
            for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of
            <c>android.view.Window.Callback#onCreatePanelView</c>
            for activities. This
            simply returns null so that all panel sub-windows will have the default
            menu behavior.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreatePanelView(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreatePanelView(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateThumbnail">
      <MemberSignature Language="C#" Value="public virtual bool OnCreateThumbnail (Android.Graphics.Bitmap? outBitmap, Android.Graphics.Canvas? canvas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreateThumbnail(class Android.Graphics.Bitmap outBitmap, class Android.Graphics.Canvas canvas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateThumbnail(Android.Graphics.Bitmap,Android.Graphics.Canvas)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateThumbnail : Android.Graphics.Bitmap * Android.Graphics.Canvas -&gt; bool&#xA;override this.OnCreateThumbnail : Android.Graphics.Bitmap * Android.Graphics.Canvas -&gt; bool" Usage="activity.OnCreateThumbnail (outBitmap, canvas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateThumbnail", "(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z", "GetOnCreateThumbnail_Landroid_graphics_Bitmap_Landroid_graphics_Canvas_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateThumbnail", "(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z", "GetOnCreateThumbnail_Landroid_graphics_Bitmap_Landroid_graphics_Canvas_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outBitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
      </Parameters>
      <Docs>
        <param name="outBitmap">The bitmap to contain the thumbnail.</param>
        <param name="canvas">Can be used to render into the bitmap.</param>
        <summary>This member is deprecated.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This member is deprecated. Method doesn't do anything and will be removed in the future.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateThumbnail(android.graphics.Bitmap,%20android.graphics.Canvas)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateThumbnail(android.graphics.Bitmap, android.graphics.Canvas)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateDescriptionFormatted" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? OnCreateView (string name, Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateView(string name, class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateView(System.String,Android.Content.Context,Android.Util.IAttributeSet)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateView : string * Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.View&#xA;override this.OnCreateView : string * Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.View" Usage="activity.OnCreateView (name, context, attrs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.LayoutInflater.IFactory.OnCreateView(System.String,Android.Content.Context,Android.Util.IAttributeSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateView", "(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateView", "(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="name">Tag name to be inflated.</param>
        <param name="context">The context the view is being created in.</param>
        <param name="attrs">Inflation attributes as specified in XML file.</param>
        <summary>Standard implementation of
            <c>android.view.LayoutInflater.Factory#onCreateView</c> used when
            inflating with the LayoutInflater returned by <c>#getSystemService</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Standard implementation of
            <c>android.view.LayoutInflater.Factory#onCreateView</c> used when
            inflating with the LayoutInflater returned by <c>#getSystemService</c>.
            This implementation does nothing and is for
            pre-<c>android.os.Build.VERSION_CODES#HONEYCOMB</c> apps.  Newer apps
            should use <c>#onCreateView(View, String, Context, AttributeSet)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateView(java.lang.String,%20android.content.Context,%20android.util.AttributeSet)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.LayoutInflater.CreateView(System.String, System.String, System.String)" />
        <altmember cref="P:Android.Views.Window.LayoutInflater" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? OnCreateView (Android.Views.View? parent, string name, Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateView(class Android.Views.View parent, string name, class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnCreateView(Android.Views.View,System.String,Android.Content.Context,Android.Util.IAttributeSet)" />
      <MemberSignature Language="F#" Value="abstract member OnCreateView : Android.Views.View * string * Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.View&#xA;override this.OnCreateView : Android.Views.View * string * Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.View" Usage="activity.OnCreateView (parent, name, context, attrs)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.LayoutInflater.IFactory2.OnCreateView(Android.Views.View,System.String,Android.Content.Context,Android.Util.IAttributeSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCreateView", "(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Landroid_view_View_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCreateView", "(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;", "GetOnCreateView_Landroid_view_View_Ljava_lang_String_Landroid_content_Context_Landroid_util_AttributeSet_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="Android.Views.View" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="parent">The parent that the created view will be placed
 in; <i>note that this may be null</i>.</param>
        <param name="name">Tag name to be inflated.</param>
        <param name="context">The context the view is being created in.</param>
        <param name="attrs">Inflation attributes as specified in XML file.</param>
        <summary>Standard implementation of
            <c>android.view.LayoutInflater.Factory2#onCreateView(View, String, Context, AttributeSet)</c>
            used when inflating with the LayoutInflater returned by <c>#getSystemService</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Standard implementation of
            <c>android.view.LayoutInflater.Factory2#onCreateView(View, String, Context, AttributeSet)</c>
            used when inflating with the LayoutInflater returned by <c>#getSystemService</c>.
            This implementation handles &lt;fragment&gt; tags to embed fragments inside
            of the activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onCreateView(android.view.View,%20java.lang.String,%20android.content.Context,%20android.util.AttributeSet)" title="Reference documentation">Java documentation for <code>android.app.Activity.onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.LayoutInflater.CreateView(System.String, System.String, System.String)" />
        <altmember cref="P:Android.Views.Window.LayoutInflater" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroy">
      <MemberSignature Language="C#" Value="protected virtual void OnDestroy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDestroy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnDestroy" />
      <MemberSignature Language="F#" Value="abstract member OnDestroy : unit -&gt; unit&#xA;override this.OnDestroy : unit -&gt; unit" Usage="activity.OnDestroy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDestroy", "()V", "GetOnDestroyHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onDestroy", "()V", "GetOnDestroyHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Perform any final cleanup before an activity is destroyed.</summary>
        <remarks>
          <para>Perform any final cleanup before an activity is destroyed.  This can
            happen either because the activity is finishing (someone called
            <c>#finish</c> on it), or because the system is temporarily destroying
            this instance of the activity to save space.  You can distinguish
            between these two scenarios with the <c>#isFinishing</c> method.</para>
          <para>&lt;em&gt;Note: do not count on this method being called as a place for
            saving data! For example, if an activity is editing data in a content
            provider, those edits should be committed in either <c>#onPause</c> or
            <c>#onSaveInstanceState</c>, not here.&lt;/em&gt; This method is usually implemented to
            free resources like threads that are associated with an activity, so
            that a destroyed activity does not leave such things around while the
            rest of its application is still running.  There are situations where
            the system will simply kill the activity's hosting process without
            calling this method (or any others) in it, so it should not be used to
            do things that are intended to remain around after the process goes
            away.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onDestroy()" title="Reference documentation">Java documentation for <code>android.app.Activity.onDestroy()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnPause" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.Finish" />
        <altmember cref="P:Android.App.Activity.IsFinishing" />
      </Docs>
    </Member>
    <Member MemberName="OnDetachedFromWindow">
      <MemberSignature Language="C#" Value="public virtual void OnDetachedFromWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetachedFromWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnDetachedFromWindow" />
      <MemberSignature Language="F#" Value="abstract member OnDetachedFromWindow : unit -&gt; unit&#xA;override this.OnDetachedFromWindow : unit -&gt; unit" Usage="activity.OnDetachedFromWindow " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnDetachedFromWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the main window associated with the activity has been
            detached from the window manager.</summary>
        <remarks>
          <para>Called when the main window associated with the activity has been
            detached from the window manager.
            See <c>View#onDetachedFromWindow() View.onDetachedFromWindow()</c>
            for more information.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onDetachedFromWindow()" title="Reference documentation">Java documentation for <code>android.app.Activity.onDetachedFromWindow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <altmember cref="M:Android.Views.View.OnDetachedFromWindow" />
      </Docs>
    </Member>
    <Member MemberName="OnEnterAnimationComplete">
      <MemberSignature Language="C#" Value="public virtual void OnEnterAnimationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEnterAnimationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnEnterAnimationComplete" />
      <MemberSignature Language="F#" Value="abstract member OnEnterAnimationComplete : unit -&gt; unit&#xA;override this.OnEnterAnimationComplete : unit -&gt; unit" Usage="activity.OnEnterAnimationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onEnterAnimationComplete", "()V", "GetOnEnterAnimationCompleteHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onEnterAnimationComplete", "()V", "GetOnEnterAnimationCompleteHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activities cannot draw during the period that their windows are animating in.</summary>
        <remarks>
          <para>Activities cannot draw during the period that their windows are animating in. In order
            to know when it is safe to begin drawing they can override this method which will be
            called when the entering animation has completed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onEnterAnimationComplete()" title="Reference documentation">Java documentation for <code>android.app.Activity.onEnterAnimationComplete()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnGenericMotionEvent (Android.Views.MotionEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnGenericMotionEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnGenericMotionEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnGenericMotionEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.OnGenericMotionEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.OnGenericMotionEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetOnGenericMotionEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetOnGenericMotionEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The generic motion event being processed.</param>
        <param name="event">The generic motion event being processed.</param>
        <summary>Called when a generic motion event was not handled by any of the
            views inside of the activity.</summary>
        <returns>Return true if you have consumed the event, false if you haven't.
            The default implementation always returns false.</returns>
        <remarks>
          <para>Called when a generic motion event was not handled by any of the
            views inside of the activity.</para>
          <para>Generic motion events describe joystick movements, hover events from mouse or stylus
            devices, trackpad touches, scroll wheel movements and other motion events not handled
            by <c>#onTouchEvent(MotionEvent)</c> or <c>#onTrackballEvent(MotionEvent)</c>.
            The <c>MotionEvent#getSource() source</c> of the motion event specifies
            the class of input that was received.  Implementations of this method
            must examine the bits in the source before processing the event.</para>
          <para>Generic motion events with source class
            <c>android.view.InputDevice#SOURCE_CLASS_POINTER</c>
            are delivered to the view under the pointer.  All other generic motion events are
            delivered to the focused view.</para>
          <para>See <c>View#onGenericMotionEvent(MotionEvent)</c> for an example of how to
            handle this event.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onGenericMotionEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onGenericMotionEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="OnGetDirectActions">
      <MemberSignature Language="C#" Value="public virtual void OnGetDirectActions (Android.OS.CancellationSignal cancellationSignal, Java.Util.Functions.IConsumer callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnGetDirectActions(class Android.OS.CancellationSignal cancellationSignal, class Java.Util.Functions.IConsumer callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnGetDirectActions(Android.OS.CancellationSignal,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member OnGetDirectActions : Android.OS.CancellationSignal * Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.OnGetDirectActions : Android.OS.CancellationSignal * Java.Util.Functions.IConsumer -&gt; unit" Usage="activity.OnGetDirectActions (cancellationSignal, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onGetDirectActions", "(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V", "GetOnGetDirectActions_Landroid_os_CancellationSignal_Ljava_util_function_Consumer_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onGetDirectActions", "(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V", "GetOnGetDirectActions_Landroid_os_CancellationSignal_Ljava_util_function_Consumer_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="callback" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="cancellationSignal">A signal to cancel the operation in progress.</param>
        <param name="callback">The callback to send the action list. The actions list cannot
                contain <c>null</c> elements. You can call this on any thread.</param>
        <summary>Returns the list of direct actions supported by the app.</summary>
        <remarks>
          <para>Returns the list of direct actions supported by the app.</para>
          <para>You should return the list of actions that could be executed in the
            current context, which is in the current state of the app. If the actions
            that could be executed by the app changes you should report that via
            calling <c>VoiceInteractor#notifyDirectActionsChanged()</c>.</para>
          <para>To get the voice interactor you need to call <c>#getVoiceInteractor()</c>
            which would return non <c>null</c> only if there is an ongoing voice
            interaction session. You can also detect when the voice interactor is no
            longer valid because the voice interaction session that is backing is finished
            by calling <c>VoiceInteractor#registerOnDestroyedCallback(Executor, Runnable)</c>.</para>
          <para>This method will be called only after <c>#onStart()</c> and before <c>#onStop()</c>.</para>
          <para>You should pass to the callback the currently supported direct actions which
            cannot be <c>null</c> or contain <c>null</c> elements.</para>
          <para>You should return the action list as soon as possible to ensure the consumer,
            for example the assistant, is as responsive as possible which would improve user
            experience of your app.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onGetDirectActions(android.os.CancellationSignal,%20java.util.function.Consumer%3Cjava.util.List%3Candroid.app.DirectAction%3E%3E)" title="Reference documentation">Java documentation for <code>android.app.Activity.onGetDirectActions(android.os.CancellationSignal, java.util.function.Consumer&lt;java.util.List&lt;android.app.DirectAction&gt;&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyDown (Android.Views.Keycode keyCode, Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyDown(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool&#xA;override this.OnKeyDown : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool" Usage="activity.OnKeyDown (keyCode, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.KeyEvent.ICallback.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onKeyDown", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyDown_ILandroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onKeyDown", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyDown_ILandroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called when a key was pressed down and not handled by any of the views
            inside of the activity.</summary>
        <returns>Return <c>true</c> to prevent this event from being propagated
            further, or <c>false</c> to indicate that you have not handled
            this event and it should continue to be propagated.</returns>
        <remarks>
          <para>Called when a key was pressed down and not handled by any of the views
            inside of the activity. So, for example, key presses while the cursor
            is inside a TextView will not trigger the event (unless it is a navigation
            to another object) because TextView handles its own key presses.</para>
          <para>If the focused view didn't want this event, this method is called.</para>
          <para>The default implementation takes care of <c>KeyEvent#KEYCODE_BACK</c>
            by calling <c>#onBackPressed()</c>, though the behavior varies based
            on the application compatibility mode: for
            <c>android.os.Build.VERSION_CODES#ECLAIR</c> or later applications,
            it will set up the dispatch to call <c>#onKeyUp</c> where the action
            will be performed; for earlier applications, it will perform the
            action immediately in on-down, as those versions of the platform
            behaved.</para>
          <para>Other additional default key handling may be performed
            if configured with <c>#setDefaultKeyMode</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onKeyDown(int,%20android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onKeyDown(int, android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyUp(Android.Views.Keycode, Android.Views.KeyEvent)" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyLongPress">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyLongPress (Android.Views.Keycode keyCode, Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyLongPress(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnKeyLongPress(Android.Views.Keycode,Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnKeyLongPress : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool&#xA;override this.OnKeyLongPress : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool" Usage="activity.OnKeyLongPress (keyCode, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.KeyEvent.ICallback.OnKeyLongPress(Android.Views.Keycode,Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onKeyLongPress", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyLongPress_ILandroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onKeyLongPress", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyLongPress_ILandroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Default implementation of <c>KeyEvent.Callback#onKeyLongPress(int, KeyEvent)
            KeyEvent.Callback.onKeyLongPress()</c>: always returns false (doesn't handle
            the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of <c>KeyEvent.Callback#onKeyLongPress(int, KeyEvent)
            KeyEvent.Callback.onKeyLongPress()</c>: always returns false (doesn't handle
            the event).
            
            To receive this callback, you must return true from onKeyDown for the current
            event stream.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onKeyLongPress(int,%20android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onKeyLongPress(int, android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyMultiple">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyMultiple (Android.Views.Keycode keyCode, int repeatCount, Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyMultiple(valuetype Android.Views.Keycode keyCode, int32 repeatCount, class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnKeyMultiple(Android.Views.Keycode,System.Int32,Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnKeyMultiple : Android.Views.Keycode * int * Android.Views.KeyEvent -&gt; bool&#xA;override this.OnKeyMultiple : Android.Views.Keycode * int * Android.Views.KeyEvent -&gt; bool" Usage="activity.OnKeyMultiple (keyCode, repeatCount, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.KeyEvent.ICallback.OnKeyMultiple(Android.Views.Keycode,System.Int32,Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onKeyMultiple", "(IILandroid/view/KeyEvent;)Z", "GetOnKeyMultiple_IILandroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onKeyMultiple", "(IILandroid/view/KeyEvent;)Z", "GetOnKeyMultiple_IILandroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="repeatCount">Number of pairs as returned by event.getRepeatCount().</param>
        <param name="e">Description of the key event.</param>
        <summary>Default implementation of <c>KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)
            KeyEvent.Callback.onKeyMultiple()</c>: always returns false (doesn't handle
            the event).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of <c>KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)
            KeyEvent.Callback.onKeyMultiple()</c>: always returns false (doesn't handle
            the event).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onKeyMultiple(int,%20int,%20android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onKeyMultiple(int, int, android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyShortcut">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyShortcut (Android.Views.Keycode keyCode, Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyShortcut(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnKeyShortcut(Android.Views.Keycode,Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnKeyShortcut : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool&#xA;override this.OnKeyShortcut : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool" Usage="activity.OnKeyShortcut (keyCode, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onKeyShortcut", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyShortcut_ILandroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onKeyShortcut", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyShortcut_ILandroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">Description of the key event.</param>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="event">Description of the key event.</param>
        <summary>Called when a key shortcut event is not handled by any of the views in the Activity.</summary>
        <returns>True if the key shortcut was handled.</returns>
        <remarks>
          <para>Called when a key shortcut event is not handled by any of the views in the Activity.
            Override this method to implement global key shortcuts for the Activity.
            Key shortcuts can also be implemented by setting the
            <c>MenuItem#setShortcut(char, char) shortcut</c> property of menu items.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onKeyShortcut(int,%20android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onKeyShortcut(int, android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="public virtual bool OnKeyUp (Android.Views.Keycode keyCode, Android.Views.KeyEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnKeyUp(valuetype Android.Views.Keycode keyCode, class Android.Views.KeyEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool&#xA;override this.OnKeyUp : Android.Views.Keycode * Android.Views.KeyEvent -&gt; bool" Usage="activity.OnKeyUp (keyCode, e)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.KeyEvent.ICallback.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onKeyUp", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyUp_ILandroid_view_KeyEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onKeyUp", "(ILandroid/view/KeyEvent;)Z", "GetOnKeyUp_ILandroid_view_KeyEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyCode">The value in event.getKeyCode().</param>
        <param name="e">Description of the key event.</param>
        <summary>Called when a key was released and not handled by any of the views
            inside of the activity.</summary>
        <returns>Return <c>true</c> to prevent this event from being propagated
            further, or <c>false</c> to indicate that you have not handled
            this event and it should continue to be propagated.</returns>
        <remarks>
          <para>Called when a key was released and not handled by any of the views
            inside of the activity. So, for example, key presses while the cursor
            is inside a TextView will not trigger the event (unless it is a navigation
            to another object) because TextView handles its own key presses.</para>
          <para>The default implementation handles KEYCODE_BACK to stop the activity
            and go back.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onKeyUp(int,%20android.view.KeyEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onKeyUp(int, android.view.KeyEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyDown(Android.Views.Keycode, Android.Views.KeyEvent)" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="OnLocalVoiceInteractionStarted">
      <MemberSignature Language="C#" Value="public virtual void OnLocalVoiceInteractionStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLocalVoiceInteractionStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnLocalVoiceInteractionStarted" />
      <MemberSignature Language="F#" Value="abstract member OnLocalVoiceInteractionStarted : unit -&gt; unit&#xA;override this.OnLocalVoiceInteractionStarted : unit -&gt; unit" Usage="activity.OnLocalVoiceInteractionStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLocalVoiceInteractionStarted", "()V", "GetOnLocalVoiceInteractionStartedHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onLocalVoiceInteractionStarted", "()V", "GetOnLocalVoiceInteractionStartedHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Callback to indicate that <c>#startLocalVoiceInteraction(Bundle)</c> has resulted in a
            voice interaction session being started.</summary>
        <remarks>
          <para>Callback to indicate that <c>#startLocalVoiceInteraction(Bundle)</c> has resulted in a
            voice interaction session being started. You can now retrieve a voice interactor using
            <c>#getVoiceInteractor()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onLocalVoiceInteractionStarted()" title="Reference documentation">Java documentation for <code>android.app.Activity.onLocalVoiceInteractionStarted()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocalVoiceInteractionStopped">
      <MemberSignature Language="C#" Value="public virtual void OnLocalVoiceInteractionStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLocalVoiceInteractionStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnLocalVoiceInteractionStopped" />
      <MemberSignature Language="F#" Value="abstract member OnLocalVoiceInteractionStopped : unit -&gt; unit&#xA;override this.OnLocalVoiceInteractionStopped : unit -&gt; unit" Usage="activity.OnLocalVoiceInteractionStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLocalVoiceInteractionStopped", "()V", "GetOnLocalVoiceInteractionStoppedHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onLocalVoiceInteractionStopped", "()V", "GetOnLocalVoiceInteractionStoppedHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Callback to indicate that the local voice interaction has stopped either
            because it was requested through a call to <c>#stopLocalVoiceInteraction()</c>
            or because it was canceled by the user.</summary>
        <remarks>
          <para>Callback to indicate that the local voice interaction has stopped either
            because it was requested through a call to <c>#stopLocalVoiceInteraction()</c>
            or because it was canceled by the user. The previously acquired <c>VoiceInteractor</c>
            is no longer valid after this.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onLocalVoiceInteractionStopped()" title="Reference documentation">Java documentation for <code>android.app.Activity.onLocalVoiceInteractionStopped()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnLowMemory" />
      <MemberSignature Language="F#" Value="abstract member OnLowMemory : unit -&gt; unit&#xA;override this.OnLowMemory : unit -&gt; unit" Usage="activity.OnLowMemory " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks.OnLowMemory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuItemSelected (int featureId, Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuItemSelected(int32 featureId, class Android.Views.IMenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnMenuItemSelected(System.Int32,Android.Views.IMenuItem)" />
      <MemberSignature Language="F#" Value="abstract member OnMenuItemSelected : int * Android.Views.IMenuItem -&gt; bool&#xA;override this.OnMenuItemSelected : int * Android.Views.IMenuItem -&gt; bool" Usage="activity.OnMenuItemSelected (featureId, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnMenuItemSelected(System.Int32,Android.Views.IMenuItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onMenuItemSelected", "(ILandroid/view/MenuItem;)Z", "GetOnMenuItemSelected_ILandroid_view_MenuItem_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onMenuItemSelected", "(ILandroid/view/MenuItem;)Z", "GetOnMenuItemSelected_ILandroid_view_MenuItem_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="item">The menu item that was selected.</param>
        <summary>Default implementation of
            <c>android.view.Window.Callback#onMenuItemSelected</c>
            for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of
            <c>android.view.Window.Callback#onMenuItemSelected</c>
            for activities.  This calls through to the new
            <c>#onOptionsItemSelected</c> method for the
            <c>android.view.Window#FEATURE_OPTIONS_PANEL</c>
            panel, so that subclasses of
            Activity don't need to deal with feature codes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onMenuItemSelected(int,%20android.view.MenuItem)" title="Reference documentation">Java documentation for <code>android.app.Activity.onMenuItemSelected(int, android.view.MenuItem)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuOpened">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuOpened (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuOpened(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnMenuOpened(System.Int32,Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnMenuOpened : int * Android.Views.IMenu -&gt; bool&#xA;override this.OnMenuOpened : int * Android.Views.IMenu -&gt; bool" Usage="activity.OnMenuOpened (featureId, menu)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnMenuOpened(System.Int32,Android.Views.IMenu)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onMenuOpened", "(ILandroid/view/Menu;)Z", "GetOnMenuOpened_ILandroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onMenuOpened", "(ILandroid/view/Menu;)Z", "GetOnMenuOpened_ILandroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="menu">The menu that is opened.</param>
        <summary>To be added</summary>
        <returns>The default implementation returns true.</returns>
        <remarks>
          <para>To be added</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onMenuOpened(int,%20android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onMenuOpened(int, android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnMultiWindowModeChanged">
      <MemberSignature Language="C#" Value="public virtual void OnMultiWindowModeChanged (bool isInMultiWindowMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnMultiWindowModeChanged(bool isInMultiWindowMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnMultiWindowModeChanged(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnMultiWindowModeChanged : bool -&gt; unit&#xA;override this.OnMultiWindowModeChanged : bool -&gt; unit" Usage="activity.OnMultiWindowModeChanged isInMultiWindowMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onMultiWindowModeChanged", "(Z)V", "GetOnMultiWindowModeChanged_ZHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onMultiWindowModeChanged", "(Z)V", "GetOnMultiWindowModeChanged_ZHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isInMultiWindowMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isInMultiWindowMode">True if the activity is in multi-window mode.</param>
        <summary>Called by the system when the activity changes from fullscreen mode to multi-window mode and
            visa-versa.</summary>
        <remarks>
          <para>Called by the system when the activity changes from fullscreen mode to multi-window mode and
            visa-versa.</para>
          <para>This member is deprecated. Use <c>#onMultiWindowModeChanged(boolean, Configuration)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onMultiWindowModeChanged(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.onMultiWindowModeChanged(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMultiWindowModeChanged">
      <MemberSignature Language="C#" Value="public virtual void OnMultiWindowModeChanged (bool isInMultiWindowMode, Android.Content.Res.Configuration? newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnMultiWindowModeChanged(bool isInMultiWindowMode, class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnMultiWindowModeChanged(System.Boolean,Android.Content.Res.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member OnMultiWindowModeChanged : bool * Android.Content.Res.Configuration -&gt; unit&#xA;override this.OnMultiWindowModeChanged : bool * Android.Content.Res.Configuration -&gt; unit" Usage="activity.OnMultiWindowModeChanged (isInMultiWindowMode, newConfig)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onMultiWindowModeChanged", "(ZLandroid/content/res/Configuration;)V", "GetOnMultiWindowModeChanged_ZLandroid_content_res_Configuration_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onMultiWindowModeChanged", "(ZLandroid/content/res/Configuration;)V", "GetOnMultiWindowModeChanged_ZLandroid_content_res_Configuration_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isInMultiWindowMode" Type="System.Boolean" />
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="isInMultiWindowMode">True if the activity is in multi-window mode.</param>
        <param name="newConfig">The new configuration of the activity with the state
                             <paramref>isInMultiWindowMode</paramref>.</param>
        <summary>Called by the system when the activity changes from fullscreen mode to multi-window mode and
            visa-versa.</summary>
        <remarks>
          <para>Called by the system when the activity changes from fullscreen mode to multi-window mode and
            visa-versa. This method provides the same configuration that will be sent in the following
            <c>#onConfigurationChanged(Configuration)</c> call after the activity enters this mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onMultiWindowModeChanged(boolean,%20android.content.res.Configuration)" title="Reference documentation">Java documentation for <code>android.app.Activity.onMultiWindowModeChanged(boolean, android.content.res.Configuration)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNavigateUp">
      <MemberSignature Language="C#" Value="public virtual bool OnNavigateUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNavigateUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnNavigateUp" />
      <MemberSignature Language="F#" Value="abstract member OnNavigateUp : unit -&gt; bool&#xA;override this.OnNavigateUp : unit -&gt; bool" Usage="activity.OnNavigateUp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNavigateUp", "()Z", "GetOnNavigateUpHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNavigateUp", "()Z", "GetOnNavigateUpHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called whenever the user chooses to navigate Up within your application's
            activity hierarchy from the action bar.</summary>
        <returns>true if Up navigation completed successfully and this Activity was finished,
                    false otherwise.</returns>
        <remarks>
          <para>This method is called whenever the user chooses to navigate Up within your application's
            activity hierarchy from the action bar.</para>
          <para>If the attribute <c>android.R.attr#parentActivityName parentActivityName</c>
            was specified in the manifest for this activity or an activity-alias to it,
            default Up navigation will be handled automatically. If any activity
            along the parent chain requires extra Intent arguments, the Activity subclass
            should override the method <c>#onPrepareNavigateUpTaskStack(TaskStackBuilder)</c>
            to supply those arguments.</para>
          <para>See <see href="https://developer.android.com/guide/components/tasks-and-back-stack.html">Tasks and Back Stack</see>
            from the developer guide and <see href="https://developer.android.com/design/patterns/navigation.html">Navigation</see>
            from the design guide for more information about navigating within your app.</para>
          <para>See the <c>TaskStackBuilder</c> class and the Activity methods
            <c>#getParentActivityIntent()</c>, <c>#shouldUpRecreateTask(Intent)</c>, and
            <c>#navigateUpTo(Intent)</c> for help implementing custom Up navigation.
            The AppNavigation sample application in the Android SDK is also available for reference.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onNavigateUp()" title="Reference documentation">Java documentation for <code>android.app.Activity.onNavigateUp()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigateUpFromChild">
      <MemberSignature Language="C#" Value="public virtual bool OnNavigateUpFromChild (Android.App.Activity? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNavigateUpFromChild(class Android.App.Activity child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnNavigateUpFromChild(Android.App.Activity)" />
      <MemberSignature Language="F#" Value="abstract member OnNavigateUpFromChild : Android.App.Activity -&gt; bool&#xA;override this.OnNavigateUpFromChild : Android.App.Activity -&gt; bool" Usage="activity.OnNavigateUpFromChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNavigateUpFromChild", "(Landroid/app/Activity;)Z", "GetOnNavigateUpFromChild_Landroid_app_Activity_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNavigateUpFromChild", "(Landroid/app/Activity;)Z", "GetOnNavigateUpFromChild_Landroid_app_Activity_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <summary>This is called when a child activity of this one attempts to navigate up.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This is called when a child activity of this one attempts to navigate up.
            The default implementation simply calls onNavigateUp() on this activity (the parent).</para>
          <para>This member is deprecated. Use <c>#onNavigateUp()</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onNavigateUpFromChild(android.app.Activity)" title="Reference documentation">Java documentation for <code>android.app.Activity.onNavigateUpFromChild(android.app.Activity)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnNewIntent">
      <MemberSignature Language="C#" Value="protected virtual void OnNewIntent (Android.Content.Intent? intent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNewIntent(class Android.Content.Intent intent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member OnNewIntent : Android.Content.Intent -&gt; unit&#xA;override this.OnNewIntent : Android.Content.Intent -&gt; unit" Usage="activity.OnNewIntent intent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNewIntent", "(Landroid/content/Intent;)V", "GetOnNewIntent_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNewIntent", "(Landroid/content/Intent;)V", "GetOnNewIntent_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The new intent that was started for the activity.</param>
        <summary>This is called for activities that set launchMode to "singleTop" in
            their package, or if a client used the <c>Intent#FLAG_ACTIVITY_SINGLE_TOP</c>
            flag when calling <c>#startActivity</c>.</summary>
        <remarks>
          <para>This is called for activities that set launchMode to "singleTop" in
            their package, or if a client used the <c>Intent#FLAG_ACTIVITY_SINGLE_TOP</c>
            flag when calling <c>#startActivity</c>.  In either case, when the
            activity is re-launched while at the top of the activity stack instead
            of a new instance of the activity being started, onNewIntent() will be
            called on the existing instance with the Intent that was used to
            re-launch it.</para>
          <para>An activity can never receive a new intent in the resumed state. You can count on
            <c>#onResume</c> being called after this method, though not necessarily immediately after
            the completion this callback. If the activity was resumed, it will be paused and new intent
            will be delivered, followed by <c>#onResume</c>. If the activity wasn't in the resumed
            state, then new intent can be delivered immediately, with <c>#onResume()</c> called
            sometime later when activity becomes active again.</para>
          <para>Note that <c>#getIntent</c> still returns the original Intent.  You
            can use <c>#setIntent</c> to update it to this new Intent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onNewIntent(android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onNewIntent(android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.Intent" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnOptionsItemSelected (Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnOptionsItemSelected(class Android.Views.IMenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" />
      <MemberSignature Language="F#" Value="abstract member OnOptionsItemSelected : Android.Views.IMenuItem -&gt; bool&#xA;override this.OnOptionsItemSelected : Android.Views.IMenuItem -&gt; bool" Usage="activity.OnOptionsItemSelected item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onOptionsItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnOptionsItemSelected_Landroid_view_MenuItem_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onOptionsItemSelected", "(Landroid/view/MenuItem;)Z", "GetOnOptionsItemSelected_Landroid_view_MenuItem_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="item">The menu item that was selected.</param>
        <summary>This hook is called whenever an item in your options menu is selected.</summary>
        <returns>boolean Return false to allow normal menu processing to
                    proceed, true to consume it here.</returns>
        <remarks>
          <para>This hook is called whenever an item in your options menu is selected.
            The default implementation simply returns false to have the normal
            processing happen (calling the item's Runnable or sending a message to
            its Handler as appropriate).  You can use this method for any items
            for which you would like to do processing without those other
            facilities.</para>
          <para>Derived classes should call through to the base class for it to
            perform the default menu handling.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onOptionsItemSelected(android.view.MenuItem)" title="Reference documentation">Java documentation for <code>android.app.Activity.onOptionsItemSelected(android.view.MenuItem)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" />
      </Docs>
    </Member>
    <Member MemberName="OnOptionsMenuClosed">
      <MemberSignature Language="C#" Value="public virtual void OnOptionsMenuClosed (Android.Views.IMenu? menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnOptionsMenuClosed(class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnOptionsMenuClosed(Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnOptionsMenuClosed : Android.Views.IMenu -&gt; unit&#xA;override this.OnOptionsMenuClosed : Android.Views.IMenu -&gt; unit" Usage="activity.OnOptionsMenuClosed menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onOptionsMenuClosed", "(Landroid/view/Menu;)V", "GetOnOptionsMenuClosed_Landroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onOptionsMenuClosed", "(Landroid/view/Menu;)V", "GetOnOptionsMenuClosed_Landroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
                        onCreateOptionsMenu().</param>
        <summary>This hook is called whenever the options menu is being closed (either by the user canceling
            the menu with the back/menu button, or when an item is selected).</summary>
        <remarks>
          <para>This hook is called whenever the options menu is being closed (either by the user canceling
            the menu with the back/menu button, or when an item is selected).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onOptionsMenuClosed(android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onOptionsMenuClosed(android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPanelClosed">
      <MemberSignature Language="C#" Value="public virtual void OnPanelClosed (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPanelClosed(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPanelClosed(System.Int32,Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnPanelClosed : int * Android.Views.IMenu -&gt; unit&#xA;override this.OnPanelClosed : int * Android.Views.IMenu -&gt; unit" Usage="activity.OnPanelClosed (featureId, menu)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnPanelClosed(System.Int32,Android.Views.IMenu)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPanelClosed", "(ILandroid/view/Menu;)V", "GetOnPanelClosed_ILandroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPanelClosed", "(ILandroid/view/Menu;)V", "GetOnPanelClosed_ILandroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
            being displayed in the panel.
</param>
        <summary>Default implementation of
            <c>android.view.Window.Callback#onPanelClosed(int, Menu)</c> for
            activities.</summary>
        <remarks>
          <para>Default implementation of
            <c>android.view.Window.Callback#onPanelClosed(int, Menu)</c> for
            activities. This calls through to <c>#onOptionsMenuClosed(Menu)</c>
            method for the <c>android.view.Window#FEATURE_OPTIONS_PANEL</c> panel,
            so that subclasses of Activity don't need to deal with feature codes.
            For context menus (<c>Window#FEATURE_CONTEXT_MENU</c>), the
            <c>#onContextMenuClosed(Menu)</c> will be called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPanelClosed(int,%20android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPanelClosed(int, android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPause" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="activity.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPause", "()V", "GetOnPauseHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPause", "()V", "GetOnPauseHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called as part of the activity lifecycle when the user no longer actively interacts with the
            activity, but it is still visible on screen.</summary>
        <remarks>
          <para>Called as part of the activity lifecycle when the user no longer actively interacts with the
            activity, but it is still visible on screen. The counterpart to <c>#onResume</c>.</para>
          <para>When activity B is launched in front of activity A, this callback will
            be invoked on A.  B will not be created until A's <c>#onPause</c> returns,
            so be sure to not do anything lengthy here.</para>
          <para>This callback is mostly used for saving any persistent state the
            activity is editing, to present a "edit in place" model to the user and
            making sure nothing is lost if there are not enough resources to start
            the new activity without first killing this one.  This is also a good
            place to stop things that consume a noticeable amount of CPU in order to
            make the switch to the next activity as fast as possible.</para>
          <para>On platform versions prior to <c>android.os.Build.VERSION_CODES#Q</c> this is also a good
            place to try to close exclusive-access devices or to release access to singleton resources.
            Starting with <c>android.os.Build.VERSION_CODES#Q</c> there can be multiple resumed
            activities in the system at the same time, so <c>#onTopResumedActivityChanged(boolean)</c>
            should be used for that purpose instead.</para>
          <para>If an activity is launched on top, after receiving this call you will usually receive a
            following call to <c>#onStop</c> (after the next activity has been resumed and displayed
            above). However in some cases there will be a direct call back to <c>#onResume</c> without
            going through the stopped state. An activity can also rest in paused state in some cases when
            in multi-window mode, still visible to user.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPause()" title="Reference documentation">Java documentation for <code>android.app.Activity.onPause()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPerformDirectAction">
      <MemberSignature Language="C#" Value="public virtual void OnPerformDirectAction (string actionId, Android.OS.Bundle arguments, Android.OS.CancellationSignal cancellationSignal, Java.Util.Functions.IConsumer resultListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPerformDirectAction(string actionId, class Android.OS.Bundle arguments, class Android.OS.CancellationSignal cancellationSignal, class Java.Util.Functions.IConsumer resultListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPerformDirectAction(System.String,Android.OS.Bundle,Android.OS.CancellationSignal,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member OnPerformDirectAction : string * Android.OS.Bundle * Android.OS.CancellationSignal * Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.OnPerformDirectAction : string * Android.OS.Bundle * Android.OS.CancellationSignal * Java.Util.Functions.IConsumer -&gt; unit" Usage="activity.OnPerformDirectAction (actionId, arguments, cancellationSignal, resultListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPerformDirectAction", "(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V", "GetOnPerformDirectAction_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Ljava_util_function_Consumer_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPerformDirectAction", "(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V", "GetOnPerformDirectAction_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Ljava_util_function_Consumer_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionId" Type="System.String" />
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
        <Parameter Name="resultListener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="actionId">The ID for the action you previously reported via
                <c>#onGetDirectActions(CancellationSignal, Consumer)</c>.</param>
        <param name="arguments">Any additional arguments provided by the caller that are
                specific to the given action.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress.</param>
        <param name="resultListener">The callback to provide the result back to the caller.
                You can call this on any thread. The result bundle is action specific.</param>
        <summary>This is called to perform an action previously defined by the app.</summary>
        <remarks>
          <para>This is called to perform an action previously defined by the app.
            Apps also have access to <c>#getVoiceInteractor()</c> to follow up on the action.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPerformDirectAction(java.lang.String,%20android.os.Bundle,%20android.os.CancellationSignal,%20java.util.function.Consumer%3Candroid.os.Bundle%3E)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPerformDirectAction(java.lang.String, android.os.Bundle, android.os.CancellationSignal, java.util.function.Consumer&lt;android.os.Bundle&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPictureInPictureModeChanged">
      <MemberSignature Language="C#" Value="public virtual void OnPictureInPictureModeChanged (bool isInPictureInPictureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPictureInPictureModeChanged(bool isInPictureInPictureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPictureInPictureModeChanged(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnPictureInPictureModeChanged : bool -&gt; unit&#xA;override this.OnPictureInPictureModeChanged : bool -&gt; unit" Usage="activity.OnPictureInPictureModeChanged isInPictureInPictureMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPictureInPictureModeChanged", "(Z)V", "GetOnPictureInPictureModeChanged_ZHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPictureInPictureModeChanged", "(Z)V", "GetOnPictureInPictureModeChanged_ZHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isInPictureInPictureMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isInPictureInPictureMode">True if the activity is in picture-in-picture mode.</param>
        <summary>Called by the system when the activity changes to and from picture-in-picture mode.</summary>
        <remarks>
          <para>Called by the system when the activity changes to and from picture-in-picture mode.</para>
          <para>This member is deprecated. Use <c>#onPictureInPictureModeChanged(boolean, Configuration)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPictureInPictureModeChanged(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPictureInPictureModeChanged(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPictureInPictureModeChanged">
      <MemberSignature Language="C#" Value="public virtual void OnPictureInPictureModeChanged (bool isInPictureInPictureMode, Android.Content.Res.Configuration? newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPictureInPictureModeChanged(bool isInPictureInPictureMode, class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPictureInPictureModeChanged(System.Boolean,Android.Content.Res.Configuration)" />
      <MemberSignature Language="F#" Value="abstract member OnPictureInPictureModeChanged : bool * Android.Content.Res.Configuration -&gt; unit&#xA;override this.OnPictureInPictureModeChanged : bool * Android.Content.Res.Configuration -&gt; unit" Usage="activity.OnPictureInPictureModeChanged (isInPictureInPictureMode, newConfig)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPictureInPictureModeChanged", "(ZLandroid/content/res/Configuration;)V", "GetOnPictureInPictureModeChanged_ZLandroid_content_res_Configuration_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPictureInPictureModeChanged", "(ZLandroid/content/res/Configuration;)V", "GetOnPictureInPictureModeChanged_ZLandroid_content_res_Configuration_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isInPictureInPictureMode" Type="System.Boolean" />
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="isInPictureInPictureMode">True if the activity is in picture-in-picture mode.</param>
        <param name="newConfig">The new configuration of the activity with the state
                             <paramref>isInPictureInPictureMode</paramref>.</param>
        <summary>Called by the system when the activity changes to and from picture-in-picture mode.</summary>
        <remarks>
          <para>Called by the system when the activity changes to and from picture-in-picture mode. This
            method provides the same configuration that will be sent in the following
            <c>#onConfigurationChanged(Configuration)</c> call after the activity enters this mode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPictureInPictureModeChanged(boolean,%20android.content.res.Configuration)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPictureInPictureModeChanged(boolean, android.content.res.Configuration)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPictureInPictureRequested">
      <MemberSignature Language="C#" Value="public virtual bool OnPictureInPictureRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPictureInPictureRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPictureInPictureRequested" />
      <MemberSignature Language="F#" Value="abstract member OnPictureInPictureRequested : unit -&gt; bool&#xA;override this.OnPictureInPictureRequested : unit -&gt; bool" Usage="activity.OnPictureInPictureRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPictureInPictureRequested", "()Z", "GetOnPictureInPictureRequestedHandler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPictureInPictureRequested", "()Z", "GetOnPictureInPictureRequestedHandler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called by the system in various cases where picture in picture mode should be
            entered if supported.</summary>
        <returns>
          <c>true</c> if the activity received this callback regardless of if it acts on it
            or not. If <c>false</c>, the framework will assume the app hasn't been updated to leverage
            this callback and will in turn send a legacy callback of <c>#onUserLeaveHint()</c> for the
            app to enter picture-in-picture mode.</returns>
        <remarks>
          <para>This method is called by the system in various cases where picture in picture mode should be
            entered if supported.</para>
          <para>It is up to the app developer to choose whether to call
            <c>#enterPictureInPictureMode(PictureInPictureParams)</c> at this time. For example, the
            system will call this method when the activity is being put into the background, so the app
            developer might want to switch an activity into PIP mode instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPictureInPictureRequested()" title="Reference documentation">Java documentation for <code>android.app.Activity.onPictureInPictureRequested()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPictureInPictureUiStateChanged">
      <MemberSignature Language="C#" Value="public virtual void OnPictureInPictureUiStateChanged (Android.App.PictureInPictureUiState pipState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPictureInPictureUiStateChanged(class Android.App.PictureInPictureUiState pipState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPictureInPictureUiStateChanged(Android.App.PictureInPictureUiState)" />
      <MemberSignature Language="F#" Value="abstract member OnPictureInPictureUiStateChanged : Android.App.PictureInPictureUiState -&gt; unit&#xA;override this.OnPictureInPictureUiStateChanged : Android.App.PictureInPictureUiState -&gt; unit" Usage="activity.OnPictureInPictureUiStateChanged pipState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPictureInPictureUiStateChanged", "(Landroid/app/PictureInPictureUiState;)V", "GetOnPictureInPictureUiStateChanged_Landroid_app_PictureInPictureUiState_Handler", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPictureInPictureUiStateChanged", "(Landroid/app/PictureInPictureUiState;)V", "GetOnPictureInPictureUiStateChanged_Landroid_app_PictureInPictureUiState_Handler", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipState" Type="Android.App.PictureInPictureUiState" />
      </Parameters>
      <Docs>
        <param name="pipState">the new Picture-in-Picture state.</param>
        <summary>Called by the system when the activity is in PiP and has state changes.</summary>
        <remarks>
          <para>Called by the system when the activity is in PiP and has state changes.
            
            Compare to <c>#onPictureInPictureModeChanged(boolean, Configuration)</c>, which is only
            called when PiP mode changes (meaning, enters or exits PiP), this can be called at any time
            while the activity is in PiP mode. Therefore, all invocation can only happen after
            <c>#onPictureInPictureModeChanged(boolean, Configuration)</c> is called with true, and
            before <c>#onPictureInPictureModeChanged(boolean, Configuration)</c> is called with false.
            You would not need to worry about cases where this is called and the activity is not in
            Picture-In-Picture mode. For managing cases where the activity enters/exits
            Picture-in-Picture (e.g. resources clean-up on exit), use
            <c>#onPictureInPictureModeChanged(boolean, Configuration)</c>.
            
            The default state is everything declared in <c>PictureInPictureUiState</c> is false, such as
            <c>PictureInPictureUiState#isStashed()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPostCreate">
      <MemberSignature Language="C#" Value="protected virtual void OnPostCreate (Android.OS.Bundle? savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostCreate(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnPostCreate : Android.OS.Bundle -&gt; unit&#xA;override this.OnPostCreate : Android.OS.Bundle -&gt; unit" Usage="activity.OnPostCreate savedInstanceState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">If the activity is being re-initialized after
                previously being shut down then this Bundle contains the data it most
                recently supplied in <c>#onSaveInstanceState</c>.  &lt;b&gt;<i>Note: Otherwise it is null.</i>&lt;/b&gt;</param>
        <summary>Called when activity start-up is complete (after <c>#onStart</c>
            and <c>#onRestoreInstanceState</c> have been called).</summary>
        <remarks>
          <para>Called when activity start-up is complete (after <c>#onStart</c>
            and <c>#onRestoreInstanceState</c> have been called).  Applications will
            generally not implement this method; it is intended for system
            classes to do final initialization after application code has run.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPostCreate(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPostCreate(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnPostCreate">
      <MemberSignature Language="C#" Value="public virtual void OnPostCreate (Android.OS.Bundle? savedInstanceState, Android.OS.PersistableBundle? persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPostCreate(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle,Android.OS.PersistableBundle)" />
      <MemberSignature Language="F#" Value="abstract member OnPostCreate : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit&#xA;override this.OnPostCreate : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit" Usage="activity.OnPostCreate (savedInstanceState, persistentState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPostCreate", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnPostCreate_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">The data most recently supplied in <c>#onSaveInstanceState</c></param>
        <param name="persistentState">The data caming from the PersistableBundle first
            saved in <c>#onSaveInstanceState(Bundle, PersistableBundle)</c>.</param>
        <summary>This is the same as <c>#onPostCreate(Bundle)</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para>This is the same as <c>#onPostCreate(Bundle)</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPostCreate(android.os.Bundle,%20android.os.PersistableBundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPostCreate(android.os.Bundle, android.os.PersistableBundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnPostResume">
      <MemberSignature Language="C#" Value="protected virtual void OnPostResume ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostResume() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPostResume" />
      <MemberSignature Language="F#" Value="abstract member OnPostResume : unit -&gt; unit&#xA;override this.OnPostResume : unit -&gt; unit" Usage="activity.OnPostResume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPostResume", "()V", "GetOnPostResumeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPostResume", "()V", "GetOnPostResumeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when activity resume is complete (after <c>#onResume</c> has
            been called).</summary>
        <remarks>
          <para>Called when activity resume is complete (after <c>#onResume</c> has
            been called). Applications will generally not implement this method;
            it is intended for system classes to do final setup after application
            resume code has run.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPostResume()" title="Reference documentation">Java documentation for <code>android.app.Activity.onPostResume()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareDialog">
      <MemberSignature Language="C#" Value="protected virtual void OnPrepareDialog (int id, Android.App.Dialog? dialog);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrepareDialog(int32 id, class Android.App.Dialog dialog) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog)" />
      <MemberSignature Language="F#" Value="abstract member OnPrepareDialog : int * Android.App.Dialog -&gt; unit&#xA;override this.OnPrepareDialog : int * Android.App.Dialog -&gt; unit" Usage="activity.OnPrepareDialog (id, dialog)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="dialog" Type="Android.App.Dialog" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <param name="dialog">To be added.</param>
        <summary>This member is deprecated.</summary>
        <remarks>
          <para>This member is deprecated. Old no-arguments version of
            <c>#onPrepareDialog(int, Dialog, Bundle)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPrepareDialog(int,%20android.app.Dialog)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPrepareDialog(int, android.app.Dialog)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareDialog">
      <MemberSignature Language="C#" Value="protected virtual void OnPrepareDialog (int id, Android.App.Dialog? dialog, Android.OS.Bundle? args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrepareDialog(int32 id, class Android.App.Dialog dialog, class Android.OS.Bundle args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPrepareDialog(System.Int32,Android.App.Dialog,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnPrepareDialog : int * Android.App.Dialog * Android.OS.Bundle -&gt; unit&#xA;override this.OnPrepareDialog : int * Android.App.Dialog * Android.OS.Bundle -&gt; unit" Usage="activity.OnPrepareDialog (id, dialog, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;Landroid/os/Bundle;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPrepareDialog", "(ILandroid/app/Dialog;Landroid/os/Bundle;)V", "GetOnPrepareDialog_ILandroid_app_Dialog_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="dialog" Type="Android.App.Dialog" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <param name="dialog">The dialog.</param>
        <param name="args">The dialog arguments provided to <c>#showDialog(int, Bundle)</c>.</param>
        <summary>Provides an opportunity to prepare a managed dialog before it is being
            shown.</summary>
        <remarks>
          <para>Provides an opportunity to prepare a managed dialog before it is being
            shown.  The default implementation calls through to
            <c>#onPrepareDialog(int, Dialog)</c> for compatibility.</para>
          <para>Override this if you need to update a managed dialog based on the state
            of the application each time it is shown. For example, a time picker
            dialog might want to be updated with the current time. You should call
            through to the superclass's implementation. The default implementation
            will set this Activity as the owner activity on the Dialog.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPrepareDialog(int,%20android.app.Dialog,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPrepareDialog(int, android.app.Dialog, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareNavigateUpTaskStack">
      <MemberSignature Language="C#" Value="public virtual void OnPrepareNavigateUpTaskStack (Android.App.TaskStackBuilder? builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPrepareNavigateUpTaskStack(class Android.App.TaskStackBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPrepareNavigateUpTaskStack(Android.App.TaskStackBuilder)" />
      <MemberSignature Language="F#" Value="abstract member OnPrepareNavigateUpTaskStack : Android.App.TaskStackBuilder -&gt; unit&#xA;override this.OnPrepareNavigateUpTaskStack : Android.App.TaskStackBuilder -&gt; unit" Usage="activity.OnPrepareNavigateUpTaskStack builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPrepareNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnPrepareNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPrepareNavigateUpTaskStack", "(Landroid/app/TaskStackBuilder;)V", "GetOnPrepareNavigateUpTaskStack_Landroid_app_TaskStackBuilder_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Android.App.TaskStackBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">A TaskStackBuilder that has been populated with Intents by
                           onCreateNavigateUpTaskStack.</param>
        <summary>Prepare the synthetic task stack that will be generated during Up navigation
            from a different task.</summary>
        <remarks>
          <para>Prepare the synthetic task stack that will be generated during Up navigation
            from a different task.</para>
          <para>This method receives the <c>TaskStackBuilder</c> with the constructed series of
            Intents as generated by <c>#onCreateNavigateUpTaskStack(TaskStackBuilder)</c>.
            If any extra data should be added to these intents before launching the new task,
            the application should override this method and add that data here.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnPrepareOptionsMenu (Android.Views.IMenu? menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPrepareOptionsMenu(class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnPrepareOptionsMenu : Android.Views.IMenu -&gt; bool&#xA;override this.OnPrepareOptionsMenu : Android.Views.IMenu -&gt; bool" Usage="activity.OnPrepareOptionsMenu menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPrepareOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnPrepareOptionsMenu_Landroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPrepareOptionsMenu", "(Landroid/view/Menu;)Z", "GetOnPrepareOptionsMenu_Landroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The options menu as last shown or first initialized by
                        onCreateOptionsMenu().</param>
        <summary>Prepare the Screen's standard options menu to be displayed.</summary>
        <returns>You must return true for the menu to be displayed;
                    if you return false it will not be shown.</returns>
        <remarks>
          <para>Prepare the Screen's standard options menu to be displayed.  This is
            called right before the menu is shown, every time it is shown.  You can
            use this method to efficiently enable/disable items or otherwise
            dynamically modify the contents.</para>
          <para>The default implementation updates the system menu items based on the
            activity's state.  Deriving classes should always call through to the
            base class implementation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPrepareOptionsMenu(android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPrepareOptionsMenu(android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreparePanel">
      <MemberSignature Language="C#" Value="public virtual bool OnPreparePanel (int featureId, Android.Views.View? view, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPreparePanel(int32 featureId, class Android.Views.View view, class Android.Views.IMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnPreparePanel(System.Int32,Android.Views.View,Android.Views.IMenu)" />
      <MemberSignature Language="F#" Value="abstract member OnPreparePanel : int * Android.Views.View * Android.Views.IMenu -&gt; bool&#xA;override this.OnPreparePanel : int * Android.Views.View * Android.Views.IMenu -&gt; bool" Usage="activity.OnPreparePanel (featureId, view, menu)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnPreparePanel(System.Int32,Android.Views.View,Android.Views.IMenu)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onPreparePanel", "(ILandroid/view/View;Landroid/view/Menu;)Z", "GetOnPreparePanel_ILandroid_view_View_Landroid_view_Menu_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onPreparePanel", "(ILandroid/view/View;Landroid/view/Menu;)Z", "GetOnPreparePanel_ILandroid_view_View_Landroid_view_Menu_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="view">The View that was returned by onCreatePanelView().</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
             being displayed in the panel.</param>
        <summary>Default implementation of
            <c>android.view.Window.Callback#onPreparePanel</c>
            for activities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Default implementation of
            <c>android.view.Window.Callback#onPreparePanel</c>
            for activities.  This
            calls through to the new <c>#onPrepareOptionsMenu</c> method for the
            <c>android.view.Window#FEATURE_OPTIONS_PANEL</c>
            panel, so that subclasses of
            Activity don't need to deal with feature codes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onPreparePanel(int,%20android.view.View,%20android.view.Menu)" title="Reference documentation">Java documentation for <code>android.app.Activity.onPreparePanel(int, android.view.View, android.view.Menu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnProvideAssistContent">
      <MemberSignature Language="C#" Value="public virtual void OnProvideAssistContent (Android.App.Assist.AssistContent? outContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnProvideAssistContent(class Android.App.Assist.AssistContent outContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnProvideAssistContent(Android.App.Assist.AssistContent)" />
      <MemberSignature Language="F#" Value="abstract member OnProvideAssistContent : Android.App.Assist.AssistContent -&gt; unit&#xA;override this.OnProvideAssistContent : Android.App.Assist.AssistContent -&gt; unit" Usage="activity.OnProvideAssistContent outContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onProvideAssistContent", "(Landroid/app/assist/AssistContent;)V", "GetOnProvideAssistContent_Landroid_app_assist_AssistContent_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onProvideAssistContent", "(Landroid/app/assist/AssistContent;)V", "GetOnProvideAssistContent_Landroid_app_assist_AssistContent_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outContent" Type="Android.App.Assist.AssistContent" />
      </Parameters>
      <Docs>
        <param name="outContent">The assist content to return.</param>
        <summary>This is called when the user is requesting an assist, to provide references
            to content related to the current activity.</summary>
        <remarks>
          <para>This is called when the user is requesting an assist, to provide references
            to content related to the current activity.  Before being called, the
            <c>outContent</c> Intent is filled with the base Intent of the activity (the Intent
            returned by <c>#getIntent()</c>).  The Intent's extras are stripped of any types
            that are not valid for <c>PersistableBundle</c> or non-framework Parcelables, and
            the flags <c>Intent#FLAG_GRANT_WRITE_URI_PERMISSION</c> and
            <c>Intent#FLAG_GRANT_PERSISTABLE_URI_PERMISSION</c> are cleared from the Intent.</para>
          <para>Custom implementation may adjust the content intent to better reflect the top-level
            context of the activity, and fill in its ClipData with additional content of
            interest that the user is currently viewing.  For example, an image gallery application
            that has launched in to an activity allowing the user to swipe through pictures should
            modify the intent to reference the current image they are looking it; such an
            application when showing a list of pictures should add a ClipData that has
            references to all of the pictures currently visible on screen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onProvideAssistContent(android.app.assist.AssistContent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onProvideAssistContent(android.app.assist.AssistContent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProvideAssistData">
      <MemberSignature Language="C#" Value="public virtual void OnProvideAssistData (Android.OS.Bundle? data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnProvideAssistData(class Android.OS.Bundle data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnProvideAssistData(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnProvideAssistData : Android.OS.Bundle -&gt; unit&#xA;override this.OnProvideAssistData : Android.OS.Bundle -&gt; unit" Usage="activity.OnProvideAssistData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onProvideAssistData", "(Landroid/os/Bundle;)V", "GetOnProvideAssistData_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onProvideAssistData", "(Landroid/os/Bundle;)V", "GetOnProvideAssistData_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>This is called when the user is requesting an assist, to build a full
            <c>Intent#ACTION_ASSIST</c> Intent with all of the context of the current
            application.</summary>
        <remarks>
          <para>This is called when the user is requesting an assist, to build a full
            <c>Intent#ACTION_ASSIST</c> Intent with all of the context of the current
            application.  You can override this method to place into the bundle anything
            you would like to appear in the <c>Intent#EXTRA_ASSIST_CONTEXT</c> part
            of the assist Intent.</para>
          <para>This function will be called after any global assist callbacks that had
            been registered with <c>Application#registerOnProvideAssistDataListener
            Application.registerOnProvideAssistDataListener</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onProvideAssistData(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onProvideAssistData(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="OnProvideKeyboardShortcuts">
      <MemberSignature Language="C#" Value="public virtual void OnProvideKeyboardShortcuts (System.Collections.Generic.IList&lt;Android.Views.KeyboardShortcutGroup&gt;? data, Android.Views.IMenu? menu, int deviceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnProvideKeyboardShortcuts(class System.Collections.Generic.IList`1&lt;class Android.Views.KeyboardShortcutGroup&gt; data, class Android.Views.IMenu menu, int32 deviceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnProvideKeyboardShortcuts(System.Collections.Generic.IList{Android.Views.KeyboardShortcutGroup},Android.Views.IMenu,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnProvideKeyboardShortcuts : System.Collections.Generic.IList&lt;Android.Views.KeyboardShortcutGroup&gt; * Android.Views.IMenu * int -&gt; unit&#xA;override this.OnProvideKeyboardShortcuts : System.Collections.Generic.IList&lt;Android.Views.KeyboardShortcutGroup&gt; * Android.Views.IMenu * int -&gt; unit" Usage="activity.OnProvideKeyboardShortcuts (data, menu, deviceId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnProvideKeyboardShortcuts(System.Collections.Generic.IList{Android.Views.KeyboardShortcutGroup},Android.Views.IMenu,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onProvideKeyboardShortcuts", "(Ljava/util/List;Landroid/view/Menu;I)V", "GetOnProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_IHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onProvideKeyboardShortcuts", "(Ljava/util/List;Landroid/view/Menu;I)V", "GetOnProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_IHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;Android.Views.KeyboardShortcutGroup&gt;" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
        <Parameter Name="deviceId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="menu">To be added.</param>
        <param name="deviceId">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProvideReferrer">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri? OnProvideReferrer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri OnProvideReferrer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnProvideReferrer" />
      <MemberSignature Language="F#" Value="abstract member OnProvideReferrer : unit -&gt; Android.Net.Uri&#xA;override this.OnProvideReferrer : unit -&gt; Android.Net.Uri" Usage="activity.OnProvideReferrer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onProvideReferrer", "()Landroid/net/Uri;", "GetOnProvideReferrerHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onProvideReferrer", "()Landroid/net/Uri;", "GetOnProvideReferrerHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Override to generate the desired referrer for the content currently being shown
            by the app.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Override to generate the desired referrer for the content currently being shown
            by the app.  The default implementation returns null, meaning the referrer will simply
            be the android-app: of the package name of this activity.  Return a non-null Uri to
            have that supplied as the <c>Intent#EXTRA_REFERRER</c> of any activities started from it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onProvideReferrer()" title="Reference documentation">Java documentation for <code>android.app.Activity.onProvideReferrer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRequestPermissionsResult">
      <MemberSignature Language="C#" Value="public virtual void OnRequestPermissionsResult (int requestCode, string[] permissions, Android.Content.PM.Permission[] grantResults);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRequestPermissionsResult(int32 requestCode, string[] permissions, valuetype Android.Content.PM.Permission[] grantResults) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnRequestPermissionsResult(System.Int32,System.String[],Android.Content.PM.Permission[])" />
      <MemberSignature Language="F#" Value="abstract member OnRequestPermissionsResult : int * string[] * Android.Content.PM.Permission[] -&gt; unit&#xA;override this.OnRequestPermissionsResult : int * string[] * Android.Content.PM.Permission[] -&gt; unit" Usage="activity.OnRequestPermissionsResult (requestCode, permissions, grantResults)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRequestPermissionsResult", "(I[Ljava/lang/String;[I)V", "GetOnRequestPermissionsResult_IarrayLjava_lang_String_arrayIHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onRequestPermissionsResult", "(I[Ljava/lang/String;[I)V", "GetOnRequestPermissionsResult_IarrayLjava_lang_String_arrayIHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="grantResults" Type="Android.Content.PM.Permission[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="requestCode">The request code passed in <c>#requestPermissions(String[], int)</c>.</param>
        <param name="permissions">The requested permissions. Never null.</param>
        <param name="grantResults">The grant results for the corresponding permissions
                which is either <c>android.content.pm.PackageManager#PERMISSION_GRANTED</c>
                or <c>android.content.pm.PackageManager#PERMISSION_DENIED</c>. Never null.</param>
        <summary>Callback for the result from requesting permissions.</summary>
        <remarks>
          <para>Callback for the result from requesting permissions. This method
            is invoked for every call on <c>#requestPermissions(String[], int)</c>.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; It is possible that the permissions request interaction
            with the user is interrupted. In this case you will receive empty permissions
            and results arrays which should be treated as a cancellation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onRequestPermissionsResult(int,%20java.lang.String[],%20int[])" title="Reference documentation">Java documentation for <code>android.app.Activity.onRequestPermissionsResult(int, java.lang.String[], int[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRestart">
      <MemberSignature Language="C#" Value="protected virtual void OnRestart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRestart() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnRestart" />
      <MemberSignature Language="F#" Value="abstract member OnRestart : unit -&gt; unit&#xA;override this.OnRestart : unit -&gt; unit" Usage="activity.OnRestart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRestart", "()V", "GetOnRestartHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onRestart", "()V", "GetOnRestartHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c>#onStop</c> when the current activity is being
            re-displayed to the user (the user has navigated back to it).</summary>
        <remarks>
          <para>Called after <c>#onStop</c> when the current activity is being
            re-displayed to the user (the user has navigated back to it).  It will
            be followed by <c>#onStart</c> and then <c>#onResume</c>.</para>
          <para>For activities that are using raw <c>Cursor</c> objects (instead of
            creating them through
            <c>#managedQuery(android.net.Uri , String[], String, String[], String)</c>,
            this is usually the place
            where the cursor should be requeried (because you had deactivated it in
            <c>#onStop</c>.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onRestart()" title="Reference documentation">Java documentation for <code>android.app.Activity.onRestart()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.OnStart" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnRestoreInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void OnRestoreInstanceState (Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRestoreInstanceState(class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnRestoreInstanceState : Android.OS.Bundle -&gt; unit&#xA;override this.OnRestoreInstanceState : Android.OS.Bundle -&gt; unit" Usage="activity.OnRestoreInstanceState savedInstanceState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">the data most recently supplied in <c>#onSaveInstanceState</c>.</param>
        <summary>This method is called after <c>#onStart</c> when the activity is
            being re-initialized from a previously saved state, given here in
            &lt;var&gt;savedInstanceState&lt;/var&gt;.</summary>
        <remarks>
          <para>This method is called after <c>#onStart</c> when the activity is
            being re-initialized from a previously saved state, given here in
            &lt;var&gt;savedInstanceState&lt;/var&gt;.  Most implementations will simply use <c>#onCreate</c>
            to restore their state, but it is sometimes convenient to do it here
            after all of the initialization has been done or to allow subclasses to
            decide whether to use your default implementation.  The default
            implementation of this method performs a restore of any view state that
            had previously been frozen by <c>#onSaveInstanceState</c>.</para>
          <para>This method is called between <c>#onStart</c> and
            <c>#onPostCreate</c>. This method is called only when recreating
            an activity; the method isn't invoked if <c>#onStart</c> is called for
            any other reason.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onRestoreInstanceState(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onRestoreInstanceState(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnRestoreInstanceState">
      <MemberSignature Language="C#" Value="public virtual void OnRestoreInstanceState (Android.OS.Bundle? savedInstanceState, Android.OS.PersistableBundle? persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnRestoreInstanceState(class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle,Android.OS.PersistableBundle)" />
      <MemberSignature Language="F#" Value="abstract member OnRestoreInstanceState : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit&#xA;override this.OnRestoreInstanceState : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit" Usage="activity.OnRestoreInstanceState (savedInstanceState, persistentState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onRestoreInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnRestoreInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="savedInstanceState">the data most recently supplied in <c>#onSaveInstanceState</c>
                or null.</param>
        <param name="persistentState">the data most recently supplied in <c>#onSaveInstanceState</c>
                or null.</param>
        <summary>This is the same as <c>#onRestoreInstanceState(Bundle)</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para>This is the same as <c>#onRestoreInstanceState(Bundle)</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>. The <c>android.os.PersistableBundle</c> passed
            came from the restored PersistableBundle first
            saved in <c>#onSaveInstanceState(Bundle, PersistableBundle)</c>.</para>
          <para>This method is called between <c>#onStart</c> and
            <c>#onPostCreate</c>.</para>
          <para>If this method is called <c>#onRestoreInstanceState(Bundle)</c> will not be called.</para>
          <para>At least one of <c>savedInstanceState</c> or <c>persistentState</c> will not be null.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onRestoreInstanceState(android.os.Bundle,%20android.os.PersistableBundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onRestoreInstanceState(android.os.Bundle, android.os.PersistableBundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="OnResume">
      <MemberSignature Language="C#" Value="protected virtual void OnResume ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResume() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnResume" />
      <MemberSignature Language="F#" Value="abstract member OnResume : unit -&gt; unit&#xA;override this.OnResume : unit -&gt; unit" Usage="activity.OnResume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onResume", "()V", "GetOnResumeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onResume", "()V", "GetOnResumeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c>#onRestoreInstanceState</c>, <c>#onRestart</c>, or <c>#onPause</c>.</summary>
        <remarks>
          <para>Called after <c>#onRestoreInstanceState</c>, <c>#onRestart</c>, or <c>#onPause</c>. This
            is usually a hint for your activity to start interacting with the user, which is a good
            indicator that the activity became active and ready to receive input. This sometimes could
            also be a transit state toward another resting state. For instance, an activity may be
            relaunched to <c>#onPause</c> due to configuration changes and the activity was visible,
            but wasn’t the top-most activity of an activity task. <c>#onResume</c> is guaranteed to be
            called before <c>#onPause</c> in this case which honors the activity lifecycle policy and
            the activity eventually rests in <c>#onPause</c>.</para>
          <para>On platform versions prior to <c>android.os.Build.VERSION_CODES#Q</c> this is also a good
            place to try to open exclusive-access devices or to get access to singleton resources.
            Starting  with <c>android.os.Build.VERSION_CODES#Q</c> there can be multiple resumed
            activities in the system simultaneously, so <c>#onTopResumedActivityChanged(boolean)</c>
            should be used for that purpose instead.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onResume()" title="Reference documentation">Java documentation for <code>android.app.Activity.onResume()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestart" />
        <altmember cref="M:Android.App.Activity.OnPostResume" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnRetainNonConfigurationInstance">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? OnRetainNonConfigurationInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object OnRetainNonConfigurationInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnRetainNonConfigurationInstance" />
      <MemberSignature Language="F#" Value="abstract member OnRetainNonConfigurationInstance : unit -&gt; Java.Lang.Object&#xA;override this.OnRetainNonConfigurationInstance : unit -&gt; Java.Lang.Object" Usage="activity.OnRetainNonConfigurationInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRetainNonConfigurationInstance", "()Ljava/lang/Object;", "GetOnRetainNonConfigurationInstanceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onRetainNonConfigurationInstance", "()Ljava/lang/Object;", "GetOnRetainNonConfigurationInstanceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system, as part of destroying an
            activity due to a configuration change, when it is known that a new
            instance will immediately be created for the new configuration.</summary>
        <returns>any Object holding the desired state to propagate to the
                    next activity instance</returns>
        <remarks>
          <para>Called by the system, as part of destroying an
            activity due to a configuration change, when it is known that a new
            instance will immediately be created for the new configuration.  You
            can return any object you like here, including the activity instance
            itself, which can later be retrieved by calling
            <c>#getLastNonConfigurationInstance()</c> in the new activity
            instance.
            
            &lt;em&gt;If you are targeting <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            or later, consider instead using a <c>Fragment</c> with
            <c>Fragment#setRetainInstance(boolean)
            Fragment.setRetainInstance(boolean</c>.&lt;/em&gt;</para>
          <para>This function is called purely as an optimization, and you must
            not rely on it being called.  When it is called, a number of guarantees
            will be made to help optimize configuration switching:
            &lt;ul&gt;
            &lt;li&gt; The function will be called between <c>#onStop</c> and
            <c>#onDestroy</c>.
            &lt;li&gt; A new instance of the activity will &lt;em&gt;always&lt;/em&gt; be immediately
            created after this one's <c>#onDestroy()</c> is called.  In particular,
            &lt;em&gt;no&lt;/em&gt; messages will be dispatched during this time (when the returned
            object does not have an activity to be associated with).
            &lt;li&gt; The object you return here will &lt;em&gt;always&lt;/em&gt; be available from
            the <c>#getLastNonConfigurationInstance()</c> method of the following
            activity instance as described there.
            &lt;/ul&gt;</para>
          <para>These guarantees are designed so that an activity can use this API
            to propagate extensive state from the old to new activity instance, from
            loaded bitmaps, to network connections, to evenly actively running
            threads.  Note that you should &lt;em&gt;not&lt;/em&gt; propagate any data that
            may change based on the configuration, including any data loaded from
            resources such as strings, layouts, or drawables.</para>
          <para>The guarantee of no message handling during the switch to the next
            activity simplifies use with active objects.  For example if your retained
            state is an <c>android.os.AsyncTask</c> you are guaranteed that its
            call back functions (like <c>android.os.AsyncTask#onPostExecute</c>) will
            not be called from the call here until you execute the next instance's
            <c>#onCreate(Bundle)</c>.  (Note however that there is of course no such
            guarantee for <c>android.os.AsyncTask#doInBackground</c> since that is
            running in a separate thread.)</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; For most cases you should use the <c>Fragment</c> API
            <c>Fragment#setRetainInstance(boolean)</c> instead; this is also
            available on older platforms through the Android support libraries.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onRetainNonConfigurationInstance()" title="Reference documentation">Java documentation for <code>android.app.Activity.onRetainNonConfigurationInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="protected virtual void OnSaveInstanceState (Android.OS.Bundle outState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSaveInstanceState(class Android.OS.Bundle outState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnSaveInstanceState : Android.OS.Bundle -&gt; unit&#xA;override this.OnSaveInstanceState : Android.OS.Bundle -&gt; unit" Usage="activity.OnSaveInstanceState outState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="outState">Bundle in which to place your saved state.</param>
        <summary>Called to retrieve per-instance state from an activity before being killed
            so that the state can be restored in <c>#onCreate</c> or
            <c>#onRestoreInstanceState</c> (the <c>Bundle</c> populated by this method
            will be passed to both).</summary>
        <remarks>
          <para>Called to retrieve per-instance state from an activity before being killed
            so that the state can be restored in <c>#onCreate</c> or
            <c>#onRestoreInstanceState</c> (the <c>Bundle</c> populated by this method
            will be passed to both).</para>
          <para>This method is called before an activity may be killed so that when it
            comes back some time in the future it can restore its state.  For example,
            if activity B is launched in front of activity A, and at some point activity
            A is killed to reclaim resources, activity A will have a chance to save the
            current state of its user interface via this method so that when the user
            returns to activity A, the state of the user interface can be restored
            via <c>#onCreate</c> or <c>#onRestoreInstanceState</c>.</para>
          <para>Do not confuse this method with activity lifecycle callbacks such as <c>#onPause</c>,
            which is always called when the user no longer actively interacts with an activity, or
            <c>#onStop</c> which is called when activity becomes invisible. One example of when
            <c>#onPause</c> and <c>#onStop</c> is called and not this method is when a user navigates
            back from activity B to activity A: there is no need to call <c>#onSaveInstanceState</c>
            on B because that particular instance will never be restored,
            so the system avoids calling it.  An example when <c>#onPause</c> is called and
            not <c>#onSaveInstanceState</c> is when activity B is launched in front of activity A:
            the system may avoid calling <c>#onSaveInstanceState</c> on activity A if it isn't
            killed during the lifetime of B since the state of the user interface of
            A will stay intact.</para>
          <para>The default implementation takes care of most of the UI per-instance
            state for you by calling <c>android.view.View#onSaveInstanceState()</c> on each
            view in the hierarchy that has an id, and by saving the id of the currently
            focused view (all of which is restored by the default implementation of
            <c>#onRestoreInstanceState</c>).  If you override this method to save additional
            information not captured by each individual view, you will likely want to
            call through to the default implementation, otherwise be prepared to save
            all of the state of each view yourself.</para>
          <para>If called, this method will occur after <c>#onStop</c> for applications
            targeting platforms starting with <c>android.os.Build.VERSION_CODES#P</c>.
            For applications targeting earlier platform versions this method will occur
            before <c>#onStop</c> and there are no guarantees about whether it will
            occur before or after <c>#onPause</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onSaveInstanceState(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onSaveInstanceState(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnSaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual void OnSaveInstanceState (Android.OS.Bundle outState, Android.OS.PersistableBundle outPersistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSaveInstanceState(class Android.OS.Bundle outState, class Android.OS.PersistableBundle outPersistentState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle,Android.OS.PersistableBundle)" />
      <MemberSignature Language="F#" Value="abstract member OnSaveInstanceState : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit&#xA;override this.OnSaveInstanceState : Android.OS.Bundle * Android.OS.PersistableBundle -&gt; unit" Usage="activity.OnSaveInstanceState (outState, outPersistentState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSaveInstanceState", "(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetOnSaveInstanceState_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.OS.Bundle" />
        <Parameter Name="outPersistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="outState">Bundle in which to place your saved state.</param>
        <param name="outPersistentState">State which will be saved across reboots.</param>
        <summary>This is the same as <c>#onSaveInstanceState</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>.</summary>
        <remarks>
          <para>This is the same as <c>#onSaveInstanceState</c> but is called for activities
            created with the attribute <c>android.R.attr#persistableMode</c> set to
            <c>persistAcrossReboots</c>. The <c>android.os.PersistableBundle</c> passed
            in will be saved and presented in <c>#onCreate(Bundle, PersistableBundle)</c>
            the first time that this activity is restarted following the next device reboot.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onSaveInstanceState(android.os.Bundle,%20android.os.PersistableBundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.onSaveInstanceState(android.os.Bundle, android.os.PersistableBundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle, Android.OS.PersistableBundle)" />
        <altmember cref="M:Android.App.Activity.OnPause" />
      </Docs>
    </Member>
    <Member MemberName="OnSearchRequested">
      <MemberSignature Language="C#" Value="public virtual bool OnSearchRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnSearchRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnSearchRequested" />
      <MemberSignature Language="F#" Value="abstract member OnSearchRequested : unit -&gt; bool&#xA;override this.OnSearchRequested : unit -&gt; bool" Usage="activity.OnSearchRequested " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnSearchRequested</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSearchRequested", "()Z", "GetOnSearchRequestedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSearchRequested", "()Z", "GetOnSearchRequestedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the user signals the desire to start a search.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onSearchRequested()" title="Reference documentation">Java documentation for <code>android.app.Activity.onSearchRequested()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnSearchRequested(Android.Views.SearchEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnSearchRequested">
      <MemberSignature Language="C#" Value="public virtual bool OnSearchRequested (Android.Views.SearchEvent? searchEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnSearchRequested(class Android.Views.SearchEvent searchEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnSearchRequested(Android.Views.SearchEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnSearchRequested : Android.Views.SearchEvent -&gt; bool&#xA;override this.OnSearchRequested : Android.Views.SearchEvent -&gt; bool" Usage="activity.OnSearchRequested searchEvent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnSearchRequested(Android.Views.SearchEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onSearchRequested", "(Landroid/view/SearchEvent;)Z", "GetOnSearchRequested_Landroid_view_SearchEvent_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onSearchRequested", "(Landroid/view/SearchEvent;)Z", "GetOnSearchRequested_Landroid_view_SearchEvent_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchEvent" Type="Android.Views.SearchEvent" />
      </Parameters>
      <Docs>
        <param name="searchEvent">The <c>SearchEvent</c> that signaled this search.</param>
        <summary>This hook is called when the user signals the desire to start a search.</summary>
        <returns>Returns <c>true</c> if search launched, and <c>false</c> if the activity does
            not respond to search.  The default implementation always returns <c>true</c>, except
            when in <c>Configuration#UI_MODE_TYPE_TELEVISION</c> mode where it returns false.</returns>
        <remarks>
          <para>This hook is called when the user signals the desire to start a search.</para>
          <para>You can use this function as a simple way to launch the search UI, in response to a
            menu item, search button, or other widgets within your activity. Unless overidden,
            calling this function is the same as calling
            <c>#startSearch startSearch(null, false, null, false)</c>, which launches
            search for the current activity as specified in its manifest, see <c>SearchManager</c>.</para>
          <para>You can override this function to force global search, e.g. in response to a dedicated
            search key, or to block search entirely (by simply returning false).</para>
          <para>Note: when running in a <c>Configuration#UI_MODE_TYPE_TELEVISION</c> or
            <c>Configuration#UI_MODE_TYPE_WATCH</c>, the default implementation changes to simply
            return false and you must supply your own custom implementation if you want to support
            search.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onSearchRequested(android.view.SearchEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onSearchRequested(android.view.SearchEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnStart" />
      <MemberSignature Language="F#" Value="abstract member OnStart : unit -&gt; unit&#xA;override this.OnStart : unit -&gt; unit" Usage="activity.OnStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after <c>#onCreate</c> &amp;mdash; or after <c>#onRestart</c> when
            the activity had been stopped, but is now again being displayed to the
            user.</summary>
        <remarks>
          <para>Called after <c>#onCreate</c> &amp;mdash; or after <c>#onRestart</c> when
            the activity had been stopped, but is now again being displayed to the
            user. It will usually be followed by <c>#onResume</c>. This is a good place to begin
            drawing visual elements, running animations, etc.</para>
          <para>You can call <c>#finish</c> from within this function, in
            which case <c>#onStop</c> will be immediately called after <c>#onStart</c> without the
            lifecycle transitions in-between (<c>#onResume</c>, <c>#onPause</c>, etc) executing.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onStart()" title="Reference documentation">Java documentation for <code>android.app.Activity.onStart()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnStop" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="OnStateNotSaved">
      <MemberSignature Language="C#" Value="public virtual void OnStateNotSaved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStateNotSaved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnStateNotSaved" />
      <MemberSignature Language="F#" Value="abstract member OnStateNotSaved : unit -&gt; unit&#xA;override this.OnStateNotSaved : unit -&gt; unit" Usage="activity.OnStateNotSaved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStateNotSaved", "()V", "GetOnStateNotSavedHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStateNotSaved", "()V", "GetOnStateNotSavedHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when an <c>#onResume</c> is coming up, prior to other pre-resume callbacks
            such as <c>#onNewIntent</c> and <c>#onActivityResult</c>.</summary>
        <remarks>
          <para>Called when an <c>#onResume</c> is coming up, prior to other pre-resume callbacks
            such as <c>#onNewIntent</c> and <c>#onActivityResult</c>.  This is primarily intended
            to give the activity a hint that its state is no longer saved -- it will generally
            be called after <c>#onSaveInstanceState</c> and prior to the activity being
            resumed/started again.</para>
          <para>This member is deprecated. starting with <c>android.os.Build.VERSION_CODES#P</c> onSaveInstanceState is
            called after <c>#onStop</c>, so this hint isn't accurate anymore: you should consider your
            state not saved in between <c>onStart</c> and <c>onStop</c> callbacks inclusively.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onStateNotSaved()" title="Reference documentation">Java documentation for <code>android.app.Activity.onStateNotSaved()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnStop" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="activity.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStop", "()V", "GetOnStopHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStop", "()V", "GetOnStopHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when you are no longer visible to the user.</summary>
        <remarks>
          <para>Called when you are no longer visible to the user.  You will next
            receive either <c>#onRestart</c>, <c>#onDestroy</c>, or nothing,
            depending on later user activity. This is a good place to stop
            refreshing UI, running animations and other visual things.</para>
          <para>&lt;em&gt;Derived classes must call through to the super class's
            implementation of this method.  If they do not, an exception will be
            thrown.&lt;/em&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onStop()" title="Reference documentation">Java documentation for <code>android.app.Activity.onStop()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnRestart" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnDestroy" />
      </Docs>
    </Member>
    <Member MemberName="OnTitleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTitleChanged (Java.Lang.ICharSequence? title, Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTitleChanged(class Java.Lang.ICharSequence title, valuetype Android.Graphics.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTitleChanged(Java.Lang.ICharSequence,Android.Graphics.Color)" />
      <MemberSignature Language="F#" Value="abstract member OnTitleChanged : Java.Lang.ICharSequence * Android.Graphics.Color -&gt; unit&#xA;override this.OnTitleChanged : Java.Lang.ICharSequence * Android.Graphics.Color -&gt; unit" Usage="activity.OnTitleChanged (title, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTitleChanged", "(Ljava/lang/CharSequence;I)V", "GetOnTitleChanged_Ljava_lang_CharSequence_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTitleChanged", "(Ljava/lang/CharSequence;I)V", "GetOnTitleChanged_Ljava_lang_CharSequence_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="color">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTitleChanged">
      <MemberSignature Language="C#" Value="protected void OnTitleChanged (string? title, Android.Graphics.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnTitleChanged(string title, valuetype Android.Graphics.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTitleChanged(System.String,Android.Graphics.Color)" />
      <MemberSignature Language="F#" Value="member this.OnTitleChanged : string * Android.Graphics.Color -&gt; unit" Usage="activity.OnTitleChanged (title, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="color" Type="Android.Graphics.Color" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="color">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTopResumedActivityChanged">
      <MemberSignature Language="C#" Value="public virtual void OnTopResumedActivityChanged (bool isTopResumedActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTopResumedActivityChanged(bool isTopResumedActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTopResumedActivityChanged(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnTopResumedActivityChanged : bool -&gt; unit&#xA;override this.OnTopResumedActivityChanged : bool -&gt; unit" Usage="activity.OnTopResumedActivityChanged isTopResumedActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTopResumedActivityChanged", "(Z)V", "GetOnTopResumedActivityChanged_ZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTopResumedActivityChanged", "(Z)V", "GetOnTopResumedActivityChanged_ZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isTopResumedActivity" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isTopResumedActivity">
          <c>true</c> if it's the topmost resumed activity in the system,
                                        <c>false</c> otherwise. A call with this as <c>true</c> will
                                        always be followed by another one with <c>false</c>.</param>
        <summary>Called when activity gets or loses the top resumed position in the system.</summary>
        <remarks>
          <para>Called when activity gets or loses the top resumed position in the system.</para>
          <para>Starting with <c>android.os.Build.VERSION_CODES#Q</c> multiple activities can be resumed
            at the same time in multi-window and multi-display modes. This callback should be used
            instead of <c>#onResume()</c> as an indication that the activity can try to open
            exclusive-access devices like camera.</para>
          <para>It will always be delivered after the activity was resumed and before it is paused. In
            some cases it might be skipped and activity can go straight from <c>#onResume()</c> to
            <c>#onPause()</c> without receiving the top resumed state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onTopResumedActivityChanged(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.onTopResumedActivityChanged(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTouchEvent (Android.Views.MotionEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTouchEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTouchEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.OnTouchEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.OnTouchEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTouchEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTouchEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The touch screen event being processed.</param>
        <param name="event">The touch screen event being processed.</param>
        <summary>Called when a touch screen event was not handled by any of the views
            inside of the activity.</summary>
        <returns>Return true if you have consumed the event, false if you haven't.</returns>
        <remarks>
          <para>Called when a touch screen event was not handled by any of the views
            inside of the activity.  This is most useful to process touch events that happen
            outside of your window bounds, where there is no view to receive it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onTouchEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onTouchEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnTrackballEvent (Android.Views.MotionEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnTrackballEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTrackballEvent(Android.Views.MotionEvent)" />
      <MemberSignature Language="F#" Value="abstract member OnTrackballEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.OnTrackballEvent : Android.Views.MotionEvent -&gt; bool" Usage="activity.OnTrackballEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTrackballEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetOnTrackballEvent_Landroid_view_MotionEvent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The trackball event being processed.</param>
        <param name="event">The trackball event being processed.</param>
        <summary>Called when the trackball was moved and not handled by any of the
            views inside of the activity.</summary>
        <returns>Return true if you have consumed the event, false if you haven't.
            The default implementation always returns false.</returns>
        <remarks>
          <para>Called when the trackball was moved and not handled by any of the
            views inside of the activity.  So, for example, if the trackball moves
            while focus is on a button, you will receive a call here because
            buttons do not normally do anything with trackball events.  The call
            here happens &lt;em&gt;before&lt;/em&gt; trackball movements are converted to
            DPAD key events, which then get sent back to the view hierarchy, and
            will be processed at the point for things like focus navigation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onTrackballEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.onTrackballEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnTrimMemory(Android.Content.TrimMemory)" />
      <MemberSignature Language="F#" Value="abstract member OnTrimMemory : Android.Content.TrimMemory -&gt; unit&#xA;override this.OnTrimMemory : Android.Content.TrimMemory -&gt; unit" Usage="activity.OnTrimMemory level" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Content.IComponentCallbacks2.OnTrimMemory(Android.Content.TrimMemory)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" />,
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" />,
 <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" />, <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" />,
 or <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" />.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnUserInteraction">
      <MemberSignature Language="C#" Value="public virtual void OnUserInteraction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnUserInteraction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnUserInteraction" />
      <MemberSignature Language="F#" Value="abstract member OnUserInteraction : unit -&gt; unit&#xA;override this.OnUserInteraction : unit -&gt; unit" Usage="activity.OnUserInteraction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onUserInteraction", "()V", "GetOnUserInteractionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onUserInteraction", "()V", "GetOnUserInteractionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called whenever a key, touch, or trackball event is dispatched to the
            activity.</summary>
        <remarks>
          <para>Called whenever a key, touch, or trackball event is dispatched to the
            activity.  Implement this method if you wish to know that the user has
            interacted with the device in some way while your activity is running.
            This callback and <c>#onUserLeaveHint</c> are intended to help
            activities manage status bar notifications intelligently; specifically,
            for helping activities determine the proper time to cancel a notification.</para>
          <para>All calls to your activity's <c>#onUserLeaveHint</c> callback will
            be accompanied by calls to <c>#onUserInteraction</c>.  This
            ensures that your activity will be told of relevant user activity such
            as pulling down the notification pane and touching an item there.</para>
          <para>Note that this callback will be invoked for the touch down action
            that begins a touch gesture, but may not be invoked for the touch-moved
            and touch-up actions that follow.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onUserInteraction()" title="Reference documentation">Java documentation for <code>android.app.Activity.onUserInteraction()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnUserLeaveHint" />
      </Docs>
    </Member>
    <Member MemberName="OnUserLeaveHint">
      <MemberSignature Language="C#" Value="protected virtual void OnUserLeaveHint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserLeaveHint() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnUserLeaveHint" />
      <MemberSignature Language="F#" Value="abstract member OnUserLeaveHint : unit -&gt; unit&#xA;override this.OnUserLeaveHint : unit -&gt; unit" Usage="activity.OnUserLeaveHint " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onUserLeaveHint", "()V", "GetOnUserLeaveHintHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onUserLeaveHint", "()V", "GetOnUserLeaveHintHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called as part of the activity lifecycle when an activity is about to go
            into the background as the result of user choice.</summary>
        <remarks>
          <para>Called as part of the activity lifecycle when an activity is about to go
            into the background as the result of user choice.  For example, when the
            user presses the Home key, <c>#onUserLeaveHint</c> will be called, but
            when an incoming phone call causes the in-call Activity to be automatically
            brought to the foreground, <c>#onUserLeaveHint</c> will not be called on
            the activity being interrupted.  In cases when it is invoked, this method
            is called right before the activity's <c>#onPause</c> callback.</para>
          <para>This callback and <c>#onUserInteraction</c> are intended to help
            activities manage status bar notifications intelligently; specifically,
            for helping activities determine the proper time to cancel a notification.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onUserLeaveHint()" title="Reference documentation">Java documentation for <code>android.app.Activity.onUserLeaveHint()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.App.Activity.OnUserInteraction" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleBehindCanceled">
      <MemberSignature Language="C#" Value="public virtual void OnVisibleBehindCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnVisibleBehindCanceled() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnVisibleBehindCanceled" />
      <MemberSignature Language="F#" Value="abstract member OnVisibleBehindCanceled : unit -&gt; unit&#xA;override this.OnVisibleBehindCanceled : unit -&gt; unit" Usage="activity.OnVisibleBehindCanceled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onVisibleBehindCanceled", "()V", "GetOnVisibleBehindCanceledHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onVisibleBehindCanceled", "()V", "GetOnVisibleBehindCanceledHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when a translucent activity over this activity is becoming opaque or another
            activity is being launched.</summary>
        <remarks>
          <para>Called when a translucent activity over this activity is becoming opaque or another
            activity is being launched. Activities that override this method must call
            <c>super.onVisibleBehindCanceled()</c> or a SuperNotCalledException will be thrown.</para>
          <para>When this method is called the activity has 500 msec to release any resources it may be
            using while visible in the background.
            If the activity has not returned from this method in 500 msec the system will destroy
            the activity and kill the process in order to recover the resources for another
            process. Otherwise <c>#onStop()</c> will be called following return.</para>
          <para>This member is deprecated. This method's functionality is no longer supported as of
            <c>android.os.Build.VERSION_CODES#O</c> and will be removed in a future release.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onVisibleBehindCanceled()" title="Reference documentation">Java documentation for <code>android.app.Activity.onVisibleBehindCanceled()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.RequestVisibleBehind(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowAttributesChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowAttributesChanged (Android.Views.WindowManagerLayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowAttributesChanged(class Android.Views.WindowManagerLayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnWindowAttributesChanged(Android.Views.WindowManagerLayoutParams)" />
      <MemberSignature Language="F#" Value="abstract member OnWindowAttributesChanged : Android.Views.WindowManagerLayoutParams -&gt; unit&#xA;override this.OnWindowAttributesChanged : Android.Views.WindowManagerLayoutParams -&gt; unit" Usage="activity.OnWindowAttributesChanged params" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnWindowAttributesChanged(Android.Views.WindowManagerLayoutParams)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onWindowAttributesChanged", "(Landroid/view/WindowManager$LayoutParams;)V", "GetOnWindowAttributesChanged_Landroid_view_WindowManager_LayoutParams_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onWindowAttributesChanged", "(Landroid/view/WindowManager$LayoutParams;)V", "GetOnWindowAttributesChanged_Landroid_view_WindowManager_LayoutParams_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.Views.WindowManagerLayoutParams" />
      </Parameters>
      <Docs>
        <param name="params">To be added.</param>
        <summary>This is called whenever the current window attributes change.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowFocusChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowFocusChanged (bool hasFocus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowFocusChanged(bool hasFocus) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnWindowFocusChanged(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnWindowFocusChanged : bool -&gt; unit&#xA;override this.OnWindowFocusChanged : bool -&gt; unit" Usage="activity.OnWindowFocusChanged hasFocus" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnWindowFocusChanged(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onWindowFocusChanged", "(Z)V", "GetOnWindowFocusChanged_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onWindowFocusChanged", "(Z)V", "GetOnWindowFocusChanged_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasFocus" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasFocus">Whether the window of this activity has focus.</param>
        <summary>Called when the current <c>Window</c> of the activity gains or loses
            focus.</summary>
        <remarks>
          <para>Called when the current <c>Window</c> of the activity gains or loses
            focus. This is the best indicator of whether this activity is the entity
            with which the user actively interacts. The default implementation
            clears the key tracking state, so should always be called.</para>
          <para>Note that this provides information about global focus state, which
            is managed independently of activity lifecycle.  As such, while focus
            changes will generally have some relation to lifecycle changes (an
            activity that is stopped will not generally get window focus), you
            should not rely on any particular order between the callbacks here and
            those in the other lifecycle methods such as <c>#onResume</c>.</para>
          <para>As a general rule, however, a foreground activity will have window
            focus...  unless it has displayed other dialogs or popups that take
            input focus, in which case the activity itself will not have focus
            when the other windows have it.  Likewise, the system may display
            system-level windows (such as the status bar notification panel or
            a system alert) which will temporarily take window input focus without
            pausing the foreground activity.</para>
          <para>Starting with <c>android.os.Build.VERSION_CODES#Q</c> there can be
            multiple resumed activities at the same time in multi-window mode, so
            resumed state does not guarantee window focus even if there are no
            overlays above.</para>
          <para>If the intent is to know when an activity is the topmost active, the
            one the user interacted with last among all activities but not including
            non-activity windows like dialogs and popups, then
            <c>#onTopResumedActivityChanged(boolean)</c> should be used. On platform
            versions prior to <c>android.os.Build.VERSION_CODES#Q</c>,
            <c>#onResume</c> is the best indicator.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onWindowFocusChanged(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.onWindowFocusChanged(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.HasWindowFocus" />
        <altmember cref="M:Android.App.Activity.OnResume" />
        <altmember cref="M:Android.Views.View.OnWindowFocusChanged(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowStartingActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? OnWindowStartingActionMode (Android.Views.ActionMode.ICallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode OnWindowStartingActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnWindowStartingActionMode(Android.Views.ActionMode.ICallback)" />
      <MemberSignature Language="F#" Value="abstract member OnWindowStartingActionMode : Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode&#xA;override this.OnWindowStartingActionMode : Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode" Usage="activity.OnWindowStartingActionMode callback" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnWindowStartingActionMode(Android.Views.ActionMode.ICallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">The callback that should control the new action mode</param>
        <summary>Give the Activity a chance to control the UI for an action mode requested
            by the system.</summary>
        <returns>The new action mode, or &lt;code&gt;null&lt;/code&gt; if the activity does not want to
                    provide special handling for this action mode. (It will be handled by the system.)</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onWindowStartingActionMode(android.view.Callback)" title="Reference documentation">Java documentation for <code>android.app.Activity.onWindowStartingActionMode(android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowStartingActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? OnWindowStartingActionMode (Android.Views.ActionMode.ICallback? callback, Android.Views.ActionModeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode OnWindowStartingActionMode(class Android.Views.ActionMode/ICallback callback, valuetype Android.Views.ActionModeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OnWindowStartingActionMode(Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)" />
      <MemberSignature Language="F#" Value="abstract member OnWindowStartingActionMode : Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode&#xA;override this.OnWindowStartingActionMode : Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode" Usage="activity.OnWindowStartingActionMode (callback, type)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.Window.ICallback.OnWindowStartingActionMode(Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_IHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_IHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
        <Parameter Name="type" Type="Android.Views.ActionModeType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">The callback that should control the new action mode</param>
        <param name="type">To be added.</param>
        <summary>Give the Activity a chance to control the UI for an action mode requested
            by the system.</summary>
        <returns>The new action mode, or &lt;code&gt;null&lt;/code&gt; if the activity does not want to
                    provide special handling for this action mode. (It will be handled by the system.)</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#onWindowStartingActionMode(android.view.Callback)" title="Reference documentation">Java documentation for <code>android.app.Activity.onWindowStartingActionMode(android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenContextMenu">
      <MemberSignature Language="C#" Value="public virtual void OpenContextMenu (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenContextMenu(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OpenContextMenu(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member OpenContextMenu : Android.Views.View -&gt; unit&#xA;override this.OpenContextMenu : Android.Views.View -&gt; unit" Usage="activity.OpenContextMenu view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openContextMenu", "(Landroid/view/View;)V", "GetOpenContextMenu_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openContextMenu", "(Landroid/view/View;)V", "GetOpenContextMenu_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to show the context menu for.</param>
        <summary>Programmatically opens the context menu for a particular <c>view</c>.</summary>
        <remarks>
          <para>Programmatically opens the context menu for a particular <c>view</c>.
            The <c>view</c> should have been added via
            <c>#registerForContextMenu(View)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#openContextMenu(android.view.View)" title="Reference documentation">Java documentation for <code>android.app.Activity.openContextMenu(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenOptionsMenu">
      <MemberSignature Language="C#" Value="public virtual void OpenOptionsMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenOptionsMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OpenOptionsMenu" />
      <MemberSignature Language="F#" Value="abstract member OpenOptionsMenu : unit -&gt; unit&#xA;override this.OpenOptionsMenu : unit -&gt; unit" Usage="activity.OpenOptionsMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("openOptionsMenu", "()V", "GetOpenOptionsMenuHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("openOptionsMenu", "()V", "GetOpenOptionsMenuHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Programmatically opens the options menu.</summary>
        <remarks>
          <para>Programmatically opens the options menu. If the options menu is already
            open, this method does nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#openOptionsMenu()" title="Reference documentation">Java documentation for <code>android.app.Activity.openOptionsMenu()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OverrideActivityTransition">
      <MemberSignature Language="C#" Value="public virtual void OverrideActivityTransition (Android.App.OverrideTransition overrideType, int enterAnim, int exitAnim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OverrideActivityTransition(valuetype Android.App.OverrideTransition overrideType, int32 enterAnim, int32 exitAnim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OverrideActivityTransition(Android.App.OverrideTransition,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OverrideActivityTransition : Android.App.OverrideTransition * int * int -&gt; unit&#xA;override this.OverrideActivityTransition : Android.App.OverrideTransition * int * int -&gt; unit" Usage="activity.OverrideActivityTransition (overrideType, enterAnim, exitAnim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("overrideActivityTransition", "(III)V", "GetOverrideActivityTransition_IIIHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("overrideActivityTransition", "(III)V", "GetOverrideActivityTransition_IIIHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrideType" Type="Android.App.OverrideTransition">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="enterAnim" Type="System.Int32" />
        <Parameter Name="exitAnim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="overrideType">
          <c>OVERRIDE_TRANSITION_OPEN</c> This animation will be used when
                                starting/entering an activity. <c>OVERRIDE_TRANSITION_CLOSE</c> This
                                animation will be used when finishing/closing an activity.</param>
        <param name="enterAnim">A resource ID of the animation resource to use for the incoming activity.
                             Use 0 for no animation.</param>
        <param name="exitAnim">A resource ID of the animation resource to use for the outgoing activity.
                            Use 0 for no animation.</param>
        <summary>Customizes the animation for the activity transition with this activity.</summary>
        <remarks>
          <para>Customizes the animation for the activity transition with this activity. This can be called
            at any time while the activity still alive.</para>
          <para>This is a more robust method of overriding the transition animation at runtime without
            relying on <c>#overridePendingTransition(int, int)</c> which doesn't work for predictive
            back. However, the animation set from <c>#overridePendingTransition(int, int)</c> still
            has higher priority when the system is looking for the next transition animation.</para>
          <para>The animations resources set by this method will be chosen if and only if the activity is
            on top of the task while activity transitions are being played.
            For example, if we want to customize the opening transition when launching Activity B which
            gets started from Activity A, we should call this method inside B's onCreate with
            <c>overrideType = OVERRIDE_TRANSITION_OPEN</c> because the Activity B will on top of the
            task. And if we want to customize the closing transition when finishing Activity B and back
            to Activity A, since B is still is above A, we should call this method in Activity B with
            <c>overrideType = OVERRIDE_TRANSITION_CLOSE</c>.</para>
          <para>If an Activity has called this method, and it also set another activity animation
            by <c>Window#setWindowAnimations(int)</c>, the system will choose the animation set from
            this method.</para>
          <para>Note that <c>Window#setWindowAnimations</c>,
            <c>#overridePendingTransition(int, int)</c> and this method will be ignored if the Activity
            is started with <c>ActivityOptions#makeSceneTransitionAnimation(Activity, Pair[])</c>. Also
            note that this method can only be used to customize cross-activity transitions but not
            cross-task transitions which are fully non-customizable as of Android 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#overrideActivityTransition(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.overrideActivityTransition(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideActivityTransition">
      <MemberSignature Language="C#" Value="public virtual void OverrideActivityTransition (Android.App.OverrideTransition overrideType, int enterAnim, int exitAnim, int backgroundColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OverrideActivityTransition(valuetype Android.App.OverrideTransition overrideType, int32 enterAnim, int32 exitAnim, int32 backgroundColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OverrideActivityTransition(Android.App.OverrideTransition,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OverrideActivityTransition : Android.App.OverrideTransition * int * int * int -&gt; unit&#xA;override this.OverrideActivityTransition : Android.App.OverrideTransition * int * int * int -&gt; unit" Usage="activity.OverrideActivityTransition (overrideType, enterAnim, exitAnim, backgroundColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("overrideActivityTransition", "(IIII)V", "GetOverrideActivityTransition_IIIIHandler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("overrideActivityTransition", "(IIII)V", "GetOverrideActivityTransition_IIIIHandler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrideType" Type="Android.App.OverrideTransition">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="enterAnim" Type="System.Int32" />
        <Parameter Name="exitAnim" Type="System.Int32" />
        <Parameter Name="backgroundColor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="overrideType">
          <c>OVERRIDE_TRANSITION_OPEN</c> This animation will be used when
                                starting/entering an activity. <c>OVERRIDE_TRANSITION_CLOSE</c> This
                                animation will be used when finishing/closing an activity.</param>
        <param name="enterAnim">A resource ID of the animation resource to use for the incoming activity.
                             Use 0 for no animation.</param>
        <param name="exitAnim">A resource ID of the animation resource to use for the outgoing activity.
                            Use 0 for no animation.</param>
        <param name="backgroundColor">The background color to use for the background during the animation
                                   if the animation requires a background. Set to
                                   <c>Color#TRANSPARENT</c> to not override the default color.</param>
        <summary>Customizes the animation for the activity transition with this activity.</summary>
        <remarks>
          <para>Customizes the animation for the activity transition with this activity. This can be called
            at any time while the activity still alive.</para>
          <para>This is a more robust method of overriding the transition animation at runtime without
            relying on <c>#overridePendingTransition(int, int)</c> which doesn't work for predictive
            back. However, the animation set from <c>#overridePendingTransition(int, int)</c> still
            has higher priority when the system is looking for the next transition animation.</para>
          <para>The animations resources set by this method will be chosen if and only if the activity is
            on top of the task while activity transitions are being played.
            For example, if we want to customize the opening transition when launching Activity B which
            gets started from Activity A, we should call this method inside B's onCreate with
            <c>overrideType = OVERRIDE_TRANSITION_OPEN</c> because the Activity B will on top of the
            task. And if we want to customize the closing transition when finishing Activity B and back
            to Activity A, since B is still is above A, we should call this method in Activity B with
            <c>overrideType = OVERRIDE_TRANSITION_CLOSE</c>.</para>
          <para>If an Activity has called this method, and it also set another activity animation
            by <c>Window#setWindowAnimations(int)</c>, the system will choose the animation set from
            this method.</para>
          <para>Note that <c>Window#setWindowAnimations</c>,
            <c>#overridePendingTransition(int, int)</c> and this method will be ignored if the Activity
            is started with <c>ActivityOptions#makeSceneTransitionAnimation(Activity, Pair[])</c>. Also
            note that this method can only be used to customize cross-activity transitions but not
            cross-task transitions which are fully non-customizable as of Android 11.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#overrideActivityTransition(int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.overrideActivityTransition(int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridePendingTransition">
      <MemberSignature Language="C#" Value="public virtual void OverridePendingTransition (int enterAnim, int exitAnim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OverridePendingTransition(int32 enterAnim, int32 exitAnim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OverridePendingTransition(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OverridePendingTransition : int * int -&gt; unit&#xA;override this.OverridePendingTransition : int * int -&gt; unit" Usage="activity.OverridePendingTransition (enterAnim, exitAnim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("overridePendingTransition", "(II)V", "GetOverridePendingTransition_IIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("overridePendingTransition", "(II)V", "GetOverridePendingTransition_IIHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enterAnim" Type="System.Int32" />
        <Parameter Name="exitAnim" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enterAnim">A resource ID of the animation resource to use for
            the incoming activity.  Use 0 for no animation.</param>
        <param name="exitAnim">A resource ID of the animation resource to use for
            the outgoing activity.  Use 0 for no animation.</param>
        <summary>Call immediately after one of the flavors of <c>#startActivity(Intent)</c>
            or <c>#finish</c> to specify an explicit transition animation to
            perform next.</summary>
        <remarks>
          <para>Call immediately after one of the flavors of <c>#startActivity(Intent)</c>
            or <c>#finish</c> to specify an explicit transition animation to
            perform next.</para>
          <para>As of <c>android.os.Build.VERSION_CODES#JELLY_BEAN</c> an alternative
            to using this with starting activities is to supply the desired animation
            information through a <c>ActivityOptions</c> bundle to
            <c>#startActivity(Intent, Bundle)</c> or a related function.  This allows
            you to specify a custom animation even when starting an activity from
            outside the context of the current top activity.</para>
          <para>Af of <c>android.os.Build.VERSION_CODES#S</c> application can only specify
            a transition animation when the transition happens within the same task. System
            default animation is used for cross-task transition animations.</para>
          <para>This member is deprecated. Use <c>#overrideActivityTransition(int, int, int)</c>} instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#overridePendingTransition(int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.overridePendingTransition(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="OverridePendingTransition">
      <MemberSignature Language="C#" Value="public virtual void OverridePendingTransition (int enterAnim, int exitAnim, int backgroundColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OverridePendingTransition(int32 enterAnim, int32 exitAnim, int32 backgroundColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.OverridePendingTransition(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OverridePendingTransition : int * int * int -&gt; unit&#xA;override this.OverridePendingTransition : int * int * int -&gt; unit" Usage="activity.OverridePendingTransition (enterAnim, exitAnim, backgroundColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("overridePendingTransition", "(III)V", "GetOverridePendingTransition_IIIHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("overridePendingTransition", "(III)V", "GetOverridePendingTransition_IIIHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enterAnim" Type="System.Int32" />
        <Parameter Name="exitAnim" Type="System.Int32" />
        <Parameter Name="backgroundColor" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enterAnim">A resource ID of the animation resource to use for
            the incoming activity.  Use 0 for no animation.</param>
        <param name="exitAnim">A resource ID of the animation resource to use for
            the outgoing activity.  Use 0 for no animation.</param>
        <param name="backgroundColor">The background color to use for the background during the animation if
            the animation requires a background. Set to 0 to not override the default color.</param>
        <summary>Call immediately after one of the flavors of <c>#startActivity(Intent)</c>
            or <c>#finish</c> to specify an explicit transition animation to
            perform next.</summary>
        <remarks>
          <para>Call immediately after one of the flavors of <c>#startActivity(Intent)</c>
            or <c>#finish</c> to specify an explicit transition animation to
            perform next.</para>
          <para>As of <c>android.os.Build.VERSION_CODES#JELLY_BEAN</c> an alternative
            to using this with starting activities is to supply the desired animation
            information through a <c>ActivityOptions</c> bundle to
            <c>#startActivity(Intent, Bundle)</c> or a related function.  This allows
            you to specify a custom animation even when starting an activity from
            outside the context of the current top activity.</para>
          <para>This member is deprecated. Use <c>#overrideActivityTransition(int, int, int, int)</c>} instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#overridePendingTransition(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.overridePendingTransition(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideTransitionClose">
      <MemberSignature Language="C#" Value="public const Android.App.OverrideTransition OverrideTransitionClose = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.OverrideTransition OverrideTransitionClose = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.App.Activity.OverrideTransitionClose" />
      <MemberSignature Language="F#" Value="val mutable OverrideTransitionClose : Android.App.OverrideTransition" Usage="Android.App.Activity.OverrideTransitionClose" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.Window.ICallback._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onPointerCaptureChanged_Z</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_I</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OVERRIDE_TRANSITION_CLOSE", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OVERRIDE_TRANSITION_CLOSE", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.OverrideTransition enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.OverrideTransition enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.OverrideTransition</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Request type of <c>#overrideActivityTransition(int, int, int)</c> or
            <c>#overrideActivityTransition(int, int, int, int)</c>, to override the
            closing transition.</summary>
        <remarks>
          <para>Request type of <c>#overrideActivityTransition(int, int, int)</c> or
            <c>#overrideActivityTransition(int, int, int, int)</c>, to override the
            closing transition.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#OVERRIDE_TRANSITION_CLOSE" title="Reference documentation">Java documentation for <code>android.app.Activity.OVERRIDE_TRANSITION_CLOSE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideTransitionOpen">
      <MemberSignature Language="C#" Value="public const Android.App.OverrideTransition OverrideTransitionOpen = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.OverrideTransition OverrideTransitionOpen = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.App.Activity.OverrideTransitionOpen" />
      <MemberSignature Language="F#" Value="val mutable OverrideTransitionOpen : Android.App.OverrideTransition" Usage="Android.App.Activity.OverrideTransitionOpen" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.Window.ICallback._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onPointerCaptureChanged_Z</InterfaceMember>
        <InterfaceMember>F:Android.Views.Window.ICallback.cb_onProvideKeyboardShortcuts_Ljava_util_List_Landroid_view_Menu_I</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OVERRIDE_TRANSITION_OPEN", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OVERRIDE_TRANSITION_OPEN", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.App.OverrideTransition enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.App.OverrideTransition enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.OverrideTransition</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Request type of <c>#overrideActivityTransition(int, int, int)</c> or
            <c>#overrideActivityTransition(int, int, int, int)</c>, to override the
            opening transition.</summary>
        <remarks>
          <para>Request type of <c>#overrideActivityTransition(int, int, int)</c> or
            <c>#overrideActivityTransition(int, int, int, int)</c>, to override the
            opening transition.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#OVERRIDE_TRANSITION_OPEN" title="Reference documentation">Java documentation for <code>android.app.Activity.OVERRIDE_TRANSITION_OPEN</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.App.Activity? Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Activity Parent" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Android.App.Activity" Usage="Android.App.Activity.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParent", "()Landroid/app/Activity;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParent", "()Landroid/app/Activity;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the parent activity if this view is an embedded child.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return the parent activity if this view is an embedded child.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getParent()" title="Reference documentation">Java documentation for <code>android.app.Activity.getParent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentActivityIntent">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Intent? ParentActivityIntent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Intent ParentActivityIntent" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ParentActivityIntent" />
      <MemberSignature Language="F#" Value="member this.ParentActivityIntent : Android.Content.Intent" Usage="Android.App.Activity.ParentActivityIntent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParentActivityIntent", "()Landroid/content/Intent;", "GetGetParentActivityIntentHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParentActivityIntent", "()Landroid/content/Intent;", "GetGetParentActivityIntentHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtain an <c>Intent</c> that will launch an explicit target activity specified by
            this activity's logical parent.</summary>
        <value>a new Intent targeting the defined parent of this activity or null if
                    there is no valid parent.</value>
        <remarks>
          <para>Obtain an <c>Intent</c> that will launch an explicit target activity specified by
            this activity's logical parent. The logical parent is named in the application's manifest
            by the <c>android.R.attr#parentActivityName parentActivityName</c> attribute.
            Activity subclasses may override this method to modify the Intent returned by
            super.getParentActivityIntent() or to implement a different mechanism of retrieving
            the parent intent entirely.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getParentActivityIntent()" title="Reference documentation">Java documentation for <code>android.app.Activity.getParentActivityIntent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="PostponeEnterTransition">
      <MemberSignature Language="C#" Value="public virtual void PostponeEnterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostponeEnterTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.PostponeEnterTransition" />
      <MemberSignature Language="F#" Value="abstract member PostponeEnterTransition : unit -&gt; unit&#xA;override this.PostponeEnterTransition : unit -&gt; unit" Usage="activity.PostponeEnterTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("postponeEnterTransition", "()V", "GetPostponeEnterTransitionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("postponeEnterTransition", "()V", "GetPostponeEnterTransitionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Postpone the entering activity transition when Activity was started with
            <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.util.Pair[])</c>.</summary>
        <remarks>
          <para>Postpone the entering activity transition when Activity was started with
            <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.util.Pair[])</c>.</para>
          <para>This method gives the Activity the ability to delay starting the entering and
            shared element transitions until all data is loaded. Until then, the Activity won't
            draw into its window, leaving the window transparent. This may also cause the
            returning animation to be delayed until data is ready. This method should be
            called in <c>#onCreate(android.os.Bundle)</c> or in
            <c>#onActivityReenter(int, android.content.Intent)</c>.
            <c>#startPostponedEnterTransition()</c> must be called to allow the Activity to
            start the transitions. If the Activity did not use
            <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.util.Pair[])</c>, then this method does nothing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#postponeEnterTransition()" title="Reference documentation">Java documentation for <code>android.app.Activity.postponeEnterTransition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Recreate">
      <MemberSignature Language="C#" Value="public virtual void Recreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Recreate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.Recreate" />
      <MemberSignature Language="F#" Value="abstract member Recreate : unit -&gt; unit&#xA;override this.Recreate : unit -&gt; unit" Usage="activity.Recreate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("recreate", "()V", "GetRecreateHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("recreate", "()V", "GetRecreateHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cause this Activity to be recreated with a new instance.</summary>
        <remarks>
          <para>Cause this Activity to be recreated with a new instance.  This results
            in essentially the same flow as when the Activity is created due to
            a configuration change -- the current instance will go through its
            lifecycle to <c>#onDestroy</c> and a new instance then created after it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#recreate()" title="Reference documentation">Java documentation for <code>android.app.Activity.recreate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Referrer">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri? Referrer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Net.Uri Referrer" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Referrer" />
      <MemberSignature Language="F#" Value="member this.Referrer : Android.Net.Uri" Usage="Android.App.Activity.Referrer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android22.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android22.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getReferrer", "()Landroid/net/Uri;", "GetGetReferrerHandler", ApiSince=22)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getReferrer", "()Landroid/net/Uri;", "GetGetReferrerHandler", ApiSince=22)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return information about who launched this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Return information about who launched this activity.  If the launching Intent
            contains an <c>android.content.Intent#EXTRA_REFERRER Intent.EXTRA_REFERRER</c>,
            that will be returned as-is; otherwise, if known, an
            <c>Intent#URI_ANDROID_APP_SCHEME android-app:</c> referrer URI containing the
            package name that started the Intent will be returned.  This may return null if no
            referrer can be identified -- it is neither explicitly specified, nor is it known which
            application package was involved.</para>
          <para>If called while inside the handling of <c>#onNewIntent</c>, this function will
            return the referrer that submitted that new intent to the activity.  Otherwise, it
            always returns the referrer of the original Intent.</para>
          <para>Note that this is &lt;em&gt;not&lt;/em&gt; a security feature -- you can not trust the
            referrer information, applications can spoof it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getReferrer()" title="Reference documentation">Java documentation for <code>android.app.Activity.getReferrer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterActivityLifecycleCallbacks">
      <MemberSignature Language="C#" Value="public virtual void RegisterActivityLifecycleCallbacks (Android.App.Application.IActivityLifecycleCallbacks callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterActivityLifecycleCallbacks(class Android.App.Application/IActivityLifecycleCallbacks callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RegisterActivityLifecycleCallbacks(Android.App.Application.IActivityLifecycleCallbacks)" />
      <MemberSignature Language="F#" Value="abstract member RegisterActivityLifecycleCallbacks : Android.App.Application.IActivityLifecycleCallbacks -&gt; unit&#xA;override this.RegisterActivityLifecycleCallbacks : Android.App.Application.IActivityLifecycleCallbacks -&gt; unit" Usage="activity.RegisterActivityLifecycleCallbacks callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("registerActivityLifecycleCallbacks", "(Landroid/app/Application$ActivityLifecycleCallbacks;)V", "GetRegisterActivityLifecycleCallbacks_Landroid_app_Application_ActivityLifecycleCallbacks_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerActivityLifecycleCallbacks", "(Landroid/app/Application$ActivityLifecycleCallbacks;)V", "GetRegisterActivityLifecycleCallbacks_Landroid_app_Application_ActivityLifecycleCallbacks_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.Application+IActivityLifecycleCallbacks" />
      </Parameters>
      <Docs>
        <param name="callback">The callback instance to register</param>
        <summary>Register an <c>Application.ActivityLifecycleCallbacks</c> instance that receives
            lifecycle callbacks for only this Activity.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#registerActivityLifecycleCallbacks(android.app.ActivityLifecycleCallbacks)" title="Reference documentation">Java documentation for <code>android.app.Activity.registerActivityLifecycleCallbacks(android.app.ActivityLifecycleCallbacks)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void RegisterForContextMenu (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RegisterForContextMenu(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RegisterForContextMenu : Android.Views.View -&gt; unit&#xA;override this.RegisterForContextMenu : Android.Views.View -&gt; unit" Usage="activity.RegisterForContextMenu view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("registerForContextMenu", "(Landroid/view/View;)V", "GetRegisterForContextMenu_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerForContextMenu", "(Landroid/view/View;)V", "GetRegisterForContextMenu_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should show a context menu.</param>
        <summary>Registers a context menu to be shown for the given view (multiple views
            can show the context menu).</summary>
        <remarks>
          <para>Registers a context menu to be shown for the given view (multiple views
            can show the context menu). This method will set the
            <c>OnCreateContextMenuListener</c> on the view to this activity, so
            <c>#onCreateContextMenu(ContextMenu, View, ContextMenuInfo)</c> will be
            called when it is time to show the context menu.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#registerForContextMenu(android.view.View)" title="Reference documentation">Java documentation for <code>android.app.Activity.registerForContextMenu(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.UnregisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScreenCaptureCallback">
      <MemberSignature Language="C#" Value="public virtual void RegisterScreenCaptureCallback (Java.Util.Concurrent.IExecutor executor, Android.App.Activity.IScreenCaptureCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScreenCaptureCallback(class Java.Util.Concurrent.IExecutor executor, class Android.App.Activity/IScreenCaptureCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RegisterScreenCaptureCallback(Java.Util.Concurrent.IExecutor,Android.App.Activity.IScreenCaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member RegisterScreenCaptureCallback : Java.Util.Concurrent.IExecutor * Android.App.Activity.IScreenCaptureCallback -&gt; unit&#xA;override this.RegisterScreenCaptureCallback : Java.Util.Concurrent.IExecutor * Android.App.Activity.IScreenCaptureCallback -&gt; unit" Usage="activity.RegisterScreenCaptureCallback (executor, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("registerScreenCaptureCallback", "(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V", "GetRegisterScreenCaptureCallback_Ljava_util_concurrent_Executor_Landroid_app_Activity_ScreenCaptureCallback_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerScreenCaptureCallback", "(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V", "GetRegisterScreenCaptureCallback_Ljava_util_concurrent_Executor_Landroid_app_Activity_ScreenCaptureCallback_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_CAPTURE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_CAPTURE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="callback" Type="Android.App.Activity+IScreenCaptureCallback" />
      </Parameters>
      <Docs>
        <param name="executor">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public virtual bool ReleaseInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReleaseInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ReleaseInstance" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : unit -&gt; bool&#xA;override this.ReleaseInstance : unit -&gt; bool" Usage="activity.ReleaseInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("releaseInstance", "()Z", "GetReleaseInstanceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("releaseInstance", "()Z", "GetReleaseInstanceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that the local app instance of this activity be released to free up its memory.</summary>
        <returns>Returns true if the activity was in a state that it has started the process
            of destroying its current instance; returns false if for any reason this could not
            be done: it is currently visible to the user, it is already being destroyed, it is
            being finished, it hasn't yet saved its state, etc.</returns>
        <remarks>
          <para>Ask that the local app instance of this activity be released to free up its memory.
            This is asking for the activity to be destroyed, but does &lt;b&gt;not&lt;/b&gt; finish the activity --
            a new instance of the activity will later be re-created if needed due to the user
            navigating back to it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#releaseInstance()" title="Reference documentation">Java documentation for <code>android.app.Activity.releaseInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDialog">
      <MemberSignature Language="C#" Value="public void RemoveDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDialog(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.RemoveDialog : int -&gt; unit" Usage="activity.RemoveDialog id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeDialog", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeDialog", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <summary>Removes any internal references to a dialog managed by this Activity.</summary>
        <remarks>
          <para>Removes any internal references to a dialog managed by this Activity.
            If the dialog is showing, it will dismiss it as part of the clean up.</para>
          <para>This can be useful if you know that you will never show a dialog again and
            want to avoid the overhead of saving and restoring it in the future.</para>
          <para>As of <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>, this function
            will not throw an exception if you try to remove an ID that does not
            currently have an associated dialog.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#removeDialog(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.removeDialog(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.ShowDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReportFullyDrawn">
      <MemberSignature Language="C#" Value="public virtual void ReportFullyDrawn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportFullyDrawn() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ReportFullyDrawn" />
      <MemberSignature Language="F#" Value="abstract member ReportFullyDrawn : unit -&gt; unit&#xA;override this.ReportFullyDrawn : unit -&gt; unit" Usage="activity.ReportFullyDrawn " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reportFullyDrawn", "()V", "GetReportFullyDrawnHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reportFullyDrawn", "()V", "GetReportFullyDrawnHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Report to the system that your app is now fully drawn, for diagnostic and
            optimization purposes.</summary>
        <remarks>
          <para>Report to the system that your app is now fully drawn, for diagnostic and
            optimization purposes.  The system may adjust optimizations to prioritize
            work that happens before reportFullyDrawn is called, to improve app startup.
            Misrepresenting the startup window by calling reportFullyDrawn too late or too
            early may decrease application and startup performance.</para>
          <para>This is also used to help instrument application launch times, so that the
            app can report when it is fully in a usable state; without this, the only thing
            the system itself can determine is the point at which the activity's window
            is &lt;em&gt;first&lt;/em&gt; drawn and displayed.  To participate in app launch time
            measurement, you should always call this method after first launch (when
            <c>#onCreate(android.os.Bundle)</c> is called), at the point where you have
            entirely drawn your UI and populated with all of the significant data.  You
            can safely call this method any time after first launch as well, in which case
            it will simply be ignored.</para>
          <para>If this method is called before the activity's window is &lt;em&gt;first&lt;/em&gt; drawn
            and displayed as measured by the system, the reported time here will be shifted
            to the system measured time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#reportFullyDrawn()" title="Reference documentation">Java documentation for <code>android.app.Activity.reportFullyDrawn()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestDragAndDropPermissions">
      <MemberSignature Language="C#" Value="public virtual Android.Views.DragAndDropPermissions? RequestDragAndDropPermissions (Android.Views.DragEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.DragAndDropPermissions RequestDragAndDropPermissions(class Android.Views.DragEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestDragAndDropPermissions(Android.Views.DragEvent)" />
      <MemberSignature Language="F#" Value="abstract member RequestDragAndDropPermissions : Android.Views.DragEvent -&gt; Android.Views.DragAndDropPermissions&#xA;override this.RequestDragAndDropPermissions : Android.Views.DragEvent -&gt; Android.Views.DragAndDropPermissions" Usage="activity.RequestDragAndDropPermissions e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestDragAndDropPermissions", "(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;", "GetRequestDragAndDropPermissions_Landroid_view_DragEvent_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestDragAndDropPermissions", "(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;", "GetRequestDragAndDropPermissions_Landroid_view_DragEvent_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DragAndDropPermissions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.DragEvent" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <param name="event">Drag event</param>
        <summary>Create <c>DragAndDropPermissions</c> object bound to this activity and controlling the
            access permissions for content URIs associated with the <c>DragEvent</c>.</summary>
        <returns>The <c>DragAndDropPermissions</c> object used to control access to the content URIs.
            Null if no content URIs are associated with the event or if permissions could not be granted.</returns>
        <remarks>
          <para>Create <c>DragAndDropPermissions</c> object bound to this activity and controlling the
            access permissions for content URIs associated with the <c>DragEvent</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestDragAndDropPermissions(android.view.DragEvent)" title="Reference documentation">Java documentation for <code>android.app.Activity.requestDragAndDropPermissions(android.view.DragEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestedOrientation">
      <MemberSignature Language="C#" Value="public virtual Android.Content.PM.ScreenOrientation RequestedOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Content.PM.ScreenOrientation RequestedOrientation" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.RequestedOrientation" />
      <MemberSignature Language="F#" Value="member this.RequestedOrientation : Android.Content.PM.ScreenOrientation with get, set" Usage="Android.App.Activity.RequestedOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRequestedOrientation", "()I", "GetGetRequestedOrientationHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRequestedOrientation", "()I", "GetGetRequestedOrientationHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setRequestedOrientation", "(I)V", "GetSetRequestedOrientation_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setRequestedOrientation", "(I)V", "GetSetRequestedOrientation_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ScreenOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="requestedOrientation">An orientation constant as used in
            <c>ActivityInfo#screenOrientation ActivityInfo.screenOrientation</c>.</param>
        <summary>Return the current requested orientation of the activity. -or- Change the desired orientation of this activity.</summary>
        <value>Returns an orientation constant as used in
            <c>ActivityInfo#screenOrientation ActivityInfo.screenOrientation</c>.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return the current requested orientation of the activity.  This will
            either be the orientation requested in its component's manifest, or
            the last requested orientation given to
            <c>#setRequestedOrientation(int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getRequestedOrientation()" title="Reference documentation">Java documentation for <code>android.app.Activity.getRequestedOrientation()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Change the desired orientation of this activity.  If the activity
            is currently in the foreground or otherwise impacting the screen
            orientation, the screen will immediately be changed (possibly causing
            the activity to be restarted). Otherwise, this will be used the next
            time the activity is visible.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setRequestedOrientation(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setRequestedOrientation(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFullscreenMode">
      <MemberSignature Language="C#" Value="public virtual void RequestFullscreenMode (Android.App.FullscreenModeRequest request, Android.OS.IOutcomeReceiver? approvalCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestFullscreenMode(valuetype Android.App.FullscreenModeRequest request, class Android.OS.IOutcomeReceiver approvalCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestFullscreenMode(Android.App.FullscreenModeRequest,Android.OS.IOutcomeReceiver)" />
      <MemberSignature Language="F#" Value="abstract member RequestFullscreenMode : Android.App.FullscreenModeRequest * Android.OS.IOutcomeReceiver -&gt; unit&#xA;override this.RequestFullscreenMode : Android.App.FullscreenModeRequest * Android.OS.IOutcomeReceiver -&gt; unit" Usage="activity.RequestFullscreenMode (request, approvalCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestFullscreenMode", "(ILandroid/os/OutcomeReceiver;)V", "GetRequestFullscreenMode_ILandroid_os_OutcomeReceiver_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestFullscreenMode", "(ILandroid/os/OutcomeReceiver;)V", "GetRequestFullscreenMode_ILandroid_os_OutcomeReceiver_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.App.FullscreenModeRequest">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="approvalCallback" Type="Android.OS.IOutcomeReceiver" />
      </Parameters>
      <Docs>
        <param name="request">Can be <c>#FULLSCREEN_MODE_REQUEST_ENTER</c> or
                           <c>#FULLSCREEN_MODE_REQUEST_EXIT</c> to indicate this request is to get
                           fullscreen or get restored.</param>
        <param name="approvalCallback">Optional callback, use <c>null</c> when not necessary. When the
                                    request is approved or rejected, the callback will be triggered. This
                                    will happen before any configuration change. The callback will be
                                    dispatched on the main thread. If the request is rejected, the
                                    Throwable provided will be an <c>IllegalStateException</c> with a
                                    detailed message can be retrieved by <c>Throwable#getMessage()</c>.</param>
        <summary>Request to put the a freeform activity into fullscreen.</summary>
        <remarks>
          <para>Request to put the a freeform activity into fullscreen. This will only be allowed if the
            activity is on a freeform display, such as a desktop device. The requester has to be the
            top-most activity of the focused display, and the request should be a response to a user
            input. When getting fullscreen and receiving corresponding
            <c>#onConfigurationChanged(Configuration)</c> and
            <c>#onMultiWindowModeChanged(boolean, Configuration)</c>, the activity should relayout
            itself and the system bars' visibilities can be controlled as usual fullscreen apps.
            
            Calling it again with the exit request can restore the activity to the previous status.
            This will only happen when it got into fullscreen through this API.
            
            If an app wants to be in fullscreen always, it should claim as not being resizable
            by setting
            <see href="https://developer.android.com/guide/topics/large-screens/multi-window-support#resizeableActivity"><c>android:resizableActivity="false"</c></see> instead of calling this API.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestFullscreenMode(int,%20android.os.OutcomeReceiver%3Cjava.lang.Void,%20java.lang.Throwable%3E)" title="Reference documentation">Java documentation for <code>android.app.Activity.requestFullscreenMode(int, android.os.OutcomeReceiver&lt;java.lang.Void, java.lang.Throwable&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestPermissions">
      <MemberSignature Language="C#" Value="public void RequestPermissions (string[] permissions, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestPermissions(string[] permissions, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestPermissions(System.String[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.RequestPermissions : string[] * int -&gt; unit" Usage="activity.RequestPermissions (permissions, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestPermissions", "([Ljava/lang/String;I)V", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestPermissions", "([Ljava/lang/String;I)V", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permissions">The requested permissions. Must me non-null and not empty.</param>
        <param name="requestCode">Application specific request code to match with a result
               reported to <c>#onRequestPermissionsResult(int, String[], int[])</c>.
               Should be &gt;= 0.</param>
        <summary>Requests permissions to be granted to this application.</summary>
        <remarks>
          <para>Requests permissions to be granted to this application. These permissions
            must be requested in your manifest, they should not be granted to your app,
            and they should have protection level <c>android.content.pm.PermissionInfo#PROTECTION_DANGEROUS dangerous</c>, regardless
            whether they are declared by the platform or a third-party app.</para>
          <para>Normal permissions <c>android.content.pm.PermissionInfo#PROTECTION_NORMAL</c>
            are granted at install time if requested in the manifest. Signature permissions
            <c>android.content.pm.PermissionInfo#PROTECTION_SIGNATURE</c> are granted at
            install time if requested in the manifest and the signature of your app matches
            the signature of the app declaring the permissions.</para>
          <para>Call <c>#shouldShowRequestPermissionRationale(String)</c> before calling this API to
            check if the system recommends to show a rationale UI before asking for a permission.</para>
          <para>If your app does not have the requested permissions the user will be presented
            with UI for accepting them. After the user has accepted or rejected the
            requested permissions you will receive a callback on <c>#onRequestPermissionsResult(int, String[], int[])</c> reporting whether the
            permissions were granted or not.</para>
          <para>Note that requesting a permission does not guarantee it will be granted and
            your app should be able to run without having this permission.</para>
          <para>This method may start an activity allowing the user to choose which permissions
            to grant and which to reject. Hence, you should be prepared that your activity
            may be paused and resumed. Further, granting some permissions may require
            a restart of you application. In such a case, the system will recreate the
            activity stack before delivering the result to <c>#onRequestPermissionsResult(int, String[], int[])</c>.</para>
          <para>When checking whether you have a permission you should use <c>#checkSelfPermission(String)</c>.</para>
          <para>You cannot request a permission if your activity sets <c>android.R.styleable#AndroidManifestActivity_noHistory noHistory</c> to
            <c>true</c> because in this case the activity would not receive
            result callbacks including <c>#onRequestPermissionsResult(int, String[], int[])</c>.</para>
          <para>The <see href="https://github.com/android/permissions-samples">
            RuntimePermissions</see> sample apps demonstrate how to use this method to
            request permissions at run time.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestPermissions(java.lang.String[],%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.requestPermissions(java.lang.String[], int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestShowKeyboardShortcuts">
      <MemberSignature Language="C#" Value="public void RequestShowKeyboardShortcuts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestShowKeyboardShortcuts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestShowKeyboardShortcuts" />
      <MemberSignature Language="F#" Value="member this.RequestShowKeyboardShortcuts : unit -&gt; unit" Usage="activity.RequestShowKeyboardShortcuts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestShowKeyboardShortcuts", "()V", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestShowKeyboardShortcuts", "()V", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Request the Keyboard Shortcuts screen to show up.</summary>
        <remarks>
          <para>Request the Keyboard Shortcuts screen to show up. This will trigger
            <c>#onProvideKeyboardShortcuts</c> to retrieve the shortcuts for the foreground activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestShowKeyboardShortcuts()" title="Reference documentation">Java documentation for <code>android.app.Activity.requestShowKeyboardShortcuts()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestVisibleBehind">
      <MemberSignature Language="C#" Value="public virtual bool RequestVisibleBehind (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestVisibleBehind(bool visible) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestVisibleBehind(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RequestVisibleBehind : bool -&gt; bool&#xA;override this.RequestVisibleBehind : bool -&gt; bool" Usage="activity.RequestVisibleBehind visible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestVisibleBehind", "(Z)Z", "GetRequestVisibleBehind_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestVisibleBehind", "(Z)Z", "GetRequestVisibleBehind_ZHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">true to notify the system that the activity wishes to be visible behind other
                           translucent activities, false to indicate otherwise. Resources must be
                           released when passing false to this method.</param>
        <summary>Activities that want to remain visible behind a translucent activity above them must call
            this method anytime between the start of <c>#onResume()</c> and the return from
            <c>#onPause()</c>.</summary>
        <returns>the resulting visibiity state. If true the activity will remain visible beyond
                 <c>#onPause()</c> if the next activity is translucent or not fullscreen. If false
                 then the activity may not count on being visible behind other translucent activities,
                 and must stop any media playback and release resources.
                 Returning false may occur in lieu of a call to <c>#onVisibleBehindCanceled()</c> so
                 the return value must be checked.</returns>
        <remarks>
          <para>Activities that want to remain visible behind a translucent activity above them must call
            this method anytime between the start of <c>#onResume()</c> and the return from
            <c>#onPause()</c>. If this call is successful then the activity will remain visible after
            <c>#onPause()</c> is called, and is allowed to continue playing media in the background.</para>
          <para>The actions of this call are reset each time that this activity is brought to the
            front. That is, every time <c>#onResume()</c> is called the activity will be assumed
            to not have requested visible behind. Therefore, if you want this activity to continue to
            be visible in the background you must call this method again.</para>
          <para>Only fullscreen opaque activities may make this call. I.e. this call is a nop
            for dialog and translucent activities.</para>
          <para>Under all circumstances, the activity must stop playing and release resources prior to or
            within a call to <c>#onVisibleBehindCanceled()</c> or if this call returns false.</para>
          <para>False will be returned any time this method is called between the return of onPause and
                 the next call to onResume.</para>
          <para>This member is deprecated. This method's functionality is no longer supported as of
                        <c>android.os.Build.VERSION_CODES#O</c> and will be removed in a future release.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestVisibleBehind(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.requestVisibleBehind(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.Activity.OnVisibleBehindCanceled" />
      </Docs>
    </Member>
    <Member MemberName="RequestWindowFeature">
      <MemberSignature Language="C#" Value="public bool RequestWindowFeature (Android.Views.WindowFeatures featureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequestWindowFeature(valuetype Android.Views.WindowFeatures featureId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequestWindowFeature(Android.Views.WindowFeatures)" />
      <MemberSignature Language="F#" Value="member this.RequestWindowFeature : Android.Views.WindowFeatures -&gt; bool" Usage="activity.RequestWindowFeature featureId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestWindowFeature", "(I)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestWindowFeature", "(I)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="featureId">The desired feature as defined in
                             <c>android.view.Window</c>.</param>
        <summary>Enable extended window features.</summary>
        <returns>Returns true if the requested feature is supported and now
                    enabled.</returns>
        <remarks>
          <para>Enable extended window features.  This is a convenience for calling
            <c>android.view.Window#requestFeature getWindow().requestFeature()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requestWindowFeature(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.requestWindowFeature(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.Window.RequestFeature(Android.Views.WindowFeatures)" />
      </Docs>
    </Member>
    <Member MemberName="RequireViewById">
      <MemberSignature Language="C#" Value="public Java.Lang.Object RequireViewById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object RequireViewById(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequireViewById(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.RequireViewById : int -&gt; Java.Lang.Object" Usage="activity.RequireViewById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requireViewById", "(I)Landroid/view/View;", "", ApiSince=28)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requireViewById", "(I)Landroid/view/View;", "", ApiSince=28)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends android.view.View" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends android.view.View" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">the ID to search for</param>
        <summary>Finds a view that was  identified by the <c>android:id</c> XML attribute that was processed
            in <c>#onCreate</c>, or throws an IllegalArgumentException if the ID is invalid, or there is
            no matching view in the hierarchy.</summary>
        <returns>a view with given ID</returns>
        <remarks>
          <para>Finds a view that was  identified by the <c>android:id</c> XML attribute that was processed
            in <c>#onCreate</c>, or throws an IllegalArgumentException if the ID is invalid, or there is
            no matching view in the hierarchy.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; In most cases -- depending on compiler support --
            the resulting view is automatically cast to the target class type. If
            the target class type is unconstrained, an explicit cast may be
            necessary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#requireViewById(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.requireViewById(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireViewById&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T RequireViewById&lt;T&gt; (int id) where T : Android.Views.View;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T RequireViewById&lt;(class Android.Views.View) T&gt;(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RequireViewById``1(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.RequireViewById : int -&gt; 'T (requires 'T :&gt; Android.Views.View)" Usage="activity.RequireViewById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Android.Views.View</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="id">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunOnUiThread">
      <MemberSignature Language="C#" Value="public void RunOnUiThread (Java.Lang.IRunnable? action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunOnUiThread(class Java.Lang.IRunnable action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RunOnUiThread(Java.Lang.IRunnable)" />
      <MemberSignature Language="F#" Value="member this.RunOnUiThread : Java.Lang.IRunnable -&gt; unit" Usage="activity.RunOnUiThread action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("runOnUiThread", "(Ljava/lang/Runnable;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("runOnUiThread", "(Ljava/lang/Runnable;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">the action to run on the UI thread</param>
        <summary>Runs the specified action on the UI thread.</summary>
        <remarks>
          <para>Runs the specified action on the UI thread. If the current thread is the UI
            thread, then the action is executed immediately. If the current thread is
            not the UI thread, the action is posted to the event queue of the UI thread.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#runOnUiThread(java.lang.Runnable)" title="Reference documentation">Java documentation for <code>android.app.Activity.runOnUiThread(java.lang.Runnable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunOnUiThread">
      <MemberSignature Language="C#" Value="public void RunOnUiThread (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunOnUiThread(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.RunOnUiThread(System.Action)" />
      <MemberSignature Language="F#" Value="member this.RunOnUiThread : Action -&gt; unit" Usage="activity.RunOnUiThread action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchEvent">
      <MemberSignature Language="C#" Value="public Android.Views.SearchEvent? SearchEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.SearchEvent SearchEvent" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.SearchEvent" />
      <MemberSignature Language="F#" Value="member this.SearchEvent : Android.Views.SearchEvent" Usage="Android.App.Activity.SearchEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSearchEvent", "()Landroid/view/SearchEvent;", "", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSearchEvent", "()Landroid/view/SearchEvent;", "", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.SearchEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>During the onSearchRequested() callbacks, this function will return the
            <c>SearchEvent</c> that triggered the callback, if it exists.</summary>
        <value>SearchEvent The SearchEvent that triggered the <c>#onSearchRequested</c> callback.</value>
        <remarks>
          <para>During the onSearchRequested() callbacks, this function will return the
            <c>SearchEvent</c> that triggered the callback, if it exists.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getSearchEvent()" title="Reference documentation">Java documentation for <code>android.app.Activity.getSearchEvent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionBar">
      <MemberSignature Language="C#" Value="public virtual void SetActionBar (Android.Widget.Toolbar? toolbar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionBar(class Android.Widget.Toolbar toolbar) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetActionBar(Android.Widget.Toolbar)" />
      <MemberSignature Language="F#" Value="abstract member SetActionBar : Android.Widget.Toolbar -&gt; unit&#xA;override this.SetActionBar : Android.Widget.Toolbar -&gt; unit" Usage="activity.SetActionBar toolbar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setActionBar", "(Landroid/widget/Toolbar;)V", "GetSetActionBar_Landroid_widget_Toolbar_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setActionBar", "(Landroid/widget/Toolbar;)V", "GetSetActionBar_Landroid_widget_Toolbar_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolbar" Type="Android.Widget.Toolbar" />
      </Parameters>
      <Docs>
        <param name="toolbar">Toolbar to set as the Activity's action bar, or <c>null</c> to clear it</param>
        <summary>Set a <c>android.widget.Toolbar Toolbar</c> to act as the <c>ActionBar</c> for this
            Activity window.</summary>
        <remarks>
          <para>Set a <c>android.widget.Toolbar Toolbar</c> to act as the <c>ActionBar</c> for this
            Activity window.</para>
          <para>When set to a non-null value the <c>#getActionBar()</c> method will return
            an <c>ActionBar</c> object that can be used to control the given toolbar as if it were
            a traditional window decor action bar. The toolbar's menu will be populated with the
            Activity's options menu and the navigation button will be wired through the standard
            <c>android.R.id#home home</c> menu select action.</para>
          <para>In order to use a Toolbar within the Activity's window content the application
            must not request the window feature <c>Window#FEATURE_ACTION_BAR FEATURE_ACTION_BAR</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setActionBar(android.widget.Toolbar)" title="Reference documentation">Java documentation for <code>android.app.Activity.setActionBar(android.widget.Toolbar)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetContentView(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member SetContentView : Android.Views.View -&gt; unit&#xA;override this.SetContentView : Android.Views.View -&gt; unit" Usage="activity.SetContentView view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setContentView", "(Landroid/view/View;)V", "GetSetContentView_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setContentView", "(Landroid/view/View;)V", "GetSetContentView_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <summary>Set the activity content to an explicit view.</summary>
        <remarks>
          <para>Set the activity content to an explicit view.  This view is placed
            directly into the activity's view hierarchy.  It can itself be a complex
            view hierarchy.  When calling this method, the layout parameters of the
            specified view are ignored.  Both the width and the height of the view are
            set by default to <c>ViewGroup.LayoutParams#MATCH_PARENT</c>. To use
            your own layout parameters, invoke
            <c>#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)</c>
            instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setContentView(android.view.View)" title="Reference documentation">Java documentation for <code>android.app.Activity.setContentView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(System.Int32)" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (int layoutResID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(int32 layoutResID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetContentView(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetContentView : int -&gt; unit&#xA;override this.SetContentView : int -&gt; unit" Usage="activity.SetContentView layoutResID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setContentView", "(I)V", "GetSetContentView_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setContentView", "(I)V", "GetSetContentView_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutResID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="layoutResID">Resource ID to be inflated.</param>
        <summary>Set the activity content from a layout resource.</summary>
        <remarks>
          <para>Set the activity content from a layout resource.  The resource will be
            inflated, adding all top-level views to the activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setContentView(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setContentView(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View? view, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetContentView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)" />
      <MemberSignature Language="F#" Value="abstract member SetContentView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.SetContentView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="activity.SetContentView (view, params)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetSetContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetSetContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.</param>
        <summary>Set the activity content from a layout resource.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setContentView(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setContentView(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.App.Activity.SetContentView(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetDefaultKeyMode">
      <MemberSignature Language="C#" Value="public void SetDefaultKeyMode (Android.App.DefaultKey mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDefaultKeyMode(valuetype Android.App.DefaultKey mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetDefaultKeyMode(Android.App.DefaultKey)" />
      <MemberSignature Language="F#" Value="member this.SetDefaultKeyMode : Android.App.DefaultKey -&gt; unit" Usage="activity.SetDefaultKeyMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setDefaultKeyMode", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setDefaultKeyMode", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.App.DefaultKey">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">The desired default key mode constant.</param>
        <summary>Select the default key handling for this activity.</summary>
        <remarks>
          <para>Select the default key handling for this activity.  This controls what
            will happen to key events that are not otherwise handled.  The default
            mode (<c>#DEFAULT_KEYS_DISABLE</c>) will simply drop them on the
            floor. Other modes allow you to launch the dialer
            (<c>#DEFAULT_KEYS_DIALER</c>), execute a shortcut in your options
            menu without requiring the menu key be held down
            (<c>#DEFAULT_KEYS_SHORTCUT</c>), or launch a search (<c>#DEFAULT_KEYS_SEARCH_LOCAL</c>
            and <c>#DEFAULT_KEYS_SEARCH_GLOBAL</c>).</para>
          <para>Note that the mode selected here does not impact the default
            handling of system keys, such as the "back" and "menu" keys, and your
            activity and its views always get a first chance to receive and handle
            all application keys.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setDefaultKeyMode(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setDefaultKeyMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnKeyDown(Android.Views.Keycode, Android.Views.KeyEvent)" />
      </Docs>
    </Member>
    <Member MemberName="SetEnterSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetEnterSharedElementCallback (Android.App.SharedElementCallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnterSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetEnterSharedElementCallback(Android.App.SharedElementCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetEnterSharedElementCallback : Android.App.SharedElementCallback -&gt; unit&#xA;override this.SetEnterSharedElementCallback : Android.App.SharedElementCallback -&gt; unit" Usage="activity.SetEnterSharedElementCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setEnterSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetEnterSharedElementCallback_Landroid_app_SharedElementCallback_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setEnterSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetEnterSharedElementCallback_Landroid_app_SharedElementCallback_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate shared element transitions on the launched Activity.</param>
        <summary>When <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.view.View, String)</c> was used to start an Activity, &lt;var&gt;callback&lt;/var&gt;
            will be called to handle shared elements on the <i>launched</i> Activity.</summary>
        <remarks>
          <para>When <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.view.View, String)</c> was used to start an Activity, &lt;var&gt;callback&lt;/var&gt;
            will be called to handle shared elements on the <i>launched</i> Activity. This requires
            <c>Window#FEATURE_ACTIVITY_TRANSITIONS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setEnterSharedElementCallback(android.app.SharedElementCallback)" title="Reference documentation">Java documentation for <code>android.app.Activity.setEnterSharedElementCallback(android.app.SharedElementCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExitSharedElementCallback">
      <MemberSignature Language="C#" Value="public virtual void SetExitSharedElementCallback (Android.App.SharedElementCallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExitSharedElementCallback(class Android.App.SharedElementCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetExitSharedElementCallback(Android.App.SharedElementCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetExitSharedElementCallback : Android.App.SharedElementCallback -&gt; unit&#xA;override this.SetExitSharedElementCallback : Android.App.SharedElementCallback -&gt; unit" Usage="activity.SetExitSharedElementCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setExitSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetExitSharedElementCallback_Landroid_app_SharedElementCallback_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setExitSharedElementCallback", "(Landroid/app/SharedElementCallback;)V", "GetSetExitSharedElementCallback_Landroid_app_SharedElementCallback_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.SharedElementCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Used to manipulate shared element transitions on the launching Activity.</param>
        <summary>When <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.view.View, String)</c> was used to start an Activity, &lt;var&gt;callback&lt;/var&gt;
            will be called to handle shared elements on the <i>launching</i> Activity.</summary>
        <remarks>
          <para>When <c>android.app.ActivityOptions#makeSceneTransitionAnimation(Activity,
            android.view.View, String)</c> was used to start an Activity, &lt;var&gt;callback&lt;/var&gt;
            will be called to handle shared elements on the <i>launching</i> Activity. Most
            calls will only come when returning from the started Activity.
            This requires <c>Window#FEATURE_ACTIVITY_TRANSITIONS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setExitSharedElementCallback(android.app.SharedElementCallback)" title="Reference documentation">Java documentation for <code>android.app.Activity.setExitSharedElementCallback(android.app.SharedElementCallback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawable">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawable (Android.Views.WindowFeatures featureId, Android.Graphics.Drawables.Drawable? drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawable(valuetype Android.Views.WindowFeatures featureId, class Android.Graphics.Drawables.Drawable drawable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetFeatureDrawable(Android.Views.WindowFeatures,Android.Graphics.Drawables.Drawable)" />
      <MemberSignature Language="F#" Value="member this.SetFeatureDrawable : Android.Views.WindowFeatures * Android.Graphics.Drawables.Drawable -&gt; unit" Usage="activity.SetFeatureDrawable (featureId, drawable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFeatureDrawable", "(ILandroid/graphics/drawable/Drawable;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFeatureDrawable", "(ILandroid/graphics/drawable/Drawable;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="drawable" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="drawable">To be added.</param>
        <summary>Convenience for calling
            <c>android.view.Window#setFeatureDrawable(int, Drawable)</c>.</summary>
        <remarks>
          <para>Convenience for calling
            <c>android.view.Window#setFeatureDrawable(int, Drawable)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setFeatureDrawable(int,%20android.graphics.drawable.Drawable)" title="Reference documentation">Java documentation for <code>android.app.Activity.setFeatureDrawable(int, android.graphics.drawable.Drawable)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableAlpha">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableAlpha (Android.Views.WindowFeatures featureId, int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableAlpha(valuetype Android.Views.WindowFeatures featureId, int32 alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetFeatureDrawableAlpha(Android.Views.WindowFeatures,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetFeatureDrawableAlpha : Android.Views.WindowFeatures * int -&gt; unit" Usage="activity.SetFeatureDrawableAlpha (featureId, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFeatureDrawableAlpha", "(II)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFeatureDrawableAlpha", "(II)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Convenience for calling
            <c>android.view.Window#setFeatureDrawableAlpha</c>.</summary>
        <remarks>
          <para>Convenience for calling
            <c>android.view.Window#setFeatureDrawableAlpha</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setFeatureDrawableAlpha(int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setFeatureDrawableAlpha(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableResource">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableResource (Android.Views.WindowFeatures featureId, int resId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableResource(valuetype Android.Views.WindowFeatures featureId, int32 resId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetFeatureDrawableResource(Android.Views.WindowFeatures,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetFeatureDrawableResource : Android.Views.WindowFeatures * int -&gt; unit" Usage="activity.SetFeatureDrawableResource (featureId, resId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFeatureDrawableResource", "(II)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFeatureDrawableResource", "(II)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="resId">To be added.</param>
        <summary>Convenience for calling
            <c>android.view.Window#setFeatureDrawableResource</c>.</summary>
        <remarks>
          <para>Convenience for calling
            <c>android.view.Window#setFeatureDrawableResource</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setFeatureDrawableResource(int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setFeatureDrawableResource(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFeatureDrawableUri">
      <MemberSignature Language="C#" Value="public void SetFeatureDrawableUri (Android.Views.WindowFeatures featureId, Android.Net.Uri? uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFeatureDrawableUri(valuetype Android.Views.WindowFeatures featureId, class Android.Net.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetFeatureDrawableUri(Android.Views.WindowFeatures,Android.Net.Uri)" />
      <MemberSignature Language="F#" Value="member this.SetFeatureDrawableUri : Android.Views.WindowFeatures * Android.Net.Uri -&gt; unit" Usage="activity.SetFeatureDrawableUri (featureId, uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFeatureDrawableUri", "(ILandroid/net/Uri;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFeatureDrawableUri", "(ILandroid/net/Uri;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="Android.Views.WindowFeatures">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="featureId">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>Convenience for calling
            <c>android.view.Window#setFeatureDrawableUri</c>.</summary>
        <remarks>
          <para>Convenience for calling
            <c>android.view.Window#setFeatureDrawableUri</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setFeatureDrawableUri(int,%20android.net.Uri)" title="Reference documentation">Java documentation for <code>android.app.Activity.setFeatureDrawableUri(int, android.net.Uri)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFinishOnTouchOutside">
      <MemberSignature Language="C#" Value="public virtual void SetFinishOnTouchOutside (bool finish);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFinishOnTouchOutside(bool finish) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetFinishOnTouchOutside(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetFinishOnTouchOutside : bool -&gt; unit&#xA;override this.SetFinishOnTouchOutside : bool -&gt; unit" Usage="activity.SetFinishOnTouchOutside finish" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFinishOnTouchOutside", "(Z)V", "GetSetFinishOnTouchOutside_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFinishOnTouchOutside", "(Z)V", "GetSetFinishOnTouchOutside_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finish" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finish">To be added.</param>
        <summary>Sets whether this activity is finished when touched outside its window's
            bounds.</summary>
        <remarks>
          <para>Sets whether this activity is finished when touched outside its window's
            bounds.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setFinishOnTouchOutside(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setFinishOnTouchOutside(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetInheritShowWhenLocked">
      <MemberSignature Language="C#" Value="public virtual void SetInheritShowWhenLocked (bool inheritShowWhenLocked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInheritShowWhenLocked(bool inheritShowWhenLocked) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetInheritShowWhenLocked(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetInheritShowWhenLocked : bool -&gt; unit&#xA;override this.SetInheritShowWhenLocked : bool -&gt; unit" Usage="activity.SetInheritShowWhenLocked inheritShowWhenLocked" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setInheritShowWhenLocked", "(Z)V", "GetSetInheritShowWhenLocked_ZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setInheritShowWhenLocked", "(Z)V", "GetSetInheritShowWhenLocked_ZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inheritShowWhenLocked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inheritShowWhenLocked">
          <c>true</c> to show the <c>Activity</c> on top of the lock
                                         screen when this activity has another activity behind it with
                                         the showWhenLock attribute set; <c>false</c> otherwise.</param>
        <summary>Specifies whether this <c>Activity</c> should be shown on top of the lock screen whenever
            the lockscreen is up and this activity has another activity behind it with the showWhenLock
            attribute set.</summary>
        <remarks>
          <para>Specifies whether this <c>Activity</c> should be shown on top of the lock screen whenever
            the lockscreen is up and this activity has another activity behind it with the showWhenLock
            attribute set. That is, this activity is only visible on the lock screen if there is another
            activity with the showWhenLock attribute visible at the same time on the lock screen. A use
            case for this is permission dialogs, that should only be visible on the lock screen if their
            requesting activity is also visible. This value can be set as a manifest attribute using
            android.R.attr#inheritShowWhenLocked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setInheritShowWhenLocked(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setInheritShowWhenLocked(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocusContext">
      <MemberSignature Language="C#" Value="public virtual void SetLocusContext (Android.Content.LocusId? locusId, Android.OS.Bundle? bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocusContext(class Android.Content.LocusId locusId, class Android.OS.Bundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetLocusContext(Android.Content.LocusId,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member SetLocusContext : Android.Content.LocusId * Android.OS.Bundle -&gt; unit&#xA;override this.SetLocusContext : Android.Content.LocusId * Android.OS.Bundle -&gt; unit" Usage="activity.SetLocusContext (locusId, bundle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLocusContext", "(Landroid/content/LocusId;Landroid/os/Bundle;)V", "GetSetLocusContext_Landroid_content_LocusId_Landroid_os_Bundle_Handler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLocusContext", "(Landroid/content/LocusId;Landroid/os/Bundle;)V", "GetSetLocusContext_Landroid_content_LocusId_Landroid_os_Bundle_Handler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locusId" Type="Android.Content.LocusId" />
        <Parameter Name="bundle" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="locusId">a unique, stable id that identifies this <c>Activity</c> instance. LocusId
                 is an opaque ID that links this Activity's state to different Android concepts:
                 <c>android.content.pm.ShortcutInfo.Builder#setLocusId(android.content.LocusId)
                 setLocusId</c>. LocusID is null by default or if you explicitly reset it.</param>
        <param name="bundle">extras set or updated as part of this locus context. This may help provide
                 additional metadata such as URLs, conversation participants specific to this
                 <c>Activity</c>'s context. Bundle can be null if additional metadata is not needed.
                 Bundle should always be null for null locusId.</param>
        <summary>Sets the <c>android.content.LocusId</c> for this activity.</summary>
        <remarks>
          <para>Sets the <c>android.content.LocusId</c> for this activity. The locus id
            helps identify different instances of the same <c>Activity</c> class.</para>
          <para>For example, a locus id based on a specific conversation could be set on a
            conversation app's chat <c>Activity</c>. The system can then use this locus id
            along with app's contents to provide ranking signals in various UI surfaces
            including sharing, notifications, shortcuts and so on.</para>
          <para>It is recommended to set the same locus id in the shortcut's locus id using
            <c>android.content.pm.ShortcutInfo.Builder#setLocusId(android.content.LocusId)
                 setLocusId</c>
            so that the system can learn appropriate ranking signals linking the activity's
            locus id with the matching shortcut.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setLocusContext(android.content.LocusId,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.setLocusContext(android.content.LocusId, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPersistent">
      <MemberSignature Language="C#" Value="public virtual void SetPersistent (bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPersistent(bool isPersistent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetPersistent(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetPersistent : bool -&gt; unit&#xA;override this.SetPersistent : bool -&gt; unit" Usage="activity.SetPersistent isPersistent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPersistent", "(Z)V", "GetSetPersistent_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPersistent", "(Z)V", "GetSetPersistent_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isPersistent">To be added.</param>
        <summary>This member is deprecated.</summary>
        <remarks>
          <para>This member is deprecated. As of <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>
            this is a no-op.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setPersistent(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setPersistent(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPictureInPictureParams">
      <MemberSignature Language="C#" Value="public virtual void SetPictureInPictureParams (Android.App.PictureInPictureParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPictureInPictureParams(class Android.App.PictureInPictureParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetPictureInPictureParams(Android.App.PictureInPictureParams)" />
      <MemberSignature Language="F#" Value="abstract member SetPictureInPictureParams : Android.App.PictureInPictureParams -&gt; unit&#xA;override this.SetPictureInPictureParams : Android.App.PictureInPictureParams -&gt; unit" Usage="activity.SetPictureInPictureParams params" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPictureInPictureParams", "(Landroid/app/PictureInPictureParams;)V", "GetSetPictureInPictureParams_Landroid_app_PictureInPictureParams_Handler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPictureInPictureParams", "(Landroid/app/PictureInPictureParams;)V", "GetSetPictureInPictureParams_Landroid_app_PictureInPictureParams_Handler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.App.PictureInPictureParams" />
      </Parameters>
      <Docs>
        <param name="params">the new parameters for the picture-in-picture.</param>
        <summary>Updates the properties of the picture-in-picture activity, or sets it to be used later when
            <c>#enterPictureInPictureMode()</c> is called.</summary>
        <remarks>
          <para>Updates the properties of the picture-in-picture activity, or sets it to be used later when
            <c>#enterPictureInPictureMode()</c> is called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setPictureInPictureParams(android.app.PictureInPictureParams)" title="Reference documentation">Java documentation for <code>android.app.Activity.setPictureInPictureParams(android.app.PictureInPictureParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProgress">
      <MemberSignature Language="C#" Value="public void SetProgress (int progress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgress(int32 progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetProgress(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetProgress : int -&gt; unit" Usage="activity.SetProgress progress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setProgress", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setProgress", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="progress">The progress for the progress bar. Valid ranges are from
                       0 to 10000 (both inclusive). If 10000 is given, the progress
                       bar will be completely filled and will fade out.</param>
        <summary>Sets the progress for the progress bars in the title.</summary>
        <remarks>
          <para>Sets the progress for the progress bars in the title.</para>
          <para>In order for the progress bar to be shown, the feature must be requested
            via <c>#requestWindowFeature(int)</c>.</para>
          <para>This member is deprecated. No longer supported starting in API 21.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setProgress(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setProgress(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarIndeterminate">
      <MemberSignature Language="C#" Value="public void SetProgressBarIndeterminate (bool indeterminate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarIndeterminate(bool indeterminate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetProgressBarIndeterminate(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetProgressBarIndeterminate : bool -&gt; unit" Usage="activity.SetProgressBarIndeterminate indeterminate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setProgressBarIndeterminate", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setProgressBarIndeterminate", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indeterminate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indeterminate">Whether the horizontal progress bar should be indeterminate.</param>
        <summary>Sets whether the horizontal progress bar in the title should be indeterminate (the circular
            is always indeterminate).</summary>
        <remarks>
          <para>Sets whether the horizontal progress bar in the title should be indeterminate (the circular
            is always indeterminate).</para>
          <para>In order for the progress bar to be shown, the feature must be requested
            via <c>#requestWindowFeature(int)</c>.</para>
          <para>This member is deprecated. No longer supported starting in API 21.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setProgressBarIndeterminate(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setProgressBarIndeterminate(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarIndeterminateVisibility">
      <MemberSignature Language="C#" Value="public void SetProgressBarIndeterminateVisibility (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarIndeterminateVisibility(bool visible) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetProgressBarIndeterminateVisibility(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetProgressBarIndeterminateVisibility : bool -&gt; unit" Usage="activity.SetProgressBarIndeterminateVisibility visible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setProgressBarIndeterminateVisibility", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setProgressBarIndeterminateVisibility", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">Whether to show the progress bars in the title.</param>
        <summary>Sets the visibility of the indeterminate progress bar in the title.</summary>
        <remarks>
          <para>Sets the visibility of the indeterminate progress bar in the title.</para>
          <para>In order for the progress bar to be shown, the feature must be requested
            via <c>#requestWindowFeature(int)</c>.</para>
          <para>This member is deprecated. No longer supported starting in API 21.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setProgressBarIndeterminateVisibility(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setProgressBarIndeterminateVisibility(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetProgressBarVisibility">
      <MemberSignature Language="C#" Value="public void SetProgressBarVisibility (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProgressBarVisibility(bool visible) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetProgressBarVisibility(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetProgressBarVisibility : bool -&gt; unit" Usage="activity.SetProgressBarVisibility visible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setProgressBarVisibility", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setProgressBarVisibility", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">Whether to show the progress bars in the title.</param>
        <summary>Sets the visibility of the progress bar in the title.</summary>
        <remarks>
          <para>Sets the visibility of the progress bar in the title.</para>
          <para>In order for the progress bar to be shown, the feature must be requested
            via <c>#requestWindowFeature(int)</c>.</para>
          <para>This member is deprecated. No longer supported starting in API 21.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setProgressBarVisibility(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setProgressBarVisibility(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetRecentsScreenshotEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetRecentsScreenshotEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRecentsScreenshotEnabled(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetRecentsScreenshotEnabled(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetRecentsScreenshotEnabled : bool -&gt; unit&#xA;override this.SetRecentsScreenshotEnabled : bool -&gt; unit" Usage="activity.SetRecentsScreenshotEnabled enabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRecentsScreenshotEnabled", "(Z)V", "GetSetRecentsScreenshotEnabled_ZHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRecentsScreenshotEnabled", "(Z)V", "GetSetRecentsScreenshotEnabled_ZHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">
          <c>true</c> to enable recents screenshots; <c>false</c> otherwise.</param>
        <summary>If set to false, this indicates to the system that it should never take a
            screenshot of the activity to be used as a representation in recents screen.</summary>
        <remarks>
          <para>If set to false, this indicates to the system that it should never take a
            screenshot of the activity to be used as a representation in recents screen. By default, this
            value is <c>true</c>.</para>
          <para>Note that the system may use the window background of the theme instead to represent
            the window when it is not running.</para>
          <para>Also note that in comparison to <c>android.view.WindowManager.LayoutParams#FLAG_SECURE</c>,
            this only affects the behavior when the activity's screenshot would be used as a
            representation when the activity is not in a started state, i.e. in Overview. The system may
            still take screenshots of the activity in other contexts; for example, when the user takes a
            screenshot of the entire screen, or when the active
            <c>android.service.voice.VoiceInteractionService</c> requests a screenshot via
            <c>android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOT</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setRecentsScreenshotEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setRecentsScreenshotEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (Android.App.Result resultCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(valuetype Android.App.Result resultCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetResult(Android.App.Result)" />
      <MemberSignature Language="F#" Value="member this.SetResult : Android.App.Result -&gt; unit" Usage="activity.SetResult resultCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setResult", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setResult", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resultCode">The result code to propagate back to the originating
                              activity, often RESULT_CANCELED or RESULT_OK</param>
        <summary>Call this to set the result that your activity will return to its
            caller.</summary>
        <remarks>
          <para>Call this to set the result that your activity will return to its
            caller.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setResult(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setResult(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result, Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (Android.App.Result resultCode, Android.Content.Intent? data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(valuetype Android.App.Result resultCode, class Android.Content.Intent data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetResult(Android.App.Result,Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="member this.SetResult : Android.App.Result * Android.Content.Intent -&gt; unit" Usage="activity.SetResult (resultCode, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setResult", "(ILandroid/content/Intent;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setResult", "(ILandroid/content/Intent;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="data" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="resultCode">The result code to propagate back to the originating
                              activity, often RESULT_CANCELED or RESULT_OK</param>
        <param name="data">The data to propagate back to the originating activity.</param>
        <summary>Call this to set the result that your activity will return to its
            caller.</summary>
        <remarks>
          <para>Call this to set the result that your activity will return to its
            caller.</para>
          <para>As of <c>android.os.Build.VERSION_CODES#GINGERBREAD</c>, the Intent
            you supply here can have <c>Intent#FLAG_GRANT_READ_URI_PERMISSION
            Intent.FLAG_GRANT_READ_URI_PERMISSION</c> and/or <c>Intent#FLAG_GRANT_WRITE_URI_PERMISSION
            Intent.FLAG_GRANT_WRITE_URI_PERMISSION</c> set.  This will grant the
            Activity receiving the result access to the specific URIs in the Intent.
            Access will remain until the Activity has finished (it will remain across the hosting
            process being killed and other temporary destruction) and will be added
            to any existing set of URI permissions it already holds.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setResult(int,%20android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.setResult(int, android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.SetResult(Android.App.Result)" />
      </Docs>
    </Member>
    <Member MemberName="SetSecondaryProgress">
      <MemberSignature Language="C#" Value="public void SetSecondaryProgress (int secondaryProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSecondaryProgress(int32 secondaryProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetSecondaryProgress(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetSecondaryProgress : int -&gt; unit" Usage="activity.SetSecondaryProgress secondaryProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSecondaryProgress", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSecondaryProgress", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secondaryProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="secondaryProgress">The secondary progress for the progress bar. Valid ranges are from
                       0 to 10000 (both inclusive).</param>
        <summary>Sets the secondary progress for the progress bar in the title.</summary>
        <remarks>
          <para>Sets the secondary progress for the progress bar in the title. This
            progress is drawn between the primary progress (set via
            <c>#setProgress(int)</c> and the background. It can be ideal for media
            scenarios such as showing the buffering progress while the default
            progress shows the play progress.</para>
          <para>In order for the progress bar to be shown, the feature must be requested
            via <c>#requestWindowFeature(int)</c>.</para>
          <para>This member is deprecated. No longer supported starting in API 21.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setSecondaryProgress(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setSecondaryProgress(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetShouldDockBigOverlays">
      <MemberSignature Language="C#" Value="public virtual void SetShouldDockBigOverlays (bool shouldDockBigOverlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShouldDockBigOverlays(bool shouldDockBigOverlays) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetShouldDockBigOverlays(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetShouldDockBigOverlays : bool -&gt; unit&#xA;override this.SetShouldDockBigOverlays : bool -&gt; unit" Usage="activity.SetShouldDockBigOverlays shouldDockBigOverlays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setShouldDockBigOverlays", "(Z)V", "GetSetShouldDockBigOverlays_ZHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setShouldDockBigOverlays", "(Z)V", "GetSetShouldDockBigOverlays_ZHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shouldDockBigOverlays" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="shouldDockBigOverlays">indicates that big overlays should be docked next to the
                                         activity instead of overlay its content</param>
        <summary>Specifies a preference to dock big overlays like the expanded picture-in-picture on TV
            (see <c>PictureInPictureParams.Builder#setExpandedAspectRatio</c>).</summary>
        <remarks>
          <para>Specifies a preference to dock big overlays like the expanded picture-in-picture on TV
            (see <c>PictureInPictureParams.Builder#setExpandedAspectRatio</c>). Docking puts the
            big overlay side-by-side next to this activity, so that both windows are fully visible to
            the user.</para>
          <para>If unspecified, whether the overlay window will be docked or not, will be defined
            by the system.</para>
          <para>If specified, the system will try to respect the preference, but it may be
            overridden by a user preference.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setShouldDockBigOverlays(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setShouldDockBigOverlays(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShowWhenLocked">
      <MemberSignature Language="C#" Value="public virtual void SetShowWhenLocked (bool showWhenLocked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShowWhenLocked(bool showWhenLocked) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetShowWhenLocked(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetShowWhenLocked : bool -&gt; unit&#xA;override this.SetShowWhenLocked : bool -&gt; unit" Usage="activity.SetShowWhenLocked showWhenLocked" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setShowWhenLocked", "(Z)V", "GetSetShowWhenLocked_ZHandler", ApiSince=27)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setShowWhenLocked", "(Z)V", "GetSetShowWhenLocked_ZHandler", ApiSince=27)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="showWhenLocked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="showWhenLocked">
          <c>true</c> to show the <c>Activity</c> on top of the lock screen;
                                              <c>false</c> otherwise.</param>
        <summary>Specifies whether an <c>Activity</c> should be shown on top of the lock screen whenever
            the lockscreen is up and the activity is resumed.</summary>
        <remarks>
          <para>Specifies whether an <c>Activity</c> should be shown on top of the lock screen whenever
            the lockscreen is up and the activity is resumed. Normally an activity will be transitioned
            to the stopped state if it is started while the lockscreen is up, but with this flag set the
            activity will remain in the resumed state visible on-top of the lock screen. This value can
            be set as a manifest attribute using <c>android.R.attr#showWhenLocked</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setShowWhenLocked(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setShowWhenLocked(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTaskDescription">
      <MemberSignature Language="C#" Value="public virtual void SetTaskDescription (Android.App.ActivityManager.TaskDescription? taskDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTaskDescription(class Android.App.ActivityManager/TaskDescription taskDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetTaskDescription(Android.App.ActivityManager.TaskDescription)" />
      <MemberSignature Language="F#" Value="abstract member SetTaskDescription : Android.App.ActivityManager.TaskDescription -&gt; unit&#xA;override this.SetTaskDescription : Android.App.ActivityManager.TaskDescription -&gt; unit" Usage="activity.SetTaskDescription taskDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTaskDescription", "(Landroid/app/ActivityManager$TaskDescription;)V", "GetSetTaskDescription_Landroid_app_ActivityManager_TaskDescription_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTaskDescription", "(Landroid/app/ActivityManager$TaskDescription;)V", "GetSetTaskDescription_Landroid_app_ActivityManager_TaskDescription_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskDescription" Type="Android.App.ActivityManager+TaskDescription" />
      </Parameters>
      <Docs>
        <param name="taskDescription">The TaskDescription properties that describe the task with this activity</param>
        <summary>Sets information describing the task with this activity for presentation inside the Recents
            System UI.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTaskDescription(android.app.TaskDescription)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTaskDescription(android.app.TaskDescription)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.App.ActivityManager.GetRecentTasks(System.Int32, Android.App.RecentTaskFlags)" />
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (int titleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(int32 titleId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetTitle(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetTitle : int -&gt; unit&#xA;override this.SetTitle : int -&gt; unit" Usage="activity.SetTitle titleId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTitle", "(I)V", "GetSetTitle_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTitle", "(I)V", "GetSetTitle_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="titleId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="titleId">To be added.</param>
        <summary>Change the title associated with this activity.</summary>
        <remarks>
          <para>Change the title associated with this activity.  If this is a
            top-level activity, the title for its window will change.  If it
            is an embedded activity, the parent can do whatever it wants
            with it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTitle(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTitle(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetTranslucent">
      <MemberSignature Language="C#" Value="public virtual bool SetTranslucent (bool translucent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetTranslucent(bool translucent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetTranslucent(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetTranslucent : bool -&gt; bool&#xA;override this.SetTranslucent : bool -&gt; bool" Usage="activity.SetTranslucent translucent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTranslucent", "(Z)Z", "GetSetTranslucent_ZHandler", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTranslucent", "(Z)Z", "GetSetTranslucent_ZHandler", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translucent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="translucent">
          <c>true</c> convert from opaque to translucent.
                               <c>false</c> convert from translucent to opaque.</param>
        <summary>Convert an activity, which particularly with <c>android.R.attr#windowIsTranslucent</c> or
            <c>android.R.attr#windowIsFloating</c> attribute, to a fullscreen opaque activity, or
            convert it from opaque back to translucent.</summary>
        <returns>The result of setting translucency. Return <c>true</c> if set successfully,
                    <c>false</c> otherwise.</returns>
        <remarks>
          <para>Convert an activity, which particularly with <c>android.R.attr#windowIsTranslucent</c> or
            <c>android.R.attr#windowIsFloating</c> attribute, to a fullscreen opaque activity, or
            convert it from opaque back to translucent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTranslucent(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTranslucent(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTurnScreenOn">
      <MemberSignature Language="C#" Value="public virtual void SetTurnScreenOn (bool turnScreenOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTurnScreenOn(bool turnScreenOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetTurnScreenOn(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetTurnScreenOn : bool -&gt; unit&#xA;override this.SetTurnScreenOn : bool -&gt; unit" Usage="activity.SetTurnScreenOn turnScreenOn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setTurnScreenOn", "(Z)V", "GetSetTurnScreenOn_ZHandler", ApiSince=27)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setTurnScreenOn", "(Z)V", "GetSetTurnScreenOn_ZHandler", ApiSince=27)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android27.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android27.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnScreenOn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="turnScreenOn">
          <c>true</c> to turn on the screen; <c>false</c> otherwise.</param>
        <summary>Specifies whether the screen should be turned on when the <c>Activity</c> is resumed.</summary>
        <remarks>
          <para>Specifies whether the screen should be turned on when the <c>Activity</c> is resumed.
            Normally an activity will be transitioned to the stopped state if it is started while the
            screen if off, but with this flag set the activity will cause the screen to turn on if the
            activity will be visible and resumed due to the screen coming on. The screen will not be
            turned on if the activity won't be visible after the screen is turned on. This flag is
            normally used in conjunction with the <c>android.R.attr#showWhenLocked</c> flag to make sure
            the activity is visible after the screen is turned on when the lockscreen is up. In addition,
            if this flag is set and the activity calls <c>KeyguardManager#requestDismissKeyguard(Activity, KeyguardManager.KeyguardDismissCallback)</c>
            the screen will turn on.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTurnScreenOn(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTurnScreenOn(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisible">
      <MemberSignature Language="C#" Value="public virtual void SetVisible (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisible(bool visible) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetVisible(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetVisible : bool -&gt; unit&#xA;override this.SetVisible : bool -&gt; unit" Usage="activity.SetVisible visible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setVisible", "(Z)V", "GetSetVisible_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setVisible", "(Z)V", "GetSetVisible_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible">To be added.</param>
        <summary>Control whether this activity's main window is visible.</summary>
        <remarks>
          <para>Control whether this activity's main window is visible.  This is intended
            only for the special case of an activity that is not going to show a
            UI itself, but can't just finish prior to onResume() because it needs
            to wait for a service binding or such.  Setting this to false allows
            you to prevent your UI from being shown during that time.</para>
          <para>The default value for this is taken from the
            <c>android.R.attr#windowNoDisplay</c> attribute of the activity's theme.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setVisible(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.setVisible(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetVrModeEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetVrModeEnabled (bool enabled, Android.Content.ComponentName requestedComponent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVrModeEnabled(bool enabled, class Android.Content.ComponentName requestedComponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.SetVrModeEnabled(System.Boolean,Android.Content.ComponentName)" />
      <MemberSignature Language="F#" Value="abstract member SetVrModeEnabled : bool * Android.Content.ComponentName -&gt; unit&#xA;override this.SetVrModeEnabled : bool * Android.Content.ComponentName -&gt; unit" Usage="activity.SetVrModeEnabled (enabled, requestedComponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setVrModeEnabled", "(ZLandroid/content/ComponentName;)V", "GetSetVrModeEnabled_ZLandroid_content_ComponentName_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setVrModeEnabled", "(ZLandroid/content/ComponentName;)V", "GetSetVrModeEnabled_ZLandroid_content_ComponentName_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="requestedComponent" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="enabled">
          <c>true</c> to enable this mode.</param>
        <param name="requestedComponent">the name of the component to use as a
                   <c>android.service.vr.VrListenerService</c> while VR mode is enabled.</param>
        <summary>Enable or disable virtual reality (VR) mode for this Activity.</summary>
        <remarks>
          <para>Enable or disable virtual reality (VR) mode for this Activity.</para>
          <para>VR mode is a hint to Android system to switch to a mode optimized for VR applications
            while this Activity has user focus.</para>
          <para>It is recommended that applications additionally declare
            <c>android.R.attr#enableVrMode</c> in their manifest to allow for smooth activity
            transitions when switching between VR activities.</para>
          <para>If the requested <c>android.service.vr.VrListenerService</c> component is not available,
            VR mode will not be started.  Developers can handle this case as follows:</para>
          <code lang="text/java">String servicePackage = "com.whatever.app";
            String serviceClass = "com.whatever.app.MyVrListenerService";
            
            // Name of the component of the VrListenerService to start.
            ComponentName serviceComponent = new ComponentName(servicePackage, serviceClass);
            
            try {
               setVrModeEnabled(true, myComponentName);
            } catch (PackageManager.NameNotFoundException e) {
                   List&amp;lt;ApplicationInfo&gt; installed = getPackageManager().getInstalledApplications(0);
                   boolean isInstalled = false;
                   for (ApplicationInfo app : installed) {
                       if (app.packageName.equals(servicePackage)) {
                           isInstalled = true;
                           break;
                       }
                   }
                   if (isInstalled) {
                       // Package is installed, but not enabled in Settings.  Let user enable it.
                       startActivity(new Intent(Settings.ACTION_VR_LISTENER_SETTINGS));
                   } else {
                       // Package is not installed.  Send an intent to download this.
                       sentIntentToLaunchAppStore(servicePackage);
                   }
            }
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setVrModeEnabled(boolean,%20android.content.ComponentName)" title="Reference documentation">Java documentation for <code>android.app.Activity.setVrModeEnabled(boolean, android.content.ComponentName)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldDockBigOverlays">
      <MemberSignature Language="C#" Value="public virtual bool ShouldDockBigOverlays ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldDockBigOverlays() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShouldDockBigOverlays" />
      <MemberSignature Language="F#" Value="abstract member ShouldDockBigOverlays : unit -&gt; bool&#xA;override this.ShouldDockBigOverlays : unit -&gt; bool" Usage="activity.ShouldDockBigOverlays " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shouldDockBigOverlays", "()Z", "GetShouldDockBigOverlaysHandler", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shouldDockBigOverlays", "()Z", "GetShouldDockBigOverlaysHandler", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether big overlays should be docked next to the activity as set by
            <c>#setShouldDockBigOverlays</c>.</summary>
        <returns>
          <c>true</c> if big overlays should be docked next to the activity instead
                    of overlay its content</returns>
        <remarks>
          <para>Returns whether big overlays should be docked next to the activity as set by
            <c>#setShouldDockBigOverlays</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#shouldDockBigOverlays()" title="Reference documentation">Java documentation for <code>android.app.Activity.shouldDockBigOverlays()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowRequestPermissionRationale">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowRequestPermissionRationale (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowRequestPermissionRationale(string permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShouldShowRequestPermissionRationale(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowRequestPermissionRationale : string -&gt; bool&#xA;override this.ShouldShowRequestPermissionRationale : string -&gt; bool" Usage="activity.ShouldShowRequestPermissionRationale permission" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shouldShowRequestPermissionRationale", "(Ljava/lang/String;)Z", "GetShouldShowRequestPermissionRationale_Ljava_lang_String_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shouldShowRequestPermissionRationale", "(Ljava/lang/String;)Z", "GetShouldShowRequestPermissionRationale_Ljava_lang_String_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">A permission your app wants to request.</param>
        <summary>Gets whether you should show UI with rationale before requesting a permission.</summary>
        <returns>Whether you should show permission rationale UI.</returns>
        <remarks>
          <para>Gets whether you should show UI with rationale before requesting a permission.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#shouldShowRequestPermissionRationale(java.lang.String)" title="Reference documentation">Java documentation for <code>android.app.Activity.shouldShowRequestPermissionRationale(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUpRecreateTask">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpRecreateTask (Android.Content.Intent? targetIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpRecreateTask(class Android.Content.Intent targetIntent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShouldUpRecreateTask(Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member ShouldUpRecreateTask : Android.Content.Intent -&gt; bool&#xA;override this.ShouldUpRecreateTask : Android.Content.Intent -&gt; bool" Usage="activity.ShouldUpRecreateTask targetIntent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shouldUpRecreateTask", "(Landroid/content/Intent;)Z", "GetShouldUpRecreateTask_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shouldUpRecreateTask", "(Landroid/content/Intent;)Z", "GetShouldUpRecreateTask_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetIntent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="targetIntent">An intent representing the target destination for up navigation</param>
        <summary>Returns true if the app should recreate the task when navigating 'up' from this activity
            by using targetIntent.</summary>
        <returns>true if navigating up should recreate a new task stack, false if the same task
                    should be used for the destination</returns>
        <remarks>
          <para>Returns true if the app should recreate the task when navigating 'up' from this activity
            by using targetIntent.</para>
          <para>If this method returns false the app can trivially call
            <c>#navigateUpTo(Intent)</c> using the same parameters to correctly perform
            up navigation. If this method returns false, the app should synthesize a new task stack
            by using <c>TaskStackBuilder</c> or another similar mechanism to perform up navigation.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#shouldUpRecreateTask(android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.shouldUpRecreateTask(android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ShowAssist">
      <MemberSignature Language="C#" Value="public virtual bool ShowAssist (Android.OS.Bundle? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowAssist(class Android.OS.Bundle args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShowAssist(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member ShowAssist : Android.OS.Bundle -&gt; bool&#xA;override this.ShowAssist : Android.OS.Bundle -&gt; bool" Usage="activity.ShowAssist args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showAssist", "(Landroid/os/Bundle;)Z", "GetShowAssist_Landroid_os_Bundle_Handler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showAssist", "(Landroid/os/Bundle;)Z", "GetShowAssist_Landroid_os_Bundle_Handler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>Ask to have the current assistant shown to the user.</summary>
        <returns>Returns true if the assistant was successfully invoked, else false.  For example
            false will be returned if the caller is not the current top activity.</returns>
        <remarks>
          <para>Ask to have the current assistant shown to the user.  This only works if the calling
            activity is the current foreground activity.  It is the same as calling
            <c>android.service.voice.VoiceInteractionService#showSession
            VoiceInteractionService.showSession</c> and requesting all of the possible context.
            The receiver will always see
            <c>android.service.voice.VoiceInteractionSession#SHOW_SOURCE_APPLICATION</c> set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#showAssist(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.showAssist(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public void ShowDialog (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowDialog(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShowDialog(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : int -&gt; unit" Usage="activity.ShowDialog id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showDialog", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showDialog", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Simple version of <c>#showDialog(int, Bundle)</c> that does not
            take any arguments.</summary>
        <remarks>
          <para>Simple version of <c>#showDialog(int, Bundle)</c> that does not
            take any arguments.  Simply calls <c>#showDialog(int, Bundle)</c>
            with null arguments.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#showDialog(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.showDialog(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public bool ShowDialog (int id, Android.OS.Bundle? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShowDialog(int32 id, class Android.OS.Bundle args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShowDialog(System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : int * Android.OS.Bundle -&gt; bool" Usage="activity.ShowDialog (id, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showDialog", "(ILandroid/os/Bundle;)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showDialog", "(ILandroid/os/Bundle;)Z", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="id">The id of the managed dialog.</param>
        <param name="args">Arguments to pass through to the dialog.  These will be saved
            and restored for you.  Note that if the dialog is already created,
            <c>#onCreateDialog(int, Bundle)</c> will not be called with the new
            arguments but <c>#onPrepareDialog(int, Dialog, Bundle)</c> will be.
            If you need to rebuild the dialog, call <c>#removeDialog(int)</c> first.</param>
        <summary>Show a dialog managed by this activity.</summary>
        <returns>Returns true if the Dialog was created; false is returned if
            it is not created because <c>#onCreateDialog(int, Bundle)</c> returns false.</returns>
        <remarks>
          <para>Show a dialog managed by this activity.  A call to <c>#onCreateDialog(int, Bundle)</c>
            will be made with the same id the first time this is called for a given
            id.  From thereafter, the dialog will be automatically saved and restored.
            
            &lt;em&gt;If you are targeting <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            or later, consider instead using a <c>DialogFragment</c> instead.&lt;/em&gt;</para>
          <para>Each time a dialog is shown, <c>#onPrepareDialog(int, Dialog, Bundle)</c> will
            be made to provide an opportunity to do any timely preparation.</para>
          <para>This member is deprecated. Use the new <c>DialogFragment</c> class with
            <c>FragmentManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#showDialog(int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.showDialog(int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="T:Android.App.Dialog" />
        <altmember cref="M:Android.App.Activity.OnCreateDialog(System.Int32, Android.OS.Bundle)" />
        <altmember cref="M:Android.App.Activity.OnPrepareDialog(System.Int32, Android.App.Dialog, Android.App.Dialog)" />
        <altmember cref="M:Android.App.Activity.DismissDialog(System.Int32)" />
        <altmember cref="M:Android.App.Activity.RemoveDialog(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ShowLockTaskEscapeMessage">
      <MemberSignature Language="C#" Value="public virtual void ShowLockTaskEscapeMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowLockTaskEscapeMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.ShowLockTaskEscapeMessage" />
      <MemberSignature Language="F#" Value="abstract member ShowLockTaskEscapeMessage : unit -&gt; unit&#xA;override this.ShowLockTaskEscapeMessage : unit -&gt; unit" Usage="activity.ShowLockTaskEscapeMessage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showLockTaskEscapeMessage", "()V", "GetShowLockTaskEscapeMessageHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showLockTaskEscapeMessage", "()V", "GetShowLockTaskEscapeMessageHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Shows the user the system defined message for telling the user how to exit
            lock task mode.</summary>
        <remarks>
          <para>Shows the user the system defined message for telling the user how to exit
            lock task mode. The task containing this activity must be in lock task mode at the time
            of this call for the message to be displayed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#showLockTaskEscapeMessage()" title="Reference documentation">Java documentation for <code>android.app.Activity.showLockTaskEscapeMessage()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public Android.Window.ISplashScreen SplashScreen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Window.ISplashScreen SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.SplashScreen" />
      <MemberSignature Language="F#" Value="member this.SplashScreen : Android.Window.ISplashScreen" Usage="Android.App.Activity.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSplashScreen", "()Landroid/window/SplashScreen;", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSplashScreen", "()Landroid/window/SplashScreen;", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Window.ISplashScreen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the interface that activity use to talk to the splash screen.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Get the interface that activity use to talk to the splash screen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getSplashScreen()" title="Reference documentation">Java documentation for <code>android.app.Activity.getSplashScreen()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? StartActionMode (Android.Views.ActionMode.ICallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActionMode(Android.Views.ActionMode.ICallback)" />
      <MemberSignature Language="F#" Value="abstract member StartActionMode : Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode&#xA;override this.StartActionMode : Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode" Usage="activity.StartActionMode callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">Callback that will manage lifecycle events for this action mode</param>
        <summary>Start an action mode of the default type <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The ActionMode that was started, or null if it was canceled</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActionMode(android.view.Callback)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActionMode(android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="T:Android.Views.ActionMode" />
      </Docs>
    </Member>
    <Member MemberName="StartActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? StartActionMode (Android.Views.ActionMode.ICallback? callback, Android.Views.ActionModeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionMode(class Android.Views.ActionMode/ICallback callback, valuetype Android.Views.ActionModeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActionMode(Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)" />
      <MemberSignature Language="F#" Value="abstract member StartActionMode : Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode&#xA;override this.StartActionMode : Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode" Usage="activity.StartActionMode (callback, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_IHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActionMode", "(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionMode_Landroid_view_ActionMode_Callback_IHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
        <Parameter Name="type" Type="Android.Views.ActionModeType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">Callback that will manage lifecycle events for this action mode</param>
        <param name="type">To be added.</param>
        <summary>Start an action mode of the default type <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The ActionMode that was started, or null if it was canceled</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActionMode(android.view.Callback)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActionMode(android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent? intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityForResult : Android.Content.Intent * int -&gt; unit&#xA;override this.StartActivityForResult : Android.Content.Intent * int -&gt; unit" Usage="activity.StartActivityForResult (intent, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;I)V", "GetStartActivityForResult_Landroid_content_Intent_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;I)V", "GetStartActivityForResult_Landroid_content_Intent_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                               onActivityResult() when the activity exits.</param>
        <summary>Same as calling <c>#startActivityForResult(Intent, int, Bundle)</c>
            with no options.</summary>
        <remarks>
          <para>Same as calling <c>#startActivityForResult(Intent, int, Bundle)</c>
            with no options.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityForResult(android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityForResult(android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public void StartActivityForResult (Type activityType, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartActivityForResult(class System.Type activityType, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityForResult(System.Type,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.StartActivityForResult : Type * int -&gt; unit" Usage="activity.StartActivityForResult (activityType, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityType" Type="System.Type" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="activityType">To be added.</param>
        <param name="requestCode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public virtual void StartActivityForResult (Android.Content.Intent? intent, int requestCode, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityForResult(class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityForResult : Android.Content.Intent * int * Android.OS.Bundle -&gt; unit&#xA;override this.StartActivityForResult : Android.Content.Intent * int * Android.OS.Bundle -&gt; unit" Usage="activity.StartActivityForResult (intent, requestCode, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityForResult_Landroid_content_Intent_ILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityForResult", "(Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityForResult_Landroid_content_Intent_ILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                               onActivityResult() when the activity exits.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.</param>
        <summary>Launch an activity for which you would like a result when it finished.</summary>
        <remarks>
          <para>Launch an activity for which you would like a result when it finished.
            When this activity exits, your
            onActivityResult() method will be called with the given requestCode.
            Using a negative requestCode is the same as calling
            <c>#startActivity</c> (the activity is not launched as a sub-activity).</para>
          <para>Note that this method should only be used with Intent protocols
            that are defined to return a result.  In other protocols (such as
            <c>Intent#ACTION_MAIN</c> or <c>Intent#ACTION_VIEW</c>), you may
            not get the result when you expect.  For example, if the activity you
            are launching uses <c>Intent#FLAG_ACTIVITY_NEW_TASK</c>, it will not
            run in your task and thus you will immediately receive a cancel result.</para>
          <para>As a special case, if you call startActivityForResult() with a requestCode
            &gt;= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your
            activity, then your window will not be displayed until a result is
            returned back from the started activity.  This is to avoid visible
            flickering when redirecting to another activity.</para>
          <para>This method throws <c>android.content.ActivityNotFoundException</c>
            if there was no Activity found to run the given Intent.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityForResult(android.content.Intent,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityForResult(android.content.Intent, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromChild (Android.App.Activity child, Android.Content.Intent? intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromChild(class Android.App.Activity child, class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityFromChild : Android.App.Activity * Android.Content.Intent * int -&gt; unit&#xA;override this.StartActivityFromChild : Android.App.Activity * Android.Content.Intent * int -&gt; unit" Usage="activity.StartActivityFromChild (child, intent, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;I)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;I)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  &lt; 0 if reply is not requested.</param>
        <summary>Same as calling <c>#startActivityFromChild(Activity, Intent, int, Bundle)</c>
            with no options.</summary>
        <remarks>
          <para>Same as calling <c>#startActivityFromChild(Activity, Intent, int, Bundle)</c>
            with no options.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#startActivityFromFragment(
            androidx.fragment.app.Fragment,Intent,int)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityFromChild(android.app.Activity,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityFromChild(android.app.Activity, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromChild (Android.App.Activity child, Android.Content.Intent? intent, int requestCode, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromChild(class Android.App.Activity child, class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityFromChild(Android.App.Activity,Android.Content.Intent,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityFromChild : Android.App.Activity * Android.Content.Intent * int * Android.OS.Bundle -&gt; unit&#xA;override this.StartActivityFromChild : Android.App.Activity * Android.Content.Intent * int * Android.OS.Bundle -&gt; unit" Usage="activity.StartActivityFromChild (child, intent, requestCode, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_ILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityFromChild", "(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromChild_Landroid_app_Activity_Landroid_content_Intent_ILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="child">The activity making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  &lt; 0 if reply is not requested.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.</param>
        <summary>This is called when a child activity of this one calls its
            <c>#startActivity</c> or <c>#startActivityForResult</c> method.</summary>
        <remarks>
          <para>This is called when a child activity of this one calls its
            <c>#startActivity</c> or <c>#startActivityForResult</c> method.</para>
          <para>This method throws <c>android.content.ActivityNotFoundException</c>
            if there was no Activity found to run the given Intent.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#startActivityFromFragment(
            androidx.fragment.app.Fragment,Intent,int,Bundle)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityFromChild(android.app.Activity,%20android.content.Intent,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityFromChild(android.app.Activity, android.content.Intent, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromFragment">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromFragment (Android.App.Fragment fragment, Android.Content.Intent? intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromFragment(class Android.App.Fragment fragment, class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityFromFragment(Android.App.Fragment,Android.Content.Intent,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityFromFragment : Android.App.Fragment * Android.Content.Intent * int -&gt; unit&#xA;override this.StartActivityFromFragment : Android.App.Fragment * Android.Content.Intent * int -&gt; unit" Usage="activity.StartActivityFromFragment (fragment, intent, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;I)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;I)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fragment">The fragment making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  &lt; 0 if reply is not requested.</param>
        <summary>Same as calling <c>#startActivityFromFragment(Fragment, Intent, int, Bundle)</c>
            with no options.</summary>
        <remarks>
          <para>Same as calling <c>#startActivityFromFragment(Fragment, Intent, int, Bundle)</c>
            with no options.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#startActivityFromFragment(
            androidx.fragment.app.Fragment,Intent,int)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityFromFragment(android.app.Fragment,%20android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityFromFragment(android.app.Fragment, android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" />
        <altmember cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityFromFragment">
      <MemberSignature Language="C#" Value="public virtual void StartActivityFromFragment (Android.App.Fragment fragment, Android.Content.Intent? intent, int requestCode, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartActivityFromFragment(class Android.App.Fragment fragment, class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityFromFragment(Android.App.Fragment,Android.Content.Intent,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityFromFragment : Android.App.Fragment * Android.Content.Intent * int * Android.OS.Bundle -&gt; unit&#xA;override this.StartActivityFromFragment : Android.App.Fragment * Android.Content.Intent * int * Android.OS.Bundle -&gt; unit" Usage="activity.StartActivityFromFragment (fragment, intent, requestCode, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_ILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityFromFragment", "(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V", "GetStartActivityFromFragment_Landroid_app_Fragment_Landroid_content_Intent_ILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android28.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="Android.App.Fragment" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="fragment">The fragment making the call.</param>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">Reply request code.  &lt; 0 if reply is not requested.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.</param>
        <summary>This is called when a Fragment in this activity calls its
            <c>Fragment#startActivity</c> or <c>Fragment#startActivityForResult</c>
            method.</summary>
        <remarks>
          <para>This is called when a Fragment in this activity calls its
            <c>Fragment#startActivity</c> or <c>Fragment#startActivityForResult</c>
            method.</para>
          <para>This method throws <c>android.content.ActivityNotFoundException</c>
            if there was no Activity found to run the given Intent.</para>
          <para>This member is deprecated. Use <c>androidx.fragment.app.FragmentActivity#startActivityFromFragment(
            androidx.fragment.app.Fragment,Intent,int,Bundle)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityFromFragment(android.app.Fragment,%20android.content.Intent,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityFromFragment(android.app.Fragment, android.content.Intent, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
        <altmember cref="M:Android.App.Fragment.StartActivity(Android.Content.Intent)" />
        <altmember cref="M:Android.App.Fragment.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityIfNeeded">
      <MemberSignature Language="C#" Value="public virtual bool StartActivityIfNeeded (Android.Content.Intent intent, int requestCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartActivityIfNeeded(class Android.Content.Intent intent, int32 requestCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityIfNeeded(Android.Content.Intent,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityIfNeeded : Android.Content.Intent * int -&gt; bool&#xA;override this.StartActivityIfNeeded : Android.Content.Intent * int -&gt; bool" Usage="activity.StartActivityIfNeeded (intent, requestCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;I)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;I)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits, as described in
                    <c>#startActivityForResult</c>.</param>
        <summary>Same as calling <c>#startActivityIfNeeded(Intent, int, Bundle)</c>
            with no options.</summary>
        <returns>If a new activity was launched then true is returned; otherwise
                    false is returned and you must handle the Intent yourself.</returns>
        <remarks>
          <para>Same as calling <c>#startActivityIfNeeded(Intent, int, Bundle)</c>
            with no options.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityIfNeeded(android.content.Intent,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityIfNeeded(android.content.Intent, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityIfNeeded">
      <MemberSignature Language="C#" Value="public virtual bool StartActivityIfNeeded (Android.Content.Intent intent, int requestCode, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartActivityIfNeeded(class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartActivityIfNeeded(Android.Content.Intent,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartActivityIfNeeded : Android.Content.Intent * int * Android.OS.Bundle -&gt; bool&#xA;override this.StartActivityIfNeeded : Android.Content.Intent * int * Android.OS.Bundle -&gt; bool" Usage="activity.StartActivityIfNeeded (intent, requestCode, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;ILandroid/os/Bundle;)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_ILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActivityIfNeeded", "(Landroid/content/Intent;ILandroid/os/Bundle;)Z", "GetStartActivityIfNeeded_Landroid_content_Intent_ILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                    onActivityResult() when the activity exits, as described in
                    <c>#startActivityForResult</c>.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.</param>
        <summary>A special variation to launch an activity only if a new activity
            instance is needed to handle the given Intent.</summary>
        <returns>If a new activity was launched then true is returned; otherwise
                    false is returned and you must handle the Intent yourself.</returns>
        <remarks>
          <para>A special variation to launch an activity only if a new activity
            instance is needed to handle the given Intent.  In other words, this is
            just like <c>#startActivityForResult(Intent, int)</c> except: if you are
            using the <c>Intent#FLAG_ACTIVITY_SINGLE_TOP</c> flag, or
            singleTask or singleTop
            <c>android.R.styleable#AndroidManifestActivity_launchMode launchMode</c>,
            and the activity
            that handles &lt;var&gt;intent&lt;/var&gt; is the same as your currently running
            activity, then a new instance is not needed.  In this case, instead of
            the normal behavior of calling <c>#onNewIntent</c> this function will
            return and you can handle the Intent yourself.</para>
          <para>This function can only be called from a top-level activity; if it is
            called from a child activity, a runtime exception will be thrown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startActivityIfNeeded(android.content.Intent,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startActivityIfNeeded(android.content.Intent, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.App.Activity.StartActivityForResult(Android.Content.Intent, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderForResult">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderForResult (Android.Content.IntentSender? intent, int requestCode, Android.Content.Intent? fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderForResult(class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,Android.Content.Intent,Android.Content.ActivityFlags,Android.Content.ActivityFlags,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartIntentSenderForResult : Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int -&gt; unit&#xA;override this.StartIntentSenderForResult : Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int -&gt; unit" Usage="activity.StartIntentSenderForResult (intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                               onActivityResult() when the activity exits.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
            intent parameter to <c>IntentSender#sendIntent</c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
            would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
            &lt;var&gt;flagsMask&lt;/var&gt;</param>
        <param name="extraFlags">Always set to 0.</param>
        <summary>Same as calling <c>#startIntentSenderForResult(IntentSender, int,
            Intent, int, int, int, Bundle)</c> with no options.</summary>
        <remarks>
          <para>Same as calling <c>#startIntentSenderForResult(IntentSender, int,
            Intent, int, int, int, Bundle)</c> with no options.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startIntentSenderForResult(android.content.IntentSender,%20int,%20android.content.Intent,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Android.Content.IntentSender.SendIntentException" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderForResult">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderForResult (Android.Content.IntentSender? intent, int requestCode, Android.Content.Intent? fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderForResult(class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartIntentSenderForResult(Android.Content.IntentSender,System.Int32,Android.Content.Intent,Android.Content.ActivityFlags,Android.Content.ActivityFlags,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartIntentSenderForResult : Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int * Android.OS.Bundle -&gt; unit&#xA;override this.StartIntentSenderForResult : Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int * Android.OS.Bundle -&gt; unit" Usage="activity.StartIntentSenderForResult (intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startIntentSenderForResult", "(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderForResult_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                               onActivityResult() when the activity exits.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
            intent parameter to <c>IntentSender#sendIntent</c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
            would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
            &lt;var&gt;flagsMask&lt;/var&gt;</param>
        <param name="extraFlags">Always set to 0.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.  If options
            have also been supplied by the IntentSender, options given here will
            override any that conflict with those given by the IntentSender.</param>
        <summary>Like <c>#startActivityForResult(Intent, int)</c>, but allowing you
            to use a IntentSender to describe the activity to be started.</summary>
        <remarks>
          <para>Like <c>#startActivityForResult(Intent, int)</c>, but allowing you
            to use a IntentSender to describe the activity to be started.  If
            the IntentSender is for an activity, that activity will be started
            as if you had called the regular <c>#startActivityForResult(Intent, int)</c>
            here; otherwise, its associated action will be executed (such as
            sending a broadcast) as if you had called
            <c>IntentSender#sendIntent IntentSender.sendIntent</c> on it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startIntentSenderForResult(android.content.IntentSender,%20int,%20android.content.Intent,%20int,%20int,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.IntentSender.SendIntentException" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderFromChild (Android.App.Activity? child, Android.Content.IntentSender? intent, int requestCode, Android.Content.Intent? fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderFromChild(class Android.App.Activity child, class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartIntentSenderFromChild(Android.App.Activity,Android.Content.IntentSender,System.Int32,Android.Content.Intent,Android.Content.ActivityFlags,Android.Content.ActivityFlags,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member StartIntentSenderFromChild : Android.App.Activity * Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int -&gt; unit&#xA;override this.StartIntentSenderFromChild : Android.App.Activity * Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int -&gt; unit" Usage="activity.StartIntentSenderFromChild (child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIIHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <param name="fillInIntent">To be added.</param>
        <param name="flagsMask">To be added.</param>
        <param name="flagsValues">To be added.</param>
        <param name="extraFlags">To be added.</param>
        <summary>Same as calling <c>#startIntentSenderFromChild(Activity, IntentSender,
            int, Intent, int, int, int, Bundle)</c> with no options.</summary>
        <remarks>
          <para>Same as calling <c>#startIntentSenderFromChild(Activity, IntentSender,
            int, Intent, int, int, int, Bundle)</c> with no options.</para>
          <para>This member is deprecated. Use <c>#startIntentSenderForResult(IntentSender, int, Intent, int, int, int)</c>
            instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startIntentSenderFromChild(android.app.Activity,%20android.content.IntentSender,%20int,%20android.content.Intent,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.app.Activity.startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Android.Content.IntentSender.SendIntentException" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSenderFromChild">
      <MemberSignature Language="C#" Value="public virtual void StartIntentSenderFromChild (Android.App.Activity? child, Android.Content.IntentSender? intent, int requestCode, Android.Content.Intent? fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartIntentSenderFromChild(class Android.App.Activity child, class Android.Content.IntentSender intent, int32 requestCode, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartIntentSenderFromChild(Android.App.Activity,Android.Content.IntentSender,System.Int32,Android.Content.Intent,Android.Content.ActivityFlags,Android.Content.ActivityFlags,System.Int32,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartIntentSenderFromChild : Android.App.Activity * Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int * Android.OS.Bundle -&gt; unit&#xA;override this.StartIntentSenderFromChild : Android.App.Activity * Android.Content.IntentSender * int * Android.Content.Intent * Android.Content.ActivityFlags * Android.Content.ActivityFlags * int * Android.OS.Bundle -&gt; unit" Usage="activity.StartIntentSenderFromChild (child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startIntentSenderFromChild", "(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSenderFromChild_Landroid_app_Activity_Landroid_content_IntentSender_ILandroid_content_Intent_IIILandroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="requestCode">To be added.</param>
        <param name="fillInIntent">To be added.</param>
        <param name="flagsMask">To be added.</param>
        <param name="flagsValues">To be added.</param>
        <param name="extraFlags">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Like <c>#startActivityFromChild(Activity, Intent, int)</c>, but
            taking a IntentSender; see
            <c>#startIntentSenderForResult(IntentSender, int, Intent, int, int, int)</c>
            for more information.</summary>
        <remarks>
          <para>Like <c>#startActivityFromChild(Activity, Intent, int)</c>, but
            taking a IntentSender; see
            <c>#startIntentSenderForResult(IntentSender, int, Intent, int, int, int)</c>
            for more information.</para>
          <para>This member is deprecated. Use
            <c>#startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle)</c>
            instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startIntentSenderFromChild(android.app.Activity,%20android.content.IntentSender,%20int,%20android.content.Intent,%20int,%20int,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Content.IntentSender.SendIntentException" />
      </Docs>
    </Member>
    <Member MemberName="StartLocalVoiceInteraction">
      <MemberSignature Language="C#" Value="public virtual void StartLocalVoiceInteraction (Android.OS.Bundle? privateOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLocalVoiceInteraction(class Android.OS.Bundle privateOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartLocalVoiceInteraction(Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartLocalVoiceInteraction : Android.OS.Bundle -&gt; unit&#xA;override this.StartLocalVoiceInteraction : Android.OS.Bundle -&gt; unit" Usage="activity.StartLocalVoiceInteraction privateOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startLocalVoiceInteraction", "(Landroid/os/Bundle;)V", "GetStartLocalVoiceInteraction_Landroid_os_Bundle_Handler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startLocalVoiceInteraction", "(Landroid/os/Bundle;)V", "GetStartLocalVoiceInteraction_Landroid_os_Bundle_Handler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateOptions" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="privateOptions">a Bundle of private arguments to the current voice interaction service</param>
        <summary>Starts a local voice interaction session.</summary>
        <remarks>
          <para>Starts a local voice interaction session. When ready,
            <c>#onLocalVoiceInteractionStarted()</c> is called. You can pass a bundle of private options
            to the registered voice interaction service.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startLocalVoiceInteraction(android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startLocalVoiceInteraction(android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartLockTask">
      <MemberSignature Language="C#" Value="public virtual void StartLockTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLockTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartLockTask" />
      <MemberSignature Language="F#" Value="abstract member StartLockTask : unit -&gt; unit&#xA;override this.StartLockTask : unit -&gt; unit" Usage="activity.StartLockTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startLockTask", "()V", "GetStartLockTaskHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startLockTask", "()V", "GetStartLockTaskHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Request to put this activity in a mode where the user is locked to a restricted set of
            applications.</summary>
        <remarks>
          <para>Request to put this activity in a mode where the user is locked to a restricted set of
            applications.</para>
          <para>If <c>DevicePolicyManager#isLockTaskPermitted(String)</c> returns <c>true</c>
            for this component, the current task will be launched directly into LockTask mode. Only apps
            allowlisted by <c>DevicePolicyManager#setLockTaskPackages(ComponentName, String[])</c> can
            be launched while LockTask mode is active. The user will not be able to leave this mode
            until this activity calls <c>#stopLockTask()</c>. Calling this method while the device is
            already in LockTask mode has no effect.</para>
          <para>Otherwise, the current task will be launched into screen pinning mode. In this case, the
            system will prompt the user with a dialog requesting permission to use this mode.
            The user can exit at any time through instructions shown on the request dialog. Calling
            <c>#stopLockTask()</c> will also terminate this mode.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; this method can only be called when the activity is foreground.
            That is, between <c>#onResume()</c> and <c>#onPause()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startLockTask()" title="Reference documentation">Java documentation for <code>android.app.Activity.startLockTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartManagingCursor">
      <MemberSignature Language="C#" Value="public virtual void StartManagingCursor (Android.Database.ICursor? c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartManagingCursor(class Android.Database.ICursor c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" />
      <MemberSignature Language="F#" Value="abstract member StartManagingCursor : Android.Database.ICursor -&gt; unit&#xA;override this.StartManagingCursor : Android.Database.ICursor -&gt; unit" Usage="activity.StartManagingCursor c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startManagingCursor", "(Landroid/database/Cursor;)V", "GetStartManagingCursor_Landroid_database_Cursor_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startManagingCursor", "(Landroid/database/Cursor;)V", "GetStartManagingCursor_Landroid_database_Cursor_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Android.Database.ICursor" />
      </Parameters>
      <Docs>
        <param name="c">The Cursor to be managed.</param>
        <summary>This method allows the activity to take care of managing the given
            <c>Cursor</c>'s lifecycle for you based on the activity's lifecycle.</summary>
        <remarks>
          <para>This method allows the activity to take care of managing the given
            <c>Cursor</c>'s lifecycle for you based on the activity's lifecycle.
            That is, when the activity is stopped it will automatically call
            <c>Cursor#deactivate</c> on the given Cursor, and when it is later restarted
            it will call <c>Cursor#requery</c> for you.  When the activity is
            destroyed, all managed Cursors will be closed automatically.
            
            &lt;em&gt;If you are targeting <c>android.os.Build.VERSION_CODES#HONEYCOMB</c>
            or later, consider instead using <c>LoaderManager</c> instead, available
            via <c>#getLoaderManager()</c>.&lt;/em&gt;</para>
          <para>&lt;strong&gt;Warning:&lt;/strong&gt; Do not call <c>Cursor#close()</c> on cursor obtained from
            <c>#managedQuery</c>, because the activity will do that for you at the appropriate time.
            However, if you call <c>#stopManagingCursor</c> on a cursor from a managed query, the system
            &lt;em&gt;will not&lt;/em&gt; automatically close the cursor and, in that case, you must call
            <c>Cursor#close()</c>.</para>
          <para>This member is deprecated. Use the new <c>android.content.CursorLoader</c> class with
            <c>LoaderManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startManagingCursor(android.database.Cursor)" title="Reference documentation">Java documentation for <code>android.app.Activity.startManagingCursor(android.database.Cursor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.ManagedQuery(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" />
        <altmember cref="M:Android.App.Activity.StopManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="StartNextMatchingActivity">
      <MemberSignature Language="C#" Value="public virtual bool StartNextMatchingActivity (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartNextMatchingActivity(class Android.Content.Intent intent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartNextMatchingActivity(Android.Content.Intent)" />
      <MemberSignature Language="F#" Value="abstract member StartNextMatchingActivity : Android.Content.Intent -&gt; bool&#xA;override this.StartNextMatchingActivity : Android.Content.Intent -&gt; bool" Usage="activity.StartNextMatchingActivity intent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to dispatch to the next activity.  For
            correct behavior, this must be the same as the Intent that started
            your own activity; the only changes you can make are to the extras
            inside of it.</param>
        <summary>Same as calling <c>#startNextMatchingActivity(Intent, Bundle)</c> with
            no options.</summary>
        <returns>Returns a boolean indicating whether there was another Activity
            to start: true if there was a next activity to start, false if there
            wasn't.  In general, if true is returned you will then want to call
            finish() on yourself.</returns>
        <remarks>
          <para>Same as calling <c>#startNextMatchingActivity(Intent, Bundle)</c> with
            no options.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startNextMatchingActivity(android.content.Intent)" title="Reference documentation">Java documentation for <code>android.app.Activity.startNextMatchingActivity(android.content.Intent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartNextMatchingActivity">
      <MemberSignature Language="C#" Value="public virtual bool StartNextMatchingActivity (Android.Content.Intent intent, Android.OS.Bundle? options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartNextMatchingActivity(class Android.Content.Intent intent, class Android.OS.Bundle options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartNextMatchingActivity(Android.Content.Intent,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member StartNextMatchingActivity : Android.Content.Intent * Android.OS.Bundle -&gt; bool&#xA;override this.StartNextMatchingActivity : Android.Content.Intent * Android.OS.Bundle -&gt; bool" Usage="activity.StartNextMatchingActivity (intent, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startNextMatchingActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)Z", "GetStartNextMatchingActivity_Landroid_content_Intent_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to dispatch to the next activity.  For
            correct behavior, this must be the same as the Intent that started
            your own activity; the only changes you can make are to the extras
            inside of it.</param>
        <param name="options">Additional options for how the Activity should be started.
            See <c>android.content.Context#startActivity(Intent, Bundle)</c>
            Context.startActivity(Intent, Bundle)} for more details.</param>
        <summary>Special version of starting an activity, for use when you are replacing
            other activity components.</summary>
        <returns>Returns a boolean indicating whether there was another Activity
            to start: true if there was a next activity to start, false if there
            wasn't.  In general, if true is returned you will then want to call
            finish() on yourself.</returns>
        <remarks>
          <para>Special version of starting an activity, for use when you are replacing
            other activity components.  You can use this to hand the Intent off
            to the next Activity that can handle it.  You typically call this in
            <c>#onCreate</c> with the Intent returned by <c>#getIntent</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startNextMatchingActivity(android.content.Intent,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.startNextMatchingActivity(android.content.Intent, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartPostponedEnterTransition">
      <MemberSignature Language="C#" Value="public virtual void StartPostponedEnterTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPostponedEnterTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartPostponedEnterTransition" />
      <MemberSignature Language="F#" Value="abstract member StartPostponedEnterTransition : unit -&gt; unit&#xA;override this.StartPostponedEnterTransition : unit -&gt; unit" Usage="activity.StartPostponedEnterTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startPostponedEnterTransition", "()V", "GetStartPostponedEnterTransitionHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startPostponedEnterTransition", "()V", "GetStartPostponedEnterTransitionHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begin postponed transitions after <c>#postponeEnterTransition()</c> was called.</summary>
        <remarks>
          <para>Begin postponed transitions after <c>#postponeEnterTransition()</c> was called.
            If postponeEnterTransition() was called, you must call startPostponedEnterTransition()
            to have your Activity start drawing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startPostponedEnterTransition()" title="Reference documentation">Java documentation for <code>android.app.Activity.startPostponedEnterTransition()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSearch">
      <MemberSignature Language="C#" Value="public virtual void StartSearch (string? initialQuery, bool selectInitialQuery, Android.OS.Bundle? appSearchData, bool globalSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartSearch(string initialQuery, bool selectInitialQuery, class Android.OS.Bundle appSearchData, bool globalSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StartSearch(System.String,System.Boolean,Android.OS.Bundle,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member StartSearch : string * bool * Android.OS.Bundle * bool -&gt; unit&#xA;override this.StartSearch : string * bool * Android.OS.Bundle * bool -&gt; unit" Usage="activity.StartSearch (initialQuery, selectInitialQuery, appSearchData, globalSearch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startSearch", "(Ljava/lang/String;ZLandroid/os/Bundle;Z)V", "GetStartSearch_Ljava_lang_String_ZLandroid_os_Bundle_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startSearch", "(Ljava/lang/String;ZLandroid/os/Bundle;Z)V", "GetStartSearch_Ljava_lang_String_ZLandroid_os_Bundle_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialQuery" Type="System.String" />
        <Parameter Name="selectInitialQuery" Type="System.Boolean" />
        <Parameter Name="appSearchData" Type="Android.OS.Bundle" />
        <Parameter Name="globalSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialQuery">Any non-null non-empty string will be inserted as
            pre-entered text in the search query box.</param>
        <param name="selectInitialQuery">If true, the initial query will be preselected, which means that
            any further typing will replace it.  This is useful for cases where an entire pre-formed
            query is being inserted.  If false, the selection point will be placed at the end of the
            inserted query.  This is useful when the inserted query is text that the user entered,
            and the user would expect to be able to keep typing.  <i>This parameter is only meaningful
            if initialQuery is a non-empty string.</i></param>
        <param name="appSearchData">An application can insert application-specific
            context here, in order to improve quality or specificity of its own
            searches.  This data will be returned with SEARCH intent(s).  Null if
            no extra data is required.</param>
        <param name="globalSearch">If false, this will only launch the search that has been specifically
            defined by the application (which is usually defined as a local search).  If no default
            search is defined in the current application or activity, global search will be launched.
            If true, this will always launch a platform-global (e.g. web-based) search instead.</param>
        <summary>This hook is called to launch the search UI.</summary>
        <remarks>
          <para>This hook is called to launch the search UI.</para>
          <para>It is typically called from onSearchRequested(), either directly from
            Activity.onSearchRequested() or from an overridden version in any given
            Activity.  If your goal is simply to activate search, it is preferred to call
            onSearchRequested(), which may have been overridden elsewhere in your Activity.  If your goal
            is to inject specific data such as context data, it is preferred to <i>override</i>
            onSearchRequested(), so that any callers to it will benefit from the override.</para>
          <para>Note: when running in a <c>Configuration#UI_MODE_TYPE_WATCH</c>, use of this API is
            not supported.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#startSearch(java.lang.String,%20boolean,%20android.os.Bundle,%20boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.startSearch(java.lang.String, boolean, android.os.Bundle, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Android.App.SearchManager" />
        <altmember cref="M:Android.App.Activity.OnSearchRequested" />
      </Docs>
    </Member>
    <Member MemberName="StopLocalVoiceInteraction">
      <MemberSignature Language="C#" Value="public virtual void StopLocalVoiceInteraction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLocalVoiceInteraction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StopLocalVoiceInteraction" />
      <MemberSignature Language="F#" Value="abstract member StopLocalVoiceInteraction : unit -&gt; unit&#xA;override this.StopLocalVoiceInteraction : unit -&gt; unit" Usage="activity.StopLocalVoiceInteraction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stopLocalVoiceInteraction", "()V", "GetStopLocalVoiceInteractionHandler", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stopLocalVoiceInteraction", "()V", "GetStopLocalVoiceInteractionHandler", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Request to terminate the current voice interaction that was previously started
            using <c>#startLocalVoiceInteraction(Bundle)</c>.</summary>
        <remarks>
          <para>Request to terminate the current voice interaction that was previously started
            using <c>#startLocalVoiceInteraction(Bundle)</c>. When the interaction is
            terminated, <c>#onLocalVoiceInteractionStopped()</c> will be called.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#stopLocalVoiceInteraction()" title="Reference documentation">Java documentation for <code>android.app.Activity.stopLocalVoiceInteraction()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopLockTask">
      <MemberSignature Language="C#" Value="public virtual void StopLockTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLockTask() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StopLockTask" />
      <MemberSignature Language="F#" Value="abstract member StopLockTask : unit -&gt; unit&#xA;override this.StopLockTask : unit -&gt; unit" Usage="activity.StopLockTask " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stopLockTask", "()V", "GetStopLockTaskHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stopLockTask", "()V", "GetStopLockTaskHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stop the current task from being locked.</summary>
        <remarks>
          <para>Stop the current task from being locked.</para>
          <para>Called to end the LockTask or screen pinning mode started by <c>#startLockTask()</c>.
            This can only be called by activities that have called <c>#startLockTask()</c> previously.</para>
          <para>&lt;strong&gt;Note:&lt;/strong&gt; If the device is in LockTask mode that is not initially started
            by this activity, then calling this method will not terminate the LockTask mode, but only
            finish its own task. The device will remain in LockTask mode, until the activity which
            started the LockTask mode calls this method, or until its allowlist authorization is revoked
            by <c>DevicePolicyManager#setLockTaskPackages(ComponentName, String[])</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#stopLockTask()" title="Reference documentation">Java documentation for <code>android.app.Activity.stopLockTask()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="P:Android.App.ActivityManager.LockTaskModeState" />
      </Docs>
    </Member>
    <Member MemberName="StopManagingCursor">
      <MemberSignature Language="C#" Value="public virtual void StopManagingCursor (Android.Database.ICursor? c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopManagingCursor(class Android.Database.ICursor c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.StopManagingCursor(Android.Database.ICursor)" />
      <MemberSignature Language="F#" Value="abstract member StopManagingCursor : Android.Database.ICursor -&gt; unit&#xA;override this.StopManagingCursor : Android.Database.ICursor -&gt; unit" Usage="activity.StopManagingCursor c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("stopManagingCursor", "(Landroid/database/Cursor;)V", "GetStopManagingCursor_Landroid_database_Cursor_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("stopManagingCursor", "(Landroid/database/Cursor;)V", "GetStopManagingCursor_Landroid_database_Cursor_Handler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Android.Database.ICursor" />
      </Parameters>
      <Docs>
        <param name="c">The Cursor that was being managed.</param>
        <summary>Given a Cursor that was previously given to
            <c>#startManagingCursor</c>, stop the activity's management of that
            cursor.</summary>
        <remarks>
          <para>Given a Cursor that was previously given to
            <c>#startManagingCursor</c>, stop the activity's management of that
            cursor.</para>
          <para>&lt;strong&gt;Warning:&lt;/strong&gt; After calling this method on a cursor from a managed query,
            the system &lt;em&gt;will not&lt;/em&gt; automatically close the cursor and you must call
            <c>Cursor#close()</c>.</para>
          <para>This member is deprecated. Use the new <c>android.content.CursorLoader</c> class with
            <c>LoaderManager</c> instead; this is also
            available on older platforms through the Android compatibility package.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#stopManagingCursor(android.database.Cursor)" title="Reference documentation">Java documentation for <code>android.app.Activity.stopManagingCursor(android.database.Cursor)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.StartManagingCursor(Android.Database.ICursor)" />
      </Docs>
    </Member>
    <Member MemberName="TakeKeyEvents">
      <MemberSignature Language="C#" Value="public virtual void TakeKeyEvents (bool get);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TakeKeyEvents(bool get) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.TakeKeyEvents(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TakeKeyEvents : bool -&gt; unit&#xA;override this.TakeKeyEvents : bool -&gt; unit" Usage="activity.TakeKeyEvents get" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("takeKeyEvents", "(Z)V", "GetTakeKeyEvents_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("takeKeyEvents", "(Z)V", "GetTakeKeyEvents_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="get" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="get">To be added.</param>
        <summary>Request that key events come to this activity.</summary>
        <remarks>
          <para>Request that key events come to this activity. Use this if your
            activity has no views with focus, but the activity still wants
            a chance to process key events.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#takeKeyEvents(boolean)" title="Reference documentation">Java documentation for <code>android.app.Activity.takeKeyEvents(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.Window.TakeKeyEvents(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TaskId">
      <MemberSignature Language="C#" Value="public virtual int TaskId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TaskId" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.TaskId" />
      <MemberSignature Language="F#" Value="member this.TaskId : int" Usage="Android.App.Activity.TaskId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTaskId", "()I", "GetGetTaskIdHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTaskId", "()I", "GetGetTaskIdHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the identifier of the task this activity is in.</summary>
        <value>Task identifier, an opaque integer.</value>
        <remarks>
          <para>Return the identifier of the task this activity is in.  This identifier
            will remain the same for the lifetime of the activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getTaskId()" title="Reference documentation">Java documentation for <code>android.app.Activity.getTaskId()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.App.Activity.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.App.Activity.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string? Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Title" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="Android.App.Activity.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleColor">
      <MemberSignature Language="C#" Value="public Android.Graphics.Color TitleColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Graphics.Color TitleColor" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.TitleColor" />
      <MemberSignature Language="F#" Value="member this.TitleColor : Android.Graphics.Color with get, set" Usage="Android.App.Activity.TitleColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTitleColor", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTitleColor", "()I", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTitleColor", "(I)V", "GetSetTitleColor_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setTitleColor", "(I)V", "GetSetTitleColor_IHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Obsolete("deprecated")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Obsolete("deprecated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Change the color of the title associated with this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Change the color of the title associated with this activity.</para>
          <para>This method is deprecated starting in API Level 11 and replaced by action
            bar styles. For information on styling the Action Bar, read the <see href="https://developer.android.com/ guide/topics/ui/actionbar.html">Action Bar</see> developer
            guide.</para>
          <para>This member is deprecated. Use action bar styles instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTitleColor(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTitleColor(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TitleFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence? TitleFormatted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ICharSequence TitleFormatted" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.TitleFormatted" />
      <MemberSignature Language="F#" Value="member this.TitleFormatted : Java.Lang.ICharSequence with get, set" Usage="Android.App.Activity.TitleFormatted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTitle", "()Ljava/lang/CharSequence;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTitle", "()Ljava/lang/CharSequence;", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTitle", "(Ljava/lang/CharSequence;)V", "GetSetTitle_Ljava_lang_CharSequence_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setTitle", "(Ljava/lang/CharSequence;)V", "GetSetTitle_Ljava_lang_CharSequence_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Change the title associated with this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Change the title associated with this activity.  If this is a
            top-level activity, the title for its window will change.  If it
            is an embedded activity, the parent can do whatever it wants
            with it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setTitle(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>android.app.Activity.setTitle(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TriggerSearch">
      <MemberSignature Language="C#" Value="public virtual void TriggerSearch (string? query, Android.OS.Bundle? appSearchData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TriggerSearch(string query, class Android.OS.Bundle appSearchData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.TriggerSearch(System.String,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member TriggerSearch : string * Android.OS.Bundle -&gt; unit&#xA;override this.TriggerSearch : string * Android.OS.Bundle -&gt; unit" Usage="activity.TriggerSearch (query, appSearchData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("triggerSearch", "(Ljava/lang/String;Landroid/os/Bundle;)V", "GetTriggerSearch_Ljava_lang_String_Landroid_os_Bundle_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("triggerSearch", "(Ljava/lang/String;Landroid/os/Bundle;)V", "GetTriggerSearch_Ljava_lang_String_Landroid_os_Bundle_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="appSearchData" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="query">The query to trigger.  If empty, the request will be ignored.</param>
        <param name="appSearchData">An application can insert application-specific
            context here, in order to improve quality or specificity of its own
            searches.  This data will be returned with SEARCH intent(s).  Null if
            no extra data is required.</param>
        <summary>Similar to <c>#startSearch</c>, but actually fires off the search query after invoking
            the search dialog.</summary>
        <remarks>
          <para>Similar to <c>#startSearch</c>, but actually fires off the search query after invoking
            the search dialog.  Made available for testing purposes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#triggerSearch(java.lang.String,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.app.Activity.triggerSearch(java.lang.String, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterActivityLifecycleCallbacks">
      <MemberSignature Language="C#" Value="public virtual void UnregisterActivityLifecycleCallbacks (Android.App.Application.IActivityLifecycleCallbacks callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterActivityLifecycleCallbacks(class Android.App.Application/IActivityLifecycleCallbacks callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.UnregisterActivityLifecycleCallbacks(Android.App.Application.IActivityLifecycleCallbacks)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterActivityLifecycleCallbacks : Android.App.Application.IActivityLifecycleCallbacks -&gt; unit&#xA;override this.UnregisterActivityLifecycleCallbacks : Android.App.Application.IActivityLifecycleCallbacks -&gt; unit" Usage="activity.UnregisterActivityLifecycleCallbacks callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterActivityLifecycleCallbacks", "(Landroid/app/Application$ActivityLifecycleCallbacks;)V", "GetUnregisterActivityLifecycleCallbacks_Landroid_app_Application_ActivityLifecycleCallbacks_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterActivityLifecycleCallbacks", "(Landroid/app/Application$ActivityLifecycleCallbacks;)V", "GetUnregisterActivityLifecycleCallbacks_Landroid_app_Application_ActivityLifecycleCallbacks_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.Application+IActivityLifecycleCallbacks" />
      </Parameters>
      <Docs>
        <param name="callback">The callback instance to unregister</param>
        <summary>Unregister an <c>Application.ActivityLifecycleCallbacks</c> previously registered
            with <c>#registerActivityLifecycleCallbacks</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#unregisterActivityLifecycleCallbacks(android.app.ActivityLifecycleCallbacks)" title="Reference documentation">Java documentation for <code>android.app.Activity.unregisterActivityLifecycleCallbacks(android.app.ActivityLifecycleCallbacks)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForContextMenu">
      <MemberSignature Language="C#" Value="public virtual void UnregisterForContextMenu (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterForContextMenu(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.UnregisterForContextMenu(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterForContextMenu : Android.Views.View -&gt; unit&#xA;override this.UnregisterForContextMenu : Android.Views.View -&gt; unit" Usage="activity.UnregisterForContextMenu view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterForContextMenu", "(Landroid/view/View;)V", "GetUnregisterForContextMenu_Landroid_view_View_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterForContextMenu", "(Landroid/view/View;)V", "GetUnregisterForContextMenu_Landroid_view_View_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view that should stop showing a context menu.</param>
        <summary>Prevents a context menu to be shown for the given view.</summary>
        <remarks>
          <para>Prevents a context menu to be shown for the given view. This method will remove the
            <c>OnCreateContextMenuListener</c> on the view.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#unregisterForContextMenu(android.view.View)" title="Reference documentation">Java documentation for <code>android.app.Activity.unregisterForContextMenu(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.RegisterForContextMenu(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterScreenCaptureCallback">
      <MemberSignature Language="C#" Value="public virtual void UnregisterScreenCaptureCallback (Android.App.Activity.IScreenCaptureCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterScreenCaptureCallback(class Android.App.Activity/IScreenCaptureCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.App.Activity.UnregisterScreenCaptureCallback(Android.App.Activity.IScreenCaptureCallback)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterScreenCaptureCallback : Android.App.Activity.IScreenCaptureCallback -&gt; unit&#xA;override this.UnregisterScreenCaptureCallback : Android.App.Activity.IScreenCaptureCallback -&gt; unit" Usage="activity.UnregisterScreenCaptureCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterScreenCaptureCallback", "(Landroid/app/Activity$ScreenCaptureCallback;)V", "GetUnregisterScreenCaptureCallback_Landroid_app_Activity_ScreenCaptureCallback_Handler", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterScreenCaptureCallback", "(Landroid/app/Activity$ScreenCaptureCallback;)V", "GetUnregisterScreenCaptureCallback_Landroid_app_Activity_ScreenCaptureCallback_Handler", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_CAPTURE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_CAPTURE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.App.Activity+IScreenCaptureCallback" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceInteractor">
      <MemberSignature Language="C#" Value="public virtual Android.App.VoiceInteractor? VoiceInteractor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.VoiceInteractor VoiceInteractor" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.VoiceInteractor" />
      <MemberSignature Language="F#" Value="member this.VoiceInteractor : Android.App.VoiceInteractor" Usage="Android.App.Activity.VoiceInteractor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getVoiceInteractor", "()Landroid/app/VoiceInteractor;", "GetGetVoiceInteractorHandler", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getVoiceInteractor", "()Landroid/app/VoiceInteractor;", "GetGetVoiceInteractorHandler", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.VoiceInteractor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the active <c>VoiceInteractor</c> that the user is going through to
            interact with this activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Retrieve the active <c>VoiceInteractor</c> that the user is going through to
            interact with this activity.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getVoiceInteractor()" title="Reference documentation">Java documentation for <code>android.app.Activity.getVoiceInteractor()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolumeControlStream">
      <MemberSignature Language="C#" Value="public Android.Media.Stream VolumeControlStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Stream VolumeControlStream" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.VolumeControlStream" />
      <MemberSignature Language="F#" Value="member this.VolumeControlStream : Android.Media.Stream with get, set" Usage="Android.App.Activity.VolumeControlStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getVolumeControlStream", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getVolumeControlStream", "()I", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setVolumeControlStream", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setVolumeControlStream", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="streamType">The type of the audio stream whose volume should be
                       changed by the hardware volume controls.</param>
        <summary>Gets the suggested audio stream whose volume should be changed by the
            hardware volume controls. -or- Suggests an audio stream whose volume should be changed by the hardware
            volume controls.</summary>
        <value>The suggested audio stream type whose volume should be changed by
                    the hardware volume controls.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the suggested audio stream whose volume should be changed by the
            hardware volume controls.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getVolumeControlStream()" title="Reference documentation">Java documentation for <code>android.app.Activity.getVolumeControlStream()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Suggests an audio stream whose volume should be changed by the hardware
            volume controls.</para>
          <para>The suggested audio stream will be tied to the window of this Activity.
            Volume requests which are received while the Activity is in the
            foreground will affect this stream.</para>
          <para>It is not guaranteed that the hardware volume controls will always change
            this stream's volume (for example, if a call is in progress, its stream's
            volume may be changed instead). To reset back to the default, use
            <c>AudioManager#USE_DEFAULT_STREAM_TYPE</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#setVolumeControlStream(int)" title="Reference documentation">Java documentation for <code>android.app.Activity.setVolumeControlStream(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Activity.VolumeControlStream" />
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Window? Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Window Window" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.Window" />
      <MemberSignature Language="F#" Value="member this.Window : Android.Views.Window" Usage="Android.App.Activity.Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWindow", "()Landroid/view/Window;", "GetGetWindowHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWindow", "()Landroid/view/Window;", "GetGetWindowHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the current <c>android.view.Window</c> for the activity.</summary>
        <value>Window The current window, or null if the activity is not
                    visual.</value>
        <remarks>
          <para>Retrieve the current <c>android.view.Window</c> for the activity.
            This can be used to directly access parts of the Window API that
            are not available through Activity/Screen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getWindow()" title="Reference documentation">Java documentation for <code>android.app.Activity.getWindow()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WindowManager">
      <MemberSignature Language="C#" Value="public virtual Android.Views.IWindowManager? WindowManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IWindowManager WindowManager" />
      <MemberSignature Language="DocId" Value="P:Android.App.Activity.WindowManager" />
      <MemberSignature Language="F#" Value="member this.WindowManager : Android.Views.IWindowManager" Usage="Android.App.Activity.WindowManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWindowManager", "()Landroid/view/WindowManager;", "GetGetWindowManagerHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWindowManager", "()Landroid/view/WindowManager;", "GetGetWindowManagerHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IWindowManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the window manager for showing custom windows.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Retrieve the window manager for showing custom windows.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/app/Activity#getWindowManager()" title="Reference documentation">Java documentation for <code>android.app.Activity.getWindowManager()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
