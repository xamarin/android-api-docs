<Type Name="IContentHandler" FullName="Org.Xml.Sax.IContentHandler">
  <TypeSignature Language="C#" Value="public interface IContentHandler : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContentHandler implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/ContentHandler", "", "Org.Xml.Sax.IContentHandlerInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Receive notification of the logical content of a document.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Receive notification of the logical content of a document.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format><example><code lang="java">import java.net.*;
 import org.xml.sax.*;
 </code></example></para>
      <para tool="javadoc-to-mdoc">This is the main interface that most SAX applications
 implement: if the application needs to be informed of basic parsing
 events, it implements this interface and registers an instance with
 the SAX parser using the <c><see cref="P:Org.Xml.Sax.IXMLReader.ContentHandler" /></c> method.  The parser uses the instance to report
 basic document-related events like the start and end of elements
 and character data.</para>
      <para tool="javadoc-to-mdoc">The order of events in this interface is very important, and
 mirrors the order of information in the document itself.  For
 example, all of an element's content (character data, processing
 instructions, and/or subelements) will appear, in order, between
 the startElement event and the corresponding endElement event.</para>
      <para tool="javadoc-to-mdoc">This interface is similar to the now-deprecated SAX 1.0
 DocumentHandler interface, but it adds support for Namespaces
 and for reporting skipped entities (in non-validating XML
 processors).</para>
      <para tool="javadoc-to-mdoc">Implementors should note that there is also a
 <c>ContentHandler</c> class in the <c>java.net</c>
 package; that means that it's probably a bad idea to do</para>
      <para tool="javadoc-to-mdoc">In fact, "import ...*" is usually a sign of sloppy programming
 anyway, so the user should consider this a feature rather than a
 bug.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Org.Xml.Sax.IXMLReader" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.IDTDHandler" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.IErrorHandler" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public void Characters (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Characters(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("characters", "([CII)V", "GetCharacters_arrayCIIHandler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">the characters from the XML document</param>
        <param name="start">the start position in the array</param>
        <param name="length">the number of characters to read from the array</param>
        <summary>Receive notification of character data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of character data.

 </para>
          <para tool="javadoc-to-mdoc">The Parser will call this method to report each chunk of
 character data.  SAX parsers may return all contiguous character
 data in a single chunk, or they may split it into several
 chunks; however, all of the characters in any single event
 must come from the same external entity so that the Locator
 provides useful information.</para>
          <para tool="javadoc-to-mdoc">The application must not attempt to read from the array
 outside of the specified range.</para>
          <para tool="javadoc-to-mdoc">Individual characters may consist of more than one Java
 <c>char</c> value.  There are two important cases where this
 happens, because characters can't be represented in just sixteen bits.
 In one case, characters are represented in a <i>Surrogate Pair</i>,
 using two special Unicode values. Such characters are in the so-called
 "Astral Planes", with a code point above U+FFFF.  A second case involves
 composite characters, such as a base character combining with one or
 more accent characters. </para>
          <para tool="javadoc-to-mdoc"> Your code should not assume that algorithms using
 <c>char</c>-at-a-time idioms will be working in character
 units; in some cases they will split characters.  This is relevant
 wherever XML permits arbitrary characters, such as attribute values,
 processing instruction data, and comments as well as in data reported
 from this method.  It's also generally relevant whenever Java code
 manipulates internationalized text; the issue isn't unique to XML.</para>
          <para tool="javadoc-to-mdoc">Note that some parsers will report whitespace in element
 content using the <c><see cref="M:Org.Xml.Sax.IContentHandler.IgnorableWhitespace(System.Char[],System.Int32,System.Int32)" /></c>
 method rather than this one (validating parsers <i>must</i>
 do so).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#characters(char[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.IgnorableWhitespace(System.Char[], System.Int32, System.Int32)" />
        <altmember cref="T:Org.Xml.Sax.ILocator" />
      </Docs>
    </Member>
    <Member MemberName="EndDocument">
      <MemberSignature Language="C#" Value="public void EndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endDocument", "()V", "GetEndDocumentHandler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the end of a document.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of the end of a document.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>There is an apparent contradiction between the
 documentation for this method and the documentation for <c><see cref="M:Org.Xml.Sax.IErrorHandler.FatalError(Org.Xml.Sax.SAXParseException)" /></c>.  Until this ambiguity is
 resolved in a future major release, clients should make no
 assumptions about whether endDocument() will or will not be
 invoked when the parser has reported a fatalError() or thrown
 an exception.</i>
          </para>
          <para tool="javadoc-to-mdoc">The SAX parser will invoke this method only once, and it will
 be the last method invoked during the parse.  The parser shall
 not invoke this method until it has either abandoned parsing
 (because of an unrecoverable error) or reached the end of
 input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#endDocument()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartDocument" />
      </Docs>
    </Member>
    <Member MemberName="EndElement">
      <MemberSignature Language="C#" Value="public void EndElement (string uri, string localName, string qName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndElement(string uri, string localName, string qName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetEndElement_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="qName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">the Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed</param>
        <param name="localName">the local name (without prefix), or the
        empty string if Namespace processing is not being
        performed</param>
        <param name="qName">the qualified XML name (with prefix), or the
        empty string if qualified names are not available</param>
        <summary>Receive notification of the end of an element.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of the end of an element.

 </para>
          <para tool="javadoc-to-mdoc">The SAX parser will invoke this method at the end of every
 element in the XML document; there will be a corresponding
 <c><see cref="M:Org.Xml.Sax.IContentHandler.StartElement(System.String,System.String,System.String,System.String)" /></c> event for every endElement
 event (even when the element is empty).</para>
          <para tool="javadoc-to-mdoc">For information on the names, see startElement.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#endElement(java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="EndPrefixMapping">
      <MemberSignature Language="C#" Value="public void EndPrefixMapping (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndPrefixMapping(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endPrefixMapping", "(Ljava/lang/String;)V", "GetEndPrefixMapping_Ljava_lang_String_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">the prefix that was being mapped.
    This is the empty string when a default mapping scope ends.</param>
        <summary>End the scope of a prefix-URI mapping.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">End the scope of a prefix-URI mapping.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="M:Org.Xml.Sax.IContentHandler.StartPrefixMapping(System.String,System.String)" /></c> for
 details.  These events will always occur immediately after the
 corresponding <c><see cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String,System.String,System.String)" /></c> event, but the order of
 <c><see cref="M:Org.Xml.Sax.IContentHandler.EndPrefixMapping(System.String)" /></c> events is not otherwise
 guaranteed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#endPrefixMapping(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">the client may throw
            an exception during processing</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartPrefixMapping(System.String, System.String)" />
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnorableWhitespace">
      <MemberSignature Language="C#" Value="public void IgnorableWhitespace (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnorableWhitespace(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ignorableWhitespace", "([CII)V", "GetIgnorableWhitespace_arrayCIIHandler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">the characters from the XML document</param>
        <param name="start">the start position in the array</param>
        <param name="length">the number of characters to read from the array</param>
        <summary>Receive notification of ignorable whitespace in element content.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of ignorable whitespace in element content.

 </para>
          <para tool="javadoc-to-mdoc">Validating Parsers must use this method to report each chunk
 of whitespace in element content (see the W3C XML 1.0
 recommendation, section 2.10): non-validating parsers may also
 use this method if they are capable of parsing and using
 content models.</para>
          <para tool="javadoc-to-mdoc">SAX parsers may return all contiguous whitespace in a single
 chunk, or they may split it into several chunks; however, all of
 the characters in any single event must come from the same
 external entity, so that the Locator provides useful
 information.</para>
          <para tool="javadoc-to-mdoc">The application must not attempt to read from the array
 outside of the specified range.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#ignorableWhitespace(char[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.Characters(System.Char[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessingInstruction">
      <MemberSignature Language="C#" Value="public void ProcessingInstruction (string target, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessingInstruction(string target, string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V", "GetProcessingInstruction_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">the processing instruction target</param>
        <param name="data">the processing instruction data, or null if
        none was supplied.  The data does not include any
        whitespace separating it from the target</param>
        <summary>Receive notification of a processing instruction.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of a processing instruction.

 </para>
          <para tool="javadoc-to-mdoc">The Parser will invoke this method once for each processing
 instruction found: note that processing instructions may occur
 before or after the main document element.</para>
          <para tool="javadoc-to-mdoc">A SAX parser must never report an XML declaration (XML 1.0,
 section 2.8) or a text declaration (XML 1.0, section 4.3.1)
 using this method.</para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Org.Xml.Sax.IContentHandler.Characters(System.Char[],System.Int32,System.Int32)" /></c>, processing instruction
 data may have characters that need more than one <c>char</c>
 value. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#processingInstruction(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDocumentLocator">
      <MemberSignature Language="C#" Value="public void SetDocumentLocator (Org.Xml.Sax.ILocator locator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocumentLocator(class Org.Xml.Sax.ILocator locator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDocumentLocator", "(Lorg/xml/sax/Locator;)V", "GetSetDocumentLocator_Lorg_xml_sax_Locator_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locator" Type="Org.Xml.Sax.ILocator" />
      </Parameters>
      <Docs>
        <param name="locator">an object that can return the location of
                any SAX document event</param>
        <summary>Receive an object for locating the origin of SAX document events.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive an object for locating the origin of SAX document events.

 </para>
          <para tool="javadoc-to-mdoc">SAX parsers are strongly encouraged (though not absolutely
 required) to supply a locator: if it does so, it must supply
 the locator to the application by invoking this method before
 invoking any of the other methods in the ContentHandler
 interface.</para>
          <para tool="javadoc-to-mdoc">The locator allows the application to determine the end
 position of any document-related event, even if the parser is
 not reporting an error.  Typically, the application will
 use this information for reporting its own errors (such as
 character content that does not match an application's
 business rules).  The information returned by the locator
 is probably not sufficient for use with a search engine.</para>
          <para tool="javadoc-to-mdoc">Note that the locator will return correct information only
 during the invocation SAX event callbacks after
 <c><see cref="M:Org.Xml.Sax.IContentHandler.StartDocument" /></c> returns and before
 <c><see cref="M:Org.Xml.Sax.IContentHandler.EndDocument" /></c> is called.  The
 application should not attempt to use it at any other time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#setDocumentLocator(org.xml.sax.Locator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.ILocator" />
      </Docs>
    </Member>
    <Member MemberName="SkippedEntity">
      <MemberSignature Language="C#" Value="public void SkippedEntity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SkippedEntity(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skippedEntity", "(Ljava/lang/String;)V", "GetSkippedEntity_Ljava_lang_String_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">the name of the skipped entity.  If it is a
        parameter entity, the name will begin with '%', and if
        it is the external DTD subset, it will be the string
        "[dtd]"</param>
        <summary>Receive notification of a skipped entity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of a skipped entity.
 This is not called for entity references within markup constructs
 such as element start tags or markup declarations.  (The XML
 recommendation requires reporting skipped external entities.
 SAX also reports internal entity expansion/non-expansion, except
 within markup constructs.)

 </para>
          <para tool="javadoc-to-mdoc">The Parser will invoke this method each time the entity is
 skipped.  Non-validating processors may skip entities if they
 have not seen the declarations (because, for example, the
 entity was declared in an external DTD subset).  All processors
 may skip external entities, depending on the values of the
 <c>http://xml.org/sax/features/external-general-entities</c>
 and the
 <c>http://xml.org/sax/features/external-parameter-entities</c>
 properties.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#skippedEntity(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="StartDocument">
      <MemberSignature Language="C#" Value="public void StartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startDocument", "()V", "GetStartDocumentHandler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the beginning of a document.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of the beginning of a document.

 </para>
          <para tool="javadoc-to-mdoc">The SAX parser will invoke this method only once, before any
 other event callbacks (except for <c><see cref="M:Org.Xml.Sax.IContentHandler.SetDocumentLocator(Org.Xml.Sax.ILocator)" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#startDocument()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndDocument" />
      </Docs>
    </Member>
    <Member MemberName="StartElement">
      <MemberSignature Language="C#" Value="public void StartElement (string uri, string localName, string qName, Org.Xml.Sax.IAttributes atts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartElement(string uri, string localName, string qName, class Org.Xml.Sax.IAttributes atts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/xml/sax/Attributes;)V", "GetStartElement_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Lorg_xml_sax_Attributes_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="qName" Type="System.String" />
        <Parameter Name="atts" Type="Org.Xml.Sax.IAttributes" />
      </Parameters>
      <Docs>
        <param name="uri">the Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed</param>
        <param name="localName">the local name (without prefix), or the
        empty string if Namespace processing is not being
        performed</param>
        <param name="qName">the qualified name (with prefix), or the
        empty string if qualified names are not available</param>
        <param name="atts">the attributes attached to the element.  If
        there are no attributes, it shall be an empty
        Attributes object.  The value of this object after
        startElement returns is undefined</param>
        <summary>Receive notification of the beginning of an element.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of the beginning of an element.

 <list type="number"><item><term>the Namespace URI;</term></item><item><term>the local name; and</term></item><item><term>the qualified (prefixed) name.</term></item></list><list type="bullet"><item><term>the Namespace URI and local name are required when
 the namespaces property is <format type="text/html"><var>true</var></format> (the default), and are
 optional when the namespaces property is <format type="text/html"><var>false</var></format> (if one is
 specified, both must be);</term></item><item><term>the qualified name is required when the namespace-prefixes property
 is <format type="text/html"><var>true</var></format>, and is optional when the namespace-prefixes property
 is <format type="text/html"><var>false</var></format> (the default).</term></item></list></para>
          <para tool="javadoc-to-mdoc">The Parser will invoke this method at the beginning of every
 element in the XML document; there will be a corresponding
 <c><see cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String,System.String,System.String)" /></c> event for every startElement event
 (even when the element is empty). All of the element's content will be
 reported, in order, before the corresponding endElement
 event.</para>
          <para tool="javadoc-to-mdoc">This event allows up to three name components for each
 element:</para>
          <para tool="javadoc-to-mdoc">Any or all of these may be provided, depending on the
 values of the <format type="text/html"><var>http://xml.org/sax/features/namespaces</var></format>
 and the <format type="text/html"><var>http://xml.org/sax/features/namespace-prefixes</var></format>
 properties:</para>
          <para tool="javadoc-to-mdoc">Note that the attribute list provided will contain only
 attributes with explicit values (specified or defaulted):
 #IMPLIED attributes will be omitted.  The attribute list
 will contain attributes used for Namespace declarations
 (xmlns* attributes) only if the
 <c>http://xml.org/sax/features/namespace-prefixes</c>
 property is true (it is false by default, and support for a
 true value is optional).</para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Org.Xml.Sax.IContentHandler.Characters(System.Char[],System.Int32,System.Int32)" /></c>, attribute values may have
 characters that need more than one <c>char</c> value.  </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">any SAX exception, possibly
            wrapping another exception</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String, System.String, System.String)" />
        <altmember cref="T:Org.Xml.Sax.IAttributes" />
        <altmember cref="T:Org.Xml.Sax.Helpers.AttributesImpl" />
      </Docs>
    </Member>
    <Member MemberName="StartPrefixMapping">
      <MemberSignature Language="C#" Value="public void StartPrefixMapping (string prefix, string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPrefixMapping(string prefix, string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V", "GetStartPrefixMapping_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.IContentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">the Namespace prefix being declared.
    An empty string is used for the default element namespace,
    which has no prefix.</param>
        <param name="uri">the Namespace URI the prefix is mapped to</param>
        <summary>Begin the scope of a prefix-URI Namespace mapping.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begin the scope of a prefix-URI Namespace mapping.

 </para>
          <para tool="javadoc-to-mdoc">The information from this event is not necessary for
 normal Namespace processing: the SAX XML reader will
 automatically replace prefixes for element and attribute
 names when the <c>http://xml.org/sax/features/namespaces</c>
 feature is <format type="text/html"><var>true</var></format> (the default).</para>
          <para tool="javadoc-to-mdoc">There are cases, however, when applications need to
 use prefixes in character data or in attribute values,
 where they cannot safely be expanded automatically; the
 start/endPrefixMapping event supplies the information
 to the application to expand prefixes in those contexts
 itself, if necessary.</para>
          <para tool="javadoc-to-mdoc">Note that start/endPrefixMapping events are not
 guaranteed to be properly nested relative to each other:
 all startPrefixMapping events will occur immediately before the
 corresponding <c><see cref="M:Org.Xml.Sax.IContentHandler.StartElement(System.String,System.String,System.String,System.String)" /></c> event,
 and all <c><see cref="M:Org.Xml.Sax.IContentHandler.EndPrefixMapping(System.String)" /></c>
 events will occur immediately after the corresponding
 <c><see cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String,System.String,System.String)" /></c> event,
 but their order is not otherwise
 guaranteed.</para>
          <para tool="javadoc-to-mdoc">There should never be start/endPrefixMapping events for the
 "xml" prefix, since it is predeclared and immutable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ContentHandler.html#startPrefixMapping(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">the client may throw
            an exception during processing</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndPrefixMapping(System.String)" />
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartElement(System.String, System.String, System.String, System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
