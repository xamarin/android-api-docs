<Type Name="IErrorHandler" FullName="Org.Xml.Sax.IErrorHandler">
  <TypeSignature Language="C#" Value="public interface IErrorHandler : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IErrorHandler implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Org.Xml.Sax.IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("org/xml/sax/ErrorHandler", "", "Org.Xml.Sax.IErrorHandlerInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("org/xml/sax/ErrorHandler", "", "Org.Xml.Sax.IErrorHandlerInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Basic interface for SAX error handlers.</summary>
    <remarks>
      <para>Basic interface for SAX error handlers.
            
            &lt;blockquote&gt;
            &lt;em&gt;This module, both source code and documentation, is in the
            Public Domain, and comes with &lt;strong&gt;NO WARRANTY&lt;/strong&gt;.&lt;/em&gt;
            See <see href="http://www.saxproject.org">http://www.saxproject.org</see>
            for further information.
            &lt;/blockquote&gt;</para>
      <para>If a SAX application needs to implement customized error
            handling, it must implement this interface and then register an
            instance with the XML reader using the
            <c>org.xml.sax.XMLReader#setErrorHandler setErrorHandler</c>
            method.  The parser will then report all errors and warnings
            through this interface.</para>
      <para>&lt;strong&gt;WARNING:&lt;/strong&gt; If an application does &lt;em&gt;not&lt;/em&gt;
            register an ErrorHandler, XML parsing errors will go unreported,
            except that &lt;em&gt;SAXParseException&lt;/em&gt;s will be thrown for fatal errors.
            In order to detect validity errors, an ErrorHandler that does something
            with <c>#error error()</c> calls must be registered.</para>
      <para>For XML processing errors, a SAX driver must use this interface
            in preference to throwing an exception: it is up to the application
            to decide whether to throw an exception for different types of
            errors and warnings.  Note, however, that there is no requirement that
            the parser continue to report additional errors after a call to
            <c>#fatalError fatalError</c>.  In other words, a SAX driver class
            may throw an exception after reporting any fatalError.
            Also parsers may throw appropriate exceptions for non-XML errors.
            For example, <c>XMLReader#parse XMLReader.parse()</c> would throw
            an IOException for errors accessing entities or the document.</para>
      <para>Added in SAX 1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/org/xml/sax/ErrorHandler" title="Reference documentation">Java documentation for <code>org.xml.sax.ErrorHandler</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public void Error (Org.Xml.Sax.SAXParseException? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Error(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.IErrorHandler.Error(Org.Xml.Sax.SAXParseException)" />
      <MemberSignature Language="F#" Value="abstract member Error : Org.Xml.Sax.SAXParseException -&gt; unit" Usage="iErrorHandler.Error exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("error", "(Lorg/xml/sax/SAXParseException;)V", "GetError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("error", "(Lorg/xml/sax/SAXParseException;)V", "GetError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The error information encapsulated in a
                             SAX parse exception.</param>
        <summary>Receive notification of a recoverable error.</summary>
        <remarks>
          <para>Receive notification of a recoverable error.</para>
          <para>This corresponds to the definition of "error" in section 1.2
            of the W3C XML 1.0 Recommendation.  For example, a validating
            parser would use this callback to report the violation of a
            validity constraint.  The default behaviour is to take no
            action.</para>
          <para>The SAX parser must continue to provide normal parsing
            events after invoking this method: it should still be possible
            for the application to process the document through to the end.
            If the application cannot do so, then the parser should report
            a fatal error even if the XML recommendation does not require
            it to do so.</para>
          <para>Filters may use this method to report other, non-XML errors
            as well.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/ErrorHandler#error(org.xml.sax.SAXParseException)" title="Reference documentation">Java documentation for <code>org.xml.sax.ErrorHandler.error(org.xml.sax.SAXParseException)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="FatalError">
      <MemberSignature Language="C#" Value="public void FatalError (Org.Xml.Sax.SAXParseException? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FatalError(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.IErrorHandler.FatalError(Org.Xml.Sax.SAXParseException)" />
      <MemberSignature Language="F#" Value="abstract member FatalError : Org.Xml.Sax.SAXParseException -&gt; unit" Usage="iErrorHandler.FatalError exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("fatalError", "(Lorg/xml/sax/SAXParseException;)V", "GetFatalError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("fatalError", "(Lorg/xml/sax/SAXParseException;)V", "GetFatalError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The error information encapsulated in a
                             SAX parse exception.</param>
        <summary>Receive notification of a non-recoverable error.</summary>
        <remarks>
          <para>Receive notification of a non-recoverable error.</para>
          <para>&lt;strong&gt;There is an apparent contradiction between the
            documentation for this method and the documentation for <c>org.xml.sax.ContentHandler#endDocument</c>.  Until this ambiguity
            is resolved in a future major release, clients should make no
            assumptions about whether endDocument() will or will not be
            invoked when the parser has reported a fatalError() or thrown
            an exception.&lt;/strong&gt;</para>
          <para>This corresponds to the definition of "fatal error" in
            section 1.2 of the W3C XML 1.0 Recommendation.  For example, a
            parser would use this callback to report the violation of a
            well-formedness constraint.</para>
          <para>The application must assume that the document is unusable
            after the parser has invoked this method, and should continue
            (if at all) only for the sake of collecting additional error
            messages: in fact, SAX parsers are free to stop reporting any
            other events once this method has been invoked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/ErrorHandler#fatalError(org.xml.sax.SAXParseException)" title="Reference documentation">Java documentation for <code>org.xml.sax.ErrorHandler.fatalError(org.xml.sax.SAXParseException)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="Warning">
      <MemberSignature Language="C#" Value="public void Warning (Org.Xml.Sax.SAXParseException? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Warning(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Org.Xml.Sax.IErrorHandler.Warning(Org.Xml.Sax.SAXParseException)" />
      <MemberSignature Language="F#" Value="abstract member Warning : Org.Xml.Sax.SAXParseException -&gt; unit" Usage="iErrorHandler.Warning exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("warning", "(Lorg/xml/sax/SAXParseException;)V", "GetWarning_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("warning", "(Lorg/xml/sax/SAXParseException;)V", "GetWarning_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The warning information encapsulated in a
                             SAX parse exception.</param>
        <summary>Receive notification of a warning.</summary>
        <remarks>
          <para>Receive notification of a warning.</para>
          <para>SAX parsers will use this method to report conditions that
            are not errors or fatal errors as defined by the XML
            recommendation.  The default behaviour is to take no
            action.</para>
          <para>The SAX parser must continue to provide normal parsing events
            after invoking this method: it should still be possible for the
            application to process the document through to the end.</para>
          <para>Filters may use this method to report other, non-XML warnings
            as well.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/org/xml/sax/ErrorHandler#warning(org.xml.sax.SAXParseException)" title="Reference documentation">Java documentation for <code>org.xml.sax.ErrorHandler.warning(org.xml.sax.SAXParseException)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
  </Members>
</Type>
