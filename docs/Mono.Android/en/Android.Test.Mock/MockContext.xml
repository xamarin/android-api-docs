<Type Name="MockContext" FullName="Android.Test.Mock.MockContext">
  <TypeSignature Language="C#" Value="public class MockContext : Android.Content.Context" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockContext extends Android.Content.Context" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Content.Context</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/test/mock/MockContext", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A mock <c><see cref="T:Android.Content.Context" /></c> class.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A mock <c><see cref="T:Android.Content.Context" /></c> class.  All methods are non-functional and throw 
 <c><see cref="T:Java.Lang.UnsupportedOperationException" /></c>.  You can use this to inject other dependencies,
 mocks, or monitors into the classes you are testing.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/test/mock/MockContext.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MockContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#MockContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockContext (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public override Android.Content.Context ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getApplicationContext", "()Landroid/content/Context;", "GetGetApplicationContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the context of the single, global Application object of the
 current process.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the context of the single, global Application object of the
 current process.  This generally should only be used if you need a
 Context whose lifecycle is separate from the current context, that is
 tied to the lifetime of the process rather than the current component.

 </para>
          <para tool="javadoc-to-mdoc">Consider for example how this interacts with
 <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c>:
 <list type="bullet"><item><term>If used from an Activity context, the receiver is being registered
 within that activity.  This means that you are expected to unregister
 before the activity is done being destroyed; in fact if you do not do
 so, the framework will clean up your leaked registration as it removes
 the activity and log an error.  Thus, if you use the Activity context
 to register a receiver that is static (global to the process, not
 associated with an Activity instance) then that registration will be
 removed on you at whatever point the activity you used is destroyed.
 </term></item><item><term>If used from the Context returned here, the receiver is being
 registered with the global state associated with your application.  Thus
 it will never be unregistered for you.  This is necessary if the receiver
 is associated with static data, not a particular component.  However
 using the ApplicationContext elsewhere can easily lead to serious leaks
 if you forget to unregister, unbind, etc.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getApplicationContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationInfo">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.ApplicationInfo ApplicationInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.PM.ApplicationInfo ApplicationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getApplicationInfo", "()Landroid/content/pm/ApplicationInfo;", "GetGetApplicationInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ApplicationInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the full application info for this context's package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the full application info for this context's package. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getApplicationInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="Assets">
      <MemberSignature Language="C#" Value="public override Android.Content.Res.AssetManager Assets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.AssetManager Assets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAssets", "()Landroid/content/res/AssetManager;", "GetGetAssetsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return an AssetManager instance for your application's package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return an AssetManager instance for your application's package. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getAssets()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BindService">
      <MemberSignature Language="C#" Value="public override bool BindService (Android.Content.Intent service, Android.Content.IServiceConnection conn, Android.Content.Bind flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool BindService(class Android.Content.Intent service, class Android.Content.IServiceConnection conn, valuetype Android.Content.Bind flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bindService", "(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z", "GetBindService_Landroid_content_Intent_Landroid_content_ServiceConnection_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Android.Content.Intent" />
        <Parameter Name="conn" Type="Android.Content.IServiceConnection" />
        <Parameter Name="flags" Type="Android.Content.Bind">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="service">Identifies the service to connect to.  The Intent may
      specify either an explicit component name, or a logical
      description (action, category, etc) to match an
      <c><see cref="T:Android.Content.IntentFilter" /></c> published by a service.</param>
        <param name="conn">Receives information as the service is started and stopped.
      This must be a valid ServiceConnection object; it must not be null.</param>
        <param name="flags">Operation options for the binding.  May be 0,
          <c><see cref="!:Android.Content.Context.BIND_AUTO_CREATE" /></c>, <c><see cref="!:Android.Content.Context.BIND_DEBUG_UNBIND" /></c>,
          <c><see cref="!:Android.Content.Context.BIND_NOT_FOREGROUND" /></c>, <c><see cref="!:Android.Content.Context.BIND_ABOVE_CLIENT" /></c>,
          <c><see cref="!:Android.Content.Context.BIND_ALLOW_OOM_MANAGEMENT" /></c>, or
          <c><see cref="!:Android.Content.Context.BIND_WAIVE_PRIORITY" /></c>.</param>
        <summary>Connect to an application service, creating it if needed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Connect to an application service, creating it if needed.  This defines
 a dependency between your application and the service.  The given
 <format type="text/html"><var>conn</var></format> will receive the service object when it is created and be
 told if it dies and restarts.  The service will be considered required
 by the system only for as long as the calling context exists.  For
 example, if this Context is an Activity that is stopped, the service will
 not be required to continue running until the Activity is resumed.

 </para>
          <para tool="javadoc-to-mdoc">This function will throw <c><see cref="T:Java.Lang.SecurityException" /></c> if you do not
 have permission to bind to the given service.

 </para>
          <para tool="javadoc-to-mdoc">Note: this method <i>can not be called from a
 <c><see cref="T:Android.Content.BroadcastReceiver" /></c> component</i>.  A pattern you can use to
 communicate from a BroadcastReceiver to a Service is to call
 <c><see cref="M:Android.Content.Context.StartService(Android.Content.Intent)" /></c> with the arguments containing the command to be
 sent, with the service calling its
 <c><see cref="M:Android.App.Service.StopSelf(System.Int32)" /></c> method when done executing
 that command.  See the API demo App/Service/Service Start Arguments
 Controller for an illustration of this.  It is okay, however, to use
 this method from a BroadcastReceiver that has been registered with
 <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c>, since the lifetime of this BroadcastReceiver
 is tied to another object (the one that registered it).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#bindService(android.content.Intent, android.content.ServiceConnection, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CacheDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File CacheDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File CacheDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCacheDir", "()Ljava/io/File;", "GetGetCacheDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path to the application specific cache directory
 on the filesystem.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the application specific cache directory
 on the filesystem. These files will be ones that get deleted first when the
 device runs low on storage.
 There is no guarantee when these files will be deleted.

 <i>Note: you should not <i>rely</i> on the system deleting these
 files for you; you should always have a reasonable maximum, such as 1 MB,
 for the amount of space you consume with cache files, and prune those
 files when exceeding that space.</i></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getCacheDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckCallingOrSelfPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckCallingOrSelfPermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckCallingOrSelfPermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkCallingOrSelfPermission", "(Ljava/lang/String;)I", "GetCheckCallingOrSelfPermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <summary>Determine whether the calling process of an IPC <i>or you</i> have been
 granted a particular permission.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the calling process of an IPC <i>or you</i> have been
 granted a particular permission.  This is the same as
 <c><see cref="M:Android.Content.Context.CheckCallingPermission(System.String)" /></c>, except it grants your own permissions
 if you are not currently processing an IPC.  Use with care!</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkCallingOrSelfPermission(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckCallingOrSelfUriPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckCallingOrSelfUriPermission (Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckCallingOrSelfUriPermission(class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkCallingOrSelfUriPermission", "(Landroid/net/Uri;I)I", "GetCheckCallingOrSelfUriPermission_Landroid_net_Uri_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <summary>Determine whether the calling process of an IPC <i>or you</i> has been granted
 permission to access a specific URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the calling process of an IPC <i>or you</i> has been granted
 permission to access a specific URI.  This is the same as
 <c><see cref="M:Android.Content.Context.CheckCallingUriPermission(Android.Net.Uri,Android.Content.ActivityFlags)" /></c>, except it grants your own permissions
 if you are not currently processing an IPC.  Use with care!</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkCallingOrSelfUriPermission(android.net.Uri, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckCallingPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckCallingPermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckCallingPermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkCallingPermission", "(Ljava/lang/String;)I", "GetCheckCallingPermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <summary>Determine whether the calling process of an IPC you are handling has been
 granted a particular permission.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the calling process of an IPC you are handling has been
 granted a particular permission.  This is basically the same as calling
 <c><see cref="M:Android.Content.Context.CheckPermission(System.String,System.Int32,System.Int32)" /></c> with the pid and uid returned
 by <c><see cref="P:Android.OS.Binder.CallingPid" /></c> and
 <c><see cref="P:Android.OS.Binder.CallingUid" /></c>.  One important difference
 is that if you are not currently processing an IPC, this function
 will always fail.  This is done to protect against accidentally
 leaking permissions; you can use <c><see cref="M:Android.Content.Context.CheckCallingOrSelfPermission(System.String)" /></c>
 to avoid this protection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkCallingPermission(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckCallingUriPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckCallingUriPermission (Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckCallingUriPermission(class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkCallingUriPermission", "(Landroid/net/Uri;I)I", "GetCheckCallingUriPermission_Landroid_net_Uri_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <summary>Determine whether the calling process and user ID has been
 granted permission to access a specific URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the calling process and user ID has been
 granted permission to access a specific URI.  This is basically
 the same as calling <c><see cref="M:Android.Content.Context.CheckUriPermission(Android.Net.Uri,System.Int32,System.Int32,System.Int32)" /></c> with the pid and uid returned by <c><see cref="P:Android.OS.Binder.CallingPid" /></c> and <c><see cref="P:Android.OS.Binder.CallingUid" /></c>.  One important difference is
 that if you are not currently processing an IPC, this function
 will always fail.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkCallingUriPermission(android.net.Uri, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckPermission (string permission, int pid, int uid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckPermission(string permission, int32 pid, int32 uid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkPermission", "(Ljava/lang/String;II)I", "GetCheckPermission_Ljava_lang_String_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <summary>Determine whether the given permission is allowed for a particular
 process and user ID running in the system.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether the given permission is allowed for a particular
 process and user ID running in the system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkPermission(java.lang.String, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckUriPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckUriPermission (Android.Net.Uri uri, int pid, int uid, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckUriPermission(class Android.Net.Uri uri, int32 pid, int32 uid, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkUriPermission", "(Landroid/net/Uri;III)I", "GetCheckUriPermission_Landroid_net_Uri_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <summary tool="true">Determine whether a particular process and user ID has been granted
 permission to access a specific URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether a particular process and user ID has been granted
 permission to access a specific URI.  This only checks for permissions
 that have been explicitly granted -- if the given process/uid has
 more general access to the URI's content provider then this check will
 always fail.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkUriPermission(android.net.Uri, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckUriPermission">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.Permission CheckUriPermission (Android.Net.Uri uri, string readPermission, string writePermission, int pid, int uid, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Android.Content.PM.Permission CheckUriPermission(class Android.Net.Uri uri, string readPermission, string writePermission, int32 pid, int32 uid, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkUriPermission", "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I", "GetCheckUriPermission_Landroid_net_Uri_Ljava_lang_String_Ljava_lang_String_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.Permission</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="readPermission" Type="System.String" />
        <Parameter Name="writePermission" Type="System.String" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uri">The Uri whose permission is to be checked, or null to not
 do this check.</param>
        <param name="readPermission">The permission that provides overall read access,
 or null to not do this check.</param>
        <param name="writePermission">The permission that provides overall write
 access, or null to not do this check.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <summary>Check both a Uri and normal permission.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check both a Uri and normal permission.  This allows you to perform
 both <c><see cref="M:Android.Content.Context.CheckPermission(System.String,System.Int32,System.Int32)" /></c> and <c><see cref="M:Android.Content.Context.CheckUriPermission(Android.Net.Uri,System.Int32,System.Int32,System.Int32)" /></c> in one
 call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClassLoader">
      <MemberSignature Language="C#" Value="public override Java.Lang.ClassLoader ClassLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ClassLoader ClassLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getClassLoader", "()Ljava/lang/ClassLoader;", "GetGetClassLoaderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ClassLoader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a class loader you can use to retrieve classes in this package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a class loader you can use to retrieve classes in this package.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getClassLoader()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearWallpaper">
      <MemberSignature Language="C#" Value="public override void ClearWallpaper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ClearWallpaper() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearWallpaper", "()V", "GetClearWallpaperHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#clearWallpaper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CodeCacheDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File CodeCacheDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File CodeCacheDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCodeCacheDir", "()Ljava/io/File;", "GetGetCodeCacheDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path to the application specific cache directory on
 the filesystem designed for storing cached code.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the application specific cache directory on
 the filesystem designed for storing cached code. The system will delete
 any files stored in this location both when your specific application is
 upgraded, and when the entire platform is upgraded.
 </para>
          <para tool="javadoc-to-mdoc">
 This location is optimal for storing compiled or optimized code generated
 by your application at runtime.
 </para>
          <para tool="javadoc-to-mdoc">
 Apps require no extra permissions to read or write to the returned path,
 since this path lives in their private storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getCodeCacheDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentResolver">
      <MemberSignature Language="C#" Value="public override Android.Content.ContentResolver ContentResolver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ContentResolver ContentResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContentResolver", "()Landroid/content/ContentResolver;", "GetGetContentResolverHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a ContentResolver instance for your application's package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a ContentResolver instance for your application's package. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getContentResolver()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateConfigurationContext">
      <MemberSignature Language="C#" Value="public override Android.Content.Context CreateConfigurationContext (Android.Content.Res.Configuration overrideConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Context CreateConfigurationContext(class Android.Content.Res.Configuration overrideConfiguration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createConfigurationContext", "(Landroid/content/res/Configuration;)Landroid/content/Context;", "GetCreateConfigurationContext_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overrideConfiguration" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="overrideConfiguration">A <c><see cref="T:Android.Content.Res.Configuration" /></c> specifying what
 values to modify in the base Configuration of the original Context's
 resources.  If the base configuration changes (such as due to an
 orientation change), the resources of this context will also change except
 for those that have been explicitly overridden with a value here.</param>
        <summary>Return a new Context object for the current Context but whose resources
 are adjusted to match the given Configuration.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a new Context object for the current Context but whose resources
 are adjusted to match the given Configuration.  Each call to this method
 returns a new instance of a Context object; Context objects are not
 shared, however common state (ClassLoader, other Resources for the
 same configuration) may be so the Context itself can be fairly lightweight.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#createConfigurationContext(android.content.res.Configuration)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreateDisplayContext">
      <MemberSignature Language="C#" Value="public override Android.Content.Context CreateDisplayContext (Android.Views.Display display);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Context CreateDisplayContext(class Android.Views.Display display) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createDisplayContext", "(Landroid/view/Display;)Landroid/content/Context;", "GetCreateDisplayContext_Landroid_view_Display_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="display" Type="Android.Views.Display" />
      </Parameters>
      <Docs>
        <param name="display">A <c><see cref="T:Android.Views.Display" /></c> object specifying the display
 for whose metrics the Context's resources should be tailored and upon which
 new windows should be shown.</param>
        <summary>Return a new Context object for the current Context but whose resources
 are adjusted to match the metrics of the given Display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a new Context object for the current Context but whose resources
 are adjusted to match the metrics of the given Display.  Each call to this method
 returns a new instance of a Context object; Context objects are not
 shared, however common state (ClassLoader, other Resources for the
 same configuration) may be so the Context itself can be fairly lightweight.

 The returned display Context provides a <c><see cref="T:Android.Views.IWindowManager" /></c>
 (see <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>) that is configured to show windows
 on the given display.  The WindowManager's <c><see cref="P:Android.Views.IWindowManager.DefaultDisplay" /></c>
 method can be used to retrieve the Display from the returned Context.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#createDisplayContext(android.view.Display)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="CreatePackageContext">
      <MemberSignature Language="C#" Value="public override Android.Content.Context CreatePackageContext (string packageName, Android.Content.PackageContextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Context CreatePackageContext(string packageName, valuetype Android.Content.PackageContextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createPackageContext", "(Ljava/lang/String;I)Landroid/content/Context;", "GetCreatePackageContext_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
        <Parameter Name="flags" Type="Android.Content.PackageContextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="packageName">Name of the application's package.</param>
        <param name="flags">Option flags, one of <c><see cref="!:Android.Content.Context.CONTEXT_INCLUDE_CODE" /></c>
              or <c><see cref="!:Android.Content.Context.CONTEXT_IGNORE_SECURITY" /></c>.</param>
        <summary>Return a new Context object for the given application name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a new Context object for the given application name.  This
 Context is the same as what the named application gets when it is
 launched, containing the same resources and class loader.  Each call to
 this method returns a new instance of a Context object; Context objects
 are not shared, however they share common state (Resources, ClassLoader,
 etc) so the Context instance itself is fairly lightweight.

 </para>
          <para tool="javadoc-to-mdoc">Throws <c><see cref="T:Android.Content.PM.PackageManager+NameNotFoundException" tool="ReplaceLinkValue" /></c> if there is no
 application with the given package name.

 </para>
          <para tool="javadoc-to-mdoc">Throws <c><see cref="T:Java.Lang.SecurityException" /></c> if the Context requested
 can not be loaded into the caller's process for security reasons (see
 <c><see cref="!:Android.Content.Context.CONTEXT_INCLUDE_CODE" /></c> for more information}.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#createPackageContext(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="!:NoType:android/content/pm/PackageManager$NameNotFoundException;Href=../../../../reference/android/content/pm/PackageManager.NameNotFoundException.html" />
      </Docs>
    </Member>
    <Member MemberName="DatabaseList">
      <MemberSignature Language="C#" Value="public override string[] DatabaseList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] DatabaseList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("databaseList", "()[Ljava/lang/String;", "GetDatabaseListHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of strings naming the private databases associated with
 this Context's application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an array of strings naming the private databases associated with
 this Context's application package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#databaseList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public override bool DeleteDatabase (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteDatabase(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteDatabase", "(Ljava/lang/String;)Z", "GetDeleteDatabase_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name (unique in the application package) of the
             database.</param>
        <summary>Delete an existing private SQLiteDatabase associated with this Context's
 application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Delete an existing private SQLiteDatabase associated with this Context's
 application package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#deleteDatabase(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public override bool DeleteFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteFile(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteFile", "(Ljava/lang/String;)Z", "GetDeleteFile_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the file to delete; can not contain path
             separators.</param>
        <summary>Delete the given private file associated with this Context's
 application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Delete the given private file associated with this Context's
 application package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#deleteFile(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceCallingOrSelfPermission">
      <MemberSignature Language="C#" Value="public override void EnforceCallingOrSelfPermission (string permission, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceCallingOrSelfPermission(string permission, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceCallingOrSelfPermission", "(Ljava/lang/String;Ljava/lang/String;)V", "GetEnforceCallingOrSelfPermission_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>If neither you nor the calling process of an IPC you are
 handling has been granted a particular permission, throw a
 <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If neither you nor the calling process of an IPC you are
 handling has been granted a particular permission, throw a
 <c><see cref="T:Java.Lang.SecurityException" /></c>.  This is the same as <c><see cref="M:Android.Content.Context.EnforceCallingPermission(System.String,System.String)" /></c>, except it grants your own
 permissions if you are not currently processing an IPC.  Use
 with care!</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceCallingOrSelfPermission(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceCallingOrSelfUriPermission">
      <MemberSignature Language="C#" Value="public override void EnforceCallingOrSelfUriPermission (Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceCallingOrSelfUriPermission(class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceCallingOrSelfUriPermission", "(Landroid/net/Uri;ILjava/lang/String;)V", "GetEnforceCallingOrSelfUriPermission_Landroid_net_Uri_ILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>If the calling process of an IPC <i>or you</i> has not been
 granted permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If the calling process of an IPC <i>or you</i> has not been
 granted permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.  This is the same as <c><see cref="M:Android.Content.Context.EnforceCallingUriPermission(Android.Net.Uri,Android.Content.ActivityFlags,Android.Content.ActivityFlags)" /></c>, except it grants your own
 permissions if you are not currently processing an IPC.  Use
 with care!</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceCallingPermission">
      <MemberSignature Language="C#" Value="public override void EnforceCallingPermission (string permission, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceCallingPermission(string permission, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceCallingPermission", "(Ljava/lang/String;Ljava/lang/String;)V", "GetEnforceCallingPermission_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>If the calling process of an IPC you are handling has not been
 granted a particular permission, throw a <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If the calling process of an IPC you are handling has not been
 granted a particular permission, throw a <c><see cref="T:Java.Lang.SecurityException" /></c>.  This is basically the same as calling
 <c><see cref="M:Android.Content.Context.EnforcePermission(System.String,System.Int32,System.Int32,System.Int32)" /></c> with the
 pid and uid returned by <c><see cref="P:Android.OS.Binder.CallingPid" /></c>
 and <c><see cref="P:Android.OS.Binder.CallingUid" /></c>.  One important
 difference is that if you are not currently processing an IPC,
 this function will always throw the SecurityException.  This is
 done to protect against accidentally leaking permissions; you
 can use <c><see cref="M:Android.Content.Context.EnforceCallingOrSelfPermission(System.String,System.String)" /></c> to avoid this
 protection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceCallingPermission(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceCallingUriPermission">
      <MemberSignature Language="C#" Value="public override void EnforceCallingUriPermission (Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceCallingUriPermission(class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceCallingUriPermission", "(Landroid/net/Uri;ILjava/lang/String;)V", "GetEnforceCallingUriPermission_Landroid_net_Uri_ILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>If the calling process and user ID has not been granted
 permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If the calling process and user ID has not been granted
 permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.  This is basically the same as calling
 <c><see cref="M:Android.Content.Context.EnforceUriPermission(Android.Net.Uri,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> with
 the pid and uid returned by <c><see cref="P:Android.OS.Binder.CallingPid" /></c> and <c><see cref="P:Android.OS.Binder.CallingUid" /></c>.  One important difference is
 that if you are not currently processing an IPC, this function
 will always throw a SecurityException.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceCallingUriPermission(android.net.Uri, int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforcePermission">
      <MemberSignature Language="C#" Value="public override void EnforcePermission (string permission, int pid, int uid, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforcePermission(string permission, int32 pid, int32 uid, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforcePermission", "(Ljava/lang/String;IILjava/lang/String;)V", "GetEnforcePermission_Ljava_lang_String_IILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">The name of the permission being checked.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>If the given permission is not allowed for a particular process
 and user ID running in the system, throw a <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If the given permission is not allowed for a particular process
 and user ID running in the system, throw a <c><see cref="T:Java.Lang.SecurityException" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforcePermission(java.lang.String, int, int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceUriPermission">
      <MemberSignature Language="C#" Value="public override void EnforceUriPermission (Android.Net.Uri uri, int pid, int uid, Android.Content.ActivityFlags modeFlags, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceUriPermission(class Android.Net.Uri uri, int32 pid, int32 uid, valuetype Android.Content.ActivityFlags modeFlags, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceUriPermission", "(Landroid/net/Uri;IIILjava/lang/String;)V", "GetEnforceUriPermission_Landroid_net_Uri_IIILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The uri that is being checked.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary tool="true">If a particular process and user ID has not been granted
 permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If a particular process and user ID has not been granted
 permission to access a specific URI, throw <c><see cref="T:Java.Lang.SecurityException" /></c>.  This only checks for permissions that have
 been explicitly granted -- if the given process/uid has more
 general access to the URI's content provider then this check
 will always fail.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EnforceUriPermission">
      <MemberSignature Language="C#" Value="public override void EnforceUriPermission (Android.Net.Uri uri, string readPermission, string writePermission, int pid, int uid, Android.Content.ActivityFlags modeFlags, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnforceUriPermission(class Android.Net.Uri uri, string readPermission, string writePermission, int32 pid, int32 uid, valuetype Android.Content.ActivityFlags modeFlags, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enforceUriPermission", "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V", "GetEnforceUriPermission_Landroid_net_Uri_Ljava_lang_String_Ljava_lang_String_IIILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="readPermission" Type="System.String" />
        <Parameter Name="writePermission" Type="System.String" />
        <Parameter Name="pid" Type="System.Int32" />
        <Parameter Name="uid" Type="System.Int32" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The Uri whose permission is to be checked, or null to not
 do this check.</param>
        <param name="readPermission">The permission that provides overall read access,
 or null to not do this check.</param>
        <param name="writePermission">The permission that provides overall write
 access, or null to not do this check.</param>
        <param name="pid">The process ID being checked against.  Must be &gt; 0.</param>
        <param name="uid">The user ID being checked against.  A uid of 0 is the root
 user, which will pass every permission check.</param>
        <param name="modeFlags">The type of access to grant.  May be one or both of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <param name="message">A message to include in the exception if it is thrown.</param>
        <summary>Enforce both a Uri and normal permission.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enforce both a Uri and normal permission.  This allows you to perform
 both <c><see cref="M:Android.Content.Context.EnforcePermission(System.String,System.Int32,System.Int32,System.Int32)" /></c> and <c><see cref="M:Android.Content.Context.EnforceUriPermission(Android.Net.Uri,System.Int32,System.Int32,System.Int32,System.Int32)" /></c> in one
 call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ExternalCacheDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File ExternalCacheDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File ExternalCacheDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExternalCacheDir", "()Ljava/io/File;", "GetGetExternalCacheDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path to the directory on the primary external filesystem
 (that is somewhere on <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c> where the application can
 place cache files it owns.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the directory on the primary external filesystem
 (that is somewhere on <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c> where the application can
 place cache files it owns. These files are internal to the application, and
 not typically visible to the user as media.

 </para>
          <para tool="javadoc-to-mdoc">This is like <c><see cref="P:Android.Content.Context.CacheDir" /></c> in that these
 files will be deleted when the application is uninstalled, however there
 are some important differences:

 <list type="bullet"><item><term>The platform does not always monitor the space available in external
 storage, and thus may not automatically delete these files.  Currently
 the only time files here will be deleted by the platform is when running
 on <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR1" /></c> or later and
 <c><see cref="P:Android.OS.Environment.IsExternalStorageEmulated" /></c> returns true.  Note that you should
 be managing the maximum space you will use for these anyway, just like
 with <c><see cref="P:Android.Content.Context.CacheDir" /></c>.
 </term></item><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.  See the
 APIs on <c><see cref="T:Android.OS.Environment" /></c> for information in the storage state.
 </term></item><item><term>There is no security enforced with these files.  For example, any application
 holding <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c> can write to
 these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">Starting in <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#KITKAT" /></c>, no permissions
 are required to read or write to the returned path; it's always
 accessible to the calling app.  This only applies to paths generated for
 package name of the calling application.  To access paths belonging
 to other packages, <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c>
 and/or <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE" /></c> are required.

 </para>
          <para tool="javadoc-to-mdoc">On devices with multiple users (as described by <c><see cref="T:Android.OS.UserManager" /></c>),
 each user has their own isolated external storage. Applications only
 have access to the external storage for the user they're running as.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getExternalCacheDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="FileList">
      <MemberSignature Language="C#" Value="public override string[] FileList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FileList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fileList", "()[Ljava/lang/String;", "GetFileListHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of strings naming the private files associated with
 this Context's application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an array of strings naming the private files associated with
 this Context's application package.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#fileList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FilesDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File FilesDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File FilesDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFilesDir", "()Ljava/io/File;", "GetGetFilesDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path to the directory on the filesystem where
 files created with <c><see cref="M:Android.Content.Context.OpenFileOutput(System.String,Android.Content.FileCreationMode)" /></c> are stored.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the directory on the filesystem where
 files created with <c><see cref="M:Android.Content.Context.OpenFileOutput(System.String,Android.Content.FileCreationMode)" /></c> are stored.

 </para>
          <para tool="javadoc-to-mdoc">No permissions are required to read or write to the returned path, since this
 path is internal storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getFilesDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetDatabasePath">
      <MemberSignature Language="C#" Value="public override Java.IO.File GetDatabasePath (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File GetDatabasePath(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDatabasePath", "(Ljava/lang/String;)Ljava/io/File;", "GetGetDatabasePath_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the database for which you would like to get
          its path.</param>
        <summary>Returns the absolute path on the filesystem where a database created with
 <c><see cref="M:Android.Content.Context.OpenOrCreateDatabase(System.String,Android.Content.FileCreationMode,Android.Content.FileCreationMode)" /></c> is stored.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path on the filesystem where a database created with
 <c><see cref="M:Android.Content.Context.OpenOrCreateDatabase(System.String,Android.Content.FileCreationMode,Android.Content.FileCreationMode)" /></c> is stored.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getDatabasePath(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File GetDir (string name, Android.Content.FileCreationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File GetDir(string name, valuetype Android.Content.FileCreationMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDir", "(Ljava/lang/String;I)Ljava/io/File;", "GetGetDir_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">Name of the directory to retrieve.  This is a directory
 that is created as part of your application data.</param>
        <param name="mode">Operating mode.  Use 0 or <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the
 default operation, <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c> and
 <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control permissions.</param>
        <summary>Retrieve, creating if needed, a new directory in which the application
 can place its own custom data files.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve, creating if needed, a new directory in which the application
 can place its own custom data files.  You can use the returned File
 object to create and access files in this directory.  Note that files
 created through a File object will only be accessible by your own
 application; you can only set the mode of the entire directory, not
 of individual files.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getDir(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetExternalCacheDirs">
      <MemberSignature Language="C#" Value="public override Java.IO.File[] GetExternalCacheDirs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File[] GetExternalCacheDirs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalCacheDirs", "()[Ljava/io/File;", "GetGetExternalCacheDirsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns absolute paths to application-specific directories on all
 external storage devices where the application can place cache files it
 owns.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns absolute paths to application-specific directories on all
 external storage devices where the application can place cache files it
 owns. These files are internal to the application, and not typically
 visible to the user as media.
 </para>
          <para tool="javadoc-to-mdoc">
 This is like <c><see cref="P:Android.Content.Context.CacheDir" /></c> in that these files will be deleted when
 the application is uninstalled, however there are some important differences:
 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.
 </term></item><item><term>There is no security enforced with these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 External storage devices returned here are considered a permanent part of
 the device, including both emulated external storage and physical media
 slots, such as SD cards in a battery compartment. The returned paths do
 not include transient devices, such as USB flash drives.
 </para>
          <para tool="javadoc-to-mdoc">
 An application may store data on any or all of the returned devices.  For
 example, an app may choose to store large files on the device with the
 most available space, as measured by <c><see cref="T:Android.OS.StatFs" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 No permissions are required to read or write to the returned paths; they
 are always accessible to the calling app.  Write access outside of these
 paths on secondary external storage devices is not available.
 </para>
          <para tool="javadoc-to-mdoc">
 The first path returned is the same as <c><see cref="P:Android.Content.Context.ExternalCacheDir" /></c>.
 Returned paths may be <c>null</c> if a storage device is unavailable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getExternalCacheDirs()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalFilesDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File GetExternalFilesDir (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File GetExternalFilesDir(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalFilesDir", "(Ljava/lang/String;)Ljava/io/File;", "GetGetExternalFilesDir_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of files directory to return.  May be null for
 the root of the files directory or one of
 the following Environment constants for a subdirectory:
 <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryPictures" /></c>, or
 <c><see cref="P:Android.OS.Environment.DirectoryMovies" /></c>.</param>
        <summary>Returns the absolute path to the directory on the primary external filesystem
 (that is somewhere on <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c>) where the application can
 place persistent files it owns.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the directory on the primary external filesystem
 (that is somewhere on <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c>) where the application can
 place persistent files it owns.  These files are internal to the
 applications, and not typically visible to the user as media.

 </para>
          <para tool="javadoc-to-mdoc">This is like <c><see cref="P:Android.Content.Context.FilesDir" /></c> in that these
 files will be deleted when the application is uninstalled, however there
 are some important differences:

 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.  See the
 APIs on <c><see cref="T:Android.OS.Environment" /></c> for information in the storage state.
 </term></item><item><term>There is no security enforced with these files.  For example, any application
 holding <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c> can write to
 these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">Starting in <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#KITKAT" /></c>, no permissions
 are required to read or write to the returned path; it's always
 accessible to the calling app.  This only applies to paths generated for
 package name of the calling application.  To access paths belonging
 to other packages, <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c>
 and/or <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE" /></c> are required.

 </para>
          <para tool="javadoc-to-mdoc">On devices with multiple users (as described by <c><see cref="T:Android.OS.UserManager" /></c>),
 each user has their own isolated external storage. Applications only
 have access to the external storage for the user they're running as.</para>
          <para tool="javadoc-to-mdoc">Here is an example of typical code to manipulate a file in
 an application's private storage:<example><code lang="java">void createExternalStoragePrivateFile() {
    // Create a path where we will place our private file on external
    // storage.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");

    try {
        // Very simple code to copy a picture from the application's
        // resource into the external file.  Note that this code does
        // no error checking, and assumes the picture is small (does not
        // try to copy it in chunks).  Note that if external storage is
        // not currently mounted this will silently fail.
        InputStream is = getResources().openRawResource(R.drawable.balloons);
        OutputStream os = new FileOutputStream(file);
        byte[] data = new byte[is.available()];
        is.read(data);
        os.write(data);
        is.close();
        os.close();
    } catch (IOException e) {
        // Unable to create file, likely because external storage is
        // not currently mounted.
        Log.w("ExternalStorage", "Error writing " + file, e);
    }
}

void deleteExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        file.delete();
    }
}

boolean hasExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        return file.exists();
    }
    return false;
}</code></example></para>
          <para tool="javadoc-to-mdoc">If you supply a non-null <format type="text/html"><var>type</var></format> to this function, the returned
 file will be a path to a sub-directory of the given type.  Though these files
 are not automatically scanned by the media scanner, you can explicitly
 add them to the media database with
 <c><see cref="M:Android.Media.MediaScannerConnection.ScanFile(Android.Content.Context,System.String[],System.String[],System.String[])" /></c>.
 Note that this is not the same as
 <c><see cref="M:Android.OS.Environment.GetExternalStoragePublicDirectory(System.String)" /></c>, which provides
 directories of media shared by all applications.  The
 directories returned here are
 owned by the application, and their contents will be removed when the
 application is uninstalled.  Unlike
 <c><see cref="M:Android.OS.Environment.GetExternalStoragePublicDirectory(System.String)" /></c>, the directory
 returned here will be automatically created for you.

 <example><code lang="java">void createExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in our own private
    // pictures directory.  Note that we don't really need to place a
    // picture in DIRECTORY_PICTURES, since the media scanner will see
    // all media in these directories; this may be useful with other
    // media types such as DIRECTORY_MUSIC however to help it classify
    // your media for display to the user.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    File file = new File(path, "DemoPicture.jpg");

    try {
        // Very simple code to copy a picture from the application's
        // resource into the external file.  Note that this code does
        // no error checking, and assumes the picture is small (does not
        // try to copy it in chunks).  Note that if external storage is
        // not currently mounted this will silently fail.
        InputStream is = getResources().openRawResource(R.drawable.balloons);
        OutputStream os = new FileOutputStream(file);
        byte[] data = new byte[is.available()];
        is.read(data);
        os.write(data);
        is.close();
        os.close();

        // Tell the media scanner about the new file so that it is
        // immediately available to the user.
        MediaScannerConnection.scanFile(this,
                new String[] { file.toString() }, null,
                new MediaScannerConnection.OnScanCompletedListener() {
            public void onScanCompleted(String path, Uri uri) {
                Log.i("ExternalStorage", "Scanned " + path + ":");
                Log.i("ExternalStorage", "-&gt; uri=" + uri);
            }
        });
    } catch (IOException e) {
        // Unable to create file, likely because external storage is
        // not currently mounted.
        Log.w("ExternalStorage", "Error writing " + file, e);
    }
}

void deleteExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and delete the file.  If external
    // storage is not currently mounted this will fail.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    if (path != null) {
        File file = new File(path, "DemoPicture.jpg");
        file.delete();
    }
}

boolean hasExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and check if the file exists.  If
    // external storage is not currently mounted this will think the
    // picture doesn't exist.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    if (path != null) {
        File file = new File(path, "DemoPicture.jpg");
        return file.exists();
    }
    return false;
}</code></example></para>
          <para tool="javadoc-to-mdoc">Here is an example of typical code to manipulate a picture in
 an application's private storage and add it to the media database:</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getExternalFilesDir(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetExternalFilesDirs">
      <MemberSignature Language="C#" Value="public override Java.IO.File[] GetExternalFilesDirs (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File[] GetExternalFilesDirs(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalFilesDirs", "(Ljava/lang/String;)[Ljava/io/File;", "GetGetExternalFilesDirs_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Returns absolute paths to application-specific directories on all
 external storage devices where the application can place persistent files
 it owns.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns absolute paths to application-specific directories on all
 external storage devices where the application can place persistent files
 it owns. These files are internal to the application, and not typically
 visible to the user as media.
 </para>
          <para tool="javadoc-to-mdoc">
 This is like <c><see cref="P:Android.Content.Context.FilesDir" /></c> in that these files will be deleted when
 the application is uninstalled, however there are some important differences:
 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.
 </term></item><item><term>There is no security enforced with these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 External storage devices returned here are considered a permanent part of
 the device, including both emulated external storage and physical media
 slots, such as SD cards in a battery compartment. The returned paths do
 not include transient devices, such as USB flash drives.
 </para>
          <para tool="javadoc-to-mdoc">
 An application may store data on any or all of the returned devices.  For
 example, an app may choose to store large files on the device with the
 most available space, as measured by <c><see cref="T:Android.OS.StatFs" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 No permissions are required to read or write to the returned paths; they
 are always accessible to the calling app.  Write access outside of these
 paths on secondary external storage devices is not available.
 </para>
          <para tool="javadoc-to-mdoc">
 The first path returned is the same as <c><see cref="M:Android.Content.Context.GetExternalFilesDir(System.String)" /></c>.
 Returned paths may be <c>null</c> if a storage device is unavailable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getExternalFilesDirs(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalMediaDirs">
      <MemberSignature Language="C#" Value="public override Java.IO.File[] GetExternalMediaDirs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File[] GetExternalMediaDirs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalMediaDirs", "()[Ljava/io/File;", "GetGetExternalMediaDirsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns absolute paths to application-specific directories on all
 external storage devices where the application can place media files.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns absolute paths to application-specific directories on all
 external storage devices where the application can place media files.
 These files are scanned and made available to other apps through
 <c><see cref="T:Android.Provider.MediaStore" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This is like <c><see cref="M:Android.Content.Context.GetExternalFilesDirs(System.String)" /></c> in that these files will be
 deleted when the application is uninstalled, however there are some
 important differences:
 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.
 </term></item><item><term>There is no security enforced with these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 External storage devices returned here are considered a permanent part of
 the device, including both emulated external storage and physical media
 slots, such as SD cards in a battery compartment. The returned paths do
 not include transient devices, such as USB flash drives.
 </para>
          <para tool="javadoc-to-mdoc">
 An application may store data on any or all of the returned devices. For
 example, an app may choose to store large files on the device with the
 most available space, as measured by <c><see cref="T:Android.OS.StatFs" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 No permissions are required to read or write to the returned paths; they
 are always accessible to the calling app. Write access outside of these
 paths on secondary external storage devices is not available.
 </para>
          <para tool="javadoc-to-mdoc">
 Returned paths may be <c>null</c> if a storage device is unavailable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getExternalMediaDirs()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileStreamPath">
      <MemberSignature Language="C#" Value="public override Java.IO.File GetFileStreamPath (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File GetFileStreamPath(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFileStreamPath", "(Ljava/lang/String;)Ljava/io/File;", "GetGetFileStreamPath_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the file for which you would like to get
          its path.</param>
        <summary>Returns the absolute path on the filesystem where a file created with
 <c><see cref="M:Android.Content.Context.OpenFileOutput(System.String,Android.Content.FileCreationMode)" /></c> is stored.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path on the filesystem where a file created with
 <c><see cref="M:Android.Content.Context.OpenFileOutput(System.String,Android.Content.FileCreationMode)" /></c> is stored.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getFileStreamPath(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetObbDirs">
      <MemberSignature Language="C#" Value="public override Java.IO.File[] GetObbDirs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.IO.File[] GetObbDirs() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getObbDirs", "()[Ljava/io/File;", "GetGetObbDirsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns absolute paths to application-specific directories on all
 external storage devices where the application's OBB files (if there are
 any) can be found.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns absolute paths to application-specific directories on all
 external storage devices where the application's OBB files (if there are
 any) can be found. Note if the application does not have any OBB files,
 these directories may not exist.
 </para>
          <para tool="javadoc-to-mdoc">
 This is like <c><see cref="P:Android.Content.Context.FilesDir" /></c> in that these files will be deleted when
 the application is uninstalled, however there are some important differences:
 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.
 </term></item><item><term>There is no security enforced with these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 External storage devices returned here are considered a permanent part of
 the device, including both emulated external storage and physical media
 slots, such as SD cards in a battery compartment. The returned paths do
 not include transient devices, such as USB flash drives.
 </para>
          <para tool="javadoc-to-mdoc">
 An application may store data on any or all of the returned devices.  For
 example, an app may choose to store large files on the device with the
 most available space, as measured by <c><see cref="T:Android.OS.StatFs" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 No permissions are required to read or write to the returned paths; they
 are always accessible to the calling app.  Write access outside of these
 paths on secondary external storage devices is not available.
 </para>
          <para tool="javadoc-to-mdoc">
 The first path returned is the same as <c><see cref="P:Android.Content.Context.ObbDir" /></c>.
 Returned paths may be <c>null</c> if a storage device is unavailable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getObbDirs()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSharedPreferences">
      <MemberSignature Language="C#" Value="public override Android.Content.ISharedPreferences GetSharedPreferences (string name, Android.Content.FileCreationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.ISharedPreferences GetSharedPreferences(string name, valuetype Android.Content.FileCreationMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSharedPreferences", "(Ljava/lang/String;I)Landroid/content/SharedPreferences;", "GetGetSharedPreferences_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ISharedPreferences</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">Desired preferences file. If a preferences file by this name
 does not exist, it will be created when you retrieve an
 editor (SharedPreferences.edit()) and then commit changes (Editor.commit()).</param>
        <param name="mode">Operating mode.  Use 0 or <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the
 default operation, <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c>
 and <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control permissions.</param>
        <summary>Retrieve and hold the contents of the preferences file 'name', returning
 a SharedPreferences through which you can retrieve and modify its
 values.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve and hold the contents of the preferences file 'name', returning
 a SharedPreferences through which you can retrieve and modify its
 values.  Only one instance of the SharedPreferences object is returned
 to any callers for the same name, meaning they will see each other's
 edits as soon as they are made.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getSharedPreferences(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetSystemService">
      <MemberSignature Language="C#" Value="public override Java.Lang.Object GetSystemService (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.Object GetSystemService(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSystemService", "(Ljava/lang/String;)Ljava/lang/Object;", "GetGetSystemService_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the desired service.</param>
        <summary>Return the handle to a system-level service by name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the handle to a system-level service by name. The class of the
 returned object varies by the requested name. Currently available names
 are:

 <format type="text/html"><dl><dt><c><see cref="F:Android.Content.Context.WindowService" /></c> ("window")
  <dd> The top-level window manager in which you can place custom
  windows.  The returned object is a <c><see cref="T:Android.Views.IWindowManager" /></c>.
  <dt><c><see cref="F:Android.Content.Context.LayoutInflaterService" /></c> ("layout_inflater")
  <dd> A <c><see cref="T:Android.Views.LayoutInflater" /></c> for inflating layout resources
  in this context.
  <dt><c><see cref="F:Android.Content.Context.ActivityService" /></c> ("activity")
  <dd> A <c><see cref="T:Android.App.ActivityManager" /></c> for interacting with the
  global activity state of the system.
  <dt><c><see cref="F:Android.Content.Context.PowerService" /></c> ("power")
  <dd> A <c><see cref="T:Android.OS.PowerManager" /></c> for controlling power
  management.
  <dt><c><see cref="F:Android.Content.Context.AlarmService" /></c> ("alarm")
  <dd> A <c><see cref="T:Android.App.AlarmManager" /></c> for receiving intents at the
  time of your choosing.
  <dt><c><see cref="F:Android.Content.Context.NotificationService" /></c> ("notification")
  <dd> A <c><see cref="T:Android.App.NotificationManager" /></c> for informing the user
   of background events.
  <dt><c><see cref="F:Android.Content.Context.KeyguardService" /></c> ("keyguard")
  <dd> A <c><see cref="T:Android.App.KeyguardManager" /></c> for controlling keyguard.
  <dt><c><see cref="F:Android.Content.Context.LocationService" /></c> ("location")
  <dd> A <c><see cref="T:Android.Locations.LocationManager" /></c> for controlling location
   (e.g., GPS) updates.
  <dt><c><see cref="F:Android.Content.Context.SearchService" /></c> ("search")
  <dd> A <c><see cref="T:Android.App.SearchManager" /></c> for handling search.
  <dt><c><see cref="F:Android.Content.Context.VibratorService" /></c> ("vibrator")
  <dd> A <c><see cref="T:Android.OS.Vibrator" /></c> for interacting with the vibrator
  hardware.
  <dt><c><see cref="F:Android.Content.Context.ConnectivityService" /></c> ("connection")
  <dd> A <c><see cref="T:Android.Net.ConnectivityManager" /></c> for
  handling management of network connections.
  <dt><c><see cref="F:Android.Content.Context.WifiService" /></c> ("wifi")
  <dd> A <c><see cref="T:Android.Net.Wifi.WifiManager" /></c> for management of
 Wi-Fi connectivity.
  <dt><c><see cref="F:Android.Content.Context.WifiP2pService" /></c> ("wifip2p")
  <dd> A <c><see cref="T:Android.Net.Wifi.P2p.WifiP2pManager" /></c> for management of
 Wi-Fi Direct connectivity.
 <dt><c><see cref="F:Android.Content.Context.InputMethodService" /></c> ("input_method")
 <dd> An <c><see cref="T:Android.Views.InputMethods.InputMethodManager" /></c>
 for management of input methods.
 <dt><c><see cref="F:Android.Content.Context.UiModeService" /></c> ("uimode")
 <dd> An <c><see cref="T:Android.App.UiModeManager" /></c> for controlling UI modes.
 <dt><c><see cref="F:Android.Content.Context.DownloadService" /></c> ("download")
 <dd> A <c><see cref="T:Android.App.DownloadManager" /></c> for requesting HTTP downloads
 <dt><c><see cref="F:Android.Content.Context.BatteryService" /></c> ("batterymanager")
 <dd> A <c><see cref="T:Android.OS.BatteryManager" /></c> for managing battery state
 <dt><c><see cref="F:Android.Content.Context.JobSchedulerService" /></c> ("taskmanager")
 <dd>  A <c><see cref="T:Android.App.Job.JobScheduler" /></c> for managing scheduled tasks
 <dt><c><see cref="F:Android.Content.Context.NetworkStatsService" /></c> ("netstats")
 <dd> A <c><see cref="T:Android.App.Usage.NetworkStatsManager" /></c> for querying network
 usage statistics.
 </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl></format></para>
          <para tool="javadoc-to-mdoc">Note:  System services obtained via this API may be closely associated with
 the Context in which they are obtained from.  In general, do not share the
 service objects between various different contexts (Activities, Applications,
 Services, Providers, etc.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getSystemService(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GrantUriPermission">
      <MemberSignature Language="C#" Value="public override void GrantUriPermission (string toPackage, Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GrantUriPermission(string toPackage, class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("grantUriPermission", "(Ljava/lang/String;Landroid/net/Uri;I)V", "GetGrantUriPermission_Ljava_lang_String_Landroid_net_Uri_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toPackage" Type="System.String" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="toPackage">The package you would like to allow to access the Uri.</param>
        <param name="uri">The Uri you would like to grant access to.</param>
        <param name="modeFlags">The desired access modes.  Any combination of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c>,
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>,
 <c><see cref="!:Android.Content.Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION" /></c>, or
 <c><see cref="!:Android.Content.Intent.FLAG_GRANT_PREFIX_URI_PERMISSION" /></c>.</param>
        <summary>Grant permission to access a specific Uri to another package, regardless
 of whether that package has general permission to access the Uri's
 content provider.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Grant permission to access a specific Uri to another package, regardless
 of whether that package has general permission to access the Uri's
 content provider.  This can be used to grant specific, temporary
 permissions, typically in response to user interaction (such as the
 user opening an attachment that you would like someone else to
 display).

 </para>
          <para tool="javadoc-to-mdoc">Normally you should use <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c> with the Intent being used to
 start an activity instead of this function directly.  If you use this
 function directly, you should be sure to call
 <c><see cref="M:Android.Content.Context.RevokeUriPermission(Android.Net.Uri,Android.Content.ActivityFlags)" /></c> when the target should no longer be allowed
 to access it.

 </para>
          <para tool="javadoc-to-mdoc">To succeed, the content provider owning the Uri must have set the
 <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#AndroidManifestProvider_grantUriPermissions" /></c> attribute in its manifest or included the
 <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#AndroidManifestGrantUriPermission" /></c> tag.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#grantUriPermission(java.lang.String, android.net.Uri, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MainLooper">
      <MemberSignature Language="C#" Value="public override Android.OS.Looper MainLooper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Looper MainLooper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMainLooper", "()Landroid/os/Looper;", "GetGetMainLooperHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Looper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Looper for the main thread of the current process.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Looper for the main thread of the current process.  This is
 the thread used to dispatch calls to application components (activities,
 services, etc).
 </para>
          <para tool="javadoc-to-mdoc">
 By definition, this method returns the same result as would be obtained
 by calling <c><see cref="P:Android.OS.Looper.MainLooper" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getMainLooper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NoBackupFilesDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File NoBackupFilesDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File NoBackupFilesDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNoBackupFilesDir", "()Ljava/io/File;", "GetGetNoBackupFilesDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the absolute path to the directory on the filesystem similar to
 <c><see cref="P:Android.Content.Context.FilesDir" /></c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the absolute path to the directory on the filesystem similar to
 <c><see cref="P:Android.Content.Context.FilesDir" /></c>.  The difference is that files placed under this
 directory will be excluded from automatic backup to remote storage.  See
 <c><see cref="T:Android.App.Backup.BackupAgent" /></c> for a full discussion
 of the automatic backup mechanism in Android.

 </para>
          <para tool="javadoc-to-mdoc">No permissions are required to read or write to the returned path, since this
 path is internal storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getNoBackupFilesDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObbDir">
      <MemberSignature Language="C#" Value="public override Java.IO.File ObbDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.File ObbDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getObbDir", "()Ljava/io/File;", "GetGetObbDirHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the primary external storage directory where this application's OBB
 files (if there are any) can be found.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the primary external storage directory where this application's OBB
 files (if there are any) can be found. Note if the application does not have
 any OBB files, this directory may not exist.
 </para>
          <para tool="javadoc-to-mdoc">
 This is like <c><see cref="P:Android.Content.Context.FilesDir" /></c> in that these files will be deleted when
 the application is uninstalled, however there are some important differences:
 <list type="bullet"><item><term>External files are not always available: they will disappear if the
 user mounts the external storage on a computer or removes it.
 </term></item><item><term>There is no security enforced with these files.  For example, any application
 holding <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c> can write to
 these files.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
 Starting in <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#KITKAT" /></c>, no permissions
 are required to read or write to the returned path; it's always
 accessible to the calling app.  This only applies to paths generated for
 package name of the calling application.  To access paths belonging
 to other packages, <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c>
 and/or <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE" /></c> are required.
 </para>
          <para tool="javadoc-to-mdoc">
 On devices with multiple users (as described by <c><see cref="T:Android.OS.UserManager" /></c>),
 multiple users may share the same OBB storage location. Applications
 should ensure that multiple instances running under different users don't
 interfere with each other.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getObbDir()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OpenFileInput">
      <MemberSignature Language="C#" Value="public override System.IO.Stream OpenFileInput (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream OpenFileInput(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFileInput", "(Ljava/lang/String;)Ljava/io/FileInputStream;", "GetOpenFileInput_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the file to open; can not contain path
             separators.</param>
        <summary>Open a private file associated with this Context's application package
 for reading.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open a private file associated with this Context's application package
 for reading.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#openFileInput(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenFileOutput">
      <MemberSignature Language="C#" Value="public override System.IO.Stream OpenFileOutput (string name, Android.Content.FileCreationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream OpenFileOutput(string name, valuetype Android.Content.FileCreationMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFileOutput", "(Ljava/lang/String;I)Ljava/io/FileOutputStream;", "GetOpenFileOutput_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the file to open; can not contain path
             separators.</param>
        <param name="mode">Operating mode.  Use 0 or <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the
 default operation, <c><see cref="!:Android.Content.Context.MODE_APPEND" /></c> to append to an existing file,
 <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c> and <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control
 permissions.</param>
        <summary>Open a private file associated with this Context's application package
 for writing.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open a private file associated with this Context's application package
 for writing.  Creates the file if it doesn't already exist.

 </para>
          <para tool="javadoc-to-mdoc">No permissions are required to invoke this method, since it uses internal
 storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#openFileOutput(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreateDatabase">
      <MemberSignature Language="C#" Value="public override Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase (string file, Android.Content.FileCreationMode mode, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(string file, valuetype Android.Content.FileCreationMode mode, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOrCreateDatabase", "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;", "GetOpenOrCreateDatabase_Ljava_lang_String_ILandroid_database_sqlite_SQLiteDatabase_CursorFactory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
      </Parameters>
      <Docs>
        <param name="file">The name (unique in the application package) of the database.</param>
        <param name="mode">Operating mode.  Use 0 or <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the
     default operation, <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c>
     and <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control permissions.
     Use <c><see cref="!:Android.Content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING" /></c> to enable write-ahead logging by default.</param>
        <param name="factory">An optional factory class that is called to instantiate a
     cursor when query is called.</param>
        <summary>Open a new private SQLiteDatabase associated with this Context's
 application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open a new private SQLiteDatabase associated with this Context's
 application package.  Create the database file if it doesn't exist.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OpenOrCreateDatabase">
      <MemberSignature Language="C#" Value="public override Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase (string file, Android.Content.FileCreationMode mode, Android.Database.Sqlite.SQLiteDatabase.ICursorFactory factory, Android.Database.IDatabaseErrorHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Database.Sqlite.SQLiteDatabase OpenOrCreateDatabase(string file, valuetype Android.Content.FileCreationMode mode, class Android.Database.Sqlite.SQLiteDatabase/ICursorFactory factory, class Android.Database.IDatabaseErrorHandler errorHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openOrCreateDatabase", "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;", "GetOpenOrCreateDatabase_Ljava_lang_String_ILandroid_database_sqlite_SQLiteDatabase_CursorFactory_Landroid_database_DatabaseErrorHandler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.SQLiteDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="mode" Type="Android.Content.FileCreationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="factory" Type="Android.Database.Sqlite.SQLiteDatabase+ICursorFactory" />
        <Parameter Name="errorHandler" Type="Android.Database.IDatabaseErrorHandler" />
      </Parameters>
      <Docs>
        <param name="file">The name (unique in the application package) of the database.</param>
        <param name="mode">Operating mode.  Use 0 or <c><see cref="F:Android.Content.FileCreationMode.Private" tool="ReplaceLinkValue" /></c> for the
     default operation, <c><see cref="F:Android.Content.FileCreationMode.WorldReadable" tool="ReplaceLinkValue" /></c>
     and <c><see cref="F:Android.Content.FileCreationMode.WorldWriteable" tool="ReplaceLinkValue" /></c> to control permissions.
     Use <c><see cref="!:Android.Content.Context.MODE_ENABLE_WRITE_AHEAD_LOGGING" /></c> to enable write-ahead logging by default.</param>
        <param name="factory">An optional factory class that is called to instantiate a
     cursor when query is called.</param>
        <param name="errorHandler">the <c><see cref="T:Android.Database.IDatabaseErrorHandler" /></c> to be used when sqlite reports database
 corruption. if null, <c><see cref="T:Android.Database.DefaultDatabaseErrorHandler" /></c> is assumed.</param>
        <summary>Open a new private SQLiteDatabase associated with this Context's
 application package.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Open a new private SQLiteDatabase associated with this Context's
 application package.  Creates the database file if it doesn't exist.

 </para>
          <para tool="javadoc-to-mdoc">Accepts input param: a concrete instance of <c><see cref="T:Android.Database.IDatabaseErrorHandler" /></c> to be
 used to handle corruption when sqlite reports database corruption.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="PackageCodePath">
      <MemberSignature Language="C#" Value="public override string PackageCodePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PackageCodePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPackageCodePath", "()Ljava/lang/String;", "GetGetPackageCodePathHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the full path to this context's primary Android package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the full path to this context's primary Android package.
 The Android package is a ZIP file which contains application's
 primary code and assets.

 </para>
          <para tool="javadoc-to-mdoc">Note: this is not generally useful for applications, since they should
 not be directly accessing the file system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getPackageCodePath()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PackageManager">
      <MemberSignature Language="C#" Value="public override Android.Content.PM.PackageManager PackageManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.PM.PackageManager PackageManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPackageManager", "()Landroid/content/pm/PackageManager;", "GetGetPackageManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.PackageManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return PackageManager instance to find global package information.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return PackageManager instance to find global package information. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getPackageManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PackageName">
      <MemberSignature Language="C#" Value="public override string PackageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PackageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPackageName", "()Ljava/lang/String;", "GetGetPackageNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of this application's package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the name of this application's package. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getPackageName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PackageResourcePath">
      <MemberSignature Language="C#" Value="public override string PackageResourcePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PackageResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPackageResourcePath", "()Ljava/lang/String;", "GetGetPackageResourcePathHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the full path to this context's primary Android package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the full path to this context's primary Android package.
 The Android package is a ZIP file which contains the application's
 primary resources.

 </para>
          <para tool="javadoc-to-mdoc">Note: this is not generally useful for applications, since they should
 not be directly accessing the file system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getPackageResourcePath()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PeekWallpaper">
      <MemberSignature Language="C#" Value="public override Android.Graphics.Drawables.Drawable PeekWallpaper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Graphics.Drawables.Drawable PeekWallpaper() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("peekWallpaper", "()Landroid/graphics/drawable/Drawable;", "GetPeekWallpaperHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#peekWallpaper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterReceiver">
      <MemberSignature Language="C#" Value="public override Android.Content.Intent RegisterReceiver (Android.Content.BroadcastReceiver receiver, Android.Content.IntentFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Intent RegisterReceiver(class Android.Content.BroadcastReceiver receiver, class Android.Content.IntentFilter filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerReceiver", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;", "GetRegisterReceiver_Landroid_content_BroadcastReceiver_Landroid_content_IntentFilter_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="filter" Type="Android.Content.IntentFilter" />
      </Parameters>
      <Docs>
        <param name="receiver">The BroadcastReceiver to handle the broadcast.</param>
        <param name="filter">Selects the Intent broadcasts to be received.</param>
        <summary>Register a BroadcastReceiver to be run in the main activity thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a BroadcastReceiver to be run in the main activity thread.  The
 <format type="text/html"><var>receiver</var></format> will be called with any broadcast Intent that
 matches <format type="text/html"><var>filter</var></format>, in the main application thread.

 </para>
          <para tool="javadoc-to-mdoc">The system may broadcast Intents that are "sticky" -- these stay
 around after the broadcast as finished, to be sent to any later
 registrations. If your IntentFilter matches one of these sticky
 Intents, that Intent will be returned by this function
 <i>and</i> sent to your <format type="text/html"><var>receiver</var></format> as if it had just
 been broadcast.

 </para>
          <para tool="javadoc-to-mdoc">There may be multiple sticky Intents that match <format type="text/html"><var>filter</var></format>,
 in which case each of these will be sent to <format type="text/html"><var>receiver</var></format>.  In
 this case, only one of these can be returned directly by the function;
 which of these that is returned is arbitrarily decided by the system.

 </para>
          <para tool="javadoc-to-mdoc">If you know the Intent your are registering for is sticky, you can
 supply null for your <format type="text/html"><var>receiver</var></format>.  In this case, no receiver is
 registered -- the function simply returns the sticky Intent that
 matches <format type="text/html"><var>filter</var></format>.  In the case of multiple matches, the same
 rules as described above apply.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.

 </para>
          <para tool="javadoc-to-mdoc">As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH" /></c>, receivers
 registered with this method will correctly respect the
 <c><see cref="M:Android.Content.Intent.SetPackage(System.String)" /></c> specified for an Intent being broadcast.
 Prior to that, it would be ignored and delivered to all matching registered
 receivers.  Be careful if using this for security.</para>
          <para tool="javadoc-to-mdoc">Note: this method <i>cannot be called from a
 <c><see cref="T:Android.Content.BroadcastReceiver" /></c> component;</i> that is, from a BroadcastReceiver
 that is declared in an application's manifest.  It is okay, however, to call
 this method from another BroadcastReceiver that has itself been registered
 at run time with <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c>, since the lifetime of such a
 registered BroadcastReceiver is tied to the object that registered it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterReceiver">
      <MemberSignature Language="C#" Value="public override Android.Content.Intent RegisterReceiver (Android.Content.BroadcastReceiver receiver, Android.Content.IntentFilter filter, string broadcastPermission, Android.OS.Handler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Intent RegisterReceiver(class Android.Content.BroadcastReceiver receiver, class Android.Content.IntentFilter filter, string broadcastPermission, class Android.OS.Handler scheduler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerReceiver", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;", "GetRegisterReceiver_Landroid_content_BroadcastReceiver_Landroid_content_IntentFilter_Ljava_lang_String_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="filter" Type="Android.Content.IntentFilter" />
        <Parameter Name="broadcastPermission" Type="System.String" />
        <Parameter Name="scheduler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="receiver">The BroadcastReceiver to handle the broadcast.</param>
        <param name="filter">Selects the Intent broadcasts to be received.</param>
        <param name="broadcastPermission">String naming a permissions that a
      broadcaster must hold in order to send an Intent to you.  If null,
      no permission is required.</param>
        <param name="scheduler">Handler identifying the thread that will receive
      the Intent.  If null, the main thread of the process will be used.</param>
        <summary>Register to receive intent broadcasts, to run in the context of
 <format type="text/html"><var>scheduler</var></format>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Register to receive intent broadcasts, to run in the context of
 <format type="text/html"><var>scheduler</var></format>.  See
 <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c> for more
 information.  This allows you to enforce permissions on who can
 broadcast intents to your receiver, or have the receiver run in
 a different thread than the main application thread.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.

 </para>
          <para tool="javadoc-to-mdoc">As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH" /></c>, receivers
 registered with this method will correctly respect the
 <c><see cref="M:Android.Content.Intent.SetPackage(System.String)" /></c> specified for an Intent being broadcast.
 Prior to that, it would be ignored and delivered to all matching registered
 receivers.  Be careful if using this for security.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveStickyBroadcast">
      <MemberSignature Language="C#" Value="public override void RemoveStickyBroadcast (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveStickyBroadcast(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeStickyBroadcast", "(Landroid/content/Intent;)V", "GetRemoveStickyBroadcast_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent that was previously broadcast.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Remove the data previously sent with <c><see cref="M:Android.Content.Context.SendStickyBroadcast(Android.Content.Intent)" /></c>,
 so that it is as if the sticky broadcast had never happened.

 </para>
          <para tool="javadoc-to-mdoc">You must hold the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BROADCAST_STICKY" /></c>
 permission in order to use this API.  If you do not hold that
 permission, <c><see cref="T:Java.Lang.SecurityException" /></c> will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#removeStickyBroadcast(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveStickyBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void RemoveStickyBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveStickyBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeStickyBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;)V", "GetRemoveStickyBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent that was previously broadcast.</param>
        <param name="user">UserHandle to remove the sticky broadcast from.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.RemoveStickyBroadcast(Android.Content.Intent)" /></c> that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.

 </para>
          <para tool="javadoc-to-mdoc">You must hold the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BROADCAST_STICKY" /></c>
 permission in order to use this API.  If you do not hold that
 permission, <c><see cref="T:Java.Lang.SecurityException" /></c> will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public override Android.Content.Res.Resources Resources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.Resources Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getResources", "()Landroid/content/res/Resources;", "GetGetResourcesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.Resources</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a Resources instance for your application's package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a Resources instance for your application's package. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getResources()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RevokeUriPermission">
      <MemberSignature Language="C#" Value="public override void RevokeUriPermission (Android.Net.Uri uri, Android.Content.ActivityFlags modeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RevokeUriPermission(class Android.Net.Uri uri, valuetype Android.Content.ActivityFlags modeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("revokeUriPermission", "(Landroid/net/Uri;I)V", "GetRevokeUriPermission_Landroid_net_Uri_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="modeFlags" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uri">The Uri you would like to revoke access to.</param>
        <param name="modeFlags">The desired access modes.  Any combination of
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" tool="ReplaceLinkValue" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantWriteUriPermission" tool="ReplaceLinkValue" /></c>.</param>
        <summary>Remove all permissions to access a particular content provider Uri
 that were previously added with <c><see cref="M:Android.Content.Context.GrantUriPermission(System.String,Android.Net.Uri,Android.Net.Uri)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove all permissions to access a particular content provider Uri
 that were previously added with <c><see cref="M:Android.Content.Context.GrantUriPermission(System.String,Android.Net.Uri,Android.Net.Uri)" /></c>.  The given
 Uri will match all previously granted Uris that are the same or a
 sub-path of the given Uri.  That is, revoking "content://foo/target" will
 revoke both "content://foo/target" and "content://foo/target/sub", but not
 "content://foo".  It will not remove any prefix grants that exist at a
 higher level.

 </para>
          <para tool="javadoc-to-mdoc">Prior to <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP" /></c>, if you did not have
 regular permission access to a Uri, but had received access to it through
 a specific Uri permission grant, you could not revoke that grant with this
 function and a <c><see cref="T:Java.Lang.SecurityException" /></c> would be thrown.  As of
 <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#LOLLIPOP" /></c>, this function will not throw a security exception,
 but will remove whatever permission grants to the Uri had been given to the app
 (or none).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#revokeUriPermission(android.net.Uri, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendBroadcast">
      <MemberSignature Language="C#" Value="public override void SendBroadcast (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendBroadcast(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendBroadcast", "(Landroid/content/Intent;)V", "GetSendBroadcast_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <summary>Broadcast the given intent to all interested BroadcastReceivers.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast the given intent to all interested BroadcastReceivers.  This
 call is asynchronous; it returns immediately, and you will continue
 executing while the receivers are run.  No results are propagated from
 receivers and receivers can not abort the broadcast. If you want
 to allow receivers to propagate results or abort the broadcast, you must
 send an ordered broadcast using
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendBroadcast(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendBroadcast">
      <MemberSignature Language="C#" Value="public override void SendBroadcast (Android.Content.Intent intent, string receiverPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendBroadcast(class Android.Content.Intent intent, string receiverPermission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendBroadcast", "(Landroid/content/Intent;Ljava/lang/String;)V", "GetSendBroadcast_Landroid_content_Intent_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="receiverPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="receiverPermission">(optional) String naming a permission that
               a receiver must hold in order to receive your broadcast.
               If null, no permission is required.</param>
        <summary>Broadcast the given intent to all interested BroadcastReceivers, allowing
 an optional required permission to be enforced.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast the given intent to all interested BroadcastReceivers, allowing
 an optional required permission to be enforced.  This
 call is asynchronous; it returns immediately, and you will continue
 executing while the receivers are run.  No results are propagated from
 receivers and receivers can not abort the broadcast. If you want
 to allow receivers to propagate results or abort the broadcast, you must
 send an ordered broadcast using
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendBroadcast(android.content.Intent, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void SendBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;)V", "GetSendBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
      </Parameters>
      <Docs>
        <param name="intent">The intent to broadcast</param>
        <param name="user">UserHandle to send the intent to.</param>
        <summary>Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c> that allows you to specify the
 user the broadcast will be sent to.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c> that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SendBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void SendBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user, string receiverPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user, string receiverPermission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V", "GetSendBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
        <Parameter Name="receiverPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="user">UserHandle to send the intent to.</param>
        <param name="receiverPermission">(optional) String naming a permission that
               a receiver must hold in order to receive your broadcast.
               If null, no permission is required.</param>
        <summary>Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent,System.String)" /></c> that allows you to specify the
 user the broadcast will be sent to.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent,System.String)" /></c> that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SendOrderedBroadcast">
      <MemberSignature Language="C#" Value="public override void SendOrderedBroadcast (Android.Content.Intent intent, string receiverPermission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendOrderedBroadcast(class Android.Content.Intent intent, string receiverPermission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendOrderedBroadcast", "(Landroid/content/Intent;Ljava/lang/String;)V", "GetSendOrderedBroadcast_Landroid_content_Intent_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="receiverPermission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="receiverPermission">(optional) String naming a permissions that
               a receiver must hold in order to receive your broadcast.
               If null, no permission is required.</param>
        <summary>Broadcast the given intent to all interested BroadcastReceivers, delivering
 them one at a time to allow more preferred receivers to consume the
 broadcast before it is delivered to less preferred receivers.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast the given intent to all interested BroadcastReceivers, delivering
 them one at a time to allow more preferred receivers to consume the
 broadcast before it is delivered to less preferred receivers.  This
 call is asynchronous; it returns immediately, and you will continue
 executing while the receivers are run.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendOrderedBroadcast(android.content.Intent, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendOrderedBroadcast">
      <MemberSignature Language="C#" Value="public override void SendOrderedBroadcast (Android.Content.Intent intent, string receiverPermission, Android.Content.BroadcastReceiver resultReceiver, Android.OS.Handler scheduler, Android.App.Result initialCode, string initialData, Android.OS.Bundle initialExtras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendOrderedBroadcast(class Android.Content.Intent intent, string receiverPermission, class Android.Content.BroadcastReceiver resultReceiver, class Android.OS.Handler scheduler, valuetype Android.App.Result initialCode, string initialData, class Android.OS.Bundle initialExtras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendOrderedBroadcast", "(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V", "GetSendOrderedBroadcast_Landroid_content_Intent_Ljava_lang_String_Landroid_content_BroadcastReceiver_Landroid_os_Handler_ILjava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="receiverPermission" Type="System.String" />
        <Parameter Name="resultReceiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="scheduler" Type="Android.OS.Handler" />
        <Parameter Name="initialCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="initialData" Type="System.String" />
        <Parameter Name="initialExtras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="receiverPermission">String naming a permissions that
               a receiver must hold in order to receive your broadcast.
               If null, no permission is required.</param>
        <param name="resultReceiver">Your own BroadcastReceiver to treat as the final
                       receiver of the broadcast.</param>
        <param name="scheduler">A custom Handler with which to schedule the
                  resultReceiver callback; if null it will be
                  scheduled in the Context's main thread.</param>
        <param name="initialCode">An initial value for the result code.  Often
                    Activity.RESULT_OK.</param>
        <param name="initialData">An initial value for the result data.  Often
                    null.</param>
        <param name="initialExtras">An initial value for the result extras.  Often
                      null.</param>
        <summary>Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c> that allows you to
 receive data back from the broadcast.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c> that allows you to
 receive data back from the broadcast.  This is accomplished by
 supplying your own BroadcastReceiver when calling, which will be
 treated as a final receiver at the end of the broadcast -- its
 <c><see cref="M:Android.Content.BroadcastReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c> method will be called with
 the result values collected from the other receivers.  The broadcast will
 be serialized in the same way as calling
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c>, this method is
 asynchronous; it will return before
 resultReceiver.onReceive() is called.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendOrderedBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void SendOrderedBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user, string receiverPermission, Android.Content.BroadcastReceiver resultReceiver, Android.OS.Handler scheduler, Android.App.Result initialCode, string initialData, Android.OS.Bundle initialExtras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendOrderedBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user, string receiverPermission, class Android.Content.BroadcastReceiver resultReceiver, class Android.OS.Handler scheduler, valuetype Android.App.Result initialCode, string initialData, class Android.OS.Bundle initialExtras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendOrderedBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V", "GetSendOrderedBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Ljava_lang_String_Landroid_content_BroadcastReceiver_Landroid_os_Handler_ILjava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
        <Parameter Name="receiverPermission" Type="System.String" />
        <Parameter Name="resultReceiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="scheduler" Type="Android.OS.Handler" />
        <Parameter Name="initialCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="initialData" Type="System.String" />
        <Parameter Name="initialExtras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="user">UserHandle to send the intent to.</param>
        <param name="receiverPermission">String naming a permissions that
               a receiver must hold in order to receive your broadcast.
               If null, no permission is required.</param>
        <param name="resultReceiver">Your own BroadcastReceiver to treat as the final
                       receiver of the broadcast.</param>
        <param name="scheduler">A custom Handler with which to schedule the
                  resultReceiver callback; if null it will be
                  scheduled in the Context's main thread.</param>
        <param name="initialCode">An initial value for the result code.  Often
                    Activity.RESULT_OK.</param>
        <param name="initialData">An initial value for the result data.  Often
                    null.</param>
        <param name="initialExtras">An initial value for the result extras.  Often
                      null.</param>
        <summary>Version of
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String,System.String,System.String,System.String,System.String,System.String)" /></c>
 that allows you to specify the
 user the broadcast will be sent to.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Version of
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String,System.String,System.String,System.String,System.String,System.String)" /></c>
 that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SendStickyBroadcast">
      <MemberSignature Language="C#" Value="public override void SendStickyBroadcast (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendStickyBroadcast(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStickyBroadcast", "(Landroid/content/Intent;)V", "GetSendStickyBroadcast_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
 Intent will receive the broadcast, and the Intent will be held to
 be re-broadcast to future receivers.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Perform a <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c> that is "sticky," meaning the
 Intent you are sending stays around after the broadcast is complete,
 so that others can quickly retrieve that data through the return
 value of <c><see cref="M:Android.Content.Context.RegisterReceiver(Android.Content.BroadcastReceiver,Android.Content.IntentFilter)" /></c>.  In
 all other ways, this behaves the same as
 <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">You must hold the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BROADCAST_STICKY" /></c>
 permission in order to use this API.  If you do not hold that
 permission, <c><see cref="T:Java.Lang.SecurityException" /></c> will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendStickyBroadcast(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendStickyBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void SendStickyBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendStickyBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStickyBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;)V", "GetSendStickyBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
 Intent will receive the broadcast, and the Intent will be held to
 be re-broadcast to future receivers.</param>
        <param name="user">UserHandle to send the intent to.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.SendStickyBroadcast(Android.Content.Intent)" /></c> that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SendStickyOrderedBroadcast">
      <MemberSignature Language="C#" Value="public override void SendStickyOrderedBroadcast (Android.Content.Intent intent, Android.Content.BroadcastReceiver resultReceiver, Android.OS.Handler scheduler, Android.App.Result initialCode, string initialData, Android.OS.Bundle initialExtras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendStickyOrderedBroadcast(class Android.Content.Intent intent, class Android.Content.BroadcastReceiver resultReceiver, class Android.OS.Handler scheduler, valuetype Android.App.Result initialCode, string initialData, class Android.OS.Bundle initialExtras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStickyOrderedBroadcast", "(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V", "GetSendStickyOrderedBroadcast_Landroid_content_Intent_Landroid_content_BroadcastReceiver_Landroid_os_Handler_ILjava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="resultReceiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="scheduler" Type="Android.OS.Handler" />
        <Parameter Name="initialCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="initialData" Type="System.String" />
        <Parameter Name="initialExtras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="resultReceiver">Your own BroadcastReceiver to treat as the final
                       receiver of the broadcast.</param>
        <param name="scheduler">A custom Handler with which to schedule the
                  resultReceiver callback; if null it will be
                  scheduled in the Context's main thread.</param>
        <param name="initialCode">An initial value for the result code.  Often
                    Activity.RESULT_OK.</param>
        <param name="initialData">An initial value for the result data.  Often
                    null.</param>
        <param name="initialExtras">An initial value for the result extras.  Often
                      null.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Version of <c><see cref="M:Android.Content.Context.SendStickyBroadcast(Android.Content.Intent)" /></c> that allows you to
 receive data back from the broadcast.  This is accomplished by
 supplying your own BroadcastReceiver when calling, which will be
 treated as a final receiver at the end of the broadcast -- its
 <c><see cref="M:Android.Content.BroadcastReceiver.OnReceive(Android.Content.Context,Android.Content.Intent)" /></c> method will be called with
 the result values collected from the other receivers.  The broadcast will
 be serialized in the same way as calling
 <c><see cref="M:Android.Content.Context.SendOrderedBroadcast(Android.Content.Intent,System.String)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.Content.Context.SendBroadcast(Android.Content.Intent)" /></c>, this method is
 asynchronous; it will return before
 resultReceiver.onReceive() is called.  Note that the sticky data
 stored is only the data you initially supply to the broadcast, not
 the result of any changes made by the receivers.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="SendStickyOrderedBroadcastAsUser">
      <MemberSignature Language="C#" Value="public override void SendStickyOrderedBroadcastAsUser (Android.Content.Intent intent, Android.OS.UserHandle user, Android.Content.BroadcastReceiver resultReceiver, Android.OS.Handler scheduler, Android.App.Result initialCode, string initialData, Android.OS.Bundle initialExtras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SendStickyOrderedBroadcastAsUser(class Android.Content.Intent intent, class Android.OS.UserHandle user, class Android.Content.BroadcastReceiver resultReceiver, class Android.OS.Handler scheduler, valuetype Android.App.Result initialCode, string initialData, class Android.OS.Bundle initialExtras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStickyOrderedBroadcastAsUser", "(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V", "GetSendStickyOrderedBroadcastAsUser_Landroid_content_Intent_Landroid_os_UserHandle_Landroid_content_BroadcastReceiver_Landroid_os_Handler_ILjava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="user" Type="Android.OS.UserHandle" />
        <Parameter Name="resultReceiver" Type="Android.Content.BroadcastReceiver" />
        <Parameter Name="scheduler" Type="Android.OS.Handler" />
        <Parameter Name="initialCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="initialData" Type="System.String" />
        <Parameter Name="initialExtras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent to broadcast; all receivers matching this
               Intent will receive the broadcast.</param>
        <param name="user">UserHandle to send the intent to.</param>
        <param name="resultReceiver">Your own BroadcastReceiver to treat as the final
                       receiver of the broadcast.</param>
        <param name="scheduler">A custom Handler with which to schedule the
                  resultReceiver callback; if null it will be
                  scheduled in the Context's main thread.</param>
        <param name="initialCode">An initial value for the result code.  Often
                    Activity.RESULT_OK.</param>
        <param name="initialData">An initial value for the result data.  Often
                    null.</param>
        <param name="initialExtras">An initial value for the result extras.  Often
                      null.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Version of
 <c><see cref="M:Android.Content.Context.SendStickyOrderedBroadcast(Android.Content.Intent,Android.Content.BroadcastReceiver,Android.Content.BroadcastReceiver,Android.Content.BroadcastReceiver,Android.Content.BroadcastReceiver,Android.Content.BroadcastReceiver)" /></c>
 that allows you to specify the
 user the broadcast will be sent to.  This is not available to applications
 that are not pre-installed on the system image.  Using it requires holding
 the INTERACT_ACROSS_USERS permission.

 </para>
          <para tool="javadoc-to-mdoc">See <c><see cref="T:Android.Content.BroadcastReceiver" /></c> for more information on Intent broadcasts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SetTheme">
      <MemberSignature Language="C#" Value="public override void SetTheme (int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetTheme(int32 resid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setTheme", "(I)V", "GetSetTheme_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resid">The style resource describing the theme.
</param>
        <summary>Set the base theme for this context.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the base theme for this context.  Note that this should be called
 before any views are instantiated in the Context (for example before
 calling <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View)" /></c> or
 <c><see cref="M:Android.Views.LayoutInflater.Inflate(System.Int32,Android.Views.ViewGroup)" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#setTheme(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWallpaper">
      <MemberSignature Language="C#" Value="public override void SetWallpaper (Android.Graphics.Bitmap bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetWallpaper(class Android.Graphics.Bitmap bitmap) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWallpaper", "(Landroid/graphics/Bitmap;)V", "GetSetWallpaper_Landroid_graphics_Bitmap_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#setWallpaper(android.graphics.Bitmap)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetWallpaper">
      <MemberSignature Language="C#" Value="public override void SetWallpaper (System.IO.Stream data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetWallpaper(class System.IO.Stream data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWallpaper", "(Ljava/io/InputStream;)V", "GetSetWallpaper_Ljava_io_InputStream_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#setWallpaper(java.io.InputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="StartActivities">
      <MemberSignature Language="C#" Value="public override void StartActivities (Android.Content.Intent[] intents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartActivities(class Android.Content.Intent[] intents) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivities", "([Landroid/content/Intent;)V", "GetStartActivities_arrayLandroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
      </Parameters>
      <Docs>
        <param name="intents">An array of Intents to be started.</param>
        <summary>Same as <c><see cref="M:Android.Content.Context.StartActivities(Android.Content.Intent[],Android.OS.Bundle)" /></c> with no options
 specified.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as <c><see cref="M:Android.Content.Context.StartActivities(Android.Content.Intent[],Android.OS.Bundle)" /></c> with no options
 specified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startActivities(android.content.Intent[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartActivities">
      <MemberSignature Language="C#" Value="public override void StartActivities (Android.Content.Intent[] intents, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartActivities(class Android.Content.Intent[] intents, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivities", "([Landroid/content/Intent;Landroid/os/Bundle;)V", "GetStartActivities_arrayLandroid_content_Intent_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intents" Type="Android.Content.Intent[]" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intents">An array of Intents to be started.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.</param>
        <summary>Launch multiple new activities.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Launch multiple new activities.  This is generally the same as calling
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c> for the first Intent in the array,
 that activity during its creation calling <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>
 for the second entry, etc.  Note that unlike that approach, generally
 none of the activities except the last in the array will be created
 at this point, but rather will be created when the user first visits
 them (due to pressing back from the activity on top).

 </para>
          <para tool="javadoc-to-mdoc">This method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>
 if there was no Activity found for <i>any</i> given Intent.  In this
 case the state of the activity stack is undefined (some Intents in the
 list may be on it, some not), so you probably want to avoid such situations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startActivities(android.content.Intent[], android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public override void StartActivity (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartActivity(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Landroid/content/Intent;)V", "GetStartActivity_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The description of the activity to start.</param>
        <summary>Same as <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> with no options
 specified.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> with no options
 specified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startActivity(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public override void StartActivity (Android.Content.Intent intent, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartActivity(class Android.Content.Intent intent, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Landroid/content/Intent;Landroid/os/Bundle;)V", "GetStartActivity_Landroid_content_Intent_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The description of the activity to start.</param>
        <param name="options">Additional options for how the Activity should be started.
 May be null if there are no options.  See <c><see cref="T:Android.App.ActivityOptions" /></c>
 for how to build the Bundle supplied here; there are no supported definitions
 for building it manually.</param>
        <summary>Launch a new activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Launch a new activity.  You will not receive any information about when
 the activity exits.

 </para>
          <para tool="javadoc-to-mdoc">Note that if this method is being called from outside of an
 <c><see cref="T:Android.App.Activity" /></c> Context, then the Intent must include
 the <c><see cref="F:Android.Content.ActivityFlags.NewTask" tool="ReplaceLinkValue" /></c> launch flag.  This is because,
 without being started from an existing Activity, there is no existing
 task in which to place the new activity and thus it needs to be placed
 in its own separate task.

 </para>
          <para tool="javadoc-to-mdoc">This method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>
 if there was no Activity found to run the given Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startActivity(android.content.Intent, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="StartInstrumentation">
      <MemberSignature Language="C#" Value="public override bool StartInstrumentation (Android.Content.ComponentName className, string profileFile, Android.OS.Bundle arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool StartInstrumentation(class Android.Content.ComponentName className, string profileFile, class Android.OS.Bundle arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startInstrumentation", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z", "GetStartInstrumentation_Landroid_content_ComponentName_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="Android.Content.ComponentName" />
        <Parameter Name="profileFile" Type="System.String" />
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="className">Name of the Instrumentation component to be run.</param>
        <param name="profileFile">Optional path to write profiling data as the
 instrumentation runs, or null for no profiling.</param>
        <param name="arguments">Additional optional arguments to pass to the
 instrumentation, or null.</param>
        <summary>Start executing an <c><see cref="T:Android.App.Instrumentation" /></c> class.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start executing an <c><see cref="T:Android.App.Instrumentation" /></c> class.  The given
 Instrumentation component will be run by killing its target application
 (if currently running), starting the target process, instantiating the
 instrumentation component, and then letting it drive the application.

 </para>
          <para tool="javadoc-to-mdoc">This function is not synchronous -- it returns as soon as the
 instrumentation has started and while it is running.

 </para>
          <para tool="javadoc-to-mdoc">Instrumentation is normally only allowed to run against a package
 that is either unsigned or signed with a signature that the
 the instrumentation package is also signed with (ensuring the target
 trusts the instrumentation).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSender">
      <MemberSignature Language="C#" Value="public override void StartIntentSender (Android.Content.IntentSender intent, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartIntentSender(class Android.Content.IntentSender intent, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSender", "(Landroid/content/IntentSender;Landroid/content/Intent;III)V", "GetStartIntentSender_Landroid_content_IntentSender_Landroid_content_Intent_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
 intent parameter to <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
 would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
 <format type="text/html"><var>flagsMask</var></format></param>
        <param name="extraFlags">Always set to 0.</param>
        <summary tool="true">Same as <c><see cref="M:Android.Content.Context.StartIntentSender(Android.Content.IntentSender,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options specified.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Same as <c><see cref="M:Android.Content.Context.StartIntentSender(Android.Content.IntentSender,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent,Android.Content.Intent)" /></c>
 with no options specified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartIntentSender">
      <MemberSignature Language="C#" Value="public override void StartIntentSender (Android.Content.IntentSender intent, Android.Content.Intent fillInIntent, Android.Content.ActivityFlags flagsMask, Android.Content.ActivityFlags flagsValues, int extraFlags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void StartIntentSender(class Android.Content.IntentSender intent, class Android.Content.Intent fillInIntent, valuetype Android.Content.ActivityFlags flagsMask, valuetype Android.Content.ActivityFlags flagsValues, int32 extraFlags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startIntentSender", "(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V", "GetStartIntentSender_Landroid_content_IntentSender_Landroid_content_Intent_IIILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.IntentSender" />
        <Parameter Name="fillInIntent" Type="Android.Content.Intent" />
        <Parameter Name="flagsMask" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flagsValues" Type="Android.Content.ActivityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extraFlags" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="intent">The IntentSender to launch.</param>
        <param name="fillInIntent">If non-null, this will be provided as the
 intent parameter to <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c>.</param>
        <param name="flagsMask">Intent flags in the original IntentSender that you
 would like to change.</param>
        <param name="flagsValues">Desired values for any bits set in
 <format type="text/html"><var>flagsMask</var></format></param>
        <param name="extraFlags">Always set to 0.</param>
        <param name="options">Additional options for how the Activity should be started.
 See <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c> for more details.  If options
 have also been supplied by the IntentSender, options given here will
 override any that conflict with those given by the IntentSender.</param>
        <summary>Like <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c>, but taking a IntentSender
 to start.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent,Android.OS.Bundle)" /></c>, but taking a IntentSender
 to start.  If the IntentSender is for an activity, that activity will be started
 as if you had called the regular <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>
 here; otherwise, its associated action will be executed (such as
 sending a broadcast) as if you had called
 <c><see cref="M:Android.Content.IntentSender.SendIntent(Android.Content.Context,Android.App.Result,Android.App.Result,Android.App.Result,Android.App.Result)" /></c> on it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="!:NoType:android/content/IntentSender$SendIntentException;Href=../../../../reference/android/content/IntentSender.SendIntentException.html" />
      </Docs>
    </Member>
    <Member MemberName="StartService">
      <MemberSignature Language="C#" Value="public override Android.Content.ComponentName StartService (Android.Content.Intent service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.ComponentName StartService(class Android.Content.Intent service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startService", "(Landroid/content/Intent;)Landroid/content/ComponentName;", "GetStartService_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="service">Identifies the service to be started.  The Intent must be either
      fully explicit (supplying a component name) or specify a specific package
      name it is targetted to.  Additional values
      may be included in the Intent extras to supply arguments along with
      this specific start call.</param>
        <summary>Request that a given application service be started.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that a given application service be started.  The Intent
 should contain either contain the complete class name of a specific service
 implementation to start or a specific package name to target.  If the
 Intent is less specified, it log a warning about this and which of the
 multiple matching services it finds and uses will be undefined.  If this service
 is not already running, it will be instantiated and started (creating a
 process for it if needed); if it is running then it remains running.

 </para>
          <para tool="javadoc-to-mdoc">Every call to this method will result in a corresponding call to
 the target service's <c><see cref="M:Android.App.Service.OnStartCommand(Android.Content.Intent,Android.App.StartCommandFlags,Android.App.StartCommandFlags)" /></c> method,
 with the <format type="text/html"><var>intent</var></format> given here.  This provides a convenient way
 to submit jobs to a service without having to bind and call on to its
 interface.

 </para>
          <para tool="javadoc-to-mdoc">Using startService() overrides the default service lifetime that is
 managed by <c><see cref="M:Android.Content.Context.BindService(Android.Content.Intent,Android.Content.IServiceConnection,Android.Content.IServiceConnection)" /></c>: it requires the service to remain
 running until <c><see cref="M:Android.Content.Context.StopService(Android.Content.Intent)" /></c> is called, regardless of whether
 any clients are connected to it.  Note that calls to startService()
 are not nesting: no matter how many times you call startService(),
 a single call to <c><see cref="M:Android.Content.Context.StopService(Android.Content.Intent)" /></c> will stop it.

 </para>
          <para tool="javadoc-to-mdoc">The system attempts to keep running services around as much as
 possible.  The only time they should be stopped is if the current
 foreground application is using so many resources that the service needs
 to be killed.  If any errors happen in the service's process, it will
 automatically be restarted.

 </para>
          <para tool="javadoc-to-mdoc">This function will throw <c><see cref="T:Java.Lang.SecurityException" /></c> if you do not
 have permission to start the given service.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#startService(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StopService">
      <MemberSignature Language="C#" Value="public override bool StopService (Android.Content.Intent service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool StopService(class Android.Content.Intent service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopService", "(Landroid/content/Intent;)Z", "GetStopService_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="service">Description of the service to be stopped.  The Intent must be either
      fully explicit (supplying a component name) or specify a specific package
      name it is targetted to.</param>
        <summary>Request that a given application service be stopped.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request that a given application service be stopped.  If the service is
 not running, nothing happens.  Otherwise it is stopped.  Note that calls
 to startService() are not counted -- this stops the service no matter
 how many times it was started.

 </para>
          <para tool="javadoc-to-mdoc">Note that if a stopped service still has <c><see cref="T:Android.Content.IServiceConnection" /></c>
 objects bound to it with the <c><see cref="!:Android.Content.Context.BIND_AUTO_CREATE" /></c> set, it will
 not be destroyed until all of these bindings are removed.  See
 the <c><see cref="T:Android.App.Service" /></c> documentation for more details on a
 service's lifecycle.

 </para>
          <para tool="javadoc-to-mdoc">This function will throw <c><see cref="T:Java.Lang.SecurityException" /></c> if you do not
 have permission to stop the given service.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#stopService(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public override Android.Content.Res.Resources.Theme Theme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.Resources/Theme Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTheme", "()Landroid/content/res/Resources$Theme;", "GetGetThemeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.Resources+Theme</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Theme object associated with this Context.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Theme object associated with this Context.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getTheme()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnbindService">
      <MemberSignature Language="C#" Value="public override void UnbindService (Android.Content.IServiceConnection conn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UnbindService(class Android.Content.IServiceConnection conn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unbindService", "(Landroid/content/ServiceConnection;)V", "GetUnbindService_Landroid_content_ServiceConnection_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conn" Type="Android.Content.IServiceConnection" />
      </Parameters>
      <Docs>
        <param name="conn">The connection interface previously supplied to
             bindService().  This parameter must not be null.</param>
        <summary>Disconnect from an application service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disconnect from an application service.  You will no longer receive
 calls as the service is restarted, and the service is now allowed to
 stop at any time.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#unbindService(android.content.ServiceConnection)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterReceiver">
      <MemberSignature Language="C#" Value="public override void UnregisterReceiver (Android.Content.BroadcastReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void UnregisterReceiver(class Android.Content.BroadcastReceiver receiver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterReceiver", "(Landroid/content/BroadcastReceiver;)V", "GetUnregisterReceiver_Landroid_content_BroadcastReceiver_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiver" Type="Android.Content.BroadcastReceiver" />
      </Parameters>
      <Docs>
        <param name="receiver">The BroadcastReceiver to unregister.</param>
        <summary>Unregister a previously registered BroadcastReceiver.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregister a previously registered BroadcastReceiver.  <i>All</i>
 filters that have been registered for this BroadcastReceiver will be
 removed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#unregisterReceiver(android.content.BroadcastReceiver)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wallpaper">
      <MemberSignature Language="C#" Value="public override Android.Graphics.Drawables.Drawable Wallpaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Drawables.Drawable Wallpaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWallpaper", "()Landroid/graphics/drawable/Drawable;", "GetGetWallpaperHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Drawables.Drawable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getWallpaper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WallpaperDesiredMinimumHeight">
      <MemberSignature Language="C#" Value="public override int WallpaperDesiredMinimumHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WallpaperDesiredMinimumHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWallpaperDesiredMinimumHeight", "()I", "GetGetWallpaperDesiredMinimumHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getWallpaperDesiredMinimumHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WallpaperDesiredMinimumWidth">
      <MemberSignature Language="C#" Value="public override int WallpaperDesiredMinimumWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WallpaperDesiredMinimumWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWallpaperDesiredMinimumWidth", "()I", "GetGetWallpaperDesiredMinimumWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/mock/MockContext.html#getWallpaperDesiredMinimumWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
