<Type Name="Tag" FullName="Android.Nfc.Tag">
  <TypeSignature Language="C#" Value="public sealed class Tag : Java.Lang.Object, Android.OS.IParcelable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Tag extends Java.Lang.Object implements class Android.OS.IParcelable, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IParcelable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/nfc/Tag", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="10">
    <summary>Represents an NFC tag that has been discovered.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Represents an NFC tag that has been discovered.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>
          <see cref="T:Android.Nfc.Tag" />
        </c> is an immutable object that represents the state of a NFC tag at
 the time of discovery. It can be used as a handle to <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c> classes
 to perform advanced operations, or directly queried for its ID via <c><see cref="M:Android.Nfc.Tag.GetId" /></c> and the
 set of technologies it contains via <c><see cref="M:Android.Nfc.Tag.GetTechList" /></c>. Arrays passed to and
 returned by this class are <i>not</i> cloned, so be careful not to modify them.
 </para>
      <para tool="javadoc-to-mdoc">
 A new tag object is created every time a tag is discovered (comes into range), even
 if it is the same physical tag. If a tag is removed and then returned into range, then
 only the most recent tag object can be successfully used to create a <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c>.

 <format type="text/html"><h3>Tag Dispatch</h3></format>
 When a tag is discovered, a <c><see cref="T:Android.Nfc.Tag" /></c> object is created and passed to a
 single activity via the <c><see cref="F:Android.Nfc.NfcAdapter.ExtraTag" /></c> extra in an
 <c><see cref="T:Android.Content.Intent" /></c> via <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>. A four stage dispatch is used
 to select the
 most appropriate activity to handle the tag. The Android OS executes each stage in order,
 and completes dispatch as soon as a single matching activity is found. If there are multiple
 matching activities found at any one stage then the Android activity chooser dialog is shown
 to allow the user to select the activity to receive the tag.

 </para>
      <para tool="javadoc-to-mdoc">The Tag dispatch mechanism was designed to give a high probability of dispatching
 a tag to the correct activity without showing the user an activity chooser dialog.
 This is important for NFC interactions because they are very transient -- if a user has to
 move the Android device to choose an application then the connection will likely be broken.

 <format type="text/html"><h4>1. Foreground activity dispatch</h4></format>
 A foreground activity that has called
 <c><see cref="M:Android.Nfc.NfcAdapter.EnableForegroundDispatch(Android.App.Activity,Android.App.PendingIntent,Android.App.PendingIntent,Android.App.PendingIntent)" /></c> is
 given priority. See the documentation on
 <c><see cref="M:Android.Nfc.NfcAdapter.EnableForegroundDispatch(Android.App.Activity,Android.App.PendingIntent,Android.App.PendingIntent,Android.App.PendingIntent)" /></c> for
 its usage.
 <format type="text/html"><h4>2. NDEF data dispatch</h4></format>
 If the tag contains NDEF data the system inspects the first <c><see cref="T:Android.Nfc.NdefRecord" /></c> in the first
 <c><see cref="T:Android.Nfc.NdefMessage" /></c>. If the record is a URI, SmartPoster, or MIME data
 <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c> is called with <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>. For URI
 and SmartPoster records the URI is put into the intent's data field. For MIME records the MIME
 type is put in the intent's type field. This allows activities to register to be launched only
 when data they know how to handle is present on a tag. This is the preferred method of handling
 data on a tag since NDEF data can be stored on many types of tags and doesn't depend on a
 specific tag technology. 
 See <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> for more detail. If the tag does not contain
 NDEF data, or if no activity is registered
 for <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> with a matching data URI or MIME type then dispatch
 moves to stage 3.
 <format type="text/html"><h4>3. Tag Technology dispatch</h4></format><c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c> is called with <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c> to
 dispatch the tag to an activity that can handle the technologies present on the tag.
 Technologies are defined as sub-classes of <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c>, see the package
 <c><see cref="N:Android.Nfc.Tech" /></c>. The Android OS looks for an activity that can handle one or
 more technologies in the tag. See <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c> for more detail.
 <format type="text/html"><h4>4. Fall-back dispatch</h4></format>
 If no activity has been matched then <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c> is called with
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c>. This is intended as a fall-back mechanism.
 See <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c>.

 <format type="text/html"><h3>NFC Tag Background</h3></format>
 An NFC tag is a passive NFC device, powered by the NFC field of this Android device while
 it is in range. Tag's can come in many forms, such as stickers, cards, key fobs, or
 even embedded in a more sophisticated device.
 </para>
      <para tool="javadoc-to-mdoc">
 Tags can have a wide range of capabilities. Simple tags just offer read/write semantics,
 and contain some one time
 programmable areas to make read-only. More complex tags offer math operations
 and per-sector access control and authentication. The most sophisticated tags
 contain operating environments allowing complex interactions with the
 code executing on the tag. Use <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c> classes to access a broad
 range of capabilities available in NFC tags.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/nfc/Tag.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 10" />
  </Docs>
  <Members>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public static Android.OS.IParcelableCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.IParcelableCreator Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CREATOR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IParcelableCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/Tag.html#CREATOR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
    <Member MemberName="DescribeContents">
      <MemberSignature Language="C#" Value="public int DescribeContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 DescribeContents() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("describeContents", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Describe the kinds of special objects contained in this Parcelable's
 marshalled representation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/Tag.html#describeContents()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
    <Member MemberName="GetId">
      <MemberSignature Language="C#" Value="public byte[] GetId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetId() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getId", "()[B", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the Tag Identifier (if it has one).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the Tag Identifier (if it has one).
 </para>
          <para tool="javadoc-to-mdoc">The tag identifier is a low level serial number, used for anti-collision
 and identification.
 </para>
          <para tool="javadoc-to-mdoc"> Most tags have a stable unique identifier
 (UID), but some tags will generate a random ID every time they are discovered
 (RID), and there are some tags with no ID at all (the byte array will be zero-sized).
 </para>
          <para tool="javadoc-to-mdoc"> The size and format of an ID is specific to the RF technology used by the tag.
 </para>
          <para tool="javadoc-to-mdoc"> This function retrieves the ID as determined at discovery time, and does not
 perform any further RF communication or block.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/Tag.html#getId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
    <Member MemberName="GetTechList">
      <MemberSignature Language="C#" Value="public string[] GetTechList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetTechList() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTechList", "()[Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the technologies available in this tag, as fully qualified class names.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the technologies available in this tag, as fully qualified class names.
 </para>
          <para tool="javadoc-to-mdoc">
 A technology is an implementation of the <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c> interface,
 and can be instantiated by calling the static <c>get(Tag)</c>
 method on the implementation with this Tag. The <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c>
 object can then be used to perform advanced, technology-specific operations on a tag.
 </para>
          <para tool="javadoc-to-mdoc">
 Android defines a mandatory set of technologies that must be correctly
 enumerated by all Android NFC devices, and an optional
 set of proprietary technologies.
 See <c><see cref="T:Android.Nfc.Tech.ITagTechnology" /></c> for more details.
 </para>
          <para tool="javadoc-to-mdoc">
 The ordering of the returned array is undefined and should not be relied upon.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/Tag.html#getTechList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToParcel">
      <MemberSignature Language="C#" Value="public void WriteToParcel (Android.OS.Parcel dest, Android.OS.ParcelableWriteFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToParcel(class Android.OS.Parcel dest, valuetype Android.OS.ParcelableWriteFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeToParcel", "(Landroid/os/Parcel;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.OS.Parcel" />
        <Parameter Name="p1" Type="Android.OS.ParcelableWriteFlags" />
      </Parameters>
      <Docs>
        <param name="dest">The Parcel in which the object should be written.</param>
        <param name="flags">Additional flags about how the object should be written.
 May be 0 or <c><see cref="F:Android.OS.Parcelable.ParcelableWriteReturnValue" /></c>.
</param>
        <summary>Flatten this object in to a Parcel.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flatten this object in to a Parcel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/Tag.html#writeToParcel(android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 10" />
      </Docs>
    </Member>
  </Members>
</Type>
