<Type Name="NfcAdapter" FullName="Android.Nfc.NfcAdapter">
  <TypeSignature Language="C#" Value="public sealed class NfcAdapter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NfcAdapter extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/nfc/NfcAdapter", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>Represents the local NFC adapter.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Represents the local NFC adapter.
 </para>
      <para tool="javadoc-to-mdoc">
 Use the helper <c><see cref="M:Android.Nfc.NfcAdapter.GetDefaultAdapter(Android.Content.Context)" /></c> to get the default NFC
 adapter for this Android device.

 <format type="text/html"><h3>Developer Guides</h3></format>To perform basic file sharing between devices, read
 <format type="text/html"><a href="http://developer.android.com/reference/../training/beam-files/index.html">Sharing Files with NFC</a></format>.
 </para>
      <para tool="javadoc-to-mdoc">For more information about using NFC, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/nfc/index.html">Near Field Communication</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ActionAdapterStateChanged">
      <MemberSignature Language="C#" Value="public const string ActionAdapterStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionAdapterStateChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_ADAPTER_STATE_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: The state of the local NFC adapter has been
 changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action: The state of the local NFC adapter has been
 changed.
 </para>
          <para tool="javadoc-to-mdoc">For example, NFC has been turned on or off.
 </para>
          <para tool="javadoc-to-mdoc">Always contains the extra field <c><see cref="F:Android.Nfc.NfcAdapter.ExtraAdapterState" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_ADAPTER_STATE_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionNdefDiscovered">
      <MemberSignature Language="C#" Value="public const string ActionNdefDiscovered;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionNdefDiscovered" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_NDEF_DISCOVERED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent to start an activity when a tag with NDEF payload is discovered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent to start an activity when a tag with NDEF payload is discovered.

 </para>
          <para tool="javadoc-to-mdoc">The system inspects the first <c><see cref="T:Android.Nfc.NdefRecord" /></c> in the first <c><see cref="T:Android.Nfc.NdefMessage" /></c> and
 looks for a URI, SmartPoster, or MIME record. If a URI or SmartPoster record is found the
 intent will contain the URI in its data field. If a MIME record is found the intent will
 contain the MIME type in its type field. This allows activities to register
 <c><see cref="T:Android.Content.IntentFilter" /></c>s targeting specific content on tags. Activities should register the
 most specific intent filters possible to avoid the activity chooser dialog, which can
 disrupt the interaction with the tag as the user interacts with the screen.

 </para>
          <para tool="javadoc-to-mdoc">If the tag has an NDEF payload this intent is started before
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>. If any activities respond to this intent neither
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c> or <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> will be started.

 </para>
          <para tool="javadoc-to-mdoc">The MIME type or data URI of this intent are normalized before dispatch -
 so that MIME, URI scheme and URI host are always lower-case.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_NDEF_DISCOVERED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionTagDiscovered">
      <MemberSignature Language="C#" Value="public const string ActionTagDiscovered;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionTagDiscovered" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_TAG_DISCOVERED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent to start an activity when a tag is discovered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent to start an activity when a tag is discovered.

 </para>
          <para tool="javadoc-to-mdoc">This intent will not be started when a tag is discovered if any activities respond to
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> or <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c> for the current tag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_TAG_DISCOVERED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionTechDiscovered">
      <MemberSignature Language="C#" Value="public const string ActionTechDiscovered;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionTechDiscovered" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_TECH_DISCOVERED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent to start an activity when a tag is discovered and activities are registered for the
 specific technologies on the tag.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent to start an activity when a tag is discovered and activities are registered for the
 specific technologies on the tag.

 </para>
          <para tool="javadoc-to-mdoc">To receive this intent an activity must include an intent filter
 for this action and specify the desired tech types in a
 manifest <c>meta-data</c> entry. Here is an example manfiest entry:
 <example><code lang="xml">
 &lt;activity android:name=".nfc.TechFilter" android:label="NFC/TechFilter"&gt;
     &lt;!-- Add a technology filter --&gt;
     &lt;intent-filter&gt;
         &lt;action android:name="android.nfc.action.TECH_DISCOVERED" /&gt;
     &lt;/intent-filter&gt;

     &lt;meta-data android:name="android.nfc.action.TECH_DISCOVERED"
         android:resource="@xml/filter_nfc"
     /&gt;
 &lt;/activity&gt;</code></example></para>
          <para tool="javadoc-to-mdoc">The meta-data XML file should contain one or more <c>tech-list</c> entries
 each consisting or one or more <c>tech</c> entries. The <c>tech</c> entries refer
 to the qualified class name implementing the technology, for example "android.nfc.tech.NfcA".

 </para>
          <para tool="javadoc-to-mdoc">A tag matches if any of the
 <c>tech-list</c> sets is a subset of <c><see cref="M:Android.Nfc.Tag.GetTechList" /></c>. Each
 of the <c>tech-list</c>s is considered independently and the
 activity is considered a match is any single <c>tech-list</c> matches the tag that was
 discovered. This provides AND and OR semantics for filtering desired techs. Here is an
 example that will match any tag using <c><see cref="T:Android.Nfc.Tech.NfcF" /></c> or any tag using <c><see cref="T:Android.Nfc.Tech.NfcA" /></c>,
 <c><see cref="T:Android.Nfc.Tech.MifareClassic" /></c>, and <c><see cref="T:Android.Nfc.Tech.Ndef" /></c>:

 <example><code lang="xml">
 &lt;resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2"&gt;
     &lt;!-- capture anything using NfcF --&gt;
     &lt;tech-list&gt;
         &lt;tech&gt;android.nfc.tech.NfcF&lt;/tech&gt;
     &lt;/tech-list&gt;

     &lt;!-- OR --&gt;

     &lt;!-- capture all MIFARE Classics with NDEF payloads --&gt;
     &lt;tech-list&gt;
         &lt;tech&gt;android.nfc.tech.NfcA&lt;/tech&gt;
         &lt;tech&gt;android.nfc.tech.MifareClassic&lt;/tech&gt;
         &lt;tech&gt;android.nfc.tech.Ndef&lt;/tech&gt;
     &lt;/tech-list&gt;
 &lt;/resources&gt;</code></example></para>
          <para tool="javadoc-to-mdoc">This intent is started after <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> and before
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c>. If any activities respond to <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>
 this intent will not be started. If any activities respond to this intent
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> will not be started.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#ACTION_TECH_DISCOVERED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultAdapter">
      <MemberSignature Language="C#" Value="public static Android.Nfc.NfcAdapter DefaultAdapter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Nfc.NfcAdapter DefaultAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultAdapter", "()Landroid/nfc/NfcAdapter;", "GetGetDefaultAdapterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableForegroundDispatch">
      <MemberSignature Language="C#" Value="public void DisableForegroundDispatch (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableForegroundDispatch(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disableForegroundDispatch", "(Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">the Activity to disable dispatch to</param>
        <summary>Disable foreground dispatch to the given activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable foreground dispatch to the given activity.

 </para>
          <para tool="javadoc-to-mdoc">After calling <c><see cref="M:Android.Nfc.NfcAdapter.EnableForegroundDispatch(Android.App.Activity,Android.App.PendingIntent,Android.App.PendingIntent,Android.App.PendingIntent)" /></c>, an activity
 must call this method before its <c><see cref="M:Android.App.Activity.OnPause" /></c> callback
 completes.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called from the main thread.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundDispatch(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if the Activity has already been paused
</exception>
      </Docs>
    </Member>
    <Member MemberName="DisableForegroundNdefPush">
      <MemberSignature Language="C#" Value="public void DisableForegroundNdefPush (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableForegroundNdefPush(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disableForegroundNdefPush", "(Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">the Foreground activity</param>
        <summary>Disable NDEF message push over P2P.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable NDEF message push over P2P.

 </para>
          <para tool="javadoc-to-mdoc">After calling <c><see cref="M:Android.Nfc.NfcAdapter.EnableForegroundNdefPush(Android.App.Activity,Android.Nfc.NdefMessage)" /></c>, an activity
 must call this method before its <c><see cref="M:Android.App.Activity.OnPause" /></c> callback
 completes.

 </para>
          <para tool="javadoc-to-mdoc">Strongly recommend to use the new <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)" /></c>
 instead: it automatically hooks into your activity life-cycle,
 so you do not need to call enable/disable in your onResume/onPause.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called from the main thread.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#disableForegroundNdefPush(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if the Activity has already been paused</exception>
      </Docs>
    </Member>
    <Member MemberName="DisableReaderMode">
      <MemberSignature Language="C#" Value="public void DisableReaderMode (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableReaderMode(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disableReaderMode", "(Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">the Activity that currently has reader mode enabled
</param>
        <summary>Restore the NFC adapter to normal mode of operation: supporting
 peer-to-peer (Android Beam), card emulation, and polling for
 all supported tag technologies.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Restore the NFC adapter to normal mode of operation: supporting
 peer-to-peer (Android Beam), card emulation, and polling for
 all supported tag technologies.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableForegroundDispatch">
      <MemberSignature Language="C#" Value="public void EnableForegroundDispatch (Android.App.Activity activity, Android.App.PendingIntent intent, Android.Content.IntentFilter[] filters, string[][] techLists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableForegroundDispatch(class Android.App.Activity activity, class Android.App.PendingIntent intent, class Android.Content.IntentFilter[] filters, string[][] techLists) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableForegroundDispatch", "(Landroid/app/Activity;Landroid/app/PendingIntent;[Landroid/content/IntentFilter;[[Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.App.Activity" />
        <Parameter Name="p1" Type="Android.App.PendingIntent" />
        <Parameter Name="p2" Type="Android.Content.IntentFilter[]" />
        <Parameter Name="p3" Type="System.String[][]" />
      </Parameters>
      <Docs>
        <param name="activity">the Activity to dispatch to</param>
        <param name="intent">the PendingIntent to start for the dispatch</param>
        <param name="filters">the IntentFilters to override dispatching for, or null to always dispatch</param>
        <param name="techLists">the tech lists used to perform matching for dispatching of the
      <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c> intent</param>
        <summary>Enable foreground dispatch to the given Activity.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enable foreground dispatch to the given Activity.

 </para>
          <para tool="javadoc-to-mdoc">This will give give priority to the foreground activity when
 dispatching a discovered <c><see cref="T:Android.Nfc.Tag" /></c> to an application.

 </para>
          <para tool="javadoc-to-mdoc">If any IntentFilters are provided to this method they are used to match dispatch Intents
 for both the <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c>. Since <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>
 relies on meta data outside of the IntentFilter matching for that dispatch Intent is handled
 by passing in the tech lists separately. Each first level entry in the tech list represents
 an array of technologies that must all be present to match. If any of the first level sets
 match then the dispatch is routed through the given PendingIntent. In other words, the second
 level is ANDed together and the first level entries are ORed together.

 </para>
          <para tool="javadoc-to-mdoc">If you pass <c>null</c> for both the <c>filters</c> and <c>techLists</c> parameters
 that acts a wild card and will cause the foreground activity to receive all tags via the
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intent.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called from the main thread, and only when the activity is in the
 foreground (resumed). Also, activities must call <c><see cref="M:Android.Nfc.NfcAdapter.DisableForegroundDispatch(Android.App.Activity)" /></c> before
 the completion of their <c><see cref="M:Android.App.Activity.OnPause" /></c> callback to disable foreground dispatch
 after it has been enabled.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundDispatch(android.app.Activity, android.app.PendingIntent, android.content.IntentFilter[], java.lang.String[][])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if the Activity is not currently in the foreground
</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableForegroundNdefPush">
      <MemberSignature Language="C#" Value="public void EnableForegroundNdefPush (Android.App.Activity activity, Android.Nfc.NdefMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableForegroundNdefPush(class Android.App.Activity activity, class Android.Nfc.NdefMessage message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableForegroundNdefPush", "(Landroid/app/Activity;Landroid/nfc/NdefMessage;)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.App.Activity" />
        <Parameter Name="p1" Type="Android.Nfc.NdefMessage" />
      </Parameters>
      <Docs>
        <param name="activity">foreground activity</param>
        <param name="message">a NDEF Message to push over NFC</param>
        <summary>Enable NDEF message push over NFC while this Activity is in the foreground.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Enable NDEF message push over NFC while this Activity is in the foreground.

 </para>
          <para tool="javadoc-to-mdoc">You must explicitly call this method every time the activity is
 resumed, and you must call <c><see cref="M:Android.Nfc.NfcAdapter.DisableForegroundNdefPush(Android.App.Activity)" /></c> before
 your activity completes <c><see cref="M:Android.App.Activity.OnPause" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Strongly recommend to use the new <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)" /></c>
 instead: it automatically hooks into your activity life-cycle,
 so you do not need to call enable/disable in your onResume/onPause.

 </para>
          <para tool="javadoc-to-mdoc">For NDEF push to function properly the other NFC device must
 support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or
 Android's "com.android.npp" (Ndef Push Protocol). This was optional
 on Gingerbread level Android NFC devices, but SNEP is mandatory on
 Ice-Cream-Sandwich and beyond.

 </para>
          <para tool="javadoc-to-mdoc">This method must be called from the main thread.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#enableForegroundNdefPush(android.app.Activity, android.nfc.NdefMessage)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if the activity is not currently in the foreground</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableReaderMode">
      <MemberSignature Language="C#" Value="public void EnableReaderMode (Android.App.Activity activity, Android.Nfc.NfcAdapter.IReaderCallback callback, Android.Nfc.NfcReaderFlags flags, Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableReaderMode(class Android.App.Activity activity, class Android.Nfc.NfcAdapter/IReaderCallback callback, valuetype Android.Nfc.NfcReaderFlags flags, class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableReaderMode", "(Landroid/app/Activity;Landroid/nfc/NfcAdapter$ReaderCallback;ILandroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="callback" Type="Android.Nfc.NfcAdapter+IReaderCallback" />
        <Parameter Name="flags" Type="Android.Nfc.NfcReaderFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">the Activity that requests the adapter to be in reader mode</param>
        <param name="callback">the callback to be called when a tag is discovered</param>
        <param name="flags">Flags indicating poll technologies and other optional parameters</param>
        <param name="extras">Additional extras for configuring reader mode.
</param>
        <summary>Limit the NFC controller to reader mode while this Activity is in the foreground.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Limit the NFC controller to reader mode while this Activity is in the foreground.

 </para>
          <para tool="javadoc-to-mdoc">In this mode the NFC controller will only act as an NFC tag reader/writer,
 thus disabling any peer-to-peer (Android Beam) and card-emulation modes of
 the NFC adapter on this device.

 </para>
          <para tool="javadoc-to-mdoc">Use <c><see cref="F:Android.Nfc.NfcAdapter.FlagReaderSkipNdefCheck" /></c> to prevent the platform from
 performing any NDEF checks in reader mode. Note that this will prevent the
 <c><see cref="T:Android.Nfc.Tech.Ndef" /></c> tag technology from being enumerated on the tag, and that
 NDEF-based tag dispatch will not be functional.

 </para>
          <para tool="javadoc-to-mdoc">For interacting with tags that are emulated on another Android device
 using Android's host-based card-emulation, the recommended flags are
 <c><see cref="F:Android.Nfc.NfcAdapter.FlagReaderNfcA" /></c> and <c><see cref="F:Android.Nfc.NfcAdapter.FlagReaderSkipNdefCheck" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity, android.nfc.NfcAdapter.ReaderCallback, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraAdapterState">
      <MemberSignature Language="C#" Value="public const string ExtraAdapterState;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAdapterState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADAPTER_STATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used as an int extra field in <c><see cref="F:Android.Nfc.NfcAdapter.ActionAdapterStateChanged" /></c>
 intents to request the current power state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Used as an int extra field in <c><see cref="F:Android.Nfc.NfcAdapter.ActionAdapterStateChanged" /></c>
 intents to request the current power state. Possible values are:
 <c><see cref="F:Android.Nfc.NfcAdapter.StateOff" /></c>,
 <c><see cref="F:Android.Nfc.NfcAdapter.StateTurningOn" /></c>,
 <c><see cref="F:Android.Nfc.NfcAdapter.StateOn" /></c>,
 <c><see cref="F:Android.Nfc.NfcAdapter.StateTurningOff" /></c>,
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_ADAPTER_STATE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraId">
      <MemberSignature Language="C#" Value="public const string ExtraId;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Optional extra containing a byte array containing the ID of the discovered tag for
 the <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>, <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>, and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intents.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Optional extra containing a byte array containing the ID of the discovered tag for
 the <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>, <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>, and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intents.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraNdefMessages">
      <MemberSignature Language="C#" Value="public const string ExtraNdefMessages;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraNdefMessages" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_NDEF_MESSAGES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra containing an array of <c><see cref="T:Android.Nfc.NdefMessage" /></c> present on the discovered tag.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Extra containing an array of <c><see cref="T:Android.Nfc.NdefMessage" /></c> present on the discovered tag.</para>
          <para tool="javadoc-to-mdoc">
 This extra is mandatory for <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c> intents,
 and optional for <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>, and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intents.</para>
          <para tool="javadoc-to-mdoc">
 When this extra is present there will always be at least one
 <c><see cref="T:Android.Nfc.NdefMessage" /></c> element. Most NDEF tags have only one NDEF message,
 but we use an array for future compatibility.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_NDEF_MESSAGES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraReaderPresenceCheckDelay">
      <MemberSignature Language="C#" Value="public const string ExtraReaderPresenceCheckDelay;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraReaderPresenceCheckDelay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_READER_PRESENCE_CHECK_DELAY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Int Extra for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Int Extra for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this integer extra allows the calling application to specify
 the delay that the platform will use for performing presence checks
 on any discovered tag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_READER_PRESENCE_CHECK_DELAY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraTag">
      <MemberSignature Language="C#" Value="public const string ExtraTag;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraTag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_TAG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Mandatory extra containing the <c><see cref="T:Android.Nfc.Tag" /></c> that was discovered for the
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>, <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>, and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intents.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Mandatory extra containing the <c><see cref="T:Android.Nfc.Tag" /></c> that was discovered for the
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionNdefDiscovered" /></c>, <c><see cref="F:Android.Nfc.NfcAdapter.ActionTechDiscovered" /></c>, and
 <c><see cref="F:Android.Nfc.NfcAdapter.ActionTagDiscovered" /></c> intents.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#EXTRA_TAG" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNfcA">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNfcA = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNfcA = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NFC_A")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag enables polling for Nfc-A technology.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_A" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNfcB">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNfcB = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNfcB = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NFC_B")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag enables polling for Nfc-B technology.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_B" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNfcBarcode">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNfcBarcode = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNfcBarcode = (16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NFC_BARCODE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag enables polling for NfcBarcode technology.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_BARCODE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNfcF">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNfcF = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNfcF = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NFC_F")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag enables polling for Nfc-F technology.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_F" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNfcV">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNfcV = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNfcV = (8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NFC_V")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag enables polling for Nfc-V (ISO15693) technology.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NFC_V" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderNoPlatformSounds">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderNoPlatformSounds = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderNoPlatformSounds = (256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_NO_PLATFORM_SOUNDS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag allows the caller to prevent the
 platform from playing sounds when it discovers a tag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_NO_PLATFORM_SOUNDS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagReaderSkipNdefCheck">
      <MemberSignature Language="C#" Value="public const Android.Nfc.NfcReaderFlags FlagReaderSkipNdefCheck = 128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Nfc.NfcReaderFlags FlagReaderSkipNdefCheck = (128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_READER_SKIP_NDEF_CHECK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Nfc.NfcReaderFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcReaderFlags</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flag for use with <c><see cref="M:Android.Nfc.NfcAdapter.EnableReaderMode(Android.App.Activity,.IReaderCallback,.IReaderCallback,.IReaderCallback)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Setting this flag allows the caller to prevent the
 platform from performing an NDEF check on the tags it
 finds.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#FLAG_READER_SKIP_NDEF_CHECK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultAdapter">
      <MemberSignature Language="C#" Value="public static Android.Nfc.NfcAdapter GetDefaultAdapter (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Nfc.NfcAdapter GetDefaultAdapter(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultAdapter", "(Landroid/content/Context;)Landroid/nfc/NfcAdapter;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Nfc.NfcAdapter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">the calling application's context</param>
        <summary>Helper to get the default NFC Adapter.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Helper to get the default NFC Adapter.
 </para>
          <para tool="javadoc-to-mdoc">
 Most Android devices will only have one NFC Adapter (NFC Controller).
 </para>
          <para tool="javadoc-to-mdoc">
 This helper is the equivalent of:
 <example><code lang="java">
 NfcManager manager = (NfcManager) context.getSystemService(Context.NFC_SERVICE);
 NfcAdapter adapter = manager.getDefaultAdapter();</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeBeam">
      <MemberSignature Language="C#" Value="public bool InvokeBeam (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeBeam(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeBeam", "(Landroid/app/Activity;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">the current foreground Activity that has registered data to share</param>
        <summary>Manually invoke Android Beam to share data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Manually invoke Android Beam to share data.

 </para>
          <para tool="javadoc-to-mdoc">The Android Beam animation is normally only shown when two NFC-capable
 devices come into range.
 By calling this method, an Activity can invoke the Beam animation directly
 even if no other NFC device is in range yet. The Beam animation will then
 prompt the user to tap another NFC-capable device to complete the data
 transfer.

 </para>
          <para tool="javadoc-to-mdoc">The main advantage of using this method is that it avoids the need for the
 user to tap the screen to complete the transfer, as this method already
 establishes the direction of the transfer and the consent of the user to
 share data. Callers are responsible for making sure that the user has
 consented to sharing data on NFC tap.

 </para>
          <para tool="javadoc-to-mdoc">Note that to use this method, the passed in Activity must have already
 set data to share over Beam by using method calls such as
 <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)" /></c> or
 <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#invokeBeam(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isEnabled", "()Z", "GetIsEnabledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if this NFC Adapter has any features enabled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if this NFC Adapter has any features enabled.

 </para>
          <para tool="javadoc-to-mdoc">If this method returns false, the NFC hardware is guaranteed not to
 generate or respond to any NFC communication over its NFC radio.
 </para>
          <para tool="javadoc-to-mdoc">Applications can use this to check if NFC is enabled. Applications
 can request Settings UI allowing the user to toggle NFC using:
 </para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">startActivity(new Intent(Settings.ACTION_NFC_SETTINGS))</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#isEnabled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Provider.Settings.ActionNfcSettings" />
      </Docs>
      <since version="Added in API level 9" />
    </Member>
    <Member MemberName="IsNdefPushEnabled">
      <MemberSignature Language="C#" Value="public bool IsNdefPushEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNdefPushEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isNdefPushEnabled", "()Z", "GetIsNdefPushEnabledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the NDEF Push (Android Beam) feature is enabled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return true if the NDEF Push (Android Beam) feature is enabled.
 </para>
          <para tool="javadoc-to-mdoc">This function will return true only if both NFC is enabled, and the
 NDEF Push feature is enabled.
 </para>
          <para tool="javadoc-to-mdoc">Note that if NFC is enabled but NDEF Push is disabled then this
 device can still <format type="text/html"><i>receive</i></format> NDEF messages, it just cannot send them.
 </para>
          <para tool="javadoc-to-mdoc">Applications cannot directly toggle the NDEF Push feature, but they
 can request Settings UI allowing the user to toggle NDEF Push using
 <c>startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS))</c></para>
          <para tool="javadoc-to-mdoc">Example usage in an Activity that requires NDEF Push:
 </para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">
 protected void onResume() {
     super.onResume();
     if (!nfcAdapter.isEnabled()) {
         startActivity(new Intent(Settings.ACTION_NFC_SETTINGS));
     } else if (!nfcAdapter.isNdefPushEnabled()) {
         startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS));
     }
 }</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#isNdefPushEnabled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Provider.Settings.ActionNfcsharingSettings" />
      </Docs>
    </Member>
    <Member MemberName="SetBeamPushUris">
      <MemberSignature Language="C#" Value="public void SetBeamPushUris (Android.Net.Uri[] uris, Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBeamPushUris(class Android.Net.Uri[] uris, class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBeamPushUris", "([Landroid/net/Uri;Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uris" Type="Android.Net.Uri[]" />
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="uris">an array of Uri(s) to push over Android Beam</param>
        <param name="activity">activity for which the Uri(s) will be pushed
</param>
        <summary>Set one or more <c><see cref="T:Android.Net.Uri" /></c>s to send using Android Beam (TM).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set one or more <c><see cref="T:Android.Net.Uri" /></c>s to send using Android Beam (TM). Every
 Uri you provide must have either scheme 'file' or scheme 'content'.

 </para>
          <para tool="javadoc-to-mdoc">For the data provided through this method, Android Beam tries to
 switch to alternate transports such as Bluetooth to achieve a fast
 transfer speed. Hence this method is very suitable
 for transferring large files such as pictures or songs.

 </para>
          <para tool="javadoc-to-mdoc">The receiving side will store the content of each Uri in
 a file and present a notification to the user to open the file
 with a <c><see cref="T:Android.Content.Intent" /></c> with action
 <c><see cref="F:Android.Content.Intent.ActionView" /></c>.
 If multiple URIs are sent, the <c><see cref="T:Android.Content.Intent" /></c> will refer
 to the first of the stored files.

 </para>
          <para tool="javadoc-to-mdoc">This method may be called at any time before <c><see cref="M:Android.App.Activity.OnDestroy" /></c>,
 but the URI(s) are only made available for Android Beam when the
 specified activity(s) are in resumed (foreground) state. The recommended
 approach is to call this method during your Activity's
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> - see sample
 code below. This method does not immediately perform any I/O or blocking work,
 so is safe to call on your main thread.

 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUris(Android.Net.Uri[],Android.App.Activity)" />
            </c> and <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c>
 have priority over both <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)" /></c> and
 <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUris(Android.Net.Uri[],Android.App.Activity)" /></c> is called with a null Uri array,
 and/or <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c> is called with a null callback,
 then the Uri push will be completely disabled for the specified activity(s).

 </para>
          <para tool="javadoc-to-mdoc">Code example:
 <example><code lang="java">
 protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
     if (nfcAdapter == null) return;  // NFC not available on this device
     nfcAdapter.setBeamPushUris(new Uri[] {uri1, uri2}, this);
 }</code></example>
 And that is it. Only one call per activity is necessary. The Android
 OS will automatically release its references to the Uri(s) and the
 Activity object when it is destroyed if you follow this pattern.

 </para>
          <para tool="javadoc-to-mdoc">If your Activity wants to dynamically supply Uri(s),
 then set a callback using <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c> instead
 of using this method.

 </para>
          <para tool="javadoc-to-mdoc">Do not pass in an Activity that has already been through
 <c><see cref="M:Android.App.Activity.OnDestroy" /></c>. This is guaranteed if you call this API
 during <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If this device does not support alternate transports
 such as Bluetooth or WiFI, calling this method does nothing.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#setBeamPushUris(android.net.Uri[], android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeamPushUrisCallback">
      <MemberSignature Language="C#" Value="public void SetBeamPushUrisCallback (Android.Nfc.NfcAdapter.ICreateBeamUrisCallback callback, Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBeamPushUrisCallback(class Android.Nfc.NfcAdapter/ICreateBeamUrisCallback callback, class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setBeamPushUrisCallback", "(Landroid/nfc/NfcAdapter$CreateBeamUrisCallback;Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Nfc.NfcAdapter+ICreateBeamUrisCallback" />
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="callback">callback, or null to disable</param>
        <param name="activity">activity for which the Uri(s) will be pushed
</param>
        <summary>Set a callback that will dynamically generate one or more <c><see cref="T:Android.Net.Uri" /></c>s
 to send using Android Beam (TM).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a callback that will dynamically generate one or more <c><see cref="T:Android.Net.Uri" /></c>s
 to send using Android Beam (TM). Every Uri the callback provides
 must have either scheme 'file' or scheme 'content'.

 </para>
          <para tool="javadoc-to-mdoc">For the data provided through this callback, Android Beam tries to
 switch to alternate transports such as Bluetooth to achieve a fast
 transfer speed. Hence this method is very suitable
 for transferring large files such as pictures or songs.

 </para>
          <para tool="javadoc-to-mdoc">The receiving side will store the content of each Uri in
 a file and present a notification to the user to open the file
 with a <c><see cref="T:Android.Content.Intent" /></c> with action
 <c><see cref="F:Android.Content.Intent.ActionView" /></c>.
 If multiple URIs are sent, the <c><see cref="T:Android.Content.Intent" /></c> will refer
 to the first of the stored files.

 </para>
          <para tool="javadoc-to-mdoc">This method may be called at any time before <c><see cref="M:Android.App.Activity.OnDestroy" /></c>,
 but the URI(s) are only made available for Android Beam when the
 specified activity(s) are in resumed (foreground) state. The recommended
 approach is to call this method during your Activity's
 <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c> - see sample
 code below. This method does not immediately perform any I/O or blocking work,
 so is safe to call on your main thread.

 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUris(Android.Net.Uri[],Android.App.Activity)" />
            </c> and <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c>
 have priority over both <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)" /></c> and
 <c><see cref="!:Android.Nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUris(Android.Net.Uri[],Android.App.Activity)" /></c> is called with a null Uri array,
 and/or <c><see cref="M:Android.Nfc.NfcAdapter.SetBeamPushUrisCallback(.ICreateBeamUrisCallback,Android.App.Activity)" /></c> is called with a null callback,
 then the Uri push will be completely disabled for the specified activity(s).

 </para>
          <para tool="javadoc-to-mdoc">Code example:
 <example><code lang="java">
 protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
     if (nfcAdapter == null) return;  // NFC not available on this device
     nfcAdapter.setBeamPushUrisCallback(callback, this);
 }</code></example>
 And that is it. Only one call per activity is necessary. The Android
 OS will automatically release its references to the Uri(s) and the
 Activity object when it is destroyed if you follow this pattern.

 </para>
          <para tool="javadoc-to-mdoc">Do not pass in an Activity that has already been through
 <c><see cref="M:Android.App.Activity.OnDestroy" /></c>. This is guaranteed if you call this API
 during <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">If this device does not support alternate transports
 such as Bluetooth or WiFI, calling this method does nothing.

 </para>
          <para tool="javadoc-to-mdoc">Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#NFC" /></c> permission.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback, android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNdefPushMessage">
      <MemberSignature Language="C#" Value="public void SetNdefPushMessage (Android.Nfc.NdefMessage message, Android.App.Activity activity, Android.App.Activity[] activities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNdefPushMessage(class Android.Nfc.NdefMessage message, class Android.App.Activity activity, class Android.App.Activity[] activities) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNdefPushMessage", "(Landroid/nfc/NdefMessage;Landroid/app/Activity;[Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="Android.Nfc.NdefMessage" />
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="activities" Type="Android.App.Activity[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <param name="activity">To be added.</param>
        <param name="activities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNdefPushMessageCallback">
      <MemberSignature Language="C#" Value="public void SetNdefPushMessageCallback (Android.Nfc.NfcAdapter.ICreateNdefMessageCallback callback, Android.App.Activity activity, Android.App.Activity[] activities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNdefPushMessageCallback(class Android.Nfc.NfcAdapter/ICreateNdefMessageCallback callback, class Android.App.Activity activity, class Android.App.Activity[] activities) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNdefPushMessageCallback", "(Landroid/nfc/NfcAdapter$CreateNdefMessageCallback;Landroid/app/Activity;[Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Nfc.NfcAdapter+ICreateNdefMessageCallback" />
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="activities" Type="Android.App.Activity[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="activity">To be added.</param>
        <param name="activities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOnNdefPushCompleteCallback">
      <MemberSignature Language="C#" Value="public void SetOnNdefPushCompleteCallback (Android.Nfc.NfcAdapter.IOnNdefPushCompleteCallback callback, Android.App.Activity activity, Android.App.Activity[] activities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOnNdefPushCompleteCallback(class Android.Nfc.NfcAdapter/IOnNdefPushCompleteCallback callback, class Android.App.Activity activity, class Android.App.Activity[] activities) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnNdefPushCompleteCallback", "(Landroid/nfc/NfcAdapter$OnNdefPushCompleteCallback;Landroid/app/Activity;[Landroid/app/Activity;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Nfc.NfcAdapter+IOnNdefPushCompleteCallback" />
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="activities" Type="Android.App.Activity[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="activity">To be added.</param>
        <param name="activities">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateOff">
      <MemberSignature Language="C#" Value="public const int StateOff = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 StateOff = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STATE_OFF")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_OFF" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateOn">
      <MemberSignature Language="C#" Value="public const int StateOn = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 StateOn = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STATE_ON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_ON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateTurningOff">
      <MemberSignature Language="C#" Value="public const int StateTurningOff = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 StateTurningOff = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STATE_TURNING_OFF")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_TURNING_OFF" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateTurningOn">
      <MemberSignature Language="C#" Value="public const int StateTurningOn = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 StateTurningOn = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STATE_TURNING_ON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/nfc/NfcAdapter.html#STATE_TURNING_ON" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
