<Type Name="PowerManager+WakeLock" FullName="Android.OS.PowerManager+WakeLock">
  <TypeSignature Language="C#" Value="public class PowerManager.WakeLock : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit PowerManager/WakeLock extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/PowerManager$WakeLock", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A wake lock is a mechanism to indicate that your application needs
 to have the device stay on.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A wake lock is a mechanism to indicate that your application needs
 to have the device stay on.
 </para>
      <para tool="javadoc-to-mdoc">
 Any application using a WakeLock must request the <c>android.permission.WAKE_LOCK</c>
 permission in an <c>&lt;uses-permission&gt;</c> element of the application's manifest.
 Obtain a wake lock by calling <c><see cref="M:Android.OS.PowerManager.NewWakeLock(Android.OS.WakeLockFlags,System.String)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Call <c><see cref="M:Android.OS.PowerManager.WakeLock.Acquire" /></c> to acquire the wake lock and force the device to stay
 on at the level that was requested when the wake lock was created.
 </para>
      <para tool="javadoc-to-mdoc">
 Call <c><see cref="M:Android.OS.PowerManager.WakeLock.Release" /></c> when you are done and don't need the lock anymore.
 It is very important to do this as soon as possible to avoid running down the
 device's battery excessively.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WakeLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual void Acquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acquire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "()V", "GetAcquireHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the wake lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the wake lock.
 </para>
          <para tool="javadoc-to-mdoc">
 Ensures that the device is on at the level requested when
 the wake lock was created.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#acquire()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual void Acquire (long timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acquire(int64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "(J)V", "GetAcquire_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeout">The timeout after which to release the wake lock, in milliseconds.
</param>
        <summary>Acquires the wake lock with a timeout.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Acquires the wake lock with a timeout.
 </para>
          <para tool="javadoc-to-mdoc">
 Ensures that the device is on at the level requested when
 the wake lock was created.  The lock will be released after the given timeout
 expires.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#acquire(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public virtual bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHeld", "()Z", "GetIsHeldHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the wake lock has been acquired but not yet released.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the wake lock has been acquired but not yet released.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#isHeld()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the wake lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases the wake lock.
 </para>
          <para tool="javadoc-to-mdoc">
 This method releases your claim to the CPU or screen being on.
 The screen may turn off shortly after you release the wake lock, or it may
 not if there are other wake locks still held.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release (Android.OS.WakeLockFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release(valuetype Android.OS.WakeLockFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "(I)V", "GetRelease_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReferenceCounted">
      <MemberSignature Language="C#" Value="public virtual void SetReferenceCounted (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetReferenceCounted(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setReferenceCounted", "(Z)V", "GetSetReferenceCounted_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">True to make the wake lock reference counted, false to
 make the wake lock non-reference counted.
</param>
        <summary>Sets whether this WakeLock is reference counted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets whether this WakeLock is reference counted.
 </para>
          <para tool="javadoc-to-mdoc">
 Wake locks are reference counted by default.  If a wake lock is
 reference counted, then each call to <c><see cref="M:Android.OS.PowerManager.WakeLock.Acquire" /></c> must be
 balanced by an equal number of calls to <c><see cref="M:Android.OS.PowerManager.WakeLock.Release" /></c>.  If a wake
 lock is not reference counted, then one call to <c><see cref="M:Android.OS.PowerManager.WakeLock.Release" /></c> is
 sufficient to undo the effect of all previous calls to <c><see cref="M:Android.OS.PowerManager.WakeLock.Acquire" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#setReferenceCounted(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWorkSource">
      <MemberSignature Language="C#" Value="public virtual void SetWorkSource (Android.OS.WorkSource ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWorkSource(class Android.OS.WorkSource ws) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWorkSource", "(Landroid/os/WorkSource;)V", "GetSetWorkSource_Landroid_os_WorkSource_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="Android.OS.WorkSource" />
      </Parameters>
      <Docs>
        <param name="ws">The work source, or null if none.
</param>
        <summary>Sets the work source associated with the wake lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the work source associated with the wake lock.
 </para>
          <para tool="javadoc-to-mdoc">
 The work source is used to determine on behalf of which application
 the wake lock is being held.  This is useful in the case where a
 service is performing work on behalf of an application so that the
 cost of that work can be accounted to the application.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.WakeLock.html#setWorkSource(android.os.WorkSource)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
