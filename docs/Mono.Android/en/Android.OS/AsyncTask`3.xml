<Type Name="AsyncTask&lt;TParams,TProgress,TResult&gt;" FullName="Android.OS.AsyncTask&lt;TParams,TProgress,TResult&gt;">
  <TypeSignature Language="C#" Value="public abstract class AsyncTask&lt;TParams,TProgress,TResult&gt; : Android.OS.AsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AsyncTask`3&lt;TParams, TProgress, TResult&gt; extends Android.OS.AsyncTask" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TParams" />
    <TypeParameter Name="TProgress" />
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>Android.OS.AsyncTask</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/AsyncTask", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <typeparam name="TParams">To be added.</typeparam>
    <typeparam name="TProgress">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <summary tool="true">
      <format type="text/html">
        <h3>Developer Guides</h3>
      </format>
      <format type="text/html">
        <h2>Usage</h2>
      </format>
      <example>
        <code lang="java">
 private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; {
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i </code>
      </example>
      <example>
        <code lang="java">
 new DownloadFilesTask().execute(url1, url2, url3);
 </code>
      </example>
      <format type="text/html">
        <h2>AsyncTask's generic types</h2>
      </format>
      <list type="number">
        <item>
          <term>
            <c>Params</c>, the type of the parameters sent to the task upon
     execution.</term>
        </item>
        <item>
          <term>
            <c>Progress</c>, the type of the progress units published during
     the background computation.</term>
        </item>
        <item>
          <term>
            <c>Result</c>, the type of the result of the background
     computation.</term>
        </item>
      </list>
      <example>
        <code lang="java">
 private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; { ... }
 </code>
      </example>
      <format type="text/html">
        <h2>The 4 steps</h2>
      </format>
      <list type="number">
        <item>
          <term>
            <c>
              <see cref="!:Android.OS.AsyncTask`3.onPreExecute()" />
            </c>, invoked on the UI thread before the task
     is executed. This step is normally used to setup the task, for instance by
     showing a progress bar in the user interface.</term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" />
            </c>, invoked on the background thread
     immediately after <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c> finishes executing. This step is used
     to perform background computation that can take a long time. The parameters
     of the asynchronous task are passed to this step. The result of the computation must
     be returned by this step and will be passed back to the last step. This step
     can also use <c><see cref="!:Android.OS.AsyncTask`3.publishProgress(Progress...)" /></c> to publish one or more units
     of progress. These values are published on the UI thread, in the
     <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> step.</term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" />
            </c>, invoked on the UI thread after a
     call to <c><see cref="!:Android.OS.AsyncTask`3.publishProgress(Progress...)" /></c>. The timing of the execution is
     undefined. This method is used to display any form of progress in the user
     interface while the background computation is still executing. For instance,
     it can be used to animate a progress bar or show logs in a text field.</term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" />
            </c>, invoked on the UI thread after the background
     computation finishes. The result of the background computation is passed to
     this step as a parameter.</term>
        </item>
      </list>
      <format type="text/html">
        <h2>Cancelling a task</h2>
      </format>
      <format type="text/html">
        <h2>Threading rules</h2>
      </format>
      <list type="bullet">
        <item>
          <term>The AsyncTask class must be loaded on the UI thread. This is done
     automatically as of <c><see cref="F:Android.OS.Build+VERSION.JellyBean" tool="ReplaceLinkValue" /></c>.</term>
        </item>
        <item>
          <term>The task instance must be created on the UI thread.</term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:Android.OS.AsyncTask`3.execute(Params...)" />
            </c> must be invoked on the UI thread.</term>
        </item>
        <item>
          <term>Do not call <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c>, <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>,
     <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>, <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> manually.</term>
        </item>
        <item>
          <term>The task can be executed only once (an exception will be thrown if
     a second execution is attempted.)</term>
        </item>
      </list>
      <format type="text/html">
        <h2>Memory observability</h2>
      </format>
      <list type="bullet">
        <item>
          <term>Set member fields in the constructor or <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c>, and refer to them
     in <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>.
     </term>
        </item>
        <item>
          <term>Set member fields in <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>, and refer to them in
     <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> and <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>.
 </term>
        </item>
      </list>
      <format type="text/html">
        <h2>Order of execution</h2>
      </format>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Developer Guides</h3>
        </format>
        <format type="text/html">
          <h2>Usage</h2>
        </format>
        <example>
          <code lang="java">
 private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; {
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i </code>
        </example>
        <example>
          <code lang="java">
 new DownloadFilesTask().execute(url1, url2, url3);
 </code>
        </example>
        <format type="text/html">
          <h2>AsyncTask's generic types</h2>
        </format>
        <list type="number">
          <item>
            <term>
              <c>Params</c>, the type of the parameters sent to the task upon
     execution.</term>
          </item>
          <item>
            <term>
              <c>Progress</c>, the type of the progress units published during
     the background computation.</term>
          </item>
          <item>
            <term>
              <c>Result</c>, the type of the result of the background
     computation.</term>
          </item>
        </list>
        <example>
          <code lang="java">
 private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; { ... }
 </code>
        </example>
        <format type="text/html">
          <h2>The 4 steps</h2>
        </format>
        <list type="number">
          <item>
            <term>
              <c>
                <see cref="!:Android.OS.AsyncTask`3.onPreExecute()" />
              </c>, invoked on the UI thread before the task
     is executed. This step is normally used to setup the task, for instance by
     showing a progress bar in the user interface.</term>
          </item>
          <item>
            <term>
              <c>
                <see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" />
              </c>, invoked on the background thread
     immediately after <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c> finishes executing. This step is used
     to perform background computation that can take a long time. The parameters
     of the asynchronous task are passed to this step. The result of the computation must
     be returned by this step and will be passed back to the last step. This step
     can also use <c><see cref="!:Android.OS.AsyncTask`3.publishProgress(Progress...)" /></c> to publish one or more units
     of progress. These values are published on the UI thread, in the
     <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> step.</term>
          </item>
          <item>
            <term>
              <c>
                <see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" />
              </c>, invoked on the UI thread after a
     call to <c><see cref="!:Android.OS.AsyncTask`3.publishProgress(Progress...)" /></c>. The timing of the execution is
     undefined. This method is used to display any form of progress in the user
     interface while the background computation is still executing. For instance,
     it can be used to animate a progress bar or show logs in a text field.</term>
          </item>
          <item>
            <term>
              <c>
                <see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" />
              </c>, invoked on the UI thread after the background
     computation finishes. The result of the background computation is passed to
     this step as a parameter.</term>
          </item>
        </list>
        <format type="text/html">
          <h2>Cancelling a task</h2>
        </format>
        <format type="text/html">
          <h2>Threading rules</h2>
        </format>
        <list type="bullet">
          <item>
            <term>The AsyncTask class must be loaded on the UI thread. This is done
     automatically as of <c><see cref="F:Android.OS.Build+VERSION.JellyBean" tool="ReplaceLinkValue" /></c>.</term>
          </item>
          <item>
            <term>The task instance must be created on the UI thread.</term>
          </item>
          <item>
            <term>
              <c>
                <see cref="!:Android.OS.AsyncTask`3.execute(Params...)" />
              </c> must be invoked on the UI thread.</term>
          </item>
          <item>
            <term>Do not call <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c>, <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>,
     <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>, <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> manually.</term>
          </item>
          <item>
            <term>The task can be executed only once (an exception will be thrown if
     a second execution is attempted.)</term>
          </item>
        </list>
        <format type="text/html">
          <h2>Memory observability</h2>
        </format>
        <list type="bullet">
          <item>
            <term>Set member fields in the constructor or <c><see cref="!:Android.OS.AsyncTask`3.onPreExecute()" /></c>, and refer to them
     in <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>.
     </term>
          </item>
          <item>
            <term>Set member fields in <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>, and refer to them in
     <c><see cref="!:Android.OS.AsyncTask`3.onProgressUpdate(Progress...)" /></c> and <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>.
 </term>
          </item>
        </list>
        <format type="text/html">
          <h2>Order of execution</h2>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">AsyncTask enables proper and easy use of the UI thread. This class allows to
 perform background operations and publish results on the UI thread without
 having to manipulate threads and/or handlers.</para>
      <para tool="javadoc-to-mdoc">AsyncTask is designed to be a helper class around <c><see cref="T:Java.Lang.Thread" /></c> and <c><see cref="T:Android.OS.Handler" /></c>
 and does not constitute a generic threading framework. AsyncTasks should ideally be
 used for short operations (a few seconds at the most.) If you need to keep threads
 running for long periods of time, it is highly recommended you use the various APIs
 provided by the <c>java.util.concurrent</c> package such as <c><see cref="T:Java.Util.Concurrent.IExecutor" /></c>,
 <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c> and <c><see cref="T:Java.Util.Concurrent.FutureTask" /></c>.</para>
      <para tool="javadoc-to-mdoc">An asynchronous task is defined by a computation that runs on a background thread and
 whose result is published on the UI thread. An asynchronous task is defined by 3 generic
 types, called <c>Params</c>, <c>Progress</c> and <c>Result</c>,
 and 4 steps, called <c>onPreExecute</c>, <c>doInBackground</c>,
 <c>onProgressUpdate</c> and <c>onPostExecute</c>.</para>
      <para tool="javadoc-to-mdoc">For more information about using tasks and threads, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html">Processes and
 Threads</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">AsyncTask must be subclassed to be used. The subclass will override at least
 one method (<c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>), and most often will override a
 second one (<c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c>.)</para>
      <para tool="javadoc-to-mdoc">Here is an example of subclassing:</para>
      <para tool="javadoc-to-mdoc">Once created, a task is executed very simply:</para>
      <para tool="javadoc-to-mdoc">The three types used by an asynchronous task are the following:</para>
      <para tool="javadoc-to-mdoc">Not all types are always used by an asynchronous task. To mark a type as unused,
 simply use the type <c><see cref="T:Java.Lang.Void" /></c>:</para>
      <para tool="javadoc-to-mdoc">When an asynchronous task is executed, the task goes through 4 steps:</para>
      <para tool="javadoc-to-mdoc">A task can be cancelled at any time by invoking <c><see cref="!:Android.OS.AsyncTask`3.cancel(boolean)" /></c>. Invoking
 this method will cause subsequent calls to <c><see cref="!:Android.OS.AsyncTask`3.isCancelled()" /></c> to return true.
 After invoking this method, <c><see cref="!:Android.OS.AsyncTask`3.onCancelled(Result)" /></c>, instead of
 <c><see cref="M:Android.OS.AsyncTask`3.OnPostExecute" tool="ReplaceLinkValue" /></c> will be invoked after <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>
 returns. To ensure that a task is cancelled as quickly as possible, you should always
 check the return value of <c><see cref="!:Android.OS.AsyncTask`3.isCancelled()" /></c> periodically from
 <c><see cref="M:Android.OS.AsyncTask`3.DoInBackground" tool="ReplaceLinkValue" /></c>, if possible (inside a loop for instance.)</para>
      <para tool="javadoc-to-mdoc">There are a few threading rules that must be followed for this class to
 work properly:</para>
      <para tool="javadoc-to-mdoc">AsyncTask guarantees that all callback calls are synchronized in such a way that the following
 operations are safe without explicit synchronizations.</para>
      <para tool="javadoc-to-mdoc">When first introduced, AsyncTasks were executed serially on a single background
 thread. Starting with <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#DONUT" /></c>, this was changed
 to a pool of threads allowing multiple tasks to operate in parallel. Starting with
 <c><see cref="F:Android.OS.Build+VERSION_CODES.Honeycomb" tool="ReplaceLinkValue" /></c>, tasks are executed on a single
 thread to avoid common application errors caused by parallel execution.</para>
      <para tool="javadoc-to-mdoc">If you truly want parallel execution, you can invoke
 <c><see cref="!:Android.OS.AsyncTask`3.executeOnExecutor(java.util.concurrent.Executor,Params...)" /></c> with
 <c><see cref="!:Android.OS.AsyncTask`3.THREAD_POOL_EXECUTOR" /></c>.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new asynchronous task.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new asynchronous task. This constructor must be invoked on the UI thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/AsyncTask.html#AsyncTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncTask (IntPtr doNotUse, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int doNotUse, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="doNotUse" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="doNotUse">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="doNotUse" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="doNotUse" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoInBackground">
      <MemberSignature Language="C#" Value="protected override Java.Lang.Object DoInBackground (Java.Lang.Object[] native_parms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Java.Lang.Object DoInBackground(class Java.Lang.Object[] native_parms) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="native_parms" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="native_parms">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public Android.OS.AsyncTask&lt;TParams,TProgress,TResult&gt; Execute (TParams[] params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.AsyncTask`3&lt;!TParams, !TProgress, !TResult&gt; Execute(!TParams[] params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "([Ljava/lang/Object;)Landroid/os/AsyncTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.AsyncTask&lt;TParams,TProgress,TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="TParams[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="params">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResult">
      <MemberSignature Language="C#" Value="public TResult GetResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TResult GetResult() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits if necessary for the computation to complete, and then
 retrieves its result.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits if necessary for the computation to complete, and then
 retrieves its result.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/AsyncTask.html#get()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Util.Concurrent.CancellationException">If the computation was cancelled.</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">If the computation threw an exception.</exception>
        <exception cref="T:Java.Lang.InterruptedException">If the current thread was interrupted
         while waiting.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPostExecute">
      <MemberSignature Language="C#" Value="protected override void OnPostExecute (Java.Lang.Object result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPostExecute(class Java.Lang.Object result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPostExecute">
      <MemberSignature Language="C#" Value="protected virtual void OnPostExecute (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostExecute(!TResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPostExecute", "(Ljava/lang/Object;)V", "GetOnPostExecute_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressUpdate">
      <MemberSignature Language="C#" Value="protected override void OnProgressUpdate (Java.Lang.Object[] native_values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnProgressUpdate(class Java.Lang.Object[] native_values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="native_values" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="native_values">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressUpdate">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressUpdate (TProgress[] values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressUpdate(!TProgress[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onProgressUpdate", "([Ljava/lang/Object;)V", "GetOnProgressUpdate_arrayLjava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TProgress[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishProgress">
      <MemberSignature Language="C#" Value="protected void PublishProgress (TProgress[] values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PublishProgress(!TProgress[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="TProgress[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunInBackground">
      <MemberSignature Language="C#" Value="protected abstract TResult RunInBackground (TParams[] params);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TResult RunInBackground(!TParams[] params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("doInBackground", "([Ljava/lang/Object;)Ljava/lang/Object;", "GetDoInBackground_arrayLjava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="TParams[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="params">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
