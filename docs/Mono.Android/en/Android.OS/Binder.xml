<Type Name="Binder" FullName="Android.OS.Binder">
  <TypeSignature Language="C#" Value="public class Binder : Java.Lang.Object, Android.OS.IBinder, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binder extends Java.Lang.Object implements class Android.OS.IBinder, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.OS.IBinder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/Binder", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Base class for a remotable object, the core part of a lightweight
 remote procedure call mechanism defined by <c><see cref="T:Android.OS.BinderConsts" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Base class for a remotable object, the core part of a lightweight
 remote procedure call mechanism defined by <c><see cref="T:Android.OS.BinderConsts" /></c>.
 This class is an implementation of IBinder that provides
 standard local implementation of such an object.

 </para>
      <para tool="javadoc-to-mdoc">Most developers will not implement this class directly, instead using the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/components/aidl.html">aidl</a></format> tool to describe the desired
 interface, having it generate the appropriate Binder subclass.  You can,
 however, derive directly from Binder to implement your own custom RPC
 protocol or simply instantiate a raw Binder object directly to use as a
 token that can be shared across processes.

 </para>
      <para tool="javadoc-to-mdoc">This class is just a basic IPC primitive; it has no impact on an application's
 lifecycle, and is valid only as long as the process that created it continues to run.
 To use this correctly, you must be doing so within the context of a top-level
 application component (a <c><see cref="T:Android.App.Service" /></c>, <c><see cref="T:Android.App.Activity" /></c>,
 or <c><see cref="T:Android.Content.ContentProvider" /></c>) that lets the system know your process
 should remain running.</para>
      <para tool="javadoc-to-mdoc">You must keep in mind the situations in which your process
 could go away, and thus require that you later re-create a new Binder and re-attach
 it when the process starts again.  For example, if you are using this within an
 <c><see cref="T:Android.App.Activity" /></c>, your activity's process may be killed any time the
 activity is not started; if the activity is later re-created you will need to
 create a new Binder and hand it back to the correct place again; you need to be
 aware that your process may be started for another reason (for example to receive
 a broadcast) that will not involve re-creating the activity and thus run its code
 to create a new Binder.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.OS.BinderConsts" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/Binder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor initializes the object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor initializes the object.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#Binder()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Binder (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachInterface">
      <MemberSignature Language="C#" Value="public virtual void AttachInterface (Android.OS.IInterface owner, string descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachInterface(class Android.OS.IInterface owner, string descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachInterface", "(Landroid/os/IInterface;Ljava/lang/String;)V", "GetAttachInterface_Landroid_os_IInterface_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="Android.OS.IInterface" />
        <Parameter Name="descriptor" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owner">To be added.</param>
        <param name="descriptor">To be added.</param>
        <summary>Convenience method for associating a specific interface with the Binder.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Convenience method for associating a specific interface with the Binder.
 After calling, queryLocalInterface() will be implemented for you
 to return the given owner IInterface when the corresponding
 descriptor is requested.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#attachInterface(android.os.IInterface, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingPid">
      <MemberSignature Language="C#" Value="public static int CallingPid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CallingPid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingPid", "()I", "GetGetCallingPidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the ID of the process that sent you the current transaction
 that is being processed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the ID of the process that sent you the current transaction
 that is being processed.  This pid can be used with higher-level
 system services to determine its identity and check permissions.
 If the current thread is not currently executing an incoming transaction,
 then its own pid is returned.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#getCallingPid()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingUid">
      <MemberSignature Language="C#" Value="public static int CallingUid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CallingUid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingUid", "()I", "GetGetCallingUidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Linux uid assigned to the process that sent you the
 current transaction that is being processed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Linux uid assigned to the process that sent you the
 current transaction that is being processed.  This uid can be used with
 higher-level system services to determine its identity and check
 permissions.  If the current thread is not currently executing an
 incoming transaction, then its own uid is returned.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#getCallingUid()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallingUserHandle">
      <MemberSignature Language="C#" Value="public static Android.OS.UserHandle CallingUserHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.UserHandle CallingUserHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingUserHandle", "()Landroid/os/UserHandle;", "GetGetCallingUserHandleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.UserHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the UserHandle assigned to the process that sent you the
 current transaction that is being processed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the UserHandle assigned to the process that sent you the
 current transaction that is being processed.  This is the user
 of the caller.  It is distinct from <c><see cref="P:Android.OS.Binder.CallingUid" /></c> in that a
 particular user will have multiple distinct apps running under it each
 with their own uid.  If the current thread is not currently executing an
 incoming transaction, then its own UserHandle is returned.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#getCallingUserHandle()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ClearCallingIdentity">
      <MemberSignature Language="C#" Value="public static long ClearCallingIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ClearCallingIdentity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearCallingIdentity", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset the identity of the incoming IPC on the current thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reset the identity of the incoming IPC on the current thread.  This can
 be useful if, while handling an incoming call, you will be calling
 on interfaces of other objects that may be local to your process and
 need to do permission checks on the calls coming into them (so they
 will check the permission of your own local process, and not whatever
 process originally called you).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#clearCallingIdentity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.OS.Binder.CallingPid" />
        <altmember cref="P:Android.OS.Binder.CallingUid" />
        <altmember cref="M:Android.OS.Binder.RestoreCallingIdentity(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (Java.IO.FileDescriptor fd, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Implemented to call the more convenient version
 <c><see cref="M:Android.OS.Binder.Dump(Java.IO.FileDescriptor,Java.IO.PrintWriter,Java.IO.PrintWriter)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implemented to call the more convenient version
 <c><see cref="M:Android.OS.Binder.Dump(Java.IO.FileDescriptor,Java.IO.PrintWriter,Java.IO.PrintWriter)" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#dump(java.io.FileDescriptor, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="protected virtual void Dump (Java.IO.FileDescriptor fd, Java.IO.PrintWriter fout, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter fout, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="fout" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="fout">The file to which you should dump your state.  This will be
 closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the object's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the object's state into the given stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public virtual void DumpAsync (Java.IO.FileDescriptor fd, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DumpAsync(class Java.IO.FileDescriptor fd, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dumpAsync", "(Ljava/io/FileDescriptor;[Ljava/lang/String;)V", "GetDumpAsync_Ljava_io_FileDescriptor_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Like <c><see cref="M:Android.OS.Binder.Dump(Java.IO.FileDescriptor,System.String[])" /></c>, but ensures the target
 executes asynchronously.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="M:Android.OS.Binder.Dump(Java.IO.FileDescriptor,System.String[])" /></c>, but ensures the target
 executes asynchronously.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#dumpAsync(java.io.FileDescriptor, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="FlushPendingCommands">
      <MemberSignature Language="C#" Value="public static void FlushPendingCommands ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FlushPendingCommands() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flushPendingCommands", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush any Binder commands pending in the current thread to the kernel
 driver.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flush any Binder commands pending in the current thread to the kernel
 driver.  This can be
 useful to call before performing an operation that may block for a long
 time, to ensure that any pending object references have been released
 in order to prevent the process from holding on to objects longer than
 it needs to.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#flushPendingCommands()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceDescriptor">
      <MemberSignature Language="C#" Value="public virtual string InterfaceDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InterfaceDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInterfaceDescriptor", "()Ljava/lang/String;", "GetGetInterfaceDescriptorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Default implementation returns an empty interface name.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation returns an empty interface name.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#getInterfaceDescriptor()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsBinderAlive">
      <MemberSignature Language="C#" Value="public virtual bool IsBinderAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinderAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBinderAlive", "()Z", "GetIsBinderAliveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see if the process that the binder is in is still alive.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check to see if the process that the binder is in is still alive.

 Note that if you're calling on a local binder, this always returns true
 because your process is alive if you're calling it.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#isBinderAlive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JoinThreadPool">
      <MemberSignature Language="C#" Value="public static void JoinThreadPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void JoinThreadPool() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("joinThreadPool", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Add the calling thread to the IPC thread pool.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add the calling thread to the IPC thread pool.  This function does
 not return until the current process is exiting.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#joinThreadPool()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LinkToDeath">
      <MemberSignature Language="C#" Value="public virtual void LinkToDeath (Android.OS.IBinderDeathRecipient recipient, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LinkToDeath(class Android.OS.IBinderDeathRecipient recipient, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("linkToDeath", "(Landroid/os/IBinder$DeathRecipient;I)V", "GetLinkToDeath_Landroid_os_IBinder_DeathRecipient_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="Android.OS.IBinderDeathRecipient" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="recipient">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Local implementation is a no-op.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Local implementation is a no-op.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#linkToDeath(android.os.IBinder.DeathRecipient, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTransact">
      <MemberSignature Language="C#" Value="protected virtual bool OnTransact (int code, Android.OS.Parcel data, Android.OS.Parcel reply, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTransact(int32 code, class Android.OS.Parcel data, class Android.OS.Parcel reply, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTransact", "(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z", "GetOnTransact_ILandroid_os_Parcel_Landroid_os_Parcel_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Int32" />
        <Parameter Name="data" Type="Android.OS.Parcel" />
        <Parameter Name="reply" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="data">To be added.</param>
        <param name="reply">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Default implementation is a stub that returns false.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation is a stub that returns false.  You will want
 to override this to do the appropriate unmarshalling of transactions.

 </para>
          <para tool="javadoc-to-mdoc">If you want to call this, call transact().
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#onTransact(int, android.os.Parcel, android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="PingBinder">
      <MemberSignature Language="C#" Value="public virtual bool PingBinder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PingBinder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pingBinder", "()Z", "GetPingBinderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default implementation always returns true -- if you got here,
 the object is alive.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation always returns true -- if you got here,
 the object is alive.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#pingBinder()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueryLocalInterface">
      <MemberSignature Language="C#" Value="public virtual Android.OS.IInterface QueryLocalInterface (string descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.IInterface QueryLocalInterface(string descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryLocalInterface", "(Ljava/lang/String;)Landroid/os/IInterface;", "GetQueryLocalInterface_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IInterface</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <summary>Use information supplied to attachInterface() to return the
 associated IInterface if it matches the requested
 descriptor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Use information supplied to attachInterface() to return the
 associated IInterface if it matches the requested
 descriptor.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#queryLocalInterface(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RestoreCallingIdentity">
      <MemberSignature Language="C#" Value="public static void RestoreCallingIdentity (long token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreCallingIdentity(int64 token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("restoreCallingIdentity", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="token">The opaque token that was previously returned by
 <c><see cref="M:Android.OS.Binder.ClearCallingIdentity" /></c>.</param>
        <summary>Restore the identity of the incoming IPC on the current thread
 back to a previously identity that was returned by <c><see cref="M:Android.OS.Binder.ClearCallingIdentity" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Restore the identity of the incoming IPC on the current thread
 back to a previously identity that was returned by <c><see cref="M:Android.OS.Binder.ClearCallingIdentity" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#restoreCallingIdentity(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Binder.ClearCallingIdentity" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transact">
      <MemberSignature Language="C#" Value="public bool Transact (int code, Android.OS.Parcel data, Android.OS.Parcel reply, Android.OS.TransactionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Transact(int32 code, class Android.OS.Parcel data, class Android.OS.Parcel reply, valuetype Android.OS.TransactionFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transact", "(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Int32" />
        <Parameter Name="data" Type="Android.OS.Parcel" />
        <Parameter Name="reply" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.TransactionFlags" />
      </Parameters>
      <Docs>
        <param name="code">The action to perform.  This should
 be a number between <c><see cref="F:Android.OS.BinderConsts.FirstCallTransaction" /></c> and
 <c><see cref="F:Android.OS.BinderConsts.LastCallTransaction" /></c>.</param>
        <param name="data">Marshalled data to send to the target.  Must not be null.
 If you are not sending any data, you must create an empty Parcel
 that is given here.</param>
        <param name="reply">Marshalled data to be received from the target.  May be
 null if you are not interested in the return value.</param>
        <param name="flags">Additional operation flags.  Either 0 for a normal
 RPC, or <c><see cref="F:Android.OS.BinderConsts.FlagOneway" /></c> for a one-way RPC.
</param>
        <summary>Default implementation rewinds the parcels and calls onTransact.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Default implementation rewinds the parcels and calls onTransact.  On
 the remote side, transact calls into the binder to do the IPC.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#transact(int, android.os.Parcel, android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="UnlinkToDeath">
      <MemberSignature Language="C#" Value="public virtual bool UnlinkToDeath (Android.OS.IBinderDeathRecipient recipient, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UnlinkToDeath(class Android.OS.IBinderDeathRecipient recipient, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlinkToDeath", "(Landroid/os/IBinder$DeathRecipient;I)Z", "GetUnlinkToDeath_Landroid_os_IBinder_DeathRecipient_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="Android.OS.IBinderDeathRecipient" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="recipient">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Local implementation is a no-op.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Local implementation is a no-op.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Binder.html#unlinkToDeath(android.os.IBinder.DeathRecipient, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
