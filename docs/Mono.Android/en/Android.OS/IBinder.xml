<Type Name="IBinder" FullName="Android.OS.IBinder">
  <TypeSignature Language="C#" Value="public interface IBinder : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinder implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/IBinder", "", "Android.OS.IBinderInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Base interface for a remotable object, the core part of a lightweight
 remote procedure call mechanism designed for high performance when
 performing in-process and cross-process calls.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Base interface for a remotable object, the core part of a lightweight
 remote procedure call mechanism designed for high performance when
 performing in-process and cross-process calls.  This
 interface describes the abstract protocol for interacting with a
 remotable object.  Do not implement this interface directly, instead
 extend from <c><see cref="T:Android.OS.Binder" /></c>.
 
 </para>
      <para tool="javadoc-to-mdoc">The key IBinder API is <c><see cref="!:Android.OS.BinderConsts.transact(int,android.os.Parcel,android.os.Parcel,int)" /></c> matched by
 <c><see cref="M:Android.OS.Binder.OnTransact(System.Int32,Android.OS.Parcel,Android.OS.Parcel,Android.OS.Parcel)" /></c>.  These
 methods allow you to send a call to an IBinder object and receive a
 call coming in to a Binder object, respectively.  This transaction API
 is synchronous, such that a call to <c><see cref="!:Android.OS.BinderConsts.transact(int,android.os.Parcel,android.os.Parcel,int)" /></c> does not
 return until the target has returned from
 <c><see cref="M:Android.OS.Binder.OnTransact(System.Int32,Android.OS.Parcel,Android.OS.Parcel,Android.OS.Parcel)" /></c>; this is the
 expected behavior when calling an object that exists in the local
 process, and the underlying inter-process communication (IPC) mechanism
 ensures that these same semantics apply when going across processes.
 
 </para>
      <para tool="javadoc-to-mdoc">The data sent through transact() is a <c><see cref="T:Android.OS.Parcel" /></c>, a generic buffer
 of data that also maintains some meta-data about its contents.  The meta
 data is used to manage IBinder object references in the buffer, so that those
 references can be maintained as the buffer moves across processes.  This
 mechanism ensures that when an IBinder is written into a Parcel and sent to
 another process, if that other process sends a reference to that same IBinder
 back to the original process, then the original process will receive the
 same IBinder object back.  These semantics allow IBinder/Binder objects to
 be used as a unique identity (to serve as a token or for other purposes)
 that can be managed across processes.
 
 </para>
      <para tool="javadoc-to-mdoc">The system maintains a pool of transaction threads in each process that
 it runs in.  These threads are used to dispatch all
 IPCs coming in from other processes.  For example, when an IPC is made from
 process A to process B, the calling thread in A blocks in transact() as
 it sends the transaction to process B.  The next available pool thread in
 B receives the incoming transaction, calls Binder.onTransact() on the target
 object, and replies with the result Parcel.  Upon receiving its result, the
 thread in process A returns to allow its execution to continue.  In effect,
 other processes appear to use as additional threads that you did not create
 executing in your own process.
 
 </para>
      <para tool="javadoc-to-mdoc">The Binder system also supports recursion across processes.  For example
 if process A performs a transaction to process B, and process B while
 handling that transaction calls transact() on an IBinder that is implemented
 in A, then the thread in A that is currently waiting for the original
 transaction to finish will take care of calling Binder.onTransact() on the
 object being called by B.  This ensures that the recursion semantics when
 calling remote binder object are the same as when calling local objects.
 
 </para>
      <para tool="javadoc-to-mdoc">When working with remote objects, you often want to find out when they
 are no longer valid.  There are three ways this can be determined:
 <list type="bullet"><item><term> The <c><see cref="!:Android.OS.BinderConsts.transact(int,android.os.Parcel,android.os.Parcel,int)" /></c> method will throw a
 <c><see cref="T:Android.OS.RemoteException" /></c> exception if you try to call it on an IBinder
 whose process no longer exists.
 </term></item><item><term> The <c><see cref="!:Android.OS.BinderConsts.pingBinder()" /></c> method can be called, and will return false
 if the remote process no longer exists.
 </term></item><item><term> The <c><see cref="!:Android.OS.BinderConsts.linkToDeath(android.os.IBinder.DeathRecipient,int)" /></c> method can be used to register
 a <c><see cref="T:Android.OS.IBinderDeathRecipient" /></c> with the IBinder, which will be called when its
 containing process goes away.
 </term></item></list></para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.OS.Binder" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/IBinder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public void Dump (Java.IO.FileDescriptor fd, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_arrayLjava_lang_String_Handler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the object's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the object's state into the given stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#dump(java.io.FileDescriptor, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public void DumpAsync (Java.IO.FileDescriptor fd, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DumpAsync(class Java.IO.FileDescriptor fd, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dumpAsync", "(Ljava/io/FileDescriptor;[Ljava/lang/String;)V", "GetDumpAsync_Ljava_io_FileDescriptor_arrayLjava_lang_String_Handler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Like <c><see cref="!:Android.OS.BinderConsts.dump(java.io.FileDescriptor,java.lang.String[])" /></c> but always executes
 asynchronously.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Like <c><see cref="!:Android.OS.BinderConsts.dump(java.io.FileDescriptor,java.lang.String[])" /></c> but always executes
 asynchronously.  If the object is local, a new thread is created
 to perform the dump.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#dumpAsync(java.io.FileDescriptor, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceDescriptor">
      <MemberSignature Language="C#" Value="public string InterfaceDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InterfaceDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInterfaceDescriptor", "()Ljava/lang/String;", "GetGetInterfaceDescriptorHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the canonical name of the interface supported by this binder.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the canonical name of the interface supported by this binder.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#getInterfaceDescriptor()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="IsBinderAlive">
      <MemberSignature Language="C#" Value="public bool IsBinderAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinderAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBinderAlive", "()Z", "GetIsBinderAliveHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check to see if the process that the binder is in is still alive.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check to see if the process that the binder is in is still alive.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#isBinderAlive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LinkToDeath">
      <MemberSignature Language="C#" Value="public void LinkToDeath (Android.OS.IBinderDeathRecipient recipient, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LinkToDeath(class Android.OS.IBinderDeathRecipient recipient, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("linkToDeath", "(Landroid/os/IBinder$DeathRecipient;I)V", "GetLinkToDeath_Landroid_os_IBinder_DeathRecipient_IHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="Android.OS.IBinderDeathRecipient" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="recipient">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Register the recipient for a notification if this binder
 goes away.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register the recipient for a notification if this binder
 goes away.  If this binder object unexpectedly goes away
 (typically because its hosting process has been killed),
 then the given <c><see cref="T:Android.OS.IBinderDeathRecipient" /></c>'s
 <c><see cref="M:Android.OS.IBinderDeathRecipient.BinderDied" /></c> method
 will be called.
 
 </para>
          <para tool="javadoc-to-mdoc">You will only receive death notifications for remote binders,
 as local binders by definition can't die without you dying as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#linkToDeath(android.os.IBinder.DeathRecipient, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.OS.RemoteException">if the target IBinder's
 process has already died.</exception>
      </Docs>
    </Member>
    <Member MemberName="PingBinder">
      <MemberSignature Language="C#" Value="public bool PingBinder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PingBinder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pingBinder", "()Z", "GetPingBinderHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check to see if the object still exists.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Check to see if the object still exists.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#pingBinder()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="QueryLocalInterface">
      <MemberSignature Language="C#" Value="public Android.OS.IInterface QueryLocalInterface (string descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.IInterface QueryLocalInterface(string descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryLocalInterface", "(Ljava/lang/String;)Landroid/os/IInterface;", "GetQueryLocalInterface_Ljava_lang_String_Handler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IInterface</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <summary>Attempt to retrieve a local implementation of an interface
 for this Binder object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempt to retrieve a local implementation of an interface
 for this Binder object.  If null is returned, you will need
 to instantiate a proxy class to marshall calls through
 the transact() method.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#queryLocalInterface(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Transact">
      <MemberSignature Language="C#" Value="public bool Transact (int code, Android.OS.Parcel data, Android.OS.Parcel reply, Android.OS.TransactionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Transact(int32 code, class Android.OS.Parcel data, class Android.OS.Parcel reply, valuetype Android.OS.TransactionFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transact", "(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z", "GetTransact_ILandroid_os_Parcel_Landroid_os_Parcel_IHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Int32" />
        <Parameter Name="data" Type="Android.OS.Parcel" />
        <Parameter Name="reply" Type="Android.OS.Parcel" />
        <Parameter Name="flags" Type="Android.OS.TransactionFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">The action to perform.  This should
 be a number between <c><see cref="F:Android.OS.BinderConsts.FirstCallTransaction" /></c> and
 <c><see cref="F:Android.OS.BinderConsts.LastCallTransaction" /></c>.</param>
        <param name="data">Marshalled data to send to the target.  Must not be null.
 If you are not sending any data, you must create an empty Parcel
 that is given here.</param>
        <param name="reply">Marshalled data to be received from the target.  May be
 null if you are not interested in the return value.</param>
        <param name="flags">Additional operation flags.  Either 0 for a normal
 RPC, or <c><see cref="F:Android.OS.BinderConsts.FlagOneway" /></c> for a one-way RPC.
</param>
        <summary>Perform a generic operation with the object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform a generic operation with the object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#transact(int, android.os.Parcel, android.os.Parcel, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.OS.RemoteException" />
      </Docs>
    </Member>
    <Member MemberName="UnlinkToDeath">
      <MemberSignature Language="C#" Value="public bool UnlinkToDeath (Android.OS.IBinderDeathRecipient recipient, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UnlinkToDeath(class Android.OS.IBinderDeathRecipient recipient, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unlinkToDeath", "(Landroid/os/IBinder$DeathRecipient;I)Z", "GetUnlinkToDeath_Landroid_os_IBinder_DeathRecipient_IHandler:Android.OS.IBinderInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="Android.OS.IBinderDeathRecipient" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="recipient">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Remove a previously registered death notification.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously registered death notification.
 The recipient will no longer be called if this object
 dies.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/IBinder.html#unlinkToDeath(android.os.IBinder.DeathRecipient, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.NoSuchElementException">if the given
 <format type="text/html"><var>recipient</var></format> has not been registered with the IBinder, and
 the IBinder is still alive.  Note that if the <format type="text/html"><var>recipient</var></format>
 was never registered, but the IBinder has already died, then this
 exception will <i>not</i> be thrown, and you will receive a false
 return value instead.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
