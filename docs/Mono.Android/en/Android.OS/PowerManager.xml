<Type Name="PowerManager" FullName="Android.OS.PowerManager">
  <TypeSignature Language="C#" Value="public class PowerManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PowerManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/PowerManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class gives you control of the power state of the device.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class gives you control of the power state of the device.

 <format type="text/html"><table><tr><th>Flag Value</th><th>Description</th></tr><tr><td><c><see cref="!:Android.OS.PowerManager.ACQUIRE_CAUSES_WAKEUP" /></c></td><td>Normal wake locks don't actually turn on the illumination.  Instead, they cause
         the illumination to remain on once it turns on (e.g. from user activity).  This flag
         will force the screen and/or keyboard to turn on immediately, when the WakeLock is
         acquired.  A typical use would be for notifications which are important for the user to
         see immediately.</td></tr><tr><td><c><see cref="!:Android.OS.PowerManager.ON_AFTER_RELEASE" /></c></td><td>If this flag is set, the user activity timer will be reset when the WakeLock is
         released, causing the illumination to remain on a bit longer.  This can be used to 
         reduce flicker if you are cycling between wake lock conditions.</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Device battery life will be significantly affected by the use of this API.</b>
        </format>
 Do not acquire <c><see cref="!:NoType:android/os/PowerManager$WakeLock;Href=../../../reference/android/os/PowerManager.WakeLock.html" /></c>s unless you really need them, use the minimum levels
 possible, and be sure to release them as soon as possible.
 </para>
      <para tool="javadoc-to-mdoc">
 You can obtain an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 The primary API you'll use is <c><see cref="M:Android.OS.PowerManager.NewWakeLock(Android.OS.WakeLockFlags,System.String)" /></c>.
 This will create a <c><see cref="!:NoType:android/os/PowerManager$WakeLock;Href=../../../reference/android/os/PowerManager.WakeLock.html" /></c> object.  You can then use methods
 on the wake lock object to control the power state of the device.
 </para>
      <para tool="javadoc-to-mdoc">
 In practice it's quite simple:
 <example><code lang="java">PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
 PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "My Tag");
 wl.acquire();
   ..screen will stay on during this section..
 wl.release();
 </code></example></para>
      <para tool="javadoc-to-mdoc">
 The following wake lock levels are defined, with varying effects on system power.
 <format type="text/html"><i>These levels are mutually exclusive - you may only specify one of them.</i></format><format type="text/html"><table><tr><th>Flag Value</th><th>CPU</th><th>Screen</th><th>Keyboard</th></tr><tr><td><c><see cref="!:Android.OS.PowerManager.PARTIAL_WAKE_LOCK" /></c></td><td>On*</td><td>Off</td><td>Off</td></tr><tr><td><c><see cref="!:Android.OS.PowerManager.SCREEN_DIM_WAKE_LOCK" /></c></td><td>On</td><td>Dim</td><td>Off</td></tr><tr><td><c><see cref="!:Android.OS.PowerManager.SCREEN_BRIGHT_WAKE_LOCK" /></c></td><td>On</td><td>Bright</td><td>Off</td></tr><tr><td><c><see cref="!:Android.OS.PowerManager.FULL_WAKE_LOCK" /></c></td><td>On</td><td>Bright</td><td>Bright</td></tr></table></format></para>
      <para tool="javadoc-to-mdoc">
 *<format type="text/html"><i>If you hold a partial wake lock, the CPU will continue to run, regardless of any
 display timeouts or the state of the screen and even after the user presses the power button.
 In all other wake locks, the CPU will run, but the user can still put the device to sleep
 using the power button.</i></format></para>
      <para tool="javadoc-to-mdoc">
 In addition, you can add two more flags, which affect behavior of the screen only.
 <format type="text/html"><i>These flags have no effect when combined with a <c><see cref="!:Android.OS.PowerManager.PARTIAL_WAKE_LOCK" /></c>.</i></format></para>
      <para tool="javadoc-to-mdoc">
 Any application using a WakeLock must request the <c>android.permission.WAKE_LOCK</c>
 permission in an <c>&lt;uses-permission&gt;</c> element of the application's manifest.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/PowerManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PowerManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionPowerSaveModeChanged">
      <MemberSignature Language="C#" Value="public const string ActionPowerSaveModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPowerSaveModeChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_POWER_SAVE_MODE_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent that is broadcast when the state of <c><see cref="P:Android.OS.PowerManager.IsPowerSaveMode" /></c> changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Intent that is broadcast when the state of <c><see cref="P:Android.OS.PowerManager.IsPowerSaveMode" /></c> changes.
 This broadcast is only sent to registered receivers.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#ACTION_POWER_SAVE_MODE_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.OS.PowerManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.PowerManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.OS.PowerManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToSleep">
      <MemberSignature Language="C#" Value="public virtual void GoToSleep (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToSleep(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("goToSleep", "(J)V", "GetGoToSleep_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time when the request to go to sleep was issued, in the
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> time base.  This timestamp is used to correctly
 order the go to sleep request with other power management functions.  It should be set
 to the timestamp of the input event that caused the request to go to sleep.</param>
        <summary>Forces the device to go to sleep.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Forces the device to go to sleep.
 </para>
          <para tool="javadoc-to-mdoc">
 Overrides all the wake locks that are held.
 This is what happens when the power key is pressed to turn off the screen.
 </para>
          <para tool="javadoc-to-mdoc">
 Requires the <c><see cref="F:Android.Manifest.Permission.DevicePower" /></c> permission.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#goToSleep(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.PowerManager.UserActivity(System.Int64, System.Boolean)" />
        <altmember cref="M:Android.OS.PowerManager.WakeUp(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="IsInteractive">
      <MemberSignature Language="C#" Value="public virtual bool IsInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInteractive", "()Z", "GetIsInteractiveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is in an interactive state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the device is in an interactive state.
 </para>
          <para tool="javadoc-to-mdoc">
 When this method returns true, the device is awake and ready to interact
 with the user (although this is not a guarantee that the user is actively
 interacting with the device just this moment).  The main screen is usually
 turned on while in this state.  Certain features, such as the proximity
 sensor, may temporarily turn off the screen while still leaving the device in an
 interactive state.  Note in particular that the device is still considered
 to be interactive while dreaming (since dreams can be interactive) but not
 when it is dozing or asleep.
 </para>
          <para tool="javadoc-to-mdoc">
 When this method returns false, the device is dozing or asleep and must
 be awoken before it will become ready to interact with the user again.  The
 main screen is usually turned off while in this state.  Certain features,
 such as "ambient mode" may cause the main screen to remain on (albeit in a
 low power state) to display system-provided content while the device dozes.
 </para>
          <para tool="javadoc-to-mdoc">
 The system will send a <c><see cref="F:Android.Content.Intent.ActionScreenOn" /></c>
 or <c><see cref="F:Android.Content.Intent.ActionScreenOff" /></c> broadcast
 whenever the interactive state of the device changes.  For historical reasons,
 the names of these broadcasts refer to the power state of the screen
 but they are actually sent in response to changes in the overall interactive
 state of the device, as described by this method.
 </para>
          <para tool="javadoc-to-mdoc">
 Services may use the non-interactive state as a hint to conserve power
 since the user is not present.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#isInteractive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Content.Intent.ActionScreenOn" />
        <altmember cref="F:Android.Content.Intent.ActionScreenOff" />
      </Docs>
      <since version="Added in API level 20" />
    </Member>
    <Member MemberName="IsPowerSaveMode">
      <MemberSignature Language="C#" Value="public virtual bool IsPowerSaveMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPowerSaveMode", "()Z", "GetIsPowerSaveModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is currently in power save mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the device is currently in power save mode.  When in this mode,
 applications should reduce their functionality in order to conserve battery as
 much as possible.  You can monitor for changes to this state with
 <c><see cref="F:Android.OS.PowerManager.ActionPowerSaveModeChanged" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#isPowerSaveMode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsScreenOn">
      <MemberSignature Language="C#" Value="public virtual bool IsScreenOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsScreenOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isScreenOn", "()Z", "GetIsScreenOnHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is in an interactive state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the device is in an interactive state.
 </para>
          <para tool="javadoc-to-mdoc">
 For historical reasons, the name of this method refers to the power state of
 the screen but it actually describes the overall interactive state of
 the device.  This method has been replaced by <c><see cref="P:Android.OS.PowerManager.IsInteractive" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 The value returned by this method only indicates whether the device is
 in an interactive state which may have nothing to do with the screen being
 on or off.  To determine the actual state of the screen,
 use <c><see cref="P:Android.Views.Display.State" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#isScreenOn()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="IsWakeLockLevelSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsWakeLockLevelSupported (int level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsWakeLockLevelSupported(int32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isWakeLockLevelSupported", "(I)Z", "GetIsWakeLockLevelSupported_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="level">The wake lock level to check.</param>
        <summary>Returns true if the specified wake lock level is supported.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if the specified wake lock level is supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#isWakeLockLevelSupported(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWakeLock">
      <MemberSignature Language="C#" Value="public virtual Android.OS.PowerManager.WakeLock NewWakeLock (Android.OS.WakeLockFlags levelAndFlags, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.PowerManager/WakeLock NewWakeLock(valuetype Android.OS.WakeLockFlags levelAndFlags, string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newWakeLock", "(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;", "GetNewWakeLock_ILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.PowerManager+WakeLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="levelAndFlags">Combination of wake lock level and flag values defining
 the requested behavior of the WakeLock.</param>
        <param name="tag">Your class name (or other tag) for debugging purposes.</param>
        <summary>Creates a new wake lock with the specified level and flags.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new wake lock with the specified level and flags.
 </para>
          <para tool="javadoc-to-mdoc">
 The <c>levelAndFlags</c> parameter specifies a wake lock level and optional flags
 combined using the logical OR operator.
 </para>
          <para tool="javadoc-to-mdoc">
 The wake lock levels are: <c><see cref="!:Android.OS.PowerManager.PARTIAL_WAKE_LOCK" /></c>,
 <c><see cref="!:Android.OS.PowerManager.FULL_WAKE_LOCK" /></c>, <c><see cref="!:Android.OS.PowerManager.SCREEN_DIM_WAKE_LOCK" /></c>
 and <c><see cref="!:Android.OS.PowerManager.SCREEN_BRIGHT_WAKE_LOCK" /></c>.  Exactly one wake lock level must be
 specified as part of the <c>levelAndFlags</c> parameter.
 </para>
          <para tool="javadoc-to-mdoc">
 The wake lock flags are: <c><see cref="!:Android.OS.PowerManager.ACQUIRE_CAUSES_WAKEUP" /></c>
 and <c><see cref="!:Android.OS.PowerManager.ON_AFTER_RELEASE" /></c>.  Multiple flags can be combined as part of the
 <c>levelAndFlags</c> parameters.
 </para>
          <para tool="javadoc-to-mdoc">
 Call <c><see cref="!:NoType:android/os/PowerManager$WakeLock;Href=../../../reference/android/os/PowerManager.WakeLock.html#acquire()" /></c> on the object to acquire the
 wake lock, and <c><see cref="!:NoType:android/os/PowerManager$WakeLock;Href=../../../reference/android/os/PowerManager.WakeLock.html#release()" /></c> when you are done.
 </para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">PowerManager pm = (PowerManager)mContext.getSystemService(
                                          Context.POWER_SERVICE);
 PowerManager.WakeLock wl = pm.newWakeLock(
                                      PowerManager.SCREEN_DIM_WAKE_LOCK
                                      | PowerManager.ON_AFTER_RELEASE,
                                      TAG);
 wl.acquire();
 // ... do work...
 wl.release();
 </code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
 Although a wake lock can be created without special permissions,
 the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#WAKE_LOCK" /></c> permission is
 required to actually acquire or release the wake lock that is returned.
 </para>
          <para tool="javadoc-to-mdoc">
 If using this to keep the screen on, you should strongly consider using
 <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_KEEP_SCREEN_ON" /></c> instead.
 This window flag will be correctly managed by the platform
 as the user moves between applications and doesn't require a special permission.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reboot">
      <MemberSignature Language="C#" Value="public virtual void Reboot (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reboot(string reason) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reboot", "(Ljava/lang/String;)V", "GetReboot_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">code to pass to the kernel (e.g., "recovery") to
               request special boot modes, or null.
</param>
        <summary>Reboot the device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reboot the device.  Will not return if the reboot is successful.
 </para>
          <para tool="javadoc-to-mdoc">
 Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#REBOOT" /></c> permission.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#reboot(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserActivity">
      <MemberSignature Language="C#" Value="public virtual void UserActivity (long when, bool noChangeLights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UserActivity(int64 when, bool noChangeLights) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("userActivity", "(JZ)V", "GetUserActivity_JZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Int64" />
        <Parameter Name="noChangeLights" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="when">The time of the user activity, in the <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c>
 time base.  This timestamp is used to correctly order the user activity request with
 other power management functions.  It should be set
 to the timestamp of the input event that caused the user activity.</param>
        <param name="noChangeLights">If true, does not cause the keyboard backlight to turn on
 because of this event.  This is set when the power key is pressed.
 We want the device to stay on while the button is down, but we're about
 to turn off the screen so we don't want the keyboard backlight to turn on again.
 Otherwise the lights flash on and then off and it looks weird.</param>
        <summary>Notifies the power manager that user activity happened.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies the power manager that user activity happened.
 </para>
          <para tool="javadoc-to-mdoc">
 Resets the auto-off timer and brightens the screen if the device
 is not asleep.  This is what happens normally when a key or the touch
 screen is pressed or when some other user activity occurs.
 This method does not wake up the device if it has been put to sleep.
 </para>
          <para tool="javadoc-to-mdoc">
 Requires the <c><see cref="F:Android.Manifest.Permission.DevicePower" /></c> permission.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#userActivity(long, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.PowerManager.WakeUp(System.Int64)" />
        <altmember cref="M:Android.OS.PowerManager.GoToSleep(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="WakeUp">
      <MemberSignature Language="C#" Value="public virtual void WakeUp (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WakeUp(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wakeUp", "(J)V", "GetWakeUp_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time when the request to wake up was issued, in the
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> time base.  This timestamp is used to correctly
 order the wake up request with other power management functions.  It should be set
 to the timestamp of the input event that caused the request to wake up.</param>
        <summary>Forces the device to wake up from sleep.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Forces the device to wake up from sleep.
 </para>
          <para tool="javadoc-to-mdoc">
 If the device is currently asleep, wakes it up, otherwise does nothing.
 This is what happens when the power key is pressed to turn on the screen.
 </para>
          <para tool="javadoc-to-mdoc">
 Requires the <c><see cref="F:Android.Manifest.Permission.DevicePower" /></c> permission.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/PowerManager.html#wakeUp(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.OS.PowerManager.UserActivity(System.Int64, System.Boolean)" />
        <altmember cref="M:Android.OS.PowerManager.GoToSleep(System.Int64)" />
      </Docs>
    </Member>
  </Members>
</Type>
