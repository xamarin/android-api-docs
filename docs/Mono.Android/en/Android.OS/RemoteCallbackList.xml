<Type Name="RemoteCallbackList" FullName="Android.OS.RemoteCallbackList">
  <TypeSignature Language="C#" Value="public class RemoteCallbackList : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RemoteCallbackList extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.OS.RemoteCallbackList" />
  <TypeSignature Language="F#" Value="type RemoteCallbackList = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/os/RemoteCallbackList", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/os/RemoteCallbackList", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "E extends android.os.IInterface" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "E extends android.os.IInterface" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Takes care of the grunt work of maintaining a list of remote interfaces,
            typically for the use of performing callbacks from a
            <c>android.app.Service</c> to its clients.</summary>
    <remarks>
      <para>Takes care of the grunt work of maintaining a list of remote interfaces,
            typically for the use of performing callbacks from a
            <c>android.app.Service</c> to its clients.  In particular, this:
            
            &lt;ul&gt;
            &lt;li&gt; Keeps track of a set of registered <c>IInterface</c> callbacks,
            taking care to identify them through their underlying unique <c>IBinder</c>
            (by calling <c>IInterface#asBinder IInterface.asBinder()</c>.
            &lt;li&gt; Attaches a <c>IBinder.DeathRecipient IBinder.DeathRecipient</c> to
            each registered interface, so that it can be cleaned out of the list if its
            process goes away.
            &lt;li&gt; Performs locking of the underlying list of interfaces to deal with
            multithreaded incoming calls, and a thread-safe way to iterate over a
            snapshot of the list without holding its lock.
            &lt;/ul&gt;</para>
      <para>To use this class, simply create a single instance along with your
            service, and call its <c>#register</c> and <c>#unregister</c> methods
            as client register and unregister with your service.  To call back on to
            the registered clients, use <c>#beginBroadcast</c>,
            <c>#getBroadcastItem</c>, and <c>#finishBroadcast</c>.</para>
      <para>If a registered callback's process goes away, this class will take
            care of automatically removing it from the list.  If you want to do
            additional work in this situation, you can create a subclass that
            implements the <c>#onCallbackDied</c> method.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/os/RemoteCallbackList" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RemoteCallbackList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RemoteCallbackList (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.OS.RemoteCallbackList : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.OS.RemoteCallbackList" Usage="new Android.OS.RemoteCallbackList (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBroadcast">
      <MemberSignature Language="C#" Value="public virtual int BeginBroadcast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BeginBroadcast() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.BeginBroadcast" />
      <MemberSignature Language="F#" Value="abstract member BeginBroadcast : unit -&gt; int&#xA;override this.BeginBroadcast : unit -&gt; int" Usage="remoteCallbackList.BeginBroadcast " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("beginBroadcast", "()I", "GetBeginBroadcastHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("beginBroadcast", "()I", "GetBeginBroadcastHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepare to start making calls to the currently registered callbacks.</summary>
        <returns>Returns the number of callbacks in the broadcast, to be used
            with <c>#getBroadcastItem</c> to determine the range of indices you
            can supply.</returns>
        <remarks>
          <para>Prepare to start making calls to the currently registered callbacks.
            This creates a copy of the callback list, which you can retrieve items
            from using <c>#getBroadcastItem</c>.  Note that only one broadcast can
            be active at a time, so you must be sure to always call this from the
            same thread (usually by scheduling with <c>Handler</c>) or
            do your own synchronization.  You must call <c>#finishBroadcast</c>
            when done.</para>
          <para>A typical loop delivering a broadcast looks like this:</para>
          <code lang="text/java">int i = callbacks.beginBroadcast();
            while (i &amp;gt; 0) {
                i--;
                try {
                    callbacks.getBroadcastItem(i).somethingHappened();
                } catch (RemoteException e) {
                    // The RemoteCallbackList will take care of removing
                    // the dead object for us.
                }
            }
            callbacks.finishBroadcast();</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#beginBroadcast()" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.beginBroadcast()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" />
        <altmember cref="M:Android.OS.RemoteCallbackList.FinishBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="FinishBroadcast">
      <MemberSignature Language="C#" Value="public virtual void FinishBroadcast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishBroadcast() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.FinishBroadcast" />
      <MemberSignature Language="F#" Value="abstract member FinishBroadcast : unit -&gt; unit&#xA;override this.FinishBroadcast : unit -&gt; unit" Usage="remoteCallbackList.FinishBroadcast " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("finishBroadcast", "()V", "GetFinishBroadcastHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("finishBroadcast", "()V", "GetFinishBroadcastHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clean up the state of a broadcast previously initiated by calling
            <c>#beginBroadcast</c>.</summary>
        <remarks>
          <para>Clean up the state of a broadcast previously initiated by calling
            <c>#beginBroadcast</c>.  This must always be called when you are done
            with a broadcast.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#finishBroadcast()" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.finishBroadcast()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcastCookie">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? GetBroadcastCookie (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetBroadcastCookie(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.GetBroadcastCookie(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetBroadcastCookie : int -&gt; Java.Lang.Object&#xA;override this.GetBroadcastCookie : int -&gt; Java.Lang.Object" Usage="remoteCallbackList.GetBroadcastCookie index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBroadcastCookie", "(I)Ljava/lang/Object;", "GetGetBroadcastCookie_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBroadcastCookie", "(I)Ljava/lang/Object;", "GetGetBroadcastCookie_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Retrieve the cookie associated with the item
            returned by <c>#getBroadcastItem(int)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Retrieve the cookie associated with the item
            returned by <c>#getBroadcastItem(int)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#getBroadcastCookie(int)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.getBroadcastCookie(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcastItem">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? GetBroadcastItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetBroadcastItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetBroadcastItem : int -&gt; Java.Lang.Object&#xA;override this.GetBroadcastItem : int -&gt; Java.Lang.Object" Usage="remoteCallbackList.GetBroadcastItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBroadcastItem", "(I)Landroid/os/IInterface;", "GetGetBroadcastItem_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBroadcastItem", "(I)Landroid/os/IInterface;", "GetGetBroadcastItem_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Which of the registered callbacks you would like to
            retrieve.  Ranges from 0 to 1-<c>#beginBroadcast</c>.</param>
        <summary>Retrieve an item in the active broadcast that was previously started
            with <c>#beginBroadcast</c>.</summary>
        <returns>Returns the callback interface that you can call.  This will
            always be non-null.</returns>
        <remarks>
          <para>Retrieve an item in the active broadcast that was previously started
            with <c>#beginBroadcast</c>.  This can &lt;em&gt;only&lt;/em&gt; be called after
            the broadcast is started, and its data is no longer valid after
            calling <c>#finishBroadcast</c>.</para>
          <para>Note that it is possible for the process of one of the returned
            callbacks to go away before you call it, so you will need to catch
            <c>RemoteException</c> when calling on to the returned object.
            The callback list itself, however, will take care of unregistering
            these objects once it detects that it is no longer valid, so you can
            handle such an exception by simply ignoring it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#getBroadcastItem(int)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.getBroadcastItem(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredCallbackCookie">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? GetRegisteredCallbackCookie (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetRegisteredCallbackCookie(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.GetRegisteredCallbackCookie(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetRegisteredCallbackCookie : int -&gt; Java.Lang.Object&#xA;override this.GetRegisteredCallbackCookie : int -&gt; Java.Lang.Object" Usage="remoteCallbackList.GetRegisteredCallbackCookie index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRegisteredCallbackCookie", "(I)Ljava/lang/Object;", "GetGetRegisteredCallbackCookie_IHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRegisteredCallbackCookie", "(I)Ljava/lang/Object;", "GetGetRegisteredCallbackCookie_IHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index of which registration cookie to return, from 0 to
            <c>#getRegisteredCallbackCount()</c> - 1.</param>
        <summary>Return any cookie associated with a currently registered callback.</summary>
        <returns>Returns whatever cookie object is associated with this index, or null if
            <c>#kill()</c> has been called.</returns>
        <remarks>
          <para>Return any cookie associated with a currently registered callback.  Note that this is
            &lt;em&gt;not&lt;/em&gt; the same as <c>#getBroadcastCookie</c> and should not be used
            interchangeably with it.  This method returns the current cookie registered at the given
            index, not the current broadcast state.  This means that it is not itself thread-safe:
            any call to <c>#register</c> or <c>#unregister</c> will change these indices, so you
            must do your own thread safety between these to protect from such changes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#getRegisteredCallbackCookie(int)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.getRegisteredCallbackCookie(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredCallbackItem">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? GetRegisteredCallbackItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetRegisteredCallbackItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.GetRegisteredCallbackItem(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetRegisteredCallbackItem : int -&gt; Java.Lang.Object&#xA;override this.GetRegisteredCallbackItem : int -&gt; Java.Lang.Object" Usage="remoteCallbackList.GetRegisteredCallbackItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRegisteredCallbackItem", "(I)Landroid/os/IInterface;", "GetGetRegisteredCallbackItem_IHandler", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRegisteredCallbackItem", "(I)Landroid/os/IInterface;", "GetGetRegisteredCallbackItem_IHandler", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index of which callback registration to return, from 0 to
            <c>#getRegisteredCallbackCount()</c> - 1.</param>
        <summary>Return a currently registered callback.</summary>
        <returns>Returns whatever callback is associated with this index, or null if
            <c>#kill()</c> has been called.</returns>
        <remarks>
          <para>Return a currently registered callback.  Note that this is
            &lt;em&gt;not&lt;/em&gt; the same as <c>#getBroadcastItem</c> and should not be used
            interchangeably with it.  This method returns the registered callback at the given
            index, not the current broadcast state.  This means that it is not itself thread-safe:
            any call to <c>#register</c> or <c>#unregister</c> will change these indices, so you
            must do your own thread safety between these to protect from such changes.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#getRegisteredCallbackItem(int)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.getRegisteredCallbackItem(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.OS.RemoteCallbackList.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.OS.RemoteCallbackList.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public virtual void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Kill() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.Kill" />
      <MemberSignature Language="F#" Value="abstract member Kill : unit -&gt; unit&#xA;override this.Kill : unit -&gt; unit" Usage="remoteCallbackList.Kill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("kill", "()V", "GetKillHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("kill", "()V", "GetKillHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disable this callback list.</summary>
        <remarks>
          <para>Disable this callback list.  All registered callbacks are unregistered,
            and the list is disabled so that future calls to <c>#register</c> will
            fail.  This should be used when a Service is stopping, to prevent clients
            from registering callbacks after it is stopped.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#kill()" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.kill()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCallbackDied">
      <MemberSignature Language="C#" Value="public virtual void OnCallbackDied (Java.Lang.Object? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCallbackDied(class Java.Lang.Object callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.OnCallbackDied(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member OnCallbackDied : Java.Lang.Object -&gt; unit&#xA;override this.OnCallbackDied : Java.Lang.Object -&gt; unit" Usage="remoteCallbackList.OnCallbackDied callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;)V", "GetOnCallbackDied_Landroid_os_IInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;)V", "GetOnCallbackDied_Landroid_os_IInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>Old version of <c>#onCallbackDied(E, Object)</c> that
            does not provide a cookie.</summary>
        <remarks>
          <para>Old version of <c>#onCallbackDied(E, Object)</c> that
            does not provide a cookie.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#onCallbackDied(E)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.onCallbackDied(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCallbackDied">
      <MemberSignature Language="C#" Value="public virtual void OnCallbackDied (Java.Lang.Object? callback, Java.Lang.Object? cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCallbackDied(class Java.Lang.Object callback, class Java.Lang.Object cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.OnCallbackDied(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member OnCallbackDied : Java.Lang.Object * Java.Lang.Object -&gt; unit&#xA;override this.OnCallbackDied : Java.Lang.Object * Java.Lang.Object -&gt; unit" Usage="remoteCallbackList.OnCallbackDied (callback, cookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;Ljava/lang/Object;)V", "GetOnCallbackDied_Landroid_os_IInterface_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;Ljava/lang/Object;)V", "GetOnCallbackDied_Landroid_os_IInterface_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
        <Parameter Name="cookie" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">The callback whose process has died.  Note that, since
            its process has died, you can not make any calls on to this interface.
            You can, however, retrieve its IBinder and compare it with another
            IBinder to see if it is the same object.</param>
        <param name="cookie">The cookie object original provided to
            <c>#register(E, Object)</c>.</param>
        <summary>Called when the process hosting a callback in the list has gone away.</summary>
        <remarks>
          <para>Called when the process hosting a callback in the list has gone away.
            The default implementation calls <c>#onCallbackDied(E)</c>
            for backwards compatibility.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#onCallbackDied(E,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.onCallbackDied(E, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual bool Register (Java.Lang.Object? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Register(class Java.Lang.Object callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.Register(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Register : Java.Lang.Object -&gt; bool&#xA;override this.Register : Java.Lang.Object -&gt; bool" Usage="remoteCallbackList.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("register", "(Landroid/os/IInterface;)Z", "GetRegister_Landroid_os_IInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("register", "(Landroid/os/IInterface;)Z", "GetRegister_Landroid_os_IInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>Simple version of <c>RemoteCallbackList#register(E, Object)</c>
            that does not take a cookie object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Simple version of <c>RemoteCallbackList#register(E, Object)</c>
            that does not take a cookie object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#register(E)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.register(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual bool Register (Java.Lang.Object? callback, Java.Lang.Object? cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Register(class Java.Lang.Object callback, class Java.Lang.Object cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.Register(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Register : Java.Lang.Object * Java.Lang.Object -&gt; bool&#xA;override this.Register : Java.Lang.Object * Java.Lang.Object -&gt; bool" Usage="remoteCallbackList.Register (callback, cookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("register", "(Landroid/os/IInterface;Ljava/lang/Object;)Z", "GetRegister_Landroid_os_IInterface_Ljava_lang_Object_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("register", "(Landroid/os/IInterface;Ljava/lang/Object;)Z", "GetRegister_Landroid_os_IInterface_Ljava_lang_Object_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
        <Parameter Name="cookie" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">The callback interface to be added to the list.  Must
            not be null -- passing null here will cause a NullPointerException.
            Most services will want to check for null before calling this with
            an object given from a client, so that clients can't crash the
            service with bad data.</param>
        <param name="cookie">Optional additional data to be associated with this
            callback.</param>
        <summary>Add a new callback to the list.</summary>
        <returns>Returns true if the callback was successfully added to the list.
            Returns false if it was not added, either because <c>#kill</c> had
            previously been called or the callback's process has gone away.</returns>
        <remarks>
          <para>Add a new callback to the list.  This callback will remain in the list
            until a corresponding call to <c>#unregister</c> or its hosting process
            goes away.  If the callback was already registered (determined by
            checking to see if the <c>IInterface#asBinder callback.asBinder()</c>
            object is already in the list), then it will be left as-is.
            Registrations are not counted; a single call to <c>#unregister</c>
            will remove a callback after any number calls to register it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#register(E,%20java.lang.Object)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.register(E, java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisteredCallbackCount">
      <MemberSignature Language="C#" Value="public virtual int RegisteredCallbackCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RegisteredCallbackCount" />
      <MemberSignature Language="DocId" Value="P:Android.OS.RemoteCallbackList.RegisteredCallbackCount" />
      <MemberSignature Language="F#" Value="member this.RegisteredCallbackCount : int" Usage="Android.OS.RemoteCallbackList.RegisteredCallbackCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRegisteredCallbackCount", "()I", "GetGetRegisteredCallbackCountHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRegisteredCallbackCount", "()I", "GetGetRegisteredCallbackCountHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of registered callbacks.</summary>
        <value>The size.</value>
        <remarks>
          <para>Returns the number of registered callbacks. Note that the number of registered
            callbacks may differ from the value returned by <c>#beginBroadcast()</c> since
            the former returns the number of callbacks registered at the time of the call
            and the second the number of callback to which the broadcast will be delivered.</para>
          <para>This function is useful to decide whether to schedule a broadcast if this
            requires doing some work which otherwise would not be performed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#getRegisteredCallbackCount()" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.getRegisteredCallbackCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.OS.RemoteCallbackList.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.OS.RemoteCallbackList.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.OS.RemoteCallbackList.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.OS.RemoteCallbackList.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public virtual bool Unregister (Java.Lang.Object? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Unregister(class Java.Lang.Object callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.RemoteCallbackList.Unregister(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Unregister : Java.Lang.Object -&gt; bool&#xA;override this.Unregister : Java.Lang.Object -&gt; bool" Usage="remoteCallbackList.Unregister callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregister", "(Landroid/os/IInterface;)Z", "GetUnregister_Landroid_os_IInterface_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregister", "(Landroid/os/IInterface;)Z", "GetUnregister_Landroid_os_IInterface_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to be removed from the list.  Passing
            null here will cause a NullPointerException, so you will generally want
            to check for null before calling.</param>
        <summary>Remove from the list a callback that was previously added with
            <c>#register</c>.</summary>
        <returns>Returns true if the callback was found and unregistered.  Returns
            false if the given callback was not found on the list.</returns>
        <remarks>
          <para>Remove from the list a callback that was previously added with
            <c>#register</c>.  This uses the
            <c>IInterface#asBinder callback.asBinder()</c> object to correctly
            find the previous registration.
            Registrations are not counted; a single unregister call will remove
            a callback after any number calls to <c>#register</c> for it.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/RemoteCallbackList#unregister(E)" title="Reference documentation">Java documentation for <code>android.os.RemoteCallbackList.unregister(E)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
