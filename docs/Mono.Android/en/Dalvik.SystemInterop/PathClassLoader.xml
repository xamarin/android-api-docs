<Type Name="PathClassLoader" FullName="Dalvik.SystemInterop.PathClassLoader">
  <TypeSignature Language="C#" Value="public class PathClassLoader : Dalvik.SystemInterop.BaseDexClassLoader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PathClassLoader extends Dalvik.SystemInterop.BaseDexClassLoader" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Dalvik.SystemInterop.BaseDexClassLoader</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("dalvik/system/PathClassLoader", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Provides a simple <c><see cref="T:Java.Lang.ClassLoader" /></c> implementation that operates on a list
 of files and directories in the local file system, but does not attempt to
 load classes from the network.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides a simple <c><see cref="T:Java.Lang.ClassLoader" /></c> implementation that operates on a list
 of files and directories in the local file system, but does not attempt to
 load classes from the network. Android uses this class for its system class
 loader and for its application class loader(s).
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/dalvik/system/PathClassLoader.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PathClassLoader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PathClassLoader (string dexPath, Java.Lang.ClassLoader parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dexPath, class Java.Lang.ClassLoader parent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/ClassLoader;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="parent" Type="Java.Lang.ClassLoader" />
      </Parameters>
      <Docs>
        <param name="dexPath">To be added.</param>
        <param name="parent">To be added.</param>
        <summary>Creates a <c>PathClassLoader</c> that operates on a given list of files
 and directories.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>PathClassLoader</c> that operates on a given list of files
 and directories. This method is equivalent to calling
 <c><see cref="C:Dalvik.SystemInterop.PathClassLoader(System.String,System.String,System.String)" /></c> with a
 <c>null</c> value for the second argument (see description there).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/dalvik/system/PathClassLoader.html#PathClassLoader(java.lang.String, java.lang.ClassLoader)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PathClassLoader (string dexPath, string libraryPath, Java.Lang.ClassLoader parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dexPath, string libraryPath, class Java.Lang.ClassLoader parent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="libPath" Type="System.String" />
        <Parameter Name="parent" Type="Java.Lang.ClassLoader" />
      </Parameters>
      <Docs>
        <param name="dexPath">To be added.</param>
        <param name="libraryPath">To be added.</param>
        <param name="parent">To be added.</param>
        <summary>Creates a <c>PathClassLoader</c> that operates on two given
 lists of files and directories.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>PathClassLoader</c> that operates on two given
 lists of files and directories. The entries of the first list
 should be one of the following:

 <list type="bullet"><item><term>JAR/ZIP/APK files, possibly containing a "classes.dex" file as
 well as arbitrary resources.
 </term></item><item><term>Raw ".dex" files (not inside a zip file).
 </term></item></list>

 The entries of the second list should be directories containing
 native library files.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/dalvik/system/PathClassLoader.html#PathClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindLibrary">
      <MemberSignature Language="C#" Value="public override string FindLibrary (string libname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string FindLibrary(string libname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findLibrary", "(Ljava/lang/String;)Ljava/lang/String;", "GetFindLibrary_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libname">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
