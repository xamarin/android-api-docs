<Type Name="BackupDataInput" FullName="Android.App.Backup.BackupDataInput">
  <TypeSignature Language="C#" Value="public class BackupDataInput : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackupDataInput extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/backup/BackupDataInput", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>Provides the structured interface through which a <c><see cref="T:Android.App.Backup.BackupAgent" /></c> reads
 information from the backup data set, via its
 <c><see cref="M:Android.App.Backup.BackupAgent.OnRestore(Android.App.Backup.BackupDataInput,System.Int32,System.Int32)" /></c>
 method.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides the structured interface through which a <c><see cref="T:Android.App.Backup.BackupAgent" /></c> reads
 information from the backup data set, via its
 <c><see cref="M:Android.App.Backup.BackupAgent.OnRestore(Android.App.Backup.BackupDataInput,System.Int32,System.Int32)" /></c>
 method.  The data is presented as a set of "entities," each
 representing one named record as previously stored by the agent's
 <c><see cref="M:Android.App.Backup.BackupAgent.OnBackup(Android.OS.ParcelFileDescriptor,Android.App.Backup.BackupDataOutput,Android.App.Backup.BackupDataOutput)" /></c> implementation.  An entity is composed of a descriptive header plus a
 byte array that holds the raw data saved in the remote backup.
 </para>
      <para tool="javadoc-to-mdoc">
 The agent must consume every entity in the data stream, otherwise the
 restored state of the application will be incomplete.
 <format type="text/html"><h3>Example</h3></format></para>
      <para tool="javadoc-to-mdoc">
 A typical
 <c><see cref="M:Android.App.Backup.BackupAgent.OnRestore(Android.App.Backup.BackupDataInput,System.Int32,System.Int32)" /></c> implementation might be structured something like this:
 <example><code lang="java">
 public void onRestore(BackupDataInput data, int appVersionCode,
                       ParcelFileDescriptor newState) {
     while (data.readNextHeader()) {
         String key = data.getKey();
         int dataSize = data.getDataSize();

         if (key.equals(MY_BACKUP_KEY_ONE)) {
             // process this kind of record here
             byte[] buffer = new byte[dataSize];
             data.readEntityData(buffer, 0, dataSize); // reads the entire entity at once

             // now 'buffer' holds the raw data and can be processed however
             // the agent wishes
             processBackupKeyOne(buffer);
         } else if (key.equals(MY_BACKUP_KEY_TO_IGNORE) {
             // a key we recognize but wish to discard
             data.skipEntityData();
         } // ... etc.
    }
 }</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BackupDataInput (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSize">
      <MemberSignature Language="C#" Value="public virtual int DataSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDataSize", "()I", "GetGetDataSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Report the size in bytes of the data associated with the current entity in the
 restore stream.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Report the size in bytes of the data associated with the current entity in the
 restore stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html#getDataSize()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IllegalStateException">if the next record header has not yet been read
</exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public virtual string Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getKey", "()Ljava/lang/String;", "GetGetKeyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Report the key associated with the current entity in the restore stream</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Report the key associated with the current entity in the restore stream</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html#getKey()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IllegalStateException">if the next record header has not yet been read
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEntityData">
      <MemberSignature Language="C#" Value="public virtual int ReadEntityData (byte[] data, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadEntityData(unsigned int8[] data, int32 offset, int32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readEntityData", "([BII)I", "GetReadEntityData_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">An allocated byte array of at least 'size' bytes</param>
        <param name="offset">Offset within the 'data' array at which the data will be placed
    when read from the stream</param>
        <param name="size">The number of bytes to read in this pass</param>
        <summary>Read a record's raw data from the restore stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Read a record's raw data from the restore stream.  The record's header must first
 have been processed by the <c><see cref="M:Android.App.Backup.BackupDataInput.ReadNextHeader" /></c> method.  Multiple calls to
 this method may be made in order to process the data in chunks; not all of it
 must be read in a single call.  Once all of the raw data for the current entity
 has been read, further calls to this method will simply return zero.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html#readEntityData(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if an error occurred when trying to read the restore data stream
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEntityDataAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadEntityDataAsync (byte[] data, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadEntityDataAsync(unsigned int8[] data, int32 offset, int32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadNextHeader">
      <MemberSignature Language="C#" Value="public virtual bool ReadNextHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadNextHeader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readNextHeader", "()Z", "GetReadNextHeaderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Extract the next entity header from the restore stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Extract the next entity header from the restore stream.  After this method
 return success, the <c><see cref="P:Android.App.Backup.BackupDataInput.Key" /></c> and <c><see cref="P:Android.App.Backup.BackupDataInput.DataSize" /></c> methods can
 be used to inspect the entity that is now available for processing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html#readNextHeader()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if an error occurred while reading the restore stream
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNextHeaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ReadNextHeaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReadNextHeaderAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipEntityData">
      <MemberSignature Language="C#" Value="public virtual void SkipEntityData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SkipEntityData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skipEntityData", "()V", "GetSkipEntityDataHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consume the current entity's data without extracting it into a buffer
 for further processing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Consume the current entity's data without extracting it into a buffer
 for further processing.  This allows a <c><see cref="T:Android.App.Backup.BackupAgent" /></c> to
 efficiently discard obsolete or otherwise uninteresting records during the
 restore operation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataInput.html#skipEntityData()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if an error occurred when trying to read the restore data stream
</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipEntityDataAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SkipEntityDataAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SkipEntityDataAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
