<Type Name="BackupDataOutput" FullName="Android.App.Backup.BackupDataOutput">
  <TypeSignature Language="C#" Value="public class BackupDataOutput : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackupDataOutput extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/backup/BackupDataOutput", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>Provides the structured interface through which a <c><see cref="T:Android.App.Backup.BackupAgent" /></c> commits
 information to the backup data set, via its <c><see cref="M:Android.App.Backup.BackupAgent.OnBackup(Android.OS.ParcelFileDescriptor,Android.App.Backup.BackupDataOutput,Android.App.Backup.BackupDataOutput)" /></c> method.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides the structured interface through which a <c><see cref="T:Android.App.Backup.BackupAgent" /></c> commits
 information to the backup data set, via its <c><see cref="M:Android.App.Backup.BackupAgent.OnBackup(Android.OS.ParcelFileDescriptor,Android.App.Backup.BackupDataOutput,Android.App.Backup.BackupDataOutput)" /></c> method.  Data written for backup is presented
 as a set of "entities," key/value pairs in which each binary data record "value" is
 named with a string "key."
 </para>
      <para tool="javadoc-to-mdoc">
 To commit a data record to the backup transport, the agent's
 <c><see cref="M:Android.App.Backup.BackupAgent.OnBackup(Android.OS.ParcelFileDescriptor,Android.App.Backup.BackupDataOutput,Android.App.Backup.BackupDataOutput)" /></c> method first writes an "entity header" that supplies the key string for the record
 and the total size of the binary value for the record.  After the header has been
 written, the agent then writes the binary entity value itself.  The entity value can
 be written in multiple chunks if desired, as long as the total count of bytes written
 matches what was supplied to <c><see cref="M:Android.App.Backup.BackupDataOutput.WriteEntityHeader(System.String,System.Int32)" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Entity key strings are considered to be unique within a given application's backup
 data set. If a backup agent writes a new entity under an existing key string, its value will
 replace any previous value in the transport's remote data store.  You can remove a record
 entirely from the remote data set by writing a new entity header using the
 existing record's key, but supplying a negative <c>dataSize</c> parameter.
 When you do so, the agent does not need to call <c><see cref="M:Android.App.Backup.BackupDataOutput.WriteEntityData(System.Byte[],System.Int32)" /></c>.
 <format type="text/html"><h3>Example</h3></format></para>
      <para tool="javadoc-to-mdoc">
 Here is an example illustrating a way to back up the value of a String variable
 called <c>mStringToBackUp</c>:
 <example><code lang="java">
 static final String MY_STRING_KEY = "storedstring";

 public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)
         throws IOException {
     ...
     byte[] stringBytes = mStringToBackUp.getBytes();
     data.writeEntityHeader(MY_STRING_KEY, stringBytes.length);
     data.writeEntityData(stringBytes, stringBytes.length);
     ...
 }</code></example></para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.App.Backup.BackupAgent" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/backup/BackupDataOutput.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BackupDataOutput (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityData">
      <MemberSignature Language="C#" Value="public virtual int WriteEntityData (byte[] data, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 WriteEntityData(unsigned int8[] data, int32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeEntityData", "([BI)I", "GetWriteEntityData_arrayBIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">A raw data buffer to send</param>
        <param name="size">The number of bytes to be sent in this chunk</param>
        <summary>Write a chunk of data under the current entity to the backup transport.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Write a chunk of data under the current entity to the backup transport.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataOutput.html#writeEntityData(byte[], int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if the write failed
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityDataAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteEntityDataAsync (byte[] data, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteEntityDataAsync(unsigned int8[] data, int32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityHeader">
      <MemberSignature Language="C#" Value="public virtual int WriteEntityHeader (string key, int dataSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 WriteEntityHeader(string key, int32 dataSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeEntityHeader", "(Ljava/lang/String;I)I", "GetWriteEntityHeader_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="dataSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">A string key that uniquely identifies the data record within the application.
    Keys whose first character is ＀ or higher are not valid.</param>
        <param name="dataSize">The size in bytes of this record's data.  Passing a dataSize
    of -1 indicates that the record under this key should be deleted.</param>
        <summary>Mark the beginning of one record in the backup data stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Mark the beginning of one record in the backup data stream. This must be called before
 <c><see cref="M:Android.App.Backup.BackupDataOutput.WriteEntityData(System.Byte[],System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/backup/BackupDataOutput.html#writeEntityHeader(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.IO.IOException">if the write failed
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityHeaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteEntityHeaderAsync (string key, int dataSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteEntityHeaderAsync(string key, int32 dataSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="dataSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="dataSize">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
