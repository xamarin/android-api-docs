<Type Name="DreamService" FullName="Android.Service.Dreams.DreamService">
  <TypeSignature Language="C#" Value="public class DreamService : Android.App.Service, Android.Views.Window.ICallback, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DreamService extends Android.App.Service implements class Android.Runtime.IJavaObject, class Android.Views.Window/ICallback, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Service</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Views.Window+ICallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/service/dreams/DreamService", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="17">
    <summary>Extend this class to implement a custom dream (available to the user as a "Daydream").</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Extend this class to implement a custom dream (available to the user as a "Daydream").

 <list type="number"><item><term><c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c>Use this for initial setup, such as calling <c><see cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View)" /></c>.</term></item><item><term><c><see cref="M:Android.Service.Dreams.DreamService.OnDreamingStarted" /></c>Your dream has started, so you should begin animations or other behaviors here.</term></item><item><term><c><see cref="M:Android.Service.Dreams.DreamService.OnDreamingStopped" /></c>Use this to stop the things you started in <c><see cref="M:Android.Service.Dreams.DreamService.OnDreamingStarted" /></c>.</term></item><item><term><c><see cref="M:Android.Service.Dreams.DreamService.OnDetachedFromWindow" /></c>Use this to dismantle resources (for example, detach from handlers
        and listeners).</term></item></list><example><code lang="xml">
 &lt;service
     android:name=".MyDream"
     android:exported="true"
     android:icon="@drawable/my_icon"
     android:label="@string/my_dream_label" &gt;

     &lt;intent-filter&gt;
         &lt;action android:name="android.service.dreams.DreamService" /&gt;
         &lt;category android:name="android.intent.category.DEFAULT" /&gt;
     &lt;/intent-filter&gt;

     &lt;!-- Point to additional information for this dream (optional) --&gt;
     &lt;meta-data
         android:name="android.service.dream"
         android:resource="@xml/my_dream" /&gt;
 &lt;/service&gt;
 </code></example><example><code lang="xml">
 &lt;dream xmlns:android="http://schemas.android.com/apk/res/android"
     android:settingsActivity="com.example.app/.MyDreamSettingsActivity" /&gt;
 </code></example><example><code lang="java">
 public class MyDream extends DreamService {

     &amp;#64;Override
     public void onAttachedToWindow() {
         super.onAttachedToWindow();

         // Exit dream upon user touch
         setInteractive(false);
         // Hide system UI
         setFullscreen(true);
         // Set the dream layout
         setContentView(R.layout.dream);
     }
 }
 </code></example><example><code lang="xml">
 &lt;service
     android:name=".MyDream"
     android:exported="true"
     android:icon="@drawable/my_icon"
     android:label="@string/my_dream_label"
     android:permission="android.permission.BIND_DREAM_SERVICE"&gt;
   &lt;intent-filter&gt;
     &lt;action android:name=”android.service.dreams.DreamService” /&gt;
     &lt;category android:name=”android.intent.category.DEFAULT” /&gt;
   &lt;/intent-filter&gt;
 &lt;/service&gt;
 </code></example></para>
      <para tool="javadoc-to-mdoc">Dreams are interactive screensavers launched when a charging device is idle, or docked in a
 desk dock. Dreams provide another modality for apps to express themselves, tailored for
 an exhibition/lean-back experience.</para>
      <para tool="javadoc-to-mdoc">The <c>DreamService</c> lifecycle is as follows:</para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">In addition, onCreate and onDestroy (from the Service interface) will also be called, but
 initialization and teardown should be done by overriding the hooks above.</para>
      <para tool="javadoc-to-mdoc">To be available to the system, your <c>DreamService</c> should be declared in the
 manifest as follows:</para>
      <para tool="javadoc-to-mdoc">If specified with the <c>&lt;meta-data&gt;</c> element,
 additional information for the dream is defined using the
 <c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#Dream" /></c> element in a separate XML file.
 Currently, the only addtional
 information you can provide is for a settings activity that allows the user to configure
 the dream behavior. For example:</para>
      <para tool="javadoc-to-mdoc">res/xml/my_dream.xml</para>
      <para tool="javadoc-to-mdoc">This makes a Settings button available alongside your dream's listing in the
 system settings, which when pressed opens the specified activity.</para>
      <para tool="javadoc-to-mdoc">To specify your dream layout, call <c><see cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View)" /></c>, typically during the
 <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c> callback. For example:</para>
      <para tool="javadoc-to-mdoc">When targeting api level 21 and above, you must declare the service in your manifest file
 with the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#BIND_DREAM_SERVICE" /></c> permission. For example:</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 17" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DreamService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#DreamService()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DreamService (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddContentView">
      <MemberSignature Language="C#" Value="public virtual void AddContentView (Android.Views.View view, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.
</param>
        <summary>Adds a view to the Dream's window, leaving other content views in place.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds a view to the Dream's window, leaving other content views in place.

 </para>
          <para tool="javadoc-to-mdoc">Note: Requires a window, do not call before <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#addContentView(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchGenericMotionEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchGenericMotionEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchGenericMotionEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchGenericMotionEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The generic motion event.</param>
        <summary>Called to process generic motion events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process generic motion events.  At the very least your
 implementation must call
 <c><see cref="M:Android.Views.Window.SuperDispatchGenericMotionEvent(Android.Views.MotionEvent)" /></c> to do the
 standard processing. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchGenericMotionEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <summary>Called to process key events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process key events.  At the very least your
 implementation must call
 <c><see cref="M:Android.Views.Window.SuperDispatchKeyEvent(Android.Views.KeyEvent)" /></c> to do the
 standard key processing. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchKeyEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchKeyShortcutEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchKeyShortcutEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchKeyShortcutEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", "GetDispatchKeyShortcutEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key shortcut event.</param>
        <summary>Called to process a key shortcut event.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process a key shortcut event.
 At the very least your implementation must call
 <c><see cref="M:Android.Views.Window.SuperDispatchKeyShortcutEvent(Android.Views.KeyEvent)" /></c> to do the
 standard key shortcut processing. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchKeyShortcutEvent(android.view.KeyEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchPopulateAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchPopulateAccessibilityEvent (Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchPopulateAccessibilityEvent(class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", "GetDispatchPopulateAccessibilityEvent_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event.</param>
        <summary>Called to process population of <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>s.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process population of <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>s. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTouchEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTouchEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The touch screen event.</param>
        <summary>Called to process touch screen events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process touch screen events.  At the very least your
 implementation must call
 <c><see cref="M:Android.Views.Window.SuperDispatchTouchEvent(Android.Views.MotionEvent)" /></c> to do the
 standard touch screen processing. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DispatchTrackballEvent">
      <MemberSignature Language="C#" Value="public virtual bool DispatchTrackballEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DispatchTrackballEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", "GetDispatchTrackballEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The trackball event.</param>
        <summary>Called to process trackball events.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called to process trackball events.  At the very least your
 implementation must call
 <c><see cref="M:Android.Views.Window.SuperDispatchTrackballEvent(Android.Views.MotionEvent)" /></c> to do the
 standard trackball processing. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#dispatchTrackballEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="DreamMetaData">
      <MemberSignature Language="C#" Value="public const string DreamMetaData;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DreamMetaData" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DREAM_META_DATA")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name under which a Dream publishes information about itself.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Name under which a Dream publishes information about itself.
 This meta-data must reference an XML resource containing
 a <c>&lt;<c><see cref="!:NoType:android/R$styleable;Href=../../../../reference/android/R.styleable.html#Dream" /></c>&gt;</c>
 tag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#DREAM_META_DATA" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="FindViewById">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FindViewById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FindViewById(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findViewById", "(I)Landroid/view/View;", "GetFindViewById_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Finds a view that was identified by the id attribute from the XML that
 was processed in <c><see cref="!:Android.Service.Dreams.DreamService.onCreate()" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Finds a view that was identified by the id attribute from the XML that
 was processed in <c><see cref="!:Android.Service.Dreams.DreamService.onCreate()" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Note: Requires a window, do not call before <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#findViewById(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Finish">
      <MemberSignature Language="C#" Value="public void Finish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Finish() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finish", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the dream and detaches from the window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops the dream and detaches from the window.
 </para>
          <para tool="javadoc-to-mdoc">
 When the dream ends, the system will be allowed to go to sleep fully unless there
 is a reason for it to be awake such as recent user activity or wake locks being held.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#finish()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Fullscreen">
      <MemberSignature Language="C#" Value="public virtual bool Fullscreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Fullscreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFullscreen", "()Z", "GetIsFullscreenHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFullscreen", "(Z)V", "GetSetFullscreen_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not this dream is in fullscreen mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#isFullscreen()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether or not this dream is in fullscreen mode. Defaults to false.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setFullscreen(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Controls <c><see cref="!:Android.Views.WindowManagerLayoutParams.FLAG_FULLSCREEN" /></c>
 on the dream's window.</para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.Service.Dreams.DreamService.Fullscreen" />
      </Docs>
    </Member>
    <Member MemberName="Interactive">
      <MemberSignature Language="C#" Value="public virtual bool Interactive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Interactive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInteractive", "()Z", "GetIsInteractiveHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setInteractive", "(Z)V", "GetSetInteractive_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not this dream is interactive.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#isInteractive()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether or not this dream is interactive.  Defaults to false.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setInteractive(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Marks this dream as interactive to receive input events.

 </para>
          <para tool="javadoc-to-mdoc">Non-interactive dreams (default) will dismiss on the first input event.</para>
          <para tool="javadoc-to-mdoc">Interactive dreams should call <c><see cref="M:Android.Service.Dreams.DreamService.Finish" /></c> to dismiss themselves.</para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.Service.Dreams.DreamService.Interactive" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeFinished">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeFinished (Android.Views.ActionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeFinished(class Android.Views.ActionMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActionModeFinished", "(Landroid/view/ActionMode;)V", "GetOnActionModeFinished_Landroid_view_ActionMode_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The mode that was just finished.
</param>
        <summary>Called when an action mode has been finished.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when an action mode has been finished. The appropriate mode callback
 method will have already been invoked. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onActionModeFinished(android.view.ActionMode)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnActionModeStarted">
      <MemberSignature Language="C#" Value="public virtual void OnActionModeStarted (Android.Views.ActionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActionModeStarted(class Android.Views.ActionMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onActionModeStarted", "(Landroid/view/ActionMode;)V", "GetOnActionModeStarted_Landroid_view_ActionMode_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Views.ActionMode" />
      </Parameters>
      <Docs>
        <param name="mode">The new mode that has just been started.
</param>
        <summary>Called when an action mode has been started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when an action mode has been started. The appropriate mode callback
 method will have already been invoked. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onActionModeStarted(android.view.ActionMode)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnAttachedToWindow">
      <MemberSignature Language="C#" Value="public virtual void OnAttachedToWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAttachedToWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAttachedToWindow", "()V", "GetOnAttachedToWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the window has been attached to the window manager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the window has been attached to the window manager.
 See <c><see cref="M:Android.Views.View.OnAttachedToWindow" /></c>
 for more information.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onAttachedToWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnBind">
      <MemberSignature Language="C#" Value="public override sealed Android.OS.IBinder OnBind (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.IBinder OnBind(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onBind", "(Landroid/content/Intent;)Landroid/os/IBinder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.IBinder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">The Intent that was used to bind to this service,
 as given to <c><see cref="M:Android.Content.Context.BindService(Android.Content.Intent,Android.Content.IServiceConnection,Android.Content.IServiceConnection)" /></c>.  Note that any extras that were included with
 the Intent at that point will <i>not</i> be seen here.</param>
        <summary>Return the communication channel to the service.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the communication channel to the service.  May return null if 
 clients can not bind to the service.  The returned
 <c><see cref="T:Android.OS.BinderConsts" /></c> is usually for a complex interface
 that has been <format type="text/html"><a href="http://developer.android.com/reference/../guide/components/aidl.html">described using
 aidl</a></format>.
 
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note that unlike other application components, calls on to the
 IBinder interface returned here may not happen on the main thread
 of the process</i>.  More information about the main thread can be found in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html">Processes and
 Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onBind(android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="public virtual void OnContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContentChanged", "()V", "GetOnContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This hook is called whenever the content view of the screen changes
 (due to a call to
 <c><see cref="M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)" /></c> or
 <c><see cref="M:Android.Views.Window.AddContentView(Android.Views.View,.LayoutParams)" /></c>).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the content view of the screen changes
 (due to a call to
 <c><see cref="M:Android.Views.Window.SetContentView(Android.Views.View,.LayoutParams)" /></c> or
 <c><see cref="M:Android.Views.Window.AddContentView(Android.Views.View,.LayoutParams)" /></c>).
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelMenu">
      <MemberSignature Language="C#" Value="public virtual bool OnCreatePanelMenu (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreatePanelMenu(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreatePanelMenu", "(ILandroid/view/Menu;)Z", "GetOnCreatePanelMenu_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel being created.</param>
        <param name="menu">The menu inside the panel.</param>
        <summary>Initialize the contents of the menu for panel 'featureId'.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Initialize the contents of the menu for panel 'featureId'.  This is
 called if onCreatePanelView() returns null, giving you a standard
 menu in which you can place your items.  It is only called once for
 the panel, the first time it is shown.

 </para>
          <para tool="javadoc-to-mdoc">You can safely hold on to <format type="text/html"><var>menu</var></format> (and any items created
 from it), making modifications to it as desired, until the next
 time onCreatePanelMenu() is called for this feature. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onCreatePanelMenu(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnCreatePanelView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreatePanelView (int featureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreatePanelView(int32 featureId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreatePanelView", "(I)Landroid/view/View;", "GetOnCreatePanelView_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="featureId">Which panel is being created.</param>
        <summary>Instantiate the view to display in the panel for 'featureId'.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Instantiate the view to display in the panel for 'featureId'.
 You can return null, in which case the default content (typically
 a menu) will be created for you. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onCreatePanelView(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnDetachedFromWindow">
      <MemberSignature Language="C#" Value="public virtual void OnDetachedFromWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDetachedFromWindow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDetachedFromWindow", "()V", "GetOnDetachedFromWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the window has been attached to the window manager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the window has been attached to the window manager.
 See <c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c>
 for more information.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDetachedFromWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnDreamingStarted">
      <MemberSignature Language="C#" Value="public virtual void OnDreamingStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDreamingStarted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDreamingStarted", "()V", "GetOnDreamingStartedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the dream's window has been created and is visible and animation may now begin.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the dream's window has been created and is visible and animation may now begin.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDreamingStarted()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnDreamingStopped">
      <MemberSignature Language="C#" Value="public virtual void OnDreamingStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDreamingStopped() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDreamingStopped", "()V", "GetOnDreamingStoppedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when this Dream is stopped, either by external request or by calling finish(),
 before the window has been removed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when this Dream is stopped, either by external request or by calling finish(),
 before the window has been removed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDreamingStopped()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuItemSelected">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuItemSelected (int featureId, Android.Views.IMenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuItemSelected(int32 featureId, class Android.Views.IMenuItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onMenuItemSelected", "(ILandroid/view/MenuItem;)Z", "GetOnMenuItemSelected_ILandroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="item" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="item">The menu item that was selected.</param>
        <summary>Called when a panel's menu item has been selected by the user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a panel's menu item has been selected by the user. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onMenuItemSelected(int, android.view.MenuItem)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnMenuOpened">
      <MemberSignature Language="C#" Value="public virtual bool OnMenuOpened (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMenuOpened(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onMenuOpened", "(ILandroid/view/Menu;)Z", "GetOnMenuOpened_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that the menu is in.</param>
        <param name="menu">The menu that is opened.</param>
        <summary>Called when a panel's menu is opened by the user.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a panel's menu is opened by the user. This may also be
 called when the menu is changing from one type to another (for
 example, from the icon menu to the expanded menu). </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onMenuOpened(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnPanelClosed">
      <MemberSignature Language="C#" Value="public virtual void OnPanelClosed (int featureId, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPanelClosed(int32 featureId, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPanelClosed", "(ILandroid/view/Menu;)V", "GetOnPanelClosed_ILandroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
            being displayed in the panel.
</param>
        <summary>Called when a panel is being closed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a panel is being closed.  If another logical subsequent
 panel is being opened (and this panel is being closed to make room for the subsequent
 panel), this method will NOT be called. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onPanelClosed(int, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnPreparePanel">
      <MemberSignature Language="C#" Value="public virtual bool OnPreparePanel (int featureId, Android.Views.View view, Android.Views.IMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPreparePanel(int32 featureId, class Android.Views.View view, class Android.Views.IMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPreparePanel", "(ILandroid/view/View;Landroid/view/Menu;)Z", "GetOnPreparePanel_ILandroid_view_View_Landroid_view_Menu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="featureId" Type="System.Int32" />
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="menu" Type="Android.Views.IMenu" />
      </Parameters>
      <Docs>
        <param name="featureId">The panel that is being displayed.</param>
        <param name="view">The View that was returned by onCreatePanelView().</param>
        <param name="menu">If onCreatePanelView() returned null, this is the Menu
             being displayed in the panel.</param>
        <summary>Prepare a panel to be displayed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare a panel to be displayed.  This is called right before the
 panel window is shown, every time it is shown. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onPreparePanel(int, android.view.View, android.view.Menu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnSearchRequested">
      <MemberSignature Language="C#" Value="public virtual bool OnSearchRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnSearchRequested() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onSearchRequested", "()Z", "GetOnSearchRequestedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the user signals the desire to start a search.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the user signals the desire to start a search. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onSearchRequested()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnWakeUp">
      <MemberSignature Language="C#" Value="public virtual void OnWakeUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWakeUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWakeUp", "()V", "GetOnWakeUpHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the dream is being asked to stop itself and wake.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the dream is being asked to stop itself and wake.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation simply calls <c><see cref="M:Android.Service.Dreams.DreamService.Finish" /></c> which ends the dream
 immediately.  Subclasses may override this function to perform a smooth exit
 transition then call <c><see cref="M:Android.Service.Dreams.DreamService.Finish" /></c> afterwards.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the dream will only be given a short period of time (currently about
 five seconds) to wake up.  If the dream does not finish itself in a timely manner
 then the system will forcibly finish it once the time allowance is up.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onWakeUp()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWindowAttributesChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowAttributesChanged (Android.Views.WindowManagerLayoutParams attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowAttributesChanged(class Android.Views.WindowManagerLayoutParams attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowAttributesChanged", "(Landroid/view/WindowManager$LayoutParams;)V", "GetOnWindowAttributesChanged_Landroid_view_WindowManager_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Android.Views.WindowManagerLayoutParams" />
      </Parameters>
      <Docs>
        <param name="attrs">To be added.</param>
        <summary>This is called whenever the current window attributes change.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This is called whenever the current window attributes change.

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onWindowAttributesChanged(android.view.WindowManager.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowFocusChanged">
      <MemberSignature Language="C#" Value="public virtual void OnWindowFocusChanged (bool hasFocus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnWindowFocusChanged(bool hasFocus) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowFocusChanged", "(Z)V", "GetOnWindowFocusChanged_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hasFocus" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hasFocus">Whether the window now has focus.
</param>
        <summary>This hook is called whenever the window focus changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This hook is called whenever the window focus changes.  See
 <c><see cref="M:Android.Views.View.OnWindowFocusChanged(System.Boolean)" /></c> for more information. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onWindowFocusChanged(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowStartingActionMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode OnWindowStartingActionMode (Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode OnWindowStartingActionMode(class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetOnWindowStartingActionMode_Landroid_view_ActionMode_Callback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="callback">Callback to control the lifecycle of this action mode</param>
        <summary>Called when an action mode is being started for this window.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when an action mode is being started for this window. Gives the
 callback an opportunity to handle the action mode in its own unique and
 beautiful way. If this method returns null the system can choose a way
 to present the mode or choose not to start the mode at all. This is equivalent
 to <c><see cref="!:NoType:android/view/Window$Callback;Href=../../../../reference/android/view/Window.Callback.html#onWindowStartingActionMode(android.view.ActionMode.Callback,int)" /></c>
 with type <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onWindowStartingActionMode(android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ScreenBright">
      <MemberSignature Language="C#" Value="public virtual bool ScreenBright { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScreenBright" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isScreenBright", "()Z", "GetIsScreenBrightHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setScreenBright", "(Z)V", "GetSetScreenBright_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether or not this dream keeps the screen bright while dreaming.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#isScreenBright()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether or not this dream keeps the screen bright while dreaming.
 Defaults to false, allowing the screen to dim if necessary.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setScreenBright(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Marks this dream as keeping the screen bright while dreaming.</para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.Service.Dreams.DreamService.ScreenBright" />
      </Docs>
    </Member>
    <Member MemberName="ServiceInterface">
      <MemberSignature Language="C#" Value="public const string ServiceInterface;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ServiceInterface" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SERVICE_INTERFACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <c><see cref="T:Android.Content.Intent" /></c> that must be declared as handled by the service.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The <c><see cref="T:Android.Content.Intent" /></c> that must be declared as handled by the service.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#SERVICE_INTERFACE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(Landroid/view/View;)V", "GetSetContentView_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary tool="true">Sets a view to be the content view for this Dream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a view to be the content view for this Dream.
 Behaves similarly to <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View)" /></c> in an activity,
 including using <c><see cref="!:NoType:android/view/ViewGroup$LayoutParams;Href=../../../../reference/android/view/ViewGroup.LayoutParams.html#MATCH_PARENT" /></c> as the layout height and width of the view.

 </para>
          <para tool="javadoc-to-mdoc">Note: This requires a window, so you should usually call it during
 <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c> and never earlier (you <i>cannot</i> call it
 during <c><see cref="!:Android.Service.Dreams.DreamService.onCreate()" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setContentView(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(System.Int32)" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (int layoutResID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(int32 layoutResID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(I)V", "GetSetContentView_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutResID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="layoutResID">Resource ID to be inflated.</param>
        <summary>Inflates a layout resource and set it to be the content view for this Dream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Inflates a layout resource and set it to be the content view for this Dream.
 Behaves similarly to <c><see cref="M:Android.App.Activity.SetContentView(System.Int32)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Note: Requires a window, do not call before <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setContentView(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View, .LayoutParams)" />
      </Docs>
    </Member>
    <Member MemberName="SetContentView">
      <MemberSignature Language="C#" Value="public virtual void SetContentView (Android.Views.View view, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentView(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setContentView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetSetContentView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">The desired content to display.</param>
        <param name="params">Layout parameters for the view.</param>
        <summary>Sets a view to be the content view for this Dream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a view to be the content view for this Dream.
 Behaves similarly to
 <c><see cref="M:Android.App.Activity.SetContentView(Android.Views.View,.LayoutParams)" /></c>
 in an activity.

 </para>
          <para tool="javadoc-to-mdoc">Note: This requires a window, so you should usually call it during
 <c><see cref="M:Android.Service.Dreams.DreamService.OnAttachedToWindow" /></c> and never earlier (you <i>cannot</i> call it
 during <c><see cref="!:Android.Service.Dreams.DreamService.onCreate()" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setContentView(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(Android.Views.View)" />
        <altmember cref="M:Android.Service.Dreams.DreamService.SetContentView(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WakeUp">
      <MemberSignature Language="C#" Value="public void WakeUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WakeUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wakeUp", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wakes the dream up gently.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Wakes the dream up gently.
 </para>
          <para tool="javadoc-to-mdoc">
 Calls <c><see cref="M:Android.Service.Dreams.DreamService.OnWakeUp" /></c> to give the dream a chance to perform an exit transition.
 When the transition is over, the dream should call <c><see cref="M:Android.Service.Dreams.DreamService.Finish" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#wakeUp()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Window Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Window Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindow", "()Landroid/view/Window;", "GetGetWindowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the current <c><see cref="T:Android.Views.Window" /></c> for the dream.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieves the current <c><see cref="T:Android.Views.Window" /></c> for the dream.
 Behaves similarly to <c><see cref="P:Android.App.Activity.Window" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#getWindow()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="WindowManager">
      <MemberSignature Language="C#" Value="public virtual Android.Views.IWindowManager WindowManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IWindowManager WindowManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWindowManager", "()Landroid/view/WindowManager;", "GetGetWindowManagerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IWindowManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the current <c><see cref="T:Android.Views.IWindowManager" /></c> for the dream.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieves the current <c><see cref="T:Android.Views.IWindowManager" /></c> for the dream.
 Behaves similarly to <c><see cref="P:Android.App.Activity.WindowManager" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/service/dreams/DreamService.html#getWindowManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
  </Members>
</Type>
