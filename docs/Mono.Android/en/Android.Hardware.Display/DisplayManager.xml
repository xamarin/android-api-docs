<Type Name="DisplayManager" FullName="Android.Hardware.Display.DisplayManager">
  <TypeSignature Language="C#" Value="public sealed class DisplayManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DisplayManager extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Hardware.Display.DisplayManager" />
  <TypeSignature Language="F#" Value="type DisplayManager = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/hardware/display/DisplayManager", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/hardware/display/DisplayManager", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="17">
    <summary>Manages the properties of attached displays.</summary>
    <remarks>
      <para>Manages the properties of attached displays.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 17" />
  </Docs>
  <Members>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay? CreateVirtualDisplay (Android.Hardware.Display.VirtualDisplayConfig config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(class Android.Hardware.Display.VirtualDisplayConfig config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(Android.Hardware.Display.VirtualDisplayConfig)" />
      <MemberSignature Language="F#" Value="member this.CreateVirtualDisplay : Android.Hardware.Display.VirtualDisplayConfig -&gt; Android.Hardware.Display.VirtualDisplay" Usage="displayManager.CreateVirtualDisplay config" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createVirtualDisplay", "(Landroid/hardware/display/VirtualDisplayConfig;)Landroid/hardware/display/VirtualDisplay;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createVirtualDisplay", "(Landroid/hardware/display/VirtualDisplayConfig;)Landroid/hardware/display/VirtualDisplay;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="Android.Hardware.Display.VirtualDisplayConfig" />
      </Parameters>
      <Docs>
        <param name="config">To be added.</param>
        <summary>Creates a virtual display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Creates a virtual display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#createVirtualDisplay(android.hardware.display.VirtualDisplayConfig)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.createVirtualDisplay(android.hardware.display.VirtualDisplayConfig)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay? CreateVirtualDisplay (Android.Hardware.Display.VirtualDisplayConfig config, Android.OS.Handler? handler, Android.Hardware.Display.VirtualDisplay.Callback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(class Android.Hardware.Display.VirtualDisplayConfig config, class Android.OS.Handler handler, class Android.Hardware.Display.VirtualDisplay/Callback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(Android.Hardware.Display.VirtualDisplayConfig,Android.OS.Handler,Android.Hardware.Display.VirtualDisplay.Callback)" />
      <MemberSignature Language="F#" Value="member this.CreateVirtualDisplay : Android.Hardware.Display.VirtualDisplayConfig * Android.OS.Handler * Android.Hardware.Display.VirtualDisplay.Callback -&gt; Android.Hardware.Display.VirtualDisplay" Usage="displayManager.CreateVirtualDisplay (config, handler, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createVirtualDisplay", "(Landroid/hardware/display/VirtualDisplayConfig;Landroid/os/Handler;Landroid/hardware/display/VirtualDisplay$Callback;)Landroid/hardware/display/VirtualDisplay;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createVirtualDisplay", "(Landroid/hardware/display/VirtualDisplayConfig;Landroid/os/Handler;Landroid/hardware/display/VirtualDisplay$Callback;)Landroid/hardware/display/VirtualDisplay;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="Android.Hardware.Display.VirtualDisplayConfig" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
        <Parameter Name="callback" Type="Android.Hardware.Display.VirtualDisplay+Callback" />
      </Parameters>
      <Docs>
        <param name="config">To be added.</param>
        <param name="handler">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay? CreateVirtualDisplay (string name, int width, int height, int densityDpi, Android.Views.Surface? surface, Android.Hardware.Display.VirtualDisplayFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(string name, int32 width, int32 height, int32 densityDpi, class Android.Views.Surface surface, valuetype Android.Hardware.Display.VirtualDisplayFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String,System.Int32,System.Int32,System.Int32,Android.Views.Surface,Android.Hardware.Display.VirtualDisplayFlags)" />
      <MemberSignature Language="F#" Value="member this.CreateVirtualDisplay : string * int * int * int * Android.Views.Surface * Android.Hardware.Display.VirtualDisplayFlags -&gt; Android.Hardware.Display.VirtualDisplay" Usage="displayManager.CreateVirtualDisplay (name, width, height, densityDpi, surface, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;I)Landroid/hardware/display/VirtualDisplay;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;I)Landroid/hardware/display/VirtualDisplay;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="densityDpi" Type="System.Int32" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="flags" Type="Android.Hardware.Display.VirtualDisplayFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="densityDpi">To be added.</param>
        <param name="surface">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Creates a virtual display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Creates a virtual display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#createVirtualDisplay(java.lang.String,%20int,%20int,%20int,%20android.view.Surface,%20int)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay? CreateVirtualDisplay (string name, int width, int height, int densityDpi, Android.Views.Surface? surface, Android.Hardware.Display.VirtualDisplayFlags flags, Android.Hardware.Display.VirtualDisplay.Callback? callback, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(string name, int32 width, int32 height, int32 densityDpi, class Android.Views.Surface surface, valuetype Android.Hardware.Display.VirtualDisplayFlags flags, class Android.Hardware.Display.VirtualDisplay/Callback callback, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String,System.Int32,System.Int32,System.Int32,Android.Views.Surface,Android.Hardware.Display.VirtualDisplayFlags,Android.Hardware.Display.VirtualDisplay.Callback,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.CreateVirtualDisplay : string * int * int * int * Android.Views.Surface * Android.Hardware.Display.VirtualDisplayFlags * Android.Hardware.Display.VirtualDisplay.Callback * Android.OS.Handler -&gt; Android.Hardware.Display.VirtualDisplay" Usage="displayManager.CreateVirtualDisplay (name, width, height, densityDpi, surface, flags, callback, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;ILandroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;ILandroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="densityDpi" Type="System.Int32" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="flags" Type="Android.Hardware.Display.VirtualDisplayFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="callback" Type="Android.Hardware.Display.VirtualDisplay+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="name">The name of the virtual display, must be non-empty.</param>
        <param name="width">The width of the virtual display in pixels, must be greater than 0.</param>
        <param name="height">The height of the virtual display in pixels, must be greater than 0.</param>
        <param name="densityDpi">The density of the virtual display in dpi, must be greater than 0.</param>
        <param name="surface">The surface to which the content of the virtual display should
 be rendered, or null if there is none initially.</param>
        <param name="flags">A combination of virtual display flags:
 <see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" />, <see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPresentation" />,
 <see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagSecure" />, <see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" />,
 or <see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" />.</param>
        <param name="callback">Callback to call when the state of the <see cref="T:Android.Hardware.Display.VirtualDisplay" /> changes</param>
        <param name="handler">The handler on which the listener should be invoked, or null
 if the listener should be invoked on the calling thread's looper.</param>
        <summary>Creates a virtual display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <exception cref="T:Java.Lang.SecurityException">if the caller does not have permission to create
 a virtual display with the specified flags.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DisplayCategoryPresentation">
      <MemberSignature Language="C#" Value="public const string DisplayCategoryPresentation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DisplayCategoryPresentation" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
      <MemberSignature Language="F#" Value="val mutable DisplayCategoryPresentation : string" Usage="Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DISPLAY_CATEGORY_PRESENTATION")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DISPLAY_CATEGORY_PRESENTATION")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Display category: Presentation displays.</summary>
        <remarks>
          <para>Display category: Presentation displays.</para>
          <para>This category can be used to identify secondary displays that are suitable for
            use as presentation displays such as external or wireless displays.  Applications
            may automatically project their content to presentation displays to provide
            richer second screen experiences.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#DISPLAY_CATEGORY_PRESENTATION" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.DISPLAY_CATEGORY_PRESENTATION</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="T:Android.App.Presentation" />
        <altmember cref="F:Android.Views.Display.FlagPresentation" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.GetDisplays(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplay">
      <MemberSignature Language="C#" Value="public Android.Views.Display? GetDisplay (int displayId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display GetDisplay(int32 displayId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.GetDisplay(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetDisplay : int -&gt; Android.Views.Display" Usage="displayManager.GetDisplay displayId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDisplay", "(I)Landroid/view/Display;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDisplay", "(I)Landroid/view/Display;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="displayId">The logical display id.</param>
        <summary>Gets information about a logical display.</summary>
        <returns>The display object, or null if there is no valid display with the given id.</returns>
        <remarks>
          <para>Gets information about a logical display.</para>
          <para>The display metrics may be adjusted to provide compatibility
            for legacy applications.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#getDisplay(int)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.getDisplay(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplays">
      <MemberSignature Language="C#" Value="public Android.Views.Display[]? GetDisplays ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display[] GetDisplays() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.GetDisplays" />
      <MemberSignature Language="F#" Value="member this.GetDisplays : unit -&gt; Android.Views.Display[]" Usage="displayManager.GetDisplays " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDisplays", "()[Landroid/view/Display;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDisplays", "()[Landroid/view/Display;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets all currently valid logical displays.</summary>
        <returns>An array containing all displays.</returns>
        <remarks>
          <para>Gets all currently valid logical displays.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#getDisplays()" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.getDisplays()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplays">
      <MemberSignature Language="C#" Value="public Android.Views.Display[]? GetDisplays (string? category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display[] GetDisplays(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.GetDisplays(System.String)" />
      <MemberSignature Language="F#" Value="member this.GetDisplays : string -&gt; Android.Views.Display[]" Usage="displayManager.GetDisplays category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getDisplays", "(Ljava/lang/String;)[Landroid/view/Display;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getDisplays", "(Ljava/lang/String;)[Landroid/view/Display;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">The requested display category or null to return all displays.</param>
        <summary>Gets all currently valid logical displays of the specified category.</summary>
        <returns>An array containing all displays sorted by order of preference.</returns>
        <remarks>
          <para>Gets all currently valid logical displays of the specified category.</para>
          <para>When there are multiple displays in a category the returned displays are sorted
            of preference.  For example, if the requested category is
            <c>#DISPLAY_CATEGORY_PRESENTATION</c> and there are multiple presentation displays
            then the displays are sorted so that the first display in the returned array
            is the most preferred presentation display.  The application may simply
            use the first display or allow the user to choose.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#getDisplays(java.lang.String)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.getDisplays(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
      </Docs>
    </Member>
    <Member MemberName="HdrConversionMode">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.HdrConversionMode HdrConversionMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Hardware.Display.HdrConversionMode HdrConversionMode" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Display.DisplayManager.HdrConversionMode" />
      <MemberSignature Language="F#" Value="member this.HdrConversionMode : Android.Hardware.Display.HdrConversionMode" Usage="Android.Hardware.Display.DisplayManager.HdrConversionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getHdrConversionMode", "()Landroid/hardware/display/HdrConversionMode;", "", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getHdrConversionMode", "()Landroid/hardware/display/HdrConversionMode;", "", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.HdrConversionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>HdrConversionMode</c> of the device, which is set by the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the <c>HdrConversionMode</c> of the device, which is set by the user.
            
            When <c>HdrConversionMode#getConversionMode</c> is
            <c>HdrConversionMode#HDR_CONVERSION_SYSTEM</c>, the
            <c>HdrConversionMode#getPreferredHdrOutputType</c> depicts the systemPreferredHdrOutputType.
            The HDR conversion mode chosen by user which considers the app override is returned. Apps can
            override HDR conversion using
            <c>android.view.WindowManager.LayoutParams#setHdrConversionEnabled(boolean)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#getHdrConversionMode()" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.getHdrConversionMode()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Display.DisplayManager.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Hardware.Display.DisplayManager.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchContentFramerateAlways">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.MatchContentFramerate MatchContentFramerateAlways = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.MatchContentFramerate MatchContentFramerateAlways = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.MatchContentFramerateAlways" />
      <MemberSignature Language="F#" Value="val mutable MatchContentFramerateAlways : Android.Hardware.Display.MatchContentFramerate" Usage="Android.Hardware.Display.DisplayManager.MatchContentFramerateAlways" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_ALWAYS", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_ALWAYS", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.MatchContentFramerate</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Refresh rate switches between all refresh rates are allowed even if they have visual
            interruptions for the user.</summary>
        <remarks>
          <para>Refresh rate switches between all refresh rates are allowed even if they have visual
            interruptions for the user.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#MATCH_CONTENT_FRAMERATE_ALWAYS" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.MATCH_CONTENT_FRAMERATE_ALWAYS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchContentFramerateNever">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.MatchContentFramerate MatchContentFramerateNever = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.MatchContentFramerate MatchContentFramerateNever = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.MatchContentFramerateNever" />
      <MemberSignature Language="F#" Value="val mutable MatchContentFramerateNever : Android.Hardware.Display.MatchContentFramerate" Usage="Android.Hardware.Display.DisplayManager.MatchContentFramerateNever" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_NEVER", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_NEVER", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.MatchContentFramerate</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>No mode switching is allowed.</summary>
        <remarks>
          <para>No mode switching is allowed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#MATCH_CONTENT_FRAMERATE_NEVER" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.MATCH_CONTENT_FRAMERATE_NEVER</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchContentFramerateSeamlesssOnly">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.MatchContentFramerate MatchContentFramerateSeamlesssOnly = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.MatchContentFramerate MatchContentFramerateSeamlesssOnly = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.MatchContentFramerateSeamlesssOnly" />
      <MemberSignature Language="F#" Value="val mutable MatchContentFramerateSeamlesssOnly : Android.Hardware.Display.MatchContentFramerate" Usage="Android.Hardware.Display.DisplayManager.MatchContentFramerateSeamlesssOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_SEAMLESSS_ONLY", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_SEAMLESSS_ONLY", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.MatchContentFramerate</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Only refresh rate switches without visual interruptions are allowed.</summary>
        <remarks>
          <para>Only refresh rate switches without visual interruptions are allowed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#MATCH_CONTENT_FRAMERATE_SEAMLESSS_ONLY" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.MATCH_CONTENT_FRAMERATE_SEAMLESSS_ONLY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchContentFramerateUnknown">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.MatchContentFramerate MatchContentFramerateUnknown = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.MatchContentFramerate MatchContentFramerateUnknown = (-1)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.MatchContentFramerateUnknown" />
      <MemberSignature Language="F#" Value="val mutable MatchContentFramerateUnknown : Android.Hardware.Display.MatchContentFramerate" Usage="Android.Hardware.Display.DisplayManager.MatchContentFramerateUnknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_UNKNOWN", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MATCH_CONTENT_FRAMERATE_UNKNOWN", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.MatchContentFramerate enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.MatchContentFramerate</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Match content frame rate user preference is unknown.</summary>
        <remarks>
          <para>Match content frame rate user preference is unknown.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#MATCH_CONTENT_FRAMERATE_UNKNOWN" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.MATCH_CONTENT_FRAMERATE_UNKNOWN</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchContentFrameRateUserPreference">
      <MemberSignature Language="C#" Value="public int MatchContentFrameRateUserPreference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MatchContentFrameRateUserPreference" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Display.DisplayManager.MatchContentFrameRateUserPreference" />
      <MemberSignature Language="F#" Value="member this.MatchContentFrameRateUserPreference : int" Usage="Android.Hardware.Display.DisplayManager.MatchContentFrameRateUserPreference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMatchContentFrameRateUserPreference", "()I", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMatchContentFrameRateUserPreference", "()I", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the user preference for "Match content frame rate".</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the user preference for "Match content frame rate".</para>
          <para>Never: Even if the app requests it, the device will never try to match its output to the
            original frame rate of the content.</para>
          <para>Seamless: If the app requests it, the device will match its output to the original frame
            rate of the content, ONLY if the display can transition seamlessly.</para>
          <para>Always: If the app requests it, the device will match its output to the original
            frame rate of the content. This may cause the screen to go blank for a
            second when exiting or entering a video playback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#getMatchContentFrameRateUserPreference()" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.getMatchContentFrameRateUserPreference()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterDisplayListener">
      <MemberSignature Language="C#" Value="public void RegisterDisplayListener (Android.Hardware.Display.DisplayManager.IDisplayListener? listener, Android.OS.Handler? handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDisplayListener(class Android.Hardware.Display.DisplayManager/IDisplayListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.RegisterDisplayListener(Android.Hardware.Display.DisplayManager.IDisplayListener,Android.OS.Handler)" />
      <MemberSignature Language="F#" Value="member this.RegisterDisplayListener : Android.Hardware.Display.DisplayManager.IDisplayListener * Android.OS.Handler -&gt; unit" Usage="displayManager.RegisterDisplayListener (listener, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("registerDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Display.DisplayManager+IDisplayListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to register.</param>
        <param name="handler">The handler on which the listener should be invoked, or null
            if the listener should be invoked on the calling thread's looper.</param>
        <summary>Registers a display listener to receive notifications about when
            displays are added, removed or changed.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#registerDisplayListener(android.hardware.display.DisplayListener,%20android.os.Handler)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.registerDisplayListener(android.hardware.display.DisplayListener, android.os.Handler)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.UnregisterDisplayListener(.IDisplayListener)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Display.DisplayManager.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Hardware.Display.DisplayManager.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Hardware.Display.DisplayManager.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Hardware.Display.DisplayManager.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterDisplayListener">
      <MemberSignature Language="C#" Value="public void UnregisterDisplayListener (Android.Hardware.Display.DisplayManager.IDisplayListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterDisplayListener(class Android.Hardware.Display.DisplayManager/IDisplayListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Hardware.Display.DisplayManager.UnregisterDisplayListener(Android.Hardware.Display.DisplayManager.IDisplayListener)" />
      <MemberSignature Language="F#" Value="member this.UnregisterDisplayListener : Android.Hardware.Display.DisplayManager.IDisplayListener -&gt; unit" Usage="displayManager.UnregisterDisplayListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Display.DisplayManager+IDisplayListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to unregister.</param>
        <summary>Unregisters a display listener.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#unregisterDisplayListener(android.hardware.display.DisplayListener)" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.unregisterDisplayListener(android.hardware.display.DisplayListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.RegisterDisplayListener(.IDisplayListener, Android.OS.Handler)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagAutoMirror">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagAutoMirror = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagAutoMirror = (16)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" />
      <MemberSignature Language="F#" Value="val mutable VirtualDisplayFlagAutoMirror : Android.Hardware.Display.VirtualDisplayFlags" Usage="Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Virtual display flag: Allows content to be mirrored on private displays when no content is
            being shown.</summary>
        <remarks>
          <para>Virtual display flag: Allows content to be mirrored on private displays when no content is
            being shown.</para>
          <para>This flag is mutually exclusive with <c>#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</c>.
            If both flags are specified then the own-content only behavior will be applied.</para>
          <para>The behavior of this flag is implied whenever <c>#VIRTUAL_DISPLAY_FLAG_PUBLIC</c> is set
            and <c>#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</c> has not been set.   This flag is only
            required to override the default behavior when creating a private display.</para>
          <para>Creating an auto-mirroing virtual display requires the CAPTURE_VIDEO_OUTPUT
            or CAPTURE_SECURE_VIDEO_OUTPUT permission.
            These permissions are reserved for use by system components and are not available to
            third-party applications.
            
            Alternatively, an appropriate <c>MediaProjection</c> may be used to create an
            auto-mirroring virtual display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagOwnContentOnly">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagOwnContentOnly = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagOwnContentOnly = (8)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" />
      <MemberSignature Language="F#" Value="val mutable VirtualDisplayFlagOwnContentOnly : Android.Hardware.Display.VirtualDisplayFlags" Usage="Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Virtual display flag: Only show this display's own content; do not mirror
            the content of another display.</summary>
        <remarks>
          <para>Virtual display flag: Only show this display's own content; do not mirror
            the content of another display.</para>
          <para>This flag is used in conjunction with <c>#VIRTUAL_DISPLAY_FLAG_PUBLIC</c>.
            Ordinarily public virtual displays will automatically mirror the content of the
            default display if they have no windows of their own.  When this flag is
            specified, the virtual display will only ever show its own content and
            will be blanked instead if it has no windows.</para>
          <para>This flag is mutually exclusive with <c>#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</c>.  If both
            flags are specified then the own-content only behavior will be applied.</para>
          <para>This behavior of this flag is implied whenever neither <c>#VIRTUAL_DISPLAY_FLAG_PUBLIC</c>
            nor <c>#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</c> have been set.  This flag is only required to
            override the default behavior when creating a public display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagPresentation">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPresentation = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPresentation = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPresentation" />
      <MemberSignature Language="F#" Value="val mutable VirtualDisplayFlagPresentation : Android.Hardware.Display.VirtualDisplayFlags" Usage="Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPresentation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PRESENTATION")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PRESENTATION")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a presentation display.</summary>
        <remarks>
          <para>Virtual display flag: Create a presentation display.
            
            &lt;h3&gt;Presentation virtual displays&lt;/h3&gt;</para>
          <para>When this flag is set, the virtual display is registered as a presentation
            display in the <c>#DISPLAY_CATEGORY_PRESENTATION presentation display category</c>.
            Applications may automatically project their content to presentation displays
            to provide richer second screen experiences.</para>
          <para>&lt;h3&gt;Non-presentation virtual displays&lt;/h3&gt;</para>
          <para>When this flag is not set, the virtual display is not registered as a presentation
            display.  Applications can still project their content on the display but they
            will typically not do so automatically.  This option is appropriate for
            more special-purpose displays.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_PRESENTATION" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="T:Android.App.Presentation" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
        <altmember cref="F:Android.Views.Display.FlagPresentation" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagPublic">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPublic = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPublic = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" />
      <MemberSignature Language="F#" Value="val mutable VirtualDisplayFlagPublic : Android.Hardware.Display.VirtualDisplayFlags" Usage="Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PUBLIC")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PUBLIC")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a public display.</summary>
        <remarks>
          <para>Virtual display flag: Create a public display.
            
            &lt;h3&gt;Public virtual displays&lt;/h3&gt;</para>
          <para>When this flag is set, the virtual display is public.</para>
          <para>A public virtual display behaves just like most any other display that is connected
            to the system such as an external or wireless display.  Applications can open
            windows on the display and the system may mirror the contents of other displays
            onto it.</para>
          <para>Creating a public virtual display that isn't restricted to own-content only implicitly
            creates an auto-mirroring display. See <c>#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</c> for
            restrictions on who is allowed to create an auto-mirroring display.</para>
          <para>&lt;h3&gt;Private virtual displays&lt;/h3&gt;</para>
          <para>When this flag is not set, the virtual display is private as defined by the
            <c>Display#FLAG_PRIVATE</c> display flag.</para>
          <para>A private virtual display belongs to the application that created it.  Only the a owner of a
            private virtual display and the apps that are already on that display are allowed to place
            windows upon it.  The private virtual display also does not participate in display mirroring:
            it will neither receive mirrored content from another display nor allow its own content to be
            mirrored elsewhere.  More precisely, the only processes that are allowed to enumerate or
            interact with the private display are those that have the same UID as the application that
            originally created the private virtual display or as the activities that are already on that
            display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagSecure">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagSecure = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagSecure = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagSecure" />
      <MemberSignature Language="F#" Value="val mutable VirtualDisplayFlagSecure : Android.Hardware.Display.VirtualDisplayFlags" Usage="Android.Hardware.Display.DisplayManager.VirtualDisplayFlagSecure" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_SECURE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_SECURE")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a secure display.</summary>
        <remarks>
          <para>Virtual display flag: Create a secure display.
            
            &lt;h3&gt;Secure virtual displays&lt;/h3&gt;</para>
          <para>When this flag is set, the virtual display is considered secure as defined
            by the <c>Display#FLAG_SECURE</c> display flag.  The caller promises to take
            reasonable measures, such as over-the-air encryption, to prevent the contents
            of the display from being intercepted or recorded on a persistent medium.</para>
          <para>Creating a secure virtual display requires the CAPTURE_SECURE_VIDEO_OUTPUT permission.
            This permission is reserved for use by system components and is not available to
            third-party applications.</para>
          <para>&lt;h3&gt;Non-secure virtual displays&lt;/h3&gt;</para>
          <para>When this flag is not set, the virtual display is considered unsecure.
            The content of secure windows will be blanked if shown on this display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_SECURE" title="Reference documentation">Java documentation for <code>android.hardware.display.DisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="F:Android.Views.Display.FlagSecure" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
