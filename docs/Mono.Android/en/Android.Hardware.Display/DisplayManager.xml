<Type Name="DisplayManager" FullName="Android.Hardware.Display.DisplayManager">
  <TypeSignature Language="C#" Value="public sealed class DisplayManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DisplayManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/display/DisplayManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="17">
    <summary>Manages the properties of attached displays.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Manages the properties of attached displays.
 </para>
      <para tool="javadoc-to-mdoc">
 Get an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c> with the argument
 <c><see cref="F:Android.Content.Context.DisplayService" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 17" />
  </Docs>
  <Members>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay (string name, int width, int height, int densityDpi, Android.Views.Surface surface, Android.Hardware.Display.VirtualDisplayFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(string name, int32 width, int32 height, int32 densityDpi, class Android.Views.Surface surface, valuetype Android.Hardware.Display.VirtualDisplayFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;I)Landroid/hardware/display/VirtualDisplay;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="densityDpi" Type="System.Int32" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="flags" Type="Android.Hardware.Display.VirtualDisplayFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="densityDpi">To be added.</param>
        <param name="surface">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>Creates a virtual display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a virtual display.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay (string name, int width, int height, int densityDpi, Android.Views.Surface surface, Android.Hardware.Display.VirtualDisplayFlags flags, Android.Hardware.Display.VirtualDisplay.Callback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(string name, int32 width, int32 height, int32 densityDpi, class Android.Views.Surface surface, valuetype Android.Hardware.Display.VirtualDisplayFlags flags, class Android.Hardware.Display.VirtualDisplay/Callback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIILandroid/view/Surface;ILandroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="densityDpi" Type="System.Int32" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="flags" Type="Android.Hardware.Display.VirtualDisplayFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="callback" Type="Android.Hardware.Display.VirtualDisplay+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="name">The name of the virtual display, must be non-empty.</param>
        <param name="width">The width of the virtual display in pixels, must be greater than 0.</param>
        <param name="height">The height of the virtual display in pixels, must be greater than 0.</param>
        <param name="densityDpi">The density of the virtual display in dpi, must be greater than 0.</param>
        <param name="surface">The surface to which the content of the virtual display should
 be rendered, or null if there is none initially.</param>
        <param name="flags">A combination of virtual display flags:
 <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" /></c>, <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPresentation" /></c>,
 <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagSecure" /></c>, <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" /></c>,
 or <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" /></c>.</param>
        <param name="callback">Callback to call when the state of the <c><see cref="T:Android.Hardware.Display.VirtualDisplay" /></c> changes</param>
        <param name="handler">The handler on which the listener should be invoked, or null
 if the listener should be invoked on the calling thread's looper.</param>
        <summary>Creates a virtual display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a virtual display.
 </para>
          <para tool="javadoc-to-mdoc">
 The content of a virtual display is rendered to a <c><see cref="T:Android.Views.Surface" /></c> provided
 by the application.
 </para>
          <para tool="javadoc-to-mdoc">
 The virtual display should be <c><see cref="M:Android.Hardware.Display.VirtualDisplay.Release" /></c>
 when no longer needed.  Because a virtual display renders to a surface
 provided by the application, it will be released automatically when the
 process terminates and all remaining windows on it will be forcibly removed.
 </para>
          <para tool="javadoc-to-mdoc">
 The behavior of the virtual display depends on the flags that are provided
 to this method.  By default, virtual displays are created to be private,
 non-presentation and unsecure.  Permissions may be required to use certain flags.
 </para>
          <para tool="javadoc-to-mdoc">
 As of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../../reference/android/os/Build.VERSION_CODES.html#KITKAT_WATCH" /></c>, the surface may
 be attached or detached dynamically using <c><see cref="P:Android.Hardware.Display.VirtualDisplay.Surface" /></c>.
 Previously, the surface had to be non-null when <c><see cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></c>
 was called and could not be changed for the lifetime of the display.
 </para>
          <para tool="javadoc-to-mdoc">
 Detaching the surface that backs a virtual display has a similar effect to
 turning off the screen.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int, android.hardware.display.VirtualDisplay.Callback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.SecurityException">if the caller does not have permission to create
 a virtual display with the specified flags.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DisplayCategoryPresentation">
      <MemberSignature Language="C#" Value="public const string DisplayCategoryPresentation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DisplayCategoryPresentation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DISPLAY_CATEGORY_PRESENTATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Display category: Presentation displays.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Display category: Presentation displays.
 </para>
          <para tool="javadoc-to-mdoc">
 This category can be used to identify secondary displays that are suitable for
 use as presentation displays such as HDMI or Wireless displays.  Applications
 may automatically project their content to presentation displays to provide
 richer second screen experiences.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#DISPLAY_CATEGORY_PRESENTATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="T:Android.App.Presentation" />
        <altmember cref="F:Android.Views.Display.FlagPresentation" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.GetDisplays(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplay">
      <MemberSignature Language="C#" Value="public Android.Views.Display GetDisplay (int displayId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display GetDisplay(int32 displayId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDisplay", "(I)Landroid/view/Display;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="displayId">The logical display id.</param>
        <summary>Gets information about a logical display.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets information about a logical display.

 The display metrics may be adjusted to provide compatibility
 for legacy applications.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#getDisplay(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplays">
      <MemberSignature Language="C#" Value="public Android.Views.Display[] GetDisplays ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display[] GetDisplays() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDisplays", "()[Landroid/view/Display;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Gets all currently valid logical displays.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets all currently valid logical displays.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#getDisplays()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplays">
      <MemberSignature Language="C#" Value="public Android.Views.Display[] GetDisplays (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Display[] GetDisplays(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDisplays", "(Ljava/lang/String;)[Landroid/view/Display;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">The requested display category or null to return all displays.</param>
        <summary>Gets all currently valid logical displays of the specified category.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets all currently valid logical displays of the specified category.
 </para>
          <para tool="javadoc-to-mdoc">
 When there are multiple displays in a category the returned displays are sorted
 of preference.  For example, if the requested category is
 <c><see cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" /></c> and there are multiple presentation displays
 then the displays are sorted so that the first display in the returned array
 is the most preferred presentation display.  The application may simply
 use the first display or allow the user to choose.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#getDisplays(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDisplayListener">
      <MemberSignature Language="C#" Value="public void RegisterDisplayListener (Android.Hardware.Display.DisplayManager.IDisplayListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDisplayListener(class Android.Hardware.Display.DisplayManager/IDisplayListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Display.DisplayManager+IDisplayListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to register.</param>
        <param name="handler">The handler on which the listener should be invoked, or null
 if the listener should be invoked on the calling thread's looper.</param>
        <summary>Registers an display listener to receive notifications about when
 displays are added, removed or changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers an display listener to receive notifications about when
 displays are added, removed or changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.UnregisterDisplayListener(.IDisplayListener)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterDisplayListener">
      <MemberSignature Language="C#" Value="public void UnregisterDisplayListener (Android.Hardware.Display.DisplayManager.IDisplayListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterDisplayListener(class Android.Hardware.Display.DisplayManager/IDisplayListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterDisplayListener", "(Landroid/hardware/display/DisplayManager$DisplayListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.Display.DisplayManager+IDisplayListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to unregister.</param>
        <summary>Unregisters a display listener.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a display listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.RegisterDisplayListener(.IDisplayListener, Android.OS.Handler)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagAutoMirror">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagAutoMirror = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagAutoMirror = (16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>Virtual display flag: Allows content to be mirrored on private displays when no content is
 being shown.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Virtual display flag: Allows content to be mirrored on private displays when no content is
 being shown.

 </para>
          <para tool="javadoc-to-mdoc">
 This flag is mutually exclusive with <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" /></c>.
 If both flags are specified then the own-content only behavior will be applied.
 </para>
          <para tool="javadoc-to-mdoc">
 The behavior of this flag is implied whenever <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" /></c> is set
 and <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" /></c> has not been set.   This flag is only
 required to override the default behavior when creating a private display.
 </para>
          <para tool="javadoc-to-mdoc">
 Creating an auto-mirroing virtual display requires the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#CAPTURE_VIDEO_OUTPUT" /></c>
 or <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#CAPTURE_SECURE_VIDEO_OUTPUT" /></c> permission.
 These permissions are reserved for use by system components and are not available to
 third-party applications.

 Alternatively, an appropriate <c><see cref="T:Android.Media.Projection.MediaProjection" /></c> may be used to create an
 auto-mirroring virtual display.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagOwnContentOnly">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagOwnContentOnly = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagOwnContentOnly = (8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Virtual display flag: Only show this display's own content; do not mirror
 the content of another display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Virtual display flag: Only show this display's own content; do not mirror
 the content of another display.

 </para>
          <para tool="javadoc-to-mdoc">
 This flag is used in conjunction with <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" /></c>.
 Ordinarily public virtual displays will automatically mirror the content of the
 default display if they have no windows of their own.  When this flag is
 specified, the virtual display will only ever show its own content and
 will be blanked instead if it has no windows.
 </para>
          <para tool="javadoc-to-mdoc">
 This flag is mutually exclusive with <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" /></c>.  If both
 flags are specified then the own-content only behavior will be applied.
 </para>
          <para tool="javadoc-to-mdoc">
 This behavior of this flag is implied whenever neither <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagPublic" /></c>
 nor <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" /></c> have been set.  This flag is only required to
 override the default behavior when creating a public display.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagPresentation">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPresentation = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPresentation = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PRESENTATION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a presentation display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Virtual display flag: Create a presentation display.

 <format type="text/html"><h3>Presentation virtual displays</h3></format><format type="text/html"><h3>Non-presentation virtual displays</h3></format></para>
          <para tool="javadoc-to-mdoc">
 When this flag is set, the virtual display is registered as a presentation
 display in the <c><see cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" /></c>.
 Applications may automatically project their content to presentation displays
 to provide richer second screen experiences.
 </para>
          <para tool="javadoc-to-mdoc">
 When this flag is not set, the virtual display is not registered as a presentation
 display.  Applications can still project their content on the display but they
 will typically not do so automatically.  This option is appropriate for
 more special-purpose displays.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#VIRTUAL_DISPLAY_FLAG_PRESENTATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.App.Presentation" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" />
        <altmember cref="F:Android.Views.Display.FlagPresentation" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagPublic">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPublic = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagPublic = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_PUBLIC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a public display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Virtual display flag: Create a public display.

 <format type="text/html"><h3>Public virtual displays</h3></format><format type="text/html"><h3>Private virtual displays</h3></format></para>
          <para tool="javadoc-to-mdoc">
 When this flag is set, the virtual display is public.
 </para>
          <para tool="javadoc-to-mdoc">
 A public virtual display behaves just like most any other display that is connected
 to the system such as an HDMI or Wireless display.  Applications can open
 windows on the display and the system may mirror the contents of other displays
 onto it.
 </para>
          <para tool="javadoc-to-mdoc">
 Creating a public virtual display that isn't restricted to own-content only implicitly
 creates an auto-mirroring display. See <c><see cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" /></c> for
 restrictions on who is allowed to create an auto-mirroring display.
 </para>
          <para tool="javadoc-to-mdoc">
 When this flag is not set, the virtual display is private as defined by the
 <c><see cref="F:Android.Views.Display.FlagPrivate" /></c> display flag.
 </para>
          <para tool="javadoc-to-mdoc">
 A private virtual display belongs to the application that created it.
 Only the a owner of a private virtual display is allowed to place windows upon it.
 The private virtual display also does not participate in display mirroring: it will
 neither receive mirrored content from another display nor allow its own content to
 be mirrored elsewhere.  More precisely, the only processes that are allowed to
 enumerate or interact with the private display are those that have the same UID as the
 application that originally created the private virtual display.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#VIRTUAL_DISPLAY_FLAG_PUBLIC" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagOwnContentOnly" />
        <altmember cref="F:Android.Hardware.Display.DisplayManager.VirtualDisplayFlagAutoMirror" />
      </Docs>
    </Member>
    <Member MemberName="VirtualDisplayFlagSecure">
      <MemberSignature Language="C#" Value="public const Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagSecure = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Hardware.Display.VirtualDisplayFlags VirtualDisplayFlagSecure = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIRTUAL_DISPLAY_FLAG_SECURE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Hardware.Display.VirtualDisplayFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplayFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Virtual display flag: Create a secure display.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Virtual display flag: Create a secure display.

 <format type="text/html"><h3>Secure virtual displays</h3></format><format type="text/html"><h3>Non-secure virtual displays</h3></format></para>
          <para tool="javadoc-to-mdoc">
 When this flag is set, the virtual display is considered secure as defined
 by the <c><see cref="F:Android.Views.Display.FlagSecure" /></c> display flag.  The caller promises to take
 reasonable measures, such as over-the-air encryption, to prevent the contents
 of the display from being intercepted or recorded on a persistent medium.
 </para>
          <para tool="javadoc-to-mdoc">
 Creating a secure virtual display requires the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#CAPTURE_SECURE_VIDEO_OUTPUT" /></c> permission.
 This permission is reserved for use by system components and is not available to
 third-party applications.
 </para>
          <para tool="javadoc-to-mdoc">
 When this flag is not set, the virtual display is considered unsecure.
 The content of secure windows will be blanked if shown on this display.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/display/DisplayManager.html#VIRTUAL_DISPLAY_FLAG_SECURE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="F:Android.Views.Display.FlagSecure" />
        <altmember cref="M:Android.Hardware.Display.DisplayManager.CreateVirtualDisplay(System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
