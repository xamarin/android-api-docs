<Type Name="IWrapper" FullName="Java.Sql.IWrapper">
  <TypeSignature Language="VB.NET" Value="Public Interface IWrapper&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWrapper : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface IWrapper : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IWrapper implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Sql.IWrapper" />
  <TypeSignature Language="F#" Value="type IWrapper = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/sql/Wrapper", "", "Java.Sql.IWrapperInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/sql/Wrapper", "", "Java.Sql.IWrapperInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
            in question is in fact a proxy class.</summary>
    <remarks>
      <para>Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
            in question is in fact a proxy class.</para>
      <para>The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond
            the traditional JDBC API that are specific to a data source. Developers may wish to gain access to
            these resources that are wrapped (the delegates) as  proxy class instances representing the
            the actual resources. This interface describes a standard mechanism to access
            these wrapped resources
            represented by their proxy, to permit direct access to the resource delegates.</para>
      <para>Added in 1.6.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/sql/Wrapper" title="Reference documentation">Java documentation for <code>java.sql.Wrapper</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName="IsWrapperFor">
      <MemberSignature Language="VB.NET" Value="Public Function IsWrapperFor (iface As Class) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsWrapperFor(Java::Lang::Class ^ iface);" />
      <MemberSignature Language="C#" Value="public bool IsWrapperFor (Java.Lang.Class? iface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsWrapperFor(class Java.Lang.Class iface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.IWrapper.IsWrapperFor(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member IsWrapperFor : Java.Lang.Class -&gt; bool" Usage="iWrapper.IsWrapperFor iface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isWrapperFor", "(Ljava/lang/Class;)Z", "GetIsWrapperFor_Ljava_lang_Class_Handler:Java.Sql.IWrapperInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isWrapperFor", "(Ljava/lang/Class;)Z", "GetIsWrapperFor_Ljava_lang_Class_Handler:Java.Sql.IWrapperInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iface" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="iface">a Class defining an interface.</param>
        <summary>Returns true if this either implements the interface argument or is directly or indirectly a wrapper
            for an object that does.</summary>
        <returns>true if this implements the interface or directly or indirectly wraps an object that does.</returns>
        <remarks>
          <para>Returns true if this either implements the interface argument or is directly or indirectly a wrapper
            for an object that does. Returns false otherwise. If this implements the interface then return true,
            else if this is a wrapper then return the result of recursively calling <c>isWrapperFor</c> on the wrapped
            object. If this does not implement the interface and is not a wrapper, return false.
            This method should be implemented as a low-cost operation compared to <c>unwrap</c> so that
            callers can use this method to avoid expensive <c>unwrap</c> calls that may fail. If this method
            returns true then calling <c>unwrap</c> with the same argument should succeed.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/Wrapper#isWrapperFor(java.lang.Class%3C?%3E)" title="Reference documentation">Java documentation for <code>java.sql.Wrapper.isWrapperFor(java.lang.Class&lt;?&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="VB.NET" Value="Public Function Unwrap (iface As Class) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Lang::Object ^ Unwrap(Java::Lang::Class ^ iface);" />
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Unwrap (Java.Lang.Class? iface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Unwrap(class Java.Lang.Class iface) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.IWrapper.Unwrap(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member Unwrap : Java.Lang.Class -&gt; Java.Lang.Object" Usage="iWrapper.Unwrap iface" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("unwrap", "(Ljava/lang/Class;)Ljava/lang/Object;", "GetUnwrap_Ljava_lang_Class_Handler:Java.Sql.IWrapperInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unwrap", "(Ljava/lang/Class;)Ljava/lang/Object;", "GetUnwrap_Ljava_lang_Class_Handler:Java.Sql.IWrapperInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iface" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="iface">A Class defining an interface that the result must implement.</param>
        <summary>Returns an object that implements the given interface to allow access to
            non-standard methods, or standard methods not exposed by the proxy.</summary>
        <returns>an object that implements the interface. May be a proxy for the actual implementing object.</returns>
        <remarks>
          <para>Returns an object that implements the given interface to allow access to
            non-standard methods, or standard methods not exposed by the proxy.
            
            If the receiver implements the interface then the result is the receiver
            or a proxy for the receiver. If the receiver is a wrapper
            and the wrapped object implements the interface then the result is the
            wrapped object or a proxy for the wrapped object. Otherwise return the
            the result of calling <c>unwrap</c> recursively on the wrapped object
            or a proxy for that result. If the receiver is not a
            wrapper and does not implement the interface, then an <c>SQLException</c> is thrown.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/Wrapper#unwrap(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.sql.Wrapper.unwrap(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
