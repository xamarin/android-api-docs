<Type Name="ISQLData" FullName="Java.Sql.ISQLData">
  <TypeSignature Language="C#" Value="public interface ISQLData : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISQLData implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/sql/SQLData", "", "Java.Sql.ISQLDataInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An interface for the custom mapping of an SQL <format type="text/html"><i>User Defined Type</i></format> (UDT)
 to a Java class.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An interface for the custom mapping of an SQL <format type="text/html"><i>User Defined Type</i></format> (UDT)
 to a Java class. The Java class object is added to the connection's type map
 paired with the SQL name of the corresponding UDT.
 </para>
      <para tool="javadoc-to-mdoc">
 Usually within an implementation of <c>SQLData</c>, there is a corresponding
 field for every attribute of an SQL type, but only one field, if the type is
 SQL <c>DISTINCT</c>. When the UDT is returned within a <c>ResultSet</c>, it
 is accessed with the <c><see cref="!:Java.Sql.ResultSet.getObject(int)" /></c> method and is returned as an
 object which is an instance of the class defined by the <c>SQLData</c>
 mapping. The application can use this object just like any other Java object
 and can store changes back into the database using the
 <c><see cref="M:Java.Sql.IPreparedStatement.SetObject(System.Int32,Java.Lang.Object)" /></c> method which performs the reverse mapping
 into the SQL <c>UDT</c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Normally the implementation of a custom mapping is generated by
 a tool requiring the name of the SQL <c>UDT</c>, the name
 of the class which it is going to be mapped to, and the field names to which
 the UDT attributes are mapped. The tool can then implement the <c>SQLData</c>, <c>readSQL</c>, and <c>writeSQL</c> methods. <c>readSQL</c> reads
 attributes from an <c>SQLInput</c> object, and <c>writeSQL</c> writes them.
 This is done via <c>SQLInput</c> and <c>SQLOutput</c> method calls
 respectively.
 </para>
      <para tool="javadoc-to-mdoc">
 Ordinarily an application would not call <c>SQLData</c> methods directly.
 Similarly <c>SQLInput</c> and <c>SQLOutput</c> methods are not usually
 called directly.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/sql/SQLData.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="ReadSQL">
      <MemberSignature Language="C#" Value="public void ReadSQL (Java.Sql.ISQLInput stream, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadSQL(class Java.Sql.ISQLInput stream, string typeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readSQL", "(Ljava/sql/SQLInput;Ljava/lang/String;)V", "GetReadSQL_Ljava_sql_SQLInput_Ljava_lang_String_Handler:Java.Sql.ISQLDataInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="Java.Sql.ISQLInput" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">the <c>SQLInput</c> stream from which the type map data is
            read for the custom mapping.</param>
        <param name="typeName">the SQL type name for the type which is being mapped.</param>
        <summary>Reads data from the database into this object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads data from the database into this object. This method follows these
 steps:
 </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <item>
                <term>Utilize the passed input stream to read the attributes or entries of
 the SQL type</term>
              </item>
              <item>
                <term>This is carried out by reading each entry from the input stream,
 ordered as they are in the SQL definition.</term>
              </item>
              <item>
                <term>Assign the data to the appropriate fields or elements. This is done
 by calling the relevant reader method for the type involved (e.g. <c>SQLInput.readString</c>, <c>SQLInputreadBigDecimal</c>). If the type is
 distinct, then read its only data entry. For structured types, read every
 entry.</term>
              </item>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">
 The supplied input stream is typically initialized by the calling JDBC
 driver with the type map before <c>readSQL</c> is called.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/sql/SQLData.html#readSQL(java.sql.SQLInput, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Sql.SQLException">if a database error occurs.</exception>
        <altmember cref="T:Java.Sql.ISQLInput" />
      </Docs>
    </Member>
    <Member MemberName="SQLTypeName">
      <MemberSignature Language="C#" Value="public string SQLTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SQLTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSQLTypeName", "()Ljava/lang/String;", "GetGetSQLTypeNameHandler:Java.Sql.ISQLDataInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the SQL name of the <format type="text/html"><i>User Defined Type</i></format> (UDT) that this object
 represents.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the SQL name of the <format type="text/html"><i>User Defined Type</i></format> (UDT) that this object
 represents. This method, usually invoked by the JDBC driver, retrieves
 the name of the UDT instance associated with this <c>SQLData</c> object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/sql/SQLData.html#getSQLTypeName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Sql.SQLException">if a database error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSQL">
      <MemberSignature Language="C#" Value="public void WriteSQL (Java.Sql.ISQLOutput stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSQL(class Java.Sql.ISQLOutput stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeSQL", "(Ljava/sql/SQLOutput;)V", "GetWriteSQL_Ljava_sql_SQLOutput_Handler:Java.Sql.ISQLDataInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="Java.Sql.ISQLOutput" />
      </Parameters>
      <Docs>
        <param name="stream">the <c>SQLOutput</c> stream to use to write out the data for
            the custom mapping.</param>
        <summary>Writes the object to a supplied <c>SQLOutput</c> data stream, writing it
 out as an SQL value to the data source.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the object to a supplied <c>SQLOutput</c> data stream, writing it
 out as an SQL value to the data source.
 </para>
          <para tool="javadoc-to-mdoc">
 This method follows the following steps:
 <list type="bullet"><item><term>Write each attribute of the SQL type to the output stream.</term></item><item><term>Write each item by calling a method on the output stream, in the
 order they appear in the SQL definition of the type. Use the appropriate
 <c>SQLOutput</c> methods (e.g. <c>writeInt</c>, <c>writeString</c>).
 Write a single data element for a distinct type. For a structured type,
 write a value for each attribute of the the SQL type.</term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/sql/SQLData.html#writeSQL(java.sql.SQLOutput)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Sql.SQLException">if a database error occurs.</exception>
        <altmember cref="T:Java.Sql.ISQLOutput" />
      </Docs>
    </Member>
  </Members>
</Type>
