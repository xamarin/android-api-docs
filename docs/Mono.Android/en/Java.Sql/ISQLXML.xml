<Type Name="ISQLXML" FullName="Java.Sql.ISQLXML">
  <TypeSignature Language="C#" Value="public interface ISQLXML : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISQLXML implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Sql.ISQLXML" />
  <TypeSignature Language="F#" Value="type ISQLXML = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/sql/SQLXML", "", "Java.Sql.ISQLXMLInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/sql/SQLXML", "", "Java.Sql.ISQLXMLInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>The mapping in the JavaTM programming language for the SQL XML type.</summary>
    <remarks>
      <para>The mapping in the JavaTM programming language for the SQL XML type.
            XML is a built-in type that stores an XML value
            as a column value in a row of a database table.
            By default drivers implement an SQLXML object as
            a logical pointer to the XML data
            rather than the data itself.
            An SQLXML object is valid for the duration of the transaction in which it was created.</para>
      <para>The SQLXML interface provides methods for accessing the XML value
            as a String, a Reader or Writer, or as a Stream.  The XML value
            may also be accessed through a Source or set as a Result, which
            are used with XML Parser APIs such as DOM, SAX, and StAX, as
            well as with XSLT transforms and XPath evaluations.</para>
      <para>Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement,
            such as getSQLXML allow a programmer to access an XML value.
            In addition, this interface has methods for updating an XML value.</para>
      <para>The XML value of the SQLXML instance may be obtained as a BinaryStream using</para>
      <code lang="text/java">SQLXML sqlxml = resultSet.getSQLXML(column);
              InputStream binaryStream = sqlxml.getBinaryStream();
            </code>
      <para>For example, to parse an XML value with a DOM parser:</para>
      <code lang="text/java">DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
              Document result = parser.parse(binaryStream);
            </code>
      <para>or to parse an XML value with a SAX parser to your handler:</para>
      <code lang="text/java">SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
              parser.parse(binaryStream, myHandler);
            </code>
      <para>or to parse an XML value with a StAX parser:</para>
      <code lang="text/java">XMLInputFactory factory = XMLInputFactory.newInstance();
              XMLStreamReader streamReader = factory.createXMLStreamReader(binaryStream);
            </code>
      <para>Because databases may use an optimized representation for the XML,
            accessing the value through getSource() and
            setResult() can lead to improved processing performance
            without serializing to a stream representation and parsing the XML.</para>
      <para>For example, to obtain a DOM Document Node:</para>
      <code lang="text/java">DOMSource domSource = sqlxml.getSource(DOMSource.class);
              Document document = (Document) domSource.getNode();
            </code>
      <para>or to set the value to a DOM Document Node to myNode:</para>
      <code lang="text/java">DOMResult domResult = sqlxml.setResult(DOMResult.class);
              domResult.setNode(myNode);
            </code>
      <para>or, to send SAX events to your handler:</para>
      <code lang="text/java">SAXSource saxSource = sqlxml.getSource(SAXSource.class);
              XMLReader xmlReader = saxSource.getXMLReader();
              xmlReader.setContentHandler(myHandler);
              xmlReader.parse(saxSource.getInputSource());
            </code>
      <para>or, to set the result value from SAX events:</para>
      <code lang="text/java">SAXResult saxResult = sqlxml.setResult(SAXResult.class);
              ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();
              contentHandler.startDocument();
              // set the XML elements and attributes into the result
              contentHandler.endDocument();
            </code>
      <para>or, to obtain StAX events:</para>
      <code lang="text/java">StAXSource staxSource = sqlxml.getSource(StAXSource.class);
              XMLStreamReader streamReader = staxSource.getXMLStreamReader();
            </code>
      <para>or, to set the result value from StAX events:</para>
      <code lang="text/java">StAXResult staxResult = sqlxml.setResult(StAXResult.class);
              XMLStreamWriter streamWriter = staxResult.getXMLStreamWriter();
            </code>
      <para>or, to perform XSLT transformations on the XML value using the XSLT in xsltFile
            output to file resultFile:</para>
      <code lang="text/java">File xsltFile = new File("a.xslt");
              File myFile = new File("result.xml");
              Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
              Source source = sqlxml.getSource(null);
              Result result = new StreamResult(myFile);
              xslt.transform(source, result);
            </code>
      <para>or, to evaluate an XPath expression on the XML value:</para>
      <code lang="text/java">XPath xpath = XPathFactory.newInstance().newXPath();
              DOMSource domSource = sqlxml.getSource(DOMSource.class);
              Document document = (Document) domSource.getNode();
              String expression = "/foo/@bar";
              String barValue = xpath.evaluate(expression, document);
            </code>
      <para>To set the XML value to be the result of an XSLT transform:</para>
      <code lang="text/java">File sourceFile = new File("source.xml");
              Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
              Source streamSource = new StreamSource(sourceFile);
              Result result = sqlxml.setResult(null);
              xslt.transform(streamSource, result);
            </code>
      <para>Any Source can be transformed to a Result using the identity transform
            specified by calling newTransformer():</para>
      <code lang="text/java">Transformer identity = TransformerFactory.newInstance().newTransformer();
              Source source = sqlxml.getSource(null);
              File myFile = new File("result.xml");
              Result result = new StreamResult(myFile);
              identity.transform(source, result);
            </code>
      <para>To write the contents of a Source to standard output:</para>
      <code lang="text/java">Transformer identity = TransformerFactory.newInstance().newTransformer();
              Source source = sqlxml.getSource(null);
              Result result = new StreamResult(System.out);
              identity.transform(source, result);
            </code>
      <para>To create a DOMSource from a DOMResult:</para>
      <code lang="text/java">DOMSource domSource = new DOMSource(domResult.getNode());
            </code>
      <para>Incomplete or invalid XML values may cause an SQLException when
            set or the exception may occur when execute() occurs.  All streams
            must be closed before execute() occurs or an SQLException will be thrown.</para>
      <para>Reading and writing XML values to or from an SQLXML object can happen at most once.
            The conceptual states of readable and not readable determine if one
            of the reading APIs will return a value or throw an exception.
            The conceptual states of writable and not writable determine if one
            of the writing APIs will set a value or throw an exception.</para>
      <para>The state moves from readable to not readable once free() or any of the
            reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString().
            Implementations may also change the state to not writable when this occurs.</para>
      <para>The state moves from writable to not writeable once free() or any of the
            writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString().
            Implementations may also change the state to not readable when this occurs.</para>
      <para />
      <para>All methods on the <c>SQLXML</c> interface must be fully implemented if the
            JDBC driver supports the data type.</para>
      <para>Added in 1.6.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/sql/SQLXML" title="Reference documentation">Java documentation for <code>java.sql.SQLXML</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName="BinaryStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream? BinaryStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BinaryStream" />
      <MemberSignature Language="DocId" Value="P:Java.Sql.ISQLXML.BinaryStream" />
      <MemberSignature Language="F#" Value="member this.BinaryStream : System.IO.Stream" Usage="Java.Sql.ISQLXML.BinaryStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getBinaryStream", "()Ljava/io/InputStream;", "GetGetBinaryStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getBinaryStream", "()Ljava/io/InputStream;", "GetGetBinaryStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a stream that can be used to read binary data from this SQL <c>XML</c> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException">if an error occurs accessing the data
</exception>
      </Docs>
    </Member>
    <Member MemberName="CharacterStream">
      <MemberSignature Language="C#" Value="public Java.IO.Reader? CharacterStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.IO.Reader CharacterStream" />
      <MemberSignature Language="DocId" Value="P:Java.Sql.ISQLXML.CharacterStream" />
      <MemberSignature Language="F#" Value="member this.CharacterStream : Java.IO.Reader" Usage="Java.Sql.ISQLXML.CharacterStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCharacterStream", "()Ljava/io/Reader;", "GetGetCharacterStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCharacterStream", "()Ljava/io/Reader;", "GetGetCharacterStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.Reader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a reader that can be used to read character data from this SQL <c>XML</c> object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException">if an error occurs accessing the data
</exception>
      </Docs>
    </Member>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public void Free ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Free() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.ISQLXML.Free" />
      <MemberSignature Language="F#" Value="abstract member Free : unit -&gt; unit" Usage="iSQLXML.Free " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("free", "()V", "GetFreeHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("free", "()V", "GetFreeHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method closes this object and releases the resources that it held.</summary>
        <remarks>
          <para>This method closes this object and releases the resources that it held.
            The SQL XML object becomes invalid and neither readable or writeable
            when this method is called.
            
            After <c>free</c> has been called, any attempt to invoke a
            method other than <c>free</c> will result in a <c>SQLException</c>
            being thrown.  If <c>free</c> is called multiple times, the subsequent
            calls to <c>free</c> are treated as a no-op.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/SQLXML#free()" title="Reference documentation">Java documentation for <code>java.sql.SQLXML.free()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? GetSource (Java.Lang.Class? sourceClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetSource(class Java.Lang.Class sourceClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.ISQLXML.GetSource(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetSource : Java.Lang.Class -&gt; Java.Lang.Object" Usage="iSQLXML.GetSource sourceClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSource", "(Ljava/lang/Class;)Ljavax/xml/transform/Source;", "GetGetSource_Ljava_lang_Class_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSource", "(Ljava/lang/Class;)Ljavax/xml/transform/Source;", "GetGetSource_Ljava_lang_Class_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends javax.xml.transform.Source" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends javax.xml.transform.Source" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="sourceClass">The class of the source, or null.
            If the class is null, a vendor specifc Source implementation will be returned.
            The following classes are supported at a minimum:
            &lt;pre&gt;
              javax.xml.transform.dom.DOMSource - returns a DOMSource
              javax.xml.transform.sax.SAXSource - returns a SAXSource
              javax.xml.transform.stax.StAXSource - returns a StAXSource
              javax.xml.transform.stream.StreamSource - returns a StreamSource
            &lt;/pre&gt;</param>
        <summary>Returns a Source for reading the XML value designated by this SQLXML instance.</summary>
        <returns>a Source for reading the XML value.</returns>
        <remarks>
          <para>Returns a Source for reading the XML value designated by this SQLXML instance.
            Sources are used as inputs to XML parsers and XSLT transformers.</para>
          <para>Sources for XML parsers will have namespace processing on by default.
            The systemID of the Source is implementation dependent.</para>
          <para>The SQL XML object becomes not readable when this method is called and
            may also become not writable depending on implementation.</para>
          <para>Note that SAX is a callback architecture, so a returned
            SAXSource should then be set with a content handler that will
            receive the SAX events from parsing.  The content handler
            will receive callbacks based on the contents of the XML.</para>
          <code lang="text/java">SAXSource saxSource = sqlxml.getSource(SAXSource.class);
              XMLReader xmlReader = saxSource.getXMLReader();
              xmlReader.setContentHandler(myHandler);
              xmlReader.parse(saxSource.getInputSource());
            </code>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/SQLXML#getSource(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.sql.SQLXML.getSource(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinaryStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream? SetBinaryStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream SetBinaryStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.ISQLXML.SetBinaryStream" />
      <MemberSignature Language="F#" Value="abstract member SetBinaryStream : unit -&gt; System.IO.Stream" Usage="iSQLXML.SetBinaryStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setBinaryStream", "()Ljava/io/OutputStream;", "GetSetBinaryStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setBinaryStream", "()Ljava/io/OutputStream;", "GetSetBinaryStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a stream that can be used to write the XML value that this SQLXML instance represents.</summary>
        <returns>a stream to which data can be written.</returns>
        <remarks>
          <para>Retrieves a stream that can be used to write the XML value that this SQLXML instance represents.
            The stream begins at position 0.
            The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification
            The behavior of this method is the same as ResultSet.updateBinaryStream()
            when the designated column of the ResultSet has a type java.sql.Types of SQLXML.</para>
          <para>The SQL XML object becomes not writeable when this method is called and
            may also become not readable depending on implementation.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/SQLXML#setBinaryStream()" title="Reference documentation">Java documentation for <code>java.sql.SQLXML.setBinaryStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException">if an error occurs accessing the data
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCharacterStream">
      <MemberSignature Language="C#" Value="public Java.IO.Writer? SetCharacterStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.IO.Writer SetCharacterStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.ISQLXML.SetCharacterStream" />
      <MemberSignature Language="F#" Value="abstract member SetCharacterStream : unit -&gt; Java.IO.Writer" Usage="iSQLXML.SetCharacterStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setCharacterStream", "()Ljava/io/Writer;", "GetSetCharacterStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setCharacterStream", "()Ljava/io/Writer;", "GetSetCharacterStreamHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.Writer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a stream to be used to write the XML value that this SQLXML instance represents.</summary>
        <returns>a stream to which data can be written.</returns>
        <remarks>
          <para>Retrieves a stream to be used to write the XML value that this SQLXML instance represents.
            The format of this stream is defined by org.xml.sax.InputSource,
            where the characters in the stream represent the unicode code points for
            XML according to section 2 and appendix B of the XML 1.0 specification.
            Although an encoding declaration other than unicode may be present,
            the encoding of the stream is unicode.
            The behavior of this method is the same as ResultSet.updateCharacterStream()
            when the designated column of the ResultSet has a type java.sql.Types of SQLXML.</para>
          <para>The SQL XML object becomes not writeable when this method is called and
            may also become not readable depending on implementation.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/SQLXML#setCharacterStream()" title="Reference documentation">Java documentation for <code>java.sql.SQLXML.setCharacterStream()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException">if an error occurs accessing the data
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? SetResult (Java.Lang.Class? resultClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object SetResult(class Java.Lang.Class resultClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Sql.ISQLXML.SetResult(Java.Lang.Class)" />
      <MemberSignature Language="F#" Value="abstract member SetResult : Java.Lang.Class -&gt; Java.Lang.Object" Usage="iSQLXML.SetResult resultClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setResult", "(Ljava/lang/Class;)Ljavax/xml/transform/Result;", "GetSetResult_Ljava_lang_Class_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setResult", "(Ljava/lang/Class;)Ljavax/xml/transform/Result;", "GetSetResult_Ljava_lang_Class_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends javax.xml.transform.Result" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends javax.xml.transform.Result" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultClass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="resultClass">The class of the result, or null.
            If resultClass is null, a vendor specific Result implementation will be returned.
            The following classes are supported at a minimum:
            &lt;pre&gt;
              javax.xml.transform.dom.DOMResult - returns a DOMResult
              javax.xml.transform.sax.SAXResult - returns a SAXResult
              javax.xml.transform.stax.StAXResult - returns a StAXResult
              javax.xml.transform.stream.StreamResult - returns a StreamResult
            &lt;/pre&gt;</param>
        <summary>Returns a Result for setting the XML value designated by this SQLXML instance.</summary>
        <returns>Returns a Result for setting the XML value.</returns>
        <remarks>
          <para>Returns a Result for setting the XML value designated by this SQLXML instance.</para>
          <para>The systemID of the Result is implementation dependent.</para>
          <para>The SQL XML object becomes not writeable when this method is called and
            may also become not readable depending on implementation.</para>
          <para>Note that SAX is a callback architecture and the returned
            SAXResult has a content handler assigned that will receive the
            SAX events based on the contents of the XML.  Call the content
            handler with the contents of the XML document to assign the values.</para>
          <code lang="text/java">SAXResult saxResult = sqlxml.setResult(SAXResult.class);
              ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();
              contentHandler.startDocument();
              // set the XML elements and attributes into the result
              contentHandler.endDocument();
            </code>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/sql/SQLXML#setResult(java.lang.Class%3CT%3E)" title="Reference documentation">Java documentation for <code>java.sql.SQLXML.setResult(java.lang.Class&lt;T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="public string? String { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string String" />
      <MemberSignature Language="DocId" Value="P:Java.Sql.ISQLXML.String" />
      <MemberSignature Language="F#" Value="member this.String : string with get, set" Usage="Java.Sql.ISQLXML.String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getString", "()Ljava/lang/String;", "GetGetStringHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getString", "()Ljava/lang/String;", "GetGetStringHandler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setString", "(Ljava/lang/String;)V", "GetSetString_Ljava_lang_String_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setString", "(Ljava/lang/String;)V", "GetSetString_Ljava_lang_String_Handler:Java.Sql.ISQLXMLInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns this object's data as an XML string.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Sql.SQLException">if an error occurs accessing the data
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
