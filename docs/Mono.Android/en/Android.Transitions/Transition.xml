<Type Name="Transition" FullName="Android.Transitions.Transition">
  <TypeSignature Language="C#" Value="public abstract class Transition : Java.Lang.Object, IDisposable, Java.Lang.ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Transition extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Lang.ICloneable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/transition/Transition", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>A Transition holds information about animations that will be run on its
 targets during a scene change.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A Transition holds information about animations that will be run on its
 targets during a scene change. Subclasses of this abstract class may
 choreograph several child transitions (<c><see cref="T:Android.Transitions.TransitionSet" /></c> or they may
 perform custom animations themselves. Any Transition has two main jobs:
 (1) capture property values, and (2) play animations based on changes to
 captured property values. A custom transition knows what property values
 on View objects are of interest to it, and also knows how to animate
 changes to those values. For example, the <c><see cref="T:Android.Transitions.Fade" /></c> transition tracks
 changes to visibility-related properties and is able to construct and run
 animations that fade items in or out based on changes to those properties.

 </para>
      <para tool="javadoc-to-mdoc">Note: Transitions may not work correctly with either <c><see cref="T:Android.Views.SurfaceView" /></c>
 or <c><see cref="T:Android.Views.TextureView" /></c>, due to the way that these views are displayed
 on the screen. For SurfaceView, the problem is that the view is updated from
 a non-UI thread, so changes to the view due to transitions (such as moving
 and resizing the view) may be out of sync with the display inside those bounds.
 TextureView is more compatible with transitions in general, but some
 specific transitions (such as <c><see cref="T:Android.Transitions.Fade" /></c>) may not be compatible
 with TextureView because they rely on <c><see cref="T:Android.Views.ViewOverlay" /></c> functionality,
 which does not currently work with TextureView.</para>
      <para tool="javadoc-to-mdoc">Transitions can be declared in XML resource files inside the <c>res/transition</c>
 directory. Transition resources consist of a tag name for one of the Transition
 subclasses along with attributes to define some of the attributes of that transition.
 For example, here is a minimal resource file that declares a <c><see cref="T:Android.Transitions.ChangeBounds" /></c> transition:

 <example><code lang="xml">&lt;changeBounds/&gt;</code></example><example><code lang="xml">&lt;transitionSet xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;explode/&gt;
    &lt;changeBounds/&gt;
    &lt;changeTransform/&gt;
    &lt;changeClipBounds/&gt;
    &lt;changeImageTransform/&gt;
&lt;/transitionSet&gt;</code></example><example><code lang="xml">&lt;transition class="my.app.transition.CustomTransition"/&gt;</code></example><example><code lang="xml">&lt;transitionSet xmlns:android="http://schemas.android.com/apk/res/android"
     android:transitionOrdering="sequential"&gt;
    &lt;changeBounds/&gt;
    &lt;fade android:fadingMode="fade_out" &gt;
        &lt;targets&gt;
            &lt;target android:targetId="@id/grayscaleContainer" /&gt;
        &lt;/targets&gt;
    &lt;/fade&gt;
&lt;/transitionSet&gt;</code></example>

 Further information on XML resource descriptions for transitions can be found for
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#Transition" /></c>, <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#TransitionSet" /></c>,
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#TransitionTarget" /></c>, <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#Fade" /></c>,
 <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#Slide" /></c>, and <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#ChangeTransform" /></c>.

</para>
      <para tool="javadoc-to-mdoc">This TransitionSet contains <c><see cref="T:Android.Transitions.Explode" /></c> for visibility,
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c>, <c><see cref="T:Android.Transitions.ChangeTransform" /></c>,
 and <c><see cref="T:Android.Transitions.ChangeClipBounds" /></c> and
 <c><see cref="T:Android.Transitions.ChangeImageTransform" /></c>:</para>
      <para tool="javadoc-to-mdoc">Custom transition classes may be instantiated with a <c>transition</c> tag:</para>
      <para tool="javadoc-to-mdoc">Custom transition classes loaded from XML should have a public constructor taking
 a <c><see cref="T:Android.Content.Context" /></c> and <c><see cref="T:Android.Util.IAttributeSet" /></c>.</para>
      <para tool="javadoc-to-mdoc">Note that attributes for the transition are not required, just as they are
 optional when declared in code; Transitions created from XML resources will use
 the same defaults as their code-created equivalents. Here is a slightly more
 elaborate example which declares a <c><see cref="T:Android.Transitions.TransitionSet" /></c> transition with
 <c><see cref="T:Android.Transitions.ChangeBounds" /></c> and <c><see cref="T:Android.Transitions.Fade" /></c> child transitions:</para>
      <para tool="javadoc-to-mdoc">In this example, the transitionOrdering attribute is used on the TransitionSet
 object to change from the default <c><see cref="F:Android.Transitions.TransitionSet.OrderingTogether" /></c> behavior
 to be <c><see cref="F:Android.Transitions.TransitionSet.OrderingSequential" /></c> instead. Also, the <c><see cref="T:Android.Transitions.Fade" /></c>
 transition uses a fadingMode of <c><see cref="F:Android.Transitions.Fade.Out" /></c> instead of the default
 out-in behavior. Finally, note the use of the <c>targets</c> sub-tag, which
 takes a set of <c><see cref="!:NoType:android/R$styleable;Href=../../../reference/android/R.styleable.html#TransitionTarget" /></c> tags, each
 of which lists a specific <c>targetId</c>, <c>targetClass</c>,
 <c>targetName</c>, <c>excludeId</c>, <c>excludeClass</c>, or
 <c>excludeName</c>, which this transition acts upon.
 Use of targets is optional, but can be used to either limit the time spent checking
 attributes on unchanging views, or limiting the types of animations run on specific views.
 In this case, we know that only the <c>grayscaleContainer</c> will be
 disappearing, so we choose to limit the <c><see cref="T:Android.Transitions.Fade" /></c> transition to only that view.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/transition/Transition.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Transition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a Transition object with no target objects.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a Transition object with no target objects. A transition with
 no targets defaults to running on all target objects in the scene hierarchy
 (if the transition is not contained in a TransitionSet), or all target
 objects passed down from its parent (if it is in a TransitionSet).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#Transition()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Transition (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>Perform inflation from XML and apply a class-specific base style from a
 theme attribute or style resource.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Perform inflation from XML and apply a class-specific base style from a
 theme attribute or style resource. This constructor of Transition allows
 subclasses to use their own base style when they are inflating.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#Transition(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Transition (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition AddListener (Android.Transitions.Transition.ITransitionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition AddListener(class Android.Transitions.Transition/ITransitionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addListener", "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;", "GetAddListener_Landroid_transition_Transition_TransitionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Transitions.Transition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to be added to the current set of listeners
 for this animation.</param>
        <summary>Adds a listener to the set of listeners that are sent events through the
 life of an animation, such as start, repeat, and end.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds a listener to the set of listeners that are sent events through the
 life of an animation, such as start, repeat, and end.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#addListener(android.transition.Transition.TransitionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition AddTarget (Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition AddTarget(class Android.Views.View target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTarget", "(Landroid/view/View;)Landroid/transition/Transition;", "GetAddTarget_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="target">A View on which the Transition will act, must be non-null.</param>
        <summary tool="true">Sets the target view instances that this Transition is interested in
 animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the target view instances that this Transition is interested in
 animating. By default, there are no targets, and a Transition will
 listen for changes on every view in the hierarchy below the sceneRoot
 of the Scene being transitioned into. Setting targets constrains
 the Transition to only listen for, and act on, these views.
 All other views will be ignored.

 </para>
          <para tool="javadoc-to-mdoc">The target list is like the <c><see cref="M:Android.Transitions.Transition.AddTarget(System.Int32)" /></c>
 list except this list specifies the actual View instances, not the ids
 of the views. This is an important distinction when scene changes involve
 view hierarchies which have been inflated separately; different views may
 share the same id but not actually be the same instance. If the transition
 should treat those views as the same, then <c><see cref="M:Android.Transitions.Transition.AddTarget(System.Int32)" /></c> should be used
 instead of <c><see cref="M:Android.Transitions.Transition.AddTarget(Android.Views.View)" /></c>. If, on the other hand, scene changes involve
 changes all within the same view hierarchy, among views which do not
 necessarily have ids set on them, then the target list of views may be more
 convenient.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#addTarget(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.AddTarget(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition AddTarget (Java.Lang.Class targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition AddTarget(class Java.Lang.Class targetType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTarget", "(Ljava/lang/Class;)Landroid/transition/Transition;", "GetAddTarget_Ljava_lang_Class_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetType" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="targetType">The type to include when running this transition.</param>
        <summary>Adds the Class of a target view that this Transition is interested in
 animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds the Class of a target view that this Transition is interested in
 animating. By default, there are no targetTypes, and a Transition will
 listen for changes on every view in the hierarchy below the sceneRoot
 of the Scene being transitioned into. Setting targetTypes constrains
 the Transition to only listen for, and act on, views with these classes.
 Views with different classes will be ignored.

 </para>
          <para tool="javadoc-to-mdoc">Note that any View that can be cast to targetType will be included, so
 if targetType is <c>View.class</c>, all Views will be included.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#addTarget(java.lang.Class)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.AddTarget(System.Int32)" />
        <altmember cref="M:Android.Transitions.Transition.AddTarget(Android.Views.View)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Java.Lang.Class, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition AddTarget (int targetId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition AddTarget(int32 targetId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTarget", "(I)Landroid/transition/Transition;", "GetAddTarget_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targetId">The id of a target view, must be a positive number.</param>
        <summary>Adds the id of a target view that this Transition is interested in
 animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds the id of a target view that this Transition is interested in
 animating. By default, there are no targetIds, and a Transition will
 listen for changes on every view in the hierarchy below the sceneRoot
 of the Scene being transitioned into. Setting targetIds constrains
 the Transition to only listen for, and act on, views with these IDs.
 Views with different IDs, or no IDs whatsoever, will be ignored.

 </para>
          <para tool="javadoc-to-mdoc">Note that using ids to specify targets implies that ids should be unique
 within the view hierarchy underneath the scene root.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#addTarget(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.View.Id" />
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition AddTarget (string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition AddTarget(string targetName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTarget", "(Ljava/lang/String;)Landroid/transition/Transition;", "GetAddTarget_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetName">The transitionName of a target view, must be non-null.</param>
        <summary>Adds the transitionName of a target view that this Transition is interested in
 animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Adds the transitionName of a target view that this Transition is interested in
 animating. By default, there are no targetNames, and a Transition will
 listen for changes on every view in the hierarchy below the sceneRoot
 of the Scene being transitioned into. Setting targetNames constrains
 the Transition to only listen for, and act on, views with these transitionNames.
 Views with different transitionNames, or no transitionName whatsoever, will be ignored.

 </para>
          <para tool="javadoc-to-mdoc">Note that transitionNames should be unique within the view hierarchy.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#addTarget(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="P:Android.Views.View.TransitionName" />
      </Docs>
    </Member>
    <Member MemberName="CanRemoveViews">
      <MemberSignature Language="C#" Value="public virtual bool CanRemoveViews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRemoveViews() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canRemoveViews", "()Z", "GetCanRemoveViewsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#canRemoveViews()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureEndValues">
      <MemberSignature Language="C#" Value="public abstract void CaptureEndValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CaptureEndValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureEndValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureEndValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the end scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the end scene for the properties that this
 transition monitors. These values are then passed as the endValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#captureEndValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.CaptureStartValues(Android.Transitions.TransitionValues)" />
        <altmember cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup, Android.Transitions.TransitionValues, Android.Transitions.TransitionValues)" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStartValues">
      <MemberSignature Language="C#" Value="public abstract void CaptureStartValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CaptureStartValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureStartValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureStartValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the start scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the start scene for the properties that this
 transition monitors. These values are then passed as the startValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#captureStartValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.CaptureEndValues(Android.Transitions.TransitionValues)" />
        <altmember cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup, Android.Transitions.TransitionValues, Android.Transitions.TransitionValues)" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clone", "()Landroid/transition/Transition;", "GetCloneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns a copy of this <c>Object</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates and returns a copy of this <c>Object</c>. The default
 implementation returns a so-called "shallow" copy: It creates a new
 instance of the same class and then copies the field values (including
 object references) from this instance to the new instance. A "deep" copy,
 in contrast, would also recursively clone nested objects. A subclass that
 needs to implement this kind of cloning should call <c>super.clone()</c>
 to create the new instance and then create deep copies of the nested,
 mutable objects.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#clone()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator CreateAnimator (Android.Views.ViewGroup sceneRoot, Android.Transitions.TransitionValues startValues, Android.Transitions.TransitionValues endValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator CreateAnimator(class Android.Views.ViewGroup sceneRoot, class Android.Transitions.TransitionValues startValues, class Android.Transitions.TransitionValues endValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createAnimator", "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;", "GetCreateAnimator_Landroid_view_ViewGroup_Landroid_transition_TransitionValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the transition hierarchy.</param>
        <param name="startValues">The values for a specific target in the start scene.</param>
        <param name="endValues">The values for the target in the end scene.</param>
        <summary>This method creates an animation that will be run for this transition
 given the information in the startValues and endValues structures captured
 earlier for the start and end scenes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method creates an animation that will be run for this transition
 given the information in the startValues and endValues structures captured
 earlier for the start and end scenes. Subclasses of Transition should override
 this method. The method should only be called by the transition system; it is
 not intended to be called from external classes.

 </para>
          <para tool="javadoc-to-mdoc">This method is called by the transition's parent (all the way up to the
 topmost Transition in the hierarchy) with the sceneRoot and start/end
 values that the transition may need to set up initial target values
 and construct an appropriate animation. For example, if an overall
 Transition is a <c><see cref="T:Android.Transitions.TransitionSet" /></c> consisting of several
 child transitions in sequence, then some of the child transitions may
 want to set initial values on target views prior to the overall
 Transition commencing, to put them in an appropriate state for the
 delay between that start and the child Transition start time. For
 example, a transition that fades an item in may wish to set the starting
 alpha value to 0, to avoid it blinking in prior to the transition
 actually starting the animation. This is necessary because the scene
 change that triggers the Transition will automatically set the end-scene
 on all target views, so a Transition that wants to animate from a
 different value should set that value prior to returning from this method.</para>
          <para tool="javadoc-to-mdoc">Additionally, a Transition can perform logic to determine whether
 the transition needs to run on the given target and start/end values.
 For example, a transition that resizes objects on the screen may wish
 to avoid running for views which are not present in either the start
 or end scenes.</para>
          <para tool="javadoc-to-mdoc">If there is an animator created and returned from this method, the
 transition mechanism will apply any applicable duration, startDelay,
 and interpolator to that animation and start it. A return value of
 <c>null</c> indicates that no animation should run. The default
 implementation returns null.</para>
          <para tool="javadoc-to-mdoc">The method is called for every applicable target object, which is
 stored in the <c><see cref="P:Android.Transitions.TransitionValues.View" /></c> field.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual long Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDuration", "()J", "GetGetDurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the duration set on this transition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the duration set on this transition. If no duration has been set,
 the returned value will be negative, indicating that resulting animators will
 retain their own durations.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getDuration()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Epicenter">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Rect Epicenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect Epicenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getEpicenter", "()Landroid/graphics/Rect;", "GetGetEpicenterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the epicenter as specified by the
 <c><see cref="!:NoType:android/transition/Transition$EpicenterCallback;Href=../../../reference/android/transition/Transition.EpicenterCallback.html" /></c> or null if no callback exists.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the epicenter as specified by the
 <c><see cref="!:NoType:android/transition/Transition$EpicenterCallback;Href=../../../reference/android/transition/Transition.EpicenterCallback.html" /></c> or null if no callback exists.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getEpicenter()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.SetEpicenterCallback(.EpicenterCallback)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeChildren">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeChildren (Android.Views.View target, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeChildren(class Android.Views.View target, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeChildren", "(Landroid/view/View;Z)Landroid/transition/Transition;", "GetExcludeChildren_Landroid_view_View_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">The target to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target to or remove the target from the
 current list of excluded targets.</param>
        <summary tool="true">Whether to add the children of given target to the list of target children
 to exclude from this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the children of given target to the list of target children
 to exclude from this transition. The <c>exclude</c> parameter specifies
 whether the target should be added to or removed from the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeChildren(android.view.View, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeChildren">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeChildren (Java.Lang.Class type, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeChildren(class Java.Lang.Class type, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeChildren", "(Ljava/lang/Class;Z)Landroid/transition/Transition;", "GetExcludeChildren_Ljava_lang_Class_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Java.Lang.Class" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The type to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target type to or remove it from the
 current list of excluded target types.</param>
        <summary>Whether to add the given type to the list of types whose children should
 be excluded from this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the given type to the list of types whose children should
 be excluded from this transition. The <c>exclude</c> parameter
 specifies whether the target type should be added to or removed from
 the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeChildren(java.lang.Class, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Java.Lang.Class, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeChildren">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeChildren (int targetId, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeChildren(int32 targetId, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeChildren", "(IZ)Landroid/transition/Transition;", "GetExcludeChildren_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetId" Type="System.Int32" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetId">The id of a target whose children should be ignored when running
 this transition.</param>
        <param name="exclude">Whether to add the target to or remove the target from the
 current list of excluded-child targets.</param>
        <summary>Whether to add the children of the given id to the list of targets to exclude
 from this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the children of the given id to the list of targets to exclude
 from this transition. The <c>exclude</c> parameter specifies whether
 the children of the target should be added to or removed from the excluded list.
 Excluding children in this way provides a simple mechanism for excluding all
 children of specific targets, rather than individually excluding each
 child individually.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeChildren(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeTarget (Android.Views.View target, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeTarget(class Android.Views.View target, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeTarget", "(Landroid/view/View;Z)Landroid/transition/Transition;", "GetExcludeTarget_Landroid_view_View_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">The target to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target to or remove the target from the
 current list of excluded targets.</param>
        <summary tool="true">Whether to add the given target to the list of targets to exclude from this
 transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the given target to the list of targets to exclude from this
 transition. The <c>exclude</c> parameter specifies whether the target
 should be added to or removed from the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeTarget(android.view.View, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeTarget (Java.Lang.Class type, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeTarget(class Java.Lang.Class type, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeTarget", "(Ljava/lang/Class;Z)Landroid/transition/Transition;", "GetExcludeTarget_Ljava_lang_Class_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Java.Lang.Class" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The type to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target type to or remove it from the
 current list of excluded target types.</param>
        <summary>Whether to add the given type to the list of types to exclude from this
 transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the given type to the list of types to exclude from this
 transition. The <c>exclude</c> parameter specifies whether the target
 type should be added to or removed from the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeTarget(java.lang.Class, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(Java.Lang.Class, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeTarget (int targetId, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeTarget(int32 targetId, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeTarget", "(IZ)Landroid/transition/Transition;", "GetExcludeTarget_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetId" Type="System.Int32" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetId">The id of a target to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target to or remove the target from the
 current list of excluded targets.</param>
        <summary>Whether to add the given id to the list of target ids to exclude from this
 transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the given id to the list of target ids to exclude from this
 transition. The <c>exclude</c> parameter specifies whether the target
 should be added to or removed from the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded either by their
 id, or by their instance reference, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeTarget(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeChildren(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ExcludeTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition ExcludeTarget (string targetName, bool exclude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition ExcludeTarget(string targetName, bool exclude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("excludeTarget", "(Ljava/lang/String;Z)Landroid/transition/Transition;", "GetExcludeTarget_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="exclude" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetName">The name of a target to ignore when running this transition.</param>
        <param name="exclude">Whether to add the target to or remove the target from the
 current list of excluded targets.</param>
        <summary>Whether to add the given transitionName to the list of target transitionNames to exclude
 from this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Whether to add the given transitionName to the list of target transitionNames to exclude
 from this transition. The <c>exclude</c> parameter specifies whether the target
 should be added to or removed from the excluded list.

 </para>
          <para tool="javadoc-to-mdoc">Excluding targets is a general mechanism for allowing transitions to run on
 a view hierarchy while skipping target views that should not be part of
 the transition. For example, you may want to avoid animating children
 of a specific ListView or Spinner. Views can be excluded by their
 id, their instance reference, their transitionName, or by the Class of that view
 (eg, <c><see cref="T:Android.Widget.Spinner" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#excludeTarget(java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(System.Int32, System.Boolean)" />
        <altmember cref="M:Android.Transitions.Transition.ExcludeTarget(Java.Lang.Class, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEpicenterCallback">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition.EpicenterCallback GetEpicenterCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition/EpicenterCallback GetEpicenterCallback() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getEpicenterCallback", "()Landroid/transition/Transition$EpicenterCallback;", "GetGetEpicenterCallbackHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition+EpicenterCallback</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the callback used to find the epicenter of the Transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the callback used to find the epicenter of the Transition.
 Transitions like <c><see cref="T:Android.Transitions.Explode" /></c> use a point or Rect to orient
 the direction of travel. This is called the epicenter of the Transition and is
 typically centered on a touched View. The
 <c><see cref="!:NoType:android/transition/Transition$EpicenterCallback;Href=../../../reference/android/transition/Transition.EpicenterCallback.html" /></c> allows a Transition to
 dynamically retrieve the epicenter during a Transition.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getEpicenterCallback()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransitionProperties">
      <MemberSignature Language="C#" Value="public virtual string[] GetTransitionProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTransitionProperties() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTransitionProperties", "()[Ljava/lang/String;", "GetGetTransitionPropertiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the set of property names used stored in the <c><see cref="T:Android.Transitions.TransitionValues" /></c>
 object passed into <c><see cref="M:Android.Transitions.Transition.CaptureStartValues(Android.Transitions.TransitionValues)" /></c> that
 this transition cares about for the purposes of canceling overlapping animations.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the set of property names used stored in the <c><see cref="T:Android.Transitions.TransitionValues" /></c>
 object passed into <c><see cref="M:Android.Transitions.Transition.CaptureStartValues(Android.Transitions.TransitionValues)" /></c> that
 this transition cares about for the purposes of canceling overlapping animations.
 When any transition is started on a given scene root, all transitions
 currently running on that same scene root are checked to see whether the
 properties on which they based their animations agree with the end values of
 the same properties in the new transition. If the end values are not equal,
 then the old animation is canceled since the new transition will start a new
 animation to these new values. If the values are equal, the old animation is
 allowed to continue and no new animation is started for that transition.

 </para>
          <para tool="javadoc-to-mdoc">A transition does not need to override this method. However, not doing so
 will mean that the cancellation logic outlined in the previous paragraph
 will be skipped for that transition, possibly leading to artifacts as
 old transitions and new transitions on the same targets run in parallel,
 animating views toward potentially different end values.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTransitionProperties()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransitionValues">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.TransitionValues GetTransitionValues (Android.Views.View view, bool start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.TransitionValues GetTransitionValues(class Android.Views.View view, bool start) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTransitionValues", "(Landroid/view/View;Z)Landroid/transition/TransitionValues;", "GetGetTransitionValues_Landroid_view_View_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.TransitionValues</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="start" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <param name="start">To be added.</param>
        <summary>This method can be called by transitions to get the TransitionValues for
 any particular view during the transition-playing process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method can be called by transitions to get the TransitionValues for
 any particular view during the transition-playing process. This might be
 necessary, for example, to query the before/after state of related views
 for a given transition.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTransitionValues(android.view.View, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolator">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.ITimeInterpolator Interpolator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Animation.ITimeInterpolator Interpolator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInterpolator", "()Landroid/animation/TimeInterpolator;", "GetGetInterpolatorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.ITimeInterpolator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the interpolator set on this transition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the interpolator set on this transition. If no interpolator has been set,
 the returned value will be null, indicating that resulting animators will
 retain their own interpolators.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getInterpolator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchId">
      <MemberSignature Language="C#" Value="public const Android.Transitions.MatchTarget MatchId = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Transitions.MatchTarget MatchId = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MATCH_ID")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Transitions.MatchTarget enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.MatchTarget</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by
 <c><see cref="P:Android.Views.View.Id" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by
 <c><see cref="P:Android.Views.View.Id" /></c>. Negative IDs will not be matched.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#MATCH_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchInstance">
      <MemberSignature Language="C#" Value="public const Android.Transitions.MatchTarget MatchInstance = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Transitions.MatchTarget MatchInstance = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MATCH_INSTANCE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Transitions.MatchTarget enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.MatchTarget</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by View instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by View instance.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#MATCH_INSTANCE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchItemId">
      <MemberSignature Language="C#" Value="public const Android.Transitions.MatchTarget MatchItemId = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Transitions.MatchTarget MatchItemId = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MATCH_ITEM_ID")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Transitions.MatchTarget enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.MatchTarget</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by the <c><see cref="T:Android.Widget.Adapter" /></c>
 item id.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by the <c><see cref="T:Android.Widget.Adapter" /></c>
 item id. When <c><see cref="!:Android.Widget.Adapter.hasStableIds()" /></c> returns false, no match
 will be made for items.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#MATCH_ITEM_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchName">
      <MemberSignature Language="C#" Value="public const Android.Transitions.MatchTarget MatchName = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Transitions.MatchTarget MatchName = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MATCH_NAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Transitions.MatchTarget enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.MatchTarget</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by
 <c><see cref="P:Android.Views.View.TransitionName" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">With <c><see cref="!:Android.Transitions.Transition.setMatchOrder(int...)" /></c>, chooses to match by
 <c><see cref="P:Android.Views.View.TransitionName" /></c>. Null names will not be matched.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#MATCH_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of this Transition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the name of this Transition. This name is used internally to distinguish
 between different transitions to determine when interrupting transitions overlap.
 For example, a ChangeBounds running on the same target view as another ChangeBounds
 should determine whether the old transition is animating to different end values
 and should be canceled in favor of the new transition.

 </para>
          <para tool="javadoc-to-mdoc">By default, a Transition's name is simply the value of <c><see cref="P:Java.Lang.Class.Name" /></c>,
 but subclasses are free to override and return something different.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathMotion">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.PathMotion PathMotion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.PathMotion PathMotion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPathMotion", "()Landroid/transition/PathMotion;", "GetGetPathMotionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPathMotion", "(Landroid/transition/PathMotion;)V", "GetSetPathMotion_Landroid_transition_PathMotion_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.PathMotion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the algorithm object used to interpolate along two dimensions.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getPathMotion()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the algorithm object used to interpolate along two dimensions. This is typically
 used to determine the View motion between two points.

 <sample external-id="FA0FF4A2C3C544E75A29D5FD7E5CDC7E" /><example><code lang="java">&lt;changeBounds&gt;
   &lt;arcMotion android:minimumHorizontalAngle="15"
              android:minimumVerticalAngle="0"
              android:maximumAngle="90"/&gt;
 &lt;/changeBounds&gt;</code></example></para>
          <para tool="javadoc-to-mdoc">
     When describing in XML, use a nested XML tag for the path motion. It can be one of
     the built-in tags <c>arcMotion</c> or <c>patternPathMotion</c> or it can
     be a custom PathMotion using <c>pathMotion</c> with the <c>class</c>
     attributed with the fully-described class name. For example:</para>
          <para tool="javadoc-to-mdoc">or</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setPathMotion(android.transition.PathMotion)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the algorithm used to calculate two-dimensional interpolation.
 <example><code lang="java">&lt;changeBounds&gt;
     &lt;pathMotion class="my.app.transition.MyPathMotion"/&gt;
 &lt;/changeBounds&gt;
 </code></example><sample external-id="AAA2845EFF3E783381211BEDAE22C17D" /></para>
          <para tool="javadoc-to-mdoc">
     Transitions such as <c><see cref="T:Android.Transitions.ChangeBounds" /></c> move Views, typically
     in a straight path between the start and end positions. Applications that desire to
     have these motions move in a curve can change how Views interpolate in two dimensions
     by extending PathMotion and implementing
     <c><see cref="M:Android.Transitions.PathMotion.GetPath(System.Single,System.Single,System.Single,System.Single)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
     When describing in XML, use a nested XML tag for the path motion. It can be one of
     the built-in tags <c>arcMotion</c> or <c>patternPathMotion</c> or it can
     be a custom PathMotion using <c>pathMotion</c> with the <c>class</c>
     attributed with the fully-described class name. For example:</para>
          <para tool="javadoc-to-mdoc">or</para>
        </remarks>
        <altmember cref="T:Android.Transitions.ArcMotion" />
        <altmember cref="T:Android.Transitions.PatternPathMotion" />
        <altmember cref="T:Android.Transitions.PathMotion" />
        <altmember cref="T:Android.Transitions.ArcMotion" />
        <altmember cref="T:Android.Transitions.PatternPathMotion" />
        <altmember cref="T:Android.Transitions.PathMotion" />
      </Docs>
    </Member>
    <Member MemberName="Propagation">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.TransitionPropagation Propagation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Transitions.TransitionPropagation Propagation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPropagation", "()Landroid/transition/TransitionPropagation;", "GetGetPropagationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPropagation", "(Landroid/transition/TransitionPropagation;)V", "GetSetPropagation_Landroid_transition_TransitionPropagation_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.TransitionPropagation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c><see cref="T:Android.Transitions.TransitionPropagation" /></c> used to calculate Animator start
 delays.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getPropagation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the <c><see cref="T:Android.Transitions.TransitionPropagation" /></c> used to calculate Animator start
 delays.
 When a Transition affects several Views like <c><see cref="T:Android.Transitions.Explode" /></c> or
 <c><see cref="T:Android.Transitions.Slide" /></c>, there may be a desire to have a "wave-front" effect
 such that the Animator start delay depends on position of the View. The
 TransitionPropagation specifies how the start delays are calculated.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setPropagation(android.transition.TransitionPropagation)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the method for determining Animator start delays.
 When a Transition affects several Views like <c><see cref="T:Android.Transitions.Explode" /></c> or
 <c><see cref="T:Android.Transitions.Slide" /></c>, there may be a desire to have a "wave-front" effect
 such that the Animator start delay depends on position of the View. The
 TransitionPropagation specifies how the start delays are calculated.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition RemoveListener (Android.Transitions.Transition.ITransitionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition RemoveListener(class Android.Transitions.Transition/ITransitionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeListener", "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;", "GetRemoveListener_Landroid_transition_Transition_TransitionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Transitions.Transition+ITransitionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to be removed from the current set of
 listeners for this transition.</param>
        <summary>Removes a listener from the set listening to this animation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes a listener from the set listening to this animation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#removeListener(android.transition.Transition.TransitionListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition RemoveTarget (Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition RemoveTarget(class Android.Views.View target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeTarget", "(Landroid/view/View;)Landroid/transition/Transition;", "GetRemoveTarget_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="target">The target view, must be non-null.</param>
        <summary tool="true">Removes the given target from the list of targets that this Transition
 is interested in animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes the given target from the list of targets that this Transition
 is interested in animating.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#removeTarget(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition RemoveTarget (Java.Lang.Class target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition RemoveTarget(class Java.Lang.Class target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeTarget", "(Ljava/lang/Class;)Landroid/transition/Transition;", "GetRemoveTarget_Ljava_lang_Class_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="target">The type of the target view, must be non-null.</param>
        <summary>Removes the given target from the list of targets that this Transition
 is interested in animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes the given target from the list of targets that this Transition
 is interested in animating.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#removeTarget(java.lang.Class)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition RemoveTarget (int targetId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition RemoveTarget(int32 targetId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeTarget", "(I)Landroid/transition/Transition;", "GetRemoveTarget_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targetId">The id of a target view, must be a positive number.</param>
        <summary>Removes the given targetId from the list of ids that this Transition
 is interested in animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes the given targetId from the list of ids that this Transition
 is interested in animating.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#removeTarget(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition RemoveTarget (string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition RemoveTarget(string targetName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeTarget", "(Ljava/lang/String;)Landroid/transition/Transition;", "GetRemoveTarget_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetName">The transitionName of a target view, must not be null.</param>
        <summary>Removes the given targetName from the list of transitionNames that this Transition
 is interested in animating.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes the given targetName from the list of transitionNames that this Transition
 is interested in animating.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#removeTarget(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition SetDuration (long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition SetDuration(int64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDuration", "(J)Landroid/transition/Transition;", "GetSetDuration_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="duration">The length of the animation, in milliseconds.</param>
        <summary>Sets the duration of this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the duration of this transition. By default, there is no duration
 (indicated by a negative number), which means that the Animator created by
 the transition will have its own specified duration. If the duration of a
 Transition is set, that duration will override the Animator duration.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setDuration(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEpicenterCallback">
      <MemberSignature Language="C#" Value="public virtual void SetEpicenterCallback (Android.Transitions.Transition.EpicenterCallback epicenterCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEpicenterCallback(class Android.Transitions.Transition/EpicenterCallback epicenterCallback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEpicenterCallback", "(Landroid/transition/Transition$EpicenterCallback;)V", "GetSetEpicenterCallback_Landroid_transition_Transition_EpicenterCallback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="epicenterCallback" Type="Android.Transitions.Transition+EpicenterCallback" />
      </Parameters>
      <Docs>
        <param name="epicenterCallback">The callback to use to find the epicenter of the Transition.
</param>
        <summary>Sets the callback to use to find the epicenter of a Transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the callback to use to find the epicenter of a Transition. A null value indicates
 that there is no epicenter in the Transition and onGetEpicenter() will return null.
 Transitions like <c><see cref="T:Android.Transitions.Explode" /></c> use a point or Rect to orient
 the direction of travel. This is called the epicenter of the Transition and is
 typically centered on a touched View. The
 <c><see cref="!:NoType:android/transition/Transition$EpicenterCallback;Href=../../../reference/android/transition/Transition.EpicenterCallback.html" /></c> allows a Transition to
 dynamically retrieve the epicenter during a Transition.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setEpicenterCallback(android.transition.Transition.EpicenterCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInterpolator">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition SetInterpolator (Android.Animation.ITimeInterpolator interpolator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition SetInterpolator(class Android.Animation.ITimeInterpolator interpolator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInterpolator", "(Landroid/animation/TimeInterpolator;)Landroid/transition/Transition;", "GetSetInterpolator_Landroid_animation_TimeInterpolator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interpolator" Type="Android.Animation.ITimeInterpolator" />
      </Parameters>
      <Docs>
        <param name="interpolator">The time interpolator used by the transition</param>
        <summary>Sets the interpolator of this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the interpolator of this transition. By default, the interpolator
 is null, which means that the Animator created by the transition
 will have its own specified interpolator. If the interpolator of a
 Transition is set, that interpolator will override the Animator interpolator.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setInterpolator(android.animation.TimeInterpolator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMatchOrder">
      <MemberSignature Language="C#" Value="public virtual void SetMatchOrder (int[] matches);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMatchOrder(int32[] matches) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMatchOrder", "([I)V", "GetSetMatchOrder_arrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matches" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="matches">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStartDelay">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.Transition SetStartDelay (long startDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Transitions.Transition SetStartDelay(int64 startDelay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStartDelay", "(J)Landroid/transition/Transition;", "GetSetStartDelay_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Transition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDelay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="startDelay">The length of the delay, in milliseconds.</param>
        <summary>Sets the startDelay of this transition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the startDelay of this transition. By default, there is no delay
 (indicated by a negative number), which means that the Animator created by
 the transition will have its own specified startDelay. If the delay of a
 Transition is set, that delay will override the Animator delay.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#setStartDelay(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDelay">
      <MemberSignature Language="C#" Value="public virtual long StartDelay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StartDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStartDelay", "()J", "GetGetStartDelayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the startDelay set on this transition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the startDelay set on this transition. If no startDelay has been set,
 the returned value will be negative, indicating that resulting animators will
 retain their own startDelays.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getStartDelay()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetIds">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Java.Lang.Integer&gt; TargetIds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Java.Lang.Integer&gt; TargetIds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetIds", "()Ljava/util/List;", "GetGetTargetIdsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.Integer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the list of target IDs that this transition limits itself to
 tracking and animating.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of target IDs that this transition limits itself to
 tracking and animating. If the list is null or empty for
 <c><see cref="P:Android.Transitions.Transition.TargetIds" /></c>, <c><see cref="P:Android.Transitions.Transition.Targets" /></c>, <c><see cref="P:Android.Transitions.Transition.TargetNames" /></c>, and
 <c><see cref="P:Android.Transitions.Transition.TargetTypes" /></c> then this transition is
 not limited to specific views, and will handle changes to any views
 in the hierarchy of a scene change.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTargetIds()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; TargetNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; TargetNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetNames", "()Ljava/util/List;", "GetGetTargetNamesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the list of target transitionNames that this transition limits itself to
 tracking and animating.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of target transitionNames that this transition limits itself to
 tracking and animating. If the list is null or empty for
 <c><see cref="P:Android.Transitions.Transition.TargetIds" /></c>, <c><see cref="P:Android.Transitions.Transition.Targets" /></c>, <c><see cref="P:Android.Transitions.Transition.TargetNames" /></c>, and
 <c><see cref="P:Android.Transitions.Transition.TargetTypes" /></c> then this transition is
 not limited to specific views, and will handle changes to any views
 in the hierarchy of a scene change.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTargetNames()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Targets">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Views.View&gt; Targets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Views.View&gt; Targets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargets", "()Ljava/util/List;", "GetGetTargetsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Views.View&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the list of target views that this transition limits itself to
 tracking and animating.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of target views that this transition limits itself to
 tracking and animating. If the list is null or empty for
 <c><see cref="P:Android.Transitions.Transition.TargetIds" /></c>, <c><see cref="P:Android.Transitions.Transition.Targets" /></c>, <c><see cref="P:Android.Transitions.Transition.TargetNames" /></c>, and
 <c><see cref="P:Android.Transitions.Transition.TargetTypes" /></c> then this transition is
 not limited to specific views, and will handle changes to any views
 in the hierarchy of a scene change.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTargets()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Java.Lang.Class&gt; TargetTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Java.Lang.Class&gt; TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetTypes", "()Ljava/util/List;", "GetGetTargetTypesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Lang.Class&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the list of target transitionNames that this transition limits itself to
 tracking and animating.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the list of target transitionNames that this transition limits itself to
 tracking and animating. If the list is null or empty for
 <c><see cref="P:Android.Transitions.Transition.TargetIds" /></c>, <c><see cref="P:Android.Transitions.Transition.Targets" /></c>, <c><see cref="P:Android.Transitions.Transition.TargetNames" /></c>, and
 <c><see cref="P:Android.Transitions.Transition.TargetTypes" /></c> then this transition is
 not limited to specific views, and will handle changes to any views
 in the hierarchy of a scene change.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Transition.html#getTargetTypes()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
