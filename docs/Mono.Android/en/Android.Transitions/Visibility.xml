<Type Name="Visibility" FullName="Android.Transitions.Visibility">
  <TypeSignature Language="C#" Value="public abstract class Visibility : Android.Transitions.Transition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Visibility extends Android.Transitions.Transition" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Transitions.Transition</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/transition/Visibility", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>This transition tracks changes to the visibility of target views in the
 start and end scenes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This transition tracks changes to the visibility of target views in the
 start and end scenes. Visibility is determined not just by the
 <c><see cref="P:Android.Views.View.Visibility" /></c> state of views, but also whether
 views exist in the current view hierarchy. The class is intended to be a
 utility for subclasses such as <c><see cref="T:Android.Transitions.Fade" /></c>, which use this visibility
 information to determine the specific animations to run when visibility
 changes occur. Subclasses should implement one or both of the methods
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>,
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c> or
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>,
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/transition/Visibility.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Visibility ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#Visibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Visibility (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#Visibility(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Visibility (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureEndValues">
      <MemberSignature Language="C#" Value="public override void CaptureEndValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CaptureEndValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureEndValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureEndValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the end scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the end scene for the properties that this
 transition monitors. These values are then passed as the endValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#captureEndValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureStartValues">
      <MemberSignature Language="C#" Value="public override void CaptureStartValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CaptureStartValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureStartValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureStartValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the start scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the start scene for the properties that this
 transition monitors. These values are then passed as the startValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#captureStartValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public virtual bool IsVisible (Android.Transitions.TransitionValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsVisible(class Android.Transitions.TransitionValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isVisible", "(Landroid/transition/TransitionValues;)Z", "GetIsVisible_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="values">The TransitionValues object that holds the information by
 which visibility is determined.</param>
        <summary>Returns whether the view is 'visible' according to the given values
 object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the view is 'visible' according to the given values
 object. This is determined by testing the same properties in the values
 object that are used to determine whether the object is appearing or
 disappearing in the <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method. This method can be called by, for example, subclasses that want
 to know whether the object is visible in the same way that Visibility
 determines it for the actual animation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#isVisible(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public virtual Android.Transitions.VisibilityMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Transitions.VisibilityMode Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMode", "()I", "GetGetModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMode", "(I)V", "GetSetMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.VisibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether appearing and/or disappearing Views are supported.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#getMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether appearing and/or disappearing Views are supported.

 Returns whether appearing and/or disappearing Views are supported. A combination of
         <c><see cref="!:Android.Transitions.Visibility.MODE_IN" /></c> and <c><see cref="!:Android.Transitions.Visibility.MODE_OUT" /></c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#setMode(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Changes the transition to support appearing and/or disappearing Views, depending
 on <c>mode</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAppear">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator OnAppear (Android.Views.ViewGroup sceneRoot, Android.Views.View view, Android.Transitions.TransitionValues startValues, Android.Transitions.TransitionValues endValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator OnAppear(class Android.Views.ViewGroup sceneRoot, class Android.Views.View view, class Android.Transitions.TransitionValues startValues, class Android.Transitions.TransitionValues endValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAppear", "(Landroid/view/ViewGroup;Landroid/view/View;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;", "GetOnAppear_Landroid_view_ViewGroup_Landroid_view_View_Landroid_transition_TransitionValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the transition hierarchy</param>
        <param name="view">The View to make appear. This will be in the target scene's View hierarchy and
             will be VISIBLE.</param>
        <param name="startValues">The target values in the start scene</param>
        <param name="endValues">The target values in the end scene</param>
        <summary>The default implementation of this method returns a null Animator.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The default implementation of this method returns a null Animator. Subclasses should
 override this method to make targets appear with the desired transition. The
 method should only be called from
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAppear">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator OnAppear (Android.Views.ViewGroup sceneRoot, Android.Transitions.TransitionValues startValues, int startVisibility, Android.Transitions.TransitionValues endValues, int endVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator OnAppear(class Android.Views.ViewGroup sceneRoot, class Android.Transitions.TransitionValues startValues, int32 startVisibility, class Android.Transitions.TransitionValues endValues, int32 endVisibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAppear", "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;ILandroid/transition/TransitionValues;I)Landroid/animation/Animator;", "GetOnAppear_Landroid_view_ViewGroup_Landroid_transition_TransitionValues_ILandroid_transition_TransitionValues_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="startVisibility" Type="System.Int32" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endVisibility" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the transition hierarchy</param>
        <param name="startValues">The target values in the start scene</param>
        <param name="startVisibility">The target visibility in the start scene</param>
        <param name="endValues">The target values in the end scene</param>
        <param name="endVisibility">The target visibility in the end scene</param>
        <summary>The default implementation of this method calls
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The default implementation of this method calls
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.
 Subclasses should override this method or
 <c><see cref="M:Android.Transitions.Visibility.OnAppear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.
 if they need to create an Animator when targets appear.
 The method should only be called by the Visibility class; it is
 not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#onAppear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisappear">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator OnDisappear (Android.Views.ViewGroup sceneRoot, Android.Views.View view, Android.Transitions.TransitionValues startValues, Android.Transitions.TransitionValues endValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator OnDisappear(class Android.Views.ViewGroup sceneRoot, class Android.Views.View view, class Android.Transitions.TransitionValues startValues, class Android.Transitions.TransitionValues endValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisappear", "(Landroid/view/ViewGroup;Landroid/view/View;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;", "GetOnDisappear_Landroid_view_ViewGroup_Landroid_view_View_Landroid_transition_TransitionValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the transition hierarchy</param>
        <param name="view">The View to make disappear. This will be in the target scene's View
             hierarchy or in an <c><see cref="T:Android.Views.ViewGroupOverlay" /></c> and will be
             VISIBLE.</param>
        <param name="startValues">The target values in the start scene</param>
        <param name="endValues">The target values in the end scene</param>
        <summary>The default implementation of this method returns a null Animator.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">The default implementation of this method returns a null Animator. Subclasses should
 override this method to make targets disappear with the desired transition. The
 method should only be called from
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisappear">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.Animator OnDisappear (Android.Views.ViewGroup sceneRoot, Android.Transitions.TransitionValues startValues, int startVisibility, Android.Transitions.TransitionValues endValues, int endVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.Animator OnDisappear(class Android.Views.ViewGroup sceneRoot, class Android.Transitions.TransitionValues startValues, int32 startVisibility, class Android.Transitions.TransitionValues endValues, int32 endVisibility) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisappear", "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;ILandroid/transition/TransitionValues;I)Landroid/animation/Animator;", "GetOnDisappear_Landroid_view_ViewGroup_Landroid_transition_TransitionValues_ILandroid_transition_TransitionValues_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="startVisibility" Type="System.Int32" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endVisibility" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the transition hierarchy</param>
        <param name="startValues">The target values in the start scene</param>
        <param name="startVisibility">The target visibility in the start scene</param>
        <param name="endValues">The target values in the end scene</param>
        <param name="endVisibility">The target visibility in the end scene</param>
        <summary>Subclasses should override this method or
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>
 if they need to create an Animator when targets disappear.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses should override this method or
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>
 if they need to create an Animator when targets disappear.
 The method should only be called by the Visibility class; it is
 not intended to be called from external classes.
 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation of this method attempts to find a View to use to call
 <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>,
 based on the situation of the View in the View hierarchy. For example,
 if a View was simply removed from its parent, then the View will be added
 into a <c><see cref="T:Android.Views.ViewGroupOverlay" /></c> and passed as the <c>view</c>
 parameter in <c><see cref="M:Android.Transitions.Visibility.OnDisappear(Android.Views.ViewGroup,Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.
 If a visible View is changed to be <c><see cref="F:Android.Views.ViewStates.Gone" tool="ReplaceLinkValue" /></c> or <c><see cref="F:Android.Views.ViewStates.Invisible" tool="ReplaceLinkValue" /></c>,
 then it can be used as the <c>view</c> and the visibility will be changed
 to <c><see cref="T:Android.Views.ViewStates.Visible" tool="ReplaceLinkValue" /></c> for the duration of the animation. However, if a View
 is in a hierarchy which is also altering its visibility, the situation can be
 more complicated. In general, if a view that is no longer in the hierarchy in
 the end scene still has a parent (so its parent hierarchy was removed, but it
 was not removed from its parent), then it will be left alone to avoid side-effects from
 improperly removing it from its parent. The only exception to this is if
 the previous <c><see cref="T:Android.Transitions.Scene" /></c> was <c><see cref="M:Android.Transitions.Scene.GetSceneForLayout(Android.Views.ViewGroup,System.Int32,System.Int32)" /></c>, then it is considered
 safe to un-parent the starting scene view in order to make it disappear.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
