<Type Name="ChangeTransform" FullName="Android.Transitions.ChangeTransform">
  <TypeSignature Language="C#" Value="public class ChangeTransform : Android.Transitions.Transition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeTransform extends Android.Transitions.Transition" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Transitions.Transition</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/transition/ChangeTransform", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This Transition captures scale and rotation for Views before and after the
 scene change and animates those changes during the transition.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This Transition captures scale and rotation for Views before and after the
 scene change and animates those changes during the transition.

 A change in parent is handled as well by capturing the transforms from
 the parent before and after the scene change and animating those during the
 transition.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#ChangeTransform()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeTransform (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#ChangeTransform(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeTransform (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureEndValues">
      <MemberSignature Language="C#" Value="public override void CaptureEndValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CaptureEndValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureEndValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureEndValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the end scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the end scene for the properties that this
 transition monitors. These values are then passed as the endValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#captureEndValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureStartValues">
      <MemberSignature Language="C#" Value="public override void CaptureStartValues (Android.Transitions.TransitionValues transitionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CaptureStartValues(class Android.Transitions.TransitionValues transitionValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("captureStartValues", "(Landroid/transition/TransitionValues;)V", "GetCaptureStartValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="transitionValues">The holder for any values that the Transition
 wishes to store. Values are stored in the <c>values</c> field
 of this TransitionValues object and are keyed from
 a String value. For example, to store a view's rotation value,
 a transition might call
 <c>transitionValues.values.put("appname:transitionname:rotation",
 view.getRotation())</c>. The target view will already be stored in
 the transitionValues structure when this method is called.</param>
        <summary>Captures the values in the start scene for the properties that this
 transition monitors.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Captures the values in the start scene for the properties that this
 transition monitors. These values are then passed as the startValues
 structure in a later call to
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>.
 The main concern for an implementation is what the
 properties are that the transition cares about and what the values are
 for all of those properties. The start and end values will be compared
 later during the
 <c><see cref="M:Android.Transitions.Transition.CreateAnimator(Android.Views.ViewGroup,Android.Transitions.TransitionValues,Android.Transitions.TransitionValues)" /></c>
 method to determine what, if any, animations, should be run.

 </para>
          <para tool="javadoc-to-mdoc">Subclasses must implement this method. The method should only be called by the
 transition system; it is not intended to be called from external classes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#captureStartValues(android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent">
      <MemberSignature Language="C#" Value="public virtual bool Reparent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Reparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReparent", "()Z", "GetGetReparentHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReparent", "(Z)V", "GetSetReparent_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether parent changes will be tracked by the ChangeTransform.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#getReparent()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether parent changes will be tracked by the ChangeTransform. If parent
 changes are tracked, then the transform will adjust to the transforms of the
 different parents. If they aren't tracked, only the transforms of the transitioning
 view will be tracked. Default is true.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#setReparent(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether parent changes will be tracked by the ChangeTransform. If parent
 changes are tracked, then the transform will adjust to the transforms of the
 different parents. If they aren't tracked, only the transforms of the transitioning
 view will be tracked. Default is true.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReparentWithOverlay">
      <MemberSignature Language="C#" Value="public virtual bool ReparentWithOverlay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReparentWithOverlay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReparentWithOverlay", "()Z", "GetGetReparentWithOverlayHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReparentWithOverlay", "(Z)V", "GetSetReparentWithOverlay_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether changes to parent should use an overlay or not.</summary>
        <value>To be added.<list type="bullet"><item><term><c>true</c> when a changed parent should execute the transition
 inside the scene root's overlay or <c>false</c> if a parent change only
 affects the transform of the transitioning view.</term></item></list><list type="bullet"><item><term><c>true</c> when a changed parent should execute the transition
 inside the scene root's overlay or <c>false</c> if a parent change only
 affects the transform of the transitioning view.</term></item></list></value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#getReparentWithOverlay()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether changes to parent should use an overlay or not. When the parent
 change doesn't use an overlay, it affects the transforms of the child. The
 default value is <c>true</c>.

 </para>
          <para tool="javadoc-to-mdoc">Note: when Overlays are not used when a parent changes, a view can be clipped when
 it moves outside the bounds of its parent. Setting
 <c><see cref="M:Android.Views.ViewGroup.SetClipChildren(System.Boolean)" /></c> and
 <c><see cref="M:Android.Views.ViewGroup.SetClipToPadding(System.Boolean)" /></c> can help. Also, when
 Overlays are not used and the parent is animating its location, the position of the
 child view will be relative to its parent's final position, so it may appear to "jump"
 at the beginning.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/transition/ChangeTransform.html#setReparentWithOverlay(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether changes to parent should use an overlay or not. When the parent
 change doesn't use an overlay, it affects the transforms of the child. The
 default value is <c>true</c>.

 </para>
          <para tool="javadoc-to-mdoc">Note: when Overlays are not used when a parent changes, a view can be clipped when
 it moves outside the bounds of its parent. Setting
 <c><see cref="M:Android.Views.ViewGroup.SetClipChildren(System.Boolean)" /></c> and
 <c><see cref="M:Android.Views.ViewGroup.SetClipToPadding(System.Boolean)" /></c> can help. Also, when
 Overlays are not used and the parent is animating its location, the position of the
 child view will be relative to its parent's final position, so it may appear to "jump"
 at the beginning.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
