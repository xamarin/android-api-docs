<Type Name="ResourceBundle+Control" FullName="Java.Util.ResourceBundle+Control">
  <TypeSignature Language="C#" Value="public class ResourceBundle.Control : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ResourceBundle/Control extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.ResourceBundle.Control" />
  <TypeSignature Language="F#" Value="type ResourceBundle.Control = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/ResourceBundle$Control", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/ResourceBundle$Control", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <c>ResourceBundle.Control</c> defines a set of callback methods
            that are invoked by the <c>ResourceBundle#getBundle(String,
            Locale, ClassLoader, Control) ResourceBundle.getBundle</c> factory
            methods during the bundle loading process.</summary>
    <remarks>
      <para>
        <c>ResourceBundle.Control</c> defines a set of callback methods
            that are invoked by the <c>ResourceBundle#getBundle(String,
            Locale, ClassLoader, Control) ResourceBundle.getBundle</c> factory
            methods during the bundle loading process. In other words, a
            <c>ResourceBundle.Control</c> collaborates with the factory
            methods for loading resource bundles. The default implementation of
            the callback methods provides the information necessary for the
            factory methods to perform the default behavior.</para>
      <para>In addition to the callback methods, the <c>#toBundleName(String, Locale) toBundleName</c> and <c>#toResourceName(String, String) toResourceName</c> methods are defined
            primarily for convenience in implementing the callback
            methods. However, the <c>toBundleName</c> method could be
            overridden to provide different conventions in the organization and
            packaging of localized resources.  The <c>toResourceName</c>
            method is <c>final</c> to avoid use of wrong resource and class
            name separators.</para>
      <para>Two factory methods, <c>#getControl(List)</c> and <c>#getNoFallbackControl(List)</c>, provide
            <c>ResourceBundle.Control</c> instances that implement common
            variations of the default bundle loading process.</para>
      <para>The formats returned by the <c>Control#getFormats(String)
            getFormats</c> method and candidate locales returned by the <c>ResourceBundle.Control#getCandidateLocales(String, Locale)
            getCandidateLocales</c> method must be consistent in all
            <c>ResourceBundle.getBundle</c> invocations for the same base
            bundle. Otherwise, the <c>ResourceBundle.getBundle</c> methods
            may return unintended bundles. For example, if only
            <c>"java.class"</c> is returned by the <c>getFormats</c>
            method for the first call to <c>ResourceBundle.getBundle</c>
            and only <c>"java.properties"</c> for the second call, then the
            second call will return the class-based one that has been cached
            during the first call.</para>
      <para>A <c>ResourceBundle.Control</c> instance must be thread-safe
            if it's simultaneously used by multiple threads.
            <c>ResourceBundle.getBundle</c> does not synchronize to call
            the <c>ResourceBundle.Control</c> methods. The default
            implementations of the methods are thread-safe.</para>
      <para>Applications can specify <c>ResourceBundle.Control</c>
            instances returned by the <c>getControl</c> factory methods or
            created from a subclass of <c>ResourceBundle.Control</c> to
            customize the bundle loading process. The following are examples of
            changing the default bundle loading process.</para>
      <para>&lt;b&gt;Example 1&lt;/b&gt;</para>
      <para>The following code lets <c>ResourceBundle.getBundle</c> look
            up only properties-based resources.</para>
      <code lang="text/java">import java.util.*;
            import static java.util.ResourceBundle.Control.*;
            ...
            ResourceBundle bundle =
              ResourceBundle.getBundle("MyResources", new Locale("fr", "CH"),
                                       ResourceBundle.Control.getControl(FORMAT_PROPERTIES));
            </code>
      <para>Given the resource bundles in the example in
            the <c>ResourceBundle.getBundle</c> description, this
            <c>ResourceBundle.getBundle</c> call loads
            <c>MyResources_fr_CH.properties</c> whose parent is
            <c>MyResources_fr.properties</c> whose parent is
            <c>MyResources.properties</c>. (<c>MyResources_fr_CH.properties</c>
            is not hidden, but <c>MyResources_fr_CH.class</c> is.)</para>
      <para>&lt;b&gt;Example 2&lt;/b&gt;</para>
      <para>The following is an example of loading XML-based bundles
            using <c>Properties#loadFromXML(java.io.InputStream)
            Properties.loadFromXML</c>.</para>
      <code lang="text/java">ResourceBundle rb = ResourceBundle.getBundle("Messages",
                new ResourceBundle.Control() {
                    public List&amp;lt;String&amp;gt; getFormats(String baseName) {
                        if (baseName == null)
                            throw new NullPointerException();
                        return Arrays.asList("xml");
                    }
                    public ResourceBundle newBundle(String baseName,
                                                    Locale locale,
                                                    String format,
                                                    ClassLoader loader,
                                                    boolean reload)
                                     throws IllegalAccessException,
                                            InstantiationException,
                                            IOException {
                        if (baseName == null || locale == null
                              || format == null || loader == null)
                            throw new NullPointerException();
                        ResourceBundle bundle = null;
                        if (format.equals("xml")) {
                            String bundleName = toBundleName(baseName, locale);
                            String resourceName = toResourceName(bundleName, format);
                            InputStream stream = null;
                            if (reload) {
                                URL url = loader.getResource(resourceName);
                                if (url != null) {
                                    URLConnection connection = url.openConnection();
                                    if (connection != null) {
                                        // Disable caches to get fresh data for
                                        // reloading.
                                        connection.setUseCaches(false);
                                        stream = connection.getInputStream();
                                    }
                                }
                            } else {
                                stream = loader.getResourceAsStream(resourceName);
                            }
                            if (stream != null) {
                                BufferedInputStream bis = new BufferedInputStream(stream);
                                bundle = new XMLResourceBundle(bis);
                                bis.close();
                            }
                        }
                        return bundle;
                    }
                });
            
            ...
            
            private static class XMLResourceBundle extends ResourceBundle {
                private Properties props;
                XMLResourceBundle(InputStream stream) throws IOException {
                    props = new Properties();
                    props.loadFromXML(stream);
                }
                protected Object handleGetObject(String key) {
                    return props.getProperty(key);
                }
                public Enumeration&amp;lt;String&amp;gt; getKeys() {
                    ...
                }
            }
            </code>
      <para>Added in 1.6.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Control ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Sole constructor.</summary>
        <remarks>
          <para>Sole constructor. (For invocation by subclass constructors,
            typically implicit.)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#ResourceBundle$Control()" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.ResourceBundle$Control()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Control (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.ResourceBundle.Control : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.ResourceBundle.Control" Usage="new Java.Util.ResourceBundle.Control (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatClass">
      <MemberSignature Language="C#" Value="public static System.Collections.IList FormatClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IList FormatClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.FormatClass" />
      <MemberSignature Language="F#" Value="static member FormatClass : System.Collections.IList" Usage="Java.Util.ResourceBundle.Control.FormatClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FORMAT_CLASS")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FORMAT_CLASS")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The class-only format <c>List</c> containing
            <c>"java.class"</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The class-only format <c>List</c> containing
            <c>"java.class"</c>. This <c>List</c> is unmodifiable.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#FORMAT_CLASS" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.FORMAT_CLASS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="FormatDefault">
      <MemberSignature Language="C#" Value="public static System.Collections.IList FormatDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IList FormatDefault" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.FormatDefault" />
      <MemberSignature Language="F#" Value="static member FormatDefault : System.Collections.IList" Usage="Java.Util.ResourceBundle.Control.FormatDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FORMAT_DEFAULT")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FORMAT_DEFAULT")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default format <c>List</c>, which contains the strings
            <c>"java.class"</c> and <c>"java.properties"</c>, in
            this order.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The default format <c>List</c>, which contains the strings
            <c>"java.class"</c> and <c>"java.properties"</c>, in
            this order. This <c>List</c> is unmodifiable.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#FORMAT_DEFAULT" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.FORMAT_DEFAULT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="FormatProperties">
      <MemberSignature Language="C#" Value="public static System.Collections.IList FormatProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.IList FormatProperties" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.FormatProperties" />
      <MemberSignature Language="F#" Value="static member FormatProperties : System.Collections.IList" Usage="Java.Util.ResourceBundle.Control.FormatProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("FORMAT_PROPERTIES")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("FORMAT_PROPERTIES")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The properties-only format <c>List</c> containing
            <c>"java.properties"</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The properties-only format <c>List</c> containing
            <c>"java.properties"</c>. This <c>List</c> is unmodifiable.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#FORMAT_PROPERTIES" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.FORMAT_PROPERTIES</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetCandidateLocales">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Java.Util.Locale&gt;? GetCandidateLocales (string baseName, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Java.Util.Locale&gt; GetCandidateLocales(string baseName, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetCandidateLocales(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="abstract member GetCandidateLocales : string * Java.Util.Locale -&gt; System.Collections.Generic.IList&lt;Java.Util.Locale&gt;&#xA;override this.GetCandidateLocales : string * Java.Util.Locale -&gt; System.Collections.Generic.IList&lt;Java.Util.Locale&gt;" Usage="control.GetCandidateLocales (baseName, locale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCandidateLocales", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;", "GetGetCandidateLocales_Ljava_lang_String_Ljava_util_Locale_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCandidateLocales", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;", "GetGetCandidateLocales_Ljava_lang_String_Ljava_util_Locale_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Java.Util.Locale&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="baseName">the base name of the resource bundle, a fully
                   qualified class name</param>
        <param name="locale">the locale for which a resource bundle is desired</param>
        <summary>Returns a <c>List</c> of <c>Locale</c>s as candidate
            locales for <c>baseName</c> and <c>locale</c>.</summary>
        <returns>a <c>List</c> of candidate
                   <c>Locale</c>s for the given <c>locale</c></returns>
        <remarks>
          <para>Returns a <c>List</c> of <c>Locale</c>s as candidate
            locales for <c>baseName</c> and <c>locale</c>. This
            method is called by the <c>ResourceBundle.getBundle</c>
            factory method each time the factory method tries finding a
            resource bundle for a target <c>Locale</c>.</para>
          <para>The sequence of the candidate locales also corresponds to the
            runtime resource lookup path (also known as the <i>parent
            chain</i>), if the corresponding resource bundles for the
            candidate locales exist and their parents are not defined by
            loaded resource bundles themselves.  The last element of the list
            must be a Locale#ROOT root locale if it is desired to
            have the base bundle as the terminal of the parent chain.</para>
          <para>If the given locale is equal to <c>Locale.ROOT</c> (the
            root locale), a <c>List</c> containing only the root
            <c>Locale</c> must be returned. In this case, the
            <c>ResourceBundle.getBundle</c> factory method loads only
            the base bundle as the resulting resource bundle.</para>
          <para>It is not a requirement to return an immutable (unmodifiable)
            <c>List</c>. However, the returned <c>List</c> must not
            be mutated after it has been returned by
            <c>getCandidateLocales</c>.</para>
          <para>The default implementation returns a <c>List</c> containing
            <c>Locale</c>s using the rules described below.  In the
            description below, &lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; and &lt;em&gt;V&lt;/em&gt;
            respectively represent non-empty language, script, country, and
            variant.  For example, [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;] represents a
            <c>Locale</c> that has non-empty values only for language and
            country.  The form &lt;em&gt;L&lt;/em&gt;("xx") represents the (non-empty)
            language value is "xx".  For all cases, <c>Locale</c>s whose
            final component values are empty strings are omitted.
            
            &lt;ol&gt;&lt;li&gt;For an input <c>Locale</c> with an empty script value,
            append candidate <c>Locale</c>s by omitting the final component
            one by one as below:
            
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V&lt;/em&gt;] &lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;] &lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;] &lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            
            &lt;li&gt;For an input <c>Locale</c> with a non-empty script value,
            append candidate <c>Locale</c>s by omitting the final component
            up to language, then append candidates generated from the
            <c>Locale</c> with country and variant restored:
            
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            
            &lt;li&gt;For an input <c>Locale</c> with a variant value consisting
            of multiple subtags separated by underscore, generate candidate
            <c>Locale</c>s by omitting the variant subtags one by one, then
            insert them after every occurrence of <c> Locale</c>s with the
            full variant value in the original list.  For example, if
            the variant consists of two subtags &lt;em&gt;V1&lt;/em&gt; and &lt;em&gt;V2&lt;/em&gt;:
            
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V1&lt;/em&gt;, &lt;em&gt;V2&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V1&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;S&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V1&lt;/em&gt;, &lt;em&gt;V2&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;V1&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            
            &lt;li&gt;Special cases for Chinese.  When an input <c>Locale</c> has the
            language "zh" (Chinese) and an empty script value, either "Hans" (Simplified) or
            "Hant" (Traditional) might be supplied, depending on the country.
            When the country is "CN" (China) or "SG" (Singapore), "Hans" is supplied.
            When the country is "HK" (Hong Kong SAR China), "MO" (Macau SAR China),
            or "TW" (Taiwan), "Hant" is supplied.  For all other countries or when the country
            is empty, no script is supplied.  For example, for <c>Locale("zh", "CN")
            </c>, the candidate list will be:
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;S&lt;/em&gt;("Hans"), &lt;em&gt;C&lt;/em&gt;("CN")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;S&lt;/em&gt;("Hans")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;C&lt;/em&gt;("CN")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh")]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;
            
            For <c>Locale("zh", "TW")</c>, the candidate list will be:
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;S&lt;/em&gt;("Hant"), &lt;em&gt;C&lt;/em&gt;("TW")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;S&lt;/em&gt;("Hant")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh"), &lt;em&gt;C&lt;/em&gt;("TW")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("zh")]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            
            &lt;li&gt;Special cases for Norwegian.  Both <c>Locale("no", "NO",
            "NY")</c> and <c>Locale("nn", "NO")</c> represent Norwegian
            Nynorsk.  When a locale's language is "nn", the standard candidate
            list is generated up to [&lt;em&gt;L&lt;/em&gt;("nn")], and then the following
            candidates are added:
            
            &lt;ul&gt;&lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no"), &lt;em&gt;C&lt;/em&gt;("NO"), &lt;em&gt;V&lt;/em&gt;("NY")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no"), &lt;em&gt;C&lt;/em&gt;("NO")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no")]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;
            
            If the locale is exactly <c>Locale("no", "NO", "NY")</c>, it is first
            converted to <c>Locale("nn", "NO")</c> and then the above procedure is
            followed.</para>
          <para>Also, Java treats the language "no" as a synonym of Norwegian
            Bokm&amp;#xE5;l "nb".  Except for the single case <c>Locale("no",
            "NO", "NY")</c> (handled above), when an input <c>Locale</c>
            has language "no" or "nb", candidate <c>Locale</c>s with
            language code "no" and "nb" are interleaved, first using the
            requested language, then using its synonym. For example,
            <c>Locale("nb", "NO", "POSIX")</c> generates the following
            candidate list:
            
            &lt;ul&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("nb"), &lt;em&gt;C&lt;/em&gt;("NO"), &lt;em&gt;V&lt;/em&gt;("POSIX")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no"), &lt;em&gt;C&lt;/em&gt;("NO"), &lt;em&gt;V&lt;/em&gt;("POSIX")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("nb"), &lt;em&gt;C&lt;/em&gt;("NO")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no"), &lt;em&gt;C&lt;/em&gt;("NO")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("nb")]&lt;/li&gt;
            &lt;li&gt; [&lt;em&gt;L&lt;/em&gt;("no")]&lt;/li&gt;
            &lt;li&gt; <c>Locale.ROOT</c>&lt;/li&gt;
            &lt;/ul&gt;
            
            <c>Locale("no", "NO", "POSIX")</c> would generate the same list
            except that locales with "no" would appear before the corresponding
            locales with "nb".&lt;/li&gt;
            &lt;/ol&gt;</para>
          <para>The default implementation uses an <c>ArrayList</c> that
            overriding implementations may modify before returning it to the
            caller. However, a subclass must not modify it after it has
            been returned by <c>getCandidateLocales</c>.</para>
          <para>For example, if the given <c>baseName</c> is "Messages"
            and the given <c>locale</c> is
            <c>Locale("ja",&amp;nbsp;"",&amp;nbsp;"XX")</c>, then a
            <c>List</c> of <c>Locale</c>s:</para>
          <code lang="text/java">Locale("ja", "", "XX")
                Locale("ja")
                Locale.ROOT
            </code>
          <para>is returned. And if the resource bundles for the "ja" and
            "" <c>Locale</c>s are found, then the runtime resource
            lookup path (parent chain) is:</para>
          <code lang="text/java">{@code
                Messages_ja -&gt; Messages
            }</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#getCandidateLocales(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.getCandidateLocales(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetControl">
      <MemberSignature Language="C#" Value="public static Java.Util.ResourceBundle.Control GetControl (System.Collections.Generic.IList&lt;string&gt;? formats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.ResourceBundle/Control GetControl(class System.Collections.Generic.IList`1&lt;string&gt; formats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetControl(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="F#" Value="static member GetControl : System.Collections.Generic.IList&lt;string&gt; -&gt; Java.Util.ResourceBundle.Control" Usage="Java.Util.ResourceBundle.Control.GetControl formats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ResourceBundle+Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formats" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="formats">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFallbackLocale">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Locale GetFallbackLocale (string baseName, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Locale GetFallbackLocale(string baseName, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetFallbackLocale(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="abstract member GetFallbackLocale : string * Java.Util.Locale -&gt; Java.Util.Locale&#xA;override this.GetFallbackLocale : string * Java.Util.Locale -&gt; Java.Util.Locale" Usage="control.GetFallbackLocale (baseName, locale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFallbackLocale", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;", "GetGetFallbackLocale_Ljava_lang_String_Ljava_util_Locale_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFallbackLocale", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;", "GetGetFallbackLocale_Ljava_lang_String_Ljava_util_Locale_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="baseName">the base name of the resource bundle, a fully
                   qualified class name for which
                   <c>ResourceBundle.getBundle</c> has been
                   unable to find any resource bundles (except for the
                   base bundle)</param>
        <param name="locale">the <c>Locale</c> for which
                   <c>ResourceBundle.getBundle</c> has been
                   unable to find any resource bundles (except for the
                   base bundle)</param>
        <summary>Returns a <c>Locale</c> to be used as a fallback locale for
            further resource bundle searches by the
            <c>ResourceBundle.getBundle</c> factory method.</summary>
        <returns>a <c>Locale</c> for the fallback search,
                   or <c>null</c> if no further fallback search
                   is desired.</returns>
        <remarks>
          <para>Returns a <c>Locale</c> to be used as a fallback locale for
            further resource bundle searches by the
            <c>ResourceBundle.getBundle</c> factory method. This method
            is called from the factory method every time when no resulting
            resource bundle has been found for <c>baseName</c> and
            <c>locale</c>, where locale is either the parameter for
            <c>ResourceBundle.getBundle</c> or the previous fallback
            locale returned by this method.</para>
          <para>The method returns <c>null</c> if no further fallback
            search is desired.</para>
          <para>The default implementation returns the Locale#getDefault() default &lt;code&gt;Locale&lt;/code&gt; if the given
            <c>locale</c> isn't the default one.  Otherwise,
            <c>null</c> is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#getFallbackLocale(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.getFallbackLocale(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt;? GetFormats (string baseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetFormats(string baseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetFormats(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : string -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetFormats : string -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="control.GetFormats baseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFormats", "(Ljava/lang/String;)Ljava/util/List;", "GetGetFormats_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFormats", "(Ljava/lang/String;)Ljava/util/List;", "GetGetFormats_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseName">the base name of the resource bundle, a fully qualified class
                   name</param>
        <summary>Returns a <c>List</c> of <c>String</c>s containing
            formats to be used to load resource bundles for the given
            <c>baseName</c>.</summary>
        <returns>a <c>List</c> of <c>String</c>s containing
                   formats for loading resource bundles.</returns>
        <remarks>
          <para>Returns a <c>List</c> of <c>String</c>s containing
            formats to be used to load resource bundles for the given
            <c>baseName</c>. The <c>ResourceBundle.getBundle</c>
            factory method tries to load resource bundles with formats in the
            order specified by the list. The list returned by this method
            must have at least one <c>String</c>. The predefined
            formats are <c>"java.class"</c> for class-based resource
            bundles and <c>"java.properties"</c> for PropertyResourceBundle properties-based ones. Strings starting
            with <c>"java."</c> are reserved for future extensions and
            must not be used by application-defined formats.</para>
          <para>It is not a requirement to return an immutable (unmodifiable)
            <c>List</c>.  However, the returned <c>List</c> must
            not be mutated after it has been returned by
            <c>getFormats</c>.</para>
          <para>The default implementation returns <c>#FORMAT_DEFAULT</c> so
            that the <c>ResourceBundle.getBundle</c> factory method
            looks up first class-based resource bundles, then
            properties-based ones.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#getFormats(java.lang.String)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.getFormats(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetNoFallbackControl">
      <MemberSignature Language="C#" Value="public static Java.Util.ResourceBundle.Control GetNoFallbackControl (System.Collections.Generic.IList&lt;string&gt;? formats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.ResourceBundle/Control GetNoFallbackControl(class System.Collections.Generic.IList`1&lt;string&gt; formats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetNoFallbackControl(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="F#" Value="static member GetNoFallbackControl : System.Collections.Generic.IList&lt;string&gt; -&gt; Java.Util.ResourceBundle.Control" Usage="Java.Util.ResourceBundle.Control.GetNoFallbackControl formats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getNoFallbackControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getNoFallbackControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ResourceBundle+Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formats" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="formats">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTimeToLive">
      <MemberSignature Language="C#" Value="public virtual long GetTimeToLive (string baseName, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetTimeToLive(string baseName, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.GetTimeToLive(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="abstract member GetTimeToLive : string * Java.Util.Locale -&gt; int64&#xA;override this.GetTimeToLive : string * Java.Util.Locale -&gt; int64" Usage="control.GetTimeToLive (baseName, locale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getTimeToLive", "(Ljava/lang/String;Ljava/util/Locale;)J", "GetGetTimeToLive_Ljava_lang_String_Ljava_util_Locale_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getTimeToLive", "(Ljava/lang/String;Ljava/util/Locale;)J", "GetGetTimeToLive_Ljava_lang_String_Ljava_util_Locale_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="baseName">the base name of the resource bundle for which the
                   expiration value is specified.</param>
        <param name="locale">the locale of the resource bundle for which the
                   expiration value is specified.</param>
        <summary>Returns the time-to-live (TTL) value for resource bundles that
            are loaded under this
            <c>ResourceBundle.Control</c>.</summary>
        <returns>the time (0 or a positive millisecond offset from the
                   cached time) to get loaded bundles expired in the cache,
                   <c>#TTL_NO_EXPIRATION_CONTROL</c> to disable the
                   expiration control, or <c>#TTL_DONT_CACHE</c> to disable
                   caching.</returns>
        <remarks>
          <para>Returns the time-to-live (TTL) value for resource bundles that
            are loaded under this
            <c>ResourceBundle.Control</c>. Positive time-to-live values
            specify the number of milliseconds a bundle can remain in the
            cache without being validated against the source data from which
            it was constructed. The value 0 indicates that a bundle must be
            validated each time it is retrieved from the cache. <c>#TTL_DONT_CACHE</c> specifies that loaded resource bundles are not
            put in the cache. <c>#TTL_NO_EXPIRATION_CONTROL</c> specifies
            that loaded resource bundles are put in the cache with no
            expiration control.</para>
          <para>The expiration affects only the bundle loading process by the
            <c>ResourceBundle.getBundle</c> factory method.  That is,
            if the factory method finds a resource bundle in the cache that
            has expired, the factory method calls the <c>#needsReload(String, Locale, String, ClassLoader, ResourceBundle,
            long) needsReload</c> method to determine whether the resource
            bundle needs to be reloaded. If <c>needsReload</c> returns
            <c>true</c>, the cached resource bundle instance is removed
            from the cache. Otherwise, the instance stays in the cache,
            updated with the new TTL value returned by this method.</para>
          <para>All cached resource bundles are subject to removal from the
            cache due to memory constraints of the runtime environment.
            Returning a large positive value doesn't mean to lock loaded
            resource bundles in the cache.</para>
          <para>The default implementation returns <c>#TTL_NO_EXPIRATION_CONTROL</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#getTimeToLive(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.getTimeToLive(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.ResourceBundle.Control.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsReload">
      <MemberSignature Language="C#" Value="public virtual bool NeedsReload (string baseName, Java.Util.Locale locale, string format, Java.Lang.ClassLoader loader, Java.Util.ResourceBundle bundle, long loadTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsReload(string baseName, class Java.Util.Locale locale, string format, class Java.Lang.ClassLoader loader, class Java.Util.ResourceBundle bundle, int64 loadTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.NeedsReload(System.String,Java.Util.Locale,System.String,Java.Lang.ClassLoader,Java.Util.ResourceBundle,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member NeedsReload : string * Java.Util.Locale * string * Java.Lang.ClassLoader * Java.Util.ResourceBundle * int64 -&gt; bool&#xA;override this.NeedsReload : string * Java.Util.Locale * string * Java.Lang.ClassLoader * Java.Util.ResourceBundle * int64 -&gt; bool" Usage="control.NeedsReload (baseName, locale, format, loader, bundle, loadTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("needsReload", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z", "GetNeedsReload_Ljava_lang_String_Ljava_util_Locale_Ljava_lang_String_Ljava_lang_ClassLoader_Ljava_util_ResourceBundle_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("needsReload", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z", "GetNeedsReload_Ljava_lang_String_Ljava_util_Locale_Ljava_lang_String_Ljava_lang_ClassLoader_Ljava_util_ResourceBundle_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="loader" Type="Java.Lang.ClassLoader" />
        <Parameter Name="bundle" Type="Java.Util.ResourceBundle" />
        <Parameter Name="loadTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="baseName">the base bundle name of the resource bundle, a
                   fully qualified class name</param>
        <param name="locale">the locale for which the resource bundle
                   should be instantiated</param>
        <param name="format">the resource bundle format to be loaded</param>
        <param name="loader">the <c>ClassLoader</c> to use to load the bundle</param>
        <param name="bundle">the resource bundle instance that has been expired
                   in the cache</param>
        <param name="loadTime">the time when <c>bundle</c> was loaded and put
                   in the cache</param>
        <summary>Determines if the expired <c>bundle</c> in the cache needs
            to be reloaded based on the loading time given by
            <c>loadTime</c> or some other criteria.</summary>
        <returns>
          <c>true</c> if the expired bundle needs to be
                   reloaded; <c>false</c> otherwise.</returns>
        <remarks>
          <para>Determines if the expired <c>bundle</c> in the cache needs
            to be reloaded based on the loading time given by
            <c>loadTime</c> or some other criteria. The method returns
            <c>true</c> if reloading is required; <c>false</c>
            otherwise. <c>loadTime</c> is a millisecond offset since
            the  &lt;c&gt;Calendar&lt;/c&gt;
            Epoch.</para>
          <para>The calling <c>ResourceBundle.getBundle</c> factory method
            calls this method on the <c>ResourceBundle.Control</c>
            instance used for its current invocation, not on the instance
            used in the invocation that originally loaded the resource
            bundle.</para>
          <para>The default implementation compares <c>loadTime</c> and
            the last modified time of the source data of the resource
            bundle. If it's determined that the source data has been modified
            since <c>loadTime</c>, <c>true</c> is
            returned. Otherwise, <c>false</c> is returned. This
            implementation assumes that the given <c>format</c> is the
            same string as its file suffix if it's not one of the default
            formats, <c>"java.class"</c> or
            <c>"java.properties"</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#needsReload(java.lang.String,%20java.util.Locale,%20java.lang.String,%20java.lang.ClassLoader,%20java.util.ResourceBundle,%20long)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.needsReload(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="NewBundle">
      <MemberSignature Language="C#" Value="public virtual Java.Util.ResourceBundle NewBundle (string baseName, Java.Util.Locale locale, string format, Java.Lang.ClassLoader loader, bool reload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.ResourceBundle NewBundle(string baseName, class Java.Util.Locale locale, string format, class Java.Lang.ClassLoader loader, bool reload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.NewBundle(System.String,Java.Util.Locale,System.String,Java.Lang.ClassLoader,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member NewBundle : string * Java.Util.Locale * string * Java.Lang.ClassLoader * bool -&gt; Java.Util.ResourceBundle&#xA;override this.NewBundle : string * Java.Util.Locale * string * Java.Lang.ClassLoader * bool -&gt; Java.Util.ResourceBundle" Usage="control.NewBundle (baseName, locale, format, loader, reload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("newBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;", "GetNewBundle_Ljava_lang_String_Ljava_util_Locale_Ljava_lang_String_Ljava_lang_ClassLoader_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("newBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;", "GetNewBundle_Ljava_lang_String_Ljava_util_Locale_Ljava_lang_String_Ljava_lang_ClassLoader_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ResourceBundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="loader" Type="Java.Lang.ClassLoader" />
        <Parameter Name="reload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseName">the base bundle name of the resource bundle, a fully
                   qualified class name</param>
        <param name="locale">the locale for which the resource bundle should be
                   instantiated</param>
        <param name="format">the resource bundle format to be loaded</param>
        <param name="loader">the <c>ClassLoader</c> to use to load the bundle</param>
        <param name="reload">the flag to indicate bundle reloading; <c>true</c>
                   if reloading an expired resource bundle,
                   <c>false</c> otherwise</param>
        <summary>Instantiates a resource bundle for the given bundle name of the
            given format and locale, using the given class loader if
            necessary.</summary>
        <returns>the resource bundle instance,
                   or <c>null</c> if none could be found.</returns>
        <remarks>
          <para>Instantiates a resource bundle for the given bundle name of the
            given format and locale, using the given class loader if
            necessary. This method returns <c>null</c> if there is no
            resource bundle available for the given parameters. If a resource
            bundle can't be instantiated due to an unexpected error, the
            error must be reported by throwing an <c>Error</c> or
            <c>Exception</c> rather than simply returning
            <c>null</c>.</para>
          <para>If the <c>reload</c> flag is <c>true</c>, it
            indicates that this method is being called because the previously
            loaded resource bundle has expired.</para>
          <para>The default implementation instantiates a
            <c>ResourceBundle</c> as follows.
            
            &lt;ul&gt;
            
            &lt;li&gt;The bundle name is obtained by calling <c>#toBundleName(String, Locale) toBundleName(baseName,
            locale)</c>.&lt;/li&gt;
            
            &lt;li&gt;If <c>format</c> is <c>"java.class"</c>, the
            <c>Class</c> specified by the bundle name is loaded with the
            given class loader. If the <c>Class</c> is found and accessible
            then the <c>ResourceBundle</c> is instantiated.  The
            resource bundle is accessible if the package of the bundle class file
            is open unconditionally; otherwise, <c>IllegalAccessException</c>
            will be thrown.
            Note that the <c>reload</c> flag is ignored for loading
            class-based resource bundles in this default implementation.
            &lt;/li&gt;
            
            &lt;li&gt;If <c>format</c> is <c>"java.properties"</c>,
            <c>#toResourceName(String, String) toResourceName(bundlename,
            "properties")</c> is called to get the resource name.
            If <c>reload</c> is <c>true</c>, <c>ClassLoader#getResource(String) load.getResource</c> is called
            to get a <c>URL</c> for creating a <c>URLConnection</c>. This <c>URLConnection</c> is used to
            URLConnection#setUseCaches(boolean) disable the
            caches of the underlying resource loading layers,
            and to URLConnection#getInputStream() get an
            &lt;code&gt;InputStream&lt;/code&gt;.
            Otherwise, <c>ClassLoader#getResourceAsStream(String)
            loader.getResourceAsStream</c> is called to get an <c>InputStream</c>. Then, a <c>PropertyResourceBundle</c> is constructed with the
            <c>InputStream</c>.&lt;/li&gt;
            
            &lt;li&gt;If <c>format</c> is neither <c>"java.class"</c>
            nor <c>"java.properties"</c>, an
            <c>IllegalArgumentException</c> is thrown.&lt;/li&gt;
            
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#newBundle(java.lang.String,%20java.util.Locale,%20java.lang.String,%20java.lang.ClassLoader,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.newBundle(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalAccessException">if we can not access resources</exception>
        <exception cref="T:Java.Lang.InstantiationException">if we can not instantiate a resource class</exception>
        <exception cref="T:Java.IO.IOException">if other I/O exception happens
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.ResourceBundle.Control.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ResourceBundle.Control.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.ResourceBundle.Control.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created andÂ shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>Â and used according to terms described in theÂ <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBundleName">
      <MemberSignature Language="C#" Value="public virtual string ToBundleName (string baseName, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToBundleName(string baseName, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.ToBundleName(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="abstract member ToBundleName : string * Java.Util.Locale -&gt; string&#xA;override this.ToBundleName : string * Java.Util.Locale -&gt; string" Usage="control.ToBundleName (baseName, locale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toBundleName", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", "GetToBundleName_Ljava_lang_String_Ljava_util_Locale_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toBundleName", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", "GetToBundleName_Ljava_lang_String_Ljava_util_Locale_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="baseName">the base name of the resource bundle, a fully
                   qualified class name</param>
        <param name="locale">the locale for which a resource bundle should be
                   loaded</param>
        <summary>Converts the given <c>baseName</c> and <c>locale</c>
            to the bundle name.</summary>
        <returns>the bundle name for the resource bundle</returns>
        <remarks>
          <para>Converts the given <c>baseName</c> and <c>locale</c>
            to the bundle name. This method is called from the default
            implementation of the <c>#newBundle(String, Locale, String,
            ClassLoader, boolean) newBundle</c> and <c>#needsReload(String,
            Locale, String, ClassLoader, ResourceBundle, long) needsReload</c>
            methods.</para>
          <para>This implementation returns the following value:</para>
          <code lang="text/java">baseName + "_" + language + "_" + script + "_" + country + "_" + variant
            </code>
          <para>where <c>language</c>, <c>script</c>, <c>country</c>,
            and <c>variant</c> are the language, script, country, and variant
            values of <c>locale</c>, respectively. Final component values that
            are empty Strings are omitted along with the preceding '_'.  When the
            script is empty, the script value is omitted along with the preceding '_'.
            If all of the values are empty strings, then <c>baseName</c>
            is returned.</para>
          <para>For example, if <c>baseName</c> is
            <c>"baseName"</c> and <c>locale</c> is
            <c>Locale("ja",&amp;nbsp;"",&amp;nbsp;"XX")</c>, then
            <c>"baseName_ja_&amp;thinsp;_XX"</c> is returned. If the given
            locale is <c>Locale("en")</c>, then
            <c>"baseName_en"</c> is returned.</para>
          <para>Overriding this method allows applications to use different
            conventions in the organization and packaging of localized
            resources.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#toBundleName(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.toBundleName(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ToResourceName">
      <MemberSignature Language="C#" Value="public string ToResourceName (string bundleName, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToResourceName(string bundleName, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ResourceBundle.Control.ToResourceName(System.String,System.String)" />
      <MemberSignature Language="F#" Value="member this.ToResourceName : string * string -&gt; string" Usage="control.ToResourceName (bundleName, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toResourceName", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toResourceName", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bundleName" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bundleName">the bundle name</param>
        <param name="suffix">the file type suffix</param>
        <summary>Converts the given <c>bundleName</c> to the form required
            by the <c>ClassLoader#getResource ClassLoader.getResource</c>
            method by replacing all occurrences of <c>'.'</c> in
            <c>bundleName</c> with <c>'/'</c> and appending a
            <c>'.'</c> and the given file <c>suffix</c>.</summary>
        <returns>the converted resource name</returns>
        <remarks>
          <para>Converts the given <c>bundleName</c> to the form required
            by the <c>ClassLoader#getResource ClassLoader.getResource</c>
            method by replacing all occurrences of <c>'.'</c> in
            <c>bundleName</c> with <c>'/'</c> and appending a
            <c>'.'</c> and the given file <c>suffix</c>. For
            example, if <c>bundleName</c> is
            <c>"foo.bar.MyResources_ja_JP"</c> and <c>suffix</c>
            is <c>"properties"</c>, then
            <c>"foo/bar/MyResources_ja_JP.properties"</c> is returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#toResourceName(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.toResourceName(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="TtlDontCache">
      <MemberSignature Language="C#" Value="public const long TtlDontCache = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TtlDontCache = (-1)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.ResourceBundle.Control.TtlDontCache" />
      <MemberSignature Language="F#" Value="val mutable TtlDontCache : int64" Usage="Java.Util.ResourceBundle.Control.TtlDontCache" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("TTL_DONT_CACHE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("TTL_DONT_CACHE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>The time-to-live constant for not caching loaded resource bundle
            instances.</summary>
        <remarks>
          <para>The time-to-live constant for not caching loaded resource bundle
            instances.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#TTL_DONT_CACHE" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.TTL_DONT_CACHE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="TtlNoExpirationControl">
      <MemberSignature Language="C#" Value="public const long TtlNoExpirationControl = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TtlNoExpirationControl = (-2)" />
      <MemberSignature Language="DocId" Value="F:Java.Util.ResourceBundle.Control.TtlNoExpirationControl" />
      <MemberSignature Language="F#" Value="val mutable TtlNoExpirationControl : int64" Usage="Java.Util.ResourceBundle.Control.TtlNoExpirationControl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("TTL_NO_EXPIRATION_CONTROL")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("TTL_NO_EXPIRATION_CONTROL")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>The time-to-live constant for disabling the expiration control
            for loaded resource bundle instances in the cache.</summary>
        <remarks>
          <para>The time-to-live constant for disabling the expiration control
            for loaded resource bundle instances in the cache.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/ResourceBundle.Control#TTL_NO_EXPIRATION_CONTROL" title="Reference documentation">Java documentation for <code>java.util.ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
  </Members>
</Type>
