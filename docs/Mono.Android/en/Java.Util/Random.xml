<Type Name="Random" FullName="Java.Util.Random">
  <TypeSignature Language="C#" Value="public class Random : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Random extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Random" />
  <TypeSignature Language="F#" Value="type Random = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/Random", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/Random", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An instance of this class is used to generate a stream of
            pseudorandom numbers.</summary>
    <remarks>
      <para>An instance of this class is used to generate a stream of
            pseudorandom numbers. The class uses a 48-bit seed, which is
            modified using a linear congruential formula. (See Donald Knuth,
            <i>The Art of Computer Programming, Volume 2</i>, Section 3.2.1.)</para>
      <para>If two instances of <c>Random</c> are created with the same
            seed, and the same sequence of method calls is made for each, they
            will generate and return identical sequences of numbers. In order to
            guarantee this property, particular algorithms are specified for the
            class <c>Random</c>. Java implementations must use all the algorithms
            shown here for the class <c>Random</c>, for the sake of absolute
            portability of Java code. However, subclasses of class <c>Random</c>
            are permitted to use other algorithms, so long as they adhere to the
            general contracts for all the methods.</para>
      <para>The algorithms implemented by class <c>Random</c> use a
            <c>protected</c> utility method that on each invocation can supply
            up to 32 pseudorandomly generated bits.</para>
      <para>Many applications will find the method <c>Math#random</c> simpler to use.</para>
      <para>Instances of <c>java.util.Random</c> are threadsafe.
            However, the concurrent use of the same <c>java.util.Random</c>
            instance across threads may encounter contention and consequent
            poor performance. Consider instead using
            <c>java.util.concurrent.ThreadLocalRandom</c> in multithreaded
            designs.</para>
      <para>Instances of <c>java.util.Random</c> are not cryptographically
            secure.  Consider instead using <c>java.security.SecureRandom</c> to
            get a cryptographically secure pseudo-random number generator for use
            by security-sensitive applications.</para>
      <para>Added in 1.0.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/Random" title="Reference documentation">Java documentation for <code>java.util.Random</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new random number generator.</summary>
        <remarks>
          <para>Creates a new random number generator. This constructor sets
            the seed of the random number generator to a value very likely
            to be distinct from any other invocation of this constructor.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#Random()" title="Reference documentation">Java documentation for <code>java.util.Random.Random()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random (long seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.#ctor(System.Int64)" />
      <MemberSignature Language="F#" Value="new Java.Util.Random : int64 -&gt; Java.Util.Random" Usage="new Java.Util.Random seed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(J)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(J)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="seed" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seed">the initial seed</param>
        <summary>Creates a new random number generator using a single <c>long</c> seed.</summary>
        <remarks>
          <para>Creates a new random number generator using a single <c>long</c> seed.
            The seed is the initial value of the internal state of the pseudorandom
            number generator which is maintained by method <c>#next</c>.</para>
          <para>The invocation <c>new Random(seed)</c> is equivalent to:</para>
          <code lang="text/java">{@code
            Random rnd = new Random();
            rnd.setSeed(seed);}</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#Random(long)" title="Reference documentation">Java documentation for <code>java.util.Random.Random(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Random (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Random : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Random" Usage="new Java.Util.Random (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Random.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Random.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="protected virtual int Next (int bits);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Next(int32 bits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.Next(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Next : int -&gt; int&#xA;override this.Next : int -&gt; int" Usage="random.Next bits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("next", "(I)I", "GetNext_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("next", "(I)I", "GetNext_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bits">random bits</param>
        <summary>Generates the next pseudorandom number.</summary>
        <returns>the next pseudorandom value from this random number
                    generator's sequence</returns>
        <remarks>
          <para>Generates the next pseudorandom number. Subclasses should
            override this, as this is used by all other methods.</para>
          <para>The general contract of <c>next</c> is that it returns an
            <c>int</c> value and if the argument <c>bits</c> is between
            <c>1</c> and <c>32</c> (inclusive), then that many low-order
            bits of the returned value will be (approximately) independently
            chosen bit values, each of which is (approximately) equally
            likely to be <c>0</c> or <c>1</c>. The method <c>next</c> is
            implemented by class <c>Random</c> by atomically updating the seed to</para>
          <code lang="text/java">{@code (seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)}</code>
          <para>and returning</para>
          <code lang="text/java">{@code (int)(seed &gt;&gt;&gt; (48 - bits))}.</code>
          <para>This is a linear congruential pseudorandom number generator, as
            defined by D. H. Lehmer and described by Donald E. Knuth in
            <i>The Art of Computer Programming,</i> Volume 2:
            <i>Seminumerical Algorithms</i>, section 3.2.1.</para>
          <para>Added in 1.1.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#next(int)" title="Reference documentation">Java documentation for <code>java.util.Random.next(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextBoolean">
      <MemberSignature Language="C#" Value="public virtual bool NextBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NextBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextBoolean" />
      <MemberSignature Language="F#" Value="abstract member NextBoolean : unit -&gt; bool&#xA;override this.NextBoolean : unit -&gt; bool" Usage="random.NextBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextBoolean", "()Z", "GetNextBooleanHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextBoolean", "()Z", "GetNextBooleanHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, uniformly distributed
            <c>boolean</c> value from this random number generator's
            sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed
                    <c>boolean</c> value from this random number generator's
                    sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, uniformly distributed
            <c>boolean</c> value from this random number generator's
            sequence. The general contract of <c>nextBoolean</c> is that one
            <c>boolean</c> value is pseudorandomly generated and returned.  The
            values <c>true</c> and <c>false</c> are produced with
            (approximately) equal probability.</para>
          <para>The method <c>nextBoolean</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public boolean nextBoolean() {
              return next(1) != 0;
            }}</code>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextBoolean()" title="Reference documentation">Java documentation for <code>java.util.Random.nextBoolean()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (byte[]? bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextBytes(System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member NextBytes : byte[] -&gt; unit&#xA;override this.NextBytes : byte[] -&gt; unit" Usage="random.NextBytes bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextBytes", "([B)V", "GetNextBytes_arrayBHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextBytes", "([B)V", "GetNextBytes_arrayBHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">the byte array to fill with random bytes</param>
        <summary>Generates random bytes and places them into a user-supplied
            byte array.</summary>
        <remarks>
          <para>Generates random bytes and places them into a user-supplied
            byte array.  The number of random bytes produced is equal to
            the length of the byte array.</para>
          <para>The method <c>nextBytes</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public void nextBytes(byte[] bytes) {
              for (int i = 0; i &lt; bytes.length; )
                for (int rnd = nextInt(), n = Math.min(bytes.length - i, 4);
                     n-- &gt; 0; rnd &gt;&gt;= 8)
                  bytes[i++] = (byte)rnd;
            }}</code>
          <para>Added in 1.1.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextBytes(byte[])" title="Reference documentation">Java documentation for <code>java.util.Random.nextBytes(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextDouble" />
      <MemberSignature Language="F#" Value="abstract member NextDouble : unit -&gt; double&#xA;override this.NextDouble : unit -&gt; double" Usage="random.NextDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextDouble", "()D", "GetNextDoubleHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextDouble", "()D", "GetNextDoubleHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, uniformly distributed
            <c>double</c> value between <c>0.0</c> and
            <c>1.0</c> from this random number generator's sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed <c>double</c>
                    value between <c>0.0</c> and <c>1.0</c> from this
                    random number generator's sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, uniformly distributed
            <c>double</c> value between <c>0.0</c> and
            <c>1.0</c> from this random number generator's sequence.</para>
          <para>The general contract of <c>nextDouble</c> is that one
            <c>double</c> value, chosen (approximately) uniformly from the
            range <c>0.0d</c> (inclusive) to <c>1.0d</c> (exclusive), is
            pseudorandomly generated and returned.</para>
          <para>The method <c>nextDouble</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public double nextDouble() {
              return (((long)next(26) &lt;&lt; 27) + next(27))
                / (double)(1L &lt;&lt; 53);
            }}</code>
          <para>The hedge "approximately" is used in the foregoing description only
            because the <c>next</c> method is only approximately an unbiased
            source of independently chosen bits. If it were a perfect source of
            randomly chosen bits, then the algorithm shown would choose
            <c>double</c> values from the stated range with perfect uniformity.</para>
          <para>[In early versions of Java, the result was incorrectly calculated as:</para>
          <code lang="text/java">{@code
              return (((long)next(27) &lt;&lt; 27) + next(27))
                / (double)(1L &lt;&lt; 54);}</code>
          <para>This might seem to be equivalent, if not better, but in fact it
            introduced a large nonuniformity because of the bias in the rounding
            of floating-point numbers: it was three times as likely that the
            low-order bit of the significand would be 0 than that it would be 1!
            This nonuniformity probably doesn't matter much in practice, but we
            strive for perfection.]</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextDouble()" title="Reference documentation">Java documentation for <code>java.util.Random.nextDouble()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextFloat">
      <MemberSignature Language="C#" Value="public virtual float NextFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 NextFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextFloat" />
      <MemberSignature Language="F#" Value="abstract member NextFloat : unit -&gt; single&#xA;override this.NextFloat : unit -&gt; single" Usage="random.NextFloat " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextFloat", "()F", "GetNextFloatHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextFloat", "()F", "GetNextFloatHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, uniformly distributed <c>float</c>
            value between <c>0.0</c> and <c>1.0</c> from this random
            number generator's sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed <c>float</c>
                    value between <c>0.0</c> and <c>1.0</c> from this
                    random number generator's sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, uniformly distributed <c>float</c>
            value between <c>0.0</c> and <c>1.0</c> from this random
            number generator's sequence.</para>
          <para>The general contract of <c>nextFloat</c> is that one
            <c>float</c> value, chosen (approximately) uniformly from the
            range <c>0.0f</c> (inclusive) to <c>1.0f</c> (exclusive), is
            pseudorandomly generated and returned. All 2&lt;sup&gt;24&lt;/sup&gt; possible
            <c>float</c> values of the form <i>m&amp;nbsp;x&amp;nbsp;</i>2&lt;sup&gt;-24&lt;/sup&gt;,
            where <i>m</i> is a positive integer less than 2&lt;sup&gt;24&lt;/sup&gt;, are
            produced with (approximately) equal probability.</para>
          <para>The method <c>nextFloat</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public float nextFloat() {
              return next(24) / ((float)(1 &lt;&lt; 24));
            }}</code>
          <para>The hedge "approximately" is used in the foregoing description only
            because the next method is only approximately an unbiased source of
            independently chosen bits. If it were a perfect source of randomly
            chosen bits, then the algorithm shown would choose <c>float</c>
            values from the stated range with perfect uniformity.</para>
          <para>[In early versions of Java, the result was incorrectly calculated as:</para>
          <code lang="text/java">{@code
              return next(30) / ((float)(1 &lt;&lt; 30));}</code>
          <para>This might seem to be equivalent, if not better, but in fact it
            introduced a slight nonuniformity because of the bias in the rounding
            of floating-point numbers: it was slightly more likely that the
            low-order bit of the significand would be 0 than that it would be 1.]</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextFloat()" title="Reference documentation">Java documentation for <code>java.util.Random.nextFloat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextGaussian">
      <MemberSignature Language="C#" Value="public virtual double NextGaussian ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextGaussian() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextGaussian" />
      <MemberSignature Language="F#" Value="abstract member NextGaussian : unit -&gt; double&#xA;override this.NextGaussian : unit -&gt; double" Usage="random.NextGaussian " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextGaussian", "()D", "GetNextGaussianHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextGaussian", "()D", "GetNextGaussianHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, Gaussian ("normally") distributed
            <c>double</c> value with mean <c>0.0</c> and standard
            deviation <c>1.0</c> from this random number generator's sequence.</summary>
        <returns>the next pseudorandom, Gaussian ("normally") distributed
                    <c>double</c> value with mean <c>0.0</c> and
                    standard deviation <c>1.0</c> from this random number
                    generator's sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, Gaussian ("normally") distributed
            <c>double</c> value with mean <c>0.0</c> and standard
            deviation <c>1.0</c> from this random number generator's sequence.</para>
          <para>The general contract of <c>nextGaussian</c> is that one
            <c>double</c> value, chosen from (approximately) the usual
            normal distribution with mean <c>0.0</c> and standard deviation
            <c>1.0</c>, is pseudorandomly generated and returned.</para>
          <para>The method <c>nextGaussian</c> is implemented by class
            <c>Random</c> as if by a threadsafe version of the following:</para>
          <code lang="text/java">{@code
            private double nextNextGaussian;
            private boolean haveNextNextGaussian = false;
            
            public double nextGaussian() {
              if (haveNextNextGaussian) {
                haveNextNextGaussian = false;
                return nextNextGaussian;
              } else {
                double v1, v2, s;
                do {
                  v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
                  v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
                  s = v1 * v1 + v2 * v2;
                } while (s &gt;= 1 || s == 0);
                double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
                nextNextGaussian = v2 * multiplier;
                haveNextNextGaussian = true;
                return v1 * multiplier;
              }
            }}</code>
          <para>This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and
            G. Marsaglia, as described by Donald E. Knuth in <i>The Art of
            Computer Programming</i>, Volume 2: <i>Seminumerical Algorithms</i>,
            section 3.4.1, subsection C, algorithm P. Note that it generates two
            independent values at the cost of only one call to <c>StrictMath.log</c>
            and one call to <c>StrictMath.sqrt</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextGaussian()" title="Reference documentation">Java documentation for <code>java.util.Random.nextGaussian()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public virtual int NextInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NextInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextInt" />
      <MemberSignature Language="F#" Value="abstract member NextInt : unit -&gt; int&#xA;override this.NextInt : unit -&gt; int" Usage="random.NextInt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextInt", "()I", "GetNextIntHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextInt", "()I", "GetNextIntHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, uniformly distributed <c>int</c>
            value from this random number generator's sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed <c>int</c>
                    value from this random number generator's sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, uniformly distributed <c>int</c>
            value from this random number generator's sequence. The general
            contract of <c>nextInt</c> is that one <c>int</c> value is
            pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible
            <c>int</c> values are produced with (approximately) equal probability.</para>
          <para>The method <c>nextInt</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public int nextInt() {
              return next(32);
            }}</code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextInt()" title="Reference documentation">Java documentation for <code>java.util.Random.nextInt()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public virtual int NextInt (int bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NextInt(int32 bound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextInt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member NextInt : int -&gt; int&#xA;override this.NextInt : int -&gt; int" Usage="random.NextInt bound" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextInt", "(I)I", "GetNextInt_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextInt", "(I)I", "GetNextInt_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bound" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bound">the upper bound (exclusive).  Must be positive.</param>
        <summary>Returns a pseudorandom, uniformly distributed <c>int</c> value
            between 0 (inclusive) and the specified value (exclusive), drawn from
            this random number generator's sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed <c>int</c>
                    value between zero (inclusive) and <c>bound</c> (exclusive)
                    from this random number generator's sequence</returns>
        <remarks>
          <para>Returns a pseudorandom, uniformly distributed <c>int</c> value
            between 0 (inclusive) and the specified value (exclusive), drawn from
            this random number generator's sequence.  The general contract of
            <c>nextInt</c> is that one <c>int</c> value in the specified range
            is pseudorandomly generated and returned.  All <c>bound</c> possible
            <c>int</c> values are produced with (approximately) equal
            probability.  The method <c>nextInt(int bound)</c> is implemented by
            class <c>Random</c> as if by:</para>
          <code lang="text/java">{@code
            public int nextInt(int bound) {
              if (bound &lt;= 0)
                throw new IllegalArgumentException("bound must be positive");
            
              if ((bound &amp; -bound) == bound)  // i.e., bound is a power of 2
                return (int)((bound * (long)next(31)) &gt;&gt; 31);
            
              int bits, val;
              do {
                  bits = next(31);
                  val = bits % bound;
              } while (bits - val + (bound-1) &lt; 0);
              return val;
            }}</code>
          <para>The hedge "approximately" is used in the foregoing description only
            because the next method is only approximately an unbiased source of
            independently chosen bits.  If it were a perfect source of randomly
            chosen bits, then the algorithm shown would choose <c>int</c>
            values from the stated range with perfect uniformity.</para>
          <para>The algorithm is slightly tricky.  It rejects values that would result
            in an uneven distribution (due to the fact that 2^31 is not divisible
            by n). The probability of a value being rejected depends on n.  The
            worst case is n=2^30+1, for which the probability of a reject is 1/2,
            and the expected number of iterations before the loop terminates is 2.</para>
          <para>The algorithm treats the case where n is a power of two specially: it
            returns the correct number of high-order bits from the underlying
            pseudo-random number generator.  In the absence of special treatment,
            the correct number of <i>low-order</i> bits would be returned.  Linear
            congruential pseudo-random number generators such as the one
            implemented by this class are known to have short periods in the
            sequence of values of their low-order bits.  Thus, this special case
            greatly increases the length of the sequence of values returned by
            successive calls to this method if n is a small power of two.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextInt(int)" title="Reference documentation">Java documentation for <code>java.util.Random.nextInt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public virtual long NextLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 NextLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.NextLong" />
      <MemberSignature Language="F#" Value="abstract member NextLong : unit -&gt; int64&#xA;override this.NextLong : unit -&gt; int64" Usage="random.NextLong " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nextLong", "()J", "GetNextLongHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nextLong", "()J", "GetNextLongHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next pseudorandom, uniformly distributed <c>long</c>
            value from this random number generator's sequence.</summary>
        <returns>the next pseudorandom, uniformly distributed <c>long</c>
                    value from this random number generator's sequence</returns>
        <remarks>
          <para>Returns the next pseudorandom, uniformly distributed <c>long</c>
            value from this random number generator's sequence. The general
            contract of <c>nextLong</c> is that one <c>long</c> value is
            pseudorandomly generated and returned.</para>
          <para>The method <c>nextLong</c> is implemented by class <c>Random</c>
            as if by:</para>
          <code lang="text/java">{@code
            public long nextLong() {
              return ((long)next(32) &lt;&lt; 32) + next(32);
            }}</code>
          <para>Because class <c>Random</c> uses a seed with only 48 bits,
            this algorithm will not return all possible <c>long</c> values.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#nextLong()" title="Reference documentation">Java documentation for <code>java.util.Random.nextLong()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetSeed">
      <MemberSignature Language="C#" Value="public virtual void SetSeed (long seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSeed(int64 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Random.SetSeed(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member SetSeed : int64 -&gt; unit&#xA;override this.SetSeed : int64 -&gt; unit" Usage="random.SetSeed seed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setSeed", "(J)V", "GetSetSeed_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setSeed", "(J)V", "GetSetSeed_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seed" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seed">the initial seed</param>
        <summary>Sets the seed of this random number generator using a single
            <c>long</c> seed.</summary>
        <remarks>
          <para>Sets the seed of this random number generator using a single
            <c>long</c> seed. The general contract of <c>setSeed</c> is
            that it alters the state of this random number generator object
            so as to be in exactly the same state as if it had just been
            created with the argument <c>seed</c> as a seed. The method
            <c>setSeed</c> is implemented by class <c>Random</c> by
            atomically updating the seed to</para>
          <code lang="text/java">{@code (seed ^ 0x5DEECE66DL) &amp; ((1L &lt;&lt; 48) - 1)}</code>
          <para>and clearing the <c>haveNextNextGaussian</c> flag used by <c>#nextGaussian</c>.</para>
          <para>The implementation of <c>setSeed</c> by class <c>Random</c>
            happens to use only 48 bits of the given seed. In general, however,
            an overriding method may use all 64 bits of the <c>long</c>
            argument as a seed value.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Random#setSeed(long)" title="Reference documentation">Java documentation for <code>java.util.Random.setSeed(long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Random.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Random.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Random.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Random.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
