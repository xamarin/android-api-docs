<Type Name="Timer" FullName="Java.Util.Timer">
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class Timer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Timer" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/Timer", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/Timer", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A facility for threads to schedule tasks for future execution in a
            background thread.</summary>
    <remarks>
      <para>A facility for threads to schedule tasks for future execution in a
            background thread.  Tasks may be scheduled for one-time execution, or for
            repeated execution at regular intervals.</para>
      <para>Corresponding to each <c>Timer</c> object is a single background
            thread that is used to execute all of the timer's tasks, sequentially.
            Timer tasks should complete quickly.  If a timer task takes excessive time
            to complete, it "hogs" the timer's task execution thread.  This can, in
            turn, delay the execution of subsequent tasks, which may "bunch up" and
            execute in rapid succession when (and if) the offending task finally
            completes.</para>
      <para>After the last live reference to a <c>Timer</c> object goes away
            <i>and</i> all outstanding tasks have completed execution, the timer's task
            execution thread terminates gracefully (and becomes subject to garbage
            collection).  However, this can take arbitrarily long to occur.  By
            default, the task execution thread does not run as a <i>daemon thread</i>,
            so it is capable of keeping an application from terminating.  If a caller
            wants to terminate a timer's task execution thread rapidly, the caller
            should invoke the timer's <c>cancel</c> method.</para>
      <para>If the timer's task execution thread terminates unexpectedly, for
            example, because its <c>stop</c> method is invoked, any further
            attempt to schedule a task on the timer will result in an
            <c>IllegalStateException</c>, as if the timer's <c>cancel</c>
            method had been invoked.</para>
      <para>This class is thread-safe: multiple threads can share a single
            <c>Timer</c> object without the need for external synchronization.</para>
      <para>This class does <i>not</i> offer real-time guarantees: it schedules
            tasks using the <c>Object.wait(long)</c> method.</para>
      <para>Java 5.0 introduced the <c>java.util.concurrent</c> package and
            one of the concurrency utilities therein is the <c>java.util.concurrent.ScheduledThreadPoolExecutor
            ScheduledThreadPoolExecutor</c> which is a thread pool for repeatedly
            executing tasks at a given rate or delay.  It is effectively a more
            versatile replacement for the <c>Timer</c>/<c>TimerTask</c>
            combination, as it allows multiple service threads, accepts various
            time units, and doesn't require subclassing <c>TimerTask</c> (just
            implement <c>Runnable</c>).  Configuring <c>ScheduledThreadPoolExecutor</c> with one thread makes it equivalent to
            <c>Timer</c>.</para>
      <para>Implementation note: This class scales to large numbers of concurrently
            scheduled tasks (thousands should present no problem).  Internally,
            it uses a binary heap to represent its task queue, so the cost to schedule
            a task is O(log n), where n is the number of concurrently scheduled tasks.</para>
      <para>Implementation note: All constructors start a timer thread.</para>
      <para>Added in 1.3.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/Timer" title="Reference documentation">Java documentation for <code>java.util.Timer</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new timer.</summary>
        <remarks>
          <para>Creates a new timer.  The associated thread does <i>not</i>Thread#setDaemon run as a daemon.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#Timer()" title="Reference documentation">Java documentation for <code>java.util.Timer.Timer()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (isDaemon As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(bool isDaemon);" />
      <MemberSignature Language="C#" Value="public Timer (bool isDaemon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isDaemon) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.#ctor(System.Boolean)" />
      <MemberSignature Language="F#" Value="new Java.Util.Timer : bool -&gt; Java.Util.Timer" Usage="new Java.Util.Timer isDaemon" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Z)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isDaemon" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isDaemon">true if the associated thread should run as a daemon.</param>
        <summary>Creates a new timer whose associated thread may be specified to
            Thread#setDaemon run as a daemon.</summary>
        <remarks>
          <para>Creates a new timer whose associated thread may be specified to
            Thread#setDaemon run as a daemon.
            A daemon thread is called for if the timer will be used to
            schedule repeating "maintenance activities", which must be
            performed as long as the application is running, but should not
            prolong the lifetime of the application.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#Timer(boolean)" title="Reference documentation">Java documentation for <code>java.util.Timer.Timer(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::String ^ name);" />
      <MemberSignature Language="C#" Value="public Timer (string? name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Java.Util.Timer : string -&gt; Java.Util.Timer" Usage="new Java.Util.Timer name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">the name of the associated thread</param>
        <summary>Creates a new timer whose associated thread has the specified name.</summary>
        <remarks>
          <para>Creates a new timer whose associated thread has the specified name.
            The associated thread does <i>not</i>Thread#setDaemon run as a daemon.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#Timer(java.lang.String)" title="Reference documentation">Java documentation for <code>java.util.Timer.Timer(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name == null</c></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Timer(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected Timer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Timer : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Timer" Usage="new Java.Util.Timer (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, isDaemon As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::String ^ name, bool isDaemon);" />
      <MemberSignature Language="C#" Value="public Timer (string? name, bool isDaemon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool isDaemon) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Java.Util.Timer : string * bool -&gt; Java.Util.Timer" Usage="new Java.Util.Timer (name, isDaemon)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Z)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isDaemon" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">the name of the associated thread</param>
        <param name="isDaemon">true if the associated thread should run as a daemon</param>
        <summary>Creates a new timer whose associated thread has the specified name,
            and may be specified to
            Thread#setDaemon run as a daemon.</summary>
        <remarks>
          <para>Creates a new timer whose associated thread has the specified name,
            and may be specified to
            Thread#setDaemon run as a daemon.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#Timer(java.lang.String,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.Timer.Timer(java.lang.String, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name == null</c></exception>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Cancel();" />
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Cancel" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit&#xA;override this.Cancel : unit -&gt; unit" Usage="timer.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cancel", "()V", "GetCancelHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cancel", "()V", "GetCancelHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Terminates this timer, discarding any currently scheduled tasks.</summary>
        <remarks>
          <para>Terminates this timer, discarding any currently scheduled tasks.
            Does not interfere with a currently executing task (if it exists).
            Once a timer has been terminated, its execution thread terminates
            gracefully, and no more tasks may be scheduled on it.</para>
          <para>Note that calling this method from within the run method of a
            timer task that was invoked by this timer absolutely guarantees that
            the ongoing task execution is the last task execution that will ever
            be performed by this timer.</para>
          <para>This method may be called repeatedly; the second and subsequent
            calls have no effect.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#cancel()" title="Reference documentation">Java documentation for <code>java.util.Timer.cancel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Timer.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Timer.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Purge () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Purge();" />
      <MemberSignature Language="C#" Value="public virtual int Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Purge" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; int&#xA;override this.Purge : unit -&gt; int" Usage="timer.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("purge", "()I", "GetPurgeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("purge", "()I", "GetPurgeHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all cancelled tasks from this timer's task queue.</summary>
        <returns>the number of tasks removed from the queue.</returns>
        <remarks>
          <para>Removes all cancelled tasks from this timer's task queue.  <i>Calling
            this method has no effect on the behavior of the timer</i>, but
            eliminates the references to the cancelled tasks from the queue.
            If there are no external references to these tasks, they become
            eligible for garbage collection.</para>
          <para>Most programs will have no need to call this method.
            It is designed for use by the rare application that cancels a large
            number of tasks.  Calling this method trades time for space: the
            runtime of the method may be proportional to n + c log n, where n
            is the number of tasks in the queue and c is the number of cancelled
            tasks.</para>
          <para>Note that it is permissible to call this method from within
            a task scheduled on this timer.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#purge()" title="Reference documentation">Java documentation for <code>java.util.Timer.purge()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Schedule (task As TimerTask, time As Date)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Schedule(Java::Util::TimerTask ^ task, Java::Util::Date ^ time);" />
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask? task, Java.Util.Date? time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, class Java.Util.Date time) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Schedule(Java.Util.TimerTask,Java.Util.Date)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Util.TimerTask * Java.Util.Date -&gt; unit&#xA;override this.Schedule : Java.Util.TimerTask * Java.Util.Date -&gt; unit" Usage="timer.Schedule (task, time)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="time" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="time">time at which task is to be executed.</param>
        <summary>Schedules the specified task for execution at the specified time.</summary>
        <remarks>
          <para>Schedules the specified task for execution at the specified time.  If
            the time is in the past, the task is scheduled for immediate execution.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#schedule(java.util.TimerTask,%20java.util.Date)" title="Reference documentation">Java documentation for <code>java.util.Timer.schedule(java.util.TimerTask, java.util.Date)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Schedule (task As TimerTask, delay As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Schedule(Java::Util::TimerTask ^ task, long delay);" />
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask? task, long delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, int64 delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Schedule(Java.Util.TimerTask,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Util.TimerTask * int64 -&gt; unit&#xA;override this.Schedule : Java.Util.TimerTask * int64 -&gt; unit" Usage="timer.Schedule (task, delay)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;J)V", "GetSchedule_Ljava_util_TimerTask_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;J)V", "GetSchedule_Ljava_util_TimerTask_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="delay">delay in milliseconds before task is to be executed.</param>
        <summary>Schedules the specified task for execution after the specified delay.</summary>
        <remarks>
          <para>Schedules the specified task for execution after the specified delay.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#schedule(java.util.TimerTask,%20long)" title="Reference documentation">Java documentation for <code>java.util.Timer.schedule(java.util.TimerTask, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Schedule (task As TimerTask, firstTime As Date, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Schedule(Java::Util::TimerTask ^ task, Java::Util::Date ^ firstTime, long period);" />
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask? task, Java.Util.Date? firstTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, class Java.Util.Date firstTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Schedule(Java.Util.TimerTask,Java.Util.Date,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Util.TimerTask * Java.Util.Date * int64 -&gt; unit&#xA;override this.Schedule : Java.Util.TimerTask * Java.Util.Date * int64 -&gt; unit" Usage="timer.Schedule (task, firstTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="firstTime" Type="Java.Util.Date" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="firstTime">First time at which task is to be executed.</param>
        <param name="period">time in milliseconds between successive task executions.</param>
        <summary>Schedules the specified task for repeated <i>fixed-delay execution</i>,
            beginning at the specified time.</summary>
        <remarks>
          <para>Schedules the specified task for repeated <i>fixed-delay execution</i>,
            beginning at the specified time. Subsequent executions take place at
            approximately regular intervals, separated by the specified period.</para>
          <para>In fixed-delay execution, each execution is scheduled relative to
            the actual execution time of the previous execution.  If an execution
            is delayed for any reason (such as garbage collection or other
            background activity), subsequent executions will be delayed as well.
            In the long run, the frequency of execution will generally be slightly
            lower than the reciprocal of the specified period (assuming the system
            clock underlying <c>Object.wait(long)</c> is accurate).  As a
            consequence of the above, if the scheduled first time is in the past,
            it is scheduled for immediate execution.</para>
          <para>Fixed-delay execution is appropriate for recurring activities
            that require "smoothness."  In other words, it is appropriate for
            activities where it is more important to keep the frequency accurate
            in the short run than in the long run.  This includes most animation
            tasks, such as blinking a cursor at regular intervals.  It also includes
            tasks wherein regular activity is performed in response to human
            input, such as automatically repeating a character as long as a key
            is held down.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#schedule(java.util.TimerTask,%20java.util.Date,%20long)" title="Reference documentation">Java documentation for <code>java.util.Timer.schedule(java.util.TimerTask, java.util.Date, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Schedule (task As TimerTask, delay As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Schedule(Java::Util::TimerTask ^ task, long delay, long period);" />
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask? task, long delay, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, int64 delay, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.Schedule(Java.Util.TimerTask,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Java.Util.TimerTask * int64 * int64 -&gt; unit&#xA;override this.Schedule : Java.Util.TimerTask * int64 * int64 -&gt; unit" Usage="timer.Schedule (task, delay, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;JJ)V", "GetSchedule_Ljava_util_TimerTask_JJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;JJ)V", "GetSchedule_Ljava_util_TimerTask_JJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="delay">delay in milliseconds before task is to be executed.</param>
        <param name="period">time in milliseconds between successive task executions.</param>
        <summary>Schedules the specified task for repeated <i>fixed-delay execution</i>,
            beginning after the specified delay.</summary>
        <remarks>
          <para>Schedules the specified task for repeated <i>fixed-delay execution</i>,
            beginning after the specified delay.  Subsequent executions take place
            at approximately regular intervals separated by the specified period.</para>
          <para>In fixed-delay execution, each execution is scheduled relative to
            the actual execution time of the previous execution.  If an execution
            is delayed for any reason (such as garbage collection or other
            background activity), subsequent executions will be delayed as well.
            In the long run, the frequency of execution will generally be slightly
            lower than the reciprocal of the specified period (assuming the system
            clock underlying <c>Object.wait(long)</c> is accurate).</para>
          <para>Fixed-delay execution is appropriate for recurring activities
            that require "smoothness."  In other words, it is appropriate for
            activities where it is more important to keep the frequency accurate
            in the short run than in the long run.  This includes most animation
            tasks, such as blinking a cursor at regular intervals.  It also includes
            tasks wherein regular activity is performed in response to human
            input, such as automatically repeating a character as long as a key
            is held down.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#schedule(java.util.TimerTask,%20long,%20long)" title="Reference documentation">Java documentation for <code>java.util.Timer.schedule(java.util.TimerTask, long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ScheduleAtFixedRate (task As TimerTask, firstTime As Date, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ScheduleAtFixedRate(Java::Util::TimerTask ^ task, Java::Util::Date ^ firstTime, long period);" />
      <MemberSignature Language="C#" Value="public virtual void ScheduleAtFixedRate (Java.Util.TimerTask? task, Java.Util.Date? firstTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleAtFixedRate(class Java.Util.TimerTask task, class Java.Util.Date firstTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.ScheduleAtFixedRate(Java.Util.TimerTask,Java.Util.Date,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleAtFixedRate : Java.Util.TimerTask * Java.Util.Date * int64 -&gt; unit&#xA;override this.ScheduleAtFixedRate : Java.Util.TimerTask * Java.Util.Date * int64 -&gt; unit" Usage="timer.ScheduleAtFixedRate (task, firstTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_Ljava_util_Date_JHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_Ljava_util_Date_JHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="firstTime" Type="Java.Util.Date" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="firstTime">First time at which task is to be executed.</param>
        <param name="period">time in milliseconds between successive task executions.</param>
        <summary>Schedules the specified task for repeated <i>fixed-rate execution</i>,
            beginning at the specified time.</summary>
        <remarks>
          <para>Schedules the specified task for repeated <i>fixed-rate execution</i>,
            beginning at the specified time. Subsequent executions take place at
            approximately regular intervals, separated by the specified period.</para>
          <para>In fixed-rate execution, each execution is scheduled relative to the
            scheduled execution time of the initial execution.  If an execution is
            delayed for any reason (such as garbage collection or other background
            activity), two or more executions will occur in rapid succession to
            "catch up."  In the long run, the frequency of execution will be
            exactly the reciprocal of the specified period (assuming the system
            clock underlying <c>Object.wait(long)</c> is accurate).  As a
            consequence of the above, if the scheduled first time is in the past,
            then any "missed" executions will be scheduled for immediate "catch up"
            execution.</para>
          <para>Fixed-rate execution is appropriate for recurring activities that
            are sensitive to <i>absolute</i> time, such as ringing a chime every
            hour on the hour, or running scheduled maintenance every day at a
            particular time.  It is also appropriate for recurring activities
            where the total time to perform a fixed number of executions is
            important, such as a countdown timer that ticks once every second for
            ten seconds.  Finally, fixed-rate execution is appropriate for
            scheduling multiple repeating timer tasks that must remain synchronized
            with respect to one another.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#scheduleAtFixedRate(java.util.TimerTask,%20java.util.Date,%20long)" title="Reference documentation">Java documentation for <code>java.util.Timer.scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ScheduleAtFixedRate (task As TimerTask, delay As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ScheduleAtFixedRate(Java::Util::TimerTask ^ task, long delay, long period);" />
      <MemberSignature Language="C#" Value="public virtual void ScheduleAtFixedRate (Java.Util.TimerTask? task, long delay, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleAtFixedRate(class Java.Util.TimerTask task, int64 delay, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Timer.ScheduleAtFixedRate(Java.Util.TimerTask,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleAtFixedRate : Java.Util.TimerTask * int64 * int64 -&gt; unit&#xA;override this.ScheduleAtFixedRate : Java.Util.TimerTask * int64 * int64 -&gt; unit" Usage="timer.ScheduleAtFixedRate (task, delay, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;JJ)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_JJHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;JJ)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_JJHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">task to be scheduled.</param>
        <param name="delay">delay in milliseconds before task is to be executed.</param>
        <param name="period">time in milliseconds between successive task executions.</param>
        <summary>Schedules the specified task for repeated <i>fixed-rate execution</i>,
            beginning after the specified delay.</summary>
        <remarks>
          <para>Schedules the specified task for repeated <i>fixed-rate execution</i>,
            beginning after the specified delay.  Subsequent executions take place
            at approximately regular intervals, separated by the specified period.</para>
          <para>In fixed-rate execution, each execution is scheduled relative to the
            scheduled execution time of the initial execution.  If an execution is
            delayed for any reason (such as garbage collection or other background
            activity), two or more executions will occur in rapid succession to
            "catch up."  In the long run, the frequency of execution will be
            exactly the reciprocal of the specified period (assuming the system
            clock underlying <c>Object.wait(long)</c> is accurate).</para>
          <para>Fixed-rate execution is appropriate for recurring activities that
            are sensitive to <i>absolute</i> time, such as ringing a chime every
            hour on the hour, or running scheduled maintenance every day at a
            particular time.  It is also appropriate for recurring activities
            where the total time to perform a fixed number of executions is
            important, such as a countdown timer that ticks once every second for
            ten seconds.  Finally, fixed-rate execution is appropriate for
            scheduling multiple repeating timer tasks that must remain synchronized
            with respect to one another.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Timer#scheduleAtFixedRate(java.util.TimerTask,%20long,%20long)" title="Reference documentation">Java documentation for <code>java.util.Timer.scheduleAtFixedRate(java.util.TimerTask, long, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Timer.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Timer.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Timer.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Timer.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
