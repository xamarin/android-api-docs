<Type Name="ISpliterator" FullName="Java.Util.ISpliterator">
  <TypeSignature Language="VB.NET" Value="Public Interface ISpliterator&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISpliterator : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface ISpliterator : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISpliterator implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.ISpliterator" />
  <TypeSignature Language="F#" Value="type ISpliterator = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/Spliterator", "", "Java.Util.ISpliteratorInvoker", ApiSince=24)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/Spliterator", "", "Java.Util.ISpliteratorInvoker", ApiSince=24)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="&lt;T&gt;&lt;T&gt;">the type of elements returned by this Spliterator</param>
    <summary>An object for traversing and partitioning elements of a source.</summary>
    <remarks>
      <para>An object for traversing and partitioning elements of a source.  The source
            of elements covered by a Spliterator could be, for example, an array, a
            <c>Collection</c>, an IO channel, or a generator function.</para>
      <para>A Spliterator may traverse elements individually (<c>#tryAdvance tryAdvance()</c>) or sequentially in bulk
            (<c>#forEachRemaining forEachRemaining()</c>).</para>
      <para>A Spliterator may also partition off some of its elements (using
            <c>#trySplit</c>) as another Spliterator, to be used in
            possibly-parallel operations.  Operations using a Spliterator that
            cannot split, or does so in a highly imbalanced or inefficient
            manner, are unlikely to benefit from parallelism.  Traversal
            and splitting exhaust elements; each Spliterator is useful for only a single
            bulk computation.</para>
      <para>A Spliterator also reports a set of <c>#characteristics()</c> of its
            structure, source, and elements from among <c>#ORDERED</c>,
            <c>#DISTINCT</c>, <c>#SORTED</c>, <c>#SIZED</c>, <c>#NONNULL</c>,
            <c>#IMMUTABLE</c>, <c>#CONCURRENT</c>, and <c>#SUBSIZED</c>. These may
            be employed by Spliterator clients to control, specialize or simplify
            computation.  For example, a Spliterator for a <c>Collection</c> would
            report <c>SIZED</c>, a Spliterator for a <c>Set</c> would report
            <c>DISTINCT</c>, and a Spliterator for a <c>SortedSet</c> would also
            report <c>SORTED</c>.  Characteristics are reported as a simple unioned bit
            set.
            
            Some characteristics additionally constrain method behavior; for example if
            <c>ORDERED</c>, traversal methods must conform to their documented ordering.
            New characteristics may be defined in the future, so implementors should not
            assign meanings to unlisted values.</para>
      <para>"binding"&gt;A Spliterator that does not report &lt;c&gt;IMMUTABLE&lt;/c&gt; or
            &lt;c&gt;CONCURRENT&lt;/c&gt; is expected to have a documented policy concerning:
            when the spliterator &lt;em&gt;binds&lt;/em&gt; to the element source; and detection of
            structural interference of the element source detected after binding.  A
            &lt;em&gt;late-binding&lt;/em&gt; Spliterator binds to the source of elements at the
            point of first traversal, first split, or first query for estimated size,
            rather than at the time the Spliterator is created.  A Spliterator that is
            not &lt;em&gt;late-binding&lt;/em&gt; binds to the source of elements at the point of
            construction or first invocation of any method.  Modifications made to the
            source prior to binding are reflected when the Spliterator is traversed.
            After binding a Spliterator should, on a best-effort basis, throw
            <c>ConcurrentModificationException</c> if structural interference is
            detected.  Spliterators that do this are called &lt;em&gt;fail-fast&lt;/em&gt;.  The
            bulk traversal method (<c>#forEachRemaining forEachRemaining()</c>) of a
            Spliterator may optimize traversal and check for structural interference
            after all elements have been traversed, rather than checking per-element and
            failing immediately.</para>
      <para>Spliterators can provide an estimate of the number of remaining elements
            via the <c>#estimateSize</c> method.  Ideally, as reflected in characteristic
            <c>#SIZED</c>, this value corresponds exactly to the number of elements
            that would be encountered in a successful traversal.  However, even when not
            exactly known, an estimated value may still be useful to operations
            being performed on the source, such as helping to determine whether it is
            preferable to split further or traverse the remaining elements sequentially.</para>
      <para>Despite their obvious utility in parallel algorithms, spliterators are not
            expected to be thread-safe; instead, implementations of parallel algorithms
            using spliterators should ensure that the spliterator is only used by one
            thread at a time.  This is generally easy to attain via &lt;em&gt;serial
            thread-confinement&lt;/em&gt;, which often is a natural consequence of typical
            parallel algorithms that work by recursive decomposition.  A thread calling
            <c>#trySplit()</c> may hand over the returned Spliterator to another thread,
            which in turn may traverse or further split that Spliterator.  The behaviour
            of splitting and traversal is undefined if two or more threads operate
            concurrently on the same spliterator.  If the original thread hands a
            spliterator off to another thread for processing, it is best if that handoff
            occurs before any elements are consumed with <c>#tryAdvance(Consumer)
            tryAdvance()</c>, as certain guarantees (such as the accuracy of
            <c>#estimateSize()</c> for <c>SIZED</c> spliterators) are only valid before
            traversal has begun.</para>
      <para>Primitive subtype specializations of <c>Spliterator</c> are provided for
            <c>OfInt int</c>, <c>OfLong long</c>, and <c>OfDouble double</c> values.
            The subtype default implementations of
            <c>Spliterator#tryAdvance(java.util.function.Consumer)</c>
            and <c>Spliterator#forEachRemaining(java.util.function.Consumer)</c> box
            primitive values to instances of their corresponding wrapper class.  Such
            boxing may undermine any performance advantages gained by using the primitive
            specializations.  To avoid boxing, the corresponding primitive-based methods
            should be used.  For example,
            <c>Spliterator.OfInt#tryAdvance(java.util.function.IntConsumer)</c>
            and <c>Spliterator.OfInt#forEachRemaining(java.util.function.IntConsumer)</c>
            should be used in preference to
            <c>Spliterator.OfInt#tryAdvance(java.util.function.Consumer)</c> and
            <c>Spliterator.OfInt#forEachRemaining(java.util.function.Consumer)</c>.
            Traversal of primitive values using boxing-based methods
            <c>#tryAdvance tryAdvance()</c> and
            <c>#forEachRemaining(java.util.function.Consumer) forEachRemaining()</c>
            does not affect the order in which the values, transformed to boxed values,
            are encountered.</para>
      <para>Added in 1.8.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/Spliterator" title="Reference documentation">Java documentation for <code>java.util.Spliterator</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Characteristics">
      <MemberSignature Language="VB.NET" Value="Public Function Characteristics () As SpliteratorCharacteristics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::SpliteratorCharacteristics Characteristics();" />
      <MemberSignature Language="C#" Value="public Java.Util.SpliteratorCharacteristics Characteristics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Java.Util.SpliteratorCharacteristics Characteristics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.Characteristics" />
      <MemberSignature Language="F#" Value="abstract member Characteristics : unit -&gt; Java.Util.SpliteratorCharacteristics" Usage="iSpliterator.Characteristics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("characteristics", "()I", "GetCharacteristicsHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("characteristics", "()I", "GetCharacteristicsHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.SpliteratorCharacteristics</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a set of characteristics of this Spliterator and its
            elements.</summary>
        <returns>a representation of characteristics</returns>
        <remarks>
          <para>Returns a set of characteristics of this Spliterator and its
            elements. The result is represented as ORed values from <c>#ORDERED</c>, <c>#DISTINCT</c>, <c>#SORTED</c>, <c>#SIZED</c>,
            <c>#NONNULL</c>, <c>#IMMUTABLE</c>, <c>#CONCURRENT</c>,
            <c>#SUBSIZED</c>.  Repeated calls to <c>characteristics()</c> on
            a given spliterator, prior to or in-between calls to <c>trySplit</c>,
            should always return the same result.</para>
          <para>If a Spliterator reports an inconsistent set of
            characteristics (either those returned from a single invocation
            or across multiple invocations), no guarantees can be made
            about any computation using this Spliterator.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#characteristics()" title="Reference documentation">Java documentation for <code>java.util.Spliterator.characteristics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparator">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Comparator As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Util::IComparator ^ Comparator { Java::Util::IComparator ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? Comparator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IComparator Comparator" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ISpliterator.Comparator" />
      <MemberSignature Language="F#" Value="member this.Comparator : Java.Util.IComparator" Usage="Java.Util.ISpliterator.Comparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getComparator", "()Ljava/util/Comparator;", "GetGetComparatorHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getComparator", "()Ljava/util/Comparator;", "GetGetComparatorHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this Spliterator's source is <c>#SORTED</c> by a <c>Comparator</c>,
            returns that <c>Comparator</c>.</summary>
        <value>a Comparator, or <c>null</c> if the elements are sorted in the
            natural order.</value>
        <remarks>
          <para>If this Spliterator's source is <c>#SORTED</c> by a <c>Comparator</c>,
            returns that <c>Comparator</c>. If the source is <c>SORTED</c> in
            Comparable natural order, returns <c>null</c>.  Otherwise,
            if the source is not <c>SORTED</c>, throws <c>IllegalStateException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#getComparator()" title="Reference documentation">Java documentation for <code>java.util.Spliterator.getComparator()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimateSize">
      <MemberSignature Language="VB.NET" Value="Public Function EstimateSize () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long EstimateSize();" />
      <MemberSignature Language="C#" Value="public long EstimateSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 EstimateSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.EstimateSize" />
      <MemberSignature Language="F#" Value="abstract member EstimateSize : unit -&gt; int64" Usage="iSpliterator.EstimateSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("estimateSize", "()J", "GetEstimateSizeHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("estimateSize", "()J", "GetEstimateSizeHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an estimate of the number of elements that would be
            encountered by a <c>#forEachRemaining</c> traversal, or returns <c>Long#MAX_VALUE</c> if infinite, unknown, or too expensive to compute.</summary>
        <returns>the estimated size, or <c>Long.MAX_VALUE</c> if infinite,
                    unknown, or too expensive to compute.</returns>
        <remarks>
          <para>Returns an estimate of the number of elements that would be
            encountered by a <c>#forEachRemaining</c> traversal, or returns <c>Long#MAX_VALUE</c> if infinite, unknown, or too expensive to compute.</para>
          <para>If this Spliterator is <c>#SIZED</c> and has not yet been partially
            traversed or split, or this Spliterator is <c>#SUBSIZED</c> and has
            not yet been partially traversed, this estimate must be an accurate
            count of elements that would be encountered by a complete traversal.
            Otherwise, this estimate may be arbitrarily inaccurate, but must decrease
            as specified across invocations of <c>#trySplit</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#estimateSize()" title="Reference documentation">Java documentation for <code>java.util.Spliterator.estimateSize()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExactSizeIfKnown">
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExactSizeIfKnown As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long ExactSizeIfKnown { long get(); };" />
      <MemberSignature Language="C#" Value="public virtual long ExactSizeIfKnown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ExactSizeIfKnown" />
      <MemberSignature Language="DocId" Value="P:Java.Util.ISpliterator.ExactSizeIfKnown" />
      <MemberSignature Language="F#" Value="member this.ExactSizeIfKnown : int64" Usage="Java.Util.ISpliterator.ExactSizeIfKnown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getExactSizeIfKnown", "()J", "GetGetExactSizeIfKnownHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getExactSizeIfKnown", "()J", "GetGetExactSizeIfKnownHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Convenience method that returns <c>#estimateSize()</c> if this
            Spliterator is <c>#SIZED</c>, else <c>-1</c>.</summary>
        <value>the exact size, if known, else <c>-1</c>.</value>
        <remarks>
          <para>Convenience method that returns <c>#estimateSize()</c> if this
            Spliterator is <c>#SIZED</c>, else <c>-1</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#getExactSizeIfKnown()" title="Reference documentation">Java documentation for <code>java.util.Spliterator.getExactSizeIfKnown()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachRemaining">
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ForEachRemaining (action As IConsumer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ForEachRemaining(Java::Util::Functions::IConsumer ^ action);" />
      <MemberSignature Language="C#" Value="public virtual void ForEachRemaining (Java.Util.Functions.IConsumer? action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForEachRemaining(class Java.Util.Functions.IConsumer action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.ForEachRemaining(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member ForEachRemaining : Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.ForEachRemaining : Java.Util.Functions.IConsumer -&gt; unit" Usage="iSpliterator.ForEachRemaining action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("forEachRemaining", "(Ljava/util/function/Consumer;)V", "GetForEachRemaining_Ljava_util_function_Consumer_Handler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("forEachRemaining", "(Ljava/util/function/Consumer;)V", "GetForEachRemaining_Ljava_util_function_Consumer_Handler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="action">The action</param>
        <summary>Performs the given action for each remaining element, sequentially in
            the current thread, until all elements have been processed or the action
            throws an exception.</summary>
        <remarks>
          <para>Performs the given action for each remaining element, sequentially in
            the current thread, until all elements have been processed or the action
            throws an exception.  If this Spliterator is <c>#ORDERED</c>, actions
            are performed in encounter order.  Exceptions thrown by the action
            are relayed to the caller.</para>
          <para>Subsequent behavior of a spliterator is unspecified if the action throws
            an exception.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#forEachRemaining(java.util.function.Consumer%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Spliterator.forEachRemaining(java.util.function.Consumer&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCharacteristics">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasCharacteristics (characteristics As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasCharacteristics(int characteristics);" />
      <MemberSignature Language="C#" Value="public virtual bool HasCharacteristics (int characteristics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasCharacteristics(int32 characteristics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.HasCharacteristics(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member HasCharacteristics : int -&gt; bool&#xA;override this.HasCharacteristics : int -&gt; bool" Usage="iSpliterator.HasCharacteristics characteristics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("hasCharacteristics", "(I)Z", "GetHasCharacteristics_IHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("hasCharacteristics", "(I)Z", "GetHasCharacteristics_IHandler:Java.Util.ISpliterator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characteristics" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="characteristics">the characteristics to check for</param>
        <summary>Returns <c>true</c> if this Spliterator's <c>#characteristics</c> contain all of the given characteristics.</summary>
        <returns>
          <c>true</c> if all the specified characteristics are present,
            else <c>false</c></returns>
        <remarks>
          <para>Returns <c>true</c> if this Spliterator's <c>#characteristics</c> contain all of the given characteristics.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#hasCharacteristics(int)" title="Reference documentation">Java documentation for <code>java.util.Spliterator.hasCharacteristics(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdvance">
      <MemberSignature Language="VB.NET" Value="Public Function TryAdvance (action As IConsumer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryAdvance(Java::Util::Functions::IConsumer ^ action);" />
      <MemberSignature Language="C#" Value="public bool TryAdvance (Java.Util.Functions.IConsumer? action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAdvance(class Java.Util.Functions.IConsumer action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.TryAdvance(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member TryAdvance : Java.Util.Functions.IConsumer -&gt; bool" Usage="iSpliterator.TryAdvance action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("tryAdvance", "(Ljava/util/function/Consumer;)Z", "GetTryAdvance_Ljava_util_function_Consumer_Handler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("tryAdvance", "(Ljava/util/function/Consumer;)Z", "GetTryAdvance_Ljava_util_function_Consumer_Handler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="action">The action</param>
        <summary>If a remaining element exists, performs the given action on it,
            returning <c>true</c>; else returns <c>false</c>.</summary>
        <returns>
          <c>false</c> if no remaining elements existed
            upon entry to this method, else <c>true</c>.</returns>
        <remarks>
          <para>If a remaining element exists, performs the given action on it,
            returning <c>true</c>; else returns <c>false</c>.  If this
            Spliterator is <c>#ORDERED</c> the action is performed on the
            next element in encounter order.  Exceptions thrown by the
            action are relayed to the caller.</para>
          <para>Subsequent behavior of a spliterator is unspecified if the action throws
            an exception.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#tryAdvance(java.util.function.Consumer%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Spliterator.tryAdvance(java.util.function.Consumer&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySplit">
      <MemberSignature Language="VB.NET" Value="Public Function TrySplit () As ISpliterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Java::Util::ISpliterator ^ TrySplit();" />
      <MemberSignature Language="C#" Value="public Java.Util.ISpliterator? TrySplit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.ISpliterator TrySplit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.ISpliterator.TrySplit" />
      <MemberSignature Language="F#" Value="abstract member TrySplit : unit -&gt; Java.Util.ISpliterator" Usage="iSpliterator.TrySplit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("trySplit", "()Ljava/util/Spliterator;", "GetTrySplitHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("trySplit", "()Ljava/util/Spliterator;", "GetTrySplitHandler:Java.Util.ISpliteratorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ISpliterator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If this spliterator can be partitioned, returns a Spliterator
            covering elements, that will, upon return from this method, not
            be covered by this Spliterator.</summary>
        <returns>a <c>Spliterator</c> covering some portion of the
            elements, or <c>null</c> if this spliterator cannot be split</returns>
        <remarks>
          <para>If this spliterator can be partitioned, returns a Spliterator
            covering elements, that will, upon return from this method, not
            be covered by this Spliterator.</para>
          <para>If this Spliterator is <c>#ORDERED</c>, the returned Spliterator
            must cover a strict prefix of the elements.</para>
          <para>Unless this Spliterator covers an infinite number of elements,
            repeated calls to <c>trySplit()</c> must eventually return <c>null</c>.
            Upon non-null return:
            &lt;ul&gt;
            &lt;li&gt;the value reported for <c>estimateSize()</c> before splitting,
            must, after splitting, be greater than or equal to <c>estimateSize()</c>
            for this and the returned Spliterator; and&lt;/li&gt;
            &lt;li&gt;if this Spliterator is <c>SUBSIZED</c>, then <c>estimateSize()</c>
            for this spliterator before splitting must be equal to the sum of
            <c>estimateSize()</c> for this and the returned Spliterator after
            splitting.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>This method may return <c>null</c> for any reason,
            including emptiness, inability to split after traversal has
            commenced, data structure constraints, and efficiency
            considerations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Spliterator#trySplit()" title="Reference documentation">Java documentation for <code>java.util.Spliterator.trySplit()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
