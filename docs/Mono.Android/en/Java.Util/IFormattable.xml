<Type Name="IFormattable" FullName="Java.Util.IFormattable">
  <TypeSignature Language="C#" Value="public interface IFormattable : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IFormattable implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/Formattable", "", "Java.Util.IFormattableInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/Formattable", "", "Java.Util.IFormattableInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The <c>Formattable</c> interface must be implemented by any class that
            needs to perform custom formatting using the <c>'s'</c> conversion
            specifier of <c>java.util.Formatter</c>.</summary>
    <remarks>
      <para>The <c>Formattable</c> interface must be implemented by any class that
            needs to perform custom formatting using the <c>'s'</c> conversion
            specifier of <c>java.util.Formatter</c>.  This interface allows basic
            control for formatting arbitrary objects.
            
            For example, the following class prints out different representations of a
            stock's name depending on the flags and length constraints:</para>
      <code lang="text/java">{@code
              import java.nio.CharBuffer;
              import java.util.Formatter;
              import java.util.Formattable;
              import java.util.Locale;
              import static java.util.FormattableFlags.*;
            
              ...
            
              public class StockName implements Formattable {
                  private String symbol, companyName, frenchCompanyName;
                  public StockName(String symbol, String companyName,
                                   String frenchCompanyName) {
                      ...
                  }
            
                  ...
            
                  public void formatTo(Formatter fmt, int f, int width, int precision) {
                      StringBuilder sb = new StringBuilder();
            
                      // decide form of name
                      String name = companyName;
                      if (fmt.locale().equals(Locale.FRANCE))
                          name = frenchCompanyName;
                      boolean alternate = (f &amp; ALTERNATE) == ALTERNATE;
                      boolean usesymbol = alternate || (precision != -1 &amp;&amp; precision &lt; 10);
                      String out = (usesymbol ? symbol : name);
            
                      // apply precision
                      if (precision == -1 || out.length() &lt; precision) {
                          // write it all
                          sb.append(out);
                      } else {
                          sb.append(out.substring(0, precision - 1)).append('*');
                      }
            
                      // apply width and justification
                      int len = sb.length();
                      if (len &lt; width)
                          for (int i = 0; i &lt; width - len; i++)
                              if ((f &amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                                  sb.append(' ');
                              else
                                  sb.insert(0, ' ');
            
                      fmt.format(sb.toString());
                  }
            
                  public String toString() {
                      return String.format("%s - %s", symbol, companyName);
                  }
              }
            }</code>
      <para>When used in conjunction with the <c>java.util.Formatter</c>, the above
            class produces the following output for various format strings.</para>
      <code lang="text/java">{@code
              Formatter fmt = new Formatter();
              StockName sn = new StockName("HUGE", "Huge Fruit, Inc.",
                                           "Fruit Titanesque, Inc.");
              fmt.format("%s", sn);                   //   -&gt; "Huge Fruit, Inc."
              fmt.format("%s", sn.toString());        //   -&gt; "HUGE - Huge Fruit, Inc."
              fmt.format("%#s", sn);                  //   -&gt; "HUGE"
              fmt.format("%-10.8s", sn);              //   -&gt; "HUGE      "
              fmt.format("%.12s", sn);                //   -&gt; "Huge Fruit,*"
              fmt.format(Locale.FRANCE, "%25s", sn);  //   -&gt; "   Fruit Titanesque, Inc."
            }</code>
      <para>Formattables are not necessarily safe for multithreaded access.  Thread
            safety is optional and may be enforced by classes that extend and implement
            this interface.</para>
      <para>Unless otherwise specified, passing a <c>null</c> argument to
            any method in this interface will cause a <c>NullPointerException</c> to be thrown.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/Formattable" title="Reference documentation">Java documentation for <code>java.util.Formattable</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="FormatTo">
      <MemberSignature Language="C#" Value="public void FormatTo (Java.Util.Formatter? formatter, Java.Util.FormatFlags flags, int width, int precision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FormatTo(class Java.Util.Formatter formatter, valuetype Java.Util.FormatFlags flags, int32 width, int32 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IFormattable.FormatTo(Java.Util.Formatter,Java.Util.FormatFlags,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member FormatTo : Java.Util.Formatter * Java.Util.FormatFlags * int * int -&gt; unit" Usage="iFormattable.FormatTo (formatter, flags, width, precision)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("formatTo", "(Ljava/util/Formatter;III)V", "GetFormatTo_Ljava_util_Formatter_IIIHandler:Java.Util.IFormattableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("formatTo", "(Ljava/util/Formatter;III)V", "GetFormatTo_Ljava_util_Formatter_IIIHandler:Java.Util.IFormattableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatter" Type="Java.Util.Formatter" />
        <Parameter Name="flags" Type="Java.Util.FormatFlags">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="precision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="formatter">The <c>Formatter formatter</c>.  Implementing classes may call
                    <c>Formatter#out() formatter.out()</c> or <c>Formatter#locale() formatter.locale()</c> to obtain the <c>Appendable</c> or <c>Locale</c> used by this
                    <c>formatter</c> respectively.</param>
        <param name="flags">The flags modify the output format.  The value is interpreted as
                    a bitmask.  Any combination of the following flags may be set:
                    <c>FormattableFlags#LEFT_JUSTIFY</c>, <c>FormattableFlags#UPPERCASE</c>, and <c>FormattableFlags#ALTERNATE</c>.  If no flags are set, the default
                    formatting of the implementing class will apply.</param>
        <param name="width">The minimum number of characters to be written to the output.
                    If the length of the converted value is less than the
                    <c>width</c> then the output will be padded by
                    <c>'&amp;nbsp;&amp;nbsp;'</c> until the total number of characters
                    equals width.  The padding is at the beginning by default.  If
                    the <c>FormattableFlags#LEFT_JUSTIFY</c> flag is set then the
                    padding will be at the end.  If <c>width</c> is <c>-1</c>
                    then there is no minimum.</param>
        <param name="precision">The maximum number of characters to be written to the output.
                    The precision is applied before the width, thus the output will
                    be truncated to <c>precision</c> characters even if the
                    <c>width</c> is greater than the <c>precision</c>.  If
                    <c>precision</c> is <c>-1</c> then there is no explicit
                    limit on the number of characters.</param>
        <summary>Formats the object using the provided <c>Formatter formatter</c>.</summary>
        <remarks>
          <para>Formats the object using the provided <c>Formatter formatter</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Formattable#formatTo(java.util.Formatter,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.Formattable.formatTo(java.util.Formatter, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.IllegalFormatException">if any of the parameters is not supported.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
