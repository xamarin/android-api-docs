<Type Name="IComparator" FullName="Java.Util.IComparator">
  <TypeSignature Language="VB.NET" Value="Public Interface IComparator&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparator : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="C#" Value="public interface IComparator : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IComparator implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.IComparator" />
  <TypeSignature Language="F#" Value="type IComparator = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/Comparator", "", "Java.Util.IComparatorInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/Comparator", "", "Java.Util.IComparatorInvoker")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;T&gt;&lt;T&gt;">the type of objects that may be compared by this comparator</param>
    <summary>A comparison function, which imposes a <i>total ordering</i> on
            some collection of objects.</summary>
    <remarks>
      <para>A comparison function, which imposes a <i>total ordering</i> on
            some collection of objects.  Comparators can be passed to a sort
            method (such as <c>Collections#sort(List,Comparator)
            Collections.sort</c> or <c>Arrays#sort(Object[],Comparator)
            Arrays.sort</c>) to allow precise control over the sort order.
            Comparators can also be used to control the order of certain data
            structures (such as SortedSet sorted sets or
            SortedMap sorted maps), or to provide an ordering for
            collections of objects that don't have a Comparable
            natural ordering.</para>
      <para>The ordering imposed by a comparator <c>c</c> on a set of elements
            <c>S</c> is said to be <i>consistent with equals</i> if and only if
            <c>c.compare(e1, e2)==0</c> has the same boolean value as
            <c>e1.equals(e2)</c> for every <c>e1</c> and <c>e2</c> in
            <c>S</c>.</para>
      <para>Caution should be exercised when using a comparator capable of imposing an
            ordering inconsistent with equals to order a sorted set (or sorted map).
            Suppose a sorted set (or sorted map) with an explicit comparator <c>c</c>
            is used with elements (or keys) drawn from a set <c>S</c>.  If the
            ordering imposed by <c>c</c> on <c>S</c> is inconsistent with equals,
            the sorted set (or sorted map) will behave "strangely."  In particular the
            sorted set (or sorted map) will violate the general contract for set (or
            map), which is defined in terms of <c>equals</c>.</para>
      <para>For example, suppose one adds two elements <c>a</c> and <c>b</c> such that
            <c>(a.equals(b) &amp;&amp; c.compare(a, b) != 0)</c>
            to an empty <c>TreeSet</c> with comparator <c>c</c>.
            The second <c>add</c> operation will return
            true (and the size of the tree set will increase) because <c>a</c> and
            <c>b</c> are not equivalent from the tree set's perspective, even though
            this is contrary to the specification of the
            <c>Set#add Set.add</c> method.</para>
      <para>Note: It is generally a good idea for comparators to also implement
            <c>java.io.Serializable</c>, as they may be used as ordering methods in
            serializable data structures (like <c>TreeSet</c>, <c>TreeMap</c>).  In
            order for the data structure to serialize successfully, the comparator (if
            provided) must implement <c>Serializable</c>.</para>
      <para>For the mathematically inclined, the <i>relation</i> that defines the
            <i>imposed ordering</i> that a given comparator <c>c</c> imposes on a
            given set of objects <c>S</c> is:</para>
      <code lang="text/java">{(x, y) such that c.compare(x, y) &amp;lt;= 0}.
            </code>
      <para>The <i>quotient</i> for this total order is:</para>
      <code lang="text/java">{(x, y) such that c.compare(x, y) == 0}.
            </code>
      <para>It follows immediately from the contract for <c>compare</c> that the
            quotient is an <i>equivalence relation</i> on <c>S</c>, and that the
            imposed ordering is a <i>total order</i> on <c>S</c>.  When we say that
            the ordering imposed by <c>c</c> on <c>S</c> is <i>consistent with
            equals</i>, we mean that the quotient for the ordering is the equivalence
            relation defined by the objects' <c>Object#equals(Object)
            equals(Object)</c> method(s):</para>
      <code lang="text/java">{(x, y) such that x.equals(y)}. </code>
      <para>In other words, when the imposed ordering is consistent with
            equals, the equivalence classes defined by the equivalence relation
            of the <c>equals</c> method and the equivalence classes defined by
            the quotient of the <c>compare</c> method are the same.</para>
      <para>Unlike <c>Comparable</c>, a comparator may optionally permit
            comparison of null arguments, while maintaining the requirements for
            an equivalence relation.</para>
      <para>This interface is a member of the
            <see href="https://developer.android.com//java.base/java/util/package-summary.html#CollectionsFramework">
            Java Collections Framework</see>.</para>
      <para>Added in 1.2.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/Comparator" title="Reference documentation">Java documentation for <code>java.util.Comparator</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="VB.NET" Value="Public Function Compare (o1 As Object, o2 As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Compare(Java::Lang::Object ^ o1, Java::Lang::Object ^ o2);" />
      <MemberSignature Language="C#" Value="public int Compare (Java.Lang.Object? o1, Java.Lang.Object? o2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(class Java.Lang.Object o1, class Java.Lang.Object o2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.Compare(Java.Lang.Object,Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Compare : Java.Lang.Object * Java.Lang.Object -&gt; int" Usage="iComparator.Compare (o1, o2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", "GetCompare_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.IComparatorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", "GetCompare_Ljava_lang_Object_Ljava_lang_Object_Handler:Java.Util.IComparatorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o1" Type="Java.Lang.Object" />
        <Parameter Name="o2" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="o1">the first object to be compared.</param>
        <param name="o2">the second object to be compared.</param>
        <summary>Compares its two arguments for order.</summary>
        <returns>a negative integer, zero, or a positive integer as the
                    first argument is less than, equal to, or greater than the
                    second.</returns>
        <remarks>
          <para>Compares its two arguments for order.  Returns a negative integer,
            zero, or a positive integer as the first argument is less than, equal
            to, or greater than the second.</para>
          <para>The implementor must ensure that <c>Integer#signum
            signum</c><c>(compare(x, y)) == -signum(compare(y, x))</c> for
            all <c>x</c> and <c>y</c>.  (This implies that <c>compare(x, y)</c> must throw an exception if and only if <c>compare(y, x)</c> throws an exception.)</para>
          <para>The implementor must also ensure that the relation is transitive:
            <c>((compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0))</c> implies
            <c>compare(x, z)&gt;0</c>.</para>
          <para>Finally, the implementor must ensure that <c>compare(x,
            y)==0</c> implies that <c>signum(compare(x,
            z))==signum(compare(y, z))</c> for all <c>z</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#compare(T,%20T)" title="Reference documentation">Java documentation for <code>java.util.Comparator.compare(T, T)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparing">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Comparing (keyExtractor As IFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ Comparing(Java::Util::Functions::IFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? Comparing (Java.Util.Functions.IFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator Comparing(class Java.Util.Functions.IFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.Comparing(Java.Util.Functions.IFunction)" />
      <MemberSignature Language="F#" Value="static member Comparing : Java.Util.Functions.IFunction -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.Comparing keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("comparing", "(Ljava/util/function/Function;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("comparing", "(Ljava/util/function/Function;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T", "U extends java.lang.Comparable&lt;? super U&gt;" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T", "U extends java.lang.Comparable&lt;? super U&gt;" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IFunction" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of element to be compared</param>
        <param name="&lt;U&gt;&lt;U&gt;">the type of the <c>Comparable</c> sort key</param>
        <param name="keyExtractor">the function used to extract the <c>Comparable</c> sort key</param>
        <summary>Accepts a function that extracts a <c>java.lang.Comparable
            Comparable</c> sort key from a type <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that sort key.</summary>
        <returns>a comparator that compares by an extracted key</returns>
        <remarks>
          <para>Accepts a function that extracts a <c>java.lang.Comparable
            Comparable</c> sort key from a type <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that sort key.</para>
          <para>The returned comparator is serializable if the specified function
            is also serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#comparing(java.util.function.Function%3C?%20super%20T,%20?%20extends%20U%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.comparing(java.util.function.Function&lt;? super T, ? extends U&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparing">
      <MemberSignature Language="VB.NET" Value="Public Shared Function Comparing (keyExtractor As IFunction, keyComparator As IComparator) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ Comparing(Java::Util::Functions::IFunction ^ keyExtractor, Java::Util::IComparator ^ keyComparator);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? Comparing (Java.Util.Functions.IFunction? keyExtractor, Java.Util.IComparator? keyComparator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator Comparing(class Java.Util.Functions.IFunction keyExtractor, class Java.Util.IComparator keyComparator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.Comparing(Java.Util.Functions.IFunction,Java.Util.IComparator)" />
      <MemberSignature Language="F#" Value="static member Comparing : Java.Util.Functions.IFunction * Java.Util.IComparator -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.Comparing (keyExtractor, keyComparator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("comparing", "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("comparing", "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T", "U" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T", "U" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IFunction" />
        <Parameter Name="keyComparator" Type="Java.Util.IComparator" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of element to be compared</param>
        <param name="&lt;U&gt;&lt;U&gt;">the type of the sort key</param>
        <param name="keyExtractor">the function used to extract the sort key</param>
        <param name="keyComparator">the <c>Comparator</c> used to compare the sort key</param>
        <summary>Accepts a function that extracts a sort key from a type <c>T</c>, and
            returns a <c>Comparator&lt;T&gt;</c> that compares by that sort key using
            the specified <c>Comparator</c>.</summary>
        <returns>a comparator that compares by an extracted key using the
                    specified <c>Comparator</c></returns>
        <remarks>
          <para>Accepts a function that extracts a sort key from a type <c>T</c>, and
            returns a <c>Comparator&lt;T&gt;</c> that compares by that sort key using
            the specified <c>Comparator</c>.</para>
          <para>The returned comparator is serializable if the specified function
            and comparator are both serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#comparing(java.util.function.Function%3C?%20super%20T,%20?%20extends%20U%3E,%20java.util.Comparator%3C?%20super%20U%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.comparing(java.util.function.Function&lt;? super T, ? extends U&gt;, java.util.Comparator&lt;? super U&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparingDouble">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComparingDouble (keyExtractor As IToDoubleFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ ComparingDouble(Java::Util::Functions::IToDoubleFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? ComparingDouble (Java.Util.Functions.IToDoubleFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator ComparingDouble(class Java.Util.Functions.IToDoubleFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ComparingDouble(Java.Util.Functions.IToDoubleFunction)" />
      <MemberSignature Language="F#" Value="static member ComparingDouble : Java.Util.Functions.IToDoubleFunction -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.ComparingDouble keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("comparingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("comparingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToDoubleFunction" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of element to be compared</param>
        <param name="keyExtractor">the function used to extract the double sort key</param>
        <summary>Accepts a function that extracts a <c>double</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</summary>
        <returns>a comparator that compares by an extracted key</returns>
        <remarks>
          <para>Accepts a function that extracts a <c>double</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</para>
          <para>The returned comparator is serializable if the specified function
            is also serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#comparingDouble(java.util.function.ToDoubleFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparingInt">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComparingInt (keyExtractor As IToIntFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ ComparingInt(Java::Util::Functions::IToIntFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? ComparingInt (Java.Util.Functions.IToIntFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator ComparingInt(class Java.Util.Functions.IToIntFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ComparingInt(Java.Util.Functions.IToIntFunction)" />
      <MemberSignature Language="F#" Value="static member ComparingInt : Java.Util.Functions.IToIntFunction -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.ComparingInt keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("comparingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("comparingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToIntFunction" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of element to be compared</param>
        <param name="keyExtractor">the function used to extract the integer sort key</param>
        <summary>Accepts a function that extracts an <c>int</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</summary>
        <returns>a comparator that compares by an extracted key</returns>
        <remarks>
          <para>Accepts a function that extracts an <c>int</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</para>
          <para>The returned comparator is serializable if the specified function
            is also serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#comparingInt(java.util.function.ToIntFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.comparingInt(java.util.function.ToIntFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparingLong">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComparingLong (keyExtractor As IToLongFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ ComparingLong(Java::Util::Functions::IToLongFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? ComparingLong (Java.Util.Functions.IToLongFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator ComparingLong(class Java.Util.Functions.IToLongFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ComparingLong(Java.Util.Functions.IToLongFunction)" />
      <MemberSignature Language="F#" Value="static member ComparingLong : Java.Util.Functions.IToLongFunction -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.ComparingLong keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("comparingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("comparingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToLongFunction" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of element to be compared</param>
        <param name="keyExtractor">the function used to extract the long sort key</param>
        <summary>Accepts a function that extracts a <c>long</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</summary>
        <returns>a comparator that compares by an extracted key</returns>
        <remarks>
          <para>Accepts a function that extracts a <c>long</c> sort key from a type
            <c>T</c>, and returns a <c>Comparator&lt;T&gt;</c> that compares by that
            sort key.</para>
          <para>The returned comparator is serializable if the specified function is
            also serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#comparingLong(java.util.function.ToLongFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.comparingLong(java.util.function.ToLongFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Java::Lang::Object ^ obj);" />
      <MemberSignature Language="C#" Value="public bool Equals (Java.Lang.Object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Java.Lang.Object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.Equals(Java.Lang.Object)" />
      <MemberSignature Language="F#" Value="abstract member Equals : Java.Lang.Object -&gt; bool" Usage="iComparator.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("equals", "(Ljava/lang/Object;)Z", "GetEquals_Ljava_lang_Object_Handler:Java.Util.IComparatorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("equals", "(Ljava/lang/Object;)Z", "GetEquals_Ljava_lang_Object_Handler:Java.Util.IComparatorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="obj">the reference object with which to compare.</param>
        <summary>Indicates whether some other object is &amp;quot;equal to&amp;quot;
            this comparator.</summary>
        <returns>
          <c>true</c> only if the specified object is also
                     a comparator and it imposes the same ordering as this
                     comparator.</returns>
        <remarks>
          <para>Indicates whether some other object is &amp;quot;equal to&amp;quot;
            this comparator.  This method must obey the general contract of
            <c>Object#equals(Object)</c>.  Additionally, this method can
            return <c>true</c><i>only</i> if the specified object is also
            a comparator and it imposes the same ordering as this
            comparator.  Thus, <c>comp1.equals(comp2)</c> implies that
            <c>Integer#signum signum</c><c>(comp1.compare(o1,
            o2))==signum(comp2.compare(o1, o2))</c> for every object reference
            <c>o1</c> and <c>o2</c>.</para>
          <para>Note that it is <i>always</i> safe <i>not</i> to override
            <c>Object.equals(Object)</c>.  However, overriding this method may,
            in some cases, improve performance by allowing programs to determine
            that two distinct comparators impose the same order.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#equals(java.lang.Object)" title="Reference documentation">Java documentation for <code>java.util.Comparator.equals(java.lang.Object)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Object.GetHashCode" />
        <altmember cref="M:Java.Lang.Object.Equals(Java.Lang.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NaturalOrder">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NaturalOrder () As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ NaturalOrder();" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? NaturalOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator NaturalOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.NaturalOrder" />
      <MemberSignature Language="F#" Value="static member NaturalOrder : unit -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.NaturalOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("naturalOrder", "()Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("naturalOrder", "()Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.Comparable&lt;? super T&gt;" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.Comparable&lt;? super T&gt;" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the <c>Comparable</c> type of element to be compared</param>
        <summary>Returns a comparator that compares <c>Comparable</c> objects in natural
            order.</summary>
        <returns>a comparator that imposes the <i>natural ordering</i> on <c>Comparable</c> objects.</returns>
        <remarks>
          <para>Returns a comparator that compares <c>Comparable</c> objects in natural
            order.</para>
          <para>The returned comparator is serializable and throws <c>NullPointerException</c> when comparing <c>null</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#naturalOrder()" title="Reference documentation">Java documentation for <code>java.util.Comparator.naturalOrder()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullsFirst">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullsFirst (comparator As IComparator) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ NullsFirst(Java::Util::IComparator ^ comparator);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? NullsFirst (Java.Util.IComparator? comparator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator NullsFirst(class Java.Util.IComparator comparator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.NullsFirst(Java.Util.IComparator)" />
      <MemberSignature Language="F#" Value="static member NullsFirst : Java.Util.IComparator -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.NullsFirst comparator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nullsFirst", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nullsFirst", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparator" Type="Java.Util.IComparator" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the elements to be compared</param>
        <param name="comparator">a <c>Comparator</c> for comparing non-null values</param>
        <summary>Returns a null-friendly comparator that considers <c>null</c> to be
            less than non-null.</summary>
        <returns>a comparator that considers <c>null</c> to be less than
                    non-null, and compares non-null objects with the supplied
                    <c>Comparator</c>.</returns>
        <remarks>
          <para>Returns a null-friendly comparator that considers <c>null</c> to be
            less than non-null. When both are <c>null</c>, they are considered
            equal. If both are non-null, the specified <c>Comparator</c> is used
            to determine the order. If the specified comparator is <c>null</c>,
            then the returned comparator considers all non-null values to be equal.</para>
          <para>The returned comparator is serializable if the specified comparator
            is serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#nullsFirst(java.util.Comparator%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.nullsFirst(java.util.Comparator&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullsLast">
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullsLast (comparator As IComparator) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ NullsLast(Java::Util::IComparator ^ comparator);" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? NullsLast (Java.Util.IComparator? comparator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator NullsLast(class Java.Util.IComparator comparator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.NullsLast(Java.Util.IComparator)" />
      <MemberSignature Language="F#" Value="static member NullsLast : Java.Util.IComparator -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.NullsLast comparator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("nullsLast", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("nullsLast", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparator" Type="Java.Util.IComparator" />
      </Parameters>
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the type of the elements to be compared</param>
        <param name="comparator">a <c>Comparator</c> for comparing non-null values</param>
        <summary>Returns a null-friendly comparator that considers <c>null</c> to be
            greater than non-null.</summary>
        <returns>a comparator that considers <c>null</c> to be greater than
                    non-null, and compares non-null objects with the supplied
                    <c>Comparator</c>.</returns>
        <remarks>
          <para>Returns a null-friendly comparator that considers <c>null</c> to be
            greater than non-null. When both are <c>null</c>, they are considered
            equal. If both are non-null, the specified <c>Comparator</c> is used
            to determine the order. If the specified comparator is <c>null</c>,
            then the returned comparator considers all non-null values to be equal.</para>
          <para>The returned comparator is serializable if the specified comparator
            is serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#nullsLast(java.util.Comparator%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.nullsLast(java.util.Comparator&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reversed">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reversed () As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ Reversed();" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? Reversed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator Reversed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.Reversed" />
      <MemberSignature Language="F#" Value="abstract member Reversed : unit -&gt; Java.Util.IComparator&#xA;override this.Reversed : unit -&gt; Java.Util.IComparator" Usage="iComparator.Reversed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reversed", "()Ljava/util/Comparator;", "GetReversedHandler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reversed", "()Ljava/util/Comparator;", "GetReversedHandler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a comparator that imposes the reverse ordering of this
            comparator.</summary>
        <returns>a comparator that imposes the reverse ordering of this
                    comparator.</returns>
        <remarks>
          <para>Returns a comparator that imposes the reverse ordering of this
            comparator.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#reversed()" title="Reference documentation">Java documentation for <code>java.util.Comparator.reversed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseOrder">
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReverseOrder () As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Java::Util::IComparator ^ ReverseOrder();" />
      <MemberSignature Language="C#" Value="public static Java.Util.IComparator? ReverseOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.IComparator ReverseOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ReverseOrder" />
      <MemberSignature Language="F#" Value="static member ReverseOrder : unit -&gt; Java.Util.IComparator" Usage="Java.Util.IComparator.ReverseOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reverseOrder", "()Ljava/util/Comparator;", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reverseOrder", "()Ljava/util/Comparator;", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.Comparable&lt;? super T&gt;" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T extends java.lang.Comparable&lt;? super T&gt;" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <param name="&lt;T&gt;&lt;T&gt;">the <c>Comparable</c> type of element to be compared</param>
        <summary>Returns a comparator that imposes the reverse of the &lt;em&gt;natural
            ordering&lt;/em&gt;.</summary>
        <returns>a comparator that imposes the reverse of the <i>natural
                    ordering</i> on <c>Comparable</c> objects.</returns>
        <remarks>
          <para>Returns a comparator that imposes the reverse of the &lt;em&gt;natural
            ordering&lt;/em&gt;.</para>
          <para>The returned comparator is serializable and throws <c>NullPointerException</c> when comparing <c>null</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#reverseOrder()" title="Reference documentation">Java documentation for <code>java.util.Comparator.reverseOrder()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparing">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparing (keyExtractor As IFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparing(Java::Util::Functions::IFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparing (Java.Util.Functions.IFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparing(class Java.Util.Functions.IFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparing(Java.Util.Functions.IFunction)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparing : Java.Util.Functions.IFunction -&gt; Java.Util.IComparator&#xA;override this.ThenComparing : Java.Util.Functions.IFunction -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparing keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparing", "(Ljava/util/function/Function;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_function_Function_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparing", "(Ljava/util/function/Function;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_function_Function_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "U extends java.lang.Comparable&lt;? super U&gt;" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "U extends java.lang.Comparable&lt;? super U&gt;" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IFunction" />
      </Parameters>
      <Docs>
        <param name="&lt;U&gt;&lt;U&gt;">the type of the <c>Comparable</c> sort key</param>
        <param name="keyExtractor">the function used to extract the <c>Comparable</c> sort key</param>
        <summary>Returns a lexicographic-order comparator with a function that
            extracts a <c>Comparable</c> sort key.</summary>
        <returns>a lexicographic-order comparator composed of this and then the
                    <c>Comparable</c> sort key.</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with a function that
            extracts a <c>Comparable</c> sort key.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparing(java.util.function.Function%3C?%20super%20T,%20?%20extends%20U%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparing(java.util.function.Function&lt;? super T, ? extends U&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparing">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparing (other As IComparator) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparing(Java::Util::IComparator ^ other);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparing (Java.Util.IComparator? other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparing(class Java.Util.IComparator other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparing(Java.Util.IComparator)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparing : Java.Util.IComparator -&gt; Java.Util.IComparator&#xA;override this.ThenComparing : Java.Util.IComparator -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparing other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparing", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_Comparator_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparing", "(Ljava/util/Comparator;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_Comparator_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Java.Util.IComparator" />
      </Parameters>
      <Docs>
        <param name="other">the other comparator to be used when this comparator
                    compares two objects that are equal.</param>
        <summary>Returns a lexicographic-order comparator with another comparator.</summary>
        <returns>a lexicographic-order comparator composed of this and then the
                    other comparator</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with another comparator.
            If this <c>Comparator</c> considers two elements equal, i.e.
            <c>compare(a, b) == 0</c>, <c>other</c> is used to determine the order.</para>
          <para>The returned comparator is serializable if the specified comparator
            is also serializable.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparing(java.util.Comparator%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparing(java.util.Comparator&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparing">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparing (keyExtractor As IFunction, keyComparator As IComparator) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparing(Java::Util::Functions::IFunction ^ keyExtractor, Java::Util::IComparator ^ keyComparator);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparing (Java.Util.Functions.IFunction? keyExtractor, Java.Util.IComparator? keyComparator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparing(class Java.Util.Functions.IFunction keyExtractor, class Java.Util.IComparator keyComparator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparing(Java.Util.Functions.IFunction,Java.Util.IComparator)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparing : Java.Util.Functions.IFunction * Java.Util.IComparator -&gt; Java.Util.IComparator&#xA;override this.ThenComparing : Java.Util.Functions.IFunction * Java.Util.IComparator -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparing (keyExtractor, keyComparator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparing", "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_function_Function_Ljava_util_Comparator_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparing", "(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;", "GetThenComparing_Ljava_util_function_Function_Ljava_util_Comparator_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "U" })]</AttributeName>
          <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "U" })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IFunction" />
        <Parameter Name="keyComparator" Type="Java.Util.IComparator" />
      </Parameters>
      <Docs>
        <param name="&lt;U&gt;&lt;U&gt;">the type of the sort key</param>
        <param name="keyExtractor">the function used to extract the sort key</param>
        <param name="keyComparator">the <c>Comparator</c> used to compare the sort key</param>
        <summary>Returns a lexicographic-order comparator with a function that
            extracts a key to be compared with the given <c>Comparator</c>.</summary>
        <returns>a lexicographic-order comparator composed of this comparator
                    and then comparing on the key extracted by the keyExtractor function</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with a function that
            extracts a key to be compared with the given <c>Comparator</c>.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparing(java.util.function.Function%3C?%20super%20T,%20?%20extends%20U%3E,%20java.util.Comparator%3C?%20super%20U%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparing(java.util.function.Function&lt;? super T, ? extends U&gt;, java.util.Comparator&lt;? super U&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparingDouble">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparingDouble (keyExtractor As IToDoubleFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparingDouble(Java::Util::Functions::IToDoubleFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparingDouble (Java.Util.Functions.IToDoubleFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparingDouble(class Java.Util.Functions.IToDoubleFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparingDouble(Java.Util.Functions.IToDoubleFunction)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparingDouble : Java.Util.Functions.IToDoubleFunction -&gt; Java.Util.IComparator&#xA;override this.ThenComparingDouble : Java.Util.Functions.IToDoubleFunction -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparingDouble keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", "GetThenComparingDouble_Ljava_util_function_ToDoubleFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparingDouble", "(Ljava/util/function/ToDoubleFunction;)Ljava/util/Comparator;", "GetThenComparingDouble_Ljava_util_function_ToDoubleFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToDoubleFunction" />
      </Parameters>
      <Docs>
        <param name="keyExtractor">the function used to extract the double sort key</param>
        <summary>Returns a lexicographic-order comparator with a function that
            extracts a <c>double</c> sort key.</summary>
        <returns>a lexicographic-order comparator composed of this and then the
                    <c>double</c> sort key</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with a function that
            extracts a <c>double</c> sort key.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparingDouble(java.util.function.ToDoubleFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparingInt">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparingInt (keyExtractor As IToIntFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparingInt(Java::Util::Functions::IToIntFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparingInt (Java.Util.Functions.IToIntFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparingInt(class Java.Util.Functions.IToIntFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparingInt(Java.Util.Functions.IToIntFunction)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparingInt : Java.Util.Functions.IToIntFunction -&gt; Java.Util.IComparator&#xA;override this.ThenComparingInt : Java.Util.Functions.IToIntFunction -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparingInt keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", "GetThenComparingInt_Ljava_util_function_ToIntFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparingInt", "(Ljava/util/function/ToIntFunction;)Ljava/util/Comparator;", "GetThenComparingInt_Ljava_util_function_ToIntFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToIntFunction" />
      </Parameters>
      <Docs>
        <param name="keyExtractor">the function used to extract the integer sort key</param>
        <summary>Returns a lexicographic-order comparator with a function that
            extracts an <c>int</c> sort key.</summary>
        <returns>a lexicographic-order comparator composed of this and then the
                    <c>int</c> sort key</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with a function that
            extracts an <c>int</c> sort key.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparingInt(java.util.function.ToIntFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThenComparingLong">
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ThenComparingLong (keyExtractor As IToLongFunction) As IComparator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Java::Util::IComparator ^ ThenComparingLong(Java::Util::Functions::IToLongFunction ^ keyExtractor);" />
      <MemberSignature Language="C#" Value="public virtual Java.Util.IComparator? ThenComparingLong (Java.Util.Functions.IToLongFunction? keyExtractor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IComparator ThenComparingLong(class Java.Util.Functions.IToLongFunction keyExtractor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IComparator.ThenComparingLong(Java.Util.Functions.IToLongFunction)" />
      <MemberSignature Language="F#" Value="abstract member ThenComparingLong : Java.Util.Functions.IToLongFunction -&gt; Java.Util.IComparator&#xA;override this.ThenComparingLong : Java.Util.Functions.IToLongFunction -&gt; Java.Util.IComparator" Usage="iComparator.ThenComparingLong keyExtractor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("thenComparingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", "GetThenComparingLong_Ljava_util_function_ToLongFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("thenComparingLong", "(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;", "GetThenComparingLong_Ljava_util_function_ToLongFunction_Handler:Java.Util.IComparator, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IComparator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyExtractor" Type="Java.Util.Functions.IToLongFunction" />
      </Parameters>
      <Docs>
        <param name="keyExtractor">the function used to extract the long sort key</param>
        <summary>Returns a lexicographic-order comparator with a function that
            extracts a <c>long</c> sort key.</summary>
        <returns>a lexicographic-order comparator composed of this and then the
                    <c>long</c> sort key</returns>
        <remarks>
          <para>Returns a lexicographic-order comparator with a function that
            extracts a <c>long</c> sort key.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/Comparator#thenComparingLong(java.util.function.ToLongFunction%3C?%20super%20T%3E)" title="Reference documentation">Java documentation for <code>java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction&lt;? super T&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created andÂ shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
