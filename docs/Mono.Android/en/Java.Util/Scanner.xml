<Type Name="Scanner" FullName="Java.Util.Scanner">
  <TypeSignature Language="C#" Value="public sealed class Scanner : Java.Lang.Object, IDisposable, Java.IO.ICloseable, Java.Util.IIterator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Scanner extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Util.IIterator, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.IIterator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/Scanner", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A parser that parses a text string of primitive types and strings with the
 help of regular expressions.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A parser that parses a text string of primitive types and strings with the
 help of regular expressions. This class is not as useful as it might seem.
 It's very inefficient for communicating between machines; you should use JSON,
 protobufs, or even XML for that. Very simple uses might get away with <c><see cref="M:Java.Lang.String.Split(System.String)" /></c>.
 For input from humans, the use of locale-specific regular expressions make it not only
 expensive but also somewhat unpredictable.

 </para>
      <para tool="javadoc-to-mdoc">This class supports localized numbers and various
 radixes. The input is broken into tokens by the delimiter pattern, which is
 <c>\\p{javaWhitespace</c>} by default.

 </para>
      <para tool="javadoc-to-mdoc">Example:
 <example><code lang="java">
 Scanner s = new Scanner("1A true");
 assertEquals(26, s.nextInt(16));
 assertEquals(true, s.nextBoolean());
 </code></example></para>
      <para tool="javadoc-to-mdoc">The <c>Scanner</c> class is not thread-safe.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/Scanner.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (Java.IO.File src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.IO.File src) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/io/File;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Creates a <c>Scanner</c> with the specified <c>File</c> as input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> with the specified <c>File</c> as input. The default charset
 is applied when reading the file.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">if the specified file does not exist.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (Java.Lang.IReadable src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.IReadable src) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Readable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="Java.Lang.IReadable" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Creates a <c>Scanner</c> with the specified <c>Readable</c> as input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> with the specified <c>Readable</c> as input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.lang.Readable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (Java.Nio.Channels.IReadableByteChannel src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.IReadableByteChannel src) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/ReadableByteChannel;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Creates a <c>Scanner</c> with the specified <c>ReadableByteChannel</c> as
 input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> with the specified <c>ReadableByteChannel</c> as
 input. The default charset is applied when decoding the input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.nio.channels.ReadableByteChannel)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (System.IO.Stream src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream src) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/io/InputStream;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Creates a <c>Scanner</c> on the specified <c>InputStream</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> on the specified <c>InputStream</c>. The default charset is
 applied when decoding the input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.io.InputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (string src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string src) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Creates a <c>Scanner</c> on the specified string.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> on the specified string.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (Java.IO.File src, string charsetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.IO.File src, string charsetName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/io/File;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="Java.IO.File" />
        <Parameter Name="charsetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="charsetName">To be added.</param>
        <summary>Creates a <c>Scanner</c> with the specified <c>File</c> as input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> with the specified <c>File</c> as input. The specified charset
 is applied when reading the file.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.io.File, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">if the specified file does not exist.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified coding does not exist.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (Java.Nio.Channels.IReadableByteChannel src, string charsetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.IReadableByteChannel src, string charsetName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
        <Parameter Name="charsetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="charsetName">To be added.</param>
        <summary>Creates a <c>Scanner</c> with the specified <c>ReadableByteChannel</c> as
 input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> with the specified <c>ReadableByteChannel</c> as
 input. The specified charset is applied when decoding the input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.nio.channels.ReadableByteChannel, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified character set is not found.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scanner (System.IO.Stream src, string charsetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream src, string charsetName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/io/InputStream;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="src" Type="System.IO.Stream" />
        <Parameter Name="charsetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="charsetName">To be added.</param>
        <summary>Creates a <c>Scanner</c> on the specified <c>InputStream</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c>Scanner</c> on the specified <c>InputStream</c>. The specified charset is
 applied when decoding the input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#Scanner(java.io.InputStream, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified character set is not found.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this <c>Scanner</c> and the underlying input if the input implements
 <c>Closeable</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Closes this <c>Scanner</c> and the underlying input if the input implements
 <c>Closeable</c>. If the <c>Scanner</c> has been closed, this method will have
 no effect. Any scanning operation called after calling this method will throw
 an <c>IllegalStateException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.IO.ICloseable" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public Java.Util.Regex.Pattern Delimiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.Pattern Delimiter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delimiter", "()Ljava/util/regex/Pattern;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.Pattern</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the delimiter <c>Pattern</c> in use by this <c>Scanner</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the delimiter <c>Pattern</c> in use by this <c>Scanner</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#delimiter()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindInLine">
      <MemberSignature Language="C#" Value="public string FindInLine (Java.Util.Regex.Pattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string FindInLine(class Java.Util.Regex.Pattern pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findInLine", "(Ljava/util/regex/Pattern;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern to find in the input.</param>
        <summary tool="true">Tries to find the pattern in the input.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to find the pattern in the input. Delimiters are ignored. If the
 pattern is found before line terminator, the matched string will be
 returned, and the <c>Scanner</c> will advance to the end of the matched string.
 Otherwise, <c>null</c> will be returned and the <c>Scanner</c> will not advance.
 When waiting for input, the <c>Scanner</c> may be blocked. All the
 input may be cached if no line terminator exists in the buffer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#findInLine(java.util.regex.Pattern)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FindInLine">
      <MemberSignature Language="C#" Value="public string FindInLine (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string FindInLine(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findInLine", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">a string used to construct a pattern which is in turn used to
            match a substring of the input data.</param>
        <summary>Compiles the pattern string and tries to find a substring matching it in the input data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compiles the pattern string and tries to find a substring matching it in the input data. The
 delimiter will be ignored. This is the same as invoking
 <c>findInLine(Pattern.compile(pattern))</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#findInLine(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.</exception>
        <altmember cref="M:Java.Util.Scanner.FindInLine(Java.Util.Regex.Pattern)" />
      </Docs>
    </Member>
    <Member MemberName="FindWithinHorizon">
      <MemberSignature Language="C#" Value="public string FindWithinHorizon (Java.Util.Regex.Pattern pattern, int horizon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string FindWithinHorizon(class Java.Util.Regex.Pattern pattern, int32 horizon) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findWithinHorizon", "(Ljava/util/regex/Pattern;I)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
        <Parameter Name="horizon" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern used to scan.</param>
        <param name="horizon">the search limit.</param>
        <summary>Tries to find the pattern in the input between the current position and the specified
 horizon.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to find the pattern in the input between the current position and the specified
 horizon. Delimiters are ignored. If the pattern is found, the matched
 string will be returned, and the <c>Scanner</c> will advance to the end of the
 matched string. Otherwise, null will be returned and <c>Scanner</c> will not
 advance. When waiting for input, the <c>Scanner</c> may be blocked.
 </para>
          <para tool="javadoc-to-mdoc">
 The <c>Scanner</c>'s search will never go more than <c>horizon</c> code points from current
 position. The position of <c>horizon</c> does have an effect on the result of the
 match. For example, when the input is "123" and current position is at zero,
 <c>findWithinHorizon(Pattern.compile("\\p{Digit}{3}"), 2)</c>
 will return <c>null</c>, while
 <c>findWithinHorizon(Pattern.compile("\\p{Digit}{3}"), 3)</c>
 will return <c>"123"</c>. <c>horizon</c> is treated as a transparent,
 non-anchoring bound. (refer to
 <c><see cref="M:Java.Util.Regex.Matcher.UseTransparentBounds(System.Boolean)" /></c> and
 <c><see cref="M:Java.Util.Regex.Matcher.UseAnchoringBounds(System.Boolean)" /></c>)
 </para>
          <para tool="javadoc-to-mdoc">
 A <c>horizon</c> whose value is zero will be ignored and the whole input will be
 used for search. In this situation, all the input may be cached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#findWithinHorizon(java.util.regex.Pattern, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>horizon</c> is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FindWithinHorizon">
      <MemberSignature Language="C#" Value="public string FindWithinHorizon (string pattern, int horizon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string FindWithinHorizon(string pattern, int32 horizon) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findWithinHorizon", "(Ljava/lang/String;I)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="horizon" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern used to scan.</param>
        <param name="horizon">the search limit.</param>
        <summary>Tries to find the pattern in the input between the current position and the specified
 <c>horizon</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to find the pattern in the input between the current position and the specified
 <c>horizon</c>. Delimiters are ignored. This call is the same as invoking
 <c>findWithinHorizon(Pattern.compile(pattern))</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#findWithinHorizon(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>horizon</c> is less than zero.</exception>
        <altmember cref="M:Java.Util.Scanner.FindWithinHorizon(Java.Util.Regex.Pattern, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public bool HasNext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNext", "()Z", "GetHasNextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this <c>Scanner</c> has one or more tokens remaining to parse.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this <c>Scanner</c> has one or more tokens remaining to parse.
 This method will block if the data is still being read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextBigDecimal">
      <MemberSignature Language="C#" Value="public bool HasNextBigDecimal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextBigDecimal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextBigDecimal", "()Z", "GetHasNextBigDecimalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>BigDecimal</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>BigDecimal</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextBigDecimal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextBigInteger">
      <MemberSignature Language="C#" Value="public bool HasNextBigInteger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextBigInteger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextBigInteger", "()Z", "GetHasNextBigIntegerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>BigInteger</c> in the default radix.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>BigInteger</c> in the default radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextBigInteger()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextBoolean">
      <MemberSignature Language="C#" Value="public bool HasNextBoolean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextBoolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextBoolean", "()Z", "GetHasNextBooleanHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>boolean</c> value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>boolean</c> value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextBoolean()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextByte">
      <MemberSignature Language="C#" Value="public bool HasNextByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextByte" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextByte", "()Z", "GetHasNextByteHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>byte</c> value in the default radix.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>byte</c> value in the default radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextByte()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextDouble">
      <MemberSignature Language="C#" Value="public bool HasNextDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextDouble", "()Z", "GetHasNextDoubleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token translated into a valid <c>double</c>
 value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token translated into a valid <c>double</c>
 value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextDouble()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextFloat">
      <MemberSignature Language="C#" Value="public bool HasNextFloat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextFloat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextFloat", "()Z", "GetHasNextFloatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>float</c> value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>float</c> value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextFloat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextInt">
      <MemberSignature Language="C#" Value="public bool HasNextInt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextInt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextInt", "()Z", "GetHasNextIntHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid <c>int</c>
 value in the default radix.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid <c>int</c>
 value in the default radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextInt()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed,
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextLine">
      <MemberSignature Language="C#" Value="public bool HasNextLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextLine", "()Z", "GetHasNextLineHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if there is a line terminator in the input.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if there is a line terminator in the input.
 This method may block.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextLine()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextLong">
      <MemberSignature Language="C#" Value="public bool HasNextLong { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextLong" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextLong", "()Z", "GetHasNextLongHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>long</c> value in the default radix.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>long</c> value in the default radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextLong()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasNextShort">
      <MemberSignature Language="C#" Value="public bool HasNextShort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNextShort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasNextShort", "()Z", "GetHasNextShortHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the next token can be translated into a valid
 <c>short</c> value in the default radix.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>short</c> value in the default radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextShort()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNext">
      <MemberSignature Language="C#" Value="public bool InvokeHasNext (Java.Util.Regex.Pattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNext(class Java.Util.Regex.Pattern pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNext", "(Ljava/util/regex/Pattern;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern to check for.</param>
        <summary tool="true">Returns whether this <c>Scanner</c> has one or more tokens remaining to parse
 and the next token matches the given pattern.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this <c>Scanner</c> has one or more tokens remaining to parse
 and the next token matches the given pattern. This method will block if the data is
 still being read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNext(java.util.regex.Pattern)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNext">
      <MemberSignature Language="C#" Value="public bool InvokeHasNext (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNext(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNext", "(Ljava/lang/String;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the string specifying the pattern to scan for</param>
        <summary>Returns <c>true</c> if this <c>Scanner</c> has one or more tokens remaining to parse
 and the next token matches a pattern compiled from the given string.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this <c>Scanner</c> has one or more tokens remaining to parse
 and the next token matches a pattern compiled from the given string. This method will
 block if the data is still being read. This call is equivalent to
 <c>hasNext(Pattern.compile(pattern))</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNext(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNextBigInteger">
      <MemberSignature Language="C#" Value="public bool InvokeHasNextBigInteger (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNextBigInteger(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNextBigInteger", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a
            <c>BigInteger</c>.</param>
        <summary>Returns whether the next token can be translated into a valid
 <c>BigInteger</c> in the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>BigInteger</c> in the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextBigInteger(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNextByte">
      <MemberSignature Language="C#" Value="public bool InvokeHasNextByte (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNextByte(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNextByte", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a <c>byte</c>
            value</param>
        <summary>Returns whether the next token can be translated into a valid
 <c>byte</c> value in the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>byte</c> value in the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextByte(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNextInt">
      <MemberSignature Language="C#" Value="public bool InvokeHasNextInt (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNextInt(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNextInt", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into an <c>int</c>
            value.</param>
        <summary>Returns whether the next token can be translated into a valid <c>int</c>
 value in the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid <c>int</c>
 value in the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextInt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNextLong">
      <MemberSignature Language="C#" Value="public bool InvokeHasNextLong (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNextLong(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNextLong", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a <c>long</c>
            value.</param>
        <summary>Returns whether the next token can be translated into a valid
 <c>long</c> value in the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>long</c> value in the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextLong(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeHasNextShort">
      <MemberSignature Language="C#" Value="public bool InvokeHasNextShort (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeHasNextShort(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasNextShort", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a <c>short</c>
            value.</param>
        <summary>Returns whether the next token can be translated into a valid
 <c>short</c> value in the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the next token can be translated into a valid
 <c>short</c> value in the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#hasNextShort(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> has been closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IoException">
      <MemberSignature Language="C#" Value="public Java.IO.IOException IoException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.IO.IOException IoException() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ioException", "()Ljava/io/IOException;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.IOException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the last <c>IOException</c> that was raised while reading from the underlying
 input, or <c>null</c> if none was thrown.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the last <c>IOException</c> that was raised while reading from the underlying
 input, or <c>null</c> if none was thrown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#ioException()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Java.Util.IIterator.Next">
      <MemberSignature Language="C#" Value="Java.Lang.Object IIterator.Next ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.Object Java.Util.IIterator.Next() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public Java.Util.Locale Locale ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Locale Locale() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("locale", "()Ljava/util/Locale;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <c>Locale</c> of this <c>Scanner</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c>Locale</c> of this <c>Scanner</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#locale()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public Java.Util.Regex.IMatchResult Match ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Regex.IMatchResult Match() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("match", "()Ljava/util/regex/MatchResult;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Regex.IMatchResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the result of the last matching operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the result of the last matching operation.
 </para>
          <para tool="javadoc-to-mdoc">
 The next* and find* methods return the match result in the case of a
 successful match.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#match()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the match result is not available, of if the last match
             was not successful.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public string Next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Next() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("next", "()Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token. The token will be both prefixed and suffixed by
 the delimiter that is currently being used (or a string that matches the
 delimiter pattern). This method will block if input is being read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#next()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public string Next (Java.Util.Regex.Pattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Next(class Java.Util.Regex.Pattern pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("next", "(Ljava/util/regex/Pattern;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
      </Parameters>
      <Docs>
        <param name="pattern">the specified pattern to scan.</param>
        <summary>Returns the next token if it matches the specified pattern.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token if it matches the specified pattern. The token
 will be both prefixed and suffixed by the delimiter that is currently
 being used (or a string that matches the delimiter pattern). This method will block
 if input is being read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#next(java.util.regex.Pattern)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token does not match the pattern given.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public string Next (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Next(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("next", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the string specifying the pattern to scan for.</param>
        <summary>Returns the next token if it matches the specified pattern.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token if it matches the specified pattern. The token
 will be both prefixed and suffixed by the delimiter that is currently
 being used (or a string that matches the delimiter pattern). This method will block
 if input is being read. Calling this method is equivalent to
 <c>next(Pattern.compile(pattern))</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#next(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token does not match the pattern given.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextBigDecimal">
      <MemberSignature Language="C#" Value="public Java.Math.BigDecimal NextBigDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Math.BigDecimal NextBigDecimal() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextBigDecimal", "()Ljava/math/BigDecimal;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Math.BigDecimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next token as a <c>BigDecimal</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>BigDecimal</c>. This method will block if input is
 being read. If the next token can be translated into a <c>BigDecimal</c>
 the following is done: All <c>Locale</c>-specific prefixes, group separators,
 and <c>Locale</c>-specific suffixes are removed. Then non-ASCII digits are
 mapped into ASCII digits via <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a
 negative sign (-) is added if the <c>Locale</c>-specific negative prefix or
 suffix was present. Finally the resulting string is passed to
 <c>BigDecimal(String) </c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextBigDecimal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>BigDecimal</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextBigInteger">
      <MemberSignature Language="C#" Value="public Java.Math.BigInteger NextBigInteger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Math.BigInteger NextBigInteger() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextBigInteger", "()Ljava/math/BigInteger;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Math.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token as a <c>BigInteger</c> in the current radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>BigInteger</c> in the current radix.
 This method may block for more input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextBigInteger()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>BigInteger</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextBigInteger">
      <MemberSignature Language="C#" Value="public Java.Math.BigInteger NextBigInteger (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Math.BigInteger NextBigInteger(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextBigInteger", "(I)Ljava/math/BigInteger;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Math.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a
            <c>BigInteger</c>.</param>
        <summary>Returns the next token as a <c>BigInteger</c> with the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>BigInteger</c> with the specified radix.
 This method will block if input is being read. If the next token can be translated
 into a <c>BigInteger</c> the following is done: All <c>Locale</c>-specific
 prefixes, group separators, and <c>Locale</c>-specific suffixes are removed.
 Then non-ASCII digits are mapped into ASCII digits via
 <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative sign (-) is added if the
 <c>Locale</c>-specific negative prefix or suffix was present. Finally the
 resulting String is passed to <c><see cref="C:Java.Math.BigInteger(System.String,System.Int32)" /></c>}
 with the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextBigInteger(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>BigInteger</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextBoolean">
      <MemberSignature Language="C#" Value="public bool NextBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool NextBoolean() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextBoolean", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next token as a <c>boolean</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>boolean</c>. This method will block if input is
 being read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextBoolean()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>boolean</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextByte">
      <MemberSignature Language="C#" Value="public sbyte NextByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 NextByte() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextByte", "()B", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token as a <c>byte</c> in the current radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>byte</c> in the current radix.
 This method may block for more input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextByte()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>byte</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextByte">
      <MemberSignature Language="C#" Value="public sbyte NextByte (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 NextByte(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextByte", "(I)B", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into <c>byte</c> value.</param>
        <summary>Returns the next token as a <c>byte</c> with the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>byte</c> with the specified radix. Will
 block if input is being read. If the next token can be translated into a
 <c>byte</c> the following is done: All <c>Locale</c>-specific prefixes, group
 separators, and <c>Locale</c>-specific suffixes are removed. Then non-ASCII
 digits are mapped into ASCII digits via
 <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative sign (-) is added if the
 <c>Locale</c>-specific negative prefix or suffix was present. Finally the
 resulting String is passed to <c><see cref="M:Java.Lang.Byte.ParseByte(System.String,System.Int32)" /></c>} with
 the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextByte(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>byte</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public double NextDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 NextDouble() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextDouble", "()D", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next token as a <c>double</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>double</c>. This method will block if input is being
 read. If the next token can be translated into a <c>double</c> the
 following is done: All <c>Locale</c>-specific prefixes, group separators, and
 <c>Locale</c>-specific suffixes are removed. Then non-ASCII digits are mapped
 into ASCII digits via <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative
 sign (-) is added if the <c>Locale</c>-specific negative prefix or suffix was
 present. Finally the resulting String is passed to
 <c><see cref="M:Java.Lang.Double.ParseDouble(System.String)" /></c>}. If the token matches the localized
 NaN or infinity strings, it is also passed to
 <c><see cref="M:Java.Lang.Double.ParseDouble(System.String)" /></c>}.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextDouble()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>double</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextFloat">
      <MemberSignature Language="C#" Value="public float NextFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 NextFloat() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextFloat", "()F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the next token as a <c>float</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>float</c>. This method will block if input is being
 read. If the next token can be translated into a <c>float</c> the
 following is done: All <c>Locale</c>-specific prefixes, group separators, and
 <c>Locale</c>-specific suffixes are removed. Then non-ASCII digits are mapped
 into ASCII digits via <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative
 sign (-) is added if the <c>Locale</c>-specific negative prefix or suffix was
 present. Finally the resulting String is passed to
 <c><see cref="M:Java.Lang.Float.ParseFloat(System.String)" /></c>}.If the token matches the localized NaN
 or infinity strings, it is also passed to
 <c><see cref="M:Java.Lang.Float.ParseFloat(System.String)" /></c>}.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextFloat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>float</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public int NextInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextInt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextInt", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token as an <c>int</c> in the current radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as an <c>int</c> in the current radix.
 This method may block for more input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextInt()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>int</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public int NextInt (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextInt(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextInt", "(I)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into an <c>int</c>
            value.</param>
        <summary>Returns the next token as an <c>int</c> with the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as an <c>int</c> with the specified radix. This method will
 block if input is being read. If the next token can be translated into an
 <c>int</c> the following is done: All <c>Locale</c>-specific prefixes, group
 separators, and <c>Locale</c>-specific suffixes are removed. Then non-ASCII
 digits are mapped into ASCII digits via
 <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative sign (-) is added if the
 <c>Locale</c>-specific negative prefix or suffix was present. Finally the
 resulting String is passed to <c><see cref="M:Java.Lang.Integer.ParseInt(System.String,System.Int32)" /></c> with
 the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextInt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>int</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLine">
      <MemberSignature Language="C#" Value="public string NextLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string NextLine() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLine", "()Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the skipped input and advances the <c>Scanner</c> to the beginning of
 the next line.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the skipped input and advances the <c>Scanner</c> to the beginning of
 the next line. The returned result will exclude any line terminator. When
 searching, if no line terminator is found, then a large amount of input
 will be cached. If no line at all can be found, a <c>NoSuchElementException</c>
 will be thrown.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextLine()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if no line can be found, e.g. when input is an empty string.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public long NextLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 NextLong() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token as a <c>long</c> in the current radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>long</c> in the current radix.
 This method may block for more input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextLong()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>long</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public long NextLong (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 NextLong(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "(I)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into a <c>long</c>
            value.</param>
        <summary>Returns the next token as a <c>long</c> with the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>long</c> with the specified radix. This method will
 block if input is being read. If the next token can be translated into a
 <c>long</c> the following is done: All <c>Locale</c>-specific prefixes, group
 separators, and <c>Locale</c>-specific suffixes are removed. Then non-ASCII
 digits are mapped into ASCII digits via
 <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative sign (-) is added if the
 <c>Locale</c>-specific negative prefix or suffix was present. Finally the
 resulting String is passed to <c><see cref="M:Java.Lang.Long.ParseLong(System.String,System.Int32)" /></c>} with
 the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextLong(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>long</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextShort">
      <MemberSignature Language="C#" Value="public short NextShort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 NextShort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextShort", "()S", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the next token as a <c>short</c> in the current radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>short</c> in the current radix.
 This method may block for more input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextShort()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>short</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextShort">
      <MemberSignature Language="C#" Value="public short NextShort (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 NextShort(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextShort", "(I)S", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the radix used to translate the token into <c>short</c>
            value.</param>
        <summary>Returns the next token as a <c>short</c> with the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the next token as a <c>short</c> with the specified radix. This method will
 block if input is being read. If the next token can be translated into a
 <c>short</c> the following is done: All <c>Locale</c>-specific prefixes, group
 separators, and <c>Locale</c>-specific suffixes are removed. Then non-ASCII
 digits are mapped into ASCII digits via
 <c><see cref="M:Java.Lang.Character.Digit(System.Char,System.Int32)" /></c>, and a negative sign (-) is added if the
 <c>Locale</c>-specific negative prefix or suffix was present. Finally the
 resulting String is passed to <c><see cref="M:Java.Lang.Short.ParseShort(System.String,System.Int32)" /></c>}
 with the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#nextShort(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>Scanner</c> has been closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if input has been exhausted.</exception>
        <exception cref="T:Java.Util.InputMismatchException">if the next token can not be translated into a valid
             <c>short</c> value.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Radix">
      <MemberSignature Language="C#" Value="public int Radix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Radix() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("radix", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the radix of this <c>Scanner</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the radix of this <c>Scanner</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#radix()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("remove", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove is not a supported operation on <c>Scanner</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove is not a supported operation on <c>Scanner</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#remove()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsupportedOperationException">if this method is invoked.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets this scanner's delimiter, locale, and radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Resets this scanner's delimiter, locale, and radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner Skip (Java.Util.Regex.Pattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner Skip(class Java.Util.Regex.Pattern pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skip", "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
      </Parameters>
      <Docs>
        <param name="pattern">used to skip over input.</param>
        <summary tool="true">Tries to use specified pattern to match input starting from the current position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to use specified pattern to match input starting from the current position.
 The delimiter will be ignored. If a match is found, the matched input will be
 skipped. If an anchored match of the specified pattern succeeds, the corresponding input
 will also be skipped. Otherwise, a <c>NoSuchElementException</c> will be thrown.
 Patterns that can match a lot of input may cause the <c>Scanner</c> to read
 in a large amount of input.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#skip(java.util.regex.Pattern)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.</exception>
        <exception cref="T:Java.Util.NoSuchElementException">if the specified pattern match fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner Skip (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner Skip(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skip", "(Ljava/lang/String;)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the string used to construct a pattern which in turn is used to
            match input.</param>
        <summary>Tries to use the specified string to construct a pattern and then uses
 the constructed pattern to match input starting from the current position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to use the specified string to construct a pattern and then uses
 the constructed pattern to match input starting from the current position. The
 delimiter will be ignored. This call is the same as invoke
 <c>skip(Pattern.compile(pattern))</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#skip(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Scanner</c> is closed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDelimiter">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner UseDelimiter (Java.Util.Regex.Pattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner UseDelimiter(class Java.Util.Regex.Pattern pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("useDelimiter", "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Java.Util.Regex.Pattern" />
      </Parameters>
      <Docs>
        <param name="pattern">the delimiting pattern to use.</param>
        <summary tool="true">Sets the delimiting pattern of this <c>Scanner</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the delimiting pattern of this <c>Scanner</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#useDelimiter(java.util.regex.Pattern)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UseDelimiter">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner UseDelimiter (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner UseDelimiter(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("useDelimiter", "(Ljava/lang/String;)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">a string from which a <c>Pattern</c> can be compiled.</param>
        <summary>Sets the delimiting pattern of this <c>Scanner</c> with a pattern compiled from
 the supplied string value.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the delimiting pattern of this <c>Scanner</c> with a pattern compiled from
 the supplied string value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#useDelimiter(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UseLocale">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner UseLocale (Java.Util.Locale l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner UseLocale(class Java.Util.Locale l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("useLocale", "(Ljava/util/Locale;)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="l">the specified <c>Locale</c> to use.</param>
        <summary>Sets the <c>Locale</c> of this <c>Scanner</c> to a specified <c>Locale</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the <c>Locale</c> of this <c>Scanner</c> to a specified <c>Locale</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#useLocale(java.util.Locale)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UseRadix">
      <MemberSignature Language="C#" Value="public Java.Util.Scanner UseRadix (int radix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Scanner UseRadix(int32 radix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("useRadix", "(I)Ljava/util/Scanner;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Scanner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radix" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="radix">the specified radix to use.</param>
        <summary>Sets the radix of this <c>Scanner</c> to the specified radix.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the radix of this <c>Scanner</c> to the specified radix.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Scanner.html#useRadix(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
