<Type Name="BidiFormatter" FullName="Android.Text.BidiFormatter">
  <TypeSignature Language="C#" Value="public sealed class BidiFormatter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BidiFormatter extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/text/BidiFormatter", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="18">
    <summary>Utility class for formatting text for display in a potentially opposite-directionality context
 without garbling.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Utility class for formatting text for display in a potentially opposite-directionality context
 without garbling. The directionality of the context is set at formatter creation and the
 directionality of the text can be either estimated or passed in when known.

 </para>
      <para tool="javadoc-to-mdoc">To support versions lower than <c><see cref="F:Android.OS.Build+VERSION.JellyBeanMr2" tool="ReplaceLinkValue" /></c>,
 you can use the support library's <c><see cref="!:NoType:android/support/v4/text/BidiFormatter;Href=../../../reference/android/support/v4/text/BidiFormatter.html" /></c> class.

 </para>
      <para tool="javadoc-to-mdoc">These APIs provides the following functionality:
 </para>
      <para tool="javadoc-to-mdoc">
 1. Bidi Wrapping
 When text in one language is mixed into a document in another, opposite-directionality language,
 e.g. when an English business name is embedded in some Hebrew text, both the inserted string
 and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly
 separated from the surrounding text in a "wrapper" that:
 </para>
      <para tool="javadoc-to-mdoc">
 - Declares its directionality so that the string is displayed correctly. This can be done in
   Unicode bidi formatting codes by <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String)" /></c> and similar methods.
 </para>
      <para tool="javadoc-to-mdoc">
 - Isolates the string's directionality, so it does not unduly affect the surrounding content.
   Currently, this can only be done using invisible Unicode characters of the same direction as
   the context (LRM or RLM) in addition to the directionality declaration above, thus "resetting"
   the directionality to that of the context. The "reset" may need to be done at both ends of the
   string. Without "reset" after the string, the string will "stick" to a number or logically
   separate opposite-direction text that happens to follow it in-line (even if separated by
   neutral content like spaces and punctuation). Without "reset" before the string, the same can
   happen there, but only with more opposite-direction text, not a number. One approach is to
   "reset" the direction only after each string, on the theory that if the preceding opposite-
   direction text is itself bidi-wrapped, the "reset" after it will prevent the sticking. (Doing
   the "reset" only before each string definitely does not work because we do not want to require
   bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a
   number.) Still, the safest policy is to do the "reset" on both ends of each string, since RTL
   message translations often contain untranslated Latin-script brand names and technical terms,
   and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one
   has such a message, it is best to do the "reset" manually in the message translation itself,
   since the message's opposite-direction text could be followed by an inserted number, which we
   would not bidi-wrap anyway. Thus, "reset" only after the string is the current default. In an
   alternative to "reset", recent additions to the HTML, CSS, and Unicode standards allow the
   isolation to be part of the directionality declaration. This form of isolation is better than
   "reset" because it takes less space, does not require knowing the context directionality, has a
   gentler effect than "reset", and protects both ends of the string. However, we do not yet allow
   using it because required platforms do not yet support it.
 </para>
      <para tool="javadoc-to-mdoc">
 Providing these wrapping services is the basic purpose of the bidi formatter.
 </para>
      <para tool="javadoc-to-mdoc">
 2. Directionality estimation
 How does one know whether a string about to be inserted into surrounding text has the same
 directionality? Well, in many cases, one knows that this must be the case when writing the code
 doing the insertion, e.g. when a localized message is inserted into a localized page. In such
 cases there is no need to involve the bidi formatter at all. In some other cases, it need not be
 the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known.
 In the remaining cases, e.g. when the string is user-entered or comes from a database, the
 language of the string (and thus its directionality) is not known a priori, and must be
 estimated at run-time. The bidi formatter can do this automatically using the default
 first-strong estimation algorithm. It can also be configured to use a custom directionality
 estimation object.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/text/BidiFormatter.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 18" />
  </Docs>
  <Members>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter GetInstance (Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Text.BidiFormatter GetInstance(class Java.Util.Locale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Ljava/util/Locale;)Landroid/text/BidiFormatter;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">The context locale.
</param>
        <summary tool="true">Factory for creating an instance of BidiFormatter given the context locale.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Factory for creating an instance of BidiFormatter given the context locale.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#getInstance(java.util.Locale)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter GetInstance (bool rtlContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Text.BidiFormatter GetInstance(bool rtlContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Z)Landroid/text/BidiFormatter;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rtlContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rtlContext">Whether the context directionality is RTL.
</param>
        <summary>Factory for creating an instance of BidiFormatter given the context directionality.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Factory for creating an instance of BidiFormatter given the context directionality.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#getInstance(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Text.BidiFormatter Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInstance", "()Landroid/text/BidiFormatter;", "GetGetInstanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Factory for creating an instance of BidiFormatter for the default locale directionality.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Factory for creating an instance of BidiFormatter for the default locale directionality.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#getInstance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsRtl">
      <MemberSignature Language="C#" Value="public bool IsRtl (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsRtl(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isRtl", "(Ljava/lang/String;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">String whose directionality is to be estimated.</param>
        <summary>Estimates the directionality of a string using the default text direction heuristic.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Estimates the directionality of a string using the default text direction heuristic.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#isRtl(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsRtlContext">
      <MemberSignature Language="C#" Value="public bool IsRtlContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRtlContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRtlContext", "()Z", "GetIsRtlContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#isRtlContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="StereoReset">
      <MemberSignature Language="C#" Value="public bool StereoReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StereoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStereoReset", "()Z", "GetGetStereoResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#getStereoReset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <summary tool="true">Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm and assumes <c>isolate</c> is true.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm and assumes <c>isolate</c> is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, Android.Text.ITextDirectionHeuristic heuristic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, class Android.Text.ITextDirectionHeuristic heuristic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="heuristic" Type="Android.Text.ITextDirectionHeuristic" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="heuristic">The algorithm to be used to estimate the string's overall direction.
        See <c><see cref="T:Android.Text.TextDirectionHeuristics" /></c> for pre-defined heuristics.</param>
        <summary>Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but assumes
 <c>isolate</c> is true.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but assumes
 <c>isolate</c> is true.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String, android.text.TextDirectionHeuristic)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, bool isolate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, bool isolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Z)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="isolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="isolate">Whether to directionally isolate the string to prevent it from garbling the
     content around it</param>
        <summary>Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String,Android.Text.ITextDirectionHeuristic,Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, Android.Text.ITextDirectionHeuristic heuristic, bool isolate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, class Android.Text.ITextDirectionHeuristic heuristic, bool isolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="heuristic" Type="Android.Text.ITextDirectionHeuristic" />
        <Parameter Name="isolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="heuristic">The algorithm to be used to estimate the string's overall direction.
        See <c><see cref="T:Android.Text.TextDirectionHeuristics" /></c> for pre-defined heuristics.</param>
        <param name="isolate">Whether to directionally isolate the string to prevent it from garbling the
     content around it</param>
        <summary>Formats a string of given directionality for use in plain-text output of the context
 directionality, so an opposite-directionality string is neither garbled nor garbles its
 surroundings.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats a string of given directionality for use in plain-text output of the context
 directionality, so an opposite-directionality string is neither garbled nor garbles its
 surroundings. This makes use of Unicode bidi formatting characters.
 </para>
          <para tool="javadoc-to-mdoc">
 The algorithm: In case the given directionality doesn't match the context directionality, wraps
 the string with Unicode bidi formatting characters: RLE+<c>str</c>+PDF for RTL text, or
 LRE+<c>str</c>+PDF for LTR text.
 </para>
          <para tool="javadoc-to-mdoc">
 If <c>isolate</c>, directionally isolates the string so that it does not garble its
 surroundings. Currently, this is done by "resetting" the directionality after the string by
 appending a trailing Unicode bidi mark matching the context directionality (LRM or RLM) when
 either the overall directionality or the exit directionality of the string is opposite to
 that of the context. Unless the formatter was built using
 <c><see cref="!:NoType:android/text/BidiFormatter$Builder;Href=../../../reference/android/text/BidiFormatter.Builder.html#stereoReset(boolean)" /></c> with a <c>false</c> argument, also prepends a Unicode
 bidi mark matching the context directionality when either the overall directionality or the
 entry directionality of the string is opposite to that of the context. Note that as opposed
 to the overall directionality, the entry and exit directionalities are determined from the
 string itself.
 </para>
          <para tool="javadoc-to-mdoc">
 Does *not* do HTML-escaping.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String, android.text.TextDirectionHeuristic, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
  </Members>
</Type>
