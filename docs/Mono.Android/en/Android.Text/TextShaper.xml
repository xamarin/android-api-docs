<Type Name="TextShaper" FullName="Android.Text.TextShaper">
  <TypeSignature Language="VB.NET" Value="Public Class TextShaper&#xA;Inherits Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextShaper : Java::Lang::Object" />
  <TypeSignature Language="C#" Value="public class TextShaper : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextShaper extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Text.TextShaper" />
  <TypeSignature Language="F#" Value="type TextShaper = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/text/TextShaper", ApiSince=31, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/text/TextShaper", ApiSince=31, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides text shaping for multi-styled text.</summary>
    <remarks>
      <para>Provides text shaping for multi-styled text.</para>
      <para>Here is an example of animating text size and letter spacing for simple text.</para>
      <code lang="text/java">&lt;code&gt;
            // In this example, shape the text once for start and end state, then animate between two shape
            // result without re-shaping in each frame.
            class SimpleAnimationView @JvmOverloads constructor(
                    context: Context,
                    attrs: AttributeSet? = null,
                    defStyleAttr: Int = 0
            ) : View(context, attrs, defStyleAttr) {
                private val textDir = TextDirectionHeuristics.LOCALE
                private val text = "Hello, World."  // The text to be displayed
            
                // Class for keeping drawing parameters.
                data class DrawStyle(val textSize: Float, val alpha: Int)
            
                // The start and end text shaping result. This class will animate between these two.
                private val start = mutableListOf&amp;lt;Pair&amp;lt;PositionedGlyphs, DrawStyle&amp;gt;&amp;gt;()
                private val end = mutableListOf&amp;lt;Pair&amp;lt;PositionedGlyphs, DrawStyle&amp;gt;&amp;gt;()
            
                init {
                    val startPaint = TextPaint().apply {
                        alpha = 0 // Alpha only affect text drawing but not text shaping
                        textSize = 36f // TextSize affect both text shaping and drawing.
                        letterSpacing = 0f // Letter spacing only affect text shaping but not drawing.
                    }
            
                    val endPaint = TextPaint().apply {
                        alpha = 255
                        textSize =128f
                        letterSpacing = 0.1f
                    }
            
                    TextShaper.shapeText(text, 0, text.length, textDir, startPaint) { _, _, glyphs, paint -&gt;
                        start.add(Pair(glyphs, DrawStyle(paint.textSize, paint.alpha)))
                    }
                    TextShaper.shapeText(text, 0, text.length, textDir, endPaint) { _, _, glyphs, paint -&gt;
                        end.add(Pair(glyphs, DrawStyle(paint.textSize, paint.alpha)))
                    }
                }
            
                override fun onDraw(canvas: Canvas) {
                    super.onDraw(canvas)
            
                    // Set the baseline to the vertical center of the view.
                    canvas.translate(0f, height / 2f)
            
                    // Assume the number of PositionedGlyphs are the same. If different, you may want to
                    // animate in a different way, e.g. cross fading.
                    start.zip(end) { (startGlyphs, startDrawStyle), (endGlyphs, endDrawStyle) -&gt;
                        // Tween the style and set to paint.
                        paint.textSize = lerp(startDrawStyle.textSize, endDrawStyle.textSize, progress)
                        paint.alpha = lerp(startDrawStyle.alpha, endDrawStyle.alpha, progress)
            
                        // Assume the number of glyphs are the same. If different, you may want to animate in
                        // a different way, e.g. cross fading.
                        require(startGlyphs.glyphCount() == endGlyphs.glyphCount())
            
                        if (startGlyphs.glyphCount() == 0) return@zip
            
                        var curFont = startGlyphs.getFont(0)
                        var drawStart = 0
                        for (i in 1 until startGlyphs.glyphCount()) {
                            // Assume the pair of Glyph ID and font is the same. If different, you may want
                            // to animate in a different way, e.g. cross fading.
                            require(startGlyphs.getGlyphId(i) == endGlyphs.getGlyphId(i))
                            require(startGlyphs.getFont(i) === endGlyphs.getFont(i))
            
                            val font = startGlyphs.getFont(i)
                            if (curFont != font) {
                                drawGlyphs(canvas, startGlyphs, endGlyphs, drawStart, i, curFont, paint)
                                curFont = font
                                drawStart = i
                            }
                        }
                        if (drawStart != startGlyphs.glyphCount() - 1) {
                            drawGlyphs(canvas, startGlyphs, endGlyphs, drawStart, startGlyphs.glyphCount(),
                                    curFont, paint)
                        }
                    }
                }
            
                // Draws Glyphs for the same font run.
                private fun drawGlyphs(canvas: Canvas, startGlyph: PositionedGlyphs,
                                       endGlyph: PositionedGlyphs, start: Int, end: Int, font: Font,
                                       paint: Paint) {
                    var cacheIndex = 0
                    for (i in start until end) {
                        intArrayCache[cacheIndex] = startGlyph.getGlyphId(i)
                        // The glyph positions are different from start to end since they are shaped
                        // with different letter spacing. Use linear interpolation for positions
                        // during animation.
                        floatArrayCache[cacheIndex * 2] =
                                lerp(startGlyph.getGlyphX(i), endGlyph.getGlyphX(i), progress)
                        floatArrayCache[cacheIndex * 2 + 1] =
                                lerp(startGlyph.getGlyphY(i), endGlyph.getGlyphY(i), progress)
                        if (cacheIndex == CACHE_SIZE) {  // Cached int array is full. Flashing.
                            canvas.drawGlyphs(
                                    intArrayCache, 0, // glyphID array and its starting offset
                                    floatArrayCache, 0, // position array and its starting offset
                                    cacheIndex, // glyph count
                                    font,
                                    paint
                            )
                            cacheIndex = 0
                        }
                        cacheIndex++
                    }
                    if (cacheIndex != 0) {
                        canvas.drawGlyphs(
                                intArrayCache, 0, // glyphID array and its starting offset
                                floatArrayCache, 0, // position array and its starting offset
                                cacheIndex, // glyph count
                                font,
                                paint
                        )
                    }
                }
            
                // Linear Interpolator
                private fun lerp(start: Float, end: Float, t: Float) = start * (1f - t) + end * t
                private fun lerp(start: Int, end: Int, t: Float) = (start * (1f - t) + end * t).toInt()
            
                // The animation progress.
                var progress: Float = 0f
                    set(value) {
                        field = value
                        invalidate()
                    }
            
                // working copy of paint.
                private val paint = Paint()
            
                // Array cache for reducing allocation during drawing.
                private var intArrayCache = IntArray(CACHE_SIZE)
                private var floatArrayCache = FloatArray(CACHE_SIZE * 2)
            }
            &lt;/code&gt;
            </code>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/text/TextShaper" title="Reference documentation">Java documentation for <code>android.text.TextShaper</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="VB.NET" Value="Protected Sub New (javaReference As IntPtr, transfer As JniHandleOwnership)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextShaper(IntPtr javaReference, Android::Runtime::JniHandleOwnership transfer);" />
      <MemberSignature Language="C#" Value="protected TextShaper (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Text.TextShaper.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Text.TextShaper : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Text.TextShaper" Usage="new Android.Text.TextShaper (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">To be added.</param>
        <param name="transfer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property JniPeerMembers As JniPeerMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Java::Interop::JniPeerMembers ^ JniPeerMembers { Java::Interop::JniPeerMembers ^ get(); };" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Text.TextShaper.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Text.TextShaper.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeText">
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ShapeText (text As ICharSequence, start As Integer, count As Integer, dir As ITextDirectionHeuristic, paint As TextPaint, consumer As TextShaper.IGlyphsConsumer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ShapeText(Java::Lang::ICharSequence ^ text, int start, int count, Android::Text::ITextDirectionHeuristic ^ dir, Android::Text::TextPaint ^ paint, Android::Text::TextShaper::IGlyphsConsumer ^ consumer);" />
      <MemberSignature Language="C#" Value="public static void ShapeText (Java.Lang.ICharSequence text, int start, int count, Android.Text.ITextDirectionHeuristic dir, Android.Text.TextPaint paint, Android.Text.TextShaper.IGlyphsConsumer consumer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ShapeText(class Java.Lang.ICharSequence text, int32 start, int32 count, class Android.Text.ITextDirectionHeuristic dir, class Android.Text.TextPaint paint, class Android.Text.TextShaper/IGlyphsConsumer consumer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Text.TextShaper.ShapeText(Java.Lang.ICharSequence,System.Int32,System.Int32,Android.Text.ITextDirectionHeuristic,Android.Text.TextPaint,Android.Text.TextShaper.IGlyphsConsumer)" />
      <MemberSignature Language="F#" Value="static member ShapeText : Java.Lang.ICharSequence * int * int * Android.Text.ITextDirectionHeuristic * Android.Text.TextPaint * Android.Text.TextShaper.IGlyphsConsumer -&gt; unit" Usage="Android.Text.TextShaper.ShapeText (text, start, count, dir, paint, consumer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shapeText", "(Ljava/lang/CharSequence;IILandroid/text/TextDirectionHeuristic;Landroid/text/TextPaint;Landroid/text/TextShaper$GlyphsConsumer;)V", "", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("shapeText", "(Ljava/lang/CharSequence;IILandroid/text/TextDirectionHeuristic;Landroid/text/TextPaint;Landroid/text/TextShaper$GlyphsConsumer;)V", "", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="dir" Type="Android.Text.ITextDirectionHeuristic" />
        <Parameter Name="paint" Type="Android.Text.TextPaint" />
        <Parameter Name="consumer" Type="Android.Text.TextShaper+IGlyphsConsumer" />
      </Parameters>
      <Docs>
        <param name="text">a styled text.</param>
        <param name="start">a start index of shaping target in the text.</param>
        <param name="count">a length of shaping target in the text.</param>
        <param name="dir">a text direction.</param>
        <param name="paint">a paint</param>
        <param name="consumer">a consumer of the shape result.</param>
        <summary>Shape multi-styled text.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/text/TextShaper#shapeText(java.lang.CharSequence,%20int,%20int,%20android.text.TextDirectionHeuristic,%20android.text.TextPaint,%20android.text.GlyphsConsumer)" title="Reference documentation">Java documentation for <code>android.text.TextShaper.shapeText(java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic, android.text.TextPaint, android.text.GlyphsConsumer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeText">
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ShapeText (text As String, start As Integer, count As Integer, dir As ITextDirectionHeuristic, paint As TextPaint, consumer As TextShaper.IGlyphsConsumer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ShapeText(System::String ^ text, int start, int count, Android::Text::ITextDirectionHeuristic ^ dir, Android::Text::TextPaint ^ paint, Android::Text::TextShaper::IGlyphsConsumer ^ consumer);" />
      <MemberSignature Language="C#" Value="public static void ShapeText (string text, int start, int count, Android.Text.ITextDirectionHeuristic dir, Android.Text.TextPaint paint, Android.Text.TextShaper.IGlyphsConsumer consumer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ShapeText(string text, int32 start, int32 count, class Android.Text.ITextDirectionHeuristic dir, class Android.Text.TextPaint paint, class Android.Text.TextShaper/IGlyphsConsumer consumer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Text.TextShaper.ShapeText(System.String,System.Int32,System.Int32,Android.Text.ITextDirectionHeuristic,Android.Text.TextPaint,Android.Text.TextShaper.IGlyphsConsumer)" />
      <MemberSignature Language="F#" Value="static member ShapeText : string * int * int * Android.Text.ITextDirectionHeuristic * Android.Text.TextPaint * Android.Text.TextShaper.IGlyphsConsumer -&gt; unit" Usage="Android.Text.TextShaper.ShapeText (text, start, count, dir, paint, consumer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="dir" Type="Android.Text.ITextDirectionHeuristic" />
        <Parameter Name="paint" Type="Android.Text.TextPaint" />
        <Parameter Name="consumer" Type="Android.Text.TextShaper+IGlyphsConsumer" />
      </Parameters>
      <Docs>
        <param name="text">a styled text.</param>
        <param name="start">a start index of shaping target in the text.</param>
        <param name="count">a length of shaping target in the text.</param>
        <param name="dir">a text direction.</param>
        <param name="paint">a paint</param>
        <param name="consumer">a consumer of the shape result.</param>
        <summary>Shape multi-styled text.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/text/TextShaper#shapeText(java.lang.CharSequence,%20int,%20int,%20android.text.TextDirectionHeuristic,%20android.text.TextPaint,%20android.text.GlyphsConsumer)" title="Reference documentation">Java documentation for <code>android.text.TextShaper.shapeText(java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic, android.text.TextPaint, android.text.GlyphsConsumer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdClass As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr ThresholdClass { IntPtr get(); };" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Text.TextShaper.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Text.TextShaper.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ThresholdType As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Type ^ ThresholdType { Type ^ get(); };" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Text.TextShaper.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Text.TextShaper.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
