<Type Name="AtomicMarkableReference" FullName="Java.Util.Concurrent.Atomic.AtomicMarkableReference">
  <TypeSignature Language="C#" Value="public class AtomicMarkableReference : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AtomicMarkableReference extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Atomic.AtomicMarkableReference" />
  <TypeSignature Language="F#" Value="type AtomicMarkableReference = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/atomic/AtomicMarkableReference", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/atomic/AtomicMarkableReference", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "V" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "V" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <param name="&lt;V&gt;&lt;V&gt;">The type of object referred to by this reference</param>
    <summary>An <c>AtomicMarkableReference</c> maintains an object reference
            along with a mark bit, that can be updated atomically.</summary>
    <remarks>
      <para>An <c>AtomicMarkableReference</c> maintains an object reference
            along with a mark bit, that can be updated atomically.</para>
      <para>Implementation note: This implementation maintains markable
            references by creating internal objects representing "boxed"
            [reference, boolean] pairs.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AtomicMarkableReference (Java.Lang.Object? initialRef, bool initialMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.Object initialRef, bool initialMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.#ctor(Java.Lang.Object,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Atomic.AtomicMarkableReference : Java.Lang.Object * bool -&gt; Java.Util.Concurrent.Atomic.AtomicMarkableReference" Usage="new Java.Util.Concurrent.Atomic.AtomicMarkableReference (initialRef, initialMark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/Object;Z)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/Object;Z)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialRef" Type="Java.Lang.Object" />
        <Parameter Name="initialMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialRef">the initial reference</param>
        <param name="initialMark">the initial mark</param>
        <summary>Creates a new <c>AtomicMarkableReference</c> with the given
            initial values.</summary>
        <remarks>
          <para>Creates a new <c>AtomicMarkableReference</c> with the given
            initial values.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#AtomicMarkableReference(V,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.AtomicMarkableReference(V, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AtomicMarkableReference (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Atomic.AtomicMarkableReference : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Atomic.AtomicMarkableReference" Usage="new Java.Util.Concurrent.Atomic.AtomicMarkableReference (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttemptMark">
      <MemberSignature Language="C#" Value="public virtual bool AttemptMark (Java.Lang.Object? expectedReference, bool newMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AttemptMark(class Java.Lang.Object expectedReference, bool newMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.AttemptMark(Java.Lang.Object,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AttemptMark : Java.Lang.Object * bool -&gt; bool&#xA;override this.AttemptMark : Java.Lang.Object * bool -&gt; bool" Usage="atomicMarkableReference.AttemptMark (expectedReference, newMark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("attemptMark", "(Ljava/lang/Object;Z)Z", "GetAttemptMark_Ljava_lang_Object_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("attemptMark", "(Ljava/lang/Object;Z)Z", "GetAttemptMark_Ljava_lang_Object_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedReference" Type="Java.Lang.Object" />
        <Parameter Name="newMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expectedReference">the expected value of the reference</param>
        <param name="newMark">the new value for the mark</param>
        <summary>Atomically sets the value of the mark to the given update value
            if the current reference is <c>==</c> to the expected
            reference.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Atomically sets the value of the mark to the given update value
            if the current reference is <c>==</c> to the expected
            reference.  Any given invocation of this operation may fail
            (return <c>false</c>) spuriously, but repeated invocation
            when the current value holds the expected value and no other
            thread is also attempting to set the value will eventually
            succeed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#attemptMark(V,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSet">
      <MemberSignature Language="C#" Value="public virtual bool CompareAndSet (Java.Lang.Object? expectedReference, Java.Lang.Object? newReference, bool expectedMark, bool newMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CompareAndSet(class Java.Lang.Object expectedReference, class Java.Lang.Object newReference, bool expectedMark, bool newMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.CompareAndSet(Java.Lang.Object,Java.Lang.Object,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CompareAndSet : Java.Lang.Object * Java.Lang.Object * bool * bool -&gt; bool&#xA;override this.CompareAndSet : Java.Lang.Object * Java.Lang.Object * bool * bool -&gt; bool" Usage="atomicMarkableReference.CompareAndSet (expectedReference, newReference, expectedMark, newMark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndSet", "(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", "GetCompareAndSet_Ljava_lang_Object_Ljava_lang_Object_ZZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndSet", "(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", "GetCompareAndSet_Ljava_lang_Object_Ljava_lang_Object_ZZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedReference" Type="Java.Lang.Object" />
        <Parameter Name="newReference" Type="Java.Lang.Object" />
        <Parameter Name="expectedMark" Type="System.Boolean" />
        <Parameter Name="newMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expectedReference">the expected value of the reference</param>
        <param name="newReference">the new value for the reference</param>
        <param name="expectedMark">the expected value of the mark</param>
        <param name="newMark">the new value for the mark</param>
        <summary>Atomically sets the value of both the reference and mark
            to the given update values if the
            current reference is <c>==</c> to the expected reference
            and the current mark is equal to the expected mark.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Atomically sets the value of both the reference and mark
            to the given update values if the
            current reference is <c>==</c> to the expected reference
            and the current mark is equal to the expected mark.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#compareAndSet(V,%20V,%20boolean,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V, V, boolean, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? Get (bool[]? markHolder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get(bool[] markHolder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.Get(System.Boolean[])" />
      <MemberSignature Language="F#" Value="abstract member Get : bool[] -&gt; Java.Lang.Object&#xA;override this.Get : bool[] -&gt; Java.Lang.Object" Usage="atomicMarkableReference.Get markHolder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "([Z)Ljava/lang/Object;", "GetGet_arrayZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "([Z)Ljava/lang/Object;", "GetGet_arrayZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markHolder" Type="System.Boolean[]" />
      </Parameters>
      <Docs>
        <param name="markHolder">an array of size of at least one. On return,
            <c>markHolder[0]</c> will hold the value of the mark.</param>
        <summary>Returns the current values of both the reference and the mark.</summary>
        <returns>the current value of the reference</returns>
        <remarks>
          <para>Returns the current values of both the reference and the mark.
            Typical usage is <c>boolean[1] holder; ref = v.get(holder);</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#get(boolean[])" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMarked">
      <MemberSignature Language="C#" Value="public virtual bool IsMarked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarked" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicMarkableReference.IsMarked" />
      <MemberSignature Language="F#" Value="member this.IsMarked : bool" Usage="Java.Util.Concurrent.Atomic.AtomicMarkableReference.IsMarked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isMarked", "()Z", "GetIsMarkedHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isMarked", "()Z", "GetIsMarkedHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current value of the mark.</summary>
        <value>the current value of the mark</value>
        <remarks>
          <para>Returns the current value of the mark.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#isMarked()" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.isMarked()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicMarkableReference.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Atomic.AtomicMarkableReference.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reference">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? Reference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object Reference" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicMarkableReference.Reference" />
      <MemberSignature Language="F#" Value="member this.Reference : Java.Lang.Object" Usage="Java.Util.Concurrent.Atomic.AtomicMarkableReference.Reference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getReference", "()Ljava/lang/Object;", "GetGetReferenceHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getReference", "()Ljava/lang/Object;", "GetGetReferenceHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current value of the reference.</summary>
        <value>the current value of the reference</value>
        <remarks>
          <para>Returns the current value of the reference.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#getReference()" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.getReference()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public virtual void Set (Java.Lang.Object? newReference, bool newMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(class Java.Lang.Object newReference, bool newMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.Set(Java.Lang.Object,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Set : Java.Lang.Object * bool -&gt; unit&#xA;override this.Set : Java.Lang.Object * bool -&gt; unit" Usage="atomicMarkableReference.Set (newReference, newMark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("set", "(Ljava/lang/Object;Z)V", "GetSet_Ljava_lang_Object_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("set", "(Ljava/lang/Object;Z)V", "GetSet_Ljava_lang_Object_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newReference" Type="Java.Lang.Object" />
        <Parameter Name="newMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="newReference">the new value for the reference</param>
        <param name="newMark">the new value for the mark</param>
        <summary>Unconditionally sets the value of both the reference and mark.</summary>
        <remarks>
          <para>Unconditionally sets the value of both the reference and mark.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#set(V,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.set(V, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicMarkableReference.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Atomic.AtomicMarkableReference.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicMarkableReference.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Atomic.AtomicMarkableReference.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSet">
      <MemberSignature Language="C#" Value="public virtual bool WeakCompareAndSet (Java.Lang.Object? expectedReference, Java.Lang.Object? newReference, bool expectedMark, bool newMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WeakCompareAndSet(class Java.Lang.Object expectedReference, class Java.Lang.Object newReference, bool expectedMark, bool newMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicMarkableReference.WeakCompareAndSet(Java.Lang.Object,Java.Lang.Object,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WeakCompareAndSet : Java.Lang.Object * Java.Lang.Object * bool * bool -&gt; bool&#xA;override this.WeakCompareAndSet : Java.Lang.Object * Java.Lang.Object * bool * bool -&gt; bool" Usage="atomicMarkableReference.WeakCompareAndSet (expectedReference, newReference, expectedMark, newMark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSet", "(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", "GetWeakCompareAndSet_Ljava_lang_Object_Ljava_lang_Object_ZZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSet", "(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", "GetWeakCompareAndSet_Ljava_lang_Object_Ljava_lang_Object_ZZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedReference" Type="Java.Lang.Object" />
        <Parameter Name="newReference" Type="Java.Lang.Object" />
        <Parameter Name="expectedMark" Type="System.Boolean" />
        <Parameter Name="newMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expectedReference">the expected value of the reference</param>
        <param name="newReference">the new value for the reference</param>
        <param name="expectedMark">the expected value of the mark</param>
        <param name="newMark">the new value for the mark</param>
        <summary>Atomically sets the value of both the reference and mark to the
            given update values if the current reference is <c>==</c> to
            the expected reference and the current mark is equal to the
            expected mark.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Atomically sets the value of both the reference and mark to the
            given update values if the current reference is <c>==</c> to
            the expected reference and the current mark is equal to the
            expected mark. This operation may fail spuriously and does not
            provide ordering guarantees, so is only rarely an
            appropriate alternative to <c>compareAndSet</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference#weakCompareAndSet(V,%20V,%20boolean,%20boolean)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V, V, boolean, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
