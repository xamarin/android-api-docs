<Type Name="AtomicIntegerArray" FullName="Java.Util.Concurrent.Atomic.AtomicIntegerArray">
  <TypeSignature Language="C#" Value="public class AtomicIntegerArray : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AtomicIntegerArray extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.IO.ISerializable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.Concurrent.Atomic.AtomicIntegerArray" />
  <TypeSignature Language="F#" Value="type AtomicIntegerArray = class&#xA;    inherit Object&#xA;    interface ISerializable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/util/concurrent/atomic/AtomicIntegerArray", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/util/concurrent/atomic/AtomicIntegerArray", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An <c>int</c> array in which elements may be updated atomically.</summary>
    <remarks>
      <para>An <c>int</c> array in which elements may be updated atomically.
            See the <c>VarHandle</c> specification for descriptions of the
            properties of atomic accesses.</para>
      <para>Added in 1.5.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AtomicIntegerArray (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Atomic.AtomicIntegerArray : int -&gt; Java.Util.Concurrent.Atomic.AtomicIntegerArray" Usage="new Java.Util.Concurrent.Atomic.AtomicIntegerArray length" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">the length of the array</param>
        <summary>Creates a new AtomicIntegerArray of the given length, with all
            elements initially zero.</summary>
        <remarks>
          <para>Creates a new AtomicIntegerArray of the given length, with all
            elements initially zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#AtomicIntegerArray(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.AtomicIntegerArray(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AtomicIntegerArray (int[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.#ctor(System.Int32[])" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Atomic.AtomicIntegerArray : int[] -&gt; Java.Util.Concurrent.Atomic.AtomicIntegerArray" Usage="new Java.Util.Concurrent.Atomic.AtomicIntegerArray array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "([I)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "([I)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="array" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="array">the array to copy elements from</param>
        <summary>Creates a new AtomicIntegerArray with the same length as, and
            all elements copied from, the given array.</summary>
        <remarks>
          <para>Creates a new AtomicIntegerArray with the same length as, and
            all elements copied from, the given array.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#AtomicIntegerArray(int[])" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.AtomicIntegerArray(int[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if array is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AtomicIntegerArray (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Util.Concurrent.Atomic.AtomicIntegerArray : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Util.Concurrent.Atomic.AtomicIntegerArray" Usage="new Java.Util.Concurrent.Atomic.AtomicIntegerArray (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccumulateAndGet">
      <MemberSignature Language="C#" Value="public int AccumulateAndGet (int i, int x, Java.Util.Functions.IIntBinaryOperator? accumulatorFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AccumulateAndGet(int32 i, int32 x, class Java.Util.Functions.IIntBinaryOperator accumulatorFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.AccumulateAndGet(System.Int32,System.Int32,Java.Util.Functions.IIntBinaryOperator)" />
      <MemberSignature Language="F#" Value="member this.AccumulateAndGet : int * int * Java.Util.Functions.IIntBinaryOperator -&gt; int" Usage="atomicIntegerArray.AccumulateAndGet (i, x, accumulatorFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("accumulateAndGet", "(IILjava/util/function/IntBinaryOperator;)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("accumulateAndGet", "(IILjava/util/function/IntBinaryOperator;)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="accumulatorFunction" Type="Java.Util.Functions.IIntBinaryOperator" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="x">the update value</param>
        <param name="accumulatorFunction">a side-effect-free function of two arguments</param>
        <summary>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function to the current and
            given values, returning the updated value.</summary>
        <returns>the updated value</returns>
        <remarks>
          <para>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function to the current and
            given values, returning the updated value. The function should
            be side-effect-free, since it may be re-applied when attempted
            updates fail due to contention among threads.  The function is
            applied with the current value of the element at index <c>i</c>
            as its first argument, and the given update as the second
            argument.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#accumulateAndGet(int,%20int,%20java.util.function.IntBinaryOperator)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.accumulateAndGet(int, int, java.util.function.IntBinaryOperator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAndGet">
      <MemberSignature Language="C#" Value="public int AddAndGet (int i, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddAndGet(int32 i, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.AddAndGet(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.AddAndGet : int * int -&gt; int" Usage="atomicIntegerArray.AddAndGet (i, delta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addAndGet", "(II)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addAndGet", "(II)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="delta">the value to add</param>
        <summary>Atomically adds the given value to the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the updated value</returns>
        <remarks>
          <para>Atomically adds the given value to the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#addAndGet(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CompareAndExchange">
      <MemberSignature Language="C#" Value="public int CompareAndExchange (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareAndExchange(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.CompareAndExchange(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.CompareAndExchange : int * int * int -&gt; int" Usage="atomicIntegerArray.CompareAndExchange (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndExchange", "(III)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndExchange", "(III)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchange</c>.</summary>
        <returns>the witness value, which will be the same as the
            expected value if successful</returns>
        <remarks>
          <para>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchange</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#compareAndExchange(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.compareAndExchange(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndExchangeAcquire">
      <MemberSignature Language="C#" Value="public int CompareAndExchangeAcquire (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareAndExchangeAcquire(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.CompareAndExchangeAcquire(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.CompareAndExchangeAcquire : int * int * int -&gt; int" Usage="atomicIntegerArray.CompareAndExchangeAcquire (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndExchangeAcquire", "(III)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndExchangeAcquire", "(III)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchangeAcquire</c>.</summary>
        <returns>the witness value, which will be the same as the
            expected value if successful</returns>
        <remarks>
          <para>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchangeAcquire</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#compareAndExchangeAcquire(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.compareAndExchangeAcquire(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndExchangeRelease">
      <MemberSignature Language="C#" Value="public int CompareAndExchangeRelease (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareAndExchangeRelease(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.CompareAndExchangeRelease(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.CompareAndExchangeRelease : int * int * int -&gt; int" Usage="atomicIntegerArray.CompareAndExchangeRelease (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndExchangeRelease", "(III)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndExchangeRelease", "(III)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchangeRelease</c>.</summary>
        <returns>the witness value, which will be the same as the
            expected value if successful</returns>
        <remarks>
          <para>Atomically sets the element at index <c>i</c> to <c>newValue</c>
            if the element's current value, referred to as the &lt;em&gt;witness
            value&lt;/em&gt;, <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#compareAndExchangeRelease</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#compareAndExchangeRelease(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.compareAndExchangeRelease(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAndSet">
      <MemberSignature Language="C#" Value="public bool CompareAndSet (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CompareAndSet(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.CompareAndSet(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.CompareAndSet : int * int * int -&gt; bool" Usage="atomicIntegerArray.CompareAndSet (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("compareAndSet", "(III)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("compareAndSet", "(III)Z", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Atomically sets the element at index <c>i</c> to <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#compareAndSet</c>.</summary>
        <returns>
          <c>true</c> if successful. False return indicates that
            the actual value was not equal to the expected value.</returns>
        <remarks>
          <para>Atomically sets the element at index <c>i</c> to <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#compareAndSet</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#compareAndSet(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DecrementAndGet">
      <MemberSignature Language="C#" Value="public int DecrementAndGet (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DecrementAndGet(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.DecrementAndGet(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.DecrementAndGet : int -&gt; int" Usage="atomicIntegerArray.DecrementAndGet i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("decrementAndGet", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("decrementAndGet", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Atomically decrements the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the updated value</returns>
        <remarks>
          <para>Atomically decrements the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>Equivalent to <c>addAndGet(i, -1)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#decrementAndGet(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public int Get (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Get(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.Get(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Get : int -&gt; int" Usage="atomicIntegerArray.Get i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("get", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("get", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getVolatile</c>.</summary>
        <returns>the current value</returns>
        <remarks>
          <para>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getVolatile</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#get(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.get(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAcquire">
      <MemberSignature Language="C#" Value="public int GetAcquire (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAcquire(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAcquire(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetAcquire : int -&gt; int" Usage="atomicIntegerArray.GetAcquire i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAcquire", "(I)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAcquire", "(I)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAcquire</c>.</summary>
        <returns>the value</returns>
        <remarks>
          <para>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAcquire</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAcquire(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAcquire(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAndAccumulate">
      <MemberSignature Language="C#" Value="public int GetAndAccumulate (int i, int x, Java.Util.Functions.IIntBinaryOperator? accumulatorFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndAccumulate(int32 i, int32 x, class Java.Util.Functions.IIntBinaryOperator accumulatorFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndAccumulate(System.Int32,System.Int32,Java.Util.Functions.IIntBinaryOperator)" />
      <MemberSignature Language="F#" Value="member this.GetAndAccumulate : int * int * Java.Util.Functions.IIntBinaryOperator -&gt; int" Usage="atomicIntegerArray.GetAndAccumulate (i, x, accumulatorFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndAccumulate", "(IILjava/util/function/IntBinaryOperator;)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndAccumulate", "(IILjava/util/function/IntBinaryOperator;)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="accumulatorFunction" Type="Java.Util.Functions.IIntBinaryOperator" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="x">the update value</param>
        <param name="accumulatorFunction">a side-effect-free function of two arguments</param>
        <summary>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function to the current and
            given values, returning the previous value.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function to the current and
            given values, returning the previous value. The function should
            be side-effect-free, since it may be re-applied when attempted
            updates fail due to contention among threads.  The function is
            applied with the current value of the element at index <c>i</c>
            as its first argument, and the given update as the second
            argument.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndAccumulate(int,%20int,%20java.util.function.IntBinaryOperator)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndAccumulate(int, int, java.util.function.IntBinaryOperator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAndAdd">
      <MemberSignature Language="C#" Value="public int GetAndAdd (int i, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndAdd(int32 i, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndAdd(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetAndAdd : int * int -&gt; int" Usage="atomicIntegerArray.GetAndAdd (i, delta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndAdd", "(II)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndAdd", "(II)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="delta">the value to add</param>
        <summary>Atomically adds the given value to the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically adds the given value to the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndAdd(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAndDecrement">
      <MemberSignature Language="C#" Value="public int GetAndDecrement (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndDecrement(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndDecrement(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetAndDecrement : int -&gt; int" Usage="atomicIntegerArray.GetAndDecrement i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndDecrement", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndDecrement", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Atomically decrements the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically decrements the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>Equivalent to <c>getAndAdd(i, -1)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndDecrement(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAndIncrement">
      <MemberSignature Language="C#" Value="public int GetAndIncrement (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndIncrement(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndIncrement(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetAndIncrement : int -&gt; int" Usage="atomicIntegerArray.GetAndIncrement i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndIncrement", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndIncrement", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Atomically increments the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically increments the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>Equivalent to <c>getAndAdd(i, 1)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndIncrement(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAndSet">
      <MemberSignature Language="C#" Value="public int GetAndSet (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndSet(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndSet(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetAndSet : int * int -&gt; int" Usage="atomicIntegerArray.GetAndSet (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndSet", "(II)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndSet", "(II)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Atomically sets the element at index <c>i</c> to <c>newValue</c> and returns the old value,
            with memory effects as specified by <c>VarHandle#getAndSet</c>.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically sets the element at index <c>i</c> to <c>newValue</c> and returns the old value,
            with memory effects as specified by <c>VarHandle#getAndSet</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndSet(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAndUpdate">
      <MemberSignature Language="C#" Value="public int GetAndUpdate (int i, Java.Util.Functions.IIntUnaryOperator? updateFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetAndUpdate(int32 i, class Java.Util.Functions.IIntUnaryOperator updateFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetAndUpdate(System.Int32,Java.Util.Functions.IIntUnaryOperator)" />
      <MemberSignature Language="F#" Value="member this.GetAndUpdate : int * Java.Util.Functions.IIntUnaryOperator -&gt; int" Usage="atomicIntegerArray.GetAndUpdate (i, updateFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAndUpdate", "(ILjava/util/function/IntUnaryOperator;)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAndUpdate", "(ILjava/util/function/IntUnaryOperator;)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="updateFunction" Type="Java.Util.Functions.IIntUnaryOperator" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="updateFunction">a side-effect-free function</param>
        <summary>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function, returning the
            previous value.</summary>
        <returns>the previous value</returns>
        <remarks>
          <para>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function, returning the
            previous value. The function should be side-effect-free, since
            it may be re-applied when attempted updates fail due to
            contention among threads.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getAndUpdate(int,%20java.util.function.IntUnaryOperator)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getAndUpdate(int, java.util.function.IntUnaryOperator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOpaque">
      <MemberSignature Language="C#" Value="public int GetOpaque (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOpaque(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetOpaque(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOpaque : int -&gt; int" Usage="atomicIntegerArray.GetOpaque i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getOpaque", "(I)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getOpaque", "(I)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getOpaque</c>.</summary>
        <returns>the value</returns>
        <remarks>
          <para>Returns the current value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getOpaque</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getOpaque(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getOpaque(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlain">
      <MemberSignature Language="C#" Value="public int GetPlain (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetPlain(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.GetPlain(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetPlain : int -&gt; int" Usage="atomicIntegerArray.GetPlain i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getPlain", "(I)I", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getPlain", "(I)I", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Returns the current value of the element at index <c>i</c>,
            with memory semantics of reading as if the variable was declared
            non-<c>volatile</c>.</summary>
        <returns>the value</returns>
        <remarks>
          <para>Returns the current value of the element at index <c>i</c>,
            with memory semantics of reading as if the variable was declared
            non-<c>volatile</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#getPlain(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.getPlain(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementAndGet">
      <MemberSignature Language="C#" Value="public int IncrementAndGet (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IncrementAndGet(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.IncrementAndGet(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.IncrementAndGet : int -&gt; int" Usage="atomicIntegerArray.IncrementAndGet i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("incrementAndGet", "(I)I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("incrementAndGet", "(I)I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <summary>Atomically increments the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</summary>
        <returns>the updated value</returns>
        <remarks>
          <para>Atomically increments the value of the element at index <c>i</c>,
            with memory effects as specified by <c>VarHandle#getAndAdd</c>.</para>
          <para>Equivalent to <c>addAndGet(i, 1)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#incrementAndGet(int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicIntegerArray.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Util.Concurrent.Atomic.AtomicIntegerArray.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LazySet">
      <MemberSignature Language="C#" Value="public void LazySet (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LazySet(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.LazySet(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.LazySet : int * int -&gt; unit" Usage="atomicIntegerArray.LazySet (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lazySet", "(II)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lazySet", "(II)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setRelease</c>.</summary>
        <remarks>
          <para>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setRelease</c>.</para>
          <para>Added in 1.6.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#lazySet(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Length() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.Length" />
      <MemberSignature Language="F#" Value="member this.Length : unit -&gt; int" Usage="atomicIntegerArray.Length " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("length", "()I", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("length", "()I", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the length of the array.</summary>
        <returns>the length of the array</returns>
        <remarks>
          <para>Returns the length of the array.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#length()" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.length()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.Set(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Set : int * int -&gt; unit" Usage="atomicIntegerArray.Set (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("set", "(II)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("set", "(II)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setVolatile</c>.</summary>
        <remarks>
          <para>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setVolatile</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#set(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.set(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOpaque">
      <MemberSignature Language="C#" Value="public void SetOpaque (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOpaque(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.SetOpaque(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetOpaque : int * int -&gt; unit" Usage="atomicIntegerArray.SetOpaque (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOpaque", "(II)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setOpaque", "(II)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setOpaque</c>.</summary>
        <remarks>
          <para>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setOpaque</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#setOpaque(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.setOpaque(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlain">
      <MemberSignature Language="C#" Value="public void SetPlain (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPlain(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.SetPlain(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetPlain : int * int -&gt; unit" Usage="atomicIntegerArray.SetPlain (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPlain", "(II)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPlain", "(II)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory semantics of setting as if the variable was
            declared non-<c>volatile</c> and non-<c>final</c>.</summary>
        <remarks>
          <para>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory semantics of setting as if the variable was
            declared non-<c>volatile</c> and non-<c>final</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#setPlain(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.setPlain(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRelease">
      <MemberSignature Language="C#" Value="public void SetRelease (int i, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRelease(int32 i, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.SetRelease(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetRelease : int * int -&gt; unit" Usage="atomicIntegerArray.SetRelease (i, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setRelease", "(II)V", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setRelease", "(II)V", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="newValue">the new value</param>
        <summary>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setRelease</c>.</summary>
        <remarks>
          <para>Sets the element at index <c>i</c> to <c>newValue</c>,
            with memory effects as specified by <c>VarHandle#setRelease</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#setRelease(int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.setRelease(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicIntegerArray.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Util.Concurrent.Atomic.AtomicIntegerArray.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Util.Concurrent.Atomic.AtomicIntegerArray.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Util.Concurrent.Atomic.AtomicIntegerArray.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAndGet">
      <MemberSignature Language="C#" Value="public int UpdateAndGet (int i, Java.Util.Functions.IIntUnaryOperator? updateFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 UpdateAndGet(int32 i, class Java.Util.Functions.IIntUnaryOperator updateFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.UpdateAndGet(System.Int32,Java.Util.Functions.IIntUnaryOperator)" />
      <MemberSignature Language="F#" Value="member this.UpdateAndGet : int * Java.Util.Functions.IIntUnaryOperator -&gt; int" Usage="atomicIntegerArray.UpdateAndGet (i, updateFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("updateAndGet", "(ILjava/util/function/IntUnaryOperator;)I", "", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("updateAndGet", "(ILjava/util/function/IntUnaryOperator;)I", "", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="updateFunction" Type="Java.Util.Functions.IIntUnaryOperator" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="updateFunction">a side-effect-free function</param>
        <summary>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function, returning the
            updated value.</summary>
        <returns>the updated value</returns>
        <remarks>
          <para>Atomically updates (with memory effects as specified by <c>VarHandle#compareAndSet</c>) the element at index <c>i</c> with
            the results of applying the given function, returning the
            updated value. The function should be side-effect-free, since it
            may be re-applied when attempted updates fail due to contention
            among threads.</para>
          <para>Added in 1.8.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#updateAndGet(int,%20java.util.function.IntUnaryOperator)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.updateAndGet(int, java.util.function.IntUnaryOperator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSet">
      <MemberSignature Language="C#" Value="public bool WeakCompareAndSet (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WeakCompareAndSet(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.WeakCompareAndSet(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WeakCompareAndSet : int * int * int -&gt; bool" Usage="atomicIntegerArray.WeakCompareAndSet (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSet", "(III)Z", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSet", "(III)Z", "")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#weakCompareAndSetPlain</c>.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#weakCompareAndSetPlain</c>.</para>
          <para>This member is deprecated. This method has plain memory effects but the method
            name implies volatile memory effects (see methods such as
            <c>#compareAndExchange</c> and <c>#compareAndSet</c>).  To avoid
            confusion over plain or volatile memory effects it is recommended that
            the method <c>#weakCompareAndSetPlain</c> be used instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#weakCompareAndSet(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSetAcquire">
      <MemberSignature Language="C#" Value="public bool WeakCompareAndSetAcquire (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WeakCompareAndSetAcquire(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.WeakCompareAndSetAcquire(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WeakCompareAndSetAcquire : int * int * int -&gt; bool" Usage="atomicIntegerArray.WeakCompareAndSetAcquire (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSetAcquire", "(III)Z", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSetAcquire", "(III)Z", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSetAcquire</c>.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSetAcquire</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#weakCompareAndSetAcquire(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSetAcquire(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSetPlain">
      <MemberSignature Language="C#" Value="public bool WeakCompareAndSetPlain (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WeakCompareAndSetPlain(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.WeakCompareAndSetPlain(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WeakCompareAndSetPlain : int * int * int -&gt; bool" Usage="atomicIntegerArray.WeakCompareAndSetPlain (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSetPlain", "(III)Z", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSetPlain", "(III)Z", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#weakCompareAndSetPlain</c>.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by <c>VarHandle#weakCompareAndSetPlain</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#weakCompareAndSetPlain(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSetPlain(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSetRelease">
      <MemberSignature Language="C#" Value="public bool WeakCompareAndSetRelease (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WeakCompareAndSetRelease(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.WeakCompareAndSetRelease(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WeakCompareAndSetRelease : int * int * int -&gt; bool" Usage="atomicIntegerArray.WeakCompareAndSetRelease (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSetRelease", "(III)Z", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSetRelease", "(III)Z", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSetRelease</c>.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSetRelease</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#weakCompareAndSetRelease(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSetRelease(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakCompareAndSetVolatile">
      <MemberSignature Language="C#" Value="public bool WeakCompareAndSetVolatile (int i, int expectedValue, int newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WeakCompareAndSetVolatile(int32 i, int32 expectedValue, int32 newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.Concurrent.Atomic.AtomicIntegerArray.WeakCompareAndSetVolatile(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WeakCompareAndSetVolatile : int * int * int -&gt; bool" Usage="atomicIntegerArray.WeakCompareAndSetVolatile (i, expectedValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("weakCompareAndSetVolatile", "(III)Z", "", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("weakCompareAndSetVolatile", "(III)Z", "", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
        <Parameter Name="expectedValue" Type="System.Int32" />
        <Parameter Name="newValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">the index</param>
        <param name="expectedValue">the expected value</param>
        <param name="newValue">the new value</param>
        <summary>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSet</c>.</summary>
        <returns>
          <c>true</c> if successful</returns>
        <remarks>
          <para>Possibly atomically sets the element at index <c>i</c> to
            <c>newValue</c> if the element's current value <c>== expectedValue</c>,
            with memory effects as specified by
            <c>VarHandle#weakCompareAndSet</c>.</para>
          <para>Added in 9.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray#weakCompareAndSetVolatile(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSetVolatile(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
