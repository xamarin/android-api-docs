<Type Name="XmlPullParser" FullName="Org.XmlPull.V1.XmlPullParser">
  <TypeSignature Language="C#" Value="public abstract class XmlPullParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlPullParser extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xmlpull/v1/XmlPullParser")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>XML Pull Parser is an interface that defines parsing functionality provided
 in  (visit this website to
 learn more about API and its implementations).</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">XML Pull Parser is an interface that defines parsing functionality provided
 in  (visit this website to
 learn more about API and its implementations).

 </para>
      <para tool="javadoc-to-mdoc">There are following different
 kinds of parser depending on which features are set:<list type="bullet"><item><term><format type="text/html"><b>non-validating</b></format> parser as defined in XML 1.0 spec when
   FEATURE_PROCESS_DOCDECL is set to true
 </term></item><item><term><format type="text/html"><b>validating parser</b></format> as defined in XML 1.0 spec when
   FEATURE_VALIDATION is true (and that implies that FEATURE_PROCESS_DOCDECL is true)
 </term></item><item><term>when FEATURE_PROCESS_DOCDECL is false (this is default and
   if different value is required necessary must be changed before parsing is started)
   then parser behaves like XML 1.0 compliant non-validating parser under condition that
  <i>no DOCDECL is present</i> in XML documents
   (internal entites can still be defined with defineEntityReplacementText()).
   This mode of operation is intended <format type="text/html"><b>for operation in constrained environments</b></format> such as J2ME.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">There are two key methods: next() and nextToken(). While next() provides
 access to high level parsing events, nextToken() allows access to lower
 level tokens.

 </para>
      <para tool="javadoc-to-mdoc">The current event state of the parser
 can be determined by calling the
  method.
 Initially, the parser is in the 
 state.

 </para>
      <para tool="javadoc-to-mdoc">The method  advances the parser to the
 next event. The int value returned from next determines the current parser
 state and is identical to the value returned from following calls to
 getEventType ().

 </para>
      <para tool="javadoc-to-mdoc">Th following event types are seen by next()<format type="text/html"><dl><dt><dd> An XML start tag was read.
 <dt><dd> Text content was read;
 the text content can be retrieved using the getText() method.
  (when in validating mode next() will not report ignorable whitespace, use nextToken() instead)
 <dt><dd> An end tag was read
 <dt><dd> No more events are available
 </dd></dt></dd></dt></dd></dt></dd></dt></dl></format></para>
      <para tool="javadoc-to-mdoc">after first next() or nextToken() (or any other next*() method)
 is called user application can obtain
 XML version, standalone and encoding from XML declaration
 in following ways:<list type="bullet"><item><term><format type="text/html"><b>version</b></format>:
  getProperty("")
       returns String ("1.0") or null if XMLDecl was not read or if property is not supported
 </term></item><item><term><format type="text/html"><b>standalone</b></format>:
  getProperty("")
       returns Boolean: null if there was no standalone declaration
  or if property is not supported
         otherwise returns Boolean(true) if standalone="yes" and Boolean(false) when standalone="no"
 </term></item><item><term><format type="text/html"><b>encoding</b></format>: obtained from getInputEncoding()
       null if stream had unknown encoding (not set in setInputStream)
           and it was not declared in XMLDecl
 </term></item></list>

 A minimal example for using this API may look as follows:
 <example><code lang="java">
 import java.io.IOException;
 import java.io.StringReader;

 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;

 public class SimpleXmlPullApp
 {

     public static void main (String args[])
         throws XmlPullParserException, IOException
     {
         XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
         factory.setNamespaceAware(true);
         XmlPullParser xpp = factory.newPullParser();

         xpp.setInput( new StringReader ( "&lt;foo&gt;Hello World!&lt;/foo&gt;" ) );
         int eventType = xpp.getEventType();
         while (eventType != XmlPullParser.END_DOCUMENT) {
          if(eventType == XmlPullParser.START_DOCUMENT) {
              System.out.println("Start document");
          } else if(eventType == XmlPullParser.START_TAG) {
              System.out.println("Start tag "+xpp.getName());
          } else if(eventType == XmlPullParser.END_TAG) {
              System.out.println("End tag "+xpp.getName());
          } else if(eventType == XmlPullParser.TEXT) {
              System.out.println("Text "+xpp.getText());
          }
          eventType = xpp.next();
         }
         System.out.println("End document");
     }
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">The above example will generate the following output:
 <example><code lang="java">
 Start document
 Start tag foo
 Text Hello World!
 End tag foo
 End document
 </code></example></para>
      <para tool="javadoc-to-mdoc">For more details on API usage, please refer to the
 quick Introduction available at <format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Org.XmlPull.V1.XmlPullParserFactory" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.defineEntityReplacementText(java.lang.String,java.lang.String)" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.getName()" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.getNamespace()" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.getText()" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.next()" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.nextToken()" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.setInput(java.io.InputStream,java.lang.String)" /></c></term></item><item><term><c><see cref="F:Org.XmlPull.V1.XmlPullParser.FeatureProcessDocdecl" /></c></term></item><item><term><c><see cref="F:Org.XmlPull.V1.XmlPullParser.FeatureValidation" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.START_DOCUMENT" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.START_TAG" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.TEXT" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.END_TAG" /></c></term></item><item><term><c><see cref="!:Org.XmlPull.V1.XmlPullParser.END_DOCUMENT" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="FeatureProcessDocdecl">
      <MemberSignature Language="C#" Value="public const string FeatureProcessDocdecl;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string FeatureProcessDocdecl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FEATURE_PROCESS_DOCDECL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This feature determines whether the document declaration
 is processed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This feature determines whether the document declaration
 is processed. If set to false,
 the DOCDECL event type is reported by nextToken()
 and ignored by next().

 If this feature is activated, then the document declaration
 must be processed by the parser.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>Please note:</i> If the document type declaration
 was ignored, entity references may cause exceptions
 later in the parsing process.
 The default value of this feature is false. It cannot be changed
 during parsing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_PROCESS_DOCDECL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FeatureProcessNamespaces">
      <MemberSignature Language="C#" Value="public const string FeatureProcessNamespaces;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string FeatureProcessNamespaces" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FEATURE_PROCESS_NAMESPACES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This feature determines whether the parser processes
 namespaces.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This feature determines whether the parser processes
 namespaces. As for all features, the default value is false.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>NOTE:</i> The value can not be changed during
 parsing an must be set before parsing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_PROCESS_NAMESPACES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FeatureReportNamespaceAttributes">
      <MemberSignature Language="C#" Value="public const string FeatureReportNamespaceAttributes;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string FeatureReportNamespaceAttributes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FEATURE_REPORT_NAMESPACE_ATTRIBUTES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This feature determines whether namespace attributes are
 exposed via the attribute access methods.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This feature determines whether namespace attributes are
 exposed via the attribute access methods. Like all features,
 the default value is false. This feature cannot be changed
 during parsing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_REPORT_NAMESPACE_ATTRIBUTES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FeatureValidation">
      <MemberSignature Language="C#" Value="public const string FeatureValidation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string FeatureValidation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FEATURE_VALIDATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this feature is activated, all validation errors as
 defined in the XML 1.0 specification are reported.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If this feature is activated, all validation errors as
 defined in the XML 1.0 specification are reported.
 This implies that FEATURE_PROCESS_DOCDECL is true and both, the
 internal and external document type declaration will be processed.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Please Note:</i> This feature can not be changed
 during parsing. The default value is false.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#FEATURE_VALIDATION" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NoNamespace">
      <MemberSignature Language="C#" Value="public const string NoNamespace;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NoNamespace" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NO_NAMESPACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This constant represents the default namespace (empty string "") </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constant represents the default namespace (empty string "") </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#NO_NAMESPACE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Types">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;string&gt; Types { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IList`1&lt;string&gt; Types" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("TYPES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This array can be used to convert the event type integer constants
 such as START_TAG or TEXT to
 to a string.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This array can be used to convert the event type integer constants
 such as START_TAG or TEXT to
 to a string. For example, the value of TYPES[START_TAG] is
 the string "START_TAG".

 This array is intended for diagnostic output only. Relying
 on the contents of the array may be dangerous since malicious
 applications may alter the array, although it is final, due
 to limitations of the Java language.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html#TYPES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
