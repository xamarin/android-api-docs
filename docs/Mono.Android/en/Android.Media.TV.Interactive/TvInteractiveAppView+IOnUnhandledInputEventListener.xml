<Type Name="TvInteractiveAppView+IOnUnhandledInputEventListener" FullName="Android.Media.TV.Interactive.TvInteractiveAppView+IOnUnhandledInputEventListener">
  <TypeSignature Language="C#" Value="public interface TvInteractiveAppView.IOnUnhandledInputEventListener : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract beforefieldinit TvInteractiveAppView/IOnUnhandledInputEventListener implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Media.TV.Interactive.TvInteractiveAppView.IOnUnhandledInputEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface TvInteractiveAppView.IOnUnhandledInputEventListener&#xA;Implements IDisposable, IJavaObject, IJavaPeerable" />
  <TypeSignature Language="C++ CLI" Value="public: interface class TvInteractiveAppView::IOnUnhandledInputEventListener : Android::Runtime::IJavaObject, IDisposable, Java::Interop::IJavaPeerable" />
  <TypeSignature Language="F#" Value="type TvInteractiveAppView.IOnUnhandledInputEventListener = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/media/tv/interactive/TvInteractiveAppView$OnUnhandledInputEventListener", "", "Android.Media.TV.Interactive.TvInteractiveAppView/IOnUnhandledInputEventListenerInvoker", ApiSince=33)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/media/tv/interactive/TvInteractiveAppView$OnUnhandledInputEventListener", "", "Android.Media.TV.Interactive.TvInteractiveAppView/IOnUnhandledInputEventListenerInvoker", ApiSince=33)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface definition for a callback to be invoked when the unhandled input event is received.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/media/tv/interactive/TvInteractiveAppView.OnUnhandledInputEventListener" title="Reference documentation">Java documentation for <code>android.media.tv.interactive.TvInteractiveAppView.OnUnhandledInputEventListener</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnUnhandledInputEvent">
      <MemberSignature Language="C#" Value="public bool OnUnhandledInputEvent (Android.Views.InputEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnUnhandledInputEvent(class Android.Views.InputEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Media.TV.Interactive.TvInteractiveAppView.IOnUnhandledInputEventListener.OnUnhandledInputEvent(Android.Views.InputEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnUnhandledInputEvent (e As InputEvent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool OnUnhandledInputEvent(Android::Views::InputEvent ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnhandledInputEvent : Android.Views.InputEvent -&gt; bool" Usage="iOnUnhandledInputEventListener.OnUnhandledInputEvent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onUnhandledInputEvent", "(Landroid/view/InputEvent;)Z", "GetOnUnhandledInputEvent_Landroid_view_InputEvent_Handler:Android.Media.TV.Interactive.TvInteractiveAppView/IOnUnhandledInputEventListenerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onUnhandledInputEvent", "(Landroid/view/InputEvent;)Z", "GetOnUnhandledInputEvent_Landroid_view_InputEvent_Handler:Android.Media.TV.Interactive.TvInteractiveAppView/IOnUnhandledInputEventListenerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.InputEvent" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Called when an input event was not handled by the TV Interactive App.</summary>
        <returns>If you handled the event, return <c>true</c>. If you want to allow the event to
                    be handled by the next receiver, return <c>false</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/media/tv/interactive/TvInteractiveAppView.OnUnhandledInputEventListener#onUnhandledInputEvent(android.view.InputEvent)" title="Reference documentation">Java documentation for <code>android.media.tv.interactive.TvInteractiveAppView.OnUnhandledInputEventListener.onUnhandledInputEvent(android.view.InputEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
