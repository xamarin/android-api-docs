<Type Name="MessageFormat" FullName="Java.Text.MessageFormat">
  <TypeSignature Language="C#" Value="public class MessageFormat : Java.Text._Format" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageFormat extends Java.Text._Format" />
  <TypeSignature Language="DocId" Value="T:Java.Text.MessageFormat" />
  <TypeSignature Language="F#" Value="type MessageFormat = class&#xA;    inherit _Format" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text._Format</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/text/MessageFormat", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/text/MessageFormat", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>MessageFormat</c> provides a means to produce concatenated
            messages in a language-neutral way.</summary>
    <remarks>
      <para>
        <c>MessageFormat</c> provides a means to produce concatenated
            messages in a language-neutral way. Use this to construct messages
            displayed for end users.</para>
      <para>
        <c>MessageFormat</c> takes a set of objects, formats them, then
            inserts the formatted strings into the pattern at the appropriate places.</para>
      <para>&lt;strong&gt;Note:&lt;/strong&gt;
            <c>MessageFormat</c> differs from the other <c>Format</c>
            classes in that you create a <c>MessageFormat</c> object with one
            of its constructors (not with a <c>getInstance</c> style factory
            method). The factory methods aren't necessary because <c>MessageFormat</c>
            itself doesn't implement locale specific behavior. Any locale specific
            behavior is defined by the pattern that you provide as well as the
            subformats used for inserted arguments.
            
            &lt;h2&gt;"patterns"&gt;Patterns and Their Interpretation&lt;/h2&gt;
            
            <c>MessageFormat</c> uses patterns of the following form:
            &lt;blockquote&gt;</para>
      <code lang="text/java">&lt;i&gt;MessageFormatPattern:&lt;/i&gt;
                    &lt;i&gt;String&lt;/i&gt;
                    &lt;i&gt;MessageFormatPattern&lt;/i&gt; &lt;i&gt;FormatElement&lt;/i&gt; &lt;i&gt;String&lt;/i&gt;
            
            &lt;i&gt;FormatElement:&lt;/i&gt;
                    { &lt;i&gt;ArgumentIndex&lt;/i&gt; }
                    { &lt;i&gt;ArgumentIndex&lt;/i&gt; , &lt;i&gt;FormatType&lt;/i&gt; }
                    { &lt;i&gt;ArgumentIndex&lt;/i&gt; , &lt;i&gt;FormatType&lt;/i&gt; , &lt;i&gt;FormatStyle&lt;/i&gt; }
            
            &lt;i&gt;FormatType: one of &lt;/i&gt;
                    number date time choice
            
            &lt;i&gt;FormatStyle:&lt;/i&gt;
                    short
                    medium
                    long
                    full
                    integer
                    currency
                    percent
                    &lt;i&gt;SubformatPattern&lt;/i&gt;
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>Within a <i>String</i>, a pair of single quotes can be used to
            quote any arbitrary characters except single quotes. For example,
            pattern string <c>"'{0}'"</c> represents string
            <c>"{0}"</c>, not a <i>FormatElement</i>. A single quote itself
            must be represented by doubled single quotes <c>''</c> throughout a
            <i>String</i>.  For example, pattern string <c>"'{''}'"</c> is
            interpreted as a sequence of <c>'{</c> (start of quoting and a
            left curly brace), <c>''</c> (a single quote), and
            <c>}'</c> (a right curly brace and end of quoting),
            &lt;em&gt;not&lt;/em&gt; <c>'{'</c> and <c>'}'</c> (quoted left and
            right curly braces): representing string <c>"{'}"</c>,
            &lt;em&gt;not&lt;/em&gt; <c>"{}"</c>.</para>
      <para>A <i>SubformatPattern</i> is interpreted by its corresponding
            subformat, and subformat-dependent pattern rules apply. For example,
            pattern string <c>"{1,number,&lt;u&gt;$'#',##&lt;/u&gt;}"</c>
            (<i>SubformatPattern</i> with underline) will produce a number format
            with the pound-sign quoted, with a result such as: <c>"$#31,45"</c>. Refer to each <c>Format</c> subclass documentation for
            details.</para>
      <para>Any unmatched quote is treated as closed at the end of the given
            pattern. For example, pattern string <c>"'{0</c>"} is treated as
            pattern <c>"'{0</c>'"}.</para>
      <para>Any curly braces within an unquoted pattern must be balanced. For
            example, <c>"ab {0} de"</c> and <c>"ab '}' de"</c> are
            valid patterns, but <c>"ab {0'}' de"</c>, <c>"ab } de"</c>
            and <c>"''{''"</c> are not.
            
            &lt;dl&gt;&lt;dt&gt;&lt;b&gt;Warning:&lt;/b&gt;&lt;dd&gt;The rules for using quotes within message
            format patterns unfortunately have shown to be somewhat confusing.
            In particular, it isn't always obvious to localizers whether single
            quotes need to be doubled or not. Make sure to inform localizers about
            the rules, and tell them (for example, by using comments in resource
            bundle source files) which strings will be processed by <c>MessageFormat</c>.
            Note that localizers may need to use single quotes in translated
            strings where the original version doesn't have them.
            &lt;/dl&gt;</para>
      <para>The <i>ArgumentIndex</i> value is a non-negative integer written
            using the digits <c>'0'</c> through <c>'9'</c>, and represents an index into the
            <c>arguments</c> array passed to the <c>format</c> methods
            or the result array returned by the <c>parse</c> methods.</para>
      <para>The <i>FormatType</i> and <i>FormatStyle</i> values are used to create
            a <c>Format</c> instance for the format element. The following
            table shows how the values map to <c>Format</c> instances. Combinations not
            shown in the table are illegal. A <i>SubformatPattern</i> must
            be a valid pattern string for the <c>Format</c> subclass used.
            
            &lt;table class="plain"&gt;
            &lt;caption style="display:none"&gt;Shows how FormatType and FormatStyle values map to Format instances&lt;/caption&gt;
            &lt;thead&gt;
               &lt;tr&gt;
                  &lt;th scope="col" class="TableHeadingColor"&gt;FormatType
                  &lt;th scope="col" class="TableHeadingColor"&gt;FormatStyle
                  &lt;th scope="col" class="TableHeadingColor"&gt;Subformat Created
            &lt;/thead&gt;
            &lt;tbody&gt;
               &lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<i>(none)</i>&lt;th scope="row" style="text-weight: normal"&gt;<i>(none)</i>&lt;td&gt;<c>null</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal" rowspan=5&gt;<c>number</c>&lt;th scope="row" style="text-weight: normal"&gt;<i>(none)</i>&lt;td&gt;<c>NumberFormat#getInstance(Locale) NumberFormat.getInstance</c><c>(getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>integer</c>&lt;td&gt;<c>NumberFormat#getIntegerInstance(Locale) NumberFormat.getIntegerInstance</c><c>(getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>currency</c>&lt;td&gt;<c>NumberFormat#getCurrencyInstance(Locale) NumberFormat.getCurrencyInstance</c><c>(getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>percent</c>&lt;td&gt;<c>NumberFormat#getPercentInstance(Locale) NumberFormat.getPercentInstance</c><c>(getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<i>SubformatPattern</i>&lt;td&gt;<c>new</c><c>DecimalFormat#DecimalFormat(String,DecimalFormatSymbols) DecimalFormat</c><c>(subformatPattern,</c><c>DecimalFormatSymbols#getInstance(Locale) DecimalFormatSymbols.getInstance</c><c>(getLocale()))</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal" rowspan=6&gt;<c>date</c>&lt;th scope="row" style="text-weight: normal"&gt;<i>(none)</i>&lt;td&gt;<c>DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance</c><c>(</c><c>DateFormat#DEFAULT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>short</c>&lt;td&gt;<c>DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance</c><c>(</c><c>DateFormat#SHORT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>medium</c>&lt;td&gt;<c>DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance</c><c>(</c><c>DateFormat#DEFAULT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>long</c>&lt;td&gt;<c>DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance</c><c>(</c><c>DateFormat#LONG</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>full</c>&lt;td&gt;<c>DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance</c><c>(</c><c>DateFormat#FULL</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<i>SubformatPattern</i>&lt;td&gt;<c>new</c><c>SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat</c><c>(subformatPattern, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal" rowspan=6&gt;<c>time</c>&lt;th scope="row" style="text-weight: normal"&gt;<i>(none)</i>&lt;td&gt;<c>DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance</c><c>(</c><c>DateFormat#DEFAULT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>short</c>&lt;td&gt;<c>DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance</c><c>(</c><c>DateFormat#SHORT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>medium</c>&lt;td&gt;<c>DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance</c><c>(</c><c>DateFormat#DEFAULT</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>long</c>&lt;td&gt;<c>DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance</c><c>(</c><c>DateFormat#LONG</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>full</c>&lt;td&gt;<c>DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance</c><c>(</c><c>DateFormat#FULL</c><c>, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<i>SubformatPattern</i>&lt;td&gt;<c>new</c><c>SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat</c><c>(subformatPattern, getLocale())</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight: normal"&gt;<c>choice</c>&lt;th scope="row" style="text-weight: normal"&gt;<i>SubformatPattern</i>&lt;td&gt;<c>new</c><c>ChoiceFormat#ChoiceFormat(String) ChoiceFormat</c><c>(subformatPattern)</c>&lt;/tbody&gt;
            &lt;/table&gt;
            
            &lt;h3&gt;Usage Information&lt;/h3&gt;</para>
      <para>Here are some examples of usage.
            In real internationalized programs, the message format pattern and other
            static strings will, of course, be obtained from resource bundles.
            Other parameters will be dynamically determined at runtime.</para>
      <para>The first example uses the static method <c>MessageFormat.format</c>,
            which internally creates a <c>MessageFormat</c> for one-time use:
            &lt;blockquote&gt;</para>
      <code lang="text/java">int planet = 7;
            String event = "a disturbance in the Force";
            
            String result = MessageFormat.format(
                "At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.",
                planet, new Date(), event);
            </code>
      <para>&lt;/blockquote&gt;
            The output is:
            &lt;blockquote&gt;</para>
      <code lang="text/java">At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>The following example creates a <c>MessageFormat</c> instance that
            can be used repeatedly:
            &lt;blockquote&gt;</para>
      <code lang="text/java">int fileCount = 1273;
            String diskName = "MyDisk";
            Object[] testArgs = {new Long(fileCount), diskName};
            
            MessageFormat form = new MessageFormat(
                "The disk \"{1}\" contains {0} file(s).");
            
            System.out.println(form.format(testArgs));
            </code>
      <para>&lt;/blockquote&gt;
            The output with different values for <c>fileCount</c>:
            &lt;blockquote&gt;</para>
      <code lang="text/java">The disk "MyDisk" contains 0 file(s).
            The disk "MyDisk" contains 1 file(s).
            The disk "MyDisk" contains 1,273 file(s).
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>For more sophisticated patterns, you can use a <c>ChoiceFormat</c>
            to produce correct forms for singular and plural:
            &lt;blockquote&gt;</para>
      <code lang="text/java">MessageFormat form = new MessageFormat("The disk \"{1}\" contains {0}.");
            double[] filelimits = {0,1,2};
            String[] filepart = {"no files","one file","{0,number} files"};
            ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
            form.setFormatByArgumentIndex(0, fileform);
            
            int fileCount = 1273;
            String diskName = "MyDisk";
            Object[] testArgs = {new Long(fileCount), diskName};
            
            System.out.println(form.format(testArgs));
            </code>
      <para>&lt;/blockquote&gt;
            The output with different values for <c>fileCount</c>:
            &lt;blockquote&gt;</para>
      <code lang="text/java">The disk "MyDisk" contains no files.
            The disk "MyDisk" contains one file.
            The disk "MyDisk" contains 1,273 files.
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>You can create the <c>ChoiceFormat</c> programmatically, as in the
            above example, or by using a pattern. See <c>ChoiceFormat</c>
            for more information.
            &lt;blockquote&gt;</para>
      <code lang="text/java">{@code
            form.applyPattern(
               "There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}.");
            }</code>
      <para>&lt;/blockquote&gt;</para>
      <para>&lt;strong&gt;Note:&lt;/strong&gt; As we see above, the string produced
            by a <c>ChoiceFormat</c> in <c>MessageFormat</c> is treated as special;
            occurrences of '{' are used to indicate subformats, and cause recursion.
            If you create both a <c>MessageFormat</c> and <c>ChoiceFormat</c>
            programmatically (instead of using the string patterns), then be careful not to
            produce a format that recurses on itself, which will cause an infinite loop.</para>
      <para>When a single argument is parsed more than once in the string, the last match
            will be the final result of the parsing.  For example,
            &lt;blockquote&gt;</para>
      <code lang="text/java">MessageFormat mf = new MessageFormat("{0,number,#.##}, {0,number,#.#}");
            Object[] objs = {new Double(3.1415)};
            String result = mf.format( objs );
            // result now equals "3.14, 3.1"
            objs = null;
            objs = mf.parse(result, new ParsePosition(0));
            // objs now equals {new Double(3.1)}
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>Likewise, parsing with a <c>MessageFormat</c> object using patterns containing
            multiple occurrences of the same argument would return the last match.  For
            example,
            &lt;blockquote&gt;</para>
      <code lang="text/java">MessageFormat mf = new MessageFormat("{0}, {0}, {0}");
            String forParsing = "x, y, z";
            Object[] objs = mf.parse(forParsing, new ParsePosition(0));
            // result now equals {new String("z")}
            </code>
      <para>&lt;/blockquote&gt;
            
            &lt;h3&gt;"synchronization"&gt;Synchronization&lt;/h3&gt;</para>
      <para>Message formats are not synchronized.
            It is recommended to create separate format instances for each thread.
            If multiple threads access a format concurrently, it must be synchronized
            externally.</para>
      <para>Added in 1.1.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/text/MessageFormat" title="Reference documentation">Java documentation for <code>java.text.MessageFormat</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageFormat (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Java.Text.MessageFormat : string -&gt; Java.Text.MessageFormat" Usage="new Java.Text.MessageFormat pattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern for this message format</param>
        <summary>Constructs a MessageFormat for the default
            <c>java.util.Locale.Category#FORMAT FORMAT</c> locale and the
            specified pattern.</summary>
        <remarks>
          <para>Constructs a MessageFormat for the default
            <c>java.util.Locale.Category#FORMAT FORMAT</c> locale and the
            specified pattern.
            The constructor first sets the locale, then parses the pattern and
            creates a list of subformats for the format elements contained in it.
            Patterns and their interpretation are specified in the
            class description.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#MessageFormat(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.MessageFormat(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFormat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Text.MessageFormat : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Text.MessageFormat" Usage="new Java.Text.MessageFormat (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageFormat (string? pattern, Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.#ctor(System.String,Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="new Java.Text.MessageFormat : string * Java.Util.Locale -&gt; Java.Text.MessageFormat" Usage="new Java.Text.MessageFormat (pattern, locale)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/util/Locale;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/util/Locale;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern for this message format</param>
        <param name="locale">the locale for this message format</param>
        <summary>Constructs a MessageFormat for the specified locale and
            pattern.</summary>
        <remarks>
          <para>Constructs a MessageFormat for the specified locale and
            pattern.
            The constructor first sets the locale, then parses the pattern and
            creates a list of subformats for the format elements contained in it.
            Patterns and their interpretation are specified in the
            class description.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#MessageFormat(java.lang.String,%20java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.MessageFormat(java.lang.String, java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyPattern (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPattern(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.ApplyPattern(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ApplyPattern : string -&gt; unit&#xA;override this.ApplyPattern : string -&gt; unit" Usage="messageFormat.ApplyPattern pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the pattern for this message format</param>
        <summary>Sets the pattern used by this message format.</summary>
        <remarks>
          <para>Sets the pattern used by this message format.
            The method parses the pattern and creates a list of subformats
            for the format elements contained in it.
            Patterns and their interpretation are specified in the
            class description.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#applyPattern(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.applyPattern(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string? Format (string? pattern, params Java.Lang.Object[]? arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string pattern, class Java.Lang.Object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.Format(System.String,Java.Lang.Object[])" />
      <MemberSignature Language="F#" Value="static member Format : string * Java.Lang.Object[] -&gt; string" Usage="Java.Text.MessageFormat.Format (pattern, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="arguments" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="arguments">an array of objects to be formatted and substituted.</param>
        <summary>Formats an array of objects and appends the &lt;code&gt;MessageFormat&lt;/code&gt;'s
            pattern, with format elements replaced by the formatted objects, to the
            provided &lt;code&gt;StringBuffer&lt;/code&gt;.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override sealed Java.Lang.StringBuffer? Format (Java.Lang.Object? arguments, Java.Lang.StringBuffer? result, Java.Text.FieldPosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(class Java.Lang.Object arguments, class Java.Lang.StringBuffer result, class Java.Text.FieldPosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.Format(Java.Lang.Object,Java.Lang.StringBuffer,Java.Text.FieldPosition)" />
      <MemberSignature Language="F#" Value="override this.Format : Java.Lang.Object * Java.Lang.StringBuffer * Java.Text.FieldPosition -&gt; Java.Lang.StringBuffer" Usage="messageFormat.Format (arguments, result, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Java.Lang.Object" />
        <Parameter Name="result" Type="Java.Lang.StringBuffer" />
        <Parameter Name="pos" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="arguments">an array of objects to be formatted and substituted.</param>
        <param name="result">where text is appended.</param>
        <param name="pos">keeps track on the position of the first replaced argument
                       in the output string.</param>
        <summary>Formats an array of objects and appends the <c>MessageFormat</c>'s
            pattern, with format elements replaced by the formatted objects, to the
            provided <c>StringBuffer</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Formats an array of objects and appends the <c>MessageFormat</c>'s
            pattern, with format elements replaced by the formatted objects, to the
            provided <c>StringBuffer</c>.
            This is equivalent to
            &lt;blockquote&gt;
                <c>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[]) arguments, result, pos)</c>&lt;/blockquote&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>object</c> is not an array of <c>Object</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public Java.Lang.StringBuffer? Format (Java.Lang.Object[]? arguments, Java.Lang.StringBuffer? result, Java.Text.FieldPosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.StringBuffer Format(class Java.Lang.Object[] arguments, class Java.Lang.StringBuffer result, class Java.Text.FieldPosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.Format(Java.Lang.Object[],Java.Lang.StringBuffer,Java.Text.FieldPosition)" />
      <MemberSignature Language="F#" Value="override this.Format : Java.Lang.Object[] * Java.Lang.StringBuffer * Java.Text.FieldPosition -&gt; Java.Lang.StringBuffer" Usage="messageFormat.Format (arguments, result, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Java.Lang.Object[]" />
        <Parameter Name="result" Type="Java.Lang.StringBuffer" />
        <Parameter Name="pos" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="arguments">an array of objects to be formatted and substituted.</param>
        <param name="result">where text is appended.</param>
        <param name="pos">keeps track on the position of the first replaced argument
                       in the output string.</param>
        <summary>Formats an array of objects and appends the <c>MessageFormat</c>'s
            pattern, with format elements replaced by the formatted objects, to the
            provided <c>StringBuffer</c>.</summary>
        <returns>the string buffer passed in as <c>result</c>, with formatted
            text appended</returns>
        <remarks>
          <para>Formats an array of objects and appends the <c>MessageFormat</c>'s
            pattern, with format elements replaced by the formatted objects, to the
            provided <c>StringBuffer</c>.</para>
          <para>The text substituted for the individual format elements is derived from
            the current subformat of the format element and the
            <c>arguments</c> element at the format element's argument index
            as indicated by the first matching line of the following table. An
            argument is <i>unavailable</i> if <c>arguments</c> is
            <c>null</c> or has fewer than argumentIndex+1 elements.
            
            &lt;table class="plain"&gt;
            &lt;caption style="display:none"&gt;Examples of subformat,argument,and formatted text&lt;/caption&gt;
            &lt;thead&gt;
               &lt;tr&gt;
                  &lt;th scope="col"&gt;Subformat
                  &lt;th scope="col"&gt;Argument
                  &lt;th scope="col"&gt;Formatted Text
            &lt;/thead&gt;
            &lt;tbody&gt;
               &lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal" rowspan=2&gt;<i>any</i>&lt;th scope="row" style="text-weight-normal"&gt;<i>unavailable</i>&lt;td&gt;<c>"{" + argumentIndex + "}"</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<c>null</c>&lt;td&gt;<c>"null"</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<c>instanceof ChoiceFormat</c>&lt;th scope="row" style="text-weight-normal"&gt;<i>any</i>&lt;td&gt;<c>subformat.format(argument).indexOf('{') &amp;gt;= 0 ?&lt;br&gt;
                      (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :
                      subformat.format(argument)</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<c>!= null</c>&lt;th scope="row" style="text-weight-normal"&gt;<i>any</i>&lt;td&gt;<c>subformat.format(argument)</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal" rowspan=4&gt;<c>null</c>&lt;th scope="row" style="text-weight-normal"&gt;<c>instanceof Number</c>&lt;td&gt;<c>NumberFormat.getInstance(getLocale()).format(argument)</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<c>instanceof Date</c>&lt;td&gt;<c>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<c>instanceof String</c>&lt;td&gt;<c>argument</c>&lt;tr&gt;
                  &lt;th scope="row" style="text-weight-normal"&gt;<i>any</i>&lt;td&gt;<c>argument.toString()</c>&lt;/tbody&gt;
            &lt;/table&gt;</para>
          <para>If <c>pos</c> is non-null, and refers to
            <c>Field.ARGUMENT</c>, the location of the first formatted
            string will be returned.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#format(java.lang.Object[],%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public virtual Java.Text._Format[]? GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text._Format[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.GetFormats" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; Java.Text._Format[]&#xA;override this.GetFormats : unit -&gt; Java.Text._Format[]" Usage="messageFormat.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFormats", "()[Ljava/text/Format;", "GetGetFormatsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFormats", "()[Ljava/text/Format;", "GetGetFormatsHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the formats used for the format elements in the
            previously set pattern string.</summary>
        <returns>the formats used for the format elements in the pattern</returns>
        <remarks>
          <para>Gets the formats used for the format elements in the
            previously set pattern string.
            The order of formats in the returned array corresponds to
            the order of format elements in the pattern string.</para>
          <para>Since the order of format elements in a pattern string often
            changes during localization, it's generally better to use the
            <c>#getFormatsByArgumentIndex getFormatsByArgumentIndex</c>
            method, which assumes an order of formats corresponding to the
            order of elements in the <c>arguments</c> array passed to
            the <c>format</c> methods or the result array returned by
            the <c>parse</c> methods.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#getFormats()" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.getFormats()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFormatsByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual Java.Text._Format[]? GetFormatsByArgumentIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text._Format[] GetFormatsByArgumentIndex() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.GetFormatsByArgumentIndex" />
      <MemberSignature Language="F#" Value="abstract member GetFormatsByArgumentIndex : unit -&gt; Java.Text._Format[]&#xA;override this.GetFormatsByArgumentIndex : unit -&gt; Java.Text._Format[]" Usage="messageFormat.GetFormatsByArgumentIndex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getFormatsByArgumentIndex", "()[Ljava/text/Format;", "GetGetFormatsByArgumentIndexHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getFormatsByArgumentIndex", "()[Ljava/text/Format;", "GetGetFormatsByArgumentIndexHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the formats used for the values passed into
            <c>format</c> methods or returned from <c>parse</c>
            methods.</summary>
        <returns>the formats used for the arguments within the pattern</returns>
        <remarks>
          <para>Gets the formats used for the values passed into
            <c>format</c> methods or returned from <c>parse</c>
            methods. The indices of elements in the returned array
            correspond to the argument indices used in the previously set
            pattern string.
            The order of formats in the returned array thus corresponds to
            the order of elements in the <c>arguments</c> array passed
            to the <c>format</c> methods or the result array returned
            by the <c>parse</c> methods.</para>
          <para>If an argument index is used for more than one format element
            in the pattern string, then the format used for the last such
            format element is returned in the array. If an argument index
            is not used for any format element in the pattern string, then
            null is returned in the array.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#getFormatsByArgumentIndex()" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.getFormatsByArgumentIndex()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Text.MessageFormat.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Text.MessageFormat.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Locale? Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Locale Locale" />
      <MemberSignature Language="DocId" Value="P:Java.Text.MessageFormat.Locale" />
      <MemberSignature Language="F#" Value="member this.Locale : Java.Util.Locale with get, set" Usage="Java.Text.MessageFormat.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLocale", "()Ljava/util/Locale;", "GetGetLocaleHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLocale", "()Ljava/util/Locale;", "GetGetLocaleHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLocale", "(Ljava/util/Locale;)V", "GetSetLocale_Ljava_util_Locale_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setLocale", "(Ljava/util/Locale;)V", "GetSetLocale_Ljava_util_Locale_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="locale">the locale to be used when creating or comparing subformats</param>
        <summary>Gets the locale that's used when creating or comparing subformats. -or- Sets the locale to be used when creating or comparing subformats.</summary>
        <value>the locale used when creating or comparing subformats</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the locale that's used when creating or comparing subformats.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#getLocale()" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.getLocale()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the locale to be used when creating or comparing subformats.
            This affects subsequent calls
            &lt;ul&gt;
            &lt;li&gt;to the <c>#applyPattern applyPattern</c>
                and <c>#toPattern toPattern</c> methods if format elements specify
                a format type and therefore have the subformats created in the
                <c>applyPattern</c> method, as well as
            &lt;li&gt;to the <c>format</c> and
                <c>#formatToCharacterIterator formatToCharacterIterator</c> methods
                if format elements do not specify a format type and therefore have
                the subformats created in the formatting methods.
            &lt;/ul&gt;
            Subformats that have already been created are not affected.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#setLocale(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.setLocale(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[]? Parse (string? source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.Parse(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Parse : string -&gt; Java.Lang.Object[]&#xA;override this.Parse : string -&gt; Java.Lang.Object[]" Usage="messageFormat.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/String;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/String;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A <c>String</c> whose beginning should be parsed.</param>
        <summary>Parses text from the beginning of the given string to produce an object
            array.</summary>
        <returns>An <c>Object</c> array parsed from the string.</returns>
        <remarks>
          <para>Parses text from the beginning of the given string to produce an object
            array.
            The method may not use the entire text of the given string.</para>
          <para>See the <c>#parse(String, ParsePosition)</c> method for more information
            on message parsing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#parse(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.parse(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Text.ParseException">if an error occurs during parsing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[]? Parse (string? source, Java.Text.ParsePosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] Parse(string source, class Java.Text.ParsePosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.Parse(System.String,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="abstract member Parse : string * Java.Text.ParsePosition -&gt; Java.Lang.Object[]&#xA;override this.Parse : string * Java.Text.ParsePosition -&gt; Java.Lang.Object[]" Usage="messageFormat.Parse (source, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="pos" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="source">the string to parse</param>
        <param name="pos">the parse position</param>
        <summary>Parses the string.</summary>
        <returns>an array of parsed objects</returns>
        <remarks>
          <para>Parses the string.</para>
          <para>Caveats: The parse may fail in a number of circumstances.
            For example:
            &lt;ul&gt;
            &lt;li&gt;If one of the arguments does not occur in the pattern.
            &lt;li&gt;If the format of an argument loses information, such as
                with a choice format where a large number formats to "many".
            &lt;li&gt;Does not yet handle recursion (where
                the substituted strings contain {n} references.)
            &lt;li&gt;Will not always find a match (or the correct match)
                if some part of the parse is ambiguous.
                For example, if the pattern "{1},{2}" is used with the
                string arguments {"a,b", "c"}, it will format as "a,b,c".
                When the result is parsed, it will return {"a", "b,c"}.
            &lt;li&gt;If a single argument is parsed more than once in the string,
                then the later parse wins.
            &lt;/ul&gt;
            When the parse fails, use ParsePosition.getErrorIndex() to find out
            where in the string the parsing failed.  The returned error
            index is the starting offset of the sub-patterns that the string
            is comparing with.  For example, if the parsing string "AAA {0} BBB"
            is comparing against the pattern "AAD {0} BBB", the error index is
            0. When an error occurs, the call to this method will return null.
            If the source is null, return an empty array.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#parse(java.lang.String,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.parse(java.lang.String, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParseObject">
      <MemberSignature Language="C#" Value="public override Java.Lang.Object? ParseObject (string? source, Java.Text.ParsePosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.Object ParseObject(string source, class Java.Text.ParsePosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.ParseObject(System.String,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="override this.ParseObject : string * Java.Text.ParsePosition -&gt; Java.Lang.Object" Usage="messageFormat.ParseObject (source, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;", "GetParseObject_Ljava_lang_String_Ljava_text_ParsePosition_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;", "GetParseObject_Ljava_lang_String_Ljava_text_ParsePosition_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="pos" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="source">A <c>String</c>, part of which should be parsed.</param>
        <param name="pos">A <c>ParsePosition</c> object with index and error
                       index information as described above.</param>
        <summary>Parses text from a string to produce an object array.</summary>
        <returns>An <c>Object</c> array parsed from the string. In case of
                    error, returns null.</returns>
        <remarks>
          <para>Parses text from a string to produce an object array.</para>
          <para>The method attempts to parse text starting at the index given by
            <c>pos</c>.
            If parsing succeeds, then the index of <c>pos</c> is updated
            to the index after the last character used (parsing does not necessarily
            use all characters up to the end of the string), and the parsed
            object array is returned. The updated <c>pos</c> can be used to
            indicate the starting point for the next call to this method.
            If an error occurs, then the index of <c>pos</c> is not
            changed, the error index of <c>pos</c> is set to the index of
            the character where the error occurred, and null is returned.</para>
          <para>See the <c>#parse(String, ParsePosition)</c> method for more information
            on message parsing.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#parseObject(java.lang.String,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.parseObject(java.lang.String, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormat">
      <MemberSignature Language="C#" Value="public virtual void SetFormat (int formatElementIndex, Java.Text._Format? newFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormat(int32 formatElementIndex, class Java.Text._Format newFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.SetFormat(System.Int32,Java.Text._Format)" />
      <MemberSignature Language="F#" Value="abstract member SetFormat : int * Java.Text._Format -&gt; unit&#xA;override this.SetFormat : int * Java.Text._Format -&gt; unit" Usage="messageFormat.SetFormat (formatElementIndex, newFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFormat", "(ILjava/text/Format;)V", "GetSetFormat_ILjava_text_Format_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFormat", "(ILjava/text/Format;)V", "GetSetFormat_ILjava_text_Format_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatElementIndex" Type="System.Int32" />
        <Parameter Name="newFormat" Type="Java.Text._Format" />
      </Parameters>
      <Docs>
        <param name="formatElementIndex">the index of a format element within the pattern</param>
        <param name="newFormat">the format to use for the specified format element</param>
        <summary>Sets the format to use for the format element with the given
            format element index within the previously set pattern string.</summary>
        <remarks>
          <para>Sets the format to use for the format element with the given
            format element index within the previously set pattern string.
            The format element index is the zero-based number of the format
            element counting from the start of the pattern string.</para>
          <para>Since the order of format elements in a pattern string often
            changes during localization, it is generally better to use the
            <c>#setFormatByArgumentIndex setFormatByArgumentIndex</c>
            method, which accesses format elements based on the argument
            index they specify.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#setFormat(int,%20java.text.Format)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.setFormat(int, java.text.Format)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormatByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual void SetFormatByArgumentIndex (int argumentIndex, Java.Text._Format? newFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormatByArgumentIndex(int32 argumentIndex, class Java.Text._Format newFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.SetFormatByArgumentIndex(System.Int32,Java.Text._Format)" />
      <MemberSignature Language="F#" Value="abstract member SetFormatByArgumentIndex : int * Java.Text._Format -&gt; unit&#xA;override this.SetFormatByArgumentIndex : int * Java.Text._Format -&gt; unit" Usage="messageFormat.SetFormatByArgumentIndex (argumentIndex, newFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFormatByArgumentIndex", "(ILjava/text/Format;)V", "GetSetFormatByArgumentIndex_ILjava_text_Format_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFormatByArgumentIndex", "(ILjava/text/Format;)V", "GetSetFormatByArgumentIndex_ILjava_text_Format_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentIndex" Type="System.Int32" />
        <Parameter Name="newFormat" Type="Java.Text._Format" />
      </Parameters>
      <Docs>
        <param name="argumentIndex">the argument index for which to use the new format</param>
        <param name="newFormat">the new format to use</param>
        <summary>Sets the format to use for the format elements within the
            previously set pattern string that use the given argument
            index.</summary>
        <remarks>
          <para>Sets the format to use for the format elements within the
            previously set pattern string that use the given argument
            index.
            The argument index is part of the format element definition and
            represents an index into the <c>arguments</c> array passed
            to the <c>format</c> methods or the result array returned
            by the <c>parse</c> methods.</para>
          <para>If the argument index is used for more than one format element
            in the pattern string, then the new format is used for all such
            format elements. If the argument index is not used for any format
            element in the pattern string, then the new format is ignored.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#setFormatByArgumentIndex(int,%20java.text.Format)" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.setFormatByArgumentIndex(int, java.text.Format)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormats">
      <MemberSignature Language="C#" Value="public virtual void SetFormats (Java.Text._Format[]? newFormats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormats(class Java.Text._Format[] newFormats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.SetFormats(Java.Text._Format[])" />
      <MemberSignature Language="F#" Value="abstract member SetFormats : Java.Text._Format[] -&gt; unit&#xA;override this.SetFormats : Java.Text._Format[] -&gt; unit" Usage="messageFormat.SetFormats newFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFormats", "([Ljava/text/Format;)V", "GetSetFormats_arrayLjava_text_Format_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFormats", "([Ljava/text/Format;)V", "GetSetFormats_arrayLjava_text_Format_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFormats" Type="Java.Text._Format[]" />
      </Parameters>
      <Docs>
        <param name="newFormats">the new formats to use</param>
        <summary>Sets the formats to use for the format elements in the
            previously set pattern string.</summary>
        <remarks>
          <para>Sets the formats to use for the format elements in the
            previously set pattern string.
            The order of formats in <c>newFormats</c> corresponds to
            the order of format elements in the pattern string.</para>
          <para>If more formats are provided than needed by the pattern string,
            the remaining ones are ignored. If fewer formats are provided
            than needed, then only the first <c>newFormats.length</c>
            formats are replaced.</para>
          <para>Since the order of format elements in a pattern string often
            changes during localization, it is generally better to use the
            <c>#setFormatsByArgumentIndex setFormatsByArgumentIndex</c>
            method, which assumes an order of formats corresponding to the
            order of elements in the <c>arguments</c> array passed to
            the <c>format</c> methods or the result array returned by
            the <c>parse</c> methods.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#setFormats(java.text.Format[])" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.setFormats(java.text.Format[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormatsByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual void SetFormatsByArgumentIndex (Java.Text._Format[]? newFormats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormatsByArgumentIndex(class Java.Text._Format[] newFormats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.SetFormatsByArgumentIndex(Java.Text._Format[])" />
      <MemberSignature Language="F#" Value="abstract member SetFormatsByArgumentIndex : Java.Text._Format[] -&gt; unit&#xA;override this.SetFormatsByArgumentIndex : Java.Text._Format[] -&gt; unit" Usage="messageFormat.SetFormatsByArgumentIndex newFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setFormatsByArgumentIndex", "([Ljava/text/Format;)V", "GetSetFormatsByArgumentIndex_arrayLjava_text_Format_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setFormatsByArgumentIndex", "([Ljava/text/Format;)V", "GetSetFormatsByArgumentIndex_arrayLjava_text_Format_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFormats" Type="Java.Text._Format[]" />
      </Parameters>
      <Docs>
        <param name="newFormats">the new formats to use</param>
        <summary>Sets the formats to use for the values passed into
            <c>format</c> methods or returned from <c>parse</c>
            methods.</summary>
        <remarks>
          <para>Sets the formats to use for the values passed into
            <c>format</c> methods or returned from <c>parse</c>
            methods. The indices of elements in <c>newFormats</c>
            correspond to the argument indices used in the previously set
            pattern string.
            The order of formats in <c>newFormats</c> thus corresponds to
            the order of elements in the <c>arguments</c> array passed
            to the <c>format</c> methods or the result array returned
            by the <c>parse</c> methods.</para>
          <para>If an argument index is used for more than one format element
            in the pattern string, then the corresponding new format is used
            for all such format elements. If an argument index is not used
            for any format element in the pattern string, then the
            corresponding new format is ignored. If fewer formats are provided
            than needed, then only the formats for argument indices less
            than <c>newFormats.length</c> are replaced.</para>
          <para>Added in 1.4.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#setFormatsByArgumentIndex(java.text.Format[])" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.setFormatsByArgumentIndex(java.text.Format[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Text.MessageFormat.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Text.MessageFormat.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Text.MessageFormat.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Text.MessageFormat.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPattern">
      <MemberSignature Language="C#" Value="public virtual string? ToPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToPattern() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.MessageFormat.ToPattern" />
      <MemberSignature Language="F#" Value="abstract member ToPattern : unit -&gt; string&#xA;override this.ToPattern : unit -&gt; string" Usage="messageFormat.ToPattern " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a pattern representing the current state of the message format.</summary>
        <returns>a pattern representing the current state of the message format</returns>
        <remarks>
          <para>Returns a pattern representing the current state of the message format.
            The string is constructed from internal information and therefore
            does not necessarily equal the previously applied pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/MessageFormat#toPattern()" title="Reference documentation">Java documentation for <code>java.text.MessageFormat.toPattern()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
