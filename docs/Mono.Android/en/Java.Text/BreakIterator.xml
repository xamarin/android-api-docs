<Type Name="BreakIterator" FullName="Java.Text.BreakIterator">
  <TypeSignature Language="C#" Value="public abstract class BreakIterator : Java.Lang.Object, IDisposable, Java.Interop.IJavaPeerable, Java.Lang.ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BreakIterator extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Text.BreakIterator" />
  <TypeSignature Language="F#" Value="type BreakIterator = class&#xA;    inherit Object&#xA;    interface ICloneable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/text/BreakIterator", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/text/BreakIterator", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The <c>BreakIterator</c> class implements methods for finding
            the location of boundaries in text.</summary>
    <remarks>
      <para>The <c>BreakIterator</c> class implements methods for finding
            the location of boundaries in text. Instances of <c>BreakIterator</c>
            maintain a current position and scan over text
            returning the index of characters where boundaries occur.
            Internally, <c>BreakIterator</c> scans text using a
            <c>CharacterIterator</c>, and is thus able to scan text held
            by any object implementing that protocol. A <c>StringCharacterIterator</c>
            is used to scan <c>String</c> objects passed to <c>setText</c>.
            The <c>CharacterIterator</c> object must not be modified after having been
            passed to <c>setText</c>. If the text in the <c>CharacterIterator</c> object
            is changed, the caller must reset <c>BreakIterator</c> by calling
            <c>setText</c>.</para>
      <para>You use the factory methods provided by this class to create
            instances of various types of break iterators. In particular,
            use <c>getWordInstance</c>, <c>getLineInstance</c>,
            <c>getSentenceInstance</c>, and <c>getCharacterInstance</c>
            to create <c>BreakIterator</c>s that perform
            word, line, sentence, and character boundary analysis respectively.
            A single <c>BreakIterator</c> can work only on one unit
            (word, line, sentence, and so on). You must use a different iterator
            for each unit boundary analysis you wish to perform.</para>
      <para>"line"&gt;
            Line boundary analysis determines where a text string can be
            broken when line-wrapping. The mechanism correctly handles
            punctuation and hyphenated words. Actual line breaking needs
            to also consider the available line width and is handled by
            higher-level software.</para>
      <para>"sentence"&gt;
            Sentence boundary analysis allows selection with correct interpretation
            of periods within numbers and abbreviations, and trailing punctuation
            marks such as quotation marks and parentheses.</para>
      <para>"word"&gt;
            Word boundary analysis is used by search and replace functions, as
            well as within text editing applications that allow the user to
            select words with a double click. Word selection provides correct
            interpretation of punctuation marks within and following
            words. Characters that are not part of a word, such as symbols
            or punctuation marks, have word-breaks on both sides.</para>
      <para>"character"&gt;
            Character boundary analysis allows users to interact with characters
            as they expect to, for example, when moving the cursor through a text
            string. Character boundary analysis provides correct navigation
            through character strings, regardless of how the character is stored.
            The boundaries returned may be those of supplementary characters,
            combining character sequences, or ligature clusters.
            For example, an accented character might be stored as a base character
            and a diacritical mark. What users consider to be a character can
            differ between languages.</para>
      <para>The <c>BreakIterator</c> instances returned by the factory methods
            of this class are intended for use with natural languages only, not for
            programming language text. It is however possible to define subclasses
            that tokenize a programming language.</para>
      <para>&lt;strong&gt;Examples&lt;/strong&gt;:</para>
      <para>Creating and using text boundaries:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void main(String args[]) {
                 if (args.length == 1) {
                     String stringToExamine = args[0];
                     //print each word in order
                     BreakIterator boundary = BreakIterator.getWordInstance();
                     boundary.setText(stringToExamine);
                     printEachForward(boundary, stringToExamine);
                     //print each sentence in reverse order
                     boundary = BreakIterator.getSentenceInstance(Locale.US);
                     boundary.setText(stringToExamine);
                     printEachBackward(boundary, stringToExamine);
                     printFirst(boundary, stringToExamine);
                     printLast(boundary, stringToExamine);
                 }
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Print each element in order:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void printEachForward(BreakIterator boundary, String source) {
                int start = boundary.first();
                for (int end = boundary.next();
                     end != BreakIterator.DONE;
                     start = end, end = boundary.next()) {
                     System.out.println(source.substring(start,end));
                }
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Print each element in reverse order:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void printEachBackward(BreakIterator boundary, String source) {
                int end = boundary.last();
                for (int start = boundary.previous();
                     start != BreakIterator.DONE;
                     end = start, start = boundary.previous()) {
                    System.out.println(source.substring(start,end));
                }
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Print first element:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void printFirst(BreakIterator boundary, String source) {
                int start = boundary.first();
                int end = boundary.next();
                System.out.println(source.substring(start,end));
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Print last element:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void printLast(BreakIterator boundary, String source) {
                int end = boundary.last();
                int start = boundary.previous();
                System.out.println(source.substring(start,end));
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Print the element at a specified position:
            &lt;blockquote&gt;</para>
      <code lang="text/java">public static void printAt(BreakIterator boundary, int pos, String source) {
                int end = boundary.following(pos);
                int start = boundary.previous();
                System.out.println(source.substring(start,end));
            }
            </code>
      <para>&lt;/blockquote&gt;
            
            Find the next word:
            &lt;blockquote&gt;</para>
      <code lang="text/java">{@code
            public static int nextWordStartAfter(int pos, String text) {
                BreakIterator wb = BreakIterator.getWordInstance();
                wb.setText(text);
                int last = wb.following(pos);
                int current = wb.next();
                while (current != BreakIterator.DONE) {
                    for (int p = last; p &lt; current; p++) {
                        if (Character.isLetter(text.codePointAt(p)))
                            return last;
                    }
                    last = current;
                    current = wb.next();
                }
                return BreakIterator.DONE;
            }
            }</code>
      <para>(The iterator returned by BreakIterator.getWordInstance() is unique in that
            the break positions it returns don't represent both the start and end of the
            thing being iterated over.  That is, a sentence-break iterator returns breaks
            that each represent the end of one sentence and the beginning of the next.
            With the word-break iterator, the characters between two boundaries might be a
            word, or they might be the punctuation or whitespace between two words.  The
            above code uses a simple heuristic to determine which boundary is the beginning
            of a word: If the characters between this boundary and the next boundary
            include at least one letter (this can be an alphabetical letter, a CJK ideograph,
            a Hangul syllable, a Kana character, etc.), then the text between this boundary
            and the next is a word; otherwise, it's the material between words.)
            &lt;/blockquote&gt;</para>
      <para>Added in 1.1.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/text/BreakIterator" title="Reference documentation">Java documentation for <code>java.text.BreakIterator</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BreakIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructor.</summary>
        <remarks>
          <para>Constructor. BreakIterator is stateless and has no default behavior.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#BreakIterator()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.BreakIterator()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BreakIterator (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Text.BreakIterator : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Text.BreakIterator" Usage="new Java.Text.BreakIterator (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? CharacterInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Text.BreakIterator CharacterInstance" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.CharacterInstance" />
      <MemberSignature Language="F#" Value="static member CharacterInstance : Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.CharacterInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCharacterInstance", "()Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCharacterInstance", "()Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a new <c>BreakIterator</c> instance
            for character breaks
            for the Locale#getDefault() default locale.</summary>
        <value>A break iterator for character breaks</value>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for character breaks
            for the Locale#getDefault() default locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getCharacterInstance()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getCharacterInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object? Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Clone" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; Java.Lang.Object" Usage="breakIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clone", "()Ljava/lang/Object;", "GetCloneHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clone", "()Ljava/lang/Object;", "GetCloneHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a copy of this iterator</summary>
        <returns>A copy of this</returns>
        <remarks>
          <para>Create a copy of this iterator</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#clone()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.clone()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public abstract int Current ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Current() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Current" />
      <MemberSignature Language="F#" Value="abstract member Current : unit -&gt; int" Usage="breakIterator.Current " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("current", "()I", "GetCurrentHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("current", "()I", "GetCurrentHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns character index of the text boundary that was most
            recently returned by next(), next(int), previous(), first(), last(),
            following(int) or preceding(int).</summary>
        <returns>The text boundary returned from the above methods, first or last
            text boundary.</returns>
        <remarks>
          <para>Returns character index of the text boundary that was most
            recently returned by next(), next(int), previous(), first(), last(),
            following(int) or preceding(int). If any of these methods returns
            <c>BreakIterator.DONE</c> because either first or last text boundary
            has been reached, it returns the first or last text boundary depending on
            which one is reached.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#current()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.current()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public const int Done = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 Done = (-1)" />
      <MemberSignature Language="DocId" Value="F:Java.Text.BreakIterator.Done" />
      <MemberSignature Language="F#" Value="val mutable Done : int" Usage="Java.Text.BreakIterator.Done" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DONE")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DONE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>DONE is returned by previous(), next(), next(int), preceding(int)
            and following(int) when either the first or last text boundary has been
            reached.</summary>
        <remarks>
          <para>DONE is returned by previous(), next(), next(int), preceding(int)
            and following(int) when either the first or last text boundary has been
            reached.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#DONE" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.DONE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="First">
      <MemberSignature Language="C#" Value="public abstract int First ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 First() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.First" />
      <MemberSignature Language="F#" Value="abstract member First : unit -&gt; int" Usage="breakIterator.First " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("first", "()I", "GetFirstHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("first", "()I", "GetFirstHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the first boundary.</summary>
        <returns>The character index of the first text boundary.</returns>
        <remarks>
          <para>Returns the first boundary. The iterator's current position is set
            to the first text boundary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#first()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.first()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Following">
      <MemberSignature Language="C#" Value="public abstract int Following (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Following(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Following(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Following : int -&gt; int" Usage="breakIterator.Following offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("following", "(I)I", "GetFollowing_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("following", "(I)I", "GetFollowing_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">the character offset to begin scanning.</param>
        <summary>Returns the first boundary following the specified character offset.</summary>
        <returns>The first boundary after the specified offset or
            <c>BreakIterator.DONE</c> if the last text boundary is passed in
            as the offset.</returns>
        <remarks>
          <para>Returns the first boundary following the specified character offset. If the
            specified offset is equal to the last text boundary, it returns
            <c>BreakIterator.DONE</c> and the iterator's current position is unchanged.
            Otherwise, the iterator's current position is set to the returned boundary.
            The value returned is always greater than the offset or the value
            <c>BreakIterator.DONE</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#following(int)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.following(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the offset is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableLocales">
      <MemberSignature Language="C#" Value="public static Java.Util.Locale[]? GetAvailableLocales ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Locale[] GetAvailableLocales() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.GetAvailableLocales" />
      <MemberSignature Language="F#" Value="static member GetAvailableLocales : unit -&gt; Java.Util.Locale[]" Usage="Java.Text.BreakIterator.GetAvailableLocales " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getAvailableLocales", "()[Ljava/util/Locale;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getAvailableLocales", "()[Ljava/util/Locale;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of all locales for which the
            <c>get*Instance</c> methods of this class can return
            localized instances.</summary>
        <returns>An array of locales for which localized
                    <c>BreakIterator</c> instances are available.</returns>
        <remarks>
          <para>Returns an array of all locales for which the
            <c>get*Instance</c> methods of this class can return
            localized instances.
            It must contain at least a <c>Locale</c>
            instance equal to <c>java.util.Locale#US Locale.US</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getAvailableLocales()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getAvailableLocales()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? GetCharacterInstance (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Text.BreakIterator GetCharacterInstance(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.GetCharacterInstance(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="static member GetCharacterInstance : Java.Util.Locale -&gt; Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.GetCharacterInstance locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the desired locale</param>
        <summary>Returns a new <c>BreakIterator</c> instance
            for character breaks
            for the given locale.</summary>
        <returns>A break iterator for character breaks</returns>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for character breaks
            for the given locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getCharacterInstance(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getCharacterInstance(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLineInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? GetLineInstance (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Text.BreakIterator GetLineInstance(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.GetLineInstance(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="static member GetLineInstance : Java.Util.Locale -&gt; Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.GetLineInstance locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the desired locale</param>
        <summary>Returns a new <c>BreakIterator</c> instance
            for line breaks
            for the given locale.</summary>
        <returns>A break iterator for line breaks</returns>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for line breaks
            for the given locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getLineInstance(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getLineInstance(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>where</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSentenceInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? GetSentenceInstance (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Text.BreakIterator GetSentenceInstance(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.GetSentenceInstance(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="static member GetSentenceInstance : Java.Util.Locale -&gt; Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.GetSentenceInstance locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the desired locale</param>
        <summary>Returns a new <c>BreakIterator</c> instance
            for sentence breaks
            for the given locale.</summary>
        <returns>A break iterator for sentence breaks</returns>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for sentence breaks
            for the given locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getSentenceInstance(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getSentenceInstance(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>where</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWordInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? GetWordInstance (Java.Util.Locale? locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Text.BreakIterator GetWordInstance(class Java.Util.Locale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.GetWordInstance(Java.Util.Locale)" />
      <MemberSignature Language="F#" Value="static member GetWordInstance : Java.Util.Locale -&gt; Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.GetWordInstance locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">the desired locale</param>
        <summary>Returns a new <c>BreakIterator</c> instance
            for word breaks
            for the given locale.</summary>
        <returns>A break iterator for word breaks</returns>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for word breaks
            for the given locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getWordInstance(java.util.Locale)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getWordInstance(java.util.Locale)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>where</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBoundary">
      <MemberSignature Language="C#" Value="public virtual bool IsBoundary (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBoundary(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.IsBoundary(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member IsBoundary : int -&gt; bool&#xA;override this.IsBoundary : int -&gt; bool" Usage="breakIterator.IsBoundary offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("isBoundary", "(I)Z", "GetIsBoundary_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("isBoundary", "(I)Z", "GetIsBoundary_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">the character offset to check.</param>
        <summary>Returns true if the specified character offset is a text boundary.</summary>
        <returns>
          <c>true</c> if "offset" is a boundary position,
            <c>false</c> otherwise.</returns>
        <remarks>
          <para>Returns true if the specified character offset is a text boundary.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#isBoundary(int)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.isBoundary(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Text.BreakIterator.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Last">
      <MemberSignature Language="C#" Value="public abstract int Last ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Last() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Last" />
      <MemberSignature Language="F#" Value="abstract member Last : unit -&gt; int" Usage="breakIterator.Last " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("last", "()I", "GetLastHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("last", "()I", "GetLastHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the last boundary.</summary>
        <returns>The character index of the last text boundary.</returns>
        <remarks>
          <para>Returns the last boundary. The iterator's current position is set
            to the last text boundary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#last()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.last()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LineInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? LineInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Text.BreakIterator LineInstance" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.LineInstance" />
      <MemberSignature Language="F#" Value="static member LineInstance : Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.LineInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLineInstance", "()Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLineInstance", "()Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a new <c>BreakIterator</c> instance
            for line breaks
            for the Locale#getDefault() default locale.</summary>
        <value>A break iterator for line breaks</value>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for line breaks
            for the Locale#getDefault() default locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getLineInstance()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getLineInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public abstract int Next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Next" />
      <MemberSignature Language="F#" Value="abstract member Next : unit -&gt; int" Usage="breakIterator.Next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("next", "()I", "GetNextHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("next", "()I", "GetNextHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the boundary following the current boundary.</summary>
        <returns>The character index of the next text boundary or
            <c>BreakIterator.DONE</c> if the current boundary is the last text
            boundary.
            Equivalent to next(1).</returns>
        <remarks>
          <para>Returns the boundary following the current boundary. If the current boundary
            is the last text boundary, it returns <c>BreakIterator.DONE</c> and
            the iterator's current position is unchanged. Otherwise, the iterator's
            current position is set to the boundary following the current boundary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#next()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.next()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public abstract int Next (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Next(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Next : int -&gt; int" Usage="breakIterator.Next n" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("next", "(I)I", "GetNext_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("next", "(I)I", "GetNext_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">which boundary to return.  A value of 0
            does nothing.  Negative values move to previous boundaries
            and positive values move to later boundaries.</param>
        <summary>Returns the nth boundary from the current boundary.</summary>
        <returns>The character index of the nth boundary from the current position
            or <c>BreakIterator.DONE</c> if either first or last text boundary
            has been reached.</returns>
        <remarks>
          <para>Returns the nth boundary from the current boundary. If either
            the first or last text boundary has been reached, it returns
            <c>BreakIterator.DONE</c> and the current position is set to either
            the first or last text boundary depending on which one is reached. Otherwise,
            the iterator's current position is set to the new boundary.
            For example, if the iterator's current position is the mth text boundary
            and three more boundaries exist from the current boundary to the last text
            boundary, the next(2) call will return m + 2. The new text position is set
            to the (m + 2)th text boundary. A next(4) call would return
            <c>BreakIterator.DONE</c> and the last text boundary would become the
            new text position.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#next(int)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.next(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Preceding">
      <MemberSignature Language="C#" Value="public virtual int Preceding (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Preceding(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Preceding(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Preceding : int -&gt; int&#xA;override this.Preceding : int -&gt; int" Usage="breakIterator.Preceding offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("preceding", "(I)I", "GetPreceding_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("preceding", "(I)I", "GetPreceding_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">the character offset to begin scanning.</param>
        <summary>Returns the last boundary preceding the specified character offset.</summary>
        <returns>The last boundary before the specified offset or
            <c>BreakIterator.DONE</c> if the first text boundary is passed in
            as the offset.</returns>
        <remarks>
          <para>Returns the last boundary preceding the specified character offset. If the
            specified offset is equal to the first text boundary, it returns
            <c>BreakIterator.DONE</c> and the iterator's current position is unchanged.
            Otherwise, the iterator's current position is set to the returned boundary.
            The value returned is always less than the offset or the value
            <c>BreakIterator.DONE</c>.</para>
          <para>Added in 1.2.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#preceding(int)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.preceding(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the offset is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public abstract int Previous ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Previous() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.Previous" />
      <MemberSignature Language="F#" Value="abstract member Previous : unit -&gt; int" Usage="breakIterator.Previous " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("previous", "()I", "GetPreviousHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("previous", "()I", "GetPreviousHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the boundary preceding the current boundary.</summary>
        <returns>The character index of the previous text boundary or
            <c>BreakIterator.DONE</c> if the current boundary is the first text
            boundary.</returns>
        <remarks>
          <para>Returns the boundary preceding the current boundary. If the current boundary
            is the first text boundary, it returns <c>BreakIterator.DONE</c> and
            the iterator's current position is unchanged. Otherwise, the iterator's
            current position is set to the boundary preceding the current boundary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#previous()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.previous()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SentenceInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? SentenceInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Text.BreakIterator SentenceInstance" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.SentenceInstance" />
      <MemberSignature Language="F#" Value="static member SentenceInstance : Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.SentenceInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getSentenceInstance", "()Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getSentenceInstance", "()Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a new <c>BreakIterator</c> instance
            for sentence breaks
            for the Locale#getDefault() default locale.</summary>
        <value>A break iterator for sentence breaks</value>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for sentence breaks
            for the Locale#getDefault() default locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getSentenceInstance()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getSentenceInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetText">
      <MemberSignature Language="C#" Value="public virtual void SetText (string? newText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetText(string newText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.BreakIterator.SetText(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetText : string -&gt; unit&#xA;override this.SetText : string -&gt; unit" Usage="breakIterator.SetText newText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setText", "(Ljava/lang/String;)V", "GetSetText_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setText", "(Ljava/lang/String;)V", "GetSetText_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newText">new text to scan.</param>
        <summary>Set a new text string to be scanned.</summary>
        <remarks>
          <para>Set a new text string to be scanned.  The current scan
            position is reset to first().</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#setText(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.setText(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public abstract Java.Text.ICharacterIterator? Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Text.ICharacterIterator Text" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.Text" />
      <MemberSignature Language="F#" Value="member this.Text : Java.Text.ICharacterIterator with get, set" Usage="Java.Text.BreakIterator.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getText", "()Ljava/text/CharacterIterator;", "GetGetTextHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getText", "()Ljava/text/CharacterIterator;", "GetGetTextHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setText", "(Ljava/text/CharacterIterator;)V", "GetSetText_Ljava_text_CharacterIterator_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setText", "(Ljava/text/CharacterIterator;)V", "GetSetText_Ljava_text_CharacterIterator_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.ICharacterIterator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c>CharacterIterator</c> which represents the text being
 analyzed.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Text.BreakIterator.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Text.BreakIterator.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WordInstance">
      <MemberSignature Language="C#" Value="public static Java.Text.BreakIterator? WordInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Text.BreakIterator WordInstance" />
      <MemberSignature Language="DocId" Value="P:Java.Text.BreakIterator.WordInstance" />
      <MemberSignature Language="F#" Value="static member WordInstance : Java.Text.BreakIterator" Usage="Java.Text.BreakIterator.WordInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getWordInstance", "()Ljava/text/BreakIterator;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getWordInstance", "()Ljava/text/BreakIterator;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.BreakIterator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a new <c>BreakIterator</c> instance
            for word breaks
            for the Locale#getDefault() default locale.</summary>
        <value>A break iterator for word breaks</value>
        <remarks>
          <para>Returns a new <c>BreakIterator</c> instance
            for word breaks
            for the Locale#getDefault() default locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/BreakIterator#getWordInstance()" title="Reference documentation">Java documentation for <code>java.text.BreakIterator.getWordInstance()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
