<Type Name="SimpleDateFormat" FullName="Java.Text.SimpleDateFormat">
  <TypeSignature Language="C#" Value="public class SimpleDateFormat : Java.Text.DateFormat" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SimpleDateFormat extends Java.Text.DateFormat" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text.DateFormat</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/SimpleDateFormat", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Formats and parses dates in a locale-sensitive manner.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Formats and parses dates in a locale-sensitive manner. Formatting turns a <c><see cref="T:Java.Util.Date" /></c> into
 a <c><see cref="T:Java.Lang.String" /></c>, and parsing turns a <c>String</c> into a <c>Date</c>.

 <format type="text/html"><h4>Time Pattern Syntax</h4></format></para>
      <para tool="javadoc-to-mdoc">You can supply a Unicode 
 pattern describing what strings are produced/accepted, but almost all
 callers should use <c><see cref="P:Java.Text.DateFormat.DateInstance" /></c>, <c><see cref="P:Java.Text.DateFormat.DateTimeInstance" /></c>,
 or <c><see cref="P:Java.Text.DateFormat.TimeInstance" /></c> to get a ready-made instance suitable for the user's
 locale. In cases where the system does not provide a suitable pattern, see
 <c><see cref="M:Android.Text.Format.DateFormat.GetBestDateTimePattern(Java.Util.Locale,System.String)" /></c> which lets you specify
 the elements you'd like in a pattern and get back a pattern suitable for any given locale.

 </para>
      <para tool="javadoc-to-mdoc">The main reason you'd create an instance this class directly is because you need to
 format/parse a specific machine-readable format, in which case you almost certainly want
 to explicitly ask for <c><see cref="P:Java.Util.Locale.Us" /></c> to ensure that you get ASCII digits (rather than,
 say, Arabic digits).
 (See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".)
 The most useful non-localized pattern is <c>"yyyy-MM-dd HH:mm:ss.SSSZ"</c>, which corresponds
 to the ISO 8601 international standard date format.

 </para>
      <para tool="javadoc-to-mdoc">To specify the time format, use a <format type="text/html"><i>time pattern</i></format> string. In this
 string, any character from <c>'A'</c> to <c>'Z'</c> or <c>'a'</c> to <c>'z'</c> is
 treated specially. All other characters are passed through verbatim. The interpretation of each
 of the ASCII letters is given in the table below. ASCII letters not appearing in the table are
 reserved for future use, and it is an error to attempt to use them.

 </para>
      <para tool="javadoc-to-mdoc">The number of consecutive copies (the "count") of a pattern character further influences
 the format, as shown in the table. For fields of kind "number", the count is the minimum number
 of digits; shorter values are zero-padded to the given width and longer values overflow it.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
            <tr bgcolor="#CCCCFF" class="TableHeadingColor">
              <td>
                <b>Symbol</b>
              </td>
              <td>
                <b>Meaning</b>
              </td>
              <td>
                <b>Kind</b>
              </td>
              <td>
                <b>Example</b>
              </td>
            </tr>
            <tr>
              <td>
                <c>D</c>
              </td>
              <td>day in year</td>
              <td>(Number)</td>
              <td>189</td>
            </tr>
            <tr>
              <td>
                <c>E</c>
              </td>
              <td>day of week</td>
              <td>(Text)</td>
              <td>
                <c>E</c>/<c>EE</c>/<c>EEE</c>:Tue, <c>EEEE</c>:Tuesday, <c>EEEEE</c>:T</td>
            </tr>
            <tr>
              <td>
                <c>F</c>
              </td>
              <td>day of week in month</td>
              <td>(Number)</td>
              <td>2 <i>(2nd Wed in July)</i></td>
            </tr>
            <tr>
              <td>
                <c>G</c>
              </td>
              <td>era designator</td>
              <td>(Text)</td>
              <td>AD</td>
            </tr>
            <tr>
              <td>
                <c>H</c>
              </td>
              <td>hour in day (0-23)</td>
              <td>(Number)</td>
              <td>0</td>
            </tr>
            <tr>
              <td>
                <c>K</c>
              </td>
              <td>hour in am/pm (0-11)</td>
              <td>(Number)</td>
              <td>0</td>
            </tr>
            <tr>
              <td>
                <c>L</c>
              </td>
              <td>stand-alone month</td>
              <td>(Text)</td>
              <td>
                <c>L</c>:1 <c>LL</c>:01 <c>LLL</c>:Jan <c>LLLL</c>:January <c>LLLLL</c>:J</td>
            </tr>
            <tr>
              <td>
                <c>M</c>
              </td>
              <td>month in year</td>
              <td>(Text)</td>
              <td>
                <c>M</c>:1 <c>MM</c>:01 <c>MMM</c>:Jan <c>MMMM</c>:January <c>MMMMM</c>:J</td>
            </tr>
            <tr>
              <td>
                <c>S</c>
              </td>
              <td>fractional seconds</td>
              <td>(Number)</td>
              <td>978</td>
            </tr>
            <tr>
              <td>
                <c>W</c>
              </td>
              <td>week in month</td>
              <td>(Number)</td>
              <td>2</td>
            </tr>
            <tr>
              <td>
                <c>Z</c>
              </td>
              <td>time zone (RFC 822)</td>
              <td>(Time Zone)</td>
              <td>
                <c>Z</c>/<c>ZZ</c>/<c>ZZZ</c>:-0800 <c>ZZZZ</c>:GMT-08:00 <c>ZZZZZ</c>:-08:00</td>
            </tr>
            <tr>
              <td>
                <c>a</c>
              </td>
              <td>am/pm marker</td>
              <td>(Text)</td>
              <td>PM</td>
            </tr>
            <tr>
              <td>
                <c>c</c>
              </td>
              <td>stand-alone day of week</td>
              <td>(Text)</td>
              <td>
                <c>c</c>/<c>cc</c>/<c>ccc</c>:Tue, <c>cccc</c>:Tuesday, <c>ccccc</c>:T</td>
            </tr>
            <tr>
              <td>
                <c>d</c>
              </td>
              <td>day in month</td>
              <td>(Number)</td>
              <td>10</td>
            </tr>
            <tr>
              <td>
                <c>h</c>
              </td>
              <td>hour in am/pm (1-12)</td>
              <td>(Number)</td>
              <td>12</td>
            </tr>
            <tr>
              <td>
                <c>k</c>
              </td>
              <td>hour in day (1-24)</td>
              <td>(Number)</td>
              <td>24</td>
            </tr>
            <tr>
              <td>
                <c>m</c>
              </td>
              <td>minute in hour</td>
              <td>(Number)</td>
              <td>30</td>
            </tr>
            <tr>
              <td>
                <c>s</c>
              </td>
              <td>second in minute</td>
              <td>(Number)</td>
              <td>55</td>
            </tr>
            <tr>
              <td>
                <c>w</c>
              </td>
              <td>week in year</td>
              <td>(Number)</td>
              <td>27</td>
            </tr>
            <tr>
              <td>
                <c>y</c>
              </td>
              <td>year</td>
              <td>(Number)</td>
              <td>
                <c>yy</c>:10 <c>y</c>/<c>yyy</c>/<c>yyyy</c>:2010</td>
            </tr>
            <tr>
              <td>
                <c>z</c>
              </td>
              <td>time zone</td>
              <td>(Time Zone)</td>
              <td>
                <c>z</c>/<c>zz</c>/<c>zzz</c>:PST <c>zzzz</c>:Pacific Standard Time</td>
            </tr>
            <tr>
              <td>
                <c>'</c>
              </td>
              <td>escape for text</td>
              <td>(Delimiter)</td>
              <td>
                <c>'Date='</c>:Date=</td>
            </tr>
            <tr>
              <td>
                <c>''</c>
              </td>
              <td>single quote</td>
              <td>(Literal)</td>
              <td>
                <c>'o''clock'</c>:o'clock</td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">Note that <c>'S'</c> represents fractional seconds and not millisecond values.
 They will be padded on the left or on the right or both depending on the number of
 <c>'S'</c> in the pattern. For example, the number of fractional seconds in a
 <c>Date</c> where <c>Date.getTime() == 1000006</c> are <c>0.006</c> or
 <c>(6 / 1000)</c>. This leads to the following formatting:
 <list type="bullet"><item><term><c>"S" =&gt; "0"</c></term></item><item><term><c>"SSS" =&gt; "006" </c></term></item><item><term><c>"SSSSSS" =&gt; "006000" </c></term></item></list></para>
      <para tool="javadoc-to-mdoc">The two pattern characters <c>L</c> and <c>c</c> are ICU-compatible extensions, not
 available in the RI or in Android before Android 2.3 (Gingerbread, API level 9). These
 extensions are necessary for correct localization in languages such as Russian
 that make a grammatical distinction between, say, the word "June" in the sentence "June" and
 in the sentence "June 10th"; the former is the stand-alone form, the latter the regular
 form (because the usual case is to format a complete date). The relationship between <c>E</c>
 and <c>c</c> is equivalent, but for weekday names.

 </para>
      <para tool="javadoc-to-mdoc">Five-count patterns (such as "MMMMM") used for the shortest non-numeric
 representation of a field were introduced in Android 4.3 (Jelly Bean MR2, API level 18).

 </para>
      <para tool="javadoc-to-mdoc">When two numeric fields are directly adjacent with no intervening delimiter
 characters, they constitute a run of adjacent numeric fields. Such runs are
 parsed specially. For example, the format "HHmmss" parses the input text
 "123456" to 12:34:56, parses the input text "12345" to 1:23:45, and fails to
 parse "1234". In other words, the leftmost field of the run is flexible,
 while the others keep a fixed width. If the parse fails anywhere in the run,
 then the leftmost field is shortened by one character, and the entire run is
 parsed again. This is repeated until either the parse succeeds or the
 leftmost field is one character in length. If the parse still fails at that
 point, the parse of the run fails.

 </para>
      <para tool="javadoc-to-mdoc">See <c><see cref="M:Java.Text.SimpleDateFormat.Set2DigitYearStart(Java.Util.Date)" /></c> for more about handling two-digit years.

 <format type="text/html"><h4>Sample Code</h4></format></para>
      <para tool="javadoc-to-mdoc">If you're formatting for human use, you should use an instance returned from
 <c><see cref="T:Java.Text.DateFormat" /></c> as described above. This code:
 <example><code lang="java">
 DateFormat[] formats = new DateFormat[] {
   DateFormat.getDateInstance(),
   DateFormat.getDateTimeInstance(),
   DateFormat.getTimeInstance(),
 };
 for (DateFormat df : formats) {
   System.out.println(df.format(new Date(0)));
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">Produces this output when run on an <c>en_US</c> device in the America/Los_Angeles time zone:
 <example><code lang="java">
 Dec 31, 1969
 Dec 31, 1969 4:00:00 PM
 4:00:00 PM
 </code></example>
 And will produce similarly appropriate localized human-readable output on any user's system.

 </para>
      <para tool="javadoc-to-mdoc">If you're formatting for machine use, consider this code:
 <example><code lang="java">
 String[] formats = new String[] {
   "yyyy-MM-dd",
   "yyyy-MM-dd HH:mm",
   "yyyy-MM-dd HH:mmZ",
   "yyyy-MM-dd HH:mm:ss.SSSZ",
   "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
 };
 for (String format : formats) {
   SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);
   System.out.format("%30s %s\n", format, sdf.format(new Date(0)));
   sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
   System.out.format("%30s %s\n", format, sdf.format(new Date(0)));
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">Which produces this output when run in the America/Los_Angeles time zone:
 <example><code lang="java">
                     yyyy-MM-dd 1969-12-31
                     yyyy-MM-dd 1970-01-01
               yyyy-MM-dd HH:mm 1969-12-31 16:00
               yyyy-MM-dd HH:mm 1970-01-01 00:00
              yyyy-MM-dd HH:mmZ 1969-12-31 16:00-0800
              yyyy-MM-dd HH:mmZ 1970-01-01 00:00+0000
       yyyy-MM-dd HH:mm:ss.SSSZ 1969-12-31 16:00:00.000-0800
       yyyy-MM-dd HH:mm:ss.SSSZ 1970-01-01 00:00:00.000+0000
     yyyy-MM-dd'T'HH:mm:ss.SSSZ 1969-12-31T16:00:00.000-0800
     yyyy-MM-dd'T'HH:mm:ss.SSSZ 1970-01-01T00:00:00.000+0000
 </code></example></para>
      <para tool="javadoc-to-mdoc">As this example shows, each <c>SimpleDateFormat</c> instance has a <c><see cref="T:Java.Util.TimeZone" /></c>.
 This is because it's called upon to format instances of <c>Date</c>, which represents an
 absolute time in UTC. That is, <c>Date</c> does not carry time zone information.
 By default, <c>SimpleDateFormat</c> will use the system's default time zone. This is
 appropriate for human-readable output (for which, see the previous sample instead), but
 generally inappropriate for machine-readable output, where ambiguity is a problem. Note that
 in this example, the output that included a time but no time zone cannot be parsed back into
 the original <c>Date</c>. For this
 reason it is almost always necessary and desirable to include the timezone in the output.
 It may also be desirable to set the formatter's time zone to UTC (to ease comparison, or to
 make logs more readable, for example). It is often best to avoid formatting completely when
 writing dates/times in machine-readable form. Simply sending the "Unix time" as a <c>long</c>
 or as the string corresponding to the long is cheaper and unambiguous, and can be formatted any
 way the recipient deems appropriate.

 <format type="text/html"><h4>Synchronization</h4></format><c>SimpleDateFormat</c> is not thread-safe. Users should create a separate instance for
 each thread.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Calendar" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Date" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.TimeZone" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.Text.DateFormat" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SimpleDateFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new <c>SimpleDateFormat</c> for formatting and parsing
 dates and times in the <c>SHORT</c> style for the user's default locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SimpleDateFormat</c> for formatting and parsing
 dates and times in the <c>SHORT</c> style for the user's default locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#SimpleDateFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SimpleDateFormat (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary>Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and the <c>DateFormatSymbols</c> and <c>Calendar</c> for the user's default locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and the <c>DateFormatSymbols</c> and <c>Calendar</c> for the user's default locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#SimpleDateFormat(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the pattern is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>pattern</c> is not considered to be usable by this
            formatter.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SimpleDateFormat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SimpleDateFormat (string template, Java.Text.DateFormatSymbols value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string template, class Java.Text.DateFormatSymbols value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/text/DateFormatSymbols;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
        <Parameter Name="value" Type="Java.Text.DateFormatSymbols" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and <c>DateFormatSymbols</c> and the <c>Calendar</c> for the user's default locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and <c>DateFormatSymbols</c> and the <c>Calendar</c> for the user's default locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#SimpleDateFormat(java.lang.String, java.text.DateFormatSymbols)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the pattern is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SimpleDateFormat (string template, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string template, class Java.Util.Locale locale) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/util/Locale;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="locale">To be added.</param>
        <summary>Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and the <c>DateFormatSymbols</c> and <c>Calendar</c> for the specified locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SimpleDateFormat</c> using the specified
 non-localized pattern and the <c>DateFormatSymbols</c> and <c>Calendar</c> for the specified locale.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#SimpleDateFormat(java.lang.String, java.util.Locale)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the pattern is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyLocalizedPattern (string template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyLocalizedPattern(string template) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyLocalizedPattern", "(Ljava/lang/String;)V", "GetApplyLocalizedPattern_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="template">the localized pattern.
</param>
        <summary>Changes the pattern of this simple date format to the specified pattern
 which uses localized pattern characters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes the pattern of this simple date format to the specified pattern
 which uses localized pattern characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#applyLocalizedPattern(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ApplyPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyPattern (string template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPattern(string template) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="template">the non-localized pattern.</param>
        <summary>Changes the pattern of this simple date format to the specified pattern
 which uses non-localized pattern characters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes the pattern of this simple date format to the specified pattern
 which uses non-localized pattern characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#applyPattern(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if the pattern is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DateFormatSymbols">
      <MemberSignature Language="C#" Value="public virtual Java.Text.DateFormatSymbols DateFormatSymbols { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Text.DateFormatSymbols DateFormatSymbols" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDateFormatSymbols", "()Ljava/text/DateFormatSymbols;", "GetGetDateFormatSymbolsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDateFormatSymbols", "(Ljava/text/DateFormatSymbols;)V", "GetSetDateFormatSymbols_Ljava_text_DateFormatSymbols_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.DateFormatSymbols</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>DateFormatSymbols</c> used by this simple date format.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#getDateFormatSymbols()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the <c>DateFormatSymbols</c> used by this simple date format.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#setDateFormatSymbols(java.text.DateFormatSymbols)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the <c>DateFormatSymbols</c> used by this simple date format.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override Java.Lang.StringBuffer Format (Java.Util.Date date, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition fieldPos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(class Java.Util.Date date, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition fieldPos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_Ljava_util_Date_Ljava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="Java.Util.Date" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="fieldPos" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="date">the date to format.</param>
        <param name="buffer">the target string buffer to append the formatted date/time to.</param>
        <param name="fieldPos">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Formats the specified date as a string using the pattern of this date
 format and appends the string to the specified string buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats the specified date as a string using the pattern of this date
 format and appends the string to the specified string buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of <c>field</c> contains a value specifying
 a format field, then its <c>beginIndex</c> and <c>endIndex</c> members
 will be updated with the position of the first occurrence of this field
 in the formatted text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if there are invalid characters in the pattern.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get2DigitYearStart">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Date Get2DigitYearStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Date Get2DigitYearStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get2DigitYearStart", "()Ljava/util/Date;", "GetGet2DigitYearStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Date</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the date which is the start of the one hundred year period for two-digit year values.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the date which is the start of the one hundred year period for two-digit year values.
 See <c><see cref="M:Java.Text.SimpleDateFormat.Set2DigitYearStart(Java.Util.Date)" /></c> for details.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#get2DigitYearStart()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public override Java.Util.Date Parse (string string, Java.Text.ParsePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Util.Date Parse(string string, class Java.Text.ParsePosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Date</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse using the pattern of this simple date
            format.</param>
        <param name="position">input/output parameter, specifies the start index in <c>string</c> from where to start parsing. If parsing is successful,
            it is updated with the index following the parsed text; on
            error, the index is unchanged and the error index is set to
            the index where the error occurred.</param>
        <summary>Parses a date from the specified string starting at the index specified
 by <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses a date from the specified string starting at the index specified
 by <c>position</c>. If the string is successfully parsed then the index
 of the <c>ParsePosition</c> is updated to the index following the parsed
 text. On error, the index is unchanged and the error index of <c>ParsePosition</c> is set to the index where the error occurred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#parse(java.lang.String, java.text.ParsePosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if there are invalid characters in the pattern.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Set2DigitYearStart">
      <MemberSignature Language="C#" Value="public virtual void Set2DigitYearStart (Java.Util.Date date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set2DigitYearStart(class Java.Util.Date date) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("set2DigitYearStart", "(Ljava/util/Date;)V", "GetSet2DigitYearStart_Ljava_util_Date_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <summary>Sets the date which is the start of the one hundred year period for two-digit year values.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the date which is the start of the one hundred year period for two-digit year values.

 </para>
          <para tool="javadoc-to-mdoc">When parsing a date string using the abbreviated year pattern <c>yy</c>, <c>SimpleDateFormat</c> must interpret the abbreviated year relative to some
 century. It does this by adjusting dates to be within 80 years before and 20
 years after the time the <c>SimpleDateFormat</c> instance was created. For
 example, using a pattern of <c>MM/dd/yy</c>, an
 instance created on Jan 1, 1997 would interpret the string <c>"01/11/12"</c>
 as Jan 11, 2012 but interpret the string <c>"05/04/64"</c> as May 4, 1964.
 During parsing, only strings consisting of exactly two digits, as
 defined by <c><see cref="M:Java.Lang.Character.IsDigit(System.Char)" /></c>, will be parsed into the
 default century. Any other numeric string, such as a one digit string, a
 three or more digit string, or a two digit string that isn't all digits (for
 example, <c>"-1"</c>), is interpreted literally. So using the same pattern, both
 <c>"01/02/3"</c> and <c>"01/02/003"</c> are parsed as Jan 2, 3 AD.
 Similarly, <c>"01/02/-3"</c> is parsed as Jan 2, 4 BC.

 </para>
          <para tool="javadoc-to-mdoc">If the year pattern does not have exactly two 'y' characters, the year is
 interpreted literally, regardless of the number of digits. So using the
 pattern <c>MM/dd/yyyy</c>, <c>"01/11/12"</c> is parsed as Jan 11, 12 A.D.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#set2DigitYearStart(java.util.Date)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual string ToLocalizedPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToLocalizedPattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toLocalizedPattern", "()Ljava/lang/String;", "GetToLocalizedPatternHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the pattern of this simple date format using localized pattern
 characters.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pattern of this simple date format using localized pattern
 characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#toLocalizedPattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToPattern">
      <MemberSignature Language="C#" Value="public virtual string ToPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToPattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the pattern of this simple date format using non-localized
 pattern characters.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pattern of this simple date format using non-localized
 pattern characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/SimpleDateFormat.html#toPattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
