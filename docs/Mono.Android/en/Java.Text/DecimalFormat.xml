<Type Name="DecimalFormat" FullName="Java.Text.DecimalFormat">
  <TypeSignature Language="C#" Value="public class DecimalFormat : Java.Text.NumberFormat" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DecimalFormat extends Java.Text.NumberFormat" />
  <TypeSignature Language="DocId" Value="T:Java.Text.DecimalFormat" />
  <TypeSignature Language="F#" Value="type DecimalFormat = class&#xA;    inherit NumberFormat" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text.NumberFormat</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("java/text/DecimalFormat", DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("java/text/DecimalFormat", DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>DecimalFormat</c> is a concrete subclass of
            <c>NumberFormat</c> that formats decimal numbers.</summary>
    <remarks>
      <para>
        <c>DecimalFormat</c> is a concrete subclass of
            <c>NumberFormat</c> that formats decimal numbers. It has a variety of
            features designed to make it possible to parse and format numbers in any
            locale, including support for Western, Arabic, and Indic digits.  It also
            supports different kinds of numbers, including integers (123), fixed-point
            numbers (123.4), scientific notation (1.23E4), percentages (12%), and
            currency amounts ($123).  All of these can be localized.</para>
      <para>To obtain a <c>NumberFormat</c> for a specific locale, including the
            default locale, call one of <c>NumberFormat</c>'s factory methods, such
            as <c>getInstance()</c>.  In general, do not call the
            <c>DecimalFormat</c> constructors directly, since the
            <c>NumberFormat</c> factory methods may return subclasses other than
            <c>DecimalFormat</c>. If you need to customize the format object, do
            something like this:
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">NumberFormat f = NumberFormat.getInstance(loc);
            if (f instanceof DecimalFormat) {
                ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true);
            }
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>A <c>DecimalFormat</c> comprises a &lt;em&gt;pattern&lt;/em&gt; and a set of
            &lt;em&gt;symbols&lt;/em&gt;.  The pattern may be set directly using
            <c>applyPattern()</c>, or indirectly using the API methods.  The
            symbols are stored in a <c>DecimalFormatSymbols</c> object.  When using
            the <c>NumberFormat</c> factory methods, the pattern and symbols are
            read from localized <c>ResourceBundle</c>s.
            
            &lt;h2&gt;Patterns&lt;/h2&gt;
            
            <c>DecimalFormat</c> patterns have the following syntax:
            &lt;blockquote&gt;</para>
      <code lang="text/java">&lt;i&gt;Pattern:&lt;/i&gt;
                    &lt;i&gt;PositivePattern&lt;/i&gt;
                    &lt;i&gt;PositivePattern&lt;/i&gt; ; &lt;i&gt;NegativePattern&lt;/i&gt;
            &lt;i&gt;PositivePattern:&lt;/i&gt;
                    &lt;i&gt;Prefix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &lt;i&gt;Number&lt;/i&gt; &lt;i&gt;Suffix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;NegativePattern:&lt;/i&gt;
                    &lt;i&gt;Prefix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &lt;i&gt;Number&lt;/i&gt; &lt;i&gt;Suffix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;Prefix:&lt;/i&gt;
                    any Unicode characters except &amp;#92;uFFFE, &amp;#92;uFFFF, and special characters
            &lt;i&gt;Suffix:&lt;/i&gt;
                    any Unicode characters except &amp;#92;uFFFE, &amp;#92;uFFFF, and special characters
            &lt;i&gt;Number:&lt;/i&gt;
                    &lt;i&gt;Integer&lt;/i&gt; &lt;i&gt;Exponent&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
                    &lt;i&gt;Integer&lt;/i&gt; . &lt;i&gt;Fraction&lt;/i&gt; &lt;i&gt;Exponent&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;Integer:&lt;/i&gt;
                    &lt;i&gt;MinimumInteger&lt;/i&gt;
                    #
                    # &lt;i&gt;Integer&lt;/i&gt;
                    # , &lt;i&gt;Integer&lt;/i&gt;
            &lt;i&gt;MinimumInteger:&lt;/i&gt;
                    0
                    0 &lt;i&gt;MinimumInteger&lt;/i&gt;
                    0 , &lt;i&gt;MinimumInteger&lt;/i&gt;
            &lt;i&gt;Fraction:&lt;/i&gt;
                    &lt;i&gt;MinimumFraction&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; &lt;i&gt;OptionalFraction&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;MinimumFraction:&lt;/i&gt;
                    0 &lt;i&gt;MinimumFraction&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;OptionalFraction:&lt;/i&gt;
                    # &lt;i&gt;OptionalFraction&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            &lt;i&gt;Exponent:&lt;/i&gt;
                    E &lt;i&gt;MinimumExponent&lt;/i&gt;
            &lt;i&gt;MinimumExponent:&lt;/i&gt;
                    0 &lt;i&gt;MinimumExponent&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>A <c>DecimalFormat</c> pattern contains a positive and negative
            subpattern, for example, <c>"#,##0.00;(#,##0.00)"</c>.  Each
            subpattern has a prefix, numeric part, and suffix. The negative subpattern
            is optional; if absent, then the positive subpattern prefixed with the
            minus sign (<c>'-' U+002D HYPHEN-MINUS</c>) is used as the
            negative subpattern. That is, <c>"0.00"</c> alone is equivalent to
            <c>"0.00;-0.00"</c>.  If there is an explicit negative subpattern, it
            serves only to specify the negative prefix and suffix; the number of digits,
            minimal digits, and other characteristics are all the same as the positive
            pattern. That means that <c>"#,##0.0#;(#)"</c> produces precisely
            the same behavior as <c>"#,##0.0#;(#,##0.0#)"</c>.</para>
      <para>The prefixes, suffixes, and various symbols used for infinity, digits,
            grouping separators, decimal separators, etc. may be set to arbitrary
            values, and they will appear properly during formatting.  However, care must
            be taken that the symbols and strings do not conflict, or parsing will be
            unreliable.  For example, either the positive and negative prefixes or the
            suffixes must be distinct for <c>DecimalFormat.parse()</c> to be able
            to distinguish positive from negative values.  (If they are identical, then
            <c>DecimalFormat</c> will behave as if no negative subpattern was
            specified.)  Another example is that the decimal separator and grouping
            separator should be distinct characters, or parsing will be impossible.</para>
      <para>The grouping separator is commonly used for thousands, but in some
            countries it separates ten-thousands. The grouping size is a constant number
            of digits between the grouping characters, such as 3 for 100,000,000 or 4 for
            1,0000,0000.  If you supply a pattern with multiple grouping characters, the
            interval between the last one and the end of the integer is the one that is
            used. So <c>"#,##,###,####"</c> == <c>"######,####"</c> ==
            <c>"##,####,####"</c>.
            
            &lt;h3&gt;"special_pattern_character"&gt;Special Pattern Characters&lt;/h3&gt;</para>
      <para>Many characters in a pattern are taken literally; they are matched during
            parsing and output unchanged during formatting.  Special characters, on the
            other hand, stand for other characters, strings, or classes of characters.
            They must be quoted, unless noted otherwise, if they are to appear in the
            prefix or suffix as literals.</para>
      <para>The characters listed here are used in non-localized patterns.  Localized
            patterns use the corresponding characters taken from this formatter's
            <c>DecimalFormatSymbols</c> object instead, and these characters lose
            their special status.  Two exceptions are the currency sign and quote, which
            are not localized.
            
            &lt;blockquote&gt;
            &lt;table class="striped"&gt;
            &lt;caption style="display:none"&gt;Chart showing symbol, location, localized, and meaning.&lt;/caption&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                     &lt;th scope="col" style="text-align:left"&gt;Symbol
                     &lt;th scope="col" style="text-align:left"&gt;Location
                     &lt;th scope="col" style="text-align:left"&gt;Localized?
                     &lt;th scope="col" style="text-align:left"&gt;Meaning
            &lt;/thead&gt;
            &lt;tbody&gt;
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>0</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Digit
                &lt;tr style="vertical-align: top"&gt;
                     &lt;th scope="row"&gt;<c>#</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Digit, zero shows as absent
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>.</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Decimal separator or monetary decimal separator
                &lt;tr style="vertical-align: top"&gt;
                     &lt;th scope="row"&gt;<c>-</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Minus sign
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>,</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Grouping separator or monetary grouping separator
                &lt;tr style="vertical-align: top"&gt;
                     &lt;th scope="row"&gt;<c>E</c>&lt;td&gt;Number
                     &lt;td&gt;Yes
                     &lt;td&gt;Separates mantissa and exponent in scientific notation.
                         &lt;em&gt;Need not be quoted in prefix or suffix.&lt;/em&gt;
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>;</c>&lt;td&gt;Subpattern boundary
                     &lt;td&gt;Yes
                     &lt;td&gt;Separates positive and negative subpatterns
                &lt;tr style="vertical-align: top"&gt;
                     &lt;th scope="row"&gt;<c>%</c>&lt;td&gt;Prefix or suffix
                     &lt;td&gt;Yes
                     &lt;td&gt;Multiply by 100 and show as percentage
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>&amp;#92;u2030</c>&lt;td&gt;Prefix or suffix
                     &lt;td&gt;Yes
                     &lt;td&gt;Multiply by 1000 and show as per mille value
                &lt;tr style="vertical-align: top"&gt;
                     &lt;th scope="row"&gt;<c>&amp;#164;</c> (<c>&amp;#92;u00A4</c>)
                     &lt;td&gt;Prefix or suffix
                     &lt;td&gt;No
                     &lt;td&gt;Currency sign, replaced by currency symbol.  If
                         doubled, replaced by international currency symbol.
                         If present in a pattern, the monetary decimal/grouping separators
                         are used instead of the decimal/grouping separators.
                &lt;tr style="vertical-align:top"&gt;
                     &lt;th scope="row"&gt;<c>'</c>&lt;td&gt;Prefix or suffix
                     &lt;td&gt;No
                     &lt;td&gt;Used to quote special characters in a prefix or suffix,
                         for example, <c>"'#'#"</c> formats 123 to
                         <c>"#123"</c>.  To create a single quote
                         itself, use two in a row: <c>"# o''clock"</c>.
            &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;/blockquote&gt;
            
            &lt;h3&gt;Scientific Notation&lt;/h3&gt;</para>
      <para>Numbers in scientific notation are expressed as the product of a mantissa
            and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.  The
            mantissa is often in the range 1.0 &amp;le; x &lt; 10.0, but it need not
            be.
            <c>DecimalFormat</c> can be instructed to format and parse scientific
            notation &lt;em&gt;only via a pattern&lt;/em&gt;; there is currently no factory method
            that creates a scientific notation format.  In a pattern, the exponent
            character immediately followed by one or more digit characters indicates
            scientific notation.  Example: <c>"0.###E0"</c> formats the number
            1234 as <c>"1.234E3"</c>.
            
            &lt;ul&gt;
            &lt;li&gt;The number of digit characters after the exponent character gives the
            minimum exponent digit count.  There is no maximum.  Negative exponents are
            formatted using the localized minus sign, &lt;em&gt;not&lt;/em&gt; the prefix and suffix
            from the pattern.  This allows patterns such as <c>"0.###E0 m/s"</c>.
            
            &lt;li&gt;The minimum and maximum number of integer digits are interpreted
            together:
            
            &lt;ul&gt;
            &lt;li&gt;If the maximum number of integer digits is greater than their minimum number
            and greater than 1, it forces the exponent to be a multiple of the maximum
            number of integer digits, and the minimum number of integer digits to be
            interpreted as 1.  The most common use of this is to generate
            &lt;em&gt;engineering notation&lt;/em&gt;, in which the exponent is a multiple of three,
            e.g., <c>"##0.#####E0"</c>. Using this pattern, the number 12345
            formats to <c>"12.345E3"</c>, and 123456 formats to
            <c>"123.456E3"</c>.
            
            &lt;li&gt;Otherwise, the minimum number of integer digits is achieved by adjusting the
            exponent.  Example: 0.00123 formatted with <c>"00.###E0"</c> yields
            <c>"12.3E-4"</c>.
            &lt;/ul&gt;
            
            &lt;li&gt;The number of significant digits in the mantissa is the sum of the
            &lt;em&gt;minimum integer&lt;/em&gt; and &lt;em&gt;maximum fraction&lt;/em&gt; digits, and is
            unaffected by the maximum integer digits.  For example, 12345 formatted with
            <c>"##0.##E0"</c> is <c>"12.3E3"</c>. To show all digits, set
            the significant digits count to zero.  The number of significant digits
            does not affect parsing.
            
            &lt;li&gt;Exponential patterns may not contain grouping separators.
            &lt;/ul&gt;
            
            &lt;h3&gt;Rounding&lt;/h3&gt;
            
            <c>DecimalFormat</c> provides rounding modes defined in
            <c>java.math.RoundingMode</c> for formatting.  By default, it uses
            <c>java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN</c>.
            
            &lt;h3&gt;Digits&lt;/h3&gt;
            
            For formatting, <c>DecimalFormat</c> uses the ten consecutive
            characters starting with the localized zero digit defined in the
            <c>DecimalFormatSymbols</c> object as digits. For parsing, these
            digits as well as all Unicode decimal digits, as defined by
            <c>Character#digit Character.digit</c>, are recognized.
            
            &lt;h4&gt;Special Values&lt;/h4&gt;</para>
      <para>
        <c>NaN</c> is formatted as a string, which typically has a single character
            <c>&amp;#92;uFFFD</c>.  This string is determined by the
            <c>DecimalFormatSymbols</c> object.  This is the only value for which
            the prefixes and suffixes are not used.</para>
      <para>Infinity is formatted as a string, which typically has a single character
            <c>&amp;#92;u221E</c>, with the positive or negative prefixes and suffixes
            applied.  The infinity string is determined by the
            <c>DecimalFormatSymbols</c> object.</para>
      <para>Negative zero (<c>"-0"</c>) parses to
            &lt;ul&gt;
            &lt;li&gt;<c>BigDecimal(0)</c> if <c>isParseBigDecimal()</c> is
            true,
            &lt;li&gt;<c>Long(0)</c> if <c>isParseBigDecimal()</c> is false
                and <c>isParseIntegerOnly()</c> is true,
            &lt;li&gt;<c>Double(-0.0)</c> if both <c>isParseBigDecimal()</c>
            and <c>isParseIntegerOnly()</c> are false.
            &lt;/ul&gt;
            
            &lt;h3&gt;"synchronization"&gt;Synchronization&lt;/h3&gt;</para>
      <para>Decimal formats are generally not synchronized.
            It is recommended to create separate format instances for each thread.
            If multiple threads access a format concurrently, it must be synchronized
            externally.
            
            &lt;h3&gt;Example&lt;/h3&gt;
            
            &lt;blockquote&gt;</para>
      <code lang="text/java">&lt;strong&gt;{@code
            // Print out a number using the localized number, integer, currency,
            // and percent format for each locale}&lt;/strong&gt;{@code
            Locale[] locales = NumberFormat.getAvailableLocales();
            double myNumber = -1234.56;
            NumberFormat form;
            for (int j = 0; j &lt; 4; ++j) {
                System.out.println("FORMAT");
                for (int i = 0; i &lt; locales.length; ++i) {
                    if (locales[i].getCountry().length() == 0) {
                       continue; // Skip language-only locales
                    }
                    System.out.print(locales[i].getDisplayName());
                    switch (j) {
                    case 0:
                        form = NumberFormat.getInstance(locales[i]); break;
                    case 1:
                        form = NumberFormat.getIntegerInstance(locales[i]); break;
                    case 2:
                        form = NumberFormat.getCurrencyInstance(locales[i]); break;
                    default:
                        form = NumberFormat.getPercentInstance(locales[i]); break;
                    }
                    if (form instanceof DecimalFormat) {
                        System.out.print(": " + ((DecimalFormat) form).toPattern());
                    }
                    System.out.print(" -&gt; " + form.format(myNumber));
                    try {
                        System.out.println(" -&gt; " + form.parse(form.format(myNumber)));
                    } catch (ParseException e) {}
                }
            }
            }</code>
      <para>&lt;/blockquote&gt;</para>
      <para>Added in 1.1.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/java/text/DecimalFormat" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a DecimalFormat using the default pattern and symbols
            for the default <c>java.util.Locale.Category#FORMAT FORMAT</c> locale.</summary>
        <remarks>
          <para>Creates a DecimalFormat using the default pattern and symbols
            for the default <c>java.util.Locale.Category#FORMAT FORMAT</c> locale.
            This is a convenient way to obtain a
            DecimalFormat when internationalization is not the main concern.</para>
          <para>To obtain standard formats for a given locale, use the factory methods
            on NumberFormat such as getNumberInstance. These factories will
            return the most appropriate sub-class of NumberFormat for a given
            locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#DecimalFormat()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.DecimalFormat()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Java.Text.DecimalFormat : string -&gt; Java.Text.DecimalFormat" Usage="new Java.Text.DecimalFormat pattern" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">a non-localized pattern string.</param>
        <summary>Creates a DecimalFormat using the given pattern and the symbols
            for the default <c>java.util.Locale.Category#FORMAT FORMAT</c> locale.</summary>
        <remarks>
          <para>Creates a DecimalFormat using the given pattern and the symbols
            for the default <c>java.util.Locale.Category#FORMAT FORMAT</c> locale.
            This is a convenient way to obtain a
            DecimalFormat when internationalization is not the main concern.</para>
          <para>To obtain standard formats for a given locale, use the factory methods
            on NumberFormat such as getNumberInstance. These factories will
            return the most appropriate sub-class of NumberFormat for a given
            locale.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#DecimalFormat(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.DecimalFormat(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DecimalFormat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Text.DecimalFormat : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Text.DecimalFormat" Usage="new Java.Text.DecimalFormat (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat (string? pattern, Java.Text.DecimalFormatSymbols? symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, class Java.Text.DecimalFormatSymbols symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.#ctor(System.String,Java.Text.DecimalFormatSymbols)" />
      <MemberSignature Language="F#" Value="new Java.Text.DecimalFormat : string * Java.Text.DecimalFormatSymbols -&gt; Java.Text.DecimalFormat" Usage="new Java.Text.DecimalFormat (pattern, symbols)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)V", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)V", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="symbols" Type="Java.Text.DecimalFormatSymbols" />
      </Parameters>
      <Docs>
        <param name="pattern">a non-localized pattern string</param>
        <param name="symbols">the set of symbols to be used</param>
        <summary>Creates a DecimalFormat using the given pattern and symbols.</summary>
        <remarks>
          <para>Creates a DecimalFormat using the given pattern and symbols.
            Use this constructor when you need to completely customize the
            behavior of the format.</para>
          <para>To obtain standard formats for a given
            locale, use the factory methods on NumberFormat such as
            getInstance or getCurrencyInstance. If you need only minor adjustments
            to a standard format, you can modify the format returned by
            a NumberFormat factory method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#DecimalFormat(java.lang.String,%20java.text.DecimalFormatSymbols)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.DecimalFormat(java.lang.String, java.text.DecimalFormatSymbols)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyLocalizedPattern (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyLocalizedPattern(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.ApplyLocalizedPattern(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ApplyLocalizedPattern : string -&gt; unit&#xA;override this.ApplyLocalizedPattern : string -&gt; unit" Usage="decimalFormat.ApplyLocalizedPattern pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("applyLocalizedPattern", "(Ljava/lang/String;)V", "GetApplyLocalizedPattern_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("applyLocalizedPattern", "(Ljava/lang/String;)V", "GetApplyLocalizedPattern_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">a new pattern</param>
        <summary>Apply the given pattern to this Format object.</summary>
        <remarks>
          <para>Apply the given pattern to this Format object.  The pattern
            is assumed to be in a localized notation. A pattern is a
            short-hand specification for the various formatting properties.
            These properties can also be changed individually through the
            various setter methods.</para>
          <para>There is no limit to integer digits set
            by this routine, since that is the typical end-user desire;
            use setMaximumInteger if you want to set a real value.
            For negative numbers, use a second pattern, separated by a semicolon</para>
          <para>Example <c>"#,#00.0#"</c> &amp;rarr; 1,234.56</para>
          <para>This means a minimum of 2 integer digits, 1 fraction digit, and
            a maximum of 2 fraction digits.</para>
          <para>Example: <c>"#,#00.0#;(#,#00.0#)"</c> for negatives in
            parentheses.</para>
          <para>In negative patterns, the minimum and maximum counts are ignored;
            these are presumed to be set in the positive pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#applyLocalizedPattern(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.applyLocalizedPattern(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyPattern (string? pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPattern(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.ApplyPattern(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ApplyPattern : string -&gt; unit&#xA;override this.ApplyPattern : string -&gt; unit" Usage="decimalFormat.ApplyPattern pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">a new pattern</param>
        <summary>Apply the given pattern to this Format object.</summary>
        <remarks>
          <para>Apply the given pattern to this Format object.  A pattern is a
            short-hand specification for the various formatting properties.
            These properties can also be changed individually through the
            various setter methods.</para>
          <para>There is no limit to integer digits set
            by this routine, since that is the typical end-user desire;
            use setMaximumInteger if you want to set a real value.
            For negative numbers, use a second pattern, separated by a semicolon</para>
          <para>Example <c>"#,#00.0#"</c> &amp;rarr; 1,234.56</para>
          <para>This means a minimum of 2 integer digits, 1 fraction digit, and
            a maximum of 2 fraction digits.</para>
          <para>Example: <c>"#,#00.0#;(#,#00.0#)"</c> for negatives in
            parentheses.</para>
          <para>In negative patterns, the minimum and maximum counts are ignored;
            these are presumed to be set in the positive pattern.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#applyPattern(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.applyPattern(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DecimalFormatSymbols">
      <MemberSignature Language="C#" Value="public virtual Java.Text.DecimalFormatSymbols? DecimalFormatSymbols { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Text.DecimalFormatSymbols DecimalFormatSymbols" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.DecimalFormatSymbols" />
      <MemberSignature Language="F#" Value="member this.DecimalFormatSymbols : Java.Text.DecimalFormatSymbols with get, set" Usage="Java.Text.DecimalFormat.DecimalFormatSymbols" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDecimalFormatSymbols", "()Ljava/text/DecimalFormatSymbols;", "GetGetDecimalFormatSymbolsHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDecimalFormatSymbols", "()Ljava/text/DecimalFormatSymbols;", "GetGetDecimalFormatSymbolsHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setDecimalFormatSymbols", "(Ljava/text/DecimalFormatSymbols;)V", "GetSetDecimalFormatSymbols_Ljava_text_DecimalFormatSymbols_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setDecimalFormatSymbols", "(Ljava/text/DecimalFormatSymbols;)V", "GetSetDecimalFormatSymbols_Ljava_text_DecimalFormatSymbols_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.DecimalFormatSymbols</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newSymbols">desired DecimalFormatSymbols</param>
        <summary>Returns a copy of the decimal format symbols, which is generally not
            changed by the programmer or user. -or- Sets the decimal format symbols, which is generally not changed
            by the programmer or user.</summary>
        <value>a copy of the desired DecimalFormatSymbols</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns a copy of the decimal format symbols, which is generally not
            changed by the programmer or user.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getDecimalFormatSymbols()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getDecimalFormatSymbols()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the decimal format symbols, which is generally not changed
            by the programmer or user.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setDecimalFormatSymbols(java.text.DecimalFormatSymbols)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setDecimalFormatSymbols(java.text.DecimalFormatSymbols)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DecimalSeparatorAlwaysShown">
      <MemberSignature Language="C#" Value="public virtual bool DecimalSeparatorAlwaysShown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DecimalSeparatorAlwaysShown" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.DecimalSeparatorAlwaysShown" />
      <MemberSignature Language="F#" Value="member this.DecimalSeparatorAlwaysShown : bool with get, set" Usage="Java.Text.DecimalFormat.DecimalSeparatorAlwaysShown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isDecimalSeparatorAlwaysShown", "()Z", "GetIsDecimalSeparatorAlwaysShownHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isDecimalSeparatorAlwaysShown", "()Z", "GetIsDecimalSeparatorAlwaysShownHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setDecimalSeparatorAlwaysShown", "(Z)V", "GetSetDecimalSeparatorAlwaysShown_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setDecimalSeparatorAlwaysShown", "(Z)V", "GetSetDecimalSeparatorAlwaysShown_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">
          <c>true</c> if the decimal separator is always shown;
                            <c>false</c> otherwise</param>
        <summary>Allows you to get the behavior of the decimal separator with integers. -or- Allows you to set the behavior of the decimal separator with integers.</summary>
        <value>
          <c>true</c> if the decimal separator is always shown;
                    <c>false</c> otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Allows you to get the behavior of the decimal separator with integers.
            (The decimal separator will always appear with decimals.)</para>
          <para>Example: Decimal ON: 12345 &amp;rarr; 12345.; OFF: 12345 &amp;rarr; 12345</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#isDecimalSeparatorAlwaysShown()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.isDecimalSeparatorAlwaysShown()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Allows you to set the behavior of the decimal separator with integers.
            (The decimal separator will always appear with decimals.)</para>
          <para>Example: Decimal ON: 12345 &amp;rarr; 12345.; OFF: 12345 &amp;rarr; 12345</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setDecimalSeparatorAlwaysShown(boolean)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setDecimalSeparatorAlwaysShown(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override sealed Java.Lang.StringBuffer? Format (Java.Lang.Object? number, Java.Lang.StringBuffer? toAppendTo, Java.Text.FieldPosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(class Java.Lang.Object number, class Java.Lang.StringBuffer toAppendTo, class Java.Text.FieldPosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.Format(Java.Lang.Object,Java.Lang.StringBuffer,Java.Text.FieldPosition)" />
      <MemberSignature Language="F#" Value="override this.Format : Java.Lang.Object * Java.Lang.StringBuffer * Java.Text.FieldPosition -&gt; Java.Lang.StringBuffer" Usage="decimalFormat.Format (number, toAppendTo, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="Java.Lang.Object" />
        <Parameter Name="toAppendTo" Type="Java.Lang.StringBuffer" />
        <Parameter Name="pos" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="number">the number to format</param>
        <param name="toAppendTo">the <c>StringBuffer</c> to which the formatted
                              text is to be appended</param>
        <param name="pos">keeps track on the position of the field within the
                              returned string. For example, for formatting a number
                              <c>1234567.89</c> in <c>Locale.US</c> locale,
                              if the given <c>fieldPosition</c> is
                              <c>NumberFormat#INTEGER_FIELD</c>, the begin index
                              and end index of <c>fieldPosition</c> will be set
                              to 0 and 9, respectively for the output string
                              <c>1,234,567.89</c>.</param>
        <summary>Formats a number and appends the resulting text to the given string
            buffer.</summary>
        <returns>the value passed in as <c>toAppendTo</c></returns>
        <remarks>
          <para>Formats a number and appends the resulting text to the given string
            buffer.
            The number can be of any subclass of <c>java.lang.Number</c>.</para>
          <para>This implementation uses the maximum precision permitted.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override Java.Lang.StringBuffer? Format (double number, Java.Lang.StringBuffer? result, Java.Text.FieldPosition? fieldPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(float64 number, class Java.Lang.StringBuffer result, class Java.Text.FieldPosition fieldPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.Format(System.Double,Java.Lang.StringBuffer,Java.Text.FieldPosition)" />
      <MemberSignature Language="F#" Value="override this.Format : double * Java.Lang.StringBuffer * Java.Text.FieldPosition -&gt; Java.Lang.StringBuffer" Usage="decimalFormat.Format (number, result, fieldPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_DLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_DLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="System.Double" />
        <Parameter Name="result" Type="Java.Lang.StringBuffer" />
        <Parameter Name="fieldPosition" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="number">The double to format</param>
        <param name="result">where the text is to be appended</param>
        <param name="fieldPosition">keeps track on the position of the field within
                                    the returned string. For example, for formatting
                                    a number <c>1234567.89</c> in <c>Locale.US</c>
                                    locale, if the given <c>fieldPosition</c> is
                                    <c>NumberFormat#INTEGER_FIELD</c>, the begin index
                                    and end index of <c>fieldPosition</c> will be set
                                    to 0 and 9, respectively for the output string
                                    <c>1,234,567.89</c>.</param>
        <summary>Formats a double to produce a string.</summary>
        <returns>The formatted number string</returns>
        <remarks>
          <para>Formats a double to produce a string.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#format(double,%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.format(double, java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override Java.Lang.StringBuffer? Format (long number, Java.Lang.StringBuffer? result, Java.Text.FieldPosition? fieldPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(int64 number, class Java.Lang.StringBuffer result, class Java.Text.FieldPosition fieldPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.Format(System.Int64,Java.Lang.StringBuffer,Java.Text.FieldPosition)" />
      <MemberSignature Language="F#" Value="override this.Format : int64 * Java.Lang.StringBuffer * Java.Text.FieldPosition -&gt; Java.Lang.StringBuffer" Usage="decimalFormat.Format (number, result, fieldPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("format", "(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_JLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("format", "(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_JLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="System.Int64" />
        <Parameter Name="result" Type="Java.Lang.StringBuffer" />
        <Parameter Name="fieldPosition" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="number">The long to format</param>
        <param name="result">where the text is to be appended</param>
        <param name="fieldPosition">keeps track on the position of the field within
                                    the returned string. For example, for formatting
                                    a number <c>123456789</c> in <c>Locale.US</c>
                                    locale, if the given <c>fieldPosition</c> is
                                    <c>NumberFormat#INTEGER_FIELD</c>, the begin index
                                    and end index of <c>fieldPosition</c> will be set
                                    to 0 and 11, respectively for the output string
                                    <c>123,456,789</c>.</param>
        <summary>Format a long to produce a string.</summary>
        <returns>The formatted number string</returns>
        <remarks>
          <para>Format a long to produce a string.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#format(long,%20java.lang.StringBuffer,%20java.text.FieldPosition)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.format(long, java.lang.StringBuffer, java.text.FieldPosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GroupingSize">
      <MemberSignature Language="C#" Value="public virtual int GroupingSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GroupingSize" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.GroupingSize" />
      <MemberSignature Language="F#" Value="member this.GroupingSize : int with get, set" Usage="Java.Text.DecimalFormat.GroupingSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getGroupingSize", "()I", "GetGetGroupingSizeHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getGroupingSize", "()I", "GetGetGroupingSizeHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setGroupingSize", "(I)V", "GetSetGroupingSize_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setGroupingSize", "(I)V", "GetSetGroupingSize_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new grouping size</param>
        <summary>Return the grouping size. -or- Set the grouping size.</summary>
        <value>the grouping size</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Return the grouping size. Grouping size is the number of digits between
            grouping separators in the integer portion of a number.  For example,
            in the number "123,456.78", the grouping size is 3. Grouping size of
            zero designates that grouping is not used, which provides the same
            formatting as if calling <c>#setGroupingUsed(boolean)
            setGroupingUsed(false)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getGroupingSize()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getGroupingSize()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the grouping size. Grouping size is the number of digits between
            grouping separators in the integer portion of a number.  For example,
            in the number "123,456.78", the grouping size is 3. Grouping size of
            zero designates that grouping is not used, which provides the same
            formatting as if calling <c>#setGroupingUsed(boolean)
            setGroupingUsed(false)</c>.</para>
          <para>The value passed in is converted to a byte, which may lose information.
            Values that are negative or greater than
            <c>java.lang.Byte#MAX_VALUE Byte.MAX_VALUE</c>, will throw an
            <c>IllegalArgumentException</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setGroupingSize(int)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setGroupingSize(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Text.DecimalFormat.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiplier">
      <MemberSignature Language="C#" Value="public virtual int Multiplier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Multiplier" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.Multiplier" />
      <MemberSignature Language="F#" Value="member this.Multiplier : int with get, set" Usage="Java.Text.DecimalFormat.Multiplier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMultiplier", "()I", "GetGetMultiplierHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMultiplier", "()I", "GetGetMultiplierHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setMultiplier", "(I)V", "GetSetMultiplier_IHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setMultiplier", "(I)V", "GetSetMultiplier_IHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new multiplier</param>
        <summary>Gets the multiplier for use in percent, per mille, and similar
            formats. -or- Sets the multiplier for use in percent, per mille, and similar
            formats.</summary>
        <value>the multiplier</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the multiplier for use in percent, per mille, and similar
            formats.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getMultiplier()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getMultiplier()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets the multiplier for use in percent, per mille, and similar
            formats.
            For a percent format, set the multiplier to 100 and the suffixes to
            have '%' (for Arabic, use the Arabic percent sign).
            For a per mille format, set the multiplier to 1000 and the suffixes to
            have '&amp;#92;u2030'.</para>
          <para>Example: with multiplier 100, 1.23 is formatted as "123", and
            "123" is parsed into 1.23.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setMultiplier(int)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setMultiplier(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NegativePrefix">
      <MemberSignature Language="C#" Value="public virtual string? NegativePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativePrefix" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.NegativePrefix" />
      <MemberSignature Language="F#" Value="member this.NegativePrefix : string with get, set" Usage="Java.Text.DecimalFormat.NegativePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNegativePrefix", "()Ljava/lang/String;", "GetGetNegativePrefixHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNegativePrefix", "()Ljava/lang/String;", "GetGetNegativePrefixHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNegativePrefix", "(Ljava/lang/String;)V", "GetSetNegativePrefix_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNegativePrefix", "(Ljava/lang/String;)V", "GetSetNegativePrefix_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new negative prefix</param>
        <summary>Get the negative prefix. -or- Set the negative prefix.</summary>
        <value>the negative prefix</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the negative prefix.</para>
          <para>Examples: -123, ($123) (with negative suffix), sFr-123</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getNegativePrefix()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getNegativePrefix()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the negative prefix.</para>
          <para>Examples: -123, ($123) (with negative suffix), sFr-123</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setNegativePrefix(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setNegativePrefix(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSuffix">
      <MemberSignature Language="C#" Value="public virtual string? NegativeSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSuffix" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.NegativeSuffix" />
      <MemberSignature Language="F#" Value="member this.NegativeSuffix : string with get, set" Usage="Java.Text.DecimalFormat.NegativeSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNegativeSuffix", "()Ljava/lang/String;", "GetGetNegativeSuffixHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getNegativeSuffix", "()Ljava/lang/String;", "GetGetNegativeSuffixHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setNegativeSuffix", "(Ljava/lang/String;)V", "GetSetNegativeSuffix_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setNegativeSuffix", "(Ljava/lang/String;)V", "GetSetNegativeSuffix_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new negative suffix</param>
        <summary>Get the negative suffix. -or- Set the negative suffix.</summary>
        <value>the negative suffix</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the negative suffix.</para>
          <para>Examples: -123%, ($123) (with positive suffixes)</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getNegativeSuffix()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getNegativeSuffix()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the negative suffix.</para>
          <para>Examples: 123%</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setNegativeSuffix(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setNegativeSuffix(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public override Java.Lang.Number? Parse (string? text, Java.Text.ParsePosition? pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.Number Parse(string text, class Java.Text.ParsePosition pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.Parse(System.String,Java.Text.ParsePosition)" />
      <MemberSignature Language="F#" Value="override this.Parse : string * Java.Text.ParsePosition -&gt; Java.Lang.Number" Usage="decimalFormat.Parse (text, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Number</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="pos" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="text">the string to be parsed</param>
        <param name="pos">A <c>ParsePosition</c> object with index and error
                        index information as described above.</param>
        <summary>Parses text from a string to produce a <c>Number</c>.</summary>
        <returns>the parsed value, or <c>null</c> if the parse fails</returns>
        <remarks>
          <para>Parses text from a string to produce a <c>Number</c>.</para>
          <para>The method attempts to parse text starting at the index given by
            <c>pos</c>.
            If parsing succeeds, then the index of <c>pos</c> is updated
            to the index after the last character used (parsing does not necessarily
            use all characters up to the end of the string), and the parsed
            number is returned. The updated <c>pos</c> can be used to
            indicate the starting point for the next call to this method.
            If an error occurs, then the index of <c>pos</c> is not
            changed, the error index of <c>pos</c> is set to the index of
            the character where the error occurred, and null is returned.</para>
          <para>The subclass returned depends on the value of <c>#isParseBigDecimal</c>
            as well as on the string being parsed.
            &lt;ul&gt;
              &lt;li&gt;If <c>isParseBigDecimal()</c> is false (the default),
                  most integer values are returned as <c>Long</c>
                  objects, no matter how they are written: <c>"17"</c> and
                  <c>"17.000"</c> both parse to <c>Long(17)</c>.
                  Values that cannot fit into a <c>Long</c> are returned as
                  <c>Double</c>s. This includes values with a fractional part,
                  infinite values, <c>NaN</c>, and the value -0.0.
                  <c>DecimalFormat</c> does &lt;em&gt;not&lt;/em&gt; decide whether to
                  return a <c>Double</c> or a <c>Long</c> based on the
                  presence of a decimal separator in the source string. Doing so
                  would prevent integers that overflow the mantissa of a double,
                  such as <c>"-9,223,372,036,854,775,808.00"</c>, from being
                  parsed accurately.</para>
          <para>Callers may use the <c>Number</c> methods
                  <c>doubleValue</c>, <c>longValue</c>, etc., to obtain
                  the type they want.
              &lt;li&gt;If <c>isParseBigDecimal()</c> is true, values are returned
                  as <c>BigDecimal</c> objects. The values are the ones
                  constructed by <c>java.math.BigDecimal#BigDecimal(String)</c>
                  for corresponding strings in locale-independent format. The
                  special cases negative and positive infinity and NaN are returned
                  as <c>Double</c> instances holding the values of the
                  corresponding <c>Double</c> constants.
            &lt;/ul&gt;</para>
          <para>
            <c>DecimalFormat</c> parses all Unicode characters that represent
            decimal digits, as defined by <c>Character.digit()</c>. In
            addition, <c>DecimalFormat</c> also recognizes as digits the ten
            consecutive characters starting with the localized zero digit defined in
            the <c>DecimalFormatSymbols</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#parse(java.lang.String,%20java.text.ParsePosition)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.parse(java.lang.String, java.text.ParsePosition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParseBigDecimal">
      <MemberSignature Language="C#" Value="public virtual bool ParseBigDecimal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ParseBigDecimal" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.ParseBigDecimal" />
      <MemberSignature Language="F#" Value="member this.ParseBigDecimal : bool with get, set" Usage="Java.Text.DecimalFormat.ParseBigDecimal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isParseBigDecimal", "()Z", "GetIsParseBigDecimalHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isParseBigDecimal", "()Z", "GetIsParseBigDecimalHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setParseBigDecimal", "(Z)V", "GetSetParseBigDecimal_ZHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setParseBigDecimal", "(Z)V", "GetSetParseBigDecimal_ZHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">
          <c>true</c> if the parse method returns BigDecimal;
                            <c>false</c> otherwise</param>
        <summary>Returns whether the <c>#parse(java.lang.String, java.text.ParsePosition)</c>
            method returns <c>BigDecimal</c>. -or- Sets whether the <c>#parse(java.lang.String, java.text.ParsePosition)</c>
            method returns <c>BigDecimal</c>.</summary>
        <value>
          <c>true</c> if the parse method returns BigDecimal;
                    <c>false</c> otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Returns whether the <c>#parse(java.lang.String, java.text.ParsePosition)</c>
            method returns <c>BigDecimal</c>. The default value is false.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#isParseBigDecimal()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.isParseBigDecimal()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Sets whether the <c>#parse(java.lang.String, java.text.ParsePosition)</c>
            method returns <c>BigDecimal</c>.</para>
          <para>Added in 1.5.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setParseBigDecimal(boolean)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setParseBigDecimal(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PositivePrefix">
      <MemberSignature Language="C#" Value="public virtual string? PositivePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositivePrefix" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.PositivePrefix" />
      <MemberSignature Language="F#" Value="member this.PositivePrefix : string with get, set" Usage="Java.Text.DecimalFormat.PositivePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPositivePrefix", "()Ljava/lang/String;", "GetGetPositivePrefixHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPositivePrefix", "()Ljava/lang/String;", "GetGetPositivePrefixHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setPositivePrefix", "(Ljava/lang/String;)V", "GetSetPositivePrefix_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setPositivePrefix", "(Ljava/lang/String;)V", "GetSetPositivePrefix_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new positive prefix</param>
        <summary>Get the positive prefix. -or- Set the positive prefix.</summary>
        <value>the positive prefix</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the positive prefix.</para>
          <para>Examples: +123, $123, sFr123</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getPositivePrefix()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getPositivePrefix()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the positive prefix.</para>
          <para>Examples: +123, $123, sFr123</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setPositivePrefix(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setPositivePrefix(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSuffix">
      <MemberSignature Language="C#" Value="public virtual string? PositiveSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSuffix" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.PositiveSuffix" />
      <MemberSignature Language="F#" Value="member this.PositiveSuffix : string with get, set" Usage="Java.Text.DecimalFormat.PositiveSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPositiveSuffix", "()Ljava/lang/String;", "GetGetPositiveSuffixHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getPositiveSuffix", "()Ljava/lang/String;", "GetGetPositiveSuffixHandler")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setPositiveSuffix", "(Ljava/lang/String;)V", "GetSetPositiveSuffix_Ljava_lang_String_Handler")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setPositiveSuffix", "(Ljava/lang/String;)V", "GetSetPositiveSuffix_Ljava_lang_String_Handler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="newValue">the new positive suffix</param>
        <summary>Get the positive suffix. -or- Set the positive suffix.</summary>
        <value>the positive suffix</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Get the positive suffix.</para>
          <para>Example: 123%</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#getPositiveSuffix()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.getPositiveSuffix()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set the positive suffix.</para>
          <para>Example: 123%</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#setPositiveSuffix(java.lang.String)" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.setPositiveSuffix(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Text.DecimalFormat.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Text.DecimalFormat.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Text.DecimalFormat.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual string? ToLocalizedPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToLocalizedPattern() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.ToLocalizedPattern" />
      <MemberSignature Language="F#" Value="abstract member ToLocalizedPattern : unit -&gt; string&#xA;override this.ToLocalizedPattern : unit -&gt; string" Usage="decimalFormat.ToLocalizedPattern " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toLocalizedPattern", "()Ljava/lang/String;", "GetToLocalizedPatternHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toLocalizedPattern", "()Ljava/lang/String;", "GetToLocalizedPatternHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synthesizes a localized pattern string that represents the current
            state of this Format object.</summary>
        <returns>a localized pattern string</returns>
        <remarks>
          <para>Synthesizes a localized pattern string that represents the current
            state of this Format object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#toLocalizedPattern()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.toLocalizedPattern()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToPattern">
      <MemberSignature Language="C#" Value="public virtual string? ToPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToPattern() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Text.DecimalFormat.ToPattern" />
      <MemberSignature Language="F#" Value="abstract member ToPattern : unit -&gt; string&#xA;override this.ToPattern : unit -&gt; string" Usage="decimalFormat.ToPattern " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synthesizes a pattern string that represents the current state
            of this Format object.</summary>
        <returns>a pattern string</returns>
        <remarks>
          <para>Synthesizes a pattern string that represents the current state
            of this Format object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/java/text/DecimalFormat#toPattern()" title="Reference documentation">Java documentation for <code>java.text.DecimalFormat.toPattern()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
