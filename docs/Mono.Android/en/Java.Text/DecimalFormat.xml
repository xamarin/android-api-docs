<Type Name="DecimalFormat" FullName="Java.Text.DecimalFormat">
  <TypeSignature Language="C#" Value="public class DecimalFormat : Java.Text.NumberFormat" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DecimalFormat extends Java.Text.NumberFormat" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text.NumberFormat</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/DecimalFormat", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A concrete subclass of <c><see cref="T:Java.Text.NumberFormat" /></c> that formats decimal numbers.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A concrete subclass of <c><see cref="T:Java.Text.NumberFormat" /></c> that formats decimal numbers. It
 has a variety of features designed to make it possible to parse and format
 numbers in any locale, including support for Western, Arabic, or Indic
 digits. It also supports different flavors of numbers, including integers
 ("123"), fixed-point numbers ("123.4"), scientific notation ("1.23E4"),
 percentages ("12%"), and currency amounts ("$123"). All of these flavors can
 be easily localized.
 </para>
      <para tool="javadoc-to-mdoc">
        <i>This is an enhanced version of <c>DecimalFormat</c> that is based on
 the standard version in the RI. New or changed functionality is labeled
 <i><format type="text/html"><font color="red">NEW</font></format></i>.</i>
      </para>
      <para tool="javadoc-to-mdoc">
 To obtain a <c><see cref="T:Java.Text.NumberFormat" /></c> for a specific locale (including the default
 locale), call one of <c>NumberFormat</c>'s factory methods such as
 <c>NumberFormat.getInstance</c>. Do not call the <c>DecimalFormat</c>
 constructors directly, unless you know what you are doing, since the
 <c><see cref="T:Java.Text.NumberFormat" /></c> factory methods may return subclasses other than
 <c>DecimalFormat</c>. If you need to customize the format object, do
 something like this: <format type="text/html"><blockquote><example><code lang="java">
 NumberFormat f = NumberFormat.getInstance(loc);
 if (f instanceof DecimalFormat) {
     ((DecimalFormat)f).setDecimalSeparatorAlwaysShown(true);
 }
 </code></example></blockquote></format><format type="text/html"><h4>Patterns</h4></format></para>
      <para tool="javadoc-to-mdoc">
 A <c>DecimalFormat</c> consists of a <i>pattern</i> and a set of
 <i>symbols</i>. The pattern may be set directly using
 <c><see cref="M:Java.Text.DecimalFormat.ApplyPattern(System.String)" /></c>, or indirectly using other API methods which
 manipulate aspects of the pattern, such as the minimum number of integer
 digits. The symbols are stored in a <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c> object. When
 using the <c><see cref="T:Java.Text.NumberFormat" /></c> factory methods, the pattern and symbols are
 read from ICU's locale data.
 <format type="text/html"><h4>Special Pattern Characters</h4></format></para>
      <para tool="javadoc-to-mdoc">
 Many characters in a pattern are taken literally; they are matched during
 parsing and are written out unchanged during formatting. On the other hand,
 special characters stand for other characters, strings, or classes of
 characters. For example, the '#' character is replaced by a localized digit.
 Often the replacement character is the same as the pattern character; in the
 U.S. locale, the ',' grouping character is replaced by ','. However, the
 replacement is still happening, and if the symbols are modified, the grouping
 character changes. Some special characters affect the behavior of the
 formatter by their presence; for example, if the percent character is seen,
 then the value is multiplied by 100 before being displayed.
 </para>
      <para tool="javadoc-to-mdoc">
 To insert a special character in a pattern as a literal, that is, without any
 special meaning, the character must be quoted. There are some exceptions to
 this which are noted below.
 </para>
      <para tool="javadoc-to-mdoc">
 The characters listed here are used in non-localized patterns. Localized
 patterns use the corresponding characters taken from this formatter's
 <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c> object instead, and these characters lose their
 special status. Two exceptions are the currency sign and quote, which are not
 localized.
 <format type="text/html"><blockquote><table border="0" cellspacing="3" cellpadding="0" summary="Chart  showing symbol, location, localized, and meaning."><tr bgcolor="#ccccff"><th align="left">Symbol</th><th align="left">Location</th><th align="left">Localized?</th><th align="left">Meaning</th></tr><tr valign="top"><td><c>0</c></td><td>Number</td><td>Yes</td><td>Digit.</td></tr><tr valign="top"><td><c>@</c></td><td>Number</td><td>No</td><td><i><font color="red">NEW</font> </i> Significant
 digit.</td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>#</c></td><td>Number</td><td>Yes</td><td>Digit, leading zeroes are not shown.</td></tr><tr valign="top"><td><c>.</c></td><td>Number</td><td>Yes</td><td>Decimal separator or monetary decimal separator.</td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>-</c></td><td>Number</td><td>Yes</td><td>Minus sign.</td></tr><tr valign="top"><td><c>,</c></td><td>Number</td><td>Yes</td><td>Grouping separator.</td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>E</c></td><td>Number</td><td>Yes</td><td>Separates mantissa and exponent in scientific notation.
 <i>Does not need to be quoted in prefix or suffix.</i></td></tr><tr valign="top"><td><c>+</c></td><td>Exponent</td><td>Yes</td><td><i><font color="red">NEW</font> </i> Prefix
 positive exponents with localized plus sign.
 <i>Does not need to be quoted in prefix or suffix.</i></td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>;</c></td><td>Subpattern boundary</td><td>Yes</td><td>Separates positive and negative subpatterns.</td></tr><tr valign="top"><td><c>%</c></td><td>Prefix or suffix</td><td>Yes</td><td>Multiply by 100 and show as percentage.</td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>‰</c> (<c>\u2030</c>)</td><td>Prefix or suffix</td><td>Yes</td><td>Multiply by 1000 and show as per mille.</td></tr><tr valign="top"><td><c>¤</c> (<c>\u00A4</c>)</td><td>Prefix or suffix</td><td>No</td><td>Currency sign, replaced by currency symbol. If doubled, replaced by
 international currency symbol. If present in a pattern, the monetary decimal
 separator is used instead of the decimal separator.</td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>'</c></td><td>Prefix or suffix</td><td>No</td><td>Used to quote special characters in a prefix or suffix, for example,
 <c>"'#'#"</c> formats 123 to <c>"#123"</c>. To create a single quote
 itself, use two in a row: <c>"# o''clock"</c>.</td></tr><tr valign="top"><td><c>*</c></td><td>Prefix or suffix boundary</td><td>Yes</td><td><i><font color="red">NEW</font> </i> Pad escape,
 precedes pad character. </td></tr></table></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 A <c>DecimalFormat</c> pattern contains a positive and negative subpattern,
 for example, "#,##0.00;(#,##0.00)". Each subpattern has a prefix, a numeric
 part and a suffix. If there is no explicit negative subpattern, the negative
 subpattern is the localized minus sign prefixed to the positive subpattern.
 That is, "0.00" alone is equivalent to "0.00;-0.00". If there is an explicit
 negative subpattern, it serves only to specify the negative prefix and
 suffix; the number of digits, minimal digits, and other characteristics are
 ignored in the negative subpattern. This means that "#,##0.0#;(#)" produces
 precisely the same result as "#,##0.0#;(#,##0.0#)".
 </para>
      <para tool="javadoc-to-mdoc">
 The prefixes, suffixes, and various symbols used for infinity, digits,
 thousands separators, decimal separators, etc. may be set to arbitrary
 values, and they will appear properly during formatting. However, care must
 be taken that the symbols and strings do not conflict, or parsing will be
 unreliable. For example, either the positive and negative prefixes or the
 suffixes must be distinct for <c><see cref="M:Java.Text.NumberFormat.Parse(System.String)" /></c> to be able to distinguish
 positive from negative values. Another example is that the decimal separator
 and thousands separator should be distinct characters, or parsing will be
 impossible.
 </para>
      <para tool="javadoc-to-mdoc">
 The <i>grouping separator</i> is a character that separates clusters of
 integer digits to make large numbers more legible. It is commonly used for
 thousands, but in some locales it separates ten-thousands. The <i>grouping
 size</i>
 is the number of digits between the grouping separators, such as 3 for
 "100,000,000" or 4 for "1 0000 0000". There are actually two different
 grouping sizes: One used for the least significant integer digits, the
 <i>primary grouping size</i>, and one used for all others, the
 <i>secondary grouping size</i>. In most locales these are the same, but
 sometimes they are different. For example, if the primary grouping interval
 is 3, and the secondary is 2, then this corresponds to the pattern
 "#,##,##0", and the number 123456789 is formatted as "12,34,56,789". If a
 pattern contains multiple grouping separators, the interval between the last
 one and the end of the integer defines the primary grouping size, and the
 interval between the last two defines the secondary grouping size. All others
 are ignored, so "#,##,###,####", "###,###,####" and "##,#,###,####" produce
 the same result.
 </para>
      <para tool="javadoc-to-mdoc">
 Illegal patterns, such as "#.#.#" or "#.###,###", will cause
 <c>DecimalFormat</c> to throw an <c><see cref="T:Java.Lang.IllegalArgumentException" /></c> with a
 message that describes the problem.
 <format type="text/html"><h4>Pattern BNF</h4></format><example><code lang="java">
 pattern    := subpattern (';' subpattern)?
 subpattern := prefix? number exponent? suffix?
 number     := (integer ('.' fraction)?) | sigDigits
 prefix     := '\\u0000'..'\\uFFFD' - specialCharacters
 suffix     := '\\u0000'..'\\uFFFD' - specialCharacters
 integer    := '#'* '0'* '0'
 fraction   := '0'* '#'*
 sigDigits  := '#'* '@' '@'* '#'*
 exponent   := 'E' '+'? '0'* '0'
 padSpec    := '*' padChar
 padChar    := '\\u0000'..'\\uFFFD' - quote

 Notation:
   X*       0 or more instances of X
   X?       0 or 1 instances of X
   X|Y      either X or Y
   C..D     any character from C up to D, inclusive
   S-T      characters in S, except those in T
 </code></example>

 The first subpattern is for positive numbers. The second (optional)
 subpattern is for negative numbers.
 </para>
      <para tool="javadoc-to-mdoc">
 Not indicated in the BNF syntax above:
 <list type="bullet"><item><term>The grouping separator ',' can occur inside the integer and sigDigits
 elements, between any two pattern characters of that element, as long as the
 integer or sigDigits element is not followed by the exponent element.
 </term></item><item><term><format type="text/html"><font color="red"><i>NEW</i> </font></format> Two
 grouping intervals are recognized: The one between the decimal point and the
 first grouping symbol and the one between the first and second grouping
 symbols. These intervals are identical in most locales, but in some locales
 they differ. For example, the pattern "#,##,###" formats the number
 123456789 as "12,34,56,789".</term></item><item><term><i><format type="text/html"><font color="red">NEW</font></format> </i> The pad
 specifier <c>padSpec</c> may appear before the prefix, after the prefix,
 before the suffix, after the suffix or not at all.
 </term></item></list><format type="text/html"><h4>Parsing</h4></format></para>
      <para tool="javadoc-to-mdoc">
        <c>DecimalFormat</c> parses all Unicode characters that represent decimal
 digits, as defined by <c><see cref="M:Java.Lang.Character.Digit(System.Int32,System.Int32)" /></c>. In addition,
 <c>DecimalFormat</c> also recognizes as digits the ten consecutive
 characters starting with the localized zero digit defined in the
 <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c> object. During formatting, the
 <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c>-based digits are written out.
 </para>
      <para tool="javadoc-to-mdoc">
 During parsing, grouping separators are ignored.
 </para>
      <para tool="javadoc-to-mdoc">
 If <c><see cref="M:Java.Text.DecimalFormat.Parse(System.String,Java.Text.ParsePosition)" /></c> fails to parse a string, it returns
 <c>null</c> and leaves the parse position unchanged.
 <format type="text/html"><h4>Formatting</h4></format></para>
      <para tool="javadoc-to-mdoc">
 Formatting is guided by several parameters, all of which can be specified
 either using a pattern or using the API. The following description applies to
 formats that do not use  or .
 <list type="bullet"><item><term>If the number of actual integer digits exceeds the
 <i>maximum integer digits</i>, then only the least significant digits
 are shown. For example, 1997 is formatted as "97" if maximum integer digits
 is set to 2.
 </term></item><item><term>If the number of actual integer digits is less than the
 <i>minimum integer digits</i>, then leading zeros are added. For
 example, 1997 is formatted as "01997" if minimum integer digits is set to 5.
 </term></item><item><term>If the number of actual fraction digits exceeds the <i>maximum
 fraction digits</i>,
 then half-even rounding is performed to the maximum fraction digits. For
 example, 0.125 is formatted as "0.12" if the maximum fraction digits is 2.
 </term></item><item><term>If the number of actual fraction digits is less than the
 <i>minimum fraction digits</i>, then trailing zeros are added. For
 example, 0.125 is formatted as "0.1250" if the minimum fraction digits is set
 to 4.
 </term></item><item><term>Trailing fractional zeros are not displayed if they occur <i>j</i>
 positions after the decimal, where <i>j</i> is less than the maximum
 fraction digits. For example, 0.10004 is formatted as "0.1" if the maximum
 fraction digits is four or less.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <i>Special Values</i>
      </para>
      <para tool="javadoc-to-mdoc">
        <c>NaN</c> is represented as a single character, typically
 <c>\uFFFD</c>. This character is determined by the
 <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c> object. This is the only value for which the
 prefixes and suffixes are not used.
 </para>
      <para tool="javadoc-to-mdoc">
 Infinity is represented as a single character, typically <c>\u221E</c>,
 with the positive or negative prefixes and suffixes applied. The infinity
 character is determined by the <c><see cref="T:Java.Text.DecimalFormatSymbols" /></c> object. </para>
      <para tool="javadoc-to-mdoc">
 Numbers in scientific notation are expressed as the product of a mantissa and
 a power of ten, for example, 1234 can be expressed as 1.234 x 10<format type="text/html"><sup>3</sup></format>.
 The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes
 [0.0, 1.0), but it does not need to be. <c>DecimalFormat</c> supports
 arbitrary mantissas. <c>DecimalFormat</c> can be instructed to use
 scientific notation through the API or through the pattern. In a pattern, the
 exponent character immediately followed by one or more digit characters
 indicates scientific notation. Example: "0.###E0" formats the number 1234 as
 "1.234E3".
 <list type="bullet"><item><term>The number of digit characters after the exponent character gives the
 minimum exponent digit count. There is no maximum. Negative exponents are
 formatted using the localized minus sign, <i>not</i> the prefix and
 suffix from the pattern. This allows patterns such as "0.###E0 m/s". To
 prefix positive exponents with a localized plus sign, specify '+' between the
 exponent and the digits: "0.###E+0" will produce formats "1E+1", "1E+0",
 "1E-1", etc. (In localized patterns, use the localized plus sign rather than
 '+'.)
 </term></item><item><term>The minimum number of integer digits is achieved by adjusting the
 exponent. Example: 0.00123 formatted with "00.###E0" yields "12.3E-4". This
 only happens if there is no maximum number of integer digits. If there is a
 maximum, then the minimum number of integer digits is fixed at one.
 </term></item><item><term>The maximum number of integer digits, if present, specifies the exponent
 grouping. The most common use of this is to generate <i>engineering
 notation</i>,
 in which the exponent is a multiple of three, e.g., "##0.###E0". The number
 12345 is formatted using "##0.###E0" as "12.345E3".
 </term></item><item><term>When using scientific notation, the formatter controls the digit counts
 using significant digits logic. The maximum number of significant digits
 limits the total number of integer and fraction digits that will be shown in
 the mantissa; it does not affect parsing. For example, 12345 formatted with
 "##0.##E0" is "12.3E3". See the section on significant digits for more
 details.
 </term></item><item><term>The number of significant digits shown is determined as follows: If no
 significant digits are used in the pattern then the minimum number of
 significant digits shown is one, the maximum number of significant digits
 shown is the sum of the <i>minimum integer</i> and
 <i>maximum fraction</i> digits, and it is unaffected by the maximum
 integer digits. If this sum is zero, then all significant digits are shown.
 If significant digits are used in the pattern then the number of integer
 digits is fixed at one and there is no exponent grouping.
 </term></item><item><term>Exponential patterns may not contain grouping separators.
 </term></item></list><format type="text/html"><h4><i><font color="red">NEW</font> </i> Significant
 Digits</h4></format></para>
      <para tool="javadoc-to-mdoc">
        <c>DecimalFormat</c> has two ways of controlling how many digits are
 shown: (a) significant digit counts or (b) integer and fraction digit counts.
 Integer and fraction digit counts are described above. When a formatter uses
 significant digits counts, the number of integer and fraction digits is not
 specified directly, and the formatter settings for these counts are ignored.
 Instead, the formatter uses as many integer and fraction digits as required
 to display the specified number of significant digits.
 <format type="text/html"><h5>Examples:</h5></format><format type="text/html"><blockquote><table border="0" cellspacing="3" cellpadding="0"><tr bgcolor="#ccccff"><th align="left">Pattern</th><th align="left">Minimum significant digits</th><th align="left">Maximum significant digits</th><th align="left">Number</th><th align="left">Output of format()</th></tr><tr valign="top"><td><c>@@@</c><td>3</td><td>3</td><td>12345</td><td><c>12300</c></td></td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>@@@</c></td><td>3</td><td>3</td><td>0.12345</td><td><c>0.123</c></td></tr><tr valign="top"><td><c>@@##</c></td><td>2</td><td>4</td><td>3.14159</td><td><c>3.142</c></td></tr><tr valign="top" bgcolor="#eeeeff"><td><c>@@##</c></td><td>2</td><td>4</td><td>1.23004</td><td><c>1.23</c></td></tr></table></blockquote></format><list type="bullet"><item><term>Significant digit counts may be expressed using patterns that specify a
 minimum and maximum number of significant digits. These are indicated by the
 <c>'@'</c> and <c>'#'</c> characters. The minimum number of significant
 digits is the number of <c>'@'</c> characters. The maximum number of
 significant digits is the number of <c>'@'</c> characters plus the number of
 <c>'#'</c> characters following on the right. For example, the pattern
 <c>"@@@"</c> indicates exactly 3 significant digits. The pattern
 <c>"@##"</c> indicates from 1 to 3 significant digits. Trailing zero digits
 to the right of the decimal separator are suppressed after the minimum number
 of significant digits have been shown. For example, the pattern <c>"@##"</c>
 formats the number 0.1203 as <c>"0.12"</c>.
 </term></item><item><term>If a pattern uses significant digits, it may not contain a decimal
 separator, nor the <c>'0'</c> pattern character. Patterns such as
 <c>"@00"</c> or <c>"@.###"</c> are disallowed.
 </term></item><item><term>Any number of <c>'#'</c> characters may be prepended to the left of the
 leftmost <c>'@'</c> character. These have no effect on the minimum and
 maximum significant digit counts, but may be used to position grouping
 separators. For example, <c>"#,#@#"</c> indicates a minimum of one
 significant digit, a maximum of two significant digits, and a grouping size
 of three.
 </term></item><item><term>In order to enable significant digits formatting, use a pattern
 containing the <c>'@'</c> pattern character.
 </term></item><item><term>In order to disable significant digits formatting, use a pattern that
 does not contain the <c>'@'</c> pattern character.
 </term></item><item><term>The number of significant digits has no effect on parsing.
 </term></item><item><term>Significant digits may be used together with exponential notation. Such
 patterns are equivalent to a normal exponential pattern with a minimum and
 maximum integer digit count of one, a minimum fraction digit count of the
 number of '@' characters in the pattern - 1, and a maximum fraction digit
 count of the number of '@' and '#' characters in the pattern - 1. For
 example, the pattern <c>"@@###E0"</c> is equivalent to <c>"0.0###E0"</c>.
 </term></item><item><term>If significant digits are in use then the integer and fraction digit
 counts, as set via the API, are ignored.
 </term></item></list><format type="text/html"><h4><i><font color="red">NEW</font> </i> Padding</h4></format></para>
      <para tool="javadoc-to-mdoc">
        <c>DecimalFormat</c> supports padding the result of <c>format</c> to a
 specific width. Padding may be specified either through the API or through
 the pattern syntax. In a pattern, the pad escape character followed by a
 single pad character causes padding to be parsed and formatted. The pad
 escape character is '*' in unlocalized patterns. For example,
 <c>"$*x#,##0.00"</c> formats 123 to <c>"$xx123.00"</c>, and 1234 to
 <c>"$1,234.00"</c>.
 <list type="bullet"><item><term>When padding is in effect, the width of the positive subpattern,
 including prefix and suffix, determines the format width. For example, in the
 pattern <c>"* #0 o''clock"</c>, the format width is 10.</term></item><item><term>The width is counted in 16-bit code units (Java <c>char</c>s).</term></item><item><term>Some parameters which usually do not matter have meaning when padding is
 used, because the pattern width is significant with padding. In the pattern "*
 ##,##,#,##0.##", the format width is 14. The initial characters "##,##," do
 not affect the grouping size or maximum integer digits, but they do affect
 the format width.</term></item><item><term>Padding may be inserted at one of four locations: before the prefix,
 after the prefix, before the suffix or after the suffix. If padding is
 specified in any other location, <c><see cref="M:Java.Text.DecimalFormat.ApplyPattern(System.String)" /></c> throws an <c><see cref="T:Java.Lang.IllegalArgumentException" /></c>. If there is no prefix, before the prefix and after
 the prefix are equivalent, likewise for the suffix.</term></item><item><term>When specified in a pattern, the 16-bit <c>char</c> immediately
 following the pad escape is the pad character. This may be any character,
 including a special pattern character. That is, the pad escape
 <i>escapes</i> the following character. If there is no character after
 the pad escape, then the pattern is illegal.</term></item></list><format type="text/html"><h4>Serialization</h4></format></para>
      <para tool="javadoc-to-mdoc">
 Features marked as <i><format type="text/html"><font color="red">NEW</font></format></i> and patterns that use
 characters not documented above are unlikely to serialize/deserialize correctly.

 <format type="text/html"><h4>Synchronization</h4></format></para>
      <para tool="javadoc-to-mdoc">
        <c>DecimalFormat</c> objects are not synchronized. Multiple threads should
 not access one formatter concurrently.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Text._Format" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.Text.NumberFormat" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/DecimalFormat.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new <c>DecimalFormat</c> for formatting and parsing numbers
 for the user's default locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>DecimalFormat</c> for formatting and parsing numbers
 for the user's default locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#DecimalFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary>Constructs a new <c>DecimalFormat</c> using the specified non-localized
 pattern and the <c>DecimalFormatSymbols</c> for the user's default Locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>DecimalFormat</c> using the specified non-localized
 pattern and the <c>DecimalFormatSymbols</c> for the user's default Locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#DecimalFormat(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DecimalFormat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecimalFormat (string pattern, Java.Text.DecimalFormatSymbols value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, class Java.Text.DecimalFormatSymbols value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="value" Type="Java.Text.DecimalFormatSymbols" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Constructs a new <c>DecimalFormat</c> using the specified non-localized
 pattern and <c>DecimalFormatSymbols</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>DecimalFormat</c> using the specified non-localized
 pattern and <c>DecimalFormatSymbols</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#DecimalFormat(java.lang.String, java.text.DecimalFormatSymbols)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyLocalizedPattern (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyLocalizedPattern(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyLocalizedPattern", "(Ljava/lang/String;)V", "GetApplyLocalizedPattern_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the localized pattern.</param>
        <summary>Changes the pattern of this decimal format to the specified pattern which
 uses localized pattern characters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes the pattern of this decimal format to the specified pattern which
 uses localized pattern characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#applyLocalizedPattern(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyPattern (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPattern(string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">the non-localized pattern.</param>
        <summary>Changes the pattern of this decimal format to the specified pattern which
 uses non-localized pattern characters.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes the pattern of this decimal format to the specified pattern which
 uses non-localized pattern characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#applyPattern(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DecimalFormatSymbols">
      <MemberSignature Language="C#" Value="public virtual Java.Text.DecimalFormatSymbols DecimalFormatSymbols { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Text.DecimalFormatSymbols DecimalFormatSymbols" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDecimalFormatSymbols", "()Ljava/text/DecimalFormatSymbols;", "GetGetDecimalFormatSymbolsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDecimalFormatSymbols", "(Ljava/text/DecimalFormatSymbols;)V", "GetSetDecimalFormatSymbols_Ljava_text_DecimalFormatSymbols_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.DecimalFormatSymbols</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>DecimalFormatSymbols</c> used by this decimal format.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getDecimalFormatSymbols()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the <c>DecimalFormatSymbols</c> used by this decimal format.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setDecimalFormatSymbols(java.text.DecimalFormatSymbols)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the <c>DecimalFormatSymbols</c> used by this decimal format.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DecimalSeparatorAlwaysShown">
      <MemberSignature Language="C#" Value="public virtual bool DecimalSeparatorAlwaysShown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DecimalSeparatorAlwaysShown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDecimalSeparatorAlwaysShown", "()Z", "GetIsDecimalSeparatorAlwaysShownHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDecimalSeparatorAlwaysShown", "(Z)V", "GetSetDecimalSeparatorAlwaysShown_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the decimal separator is shown when there are no
 fractional digits.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#isDecimalSeparatorAlwaysShown()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Indicates whether the decimal separator is shown when there are no
 fractional digits.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setDecimalSeparatorAlwaysShown(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the decimal separator is shown even when there are no fractional
 digits.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override sealed Java.Lang.StringBuffer Format (Java.Lang.Object number, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(class Java.Lang.Object number, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="Java.Lang.Object" />
        <Parameter Name="toAppendTo" Type="Java.Lang.StringBuffer" />
        <Parameter Name="pos" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="number">the object to format, must be a <c>Number</c>.</param>
        <param name="buffer">the target string buffer to append the formatted number to.</param>
        <param name="position">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Formats a number into a supplied buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats a number into a supplied buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The number must be a subclass of <c>Number</c>. Instances of <c>Byte</c>, <c>Short</c>,
 <c>Integer</c>, and <c>Long</c> have <c>Number.longValue</c> invoked, as do instances of
 <c>BigInteger</c> where <c>BigInteger.bitLength</c> returns <format type="text/html"><i>less than</i></format> 64. All other
 values have <c>Number.doubleValue</c> invoked instead.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of <c>field</c> contains a value specifying
 a format field, then its <c>beginIndex</c> and <c>endIndex</c> members
 will be updated with the position of the first occurrence of this field
 in the formatted text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override Java.Lang.StringBuffer Format (double value, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(float64 value, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_DLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="position" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="value">the double to format.</param>
        <param name="buffer">the target string buffer to append the formatted double value
            to.</param>
        <param name="position">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Formats the specified double value as a string using the pattern of this
 number format and appends the string to the specified string buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats the specified double value as a string using the pattern of this
 number format and appends the string to the specified string buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of <c>position</c> contains a value
 specifying a format field, then its <c>beginIndex</c> and
 <c>endIndex</c> members will be updated with the position of the first
 occurrence of this field in the formatted text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#format(double, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override Java.Lang.StringBuffer Format (long value, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(int64 value, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_JLjava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="position" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="value">the long to format.</param>
        <param name="buffer">the target string buffer to append the formatted long value
            to.</param>
        <param name="position">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Formats the specified long value as a string using the pattern of this
 number format and appends the string to the specified string buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats the specified long value as a string using the pattern of this
 number format and appends the string to the specified string buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of <c>position</c> contains a value
 specifying a format field, then its <c>beginIndex</c> and
 <c>endIndex</c> members will be updated with the position of the first
 occurrence of this field in the formatted text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#format(long, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GroupingSize">
      <MemberSignature Language="C#" Value="public virtual int GroupingSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GroupingSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getGroupingSize", "()I", "GetGetGroupingSizeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setGroupingSize", "(I)V", "GetSetGroupingSize_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of digits grouped together by the grouping separator.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getGroupingSize()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the number of digits grouped together by the grouping separator.
 This only allows to get the primary grouping size. There is no API to get
 the secondary grouping size.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setGroupingSize(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the number of digits grouped together by the grouping separator.
 This only allows to set the primary grouping size; the secondary grouping
 size can only be set with a pattern.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Multiplier">
      <MemberSignature Language="C#" Value="public virtual int Multiplier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Multiplier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMultiplier", "()I", "GetGetMultiplierHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMultiplier", "(I)V", "GetSetMultiplier_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the multiplier which is applied to the number before formatting
 or after parsing.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getMultiplier()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the multiplier which is applied to the number before formatting
 or after parsing. The multiplier is meant for tasks like parsing percentages.
 For example, given a multiplier of 100, 1.23 would be formatted as "123" and
 "123" would be parsed as 1.23.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setMultiplier(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the multiplier which is applied to the number before formatting or
 after parsing. The multiplier meant for tasks like parsing percentages.
 For example, given a multiplier of 100, 1.23 would be formatted as "123" and
 "123" would be parsed as 1.23.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NegativePrefix">
      <MemberSignature Language="C#" Value="public virtual string NegativePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNegativePrefix", "()Ljava/lang/String;", "GetGetNegativePrefixHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNegativePrefix", "(Ljava/lang/String;)V", "GetSetNegativePrefix_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the prefix which is formatted or parsed before a negative number.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getNegativePrefix()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the prefix which is formatted or parsed before a negative number.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setNegativePrefix(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the prefix which is formatted or parsed before a negative number.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSuffix">
      <MemberSignature Language="C#" Value="public virtual string NegativeSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNegativeSuffix", "()Ljava/lang/String;", "GetGetNegativeSuffixHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNegativeSuffix", "(Ljava/lang/String;)V", "GetSetNegativeSuffix_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the suffix which is formatted or parsed after a negative number.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getNegativeSuffix()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the suffix which is formatted or parsed after a negative number.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setNegativeSuffix(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the suffix which is formatted or parsed after a negative number.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public override Java.Lang.Number Parse (string string, Java.Text.ParsePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.Number Parse(string string, class Java.Text.ParsePosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Number</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <param name="position">input/output parameter, specifies the start index in
            <c>string</c> from where to start parsing. If parsing is
            successful, it is updated with the index following the parsed
            text; on error, the index is unchanged and the error index is
            set to the index where the error occurred.</param>
        <summary>Parses a <c>Long</c> or <c>Double</c> from the specified string
 starting at the index specified by <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses a <c>Long</c> or <c>Double</c> from the specified string
 starting at the index specified by <c>position</c>. If the string is
 successfully parsed then the index of the <c>ParsePosition</c> is
 updated to the index following the parsed text. On error, the index is
 unchanged and the error index of <c>ParsePosition</c> is set to the
 index where the error occurred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#parse(java.lang.String, java.text.ParsePosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParseBigDecimal">
      <MemberSignature Language="C#" Value="public virtual bool ParseBigDecimal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ParseBigDecimal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isParseBigDecimal", "()Z", "GetIsParseBigDecimalHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setParseBigDecimal", "(Z)V", "GetSetParseBigDecimal_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This value indicates whether the return object of the parse operation is
 of type <c>BigDecimal</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#isParseBigDecimal()" target="_blank">[Android Documentation]</a>
              <br />
            </format>This value indicates whether the return object of the parse operation is
 of type <c>BigDecimal</c>. This value defaults to <c>false</c>.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setParseBigDecimal(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the behavior of the parse method. If set to <c>true</c> then all
 the returned objects will be of type <c>BigDecimal</c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PositivePrefix">
      <MemberSignature Language="C#" Value="public virtual string PositivePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositivePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPositivePrefix", "()Ljava/lang/String;", "GetGetPositivePrefixHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPositivePrefix", "(Ljava/lang/String;)V", "GetSetPositivePrefix_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the prefix which is formatted or parsed before a positive number.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getPositivePrefix()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the prefix which is formatted or parsed before a positive number.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setPositivePrefix(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the prefix which is formatted or parsed before a positive number.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSuffix">
      <MemberSignature Language="C#" Value="public virtual string PositiveSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPositiveSuffix", "()Ljava/lang/String;", "GetGetPositiveSuffixHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPositiveSuffix", "(Ljava/lang/String;)V", "GetSetPositiveSuffix_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the suffix which is formatted or parsed after a positive number.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#getPositiveSuffix()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the suffix which is formatted or parsed after a positive number.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#setPositiveSuffix(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the suffix which is formatted or parsed after a positive number.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLocalizedPattern">
      <MemberSignature Language="C#" Value="public virtual string ToLocalizedPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToLocalizedPattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toLocalizedPattern", "()Ljava/lang/String;", "GetToLocalizedPatternHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the pattern of this decimal format using localized pattern
 characters.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pattern of this decimal format using localized pattern
 characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#toLocalizedPattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ToPattern">
      <MemberSignature Language="C#" Value="public virtual string ToPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToPattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the pattern of this decimal format using non-localized pattern
 characters.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pattern of this decimal format using non-localized pattern
 characters.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/DecimalFormat.html#toPattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
