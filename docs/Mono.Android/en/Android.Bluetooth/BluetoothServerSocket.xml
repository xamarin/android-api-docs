<Type Name="BluetoothServerSocket" FullName="Android.Bluetooth.BluetoothServerSocket">
  <TypeSignature Language="C#" Value="public sealed class BluetoothServerSocket : Java.Lang.Object, IDisposable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BluetoothServerSocket extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/bluetooth/BluetoothServerSocket", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="5">
    <summary>A listening Bluetooth socket.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A listening Bluetooth socket.

 </para>
      <para tool="javadoc-to-mdoc">The interface for Bluetooth Sockets is similar to that of TCP sockets:
 <c><see cref="T:Java.Net.Socket" /></c> and <c><see cref="T:Java.Net.ServerSocket" /></c>. On the server
 side, use a <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> to create a listening server
 socket. When a connection is accepted by the <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c>,
 it will return a new <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> to manage the connection.
 On the client side, use a single <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> to both initiate
 an outgoing connection and to manage the connection.

 </para>
      <para tool="javadoc-to-mdoc">The most common type of Bluetooth socket is RFCOMM, which is the type
 supported by the Android APIs. RFCOMM is a connection-oriented, streaming
 transport over Bluetooth. It is also known as the Serial Port Profile (SPP).

 </para>
      <para tool="javadoc-to-mdoc">To create a listening <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> that's ready for
 incoming connections, use
 <c><see cref="M:Android.Bluetooth.BluetoothAdapter.ListenUsingRfcommWithServiceRecord(System.String,Java.Util.UUID)" /></c>. Then call
 <c><see cref="M:Android.Bluetooth.BluetoothServerSocket.Accept" /></c> to listen for incoming connection requests. This call
 will block until a connection is established, at which point, it will return
 a <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> to manage the connection. Once the <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> is acquired, it's a good idea to call <c><see cref="M:Android.Bluetooth.BluetoothServerSocket.Close" /></c> on
 the <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> when it's no longer needed for accepting
 connections. Closing the <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> will <i>not</i>
 close the returned <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>
          <see cref="T:Android.Bluetooth.BluetoothServerSocket" />
        </c> is thread
 safe. In particular, <c><see cref="M:Android.Bluetooth.BluetoothServerSocket.Close" /></c> will always immediately abort ongoing
 operations and close the server socket.

 </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i>
 Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BLUETOOTH" /></c> permission.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about using Bluetooth, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/wireless/bluetooth.html">Bluetooth</a></format> developer guide.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Bluetooth.BluetoothSocket" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 5" />
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public Android.Bluetooth.BluetoothSocket Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Bluetooth.BluetoothSocket Accept() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("accept", "()Landroid/bluetooth/BluetoothSocket;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Bluetooth.BluetoothSocket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Block until a connection is established.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Block until a connection is established.
 </para>
          <para tool="javadoc-to-mdoc">Returns a connected <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> on successful connection.
 </para>
          <para tool="javadoc-to-mdoc">Once this call returns, it can be called again to accept subsequent
 incoming connections.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.Bluetooth.BluetoothServerSocket.Close" />
            </c> can be used to abort this call from another thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">on error, for example this call was aborted, or
                     timeout
</exception>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public Android.Bluetooth.BluetoothSocket Accept (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Bluetooth.BluetoothSocket Accept(int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("accept", "(I)Landroid/bluetooth/BluetoothSocket;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Bluetooth.BluetoothSocket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">To be added.</param>
        <summary>Block until a connection is established, with timeout.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Block until a connection is established, with timeout.
 </para>
          <para tool="javadoc-to-mdoc">Returns a connected <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> on successful connection.
 </para>
          <para tool="javadoc-to-mdoc">Once this call returns, it can be called again to accept subsequent
 incoming connections.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.Bluetooth.BluetoothServerSocket.Close" />
            </c> can be used to abort this call from another thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">on error, for example this call was aborted, or
                     timeout
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Android.Bluetooth.BluetoothSocket&gt; AcceptAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Android.Bluetooth.BluetoothSocket&gt; AcceptAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Android.Bluetooth.BluetoothSocket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Android.Bluetooth.BluetoothSocket&gt; AcceptAsync (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Android.Bluetooth.BluetoothSocket&gt; AcceptAsync(int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Android.Bluetooth.BluetoothSocket&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Immediately close this socket, and release all associated resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Immediately close this socket, and release all associated resources.
 </para>
          <para tool="javadoc-to-mdoc">Causes blocked calls on this socket in other threads to immediately
 throw an IOException.
 </para>
          <para tool="javadoc-to-mdoc">Closing the <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> will <i>not</i>
 close any <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> received from <c><see cref="M:Android.Bluetooth.BluetoothServerSocket.Accept" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
