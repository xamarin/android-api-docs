<Type Name="ViewGroup" FullName="Android.Views.ViewGroup">
  <TypeSignature Language="F#" Value="type ViewGroup = class&#xA;    inherit View&#xA;    interface IViewManager&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IViewParent" />
  <TypeSignature Language="C#" Value="public abstract class ViewGroup : Android.Views.View, Android.Views.IViewManager, Android.Views.IViewParent, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ViewGroup extends Android.Views.View implements class Android.Runtime.IJavaObject, class Android.Views.IViewManager, class Android.Views.IViewParent, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.ViewGroup" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.View</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.IViewManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.IViewParent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/ViewGroup", DoNotGenerateAcw=true)]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary tool="true">To be added.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/ViewGroup" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="F#" Value="new Android.Views.ViewGroup : Android.Content.Context -&gt; Android.Views.ViewGroup" Usage="new Android.Views.ViewGroup context" />
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context? context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.#ctor(Android.Content.Context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="F#" Value="new Android.Views.ViewGroup : Android.Content.Context * Android.Util.IAttributeSet -&gt; Android.Views.ViewGroup" Usage="new Android.Views.ViewGroup (context, attrs)" />
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context? context, Android.Util.IAttributeSet? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.#ctor(Android.Content.Context,Android.Util.IAttributeSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="F#" Value="new Android.Views.ViewGroup : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Views.ViewGroup" Usage="new Android.Views.ViewGroup (javaReference, transfer)" />
      <MemberSignature Language="C#" Value="protected ViewGroup (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="F#" Value="new Android.Views.ViewGroup : Android.Content.Context * Android.Util.IAttributeSet * int -&gt; Android.Views.ViewGroup" Usage="new Android.Views.ViewGroup (context, attrs, defStyleAttr)" />
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.#ctor(Android.Content.Context,Android.Util.IAttributeSet,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyleAttr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <param name="defStyleAttr">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="F#" Value="new Android.Views.ViewGroup : Android.Content.Context * Android.Util.IAttributeSet * int * int -&gt; Android.Views.ViewGroup" Usage="new Android.Views.ViewGroup (context, attrs, defStyleAttr, defStyleRes)" />
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, int defStyleRes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyleAttr, int32 defStyleRes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.#ctor(Android.Content.Context,Android.Util.IAttributeSet,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyleAttr" Type="System.Int32" />
        <Parameter Name="defStyleRes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <param name="defStyleAttr">To be added.</param>
        <param name="defStyleRes">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStatesFromChildren">
      <MemberSignature Language="F#" Value="abstract member AddStatesFromChildren : unit -&gt; bool&#xA;override this.AddStatesFromChildren : unit -&gt; bool" Usage="viewGroup.AddStatesFromChildren " />
      <MemberSignature Language="C#" Value="public virtual bool AddStatesFromChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddStatesFromChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddStatesFromChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addStatesFromChildren", "()Z", "GetAddStatesFromChildrenHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether this ViewGroup's drawable states also include
            its children's drawable states.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addStatesFromChildren()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addStatesFromChildren()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="F#" Value="abstract member AddView : Android.Views.View -&gt; unit&#xA;override this.AddView : Android.Views.View -&gt; unit" Usage="viewGroup.AddView child" />
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddView(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addView", "(Landroid/view/View;)V", "GetAddView_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add</param>
        <summary>Adds a child view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.GenerateDefaultLayoutParams" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="F#" Value="abstract member AddView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.AddView : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="viewGroup.AddView (child, params)" />
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View? child, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewManager.AddView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="params">the layout parameters to set on the child
</param>
        <param name="child">the child view to add</param>
        <summary>Adds a child view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="F#" Value="abstract member AddView : Android.Views.View * int -&gt; unit&#xA;override this.AddView : Android.Views.View * int -&gt; unit" Usage="viewGroup.AddView (child, index)" />
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View? child, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddView(Android.Views.View,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addView", "(Landroid/view/View;I)V", "GetAddView_Landroid_view_View_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the position at which to add the child</param>
        <param name="child">the child view to add</param>
        <summary>Adds a child view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.GenerateDefaultLayoutParams" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="F#" Value="abstract member AddView : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.AddView : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="viewGroup.AddView (child, index, params)" />
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View? child, int index, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddView(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addView", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V", "GetAddView_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="index">the position at which to add the child or -1 to add last</param>
        <param name="params">the layout parameters to set on the child
</param>
        <param name="child">the child view to add</param>
        <summary>Adds a child view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="F#" Value="abstract member AddView : Android.Views.View * int * int -&gt; unit&#xA;override this.AddView : Android.Views.View * int * int -&gt; unit" Usage="viewGroup.AddView (child, width, height)" />
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View? child, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddView(Android.Views.View,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addView", "(Landroid/view/View;II)V", "GetAddView_Landroid_view_View_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="child">the child view to add</param>
        <summary>Adds a child view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddViewInLayout">
      <MemberSignature Language="F#" Value="abstract member AddViewInLayout : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; bool&#xA;override this.AddViewInLayout : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; bool" Usage="viewGroup.AddViewInLayout (child, index, params)" />
      <MemberSignature Language="C#" Value="protected virtual bool AddViewInLayout (Android.Views.View? child, int index, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AddViewInLayout(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddViewInLayout(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addViewInLayout", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)Z", "GetAddViewInLayout_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the view to add to the group</param>
        <param name="index">the index at which the child must be added or -1 to add last</param>
        <param name="params">the layout parameters to associate with the child</param>
        <summary>Adds a view during layout.</summary>
        <returns>true if the child was added, false otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addViewInLayout(android.view.View,%20int,%20android.view.LayoutParams)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addViewInLayout(android.view.View, int, android.view.LayoutParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddViewInLayout">
      <MemberSignature Language="F#" Value="abstract member AddViewInLayout : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams * bool -&gt; bool&#xA;override this.AddViewInLayout : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams * bool -&gt; bool" Usage="viewGroup.AddViewInLayout (child, index, params, preventRequestLayout)" />
      <MemberSignature Language="C#" Value="protected virtual bool AddViewInLayout (Android.Views.View? child, int index, Android.Views.ViewGroup.LayoutParams? params, bool preventRequestLayout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AddViewInLayout(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params, bool preventRequestLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AddViewInLayout(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addViewInLayout", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;Z)Z", "GetAddViewInLayout_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
        <Parameter Name="preventRequestLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preventRequestLayout">if true, calling this method will not trigger a
        layout request on child</param>
        <param name="child">the view to add to the group</param>
        <param name="index">the index at which the child must be added or -1 to add last</param>
        <param name="params">the layout parameters to associate with the child</param>
        <summary>Adds a view during layout.</summary>
        <returns>true if the child was added, false otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#addViewInLayout(android.view.View,%20int,%20android.view.LayoutParams)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.addViewInLayout(android.view.View, int, android.view.LayoutParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AlwaysDrawnWithCacheEnabled">
      <MemberSignature Language="F#" Value="member this.AlwaysDrawnWithCacheEnabled : bool with get, set" Usage="Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
      <MemberSignature Language="C#" Value="public virtual bool AlwaysDrawnWithCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AlwaysDrawnWithCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAlwaysDrawnWithCacheEnabled", "()Z", "GetIsAlwaysDrawnWithCacheEnabledHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setAlwaysDrawnWithCacheEnabled", "(Z)V", "GetSetAlwaysDrawnWithCacheEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="always">true to always draw with the drawing cache, false otherwise</param>
        <summary>Indicates whether this ViewGroup will always try to draw its children using their
            drawing cache. -or- Indicates whether this ViewGroup will always try to draw its children using their
            drawing cache.</summary>
        <value>true if the animation cache is enabled, false otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isAlwaysDrawnWithCacheEnabled()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isAlwaysDrawnWithCacheEnabled()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setAlwaysDrawnWithCacheEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setAlwaysDrawnWithCacheEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheQuality" />
      </Docs>
    </Member>
    <Member MemberName="AnimationCacheEnabled">
      <MemberSignature Language="F#" Value="member this.AnimationCacheEnabled : bool with get, set" Usage="Android.Views.ViewGroup.AnimationCacheEnabled" />
      <MemberSignature Language="C#" Value="public virtual bool AnimationCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AnimationCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isAnimationCacheEnabled", "()Z", "GetIsAnimationCacheEnabledHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setAnimationCacheEnabled", "(Z)V", "GetSetAnimationCacheEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="enabled">true to enable the animation cache, false otherwise</param>
        <summary>Indicates whether the children's drawing cache is used during a layout
            animation. -or- Enables or disables the children's drawing cache during a layout animation.</summary>
        <value>true if the animation cache is enabled, false otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isAnimationCacheEnabled()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isAnimationCacheEnabled()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setAnimationCacheEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setAnimationCacheEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="AnimationEnd">
      <MemberSignature Language="F#" Value="member this.AnimationEnd : EventHandler&lt;Android.Views.Animations.Animation.AnimationEndEventArgs&gt; " Usage="member this.AnimationEnd : System.EventHandler&lt;Android.Views.Animations.Animation.AnimationEndEventArgs&gt; " />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationEndEventArgs&gt; AnimationEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationEndEventArgs&gt; AnimationEnd" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewGroup.AnimationEnd" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationEndEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationRepeat">
      <MemberSignature Language="F#" Value="member this.AnimationRepeat : EventHandler&lt;Android.Views.Animations.Animation.AnimationRepeatEventArgs&gt; " Usage="member this.AnimationRepeat : System.EventHandler&lt;Android.Views.Animations.Animation.AnimationRepeatEventArgs&gt; " />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationRepeatEventArgs&gt; AnimationRepeat;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationRepeatEventArgs&gt; AnimationRepeat" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewGroup.AnimationRepeat" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationRepeatEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationStart">
      <MemberSignature Language="F#" Value="member this.AnimationStart : EventHandler&lt;Android.Views.Animations.Animation.AnimationStartEventArgs&gt; " Usage="member this.AnimationStart : System.EventHandler&lt;Android.Views.Animations.Animation.AnimationStartEventArgs&gt; " />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationStartEventArgs&gt; AnimationStart;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationStartEventArgs&gt; AnimationStart" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewGroup.AnimationStart" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationStartEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachLayoutAnimationParameters">
      <MemberSignature Language="F#" Value="abstract member AttachLayoutAnimationParameters : Android.Views.View * Android.Views.ViewGroup.LayoutParams * int * int -&gt; unit&#xA;override this.AttachLayoutAnimationParameters : Android.Views.View * Android.Views.ViewGroup.LayoutParams * int * int -&gt; unit" Usage="viewGroup.AttachLayoutAnimationParameters (child, params, index, count)" />
      <MemberSignature Language="C#" Value="protected virtual void AttachLayoutAnimationParameters (Android.Views.View? child, Android.Views.ViewGroup.LayoutParams? params, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AttachLayoutAnimationParameters(class Android.Views.View child, class Android.Views.ViewGroup/LayoutParams params, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AttachLayoutAnimationParameters(Android.Views.View,Android.Views.ViewGroup.LayoutParams,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("attachLayoutAnimationParameters", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;II)V", "GetAttachLayoutAnimationParameters_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">the child to associate with animation parameters</param>
        <param name="params">the child's layout parameters which hold the animation
                   parameters</param>
        <param name="index">the index of the child in the view group</param>
        <param name="count">the number of children in the view group</param>
        <summary>Subclasses should override this method to set layout animation
            parameters on the supplied child.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#attachLayoutAnimationParameters(android.view.View,%20android.view.LayoutParams,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.attachLayoutAnimationParameters(android.view.View, android.view.LayoutParams, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AttachViewToParent">
      <MemberSignature Language="F#" Value="abstract member AttachViewToParent : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.AttachViewToParent : Android.Views.View * int * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="viewGroup.AttachViewToParent (child, index, params)" />
      <MemberSignature Language="C#" Value="protected virtual void AttachViewToParent (Android.Views.View? child, int index, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AttachViewToParent(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("attachViewToParent", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V", "GetAttachViewToParent_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the child to attach</param>
        <param name="index">the index at which the child should be attached</param>
        <param name="params">the layout parameters of the child</param>
        <summary>Attaches a view to this view group.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#attachViewToParent(android.view.View,%20int,%20android.view.LayoutParams)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.attachViewToParent(android.view.View, int, android.view.LayoutParams)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BringChildToFront">
      <MemberSignature Language="F#" Value="abstract member BringChildToFront : Android.Views.View -&gt; unit&#xA;override this.BringChildToFront : Android.Views.View -&gt; unit" Usage="viewGroup.BringChildToFront child" />
      <MemberSignature Language="C#" Value="public virtual void BringChildToFront (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringChildToFront(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.BringChildToFront(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.BringChildToFront(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child to bring to the top of the z order
</param>
        <summary>Change the z order of the child so it's on top of all other children.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanAnimate">
      <MemberSignature Language="F#" Value="abstract member CanAnimate : unit -&gt; bool&#xA;override this.CanAnimate : unit -&gt; bool" Usage="viewGroup.CanAnimate " />
      <MemberSignature Language="C#" Value="protected virtual bool CanAnimate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CanAnimate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.CanAnimate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canAnimate", "()Z", "GetCanAnimateHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the view group has the ability to animate its children
            after the first layout.</summary>
        <returns>true if the children can be animated, false otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#canAnimate()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.canAnimate()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckLayoutParams">
      <MemberSignature Language="F#" Value="abstract member CheckLayoutParams : Android.Views.ViewGroup.LayoutParams -&gt; bool&#xA;override this.CheckLayoutParams : Android.Views.ViewGroup.LayoutParams -&gt; bool" Usage="viewGroup.CheckLayoutParams p" />
      <MemberSignature Language="C#" Value="protected virtual bool CheckLayoutParams (Android.Views.ViewGroup.LayoutParams? p);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckLayoutParams(class Android.Views.ViewGroup/LayoutParams p) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.CheckLayoutParams(Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("checkLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)Z", "GetCheckLayoutParams_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildCount">
      <MemberSignature Language="F#" Value="member this.ChildCount : int" Usage="Android.Views.ViewGroup.ChildCount" />
      <MemberSignature Language="C#" Value="public virtual int ChildCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChildCount" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ChildCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getChildCount", "()I", "GetGetChildCountHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of children in the group.</summary>
        <value>a positive integer representing the number of children in
                    the group</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getChildCount()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getChildCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildDrawableStateChanged">
      <MemberSignature Language="F#" Value="abstract member ChildDrawableStateChanged : Android.Views.View -&gt; unit&#xA;override this.ChildDrawableStateChanged : Android.Views.View -&gt; unit" Usage="viewGroup.ChildDrawableStateChanged child" />
      <MemberSignature Language="C#" Value="public virtual void ChildDrawableStateChanged (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildDrawableStateChanged(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ChildDrawableStateChanged(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.ChildDrawableStateChanged(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child whose drawable state has changed.
</param>
        <summary>If <c>#addStatesFromChildren</c> is true, refreshes this group's
            drawable state (to include the states from its children).</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#childDrawableStateChanged(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.childDrawableStateChanged(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildHasTransientStateChanged">
      <MemberSignature Language="F#" Value="abstract member ChildHasTransientStateChanged : Android.Views.View * bool -&gt; unit&#xA;override this.ChildHasTransientStateChanged : Android.Views.View * bool -&gt; unit" Usage="viewGroup.ChildHasTransientStateChanged (child, childHasTransientState)" />
      <MemberSignature Language="C#" Value="public virtual void ChildHasTransientStateChanged (Android.Views.View? child, bool childHasTransientState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildHasTransientStateChanged(class Android.Views.View child, bool childHasTransientState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ChildHasTransientStateChanged(Android.Views.View,System.Boolean)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.ChildHasTransientStateChanged(Android.Views.View,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="childHasTransientState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Child view whose state has changed</param>
        <param name="childHasTransientState">true if this child has transient state
</param>
        <summary>Called when a child view has changed whether or not it is tracking transient state.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#childHasTransientStateChanged(android.view.View,%20boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.childHasTransientStateChanged(android.view.View, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildrenDrawingOrderEnabled">
      <MemberSignature Language="F#" Value="member this.ChildrenDrawingOrderEnabled : bool with get, set" Usage="Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
      <MemberSignature Language="C#" Value="protected virtual bool ChildrenDrawingOrderEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildrenDrawingOrderEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isChildrenDrawingOrderEnabled", "()Z", "GetIsChildrenDrawingOrderEnabledHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setChildrenDrawingOrderEnabled", "(Z)V", "GetSetChildrenDrawingOrderEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="enabled">true if the order of the children when drawing is determined by
                   <c>#getChildDrawingOrder(int, int)</c>, false otherwise</param>
        <summary>Indicates whether the ViewGroup is drawing its children in the order defined by
            <c>#getChildDrawingOrder(int, int)</c>. -or- Tells the ViewGroup whether to draw its children in the order defined by the method
            <c>#getChildDrawingOrder(int, int)</c>.</summary>
        <value>true if children drawing order is defined by <c>#getChildDrawingOrder(int, int)</c>,
                    false otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isChildrenDrawingOrderEnabled()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isChildrenDrawingOrderEnabled()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setChildrenDrawingOrderEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setChildrenDrawingOrderEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 7" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ChildrenDrawnWithCacheEnabled">
      <MemberSignature Language="F#" Value="member this.ChildrenDrawnWithCacheEnabled : bool with get, set" Usage="Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
      <MemberSignature Language="C#" Value="protected virtual bool ChildrenDrawnWithCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildrenDrawnWithCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isChildrenDrawnWithCacheEnabled", "()Z", "GetIsChildrenDrawnWithCacheEnabledHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setChildrenDrawnWithCacheEnabled", "(Z)V", "GetSetChildrenDrawnWithCacheEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="enabled">true if children should be drawn with their cache, false otherwise</param>
        <summary>Indicates whether the ViewGroup is currently drawing its children using
            their drawing cache. -or- Tells the ViewGroup to draw its children using their drawing cache.</summary>
        <value>true if children should be drawn with their cache, false otherwise</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isChildrenDrawnWithCacheEnabled()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isChildrenDrawnWithCacheEnabled()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setChildrenDrawnWithCacheEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setChildrenDrawnWithCacheEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="ChildViewAdded">
      <MemberSignature Language="F#" Value="member this.ChildViewAdded : EventHandler&lt;Android.Views.ViewGroup.ChildViewAddedEventArgs&gt; " Usage="member this.ChildViewAdded : System.EventHandler&lt;Android.Views.ViewGroup.ChildViewAddedEventArgs&gt; " />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewGroup.ChildViewAddedEventArgs&gt; ChildViewAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewGroup/ChildViewAddedEventArgs&gt; ChildViewAdded" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewGroup.ChildViewAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewGroup+ChildViewAddedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildViewRemoved">
      <MemberSignature Language="F#" Value="member this.ChildViewRemoved : EventHandler&lt;Android.Views.ViewGroup.ChildViewRemovedEventArgs&gt; " Usage="member this.ChildViewRemoved : System.EventHandler&lt;Android.Views.ViewGroup.ChildViewRemovedEventArgs&gt; " />
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewGroup.ChildViewRemovedEventArgs&gt; ChildViewRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewGroup/ChildViewRemovedEventArgs&gt; ChildViewRemoved" />
      <MemberSignature Language="DocId" Value="E:Android.Views.ViewGroup.ChildViewRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewGroup+ChildViewRemovedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanupLayoutState">
      <MemberSignature Language="F#" Value="abstract member CleanupLayoutState : Android.Views.View -&gt; unit&#xA;override this.CleanupLayoutState : Android.Views.View -&gt; unit" Usage="viewGroup.CleanupLayoutState child" />
      <MemberSignature Language="C#" Value="protected virtual void CleanupLayoutState (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CleanupLayoutState(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.CleanupLayoutState(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cleanupLayoutState", "(Landroid/view/View;)V", "GetCleanupLayoutState_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child on which to perform the cleanup</param>
        <summary>Prevents the specified child to be laid out during the next layout pass.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#cleanupLayoutState(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.cleanupLayoutState(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearChildFocus">
      <MemberSignature Language="F#" Value="abstract member ClearChildFocus : Android.Views.View -&gt; unit&#xA;override this.ClearChildFocus : Android.Views.View -&gt; unit" Usage="viewGroup.ClearChildFocus child" />
      <MemberSignature Language="C#" Value="public virtual void ClearChildFocus (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearChildFocus(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ClearChildFocus(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.ClearChildFocus(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The view that is giving up focus
</param>
        <summary>Called when a child of this parent is giving up focus
</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearDisappearingChildren">
      <MemberSignature Language="F#" Value="abstract member ClearDisappearingChildren : unit -&gt; unit&#xA;override this.ClearDisappearingChildren : unit -&gt; unit" Usage="viewGroup.ClearDisappearingChildren " />
      <MemberSignature Language="C#" Value="public virtual void ClearDisappearingChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearDisappearingChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ClearDisappearingChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearDisappearingChildren", "()V", "GetClearDisappearingChildrenHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes any pending animations for views that have been removed.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#clearDisappearingChildren()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.clearDisappearingChildren()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipChildren">
      <MemberSignature Language="F#" Value="member this.ClipChildren : bool" Usage="Android.Views.ViewGroup.ClipChildren" />
      <MemberSignature Language="C#" Value="public virtual bool ClipChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipChildren" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ClipChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getClipChildren", "()Z", "GetGetClipChildrenHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this group's children are clipped to their bounds before drawing.</summary>
        <value>True if the group's children will be clipped to their bounds,
            false otherwise.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getClipChildren()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getClipChildren()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <altmember cref="M:Android.Views.ViewGroup.SetClipChildren(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ClipToPadding">
      <MemberSignature Language="F#" Value="member this.ClipToPadding : bool" Usage="Android.Views.ViewGroup.ClipToPadding" />
      <MemberSignature Language="C#" Value="public virtual bool ClipToPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToPadding" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ClipToPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getClipToPadding", "()Z", "GetGetClipToPaddingHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this ViewGroup will clip its children to its padding, and resize (but
            not clip) any EdgeEffect to the padded region, if padding is present.</summary>
        <value>true if this ViewGroup clips children to its padding and resizes (but doesn't
                    clip) any EdgeEffect to the padded region, false otherwise.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getClipToPadding()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getClipToPadding()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToPaddingMask">
      <MemberSignature Language="F#" Value="val mutable ClipToPaddingMask : int" Usage="Android.Views.ViewGroup.ClipToPaddingMask" />
      <MemberSignature Language="C#" Value="protected const int ClipToPaddingMask = 34;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal int32 ClipToPaddingMask = (34)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.ViewGroup.ClipToPaddingMask" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.IViewParent._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.IViewParent.cb_onDescendantInvalidated_Landroid_view_View_Landroid_view_View_</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("CLIP_TO_PADDING_MASK")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>34</MemberValue>
      <Docs>
        <summary>We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL
            are set at the same time.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#CLIP_TO_PADDING_MASK" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.CLIP_TO_PADDING_MASK</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="F#" Value="abstract member Debug : int -&gt; unit&#xA;override this.Debug : int -&gt; unit" Usage="viewGroup.Debug depth" />
      <MemberSignature Language="C#" Value="protected virtual void Debug (int depth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Debug(int32 depth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.Debug(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("debug", "(I)V", "GetDebug_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="depth">the indentation level</param>
        <summary>Prints information about this view in the log output, with the tag
 <see cref="F:Android.Views.View.ViewLogTag" />.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DescendantFocusability">
      <MemberSignature Language="F#" Value="member this.DescendantFocusability : Android.Views.DescendantFocusability with get, set" Usage="Android.Views.ViewGroup.DescendantFocusability" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.DescendantFocusability DescendantFocusability { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.DescendantFocusability DescendantFocusability" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.DescendantFocusability" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDescendantFocusability", "()I", "GetGetDescendantFocusabilityHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setDescendantFocusability", "(I)V", "GetSetDescendantFocusability_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DescendantFocusability</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="focusability">one of <c>#FOCUS_BEFORE_DESCENDANTS</c>, <c>#FOCUS_AFTER_DESCENDANTS</c>,
              <c>#FOCUS_BLOCK_DESCENDANTS</c>.</param>
        <summary>Gets the descendant focusability of this view group. -or- Set the descendant focusability of this view group.</summary>
        <value>one of <c>#FOCUS_BEFORE_DESCENDANTS</c>, <c>#FOCUS_AFTER_DESCENDANTS</c>,
              <c>#FOCUS_BLOCK_DESCENDANTS</c>.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getDescendantFocusability()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getDescendantFocusability()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setDescendantFocusability(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setDescendantFocusability(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DetachAllViewsFromParent">
      <MemberSignature Language="F#" Value="abstract member DetachAllViewsFromParent : unit -&gt; unit&#xA;override this.DetachAllViewsFromParent : unit -&gt; unit" Usage="viewGroup.DetachAllViewsFromParent " />
      <MemberSignature Language="C#" Value="protected virtual void DetachAllViewsFromParent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachAllViewsFromParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("detachAllViewsFromParent", "()V", "GetDetachAllViewsFromParentHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detaches all views from the parent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#detachAllViewsFromParent()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.detachAllViewsFromParent()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewFromParent">
      <MemberSignature Language="F#" Value="abstract member DetachViewFromParent : Android.Views.View -&gt; unit&#xA;override this.DetachViewFromParent : Android.Views.View -&gt; unit" Usage="viewGroup.DetachViewFromParent child" />
      <MemberSignature Language="C#" Value="protected virtual void DetachViewFromParent (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewFromParent(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("detachViewFromParent", "(Landroid/view/View;)V", "GetDetachViewFromParent_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child to detach</param>
        <param name="index">the index of the child to detach</param>
        <summary>Detaches a view from its parent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#detachViewFromParent(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.detachViewFromParent(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewFromParent">
      <MemberSignature Language="F#" Value="abstract member DetachViewFromParent : int -&gt; unit&#xA;override this.DetachViewFromParent : int -&gt; unit" Usage="viewGroup.DetachViewFromParent index" />
      <MemberSignature Language="C#" Value="protected virtual void DetachViewFromParent (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewFromParent(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("detachViewFromParent", "(I)V", "GetDetachViewFromParent_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the child to detach</param>
        <summary>Detaches a view from its parent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#detachViewFromParent(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.detachViewFromParent(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewsFromParent">
      <MemberSignature Language="F#" Value="abstract member DetachViewsFromParent : int * int -&gt; unit&#xA;override this.DetachViewsFromParent : int * int -&gt; unit" Usage="viewGroup.DetachViewsFromParent (start, count)" />
      <MemberSignature Language="C#" Value="protected virtual void DetachViewsFromParent (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewsFromParent(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("detachViewsFromParent", "(II)V", "GetDetachViewsFromParent_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the first index of the childrend range to detach</param>
        <param name="count">the number of children to detach</param>
        <summary>Detaches a range of views from their parents.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#detachViewsFromParent(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.detachViewsFromParent(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchFreezeSelfOnly">
      <MemberSignature Language="F#" Value="abstract member DispatchFreezeSelfOnly : Android.Util.SparseArray -&gt; unit&#xA;override this.DispatchFreezeSelfOnly : Android.Util.SparseArray -&gt; unit" Usage="viewGroup.DispatchFreezeSelfOnly container" />
      <MemberSignature Language="C#" Value="protected virtual void DispatchFreezeSelfOnly (Android.Util.SparseArray? container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchFreezeSelfOnly(class Android.Util.SparseArray container) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DispatchFreezeSelfOnly(Android.Util.SparseArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchFreezeSelfOnly", "(Landroid/util/SparseArray;)V", "GetDispatchFreezeSelfOnly_Landroid_util_SparseArray_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchSetActivated">
      <MemberSignature Language="F#" Value="override this.DispatchSetActivated : bool -&gt; unit" Usage="viewGroup.DispatchSetActivated activated" />
      <MemberSignature Language="C#" Value="public virtual void DispatchSetActivated (bool activated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchSetActivated(bool activated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DispatchSetActivated(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchSetActivated", "(Z)V", "GetDispatchSetActivated_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="activated">The new activated state
</param>
        <summary>Dispatch setActivated to all of this View's children.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSetSelected">
      <MemberSignature Language="F#" Value="override this.DispatchSetSelected : bool -&gt; unit" Usage="viewGroup.DispatchSetSelected selected" />
      <MemberSignature Language="C#" Value="public virtual void DispatchSetSelected (bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchSetSelected(bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DispatchSetSelected(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchSetSelected", "(Z)V", "GetDispatchSetSelected_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selected">The new selected state
</param>
        <summary>Dispatch setSelected to all of this View's children.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchThawSelfOnly">
      <MemberSignature Language="F#" Value="abstract member DispatchThawSelfOnly : Android.Util.SparseArray -&gt; unit&#xA;override this.DispatchThawSelfOnly : Android.Util.SparseArray -&gt; unit" Usage="viewGroup.DispatchThawSelfOnly container" />
      <MemberSignature Language="C#" Value="protected virtual void DispatchThawSelfOnly (Android.Util.SparseArray? container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchThawSelfOnly(class Android.Util.SparseArray container) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DispatchThawSelfOnly(Android.Util.SparseArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("dispatchThawSelfOnly", "(Landroid/util/SparseArray;)V", "GetDispatchThawSelfOnly_Landroid_util_SparseArray_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">the container</param>
        <summary>Perform dispatching of a <c>#restoreHierarchyState(android.util.SparseArray)</c>
            to only this view, not to its children.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#dispatchThawSelfOnly(android.util.SparseArray)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.dispatchThawSelfOnly(android.util.SparseArray)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawChild">
      <MemberSignature Language="F#" Value="abstract member DrawChild : Android.Graphics.Canvas * Android.Views.View * int64 -&gt; bool&#xA;override this.DrawChild : Android.Graphics.Canvas * Android.Views.View * int64 -&gt; bool" Usage="viewGroup.DrawChild (canvas, child, drawingTime)" />
      <MemberSignature Language="C#" Value="protected virtual bool DrawChild (Android.Graphics.Canvas? canvas, Android.Views.View? child, long drawingTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DrawChild(class Android.Graphics.Canvas canvas, class Android.Views.View child, int64 drawingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.DrawChild(Android.Graphics.Canvas,Android.Views.View,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("drawChild", "(Landroid/graphics/Canvas;Landroid/view/View;J)Z", "GetDrawChild_Landroid_graphics_Canvas_Landroid_view_View_JHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="drawingTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="canvas">The canvas on which to draw the child</param>
        <param name="child">Who to draw</param>
        <param name="drawingTime">The time at which draw is occurring</param>
        <summary>Draw one child of this View Group.</summary>
        <returns>True if an invalidate() was issued</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#drawChild(android.graphics.Canvas,%20android.view.View,%20long)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.drawChild(android.graphics.Canvas, android.view.View, long)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EndViewTransition">
      <MemberSignature Language="F#" Value="abstract member EndViewTransition : Android.Views.View -&gt; unit&#xA;override this.EndViewTransition : Android.Views.View -&gt; unit" Usage="viewGroup.EndViewTransition view" />
      <MemberSignature Language="C#" Value="public virtual void EndViewTransition (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndViewTransition(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.EndViewTransition(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("endViewTransition", "(Landroid/view/View;)V", "GetEndViewTransition_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>This method should always be called following an earlier call to
            <c>#startViewTransition(View)</c>.</summary>
        <returns>view The View object that has been removed but is being kept around in the visible
            hierarchy by an earlier call to <c>#startViewTransition(View)</c>.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#endViewTransition(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.endViewTransition(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="FocusableViewAvailable">
      <MemberSignature Language="F#" Value="abstract member FocusableViewAvailable : Android.Views.View -&gt; unit&#xA;override this.FocusableViewAvailable : Android.Views.View -&gt; unit" Usage="viewGroup.FocusableViewAvailable v" />
      <MemberSignature Language="C#" Value="public virtual void FocusableViewAvailable (Android.Views.View? v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FocusableViewAvailable(class Android.Views.View v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.FocusableViewAvailable(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.FocusableViewAvailable(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="v">The view that has become newly focusable
</param>
        <summary>Tells the parent that a new focusable view has become available.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusedChild">
      <MemberSignature Language="F#" Value="member this.FocusedChild : Android.Views.View" Usage="Android.Views.ViewGroup.FocusedChild" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? FocusedChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View FocusedChild" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.FocusedChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getFocusedChild", "()Landroid/view/View;", "GetGetFocusedChildHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the focused child of this view, if any.</summary>
        <value>the focused child or null.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getFocusedChild()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getFocusedChild()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="F#" Value="override this.FocusSearch : Android.Views.View * Android.Views.FocusSearchDirection -&gt; Android.Views.View" Usage="viewGroup.FocusSearch (focused, direction)" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? FocusSearch (Android.Views.View? focused, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(class Android.Views.View focused, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focused" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="focused">The view that currently has focus</param>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and
                   FOCUS_RIGHT, or 0 for not applicable.</param>
        <summary>Find the nearest view in the specified direction that wants to take
            focus.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#focusSearch(android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.focusSearch(android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GatherTransparentRegion">
      <MemberSignature Language="F#" Value="abstract member GatherTransparentRegion : Android.Graphics.Region -&gt; bool&#xA;override this.GatherTransparentRegion : Android.Graphics.Region -&gt; bool" Usage="viewGroup.GatherTransparentRegion region" />
      <MemberSignature Language="C#" Value="public override bool GatherTransparentRegion (Android.Graphics.Region? region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GatherTransparentRegion(class Android.Graphics.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GatherTransparentRegion(Android.Graphics.Region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("gatherTransparentRegion", "(Landroid/graphics/Region;)Z", "GetGatherTransparentRegion_Landroid_graphics_Region_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Android.Graphics.Region" />
      </Parameters>
      <Docs>
        <param name="region">The transparent region for this ViewAncestor (window).</param>
        <summary>This is used by the RootView to perform an optimization when
 the view hierarchy contains one or several SurfaceView.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDefaultLayoutParams">
      <MemberSignature Language="F#" Value="abstract member GenerateDefaultLayoutParams : unit -&gt; Android.Views.ViewGroup.LayoutParams&#xA;override this.GenerateDefaultLayoutParams : unit -&gt; Android.Views.ViewGroup.LayoutParams" Usage="viewGroup.GenerateDefaultLayoutParams " />
      <MemberSignature Language="C#" Value="protected virtual Android.Views.ViewGroup.LayoutParams? GenerateDefaultLayoutParams ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateDefaultLayoutParams() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GenerateDefaultLayoutParams" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("generateDefaultLayoutParams", "()Landroid/view/ViewGroup$LayoutParams;", "GetGenerateDefaultLayoutParamsHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a set of default layout parameters.</summary>
        <returns>a set of default layout parameters or null</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#generateDefaultLayoutParams()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.generateDefaultLayoutParams()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLayoutParams">
      <MemberSignature Language="F#" Value="abstract member GenerateLayoutParams : Android.Util.IAttributeSet -&gt; Android.Views.ViewGroup.LayoutParams&#xA;override this.GenerateLayoutParams : Android.Util.IAttributeSet -&gt; Android.Views.ViewGroup.LayoutParams" Usage="viewGroup.GenerateLayoutParams attrs" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewGroup.LayoutParams? GenerateLayoutParams (Android.Util.IAttributeSet? attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateLayoutParams(class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GenerateLayoutParams(Android.Util.IAttributeSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("generateLayoutParams", "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;", "GetGenerateLayoutParams_Landroid_util_AttributeSet_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="attrs">the attributes to build the layout parameters from</param>
        <summary>Returns a new set of layout parameters based on the supplied attributes set.</summary>
        <returns>an instance of <c>android.view.ViewGroup.LayoutParams</c> or one
                    of its descendants</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#generateLayoutParams(android.util.AttributeSet)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.generateLayoutParams(android.util.AttributeSet)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLayoutParams">
      <MemberSignature Language="F#" Value="abstract member GenerateLayoutParams : Android.Views.ViewGroup.LayoutParams -&gt; Android.Views.ViewGroup.LayoutParams&#xA;override this.GenerateLayoutParams : Android.Views.ViewGroup.LayoutParams -&gt; Android.Views.ViewGroup.LayoutParams" Usage="viewGroup.GenerateLayoutParams p" />
      <MemberSignature Language="C#" Value="protected virtual Android.Views.ViewGroup.LayoutParams? GenerateLayoutParams (Android.Views.ViewGroup.LayoutParams? p);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateLayoutParams(class Android.Views.ViewGroup/LayoutParams p) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GenerateLayoutParams(Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("generateLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)Landroid/view/ViewGroup$LayoutParams;", "GetGenerateLayoutParams_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="p">The layout parameters to convert into a suitable set of layout parameters
          for this ViewGroup.</param>
        <param name="attrs">the attributes to build the layout parameters from</param>
        <summary>Returns a new set of layout parameters based on the supplied attributes set.</summary>
        <returns>an instance of <c>android.view.ViewGroup.LayoutParams</c> or one
                    of its descendants</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#generateLayoutParams(android.util.AttributeSet)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.generateLayoutParams(android.util.AttributeSet)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAt">
      <MemberSignature Language="F#" Value="abstract member GetChildAt : int -&gt; Android.Views.View&#xA;override this.GetChildAt : int -&gt; Android.Views.View" Usage="viewGroup.GetChildAt index" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.View? GetChildAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View GetChildAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildAt", "(I)Landroid/view/View;", "GetGetChildAt_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the position at which to get the view from</param>
        <summary>Returns the view at the specified position in the group.</summary>
        <returns>the view at the specified position or null if the position
                    does not exist within the group</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getChildAt(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getChildAt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildDrawingOrder">
      <MemberSignature Language="C#" Value="public int GetChildDrawingOrder (int drawingPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetChildDrawingOrder(int32 drawingPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildDrawingOrder", "(I)I", "", ApiSince=29)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="drawingPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildDrawingOrder">
      <MemberSignature Language="F#" Value="abstract member GetChildDrawingOrder : int * int -&gt; int&#xA;override this.GetChildDrawingOrder : int * int -&gt; int" Usage="viewGroup.GetChildDrawingOrder (childCount, i)" />
      <MemberSignature Language="C#" Value="protected virtual int GetChildDrawingOrder (int childCount, int drawingPosition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetChildDrawingOrder(int32 childCount, int32 drawingPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildDrawingOrder", "(II)I", "GetGetChildDrawingOrder_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childCount" Type="System.Int32" />
        <Parameter Name="drawingPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="childCount">To be added.</param>
        <param name="drawingPosition">To be added.</param>
        <summary>Returns the index of the child to draw for this iteration.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
      </Docs>
    </Member>
    <Member MemberName="GetChildMeasureSpec">
      <MemberSignature Language="F#" Value="static member GetChildMeasureSpec : int * int * int -&gt; int" Usage="Android.Views.ViewGroup.GetChildMeasureSpec (spec, padding, childDimension)" />
      <MemberSignature Language="C#" Value="public static int GetChildMeasureSpec (int spec, int padding, int childDimension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetChildMeasureSpec(int32 spec, int32 padding, int32 childDimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildMeasureSpec(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildMeasureSpec", "(III)I", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.Int32" />
        <Parameter Name="padding" Type="System.Int32" />
        <Parameter Name="childDimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="spec">The requirements for this view</param>
        <param name="padding">The padding of this view for the current dimension and
                   margins, if applicable</param>
        <param name="childDimension">How big the child wants to be in the current
                   dimension</param>
        <summary>Does the hard part of measureChildren: figuring out the MeasureSpec to
            pass to a particular child.</summary>
        <returns>a MeasureSpec integer for the child</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getChildMeasureSpec(int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getChildMeasureSpec(int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildStaticTransformation">
      <MemberSignature Language="F#" Value="abstract member GetChildStaticTransformation : Android.Views.View * Android.Views.Animations.Transformation -&gt; bool&#xA;override this.GetChildStaticTransformation : Android.Views.View * Android.Views.Animations.Transformation -&gt; bool" Usage="viewGroup.GetChildStaticTransformation (child, t)" />
      <MemberSignature Language="C#" Value="protected virtual bool GetChildStaticTransformation (Android.Views.View? child, Android.Views.Animations.Transformation? t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetChildStaticTransformation(class Android.Views.View child, class Android.Views.Animations.Transformation t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View,Android.Views.Animations.Transformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildStaticTransformation", "(Landroid/view/View;Landroid/view/animation/Transformation;)Z", "GetGetChildStaticTransformation_Landroid_view_View_Landroid_view_animation_Transformation_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="t" Type="Android.Views.Animations.Transformation" />
      </Parameters>
      <Docs>
        <param name="child">The child view whose static transform is being requested</param>
        <param name="t">The Transformation which will hold the result</param>
        <summary>Sets  &lt;code&gt;t&lt;/code&gt; to be the static transformation of the child, if set, returning a
            boolean to indicate whether a static transform was set.</summary>
        <returns>true if the transformation was set, false otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getChildStaticTransformation(android.view.View,%20android.view.animation.Transformation)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getChildStaticTransformation(android.view.View, android.view.animation.Transformation)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.SetStaticTransformationsEnabled(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetChildVisibleRect">
      <MemberSignature Language="F#" Value="abstract member GetChildVisibleRect : Android.Views.View * Android.Graphics.Rect * Android.Graphics.Point -&gt; bool&#xA;override this.GetChildVisibleRect : Android.Views.View * Android.Graphics.Rect * Android.Graphics.Point -&gt; bool" Usage="viewGroup.GetChildVisibleRect (child, r, offset)" />
      <MemberSignature Language="C#" Value="public virtual bool GetChildVisibleRect (Android.Views.View? child, Android.Graphics.Rect? r, Android.Graphics.Point? offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetChildVisibleRect(class Android.Views.View child, class Android.Graphics.Rect r, class Android.Graphics.Point offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="offset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="child">A child View, whose rectangular visible region we want to compute</param>
        <param name="r">The input rectangle, defined in the child coordinate system. Will be overwritten to
 contain the resulting visible rectangle, expressed in global (root) coordinates</param>
        <param name="offset">The input coordinates of a point, defined in the child coordinate system.
 As with the <c>r</c> parameter, this will be overwritten to contain the global (root)
 coordinates of that point.
 A <c>null</c> value is valid (in case you are not interested in this result)</param>
        <summary>Compute the visible part of a rectangular region defined in terms of a child view's
 coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfChild">
      <MemberSignature Language="F#" Value="abstract member IndexOfChild : Android.Views.View -&gt; int&#xA;override this.IndexOfChild : Android.Views.View -&gt; int" Usage="viewGroup.IndexOfChild child" />
      <MemberSignature Language="C#" Value="public virtual int IndexOfChild (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfChild(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.IndexOfChild(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("indexOfChild", "(Landroid/view/View;)I", "GetIndexOfChild_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view for which to get the position</param>
        <summary>Returns the position in the group of the specified child view.</summary>
        <returns>a positive integer representing the position of the view in the
                    group, or -1 if the view does not exist in the group</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#indexOfChild(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.indexOfChild(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChild">
      <MemberSignature Language="F#" Value="abstract member InvalidateChild : Android.Views.View * Android.Graphics.Rect -&gt; unit&#xA;override this.InvalidateChild : Android.Views.View * Android.Graphics.Rect -&gt; unit" Usage="viewGroup.InvalidateChild (child, dirty)" />
      <MemberSignature Language="C#" Value="public void InvalidateChild (Android.Views.View? child, Android.Graphics.Rect? dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateChild(class Android.Views.View child, class Android.Graphics.Rect dirty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.InvalidateChild(Android.Views.View,Android.Graphics.Rect)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.InvalidateChild(Android.Views.View,Android.Graphics.Rect)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="child">The child which is dirty</param>
        <param name="dirty">The area within the child that is invalid
</param>
        <summary>Don't call or override this method.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#invalidateChild(android.view.View,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.invalidateChild(android.view.View, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChildInParent">
      <MemberSignature Language="F#" Value="abstract member InvalidateChildInParent : int[] * Android.Graphics.Rect -&gt; Android.Views.IViewParent&#xA;override this.InvalidateChildInParent : int[] * Android.Graphics.Rect -&gt; Android.Views.IViewParent" Usage="viewGroup.InvalidateChildInParent (location, dirty)" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.IViewParent? InvalidateChildInParent (int[]? location, Android.Graphics.Rect? dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.IViewParent InvalidateChildInParent(int32[] location, class Android.Graphics.Rect dirty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="location">An array of 2 ints containing the left and top
        coordinates of the child to invalidate</param>
        <param name="dirty">The area within the child that is invalid</param>
        <summary>Don't call or override this method.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#invalidateChildInParent(int[],%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.invalidateChildInParent(int[], android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSuppressed">
      <MemberSignature Language="C#" Value="public virtual bool IsLayoutSuppressed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSuppressed" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.IsLayoutSuppressed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLayoutSuppressed", "()Z", "GetIsLayoutSuppressedHandler", ApiSince=29)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether layout calls on this container are currently being
            suppressed, due to an earlier call to <c>#suppressLayout(boolean)</c>.</summary>
        <value>true if layout calls are currently suppressed, false otherwise.</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isLayoutSuppressed()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isLayoutSuppressed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Views.ViewGroup.JniPeerMembers" />
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Java.Interop.IJavaPeerable.JniPeerMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="F#" Value="override this.Layout : int * int * int * int -&gt; unit" Usage="viewGroup.Layout (l, t, r, b)" />
      <MemberSignature Language="C#" Value="public override sealed void Layout (int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Layout(int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.Layout(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("layout", "(IIII)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="l">Left position, relative to parent</param>
        <param name="t">Top position, relative to parent</param>
        <param name="r">Right position, relative to parent</param>
        <param name="b">Bottom position, relative to parent
</param>
        <summary tool="true">Assign a size and position to a view and all of its
 descendants

 </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutAnimation">
      <MemberSignature Language="F#" Value="member this.LayoutAnimation : Android.Views.Animations.LayoutAnimationController with get, set" Usage="Android.Views.ViewGroup.LayoutAnimation" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.Animations.LayoutAnimationController? LayoutAnimation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Animations.LayoutAnimationController LayoutAnimation" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.LayoutAnimation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutAnimation", "()Landroid/view/animation/LayoutAnimationController;", "GetGetLayoutAnimationHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLayoutAnimation", "(Landroid/view/animation/LayoutAnimationController;)V", "GetSetLayoutAnimation_Landroid_view_animation_LayoutAnimationController_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Animations.LayoutAnimationController</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="controller">the animation controller</param>
        <summary>Returns the layout animation controller used to animate the group's
            children. -or- Sets the layout animation controller used to animate the group's
            children after the first layout.</summary>
        <value>the current animation controller</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getLayoutAnimation()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getLayoutAnimation()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setLayoutAnimation(android.view.animation.LayoutAnimationController)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setLayoutAnimation(android.view.animation.LayoutAnimationController)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutAnimationListener">
      <MemberSignature Language="F#" Value="member this.LayoutAnimationListener : Android.Views.Animations.Animation.IAnimationListener with get, set" Usage="Android.Views.ViewGroup.LayoutAnimationListener" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.Animations.Animation.IAnimationListener? LayoutAnimationListener { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Animations.Animation/IAnimationListener LayoutAnimationListener" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.LayoutAnimationListener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutAnimationListener", "()Landroid/view/animation/Animation$AnimationListener;", "GetGetLayoutAnimationListenerHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLayoutAnimationListener", "(Landroid/view/animation/Animation$AnimationListener;)V", "GetSetLayoutAnimationListener_Landroid_view_animation_Animation_AnimationListener_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Animations.Animation+IAnimationListener</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="animationListener">the layout animation listener</param>
        <summary>Returns the animation listener to which layout animation events are
            sent. -or- Specifies the animation listener to which layout animation events must
            be sent.</summary>
        <value>an <c>android.view.animation.Animation.AnimationListener</c></value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getLayoutAnimationListener()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getLayoutAnimationListener()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setLayoutAnimationListener(android.view.animation.AnimationListener)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setLayoutAnimationListener(android.view.animation.AnimationListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutMode">
      <MemberSignature Language="F#" Value="member this.LayoutMode : Android.Views.ViewLayoutMode with get, set" Usage="Android.Views.ViewGroup.LayoutMode" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewLayoutMode LayoutMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ViewLayoutMode LayoutMode" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.LayoutMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutMode", "()I", "GetGetLayoutModeHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLayoutMode", "(I)V", "GetSetLayoutMode_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="layoutMode">the layout mode to use during layout operations</param>
        <summary>Returns the basis of alignment during layout operations on this ViewGroup:
            either <c>#LAYOUT_MODE_CLIP_BOUNDS</c> or <c>#LAYOUT_MODE_OPTICAL_BOUNDS</c>. -or- Sets the basis of alignment during the layout of this ViewGroup.</summary>
        <value>the layout mode to use during layout operations</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getLayoutMode()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getLayoutMode()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setLayoutMode(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setLayoutMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
        <altmember cref="P:Android.Views.ViewGroup.LayoutMode" />
        <altmember cref="P:Android.Views.ViewGroup.LayoutMode" />
      </Docs>
    </Member>
    <Member MemberName="LayoutModeClipBounds">
      <MemberSignature Language="F#" Value="val mutable LayoutModeClipBounds : Android.Views.ViewLayoutMode" Usage="Android.Views.ViewGroup.LayoutModeClipBounds" />
      <MemberSignature Language="C#" Value="public const Android.Views.ViewLayoutMode LayoutModeClipBounds = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ViewLayoutMode LayoutModeClipBounds = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.ViewGroup.LayoutModeClipBounds" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.IViewParent._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.IViewParent.cb_onDescendantInvalidated_Landroid_view_View_Landroid_view_View_</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LAYOUT_MODE_CLIP_BOUNDS")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Views.ViewLayoutMode enum directly instead of this field.", true)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>This constant is a <c>#setLayoutMode(int) layoutMode</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#LAYOUT_MODE_CLIP_BOUNDS" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.LAYOUT_MODE_CLIP_BOUNDS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="LayoutModeOpticalBounds">
      <MemberSignature Language="F#" Value="val mutable LayoutModeOpticalBounds : Android.Views.ViewLayoutMode" Usage="Android.Views.ViewGroup.LayoutModeOpticalBounds" />
      <MemberSignature Language="C#" Value="public const Android.Views.ViewLayoutMode LayoutModeOpticalBounds = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ViewLayoutMode LayoutModeOpticalBounds = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Views.ViewGroup.LayoutModeOpticalBounds" />
      <MemberType>Field</MemberType>
      <Implements>
        <InterfaceMember>F:Android.Views.IViewParent._members</InterfaceMember>
        <InterfaceMember>F:Android.Views.IViewParent.cb_onDescendantInvalidated_Landroid_view_View_Landroid_view_View_</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LAYOUT_MODE_OPTICAL_BOUNDS")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Views.ViewLayoutMode enum directly instead of this field.", true)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This constant is a <c>#setLayoutMode(int) layoutMode</c>.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#LAYOUT_MODE_OPTICAL_BOUNDS" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="LayoutTransition">
      <MemberSignature Language="F#" Value="member this.LayoutTransition : Android.Animation.LayoutTransition with get, set" Usage="Android.Views.ViewGroup.LayoutTransition" />
      <MemberSignature Language="C#" Value="public virtual Android.Animation.LayoutTransition? LayoutTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Animation.LayoutTransition LayoutTransition" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.LayoutTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutTransition", "()Landroid/animation/LayoutTransition;", "GetGetLayoutTransitionHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setLayoutTransition", "(Landroid/animation/LayoutTransition;)V", "GetSetLayoutTransition_Landroid_animation_LayoutTransition_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransition</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="transition">The LayoutTransition object that will animated changes in layout. A value
            of &lt;code&gt;null&lt;/code&gt; means no transition will run on layout changes.</param>
        <summary>Gets the LayoutTransition object for this ViewGroup. -or- Sets the LayoutTransition object for this ViewGroup.</summary>
        <value>LayoutTranstion The LayoutTransition object that will animated changes in layout.
            A value of &lt;code&gt;null&lt;/code&gt; means no transition will run on layout changes.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getLayoutTransition()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getLayoutTransition()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setLayoutTransition(android.animation.LayoutTransition)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setLayoutTransition(android.animation.LayoutTransition)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChild">
      <MemberSignature Language="F#" Value="abstract member MeasureChild : Android.Views.View * int * int -&gt; unit&#xA;override this.MeasureChild : Android.Views.View * int * int -&gt; unit" Usage="viewGroup.MeasureChild (child, parentWidthMeasureSpec, parentHeightMeasureSpec)" />
      <MemberSignature Language="C#" Value="protected virtual void MeasureChild (Android.Views.View? child, int parentWidthMeasureSpec, int parentHeightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChild(class Android.Views.View child, int32 parentWidthMeasureSpec, int32 parentHeightMeasureSpec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.MeasureChild(Android.Views.View,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("measureChild", "(Landroid/view/View;II)V", "GetMeasureChild_Landroid_view_View_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="parentWidthMeasureSpec" Type="System.Int32" />
        <Parameter Name="parentHeightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The child to measure</param>
        <param name="parentWidthMeasureSpec">The width requirements for this view</param>
        <param name="parentHeightMeasureSpec">The height requirements for this view</param>
        <summary>Ask one of the children of this view to measure itself, taking into
            account both the MeasureSpec requirements for this view and its padding.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#measureChild(android.view.View,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.measureChild(android.view.View, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChildren">
      <MemberSignature Language="F#" Value="abstract member MeasureChildren : int * int -&gt; unit&#xA;override this.MeasureChildren : int * int -&gt; unit" Usage="viewGroup.MeasureChildren (widthMeasureSpec, heightMeasureSpec)" />
      <MemberSignature Language="C#" Value="protected virtual void MeasureChildren (int widthMeasureSpec, int heightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChildren(int32 widthMeasureSpec, int32 heightMeasureSpec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.MeasureChildren(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("measureChildren", "(II)V", "GetMeasureChildren_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="widthMeasureSpec">The width requirements for this view</param>
        <param name="heightMeasureSpec">The height requirements for this view</param>
        <summary>Ask all of the children of this view to measure themselves, taking into
            account both the MeasureSpec requirements for this view and its padding.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#measureChildren(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.measureChildren(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChildWithMargins">
      <MemberSignature Language="F#" Value="abstract member MeasureChildWithMargins : Android.Views.View * int * int * int * int -&gt; unit&#xA;override this.MeasureChildWithMargins : Android.Views.View * int * int * int * int -&gt; unit" Usage="viewGroup.MeasureChildWithMargins (child, parentWidthMeasureSpec, widthUsed, parentHeightMeasureSpec, heightUsed)" />
      <MemberSignature Language="C#" Value="protected virtual void MeasureChildWithMargins (Android.Views.View? child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChildWithMargins(class Android.Views.View child, int32 parentWidthMeasureSpec, int32 widthUsed, int32 parentHeightMeasureSpec, int32 heightUsed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.MeasureChildWithMargins(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("measureChildWithMargins", "(Landroid/view/View;IIII)V", "GetMeasureChildWithMargins_Landroid_view_View_IIIIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="parentWidthMeasureSpec" Type="System.Int32" />
        <Parameter Name="widthUsed" Type="System.Int32" />
        <Parameter Name="parentHeightMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightUsed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The child to measure</param>
        <param name="parentWidthMeasureSpec">The width requirements for this view</param>
        <param name="widthUsed">Extra space that has been used up by the parent
                   horizontally (possibly by other children of the parent)</param>
        <param name="parentHeightMeasureSpec">The height requirements for this view</param>
        <param name="heightUsed">Extra space that has been used up by the parent
                   vertically (possibly by other children of the parent)</param>
        <summary>Ask one of the children of this view to measure itself, taking into
            account both the MeasureSpec requirements for this view and its padding
            and margins.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#measureChildWithMargins(android.view.View,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.measureChildWithMargins(android.view.View, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MotionEventSplittingEnabled">
      <MemberSignature Language="F#" Value="member this.MotionEventSplittingEnabled : bool with get, set" Usage="Android.Views.ViewGroup.MotionEventSplittingEnabled" />
      <MemberSignature Language="C#" Value="public virtual bool MotionEventSplittingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MotionEventSplittingEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.MotionEventSplittingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isMotionEventSplittingEnabled", "()Z", "GetIsMotionEventSplittingEnabledHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setMotionEventSplittingEnabled", "(Z)V", "GetSetMotionEventSplittingEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="split">&lt;code&gt;true&lt;/code&gt; to allow MotionEvents to be split and dispatched to multiple
                         child views. &lt;code&gt;false&lt;/code&gt; to only allow one child view to be the target of
                         any MotionEvent received by this ViewGroup.</param>
        <summary>Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children. -or- Enable or disable the splitting of MotionEvents to multiple children during touch event
            dispatch.</summary>
        <value>true if MotionEvents dispatched to this ViewGroup can be split to multiple children.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isMotionEventSplittingEnabled()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isMotionEventSplittingEnabled()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setMotionEventSplittingEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setMotionEventSplittingEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NestedScrollAxes">
      <MemberSignature Language="F#" Value="member this.NestedScrollAxes : Android.Views.ScrollAxis" Usage="Android.Views.ViewGroup.NestedScrollAxes" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.ScrollAxis NestedScrollAxes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ScrollAxis NestedScrollAxes" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.NestedScrollAxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getNestedScrollAxes", "()I", "GetGetNestedScrollAxesHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ScrollAxis</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current axes of nested scrolling for this ViewGroup.</summary>
        <value>Flags indicating the current axes of nested scrolling</value>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getNestedScrollAxes()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getNestedScrollAxes()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="F:Android.Views.View.ScrollAxisHorizontal" />
        <altmember cref="F:Android.Views.View.ScrollAxisVertical" />
        <altmember cref="F:Android.Views.View.ScrollAxisNone" />
      </Docs>
    </Member>
    <Member MemberName="NotifySubtreeAccessibilityStateChanged">
      <MemberSignature Language="F#" Value="abstract member NotifySubtreeAccessibilityStateChanged : Android.Views.View * Android.Views.View * Android.Views.Accessibility.ContentChangeTypes -&gt; unit&#xA;override this.NotifySubtreeAccessibilityStateChanged : Android.Views.View * Android.Views.View * Android.Views.Accessibility.ContentChangeTypes -&gt; unit" Usage="viewGroup.NotifySubtreeAccessibilityStateChanged (child, source, changeType)" />
      <MemberSignature Language="C#" Value="public virtual void NotifySubtreeAccessibilityStateChanged (Android.Views.View? child, Android.Views.View? source, Android.Views.Accessibility.ContentChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySubtreeAccessibilityStateChanged(class Android.Views.View child, class Android.Views.View source, valuetype Android.Views.Accessibility.ContentChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.NotifySubtreeAccessibilityStateChanged(Android.Views.View,Android.Views.View,Android.Views.Accessibility.ContentChangeTypes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.NotifySubtreeAccessibilityStateChanged(Android.Views.View,Android.Views.View,Android.Views.Accessibility.ContentChangeTypes)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="source" Type="Android.Views.View" />
        <Parameter Name="changeType" Type="Android.Views.Accessibility.ContentChangeTypes">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">The direct child whose subtree has changed.</param>
        <param name="source">The descendant view that changed.</param>
        <param name="changeType">A bit mask of the types of changes that occurred. One
            or more of:
            <list type="bullet"><item><term><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeContentDescription" /><item><term><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeSubtree" /><item><term><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeText" /><item><term><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeUndefined" /></term></item></term></item></term></item></term></item></list></param>
        <summary>Notifies a view parent that the accessibility state of one of its
 descendants has changed and that the structure of the subtree is
 different.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetDescendantRectToMyCoords">
      <MemberSignature Language="F#" Value="member this.OffsetDescendantRectToMyCoords : Android.Views.View * Android.Graphics.Rect -&gt; unit" Usage="viewGroup.OffsetDescendantRectToMyCoords (descendant, rect)" />
      <MemberSignature Language="C#" Value="public void OffsetDescendantRectToMyCoords (Android.Views.View? descendant, Android.Graphics.Rect? rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OffsetDescendantRectToMyCoords(class Android.Views.View descendant, class Android.Graphics.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OffsetDescendantRectToMyCoords(Android.Views.View,Android.Graphics.Rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("offsetDescendantRectToMyCoords", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descendant" Type="Android.Views.View" />
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="descendant">A descendant of this view</param>
        <param name="rect">A rectangle defined in descendant's coordinate space.</param>
        <summary>Offset a rectangle that is in a descendant's coordinate
            space into our coordinate space.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#offsetDescendantRectToMyCoords(android.view.View,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OffsetRectIntoDescendantCoords">
      <MemberSignature Language="F#" Value="member this.OffsetRectIntoDescendantCoords : Android.Views.View * Android.Graphics.Rect -&gt; unit" Usage="viewGroup.OffsetRectIntoDescendantCoords (descendant, rect)" />
      <MemberSignature Language="C#" Value="public void OffsetRectIntoDescendantCoords (Android.Views.View? descendant, Android.Graphics.Rect? rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OffsetRectIntoDescendantCoords(class Android.Views.View descendant, class Android.Graphics.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OffsetRectIntoDescendantCoords(Android.Views.View,Android.Graphics.Rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("offsetRectIntoDescendantCoords", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descendant" Type="Android.Views.View" />
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="descendant">A descendant of this view</param>
        <param name="rect">A rectangle defined in descendant's coordinate space.</param>
        <summary>Offset a rectangle that is in our coordinate space into an ancestor's
            coordinate space.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#offsetRectIntoDescendantCoords(android.view.View,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnDescendantInvalidated">
      <MemberSignature Language="F#" Value="abstract member OnDescendantInvalidated : Android.Views.View * Android.Views.View -&gt; unit&#xA;override this.OnDescendantInvalidated : Android.Views.View * Android.Views.View -&gt; unit" Usage="viewGroup.OnDescendantInvalidated (child, target)" />
      <MemberSignature Language="C#" Value="public virtual void OnDescendantInvalidated (Android.Views.View child, Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDescendantInvalidated(class Android.Views.View child, class Android.Views.View target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnDescendantInvalidated(Android.Views.View,Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnDescendantInvalidated(Android.Views.View,Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDescendantInvalidated", "(Landroid/view/View;Landroid/view/View;)V", "GetOnDescendantInvalidated_Landroid_view_View_Landroid_view_View_Handler", ApiSince=26)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInterceptHoverEvent">
      <MemberSignature Language="F#" Value="abstract member OnInterceptHoverEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.OnInterceptHoverEvent : Android.Views.MotionEvent -&gt; bool" Usage="viewGroup.OnInterceptHoverEvent e" />
      <MemberSignature Language="C#" Value="public virtual bool OnInterceptHoverEvent (Android.Views.MotionEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnInterceptHoverEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnInterceptHoverEvent(Android.Views.MotionEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onInterceptHoverEvent", "(Landroid/view/MotionEvent;)Z", "GetOnInterceptHoverEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event that describes the hover.</param>
        <param name="event">The motion event that describes the hover.</param>
        <summary>Implement this method to intercept hover events before they are handled
            by child views.</summary>
        <returns>True if the view group would like to intercept the hover event
            and prevent its children from receiving it.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onInterceptHoverEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onInterceptHoverEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnInterceptTouchEvent">
      <MemberSignature Language="F#" Value="abstract member OnInterceptTouchEvent : Android.Views.MotionEvent -&gt; bool&#xA;override this.OnInterceptTouchEvent : Android.Views.MotionEvent -&gt; bool" Usage="viewGroup.OnInterceptTouchEvent ev" />
      <MemberSignature Language="C#" Value="public virtual bool OnInterceptTouchEvent (Android.Views.MotionEvent? ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnInterceptTouchEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onInterceptTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnInterceptTouchEvent_Landroid_view_MotionEvent_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The motion event being dispatched down the hierarchy.</param>
        <summary>Implement this method to intercept all touch screen motion events.</summary>
        <returns>Return true to steal motion events from the children and have
            them dispatched to this ViewGroup through onTouchEvent().
            The current target will receive an ACTION_CANCEL event, and no further
            messages will be delivered here.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onInterceptTouchEvent(android.view.MotionEvent)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onInterceptTouchEvent(android.view.MotionEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="F#" Value="override this.OnLayout : bool * int * int * int * int -&gt; unit" Usage="viewGroup.OnLayout (changed, l, t, r, b)" />
      <MemberSignature Language="C#" Value="protected abstract void OnLayout (bool changed, int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(bool changed, int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onLayout", "(ZIIII)V", "GetOnLayout_ZIIIIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changed" Type="System.Boolean" />
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changed">This is a new size or position for this view</param>
        <param name="l">Left position, relative to parent</param>
        <param name="t">Top position, relative to parent</param>
        <param name="r">Right position, relative to parent</param>
        <param name="b">Bottom position, relative to parent
</param>
        <summary>Called from layout when this view should
 assign a size and position to each of its children.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnNestedFling">
      <MemberSignature Language="F#" Value="abstract member OnNestedFling : Android.Views.View * single * single * bool -&gt; bool&#xA;override this.OnNestedFling : Android.Views.View * single * single * bool -&gt; bool" Usage="viewGroup.OnNestedFling (target, velocityX, velocityY, consumed)" />
      <MemberSignature Language="C#" Value="public virtual bool OnNestedFling (Android.Views.View? target, float velocityX, float velocityY, bool consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedFling(class Android.Views.View target, float32 velocityX, float32 velocityY, bool consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedFling(Android.Views.View,System.Single,System.Single,System.Boolean)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedFling(Android.Views.View,System.Single,System.Single,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedFling", "(Landroid/view/View;FFZ)Z", "GetOnNestedFling_Landroid_view_View_FFZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
        <Parameter Name="consumed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <param name="consumed">true if the child consumed the fling, false otherwise</param>
        <summary>Request a fling from a nested scroll.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreFling">
      <MemberSignature Language="F#" Value="abstract member OnNestedPreFling : Android.Views.View * single * single -&gt; bool&#xA;override this.OnNestedPreFling : Android.Views.View * single * single -&gt; bool" Usage="viewGroup.OnNestedPreFling (target, velocityX, velocityY)" />
      <MemberSignature Language="C#" Value="public virtual bool OnNestedPreFling (Android.Views.View? target, float velocityX, float velocityY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPreFling(class Android.Views.View target, float32 velocityX, float32 velocityY) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedPreFling(Android.Views.View,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedPreFling(Android.Views.View,System.Single,System.Single)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPreFling", "(Landroid/view/View;FF)Z", "GetOnNestedPreFling_Landroid_view_View_FFHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <summary>React to a nested fling before the target view consumes it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPrePerformAccessibilityAction">
      <MemberSignature Language="F#" Value="abstract member OnNestedPrePerformAccessibilityAction : Android.Views.View * Android.Views.Accessibility.Action * Android.OS.Bundle -&gt; bool&#xA;override this.OnNestedPrePerformAccessibilityAction : Android.Views.View * Android.Views.Accessibility.Action * Android.OS.Bundle -&gt; bool" Usage="viewGroup.OnNestedPrePerformAccessibilityAction (target, action, args)" />
      <MemberSignature Language="C#" Value="public virtual bool OnNestedPrePerformAccessibilityAction (Android.Views.View? target, Android.Views.Accessibility.Action action, Android.OS.Bundle? args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPrePerformAccessibilityAction(class Android.Views.View target, valuetype Android.Views.Accessibility.Action action, class Android.OS.Bundle args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedPrePerformAccessibilityAction(Android.Views.View,Android.Views.Accessibility.Action,Android.OS.Bundle)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedPrePerformAccessibilityAction(Android.Views.View,Android.Views.Accessibility.Action,Android.OS.Bundle)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPrePerformAccessibilityAction", "(Landroid/view/View;ILandroid/os/Bundle;)Z", "GetOnNestedPrePerformAccessibilityAction_Landroid_view_View_ILandroid_os_Bundle_Handler", ApiSince=22)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="action" Type="Android.Views.Accessibility.Action">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="args" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="target">The target view dispatching this action</param>
        <param name="action">Action being performed; see
                          <c>android.view.accessibility.AccessibilityNodeInfo</c></param>
        <param name="args">Optional action arguments</param>
        <summary>[TODO: @inheritDoc]</summary>
        <returns>false by default. Subclasses should return true if they handle the event.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onNestedPrePerformAccessibilityAction(android.view.View,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreScroll">
      <MemberSignature Language="F#" Value="abstract member OnNestedPreScroll : Android.Views.View * int * int * int[] -&gt; unit&#xA;override this.OnNestedPreScroll : Android.Views.View * int * int * int[] -&gt; unit" Usage="viewGroup.OnNestedPreScroll (target, dx, dy, consumed)" />
      <MemberSignature Language="C#" Value="public virtual void OnNestedPreScroll (Android.Views.View? target, int dx, int dy, int[]? consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedPreScroll(class Android.Views.View target, int32 dx, int32 dy, int32[] consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedPreScroll(Android.Views.View,System.Int32,System.Int32,System.Int32[])" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedPreScroll(Android.Views.View,System.Int32,System.Int32,System.Int32[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPreScroll", "(Landroid/view/View;II[I)V", "GetOnNestedPreScroll_Landroid_view_View_IIarrayIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
        <Parameter Name="consumed" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="dx">Horizontal scroll distance in pixels</param>
        <param name="dy">Vertical scroll distance in pixels</param>
        <param name="consumed">Output. The horizontal and vertical scroll distance consumed by this parent
</param>
        <summary>React to a nested scroll in progress before the target view consumes a portion of the scroll.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScroll">
      <MemberSignature Language="F#" Value="abstract member OnNestedScroll : Android.Views.View * int * int * int * int -&gt; unit&#xA;override this.OnNestedScroll : Android.Views.View * int * int * int * int -&gt; unit" Usage="viewGroup.OnNestedScroll (target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed)" />
      <MemberSignature Language="C#" Value="public virtual void OnNestedScroll (Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScroll(class Android.Views.View target, int32 dxConsumed, int32 dyConsumed, int32 dxUnconsumed, int32 dyUnconsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedScroll(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedScroll(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedScroll", "(Landroid/view/View;IIII)V", "GetOnNestedScroll_Landroid_view_View_IIIIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dxConsumed" Type="System.Int32" />
        <Parameter Name="dyConsumed" Type="System.Int32" />
        <Parameter Name="dxUnconsumed" Type="System.Int32" />
        <Parameter Name="dyUnconsumed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="target">The descendent view controlling the nested scroll</param>
        <param name="dxConsumed">Horizontal scroll distance in pixels already consumed by target</param>
        <param name="dyConsumed">Vertical scroll distance in pixels already consumed by target</param>
        <param name="dxUnconsumed">Horizontal scroll distance in pixels not consumed by target</param>
        <param name="dyUnconsumed">Vertical scroll distance in pixels not consumed by target
</param>
        <summary>React to a nested scroll in progress.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScrollAccepted">
      <MemberSignature Language="F#" Value="abstract member OnNestedScrollAccepted : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; unit&#xA;override this.OnNestedScrollAccepted : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; unit" Usage="viewGroup.OnNestedScrollAccepted (child, target, axes)" />
      <MemberSignature Language="C#" Value="public virtual void OnNestedScrollAccepted (Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScrollAccepted(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis axes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnNestedScrollAccepted(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnNestedScrollAccepted(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedScrollAccepted", "(Landroid/view/View;Landroid/view/View;I)V", "GetOnNestedScrollAccepted_Landroid_view_View_Landroid_view_View_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="axes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="axes">Flags consisting of <see cref="F:Android.Views.View.ScrollAxisHorizontal" />,
                         <see cref="F:Android.Views.View.ScrollAxisVertical" /> or both</param>
        <summary>React to the successful claiming of a nested scroll operation.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRequestFocusInDescendants">
      <MemberSignature Language="F#" Value="abstract member OnRequestFocusInDescendants : int * Android.Graphics.Rect -&gt; bool&#xA;override this.OnRequestFocusInDescendants : int * Android.Graphics.Rect -&gt; bool" Usage="viewGroup.OnRequestFocusInDescendants (direction, previouslyFocusedRect)" />
      <MemberSignature Language="C#" Value="protected virtual bool OnRequestFocusInDescendants (int direction, Android.Graphics.Rect? previouslyFocusedRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnRequestFocusInDescendants(int32 direction, class Android.Graphics.Rect previouslyFocusedRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnRequestFocusInDescendants(System.Int32,Android.Graphics.Rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRequestFocusInDescendants", "(ILandroid/graphics/Rect;)Z", "GetOnRequestFocusInDescendants_ILandroid_graphics_Rect_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Int32" />
        <Parameter Name="previouslyFocusedRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <param name="previouslyFocusedRect">The rectangle (in this View's coordinate system)
                   to give a finer grained hint about where focus is coming from.  May be null
                   if there is no hint.</param>
        <summary>Look for a descendant to call <c>View#requestFocus</c> on.</summary>
        <returns>Whether focus was taken.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onRequestFocusInDescendants(int,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onRequestFocusInDescendants(int, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnRequestSendAccessibilityEvent">
      <MemberSignature Language="F#" Value="abstract member OnRequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool&#xA;override this.OnRequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool" Usage="viewGroup.OnRequestSendAccessibilityEvent (child, e)" />
      <MemberSignature Language="C#" Value="public virtual bool OnRequestSendAccessibilityEvent (Android.Views.View? child, Android.Views.Accessibility.AccessibilityEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnRequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnRequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onRequestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetOnRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event to be sent.</param>
        <param name="child">The child which requests sending the event.</param>
        <param name="event">The event to be sent.</param>
        <summary>Called when a child has requested sending an <c>AccessibilityEvent</c> and
            gives an opportunity to its parent to augment the event.</summary>
        <returns>True if the event should be sent.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onRequestSendAccessibilityEvent(android.view.View,%20android.view.accessibility.AccessibilityEvent)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.ViewGroup.RequestSendAccessibilityEvent(Android.Views.View, Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="OnStartNestedScroll">
      <MemberSignature Language="F#" Value="abstract member OnStartNestedScroll : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; bool&#xA;override this.OnStartNestedScroll : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; bool" Usage="viewGroup.OnStartNestedScroll (child, target, nestedScrollAxes)" />
      <MemberSignature Language="C#" Value="public virtual bool OnStartNestedScroll (Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStartNestedScroll(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStartNestedScroll", "(Landroid/view/View;Landroid/view/View;I)Z", "GetOnStartNestedScroll_Landroid_view_View_Landroid_view_View_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <see cref="F:Android.Views.View.ScrollAxisHorizontal" />,
                         <see cref="F:Android.Views.View.ScrollAxisVertical" /> or both</param>
        <summary>React to a descendant view initiating a nestable scroll operation, claiming the
 nested scroll operation if appropriate.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopNestedScroll">
      <MemberSignature Language="F#" Value="abstract member OnStopNestedScroll : Android.Views.View -&gt; unit&#xA;override this.OnStopNestedScroll : Android.Views.View -&gt; unit" Usage="viewGroup.OnStopNestedScroll child" />
      <MemberSignature Language="C#" Value="public virtual void OnStopNestedScroll (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStopNestedScroll(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnStopNestedScroll(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStopNestedScroll", "(Landroid/view/View;)V", "GetOnStopNestedScroll_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View that initiated the nested scroll
</param>
        <summary>React to a nested scroll operation ending.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onStopNestedScroll(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onStopNestedScroll(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnViewAdded">
      <MemberSignature Language="F#" Value="abstract member OnViewAdded : Android.Views.View -&gt; unit&#xA;override this.OnViewAdded : Android.Views.View -&gt; unit" Usage="viewGroup.OnViewAdded child" />
      <MemberSignature Language="C#" Value="public virtual void OnViewAdded (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnViewAdded(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnViewAdded(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onViewAdded", "(Landroid/view/View;)V", "GetOnViewAdded_Landroid_view_View_Handler", ApiSince=23)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the added child view</param>
        <summary>Called when a new child is added to this ViewGroup.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onViewAdded(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onViewAdded(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnViewRemoved">
      <MemberSignature Language="F#" Value="abstract member OnViewRemoved : Android.Views.View -&gt; unit&#xA;override this.OnViewRemoved : Android.Views.View -&gt; unit" Usage="viewGroup.OnViewRemoved child" />
      <MemberSignature Language="C#" Value="public virtual void OnViewRemoved (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnViewRemoved(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.OnViewRemoved(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onViewRemoved", "(Landroid/view/View;)V", "GetOnViewRemoved_Landroid_view_View_Handler", ApiSince=23)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the removed child view</param>
        <summary>Called when a child view is removed from this ViewGroup.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#onViewRemoved(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.onViewRemoved(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistentDrawingCache">
      <MemberSignature Language="F#" Value="member this.PersistentDrawingCache : Android.Views.PersistentDrawingCaches with get, set" Usage="Android.Views.ViewGroup.PersistentDrawingCache" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.PersistentDrawingCaches PersistentDrawingCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.PersistentDrawingCaches PersistentDrawingCache" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.PersistentDrawingCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getPersistentDrawingCache", "()I", "GetGetPersistentDrawingCacheHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setPersistentDrawingCache", "(I)V", "GetSetPersistentDrawingCache_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.PersistentDrawingCaches</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="drawingCacheToKeep">one or a combination of <c>#PERSISTENT_NO_CACHE</c>,
                   <c>#PERSISTENT_ANIMATION_CACHE</c>, <c>#PERSISTENT_SCROLLING_CACHE</c>
                   and <c>#PERSISTENT_ALL_CACHES</c></param>
        <summary>Returns an integer indicating what types of drawing caches are kept in memory. -or- Indicates what types of drawing caches should be kept in memory after
            they have been created.</summary>
        <value>one or a combination of <c>#PERSISTENT_NO_CACHE</c>,
                    <c>#PERSISTENT_ANIMATION_CACHE</c>, <c>#PERSISTENT_SCROLLING_CACHE</c>
                    and <c>#PERSISTENT_ALL_CACHES</c></value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getPersistentDrawingCache()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getPersistentDrawingCache()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setPersistentDrawingCache(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setPersistentDrawingCache(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.PersistentDrawingCache" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.PersistentDrawingCache" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="RecomputeViewAttributes">
      <MemberSignature Language="F#" Value="abstract member RecomputeViewAttributes : Android.Views.View -&gt; unit&#xA;override this.RecomputeViewAttributes : Android.Views.View -&gt; unit" Usage="viewGroup.RecomputeViewAttributes child" />
      <MemberSignature Language="C#" Value="public virtual void RecomputeViewAttributes (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecomputeViewAttributes(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RecomputeViewAttributes(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RecomputeViewAttributes(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View whose attributes have changed.
</param>
        <summary>Tell view hierarchy that the global view attributes need to be
 re-evaluated.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllViews">
      <MemberSignature Language="F#" Value="abstract member RemoveAllViews : unit -&gt; unit&#xA;override this.RemoveAllViews : unit -&gt; unit" Usage="viewGroup.RemoveAllViews " />
      <MemberSignature Language="C#" Value="public virtual void RemoveAllViews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllViews() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveAllViews" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeAllViews", "()V", "GetRemoveAllViewsHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this method to remove all child views from the
            ViewGroup.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeAllViews()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeAllViews()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllViewsInLayout">
      <MemberSignature Language="F#" Value="abstract member RemoveAllViewsInLayout : unit -&gt; unit&#xA;override this.RemoveAllViewsInLayout : unit -&gt; unit" Usage="viewGroup.RemoveAllViewsInLayout " />
      <MemberSignature Language="C#" Value="public virtual void RemoveAllViewsInLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllViewsInLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveAllViewsInLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeAllViewsInLayout", "()V", "GetRemoveAllViewsInLayoutHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by a ViewGroup subclass to remove child views from itself,
            when it must first know its size on screen before it can calculate how many
            child views it will render.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeAllViewsInLayout()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeAllViewsInLayout()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveDetachedView">
      <MemberSignature Language="F#" Value="abstract member RemoveDetachedView : Android.Views.View * bool -&gt; unit&#xA;override this.RemoveDetachedView : Android.Views.View * bool -&gt; unit" Usage="viewGroup.RemoveDetachedView (child, animate)" />
      <MemberSignature Language="C#" Value="protected virtual void RemoveDetachedView (Android.Views.View? child, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveDetachedView(class Android.Views.View child, bool animate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeDetachedView", "(Landroid/view/View;Z)V", "GetRemoveDetachedView_Landroid_view_View_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">the child to be definitely removed from the view hierarchy</param>
        <param name="animate">if true and the view has an animation, the view is placed in the
                           disappearing views list, otherwise, it is detached from the window</param>
        <summary>Finishes the removal of a detached view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeDetachedView(android.view.View,%20boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeDetachedView(android.view.View, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveView">
      <MemberSignature Language="F#" Value="abstract member RemoveView : Android.Views.View -&gt; unit&#xA;override this.RemoveView : Android.Views.View -&gt; unit" Usage="viewGroup.RemoveView view" />
      <MemberSignature Language="C#" Value="public virtual void RemoveView (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveView(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveView(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewManager.RemoveView(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeView", "(Landroid/view/View;)V", "GetRemoveView_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>[TODO: @inheritDoc]</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeView(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeView(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewAt">
      <MemberSignature Language="F#" Value="abstract member RemoveViewAt : int -&gt; unit&#xA;override this.RemoveViewAt : int -&gt; unit" Usage="viewGroup.RemoveViewAt index" />
      <MemberSignature Language="C#" Value="public virtual void RemoveViewAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveViewAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeViewAt", "(I)V", "GetRemoveViewAt_IHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the position in the group of the view to remove</param>
        <summary>Removes the view at the specified position in the group.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeViewAt(int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeViewAt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewInLayout">
      <MemberSignature Language="F#" Value="abstract member RemoveViewInLayout : Android.Views.View -&gt; unit&#xA;override this.RemoveViewInLayout : Android.Views.View -&gt; unit" Usage="viewGroup.RemoveViewInLayout view" />
      <MemberSignature Language="C#" Value="public virtual void RemoveViewInLayout (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewInLayout(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveViewInLayout(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeViewInLayout", "(Landroid/view/View;)V", "GetRemoveViewInLayout_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">the view to remove from the group</param>
        <summary>Removes a view during layout.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeViewInLayout(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeViewInLayout(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViews">
      <MemberSignature Language="F#" Value="abstract member RemoveViews : int * int -&gt; unit&#xA;override this.RemoveViews : int * int -&gt; unit" Usage="viewGroup.RemoveViews (start, count)" />
      <MemberSignature Language="C#" Value="public virtual void RemoveViews (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViews(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveViews(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeViews", "(II)V", "GetRemoveViews_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the first position in the group of the range of views to remove</param>
        <param name="count">the number of views to remove</param>
        <summary>Removes the specified range of views from the group.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeViews(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeViews(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewsInLayout">
      <MemberSignature Language="F#" Value="abstract member RemoveViewsInLayout : int * int -&gt; unit&#xA;override this.RemoveViewsInLayout : int * int -&gt; unit" Usage="viewGroup.RemoveViewsInLayout (start, count)" />
      <MemberSignature Language="C#" Value="public virtual void RemoveViewsInLayout (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewsInLayout(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RemoveViewsInLayout(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeViewsInLayout", "(II)V", "GetRemoveViewsInLayout_IIHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the index of the first view to remove from the group</param>
        <param name="count">the number of views to remove from the group</param>
        <summary>Removes a range of views during layout.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#removeViewsInLayout(int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.removeViewsInLayout(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildFocus">
      <MemberSignature Language="F#" Value="abstract member RequestChildFocus : Android.Views.View * Android.Views.View -&gt; unit&#xA;override this.RequestChildFocus : Android.Views.View * Android.Views.View -&gt; unit" Usage="viewGroup.RequestChildFocus (child, focused)" />
      <MemberSignature Language="C#" Value="public virtual void RequestChildFocus (Android.Views.View? child, Android.Views.View? focused);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestChildFocus(class Android.Views.View child, class Android.Views.View focused) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RequestChildFocus(Android.Views.View,Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RequestChildFocus(Android.Views.View,Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="focused" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child of this ViewParent that wants focus. This view
        will contain the focused view. It is not necessarily the view that
        actually has focus.</param>
        <param name="focused">The view that is a descendant of child that actually has
        focus
</param>
        <summary>Called when a child of this parent wants focus
</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildRectangleOnScreen">
      <MemberSignature Language="F#" Value="abstract member RequestChildRectangleOnScreen : Android.Views.View * Android.Graphics.Rect * bool -&gt; bool&#xA;override this.RequestChildRectangleOnScreen : Android.Views.View * Android.Graphics.Rect * bool -&gt; bool" Usage="viewGroup.RequestChildRectangleOnScreen (child, rectangle, immediate)" />
      <MemberSignature Language="C#" Value="public virtual bool RequestChildRectangleOnScreen (Android.Views.View? child, Android.Graphics.Rect? rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestChildRectangleOnScreen(class Android.Views.View child, class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The direct child making the request.</param>
        <param name="rectangle">The rectangle in the child's coordinates the child
        wishes to be on the screen.</param>
        <param name="immediate">True to forbid animated or delayed scrolling,
        false otherwise</param>
        <summary>Called when a child of this group wants a particular rectangle to be
 positioned onto the screen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestDisallowInterceptTouchEvent">
      <MemberSignature Language="F#" Value="abstract member RequestDisallowInterceptTouchEvent : bool -&gt; unit&#xA;override this.RequestDisallowInterceptTouchEvent : bool -&gt; unit" Usage="viewGroup.RequestDisallowInterceptTouchEvent disallowIntercept" />
      <MemberSignature Language="C#" Value="public virtual void RequestDisallowInterceptTouchEvent (bool disallowIntercept);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestDisallowInterceptTouchEvent(bool disallowIntercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RequestDisallowInterceptTouchEvent(System.Boolean)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RequestDisallowInterceptTouchEvent(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disallowIntercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disallowIntercept">True if the child does not want the parent to
            intercept touch events.
</param>
        <summary>Called when a child does not want this parent and its ancestors to
 intercept touch events with
 <see cref="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" />.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestSendAccessibilityEvent">
      <MemberSignature Language="F#" Value="abstract member RequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool&#xA;override this.RequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool" Usage="viewGroup.RequestSendAccessibilityEvent (child, e)" />
      <MemberSignature Language="C#" Value="public virtual bool RequestSendAccessibilityEvent (Android.Views.View? child, Android.Views.Accessibility.AccessibilityEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called by a child to request from its parent to send an <see cref="T:Android.Views.Accessibility.AccessibilityEvent" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="RequestTransparentRegion">
      <MemberSignature Language="F#" Value="abstract member RequestTransparentRegion : Android.Views.View -&gt; unit&#xA;override this.RequestTransparentRegion : Android.Views.View -&gt; unit" Usage="viewGroup.RequestTransparentRegion child" />
      <MemberSignature Language="C#" Value="public virtual void RequestTransparentRegion (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTransparentRegion(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.RequestTransparentRegion(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.RequestTransparentRegion(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view requesting the transparent region computation
 
</param>
        <summary>Called when a child wants the view hierarchy to gather and report
 transparent regions to the window compositor.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ResetResolvedLayoutDirection">
      <MemberSignature Language="F#" Value="abstract member ResetResolvedLayoutDirection : unit -&gt; unit&#xA;override this.ResetResolvedLayoutDirection : unit -&gt; unit" Usage="viewGroup.ResetResolvedLayoutDirection " />
      <MemberSignature Language="C#" Value="protected virtual void ResetResolvedLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResetResolvedLayoutDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ResetResolvedLayoutDirection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resetResolvedLayoutDirection", "()V", "GetResetResolvedLayoutDirectionHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetResolvedTextDirection">
      <MemberSignature Language="F#" Value="abstract member ResetResolvedTextDirection : unit -&gt; unit&#xA;override this.ResetResolvedTextDirection : unit -&gt; unit" Usage="viewGroup.ResetResolvedTextDirection " />
      <MemberSignature Language="C#" Value="protected virtual void ResetResolvedTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResetResolvedTextDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ResetResolvedTextDirection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("resetResolvedTextDirection", "()V", "GetResetResolvedTextDirectionHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleLayoutAnimation">
      <MemberSignature Language="F#" Value="abstract member ScheduleLayoutAnimation : unit -&gt; unit&#xA;override this.ScheduleLayoutAnimation : unit -&gt; unit" Usage="viewGroup.ScheduleLayoutAnimation " />
      <MemberSignature Language="C#" Value="public virtual void ScheduleLayoutAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleLayoutAnimation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ScheduleLayoutAnimation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("scheduleLayoutAnimation", "()V", "GetScheduleLayoutAnimationHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schedules the layout animation to be played after the next layout pass
            of this view group.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#scheduleLayoutAnimation()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.scheduleLayoutAnimation()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetAddStatesFromChildren">
      <MemberSignature Language="F#" Value="abstract member SetAddStatesFromChildren : bool -&gt; unit&#xA;override this.SetAddStatesFromChildren : bool -&gt; unit" Usage="viewGroup.SetAddStatesFromChildren addsStates" />
      <MemberSignature Language="C#" Value="public virtual void SetAddStatesFromChildren (bool addsStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAddStatesFromChildren(bool addsStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetAddStatesFromChildren(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setAddStatesFromChildren", "(Z)V", "GetSetAddStatesFromChildren_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addsStates" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="addsStates">To be added.</param>
        <summary>Sets whether this ViewGroup's drawable states also include
            its children's drawable states.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setAddStatesFromChildren(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setAddStatesFromChildren(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetChildrenDrawingCacheEnabled">
      <MemberSignature Language="F#" Value="abstract member SetChildrenDrawingCacheEnabled : bool -&gt; unit&#xA;override this.SetChildrenDrawingCacheEnabled : bool -&gt; unit" Usage="viewGroup.SetChildrenDrawingCacheEnabled enabled" />
      <MemberSignature Language="C#" Value="protected virtual void SetChildrenDrawingCacheEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetChildrenDrawingCacheEnabled(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetChildrenDrawingCacheEnabled(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setChildrenDrawingCacheEnabled", "(Z)V", "GetSetChildrenDrawingCacheEnabled_ZHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("deprecated")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">true to enable the cache, false to dispose of it</param>
        <summary>Enables or disables the drawing cache for each child of this view group.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setChildrenDrawingCacheEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setChildrenDrawingCacheEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetClipChildren">
      <MemberSignature Language="F#" Value="abstract member SetClipChildren : bool -&gt; unit&#xA;override this.SetClipChildren : bool -&gt; unit" Usage="viewGroup.SetClipChildren clipChildren" />
      <MemberSignature Language="C#" Value="public virtual void SetClipChildren (bool clipChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetClipChildren(bool clipChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetClipChildren(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setClipChildren", "(Z)V", "GetSetClipChildren_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clipChildren">true to clip children to their bounds,
                   false otherwise</param>
        <summary>By default, children are clipped to their bounds before drawing.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setClipChildren(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setClipChildren(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetClipToPadding">
      <MemberSignature Language="F#" Value="abstract member SetClipToPadding : bool -&gt; unit&#xA;override this.SetClipToPadding : bool -&gt; unit" Usage="viewGroup.SetClipToPadding clipToPadding" />
      <MemberSignature Language="C#" Value="public virtual void SetClipToPadding (bool clipToPadding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetClipToPadding(bool clipToPadding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetClipToPadding(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setClipToPadding", "(Z)V", "GetSetClipToPadding_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipToPadding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clipToPadding">true to clip children to the padding of the group, and resize (but
                   not clip) any EdgeEffect to the padded region. False otherwise.</param>
        <summary>Sets whether this ViewGroup will clip its children to its padding and resize (but not
            clip) any EdgeEffect to the padded region, if padding is present.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setClipToPadding(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setClipToPadding(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnHierarchyChangeListener">
      <MemberSignature Language="F#" Value="abstract member SetOnHierarchyChangeListener : Android.Views.ViewGroup.IOnHierarchyChangeListener -&gt; unit&#xA;override this.SetOnHierarchyChangeListener : Android.Views.ViewGroup.IOnHierarchyChangeListener -&gt; unit" Usage="viewGroup.SetOnHierarchyChangeListener listener" />
      <MemberSignature Language="C#" Value="public virtual void SetOnHierarchyChangeListener (Android.Views.ViewGroup.IOnHierarchyChangeListener? listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnHierarchyChangeListener(class Android.Views.ViewGroup/IOnHierarchyChangeListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetOnHierarchyChangeListener(Android.Views.ViewGroup.IOnHierarchyChangeListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setOnHierarchyChangeListener", "(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V", "GetSetOnHierarchyChangeListener_Landroid_view_ViewGroup_OnHierarchyChangeListener_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewGroup+IOnHierarchyChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback to invoke on hierarchy change</param>
        <summary>Register a callback to be invoked when a child is added to or removed
            from this view.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setOnHierarchyChangeListener(android.view.OnHierarchyChangeListener)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setOnHierarchyChangeListener(android.view.OnHierarchyChangeListener)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetStaticTransformationsEnabled">
      <MemberSignature Language="F#" Value="abstract member SetStaticTransformationsEnabled : bool -&gt; unit&#xA;override this.SetStaticTransformationsEnabled : bool -&gt; unit" Usage="viewGroup.SetStaticTransformationsEnabled enabled" />
      <MemberSignature Language="C#" Value="protected virtual void SetStaticTransformationsEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetStaticTransformationsEnabled(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SetStaticTransformationsEnabled(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setStaticTransformationsEnabled", "(Z)V", "GetSetStaticTransformationsEnabled_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">True to enable static transformations on children, false otherwise.</param>
        <summary>When this property is set to true, this ViewGroup supports static transformations on
            children; this causes
            <c>#getChildStaticTransformation(View, android.view.animation.Transformation)</c> to be
            invoked when a child is drawn.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setStaticTransformationsEnabled(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setStaticTransformationsEnabled(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View, Android.Views.Animations.Transformation)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldDelayChildPressedState">
      <MemberSignature Language="F#" Value="abstract member ShouldDelayChildPressedState : unit -&gt; bool&#xA;override this.ShouldDelayChildPressedState : unit -&gt; bool" Usage="viewGroup.ShouldDelayChildPressedState " />
      <MemberSignature Language="C#" Value="public virtual bool ShouldDelayChildPressedState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldDelayChildPressedState() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ShouldDelayChildPressedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("shouldDelayChildPressedState", "()Z", "GetShouldDelayChildPressedStateHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return true if the pressed state should be delayed for children or descendants of this
            ViewGroup.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#shouldDelayChildPressedState()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.shouldDelayChildPressedState()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View -&gt; bool&#xA;override this.ShowContextMenuForChild : Android.Views.View -&gt; bool" Usage="viewGroup.ShowContextMenuForChild originalView" />
      <MemberSignature Language="C#" Value="public virtual bool ShowContextMenuForChild (Android.Views.View? originalView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ShowContextMenuForChild(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the context menu was first invoked</param>
        <summary>Bring up a context menu for the specified view or its ancestors.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View * single * single -&gt; bool&#xA;override this.ShowContextMenuForChild : Android.Views.View * single * single -&gt; bool" Usage="viewGroup.ShowContextMenuForChild (originalView, x, y)" />
      <MemberSignature Language="C#" Value="public virtual bool ShowContextMenuForChild (Android.Views.View? originalView, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.ShowContextMenuForChild(Android.Views.View,System.Single,System.Single)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View,System.Single,System.Single)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;FF)Z", "GetShowContextMenuForChild_Landroid_view_View_FFHandler", ApiSince=24)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="originalView">To be added.</param>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode&#xA;override this.StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode" Usage="viewGroup.StartActionModeForChild (originalView, callback)" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? StartActionModeForChild (Android.Views.View? originalView, Android.Views.ActionMode.ICallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <summary>Start an action mode for the specified view with the default type
 <see cref="F:Android.Views.ActionModeType.Primary" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode&#xA;override this.StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode" Usage="viewGroup.StartActionModeForChild (originalView, callback, type)" />
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode? StartActionModeForChild (Android.Views.View? originalView, Android.Views.ActionMode.ICallback? callback, Android.Views.ActionModeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback, valuetype Android.Views.ActionModeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_IHandler", ApiSince=23)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
        <Parameter Name="type" Type="Android.Views.ActionModeType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="originalView">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartLayoutAnimation">
      <MemberSignature Language="F#" Value="abstract member StartLayoutAnimation : unit -&gt; unit&#xA;override this.StartLayoutAnimation : unit -&gt; unit" Usage="viewGroup.StartLayoutAnimation " />
      <MemberSignature Language="C#" Value="public virtual void StartLayoutAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLayoutAnimation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.StartLayoutAnimation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startLayoutAnimation", "()V", "GetStartLayoutAnimationHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the layout animation.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#startLayoutAnimation()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.startLayoutAnimation()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartViewTransition">
      <MemberSignature Language="F#" Value="abstract member StartViewTransition : Android.Views.View -&gt; unit&#xA;override this.StartViewTransition : Android.Views.View -&gt; unit" Usage="viewGroup.StartViewTransition view" />
      <MemberSignature Language="C#" Value="public virtual void StartViewTransition (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartViewTransition(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.StartViewTransition(Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startViewTransition", "(Landroid/view/View;)V", "GetStartViewTransition_Landroid_view_View_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The View object to be kept visible even if it gets removed from its parent.</param>
        <summary>This method tells the ViewGroup that the given View object, which should have this
            ViewGroup as its parent,
            should be kept around  (re-displayed when the ViewGroup draws its children) even if it
            is removed from its parent.</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#startViewTransition(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.startViewTransition(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SuppressLayout">
      <MemberSignature Language="C#" Value="public virtual void SuppressLayout (bool suppress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SuppressLayout(bool suppress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.SuppressLayout(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("suppressLayout", "(Z)V", "GetSuppressLayout_ZHandler", ApiSince=29)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suppress" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="suppress">To be added.</param>
        <summary>Tells this ViewGroup to suppress all layout() calls until layout
            suppression is disabled with a later call to suppressLayout(false).</summary>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#suppressLayout(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.suppressLayout(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Views.ViewGroup.ThresholdClass" />
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Views.ViewGroup.ThresholdType" />
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchscreenBlocksFocus">
      <MemberSignature Language="F#" Value="member this.TouchscreenBlocksFocus : bool with get, set" Usage="Android.Views.ViewGroup.TouchscreenBlocksFocus" />
      <MemberSignature Language="C#" Value="public virtual bool TouchscreenBlocksFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TouchscreenBlocksFocus" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.TouchscreenBlocksFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTouchscreenBlocksFocus", "()Z", "GetGetTouchscreenBlocksFocusHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTouchscreenBlocksFocus", "(Z)V", "GetSetTouchscreenBlocksFocus_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="touchscreenBlocksFocus">true to enable blocking focus in the presence of a touchscreen</param>
        <summary>Check whether this ViewGroup should ignore focus requests for itself and its children. -or- Set whether this ViewGroup should ignore focus requests for itself and its children.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#getTouchscreenBlocksFocus()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.getTouchscreenBlocksFocus()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setTouchscreenBlocksFocus(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setTouchscreenBlocksFocus(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionGroup">
      <MemberSignature Language="F#" Value="member this.TransitionGroup : bool with get, set" Usage="Android.Views.ViewGroup.TransitionGroup" />
      <MemberSignature Language="C#" Value="public virtual bool TransitionGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionGroup" />
      <MemberSignature Language="DocId" Value="P:Android.Views.ViewGroup.TransitionGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTransitionGroup", "()Z", "GetIsTransitionGroupHandler")]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setTransitionGroup", "(Z)V", "GetSetTransitionGroup_ZHandler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="isTransitionGroup">Whether or not the ViewGroup should be treated as a unit
                                     in Activity transitions. If false, the ViewGroup won't transition,
                                     only its children. If true, the entire ViewGroup will transition
                                     together.</param>
        <summary>Returns true if this ViewGroup should be considered as a single entity for removal
            when executing an Activity transition. -or- Changes whether or not this ViewGroup should be treated as a single entity during
            Activity Transitions.</summary>
        <value>True if the ViewGroup should be acted on together during an Activity transition.
            The default value is true when there is a non-null background or if
            <c>#getTransitionName()</c> is not null or if a
            non-null <c>android.view.ViewOutlineProvider</c> other than
            <c>android.view.ViewOutlineProvider#BACKGROUND</c> was given to
            <c>#setOutlineProvider(ViewOutlineProvider)</c> and false otherwise.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#isTransitionGroup()" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.isTransitionGroup()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewGroup#setTransitionGroup(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewGroup.setTransitionGroup(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateViewLayout">
      <MemberSignature Language="F#" Value="abstract member UpdateViewLayout : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit&#xA;override this.UpdateViewLayout : Android.Views.View * Android.Views.ViewGroup.LayoutParams -&gt; unit" Usage="viewGroup.UpdateViewLayout (view, params)" />
      <MemberSignature Language="C#" Value="public virtual void UpdateViewLayout (Android.Views.View? view, Android.Views.ViewGroup.LayoutParams? params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateViewLayout(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.ViewGroup.UpdateViewLayout(Android.Views.View,Android.Views.ViewGroup.LayoutParams)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Android.Views.IViewManager.UpdateViewLayout(Android.Views.View,Android.Views.ViewGroup.LayoutParams)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("updateViewLayout", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetUpdateViewLayout_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <param name="params">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
