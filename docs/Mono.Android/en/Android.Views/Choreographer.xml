<Type Name="Choreographer" FullName="Android.Views.Choreographer">
  <TypeSignature Language="C#" Value="public sealed class Choreographer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Choreographer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/Choreographer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="16">
    <summary>Coordinates the timing of animations, input and drawing.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Coordinates the timing of animations, input and drawing.
 <list type="bullet"><item><term>To post an animation to be processed on a regular time basis synchronized with
 display frame rendering, use <c><see cref="!:Android.Animation.ValueAnimator.start()" /></c>.</term></item><item><term>To post a <c><see cref="T:Java.Lang.IRunnable" /></c> to be invoked once at the beginning of the next display
 frame, use <c><see cref="M:Android.Views.View.PostOnAnimation(Java.Lang.IRunnable)" /></c>.</term></item><item><term>To post a <c><see cref="T:Java.Lang.IRunnable" /></c> to be invoked once at the beginning of the next display
 frame after a delay, use <c><see cref="M:Android.Views.View.PostOnAnimationDelayed(Java.Lang.IRunnable,System.Int64)" /></c>.</term></item><item><term>To post a call to <c><see cref="M:Android.Views.View.Invalidate" /></c> to occur once at the beginning of the
 next display frame, use <c><see cref="M:Android.Views.View.PostInvalidateOnAnimation" /></c> or
 <c><see cref="M:Android.Views.View.PostInvalidateOnAnimation(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>.</term></item><item><term>To ensure that the contents of a <c><see cref="T:Android.Views.View" /></c> scroll smoothly and are drawn in
 sync with display frame rendering, do nothing.  This already happens automatically.
 <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c> will be called at the appropriate time.</term></item></list><list type="bullet"><item><term>If your application does its rendering in a different thread, possibly using GL,
 or does not use the animation framework or view hierarchy at all
 and you want to ensure that it is appropriately synchronized with the display, then use
 <c><see cref="M:Android.Views.Choreographer.PostFrameCallback(.IFrameCallback)" /></c>.</term></item><item><term>... and that's about it.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 The choreographer receives timing pulses (such as vertical synchronization)
 from the display subsystem then schedules work to occur as part of rendering
 the next display frame.
 </para>
      <para tool="javadoc-to-mdoc">
 Applications typically interact with the choreographer indirectly using
 higher level abstractions in the animation framework or the view hierarchy.
 Here are some examples of things you can do using the higher-level APIs.
 </para>
      <para tool="javadoc-to-mdoc">
 However, there are a few cases where you might want to use the functions of the
 choreographer directly in your application.  Here are some examples.
 </para>
      <para tool="javadoc-to-mdoc">
 Each <c><see cref="T:Android.OS.Looper" /></c> thread has its own choreographer.  Other threads can
 post callbacks to run on the choreographer but they will run on the <c><see cref="T:Android.OS.Looper" /></c>
 to which the choreographer belongs.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/Choreographer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Android.Views.Choreographer Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Views.Choreographer Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInstance", "()Landroid/view/Choreographer;", "GetGetInstanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Choreographer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the choreographer for the calling thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the choreographer for the calling thread.  Must be called from
 a thread that already has a <c><see cref="T:Android.OS.Looper" /></c> associated with it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Choreographer.html#getInstance()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if the thread does not have a looper.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PostFrameCallback">
      <MemberSignature Language="C#" Value="public void PostFrameCallback (Android.Views.Choreographer.IFrameCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostFrameCallback(class Android.Views.Choreographer/IFrameCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postFrameCallback", "(Landroid/view/Choreographer$FrameCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.Choreographer+IFrameCallback" />
      </Parameters>
      <Docs>
        <param name="callback">The frame callback to run during the next frame.</param>
        <summary>Posts a frame callback to run on the next frame.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Posts a frame callback to run on the next frame.
 </para>
          <para tool="javadoc-to-mdoc">
 The callback runs once then is automatically removed.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Choreographer.html#postFrameCallback(android.view.Choreographer.FrameCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.Choreographer.PostFrameCallbackDelayed(.IFrameCallback, System.Int64)" />
        <altmember cref="M:Android.Views.Choreographer.RemoveFrameCallback(.IFrameCallback)" />
      </Docs>
    </Member>
    <Member MemberName="PostFrameCallbackDelayed">
      <MemberSignature Language="C#" Value="public void PostFrameCallbackDelayed (Android.Views.Choreographer.IFrameCallback callback, long delayMillis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostFrameCallbackDelayed(class Android.Views.Choreographer/IFrameCallback callback, int64 delayMillis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("postFrameCallbackDelayed", "(Landroid/view/Choreographer$FrameCallback;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.Choreographer+IFrameCallback" />
        <Parameter Name="delayMillis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">The frame callback to run during the next frame.</param>
        <param name="delayMillis">The delay time in milliseconds.</param>
        <summary>Posts a frame callback to run on the next frame after the specified delay.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Posts a frame callback to run on the next frame after the specified delay.
 </para>
          <para tool="javadoc-to-mdoc">
 The callback runs once then is automatically removed.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Choreographer.html#postFrameCallbackDelayed(android.view.Choreographer.FrameCallback, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.Choreographer.PostFrameCallback(.IFrameCallback)" />
        <altmember cref="M:Android.Views.Choreographer.RemoveFrameCallback(.IFrameCallback)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveFrameCallback">
      <MemberSignature Language="C#" Value="public void RemoveFrameCallback (Android.Views.Choreographer.IFrameCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFrameCallback(class Android.Views.Choreographer/IFrameCallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeFrameCallback", "(Landroid/view/Choreographer$FrameCallback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Views.Choreographer+IFrameCallback" />
      </Parameters>
      <Docs>
        <param name="callback">The frame callback to remove.</param>
        <summary>Removes a previously posted frame callback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes a previously posted frame callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Choreographer.html#removeFrameCallback(android.view.Choreographer.FrameCallback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.Choreographer.PostFrameCallback(.IFrameCallback)" />
        <altmember cref="M:Android.Views.Choreographer.PostFrameCallbackDelayed(.IFrameCallback, System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
