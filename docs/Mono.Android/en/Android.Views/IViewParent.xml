<Type Name="IViewParent" FullName="Android.Views.IViewParent">
  <TypeSignature Language="C#" Value="public interface IViewParent : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IViewParent implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.IViewParent" />
  <TypeSignature Language="F#" Value="type IViewParent = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/ViewParent", "", "Android.Views.IViewParentInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/ViewParent", "", "Android.Views.IViewParentInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Defines the responsibilities for a class that will be a parent of a View.</summary>
    <remarks>
      <para>Defines the responsibilities for a class that will be a parent of a View.
            This is the API that a view sees when it wants to interact with its parent.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/ViewParent" title="Reference documentation">Java documentation for <code>android.view.ViewParent</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="BringChildToFront">
      <MemberSignature Language="C#" Value="public void BringChildToFront (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringChildToFront(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.BringChildToFront(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member BringChildToFront : Android.Views.View -&gt; unit" Usage="iViewParent.BringChildToFront child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child to bring to the top of the z order</param>
        <summary>Change the z order of the child so it's on top of all other children.</summary>
        <remarks>
          <para>Change the z order of the child so it's on top of all other children.
            This ordering change may affect layout, if this container
            uses an order-dependent layout scheme (e.g., LinearLayout). Prior
            to <c>android.os.Build.VERSION_CODES#KITKAT</c> this
            method should be followed by calls to <c>#requestLayout()</c> and
            <c>View#invalidate()</c> on this parent to force the parent to redraw
            with the new child ordering.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#bringChildToFront(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.bringChildToFront(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveLayoutDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveLayoutDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveLayoutDirection" />
      <MemberSignature Language="F#" Value="abstract member CanResolveLayoutDirection : unit -&gt; bool" Usage="iViewParent.CanResolveLayoutDirection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canResolveLayoutDirection", "()Z", "GetCanResolveLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canResolveLayoutDirection", "()Z", "GetCanResolveLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the layout direction.</summary>
        <returns>True if this view parent can resolve the layout direction.</returns>
        <remarks>
          <para>Tells if this view parent can resolve the layout direction.
            See <c>View#setLayoutDirection(int)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#canResolveLayoutDirection()" title="Reference documentation">Java documentation for <code>android.view.ViewParent.canResolveLayoutDirection()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextAlignment">
      <MemberSignature Language="C#" Value="public bool CanResolveTextAlignment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextAlignment() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveTextAlignment" />
      <MemberSignature Language="F#" Value="abstract member CanResolveTextAlignment : unit -&gt; bool" Usage="iViewParent.CanResolveTextAlignment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canResolveTextAlignment", "()Z", "GetCanResolveTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canResolveTextAlignment", "()Z", "GetCanResolveTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text alignment.</summary>
        <returns>True if this view parent can resolve the text alignment.</returns>
        <remarks>
          <para>Tells if this view parent can resolve the text alignment.
            See <c>View#setTextAlignment(int)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#canResolveTextAlignment()" title="Reference documentation">Java documentation for <code>android.view.ViewParent.canResolveTextAlignment()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveTextDirection" />
      <MemberSignature Language="F#" Value="abstract member CanResolveTextDirection : unit -&gt; bool" Usage="iViewParent.CanResolveTextDirection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("canResolveTextDirection", "()Z", "GetCanResolveTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("canResolveTextDirection", "()Z", "GetCanResolveTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text direction.</summary>
        <returns>True if this view parent can resolve the text direction.</returns>
        <remarks>
          <para>Tells if this view parent can resolve the text direction.
            See <c>View#setTextDirection(int)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#canResolveTextDirection()" title="Reference documentation">Java documentation for <code>android.view.ViewParent.canResolveTextDirection()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildDrawableStateChanged">
      <MemberSignature Language="C#" Value="public void ChildDrawableStateChanged (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildDrawableStateChanged(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ChildDrawableStateChanged(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ChildDrawableStateChanged : Android.Views.View -&gt; unit" Usage="iViewParent.ChildDrawableStateChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child whose drawable state has changed.</param>
        <summary>This method is called on the parent when a child's drawable state
            has changed.</summary>
        <remarks>
          <para>This method is called on the parent when a child's drawable state
            has changed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#childDrawableStateChanged(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.childDrawableStateChanged(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildHasTransientStateChanged">
      <MemberSignature Language="C#" Value="public void ChildHasTransientStateChanged (Android.Views.View child, bool hasTransientState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildHasTransientStateChanged(class Android.Views.View child, bool hasTransientState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ChildHasTransientStateChanged(Android.Views.View,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ChildHasTransientStateChanged : Android.Views.View * bool -&gt; unit" Usage="iViewParent.ChildHasTransientStateChanged (child, hasTransientState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="hasTransientState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Child view whose state has changed</param>
        <param name="hasTransientState">true if this child has transient state</param>
        <summary>Called when a child view now has or no longer is tracking transient state.</summary>
        <remarks>
          <para>Called when a child view now has or no longer is tracking transient state.</para>
          <para>"Transient state" is any state that a View might hold that is not expected to
            be reflected in the data model that the View currently presents. This state only
            affects the presentation to the user within the View itself, such as the current
            state of animations in progress or the state of a text selection operation.</para>
          <para>Transient state is useful for hinting to other components of the View system
            that a particular view is tracking something complex but encapsulated.
            A <c>ListView</c> for example may acknowledge that list item Views
            with transient state should be preserved within their position or stable item ID
            instead of treating that view as trivially replaceable by the backing adapter.
            This allows adapter implementations to be simpler instead of needing to track
            the state of item view animations in progress such that they could be restored
            in the event of an unexpected recycling and rebinding of attached item views.</para>
          <para>This method is called on a parent view when a child view or a view within
            its subtree begins or ends tracking of internal transient state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#childHasTransientStateChanged(android.view.View,%20boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.childHasTransientStateChanged(android.view.View, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearChildFocus">
      <MemberSignature Language="C#" Value="public void ClearChildFocus (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearChildFocus(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ClearChildFocus(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ClearChildFocus : Android.Views.View -&gt; unit" Usage="iViewParent.ClearChildFocus child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The view that is giving up focus</param>
        <summary>Called when a child of this parent is giving up focus</summary>
        <remarks>
          <para>Called when a child of this parent is giving up focus</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#clearChildFocus(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.clearChildFocus(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateContextMenu">
      <MemberSignature Language="C#" Value="public void CreateContextMenu (Android.Views.IContextMenu? menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateContextMenu(class Android.Views.IContextMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CreateContextMenu(Android.Views.IContextMenu)" />
      <MemberSignature Language="F#" Value="abstract member CreateContextMenu : Android.Views.IContextMenu -&gt; unit" Usage="iViewParent.CreateContextMenu menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createContextMenu", "(Landroid/view/ContextMenu;)V", "GetCreateContextMenu_Landroid_view_ContextMenu_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createContextMenu", "(Landroid/view/ContextMenu;)V", "GetCreateContextMenu_Landroid_view_ContextMenu_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The menu to populate</param>
        <summary>Have the parent populate the specified context menu if it has anything to
            add (and then recurse on its parent).</summary>
        <remarks>
          <para>Have the parent populate the specified context menu if it has anything to
            add (and then recurse on its parent).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#createContextMenu(android.view.ContextMenu)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.createContextMenu(android.view.ContextMenu)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindOnBackInvokedDispatcherForChild">
      <MemberSignature Language="C#" Value="public virtual Android.Window.IOnBackInvokedDispatcher? FindOnBackInvokedDispatcherForChild (Android.Views.View child, Android.Views.View requester);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Window.IOnBackInvokedDispatcher FindOnBackInvokedDispatcherForChild(class Android.Views.View child, class Android.Views.View requester) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.FindOnBackInvokedDispatcherForChild(Android.Views.View,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member FindOnBackInvokedDispatcherForChild : Android.Views.View * Android.Views.View -&gt; Android.Window.IOnBackInvokedDispatcher&#xA;override this.FindOnBackInvokedDispatcherForChild : Android.Views.View * Android.Views.View -&gt; Android.Window.IOnBackInvokedDispatcher" Usage="iViewParent.FindOnBackInvokedDispatcherForChild (child, requester)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("findOnBackInvokedDispatcherForChild", "(Landroid/view/View;Landroid/view/View;)Landroid/window/OnBackInvokedDispatcher;", "GetFindOnBackInvokedDispatcherForChild_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParent, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("findOnBackInvokedDispatcherForChild", "(Landroid/view/View;Landroid/view/View;)Landroid/window/OnBackInvokedDispatcher;", "GetFindOnBackInvokedDispatcherForChild_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParent, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=33)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android33.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android33.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Window.IOnBackInvokedDispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="requester" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The direct child of this view for which to find a dispatcher.</param>
        <param name="requester">The requester that will use the dispatcher. Can be the same as child.</param>
        <summary>Walk up the View hierarchy to find the nearest <c>OnBackInvokedDispatcher</c>.</summary>
        <returns>The <c>OnBackInvokedDispatcher</c> from this or the nearest
            ancestor, or null if the view is both not attached and have no ancestor providing an
            <c>OnBackInvokedDispatcher</c>.</returns>
        <remarks>
          <para>Walk up the View hierarchy to find the nearest <c>OnBackInvokedDispatcher</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#findOnBackInvokedDispatcherForChild(android.view.View,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.findOnBackInvokedDispatcherForChild(android.view.View, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusableViewAvailable">
      <MemberSignature Language="C#" Value="public void FocusableViewAvailable (Android.Views.View? v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FocusableViewAvailable(class Android.Views.View v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.FocusableViewAvailable(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member FocusableViewAvailable : Android.Views.View -&gt; unit" Usage="iViewParent.FocusableViewAvailable v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="v">The view that has become newly focusable</param>
        <summary>Tells the parent that a new focusable view has become available.</summary>
        <remarks>
          <para>Tells the parent that a new focusable view has become available. This is
            to handle transitions from the case where there are no focusable views to
            the case where the first focusable view appears.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#focusableViewAvailable(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.focusableViewAvailable(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="C#" Value="public Android.Views.View? FocusSearch (Android.Views.View? v, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(class Android.Views.View v, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)" />
      <MemberSignature Language="F#" Value="abstract member FocusSearch : Android.Views.View * Android.Views.FocusSearchDirection -&gt; Android.Views.View" Usage="iViewParent.FocusSearch (v, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="v">The view that currently has focus</param>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <summary>Find the nearest view in the specified direction that wants to take focus</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Find the nearest view in the specified direction that wants to take focus</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#focusSearch(android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.focusSearch(android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildVisibleRect">
      <MemberSignature Language="C#" Value="public bool GetChildVisibleRect (Android.Views.View? child, Android.Graphics.Rect? r, Android.Graphics.Point? offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetChildVisibleRect(class Android.Views.View child, class Android.Graphics.Rect r, class Android.Graphics.Point offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)" />
      <MemberSignature Language="F#" Value="abstract member GetChildVisibleRect : Android.Views.View * Android.Graphics.Rect * Android.Graphics.Point -&gt; bool" Usage="iViewParent.GetChildVisibleRect (child, r, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="offset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="child">A child View, whose rectangular visible region we want to compute</param>
        <param name="r">The input rectangle, defined in the child coordinate system. Will be overwritten to
            contain the resulting visible rectangle, expressed in global (root) coordinates</param>
        <param name="offset">The input coordinates of a point, defined in the child coordinate system.
            As with the <c>r</c> parameter, this will be overwritten to contain the global (root)
            coordinates of that point.
            A <c>null</c> value is valid (in case you are not interested in this result)</param>
        <summary>Compute the visible part of a rectangular region defined in terms of a child view's
            coordinates.</summary>
        <returns>true if the resulting rectangle is not empty, false otherwise</returns>
        <remarks>
          <para>Compute the visible part of a rectangular region defined in terms of a child view's
            coordinates.</para>
          <para>Returns the clipped visible part of the rectangle <c>r</c>, defined in the
            <c>child</c>'s local coordinate system. <c>r</c> is modified by this method to
            contain the result, expressed in the global (root) coordinate system.</para>
          <para>The resulting rectangle is always axis aligned. If a rotation is applied to a node in the
            View hierarchy, the result is the axis-aligned bounding box of the visible rectangle.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#getChildVisibleRect(android.view.View,%20android.graphics.Rect,%20android.graphics.Point)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChild">
      <MemberSignature Language="C#" Value="public void InvalidateChild (Android.Views.View? child, Android.Graphics.Rect? r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateChild(class Android.Views.View child, class Android.Graphics.Rect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.InvalidateChild(Android.Views.View,Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateChild : Android.Views.View * Android.Graphics.Rect -&gt; unit" Usage="iViewParent.InvalidateChild (child, r)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "GetInvalidateChild_Landroid_view_View_Landroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "GetInvalidateChild_Landroid_view_View_Landroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="child">The child which is dirty</param>
        <param name="r">The area within the child that is invalid</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <remarks>
          <para>All or part of a child is dirty and needs to be redrawn.</para>
          <para>This member is deprecated. Use <c>#onDescendantInvalidated(View, View)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#invalidateChild(android.view.View,%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.invalidateChild(android.view.View, android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChildInParent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent? InvalidateChildInParent (int[]? location, Android.Graphics.Rect? r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.IViewParent InvalidateChildInParent(int32[] location, class Android.Graphics.Rect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateChildInParent : int[] * Android.Graphics.Rect -&gt; Android.Views.IViewParent" Usage="iViewParent.InvalidateChildInParent (location, r)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.ObsoletedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="location">An array of 2 ints containing the left and top
                   coordinates of the child to invalidate</param>
        <param name="r">The area within the child that is invalid</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <returns>the parent of this ViewParent or null</returns>
        <remarks>
          <para>All or part of a child is dirty and needs to be redrawn.</para>
          <para>The location array is an array of two int values which respectively
            define the left and the top position of the dirty child.</para>
          <para>This method must return the parent of this ViewParent if the specified
            rectangle must be invalidated in the parent. If the specified rectangle
            does not require invalidation in the parent or if the parent does not
            exist, this method must return null.</para>
          <para>When this method returns a non-null value, the location array must
            have been updated with the left and top coordinates of this ViewParent.</para>
          <para>This member is deprecated. Use <c>#onDescendantInvalidated(View, View)</c> instead.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#invalidateChildInParent(int[],%20android.graphics.Rect)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.invalidateChildInParent(int[], android.graphics.Rect)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsLayoutDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutDirectionResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsLayoutDirectionResolved" />
      <MemberSignature Language="F#" Value="member this.IsLayoutDirectionResolved : bool" Usage="Android.Views.IViewParent.IsLayoutDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLayoutDirectionResolved", "()Z", "GetIsLayoutDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLayoutDirectionResolved", "()Z", "GetIsLayoutDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent layout direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutRequested">
      <MemberSignature Language="C#" Value="public bool IsLayoutRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutRequested" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsLayoutRequested" />
      <MemberSignature Language="F#" Value="member this.IsLayoutRequested : bool" Usage="Android.Views.IViewParent.IsLayoutRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLayoutRequested", "()Z", "GetIsLayoutRequestedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLayoutRequested", "()Z", "GetIsLayoutRequestedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether layout was requested on this view parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTextAlignmentResolved">
      <MemberSignature Language="C#" Value="public bool IsTextAlignmentResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextAlignmentResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsTextAlignmentResolved" />
      <MemberSignature Language="F#" Value="member this.IsTextAlignmentResolved : bool" Usage="Android.Views.IViewParent.IsTextAlignmentResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTextAlignmentResolved", "()Z", "GetIsTextAlignmentResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTextAlignmentResolved", "()Z", "GetIsTextAlignmentResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text alignment is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsTextDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextDirectionResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsTextDirectionResolved" />
      <MemberSignature Language="F#" Value="member this.IsTextDirectionResolved : bool" Usage="Android.Views.IViewParent.IsTextDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isTextDirectionResolved", "()Z", "GetIsTextDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isTextDirectionResolved", "()Z", "GetIsTextDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardNavigationClusterSearch">
      <MemberSignature Language="C#" Value="public Android.Views.View? KeyboardNavigationClusterSearch (Android.Views.View? currentCluster, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View KeyboardNavigationClusterSearch(class Android.Views.View currentCluster, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.KeyboardNavigationClusterSearch(Android.Views.View,Android.Views.FocusSearchDirection)" />
      <MemberSignature Language="F#" Value="abstract member KeyboardNavigationClusterSearch : Android.Views.View * Android.Views.FocusSearchDirection -&gt; Android.Views.View" Usage="iViewParent.KeyboardNavigationClusterSearch (currentCluster, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("keyboardNavigationClusterSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetKeyboardNavigationClusterSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("keyboardNavigationClusterSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetKeyboardNavigationClusterSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentCluster" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="currentCluster">The starting point of the search. Null means the current cluster is not
                                  found yet</param>
        <param name="direction">Direction to look</param>
        <summary>Find the nearest keyboard navigation cluster in the specified direction.</summary>
        <returns>The nearest keyboard navigation cluster in the specified direction, or null if none
                    can be found</returns>
        <remarks>
          <para>Find the nearest keyboard navigation cluster in the specified direction.
            This does not actually give focus to that cluster.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#keyboardNavigationClusterSearch(android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.keyboardNavigationClusterSearch(android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDirection">
      <MemberSignature Language="C#" Value="public Android.Views.LayoutDirection LayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.LayoutDirection LayoutDirection" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.LayoutDirection" />
      <MemberSignature Language="F#" Value="member this.LayoutDirection : Android.Views.LayoutDirection" Usage="Android.Views.IViewParent.LayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLayoutDirection", "()I", "GetGetLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLayoutDirection", "()I", "GetGetLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent layout direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifySubtreeAccessibilityStateChanged">
      <MemberSignature Language="C#" Value="public void NotifySubtreeAccessibilityStateChanged (Android.Views.View child, Android.Views.View source, Android.Views.Accessibility.ContentChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySubtreeAccessibilityStateChanged(class Android.Views.View child, class Android.Views.View source, valuetype Android.Views.Accessibility.ContentChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.NotifySubtreeAccessibilityStateChanged(Android.Views.View,Android.Views.View,Android.Views.Accessibility.ContentChangeTypes)" />
      <MemberSignature Language="F#" Value="abstract member NotifySubtreeAccessibilityStateChanged : Android.Views.View * Android.Views.View * Android.Views.Accessibility.ContentChangeTypes -&gt; unit" Usage="iViewParent.NotifySubtreeAccessibilityStateChanged (child, source, changeType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="source" Type="Android.Views.View" />
        <Parameter Name="changeType" Type="Android.Views.Accessibility.ContentChangeTypes">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">The direct child whose subtree has changed.</param>
        <param name="source">The descendant view that changed. May not be <c>null</c>.</param>
        <param name="changeType">A bit mask of the types of changes that occurred. One
                       or more of:
                       &lt;ul&gt;
                       &lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_STATE_DESCRIPTION</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_SUBTREE</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_TEXT</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_UNDEFINED</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_STARTED</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_CANCELLED</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_DRAG_DROPPED</c>&lt;/ul&gt;</param>
        <summary>Notifies a view parent that the accessibility state of one of its
            descendants has changed and that the structure of the subtree is
            different.</summary>
        <remarks>
          <para>Notifies a view parent that the accessibility state of one of its
            descendants has changed and that the structure of the subtree is
            different.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#notifySubtreeAccessibilityStateChanged(android.view.View,%20android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDescendantInvalidated">
      <MemberSignature Language="C#" Value="public virtual void OnDescendantInvalidated (Android.Views.View child, Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDescendantInvalidated(class Android.Views.View child, class Android.Views.View target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnDescendantInvalidated(Android.Views.View,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member OnDescendantInvalidated : Android.Views.View * Android.Views.View -&gt; unit&#xA;override this.OnDescendantInvalidated : Android.Views.View * Android.Views.View -&gt; unit" Usage="iViewParent.OnDescendantInvalidated (child, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onDescendantInvalidated", "(Landroid/view/View;Landroid/view/View;)V", "GetOnDescendantInvalidated_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParent, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onDescendantInvalidated", "(Landroid/view/View;Landroid/view/View;)V", "GetOnDescendantInvalidated_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParent, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android26.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android26.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">The view that needs to redraw</param>
        <summary>The target View has been invalidated, or has had a drawing property changed that
            requires the hierarchy to re-render.</summary>
        <remarks>
          <para>The target View has been invalidated, or has had a drawing property changed that
            requires the hierarchy to re-render.</para>
          <para>This method is called by the View hierarchy to signal ancestors that a View either needs to
            re-record its drawing commands, or drawing properties have changed. This is how Views
            schedule a drawing traversal.</para>
          <para>This signal is generally only dispatched for attached Views, since only they need to draw.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onDescendantInvalidated(android.view.View,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onDescendantInvalidated(android.view.View, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedFling">
      <MemberSignature Language="C#" Value="public bool OnNestedFling (Android.Views.View target, float velocityX, float velocityY, bool consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedFling(class Android.Views.View target, float32 velocityX, float32 velocityY, bool consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedFling(Android.Views.View,System.Single,System.Single,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedFling : Android.Views.View * single * single * bool -&gt; bool" Usage="iViewParent.OnNestedFling (target, velocityX, velocityY, consumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedFling", "(Landroid/view/View;FFZ)Z", "GetOnNestedFling_Landroid_view_View_FFZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedFling", "(Landroid/view/View;FFZ)Z", "GetOnNestedFling_Landroid_view_View_FFZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
        <Parameter Name="consumed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <param name="consumed">true if the child consumed the fling, false otherwise</param>
        <summary>Request a fling from a nested scroll.</summary>
        <returns>true if this parent consumed or otherwise reacted to the fling</returns>
        <remarks>
          <para>Request a fling from a nested scroll.</para>
          <para>This method signifies that a nested scrolling child has detected suitable conditions
            for a fling. Generally this means that a touch scroll has ended with a
            <c>VelocityTracker velocity</c> in the direction of scrolling that meets or exceeds
            the <c>ViewConfiguration#getScaledMinimumFlingVelocity() minimum fling velocity</c>
            along a scrollable axis.</para>
          <para>If a nested scrolling child view would normally fling but it is at the edge of
            its own content, it can use this method to delegate the fling to its nested scrolling
            parent instead. The parent may optionally consume the fling or observe a child fling.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedFling(android.view.View,%20float,%20float,%20boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedFling(android.view.View, float, float, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreFling">
      <MemberSignature Language="C#" Value="public bool OnNestedPreFling (Android.Views.View target, float velocityX, float velocityY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPreFling(class Android.Views.View target, float32 velocityX, float32 velocityY) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPreFling(Android.Views.View,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPreFling : Android.Views.View * single * single -&gt; bool" Usage="iViewParent.OnNestedPreFling (target, velocityX, velocityY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPreFling", "(Landroid/view/View;FF)Z", "GetOnNestedPreFling_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedPreFling", "(Landroid/view/View;FF)Z", "GetOnNestedPreFling_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <summary>React to a nested fling before the target view consumes it.</summary>
        <returns>true if this parent consumed the fling ahead of the target view</returns>
        <remarks>
          <para>React to a nested fling before the target view consumes it.</para>
          <para>This method siginfies that a nested scrolling child has detected a fling with the given
            velocity along each axis. Generally this means that a touch scroll has ended with a
            <c>VelocityTracker velocity</c> in the direction of scrolling that meets or exceeds
            the <c>ViewConfiguration#getScaledMinimumFlingVelocity() minimum fling velocity</c>
            along a scrollable axis.</para>
          <para>If a nested scrolling parent is consuming motion as part of a
            <c>#onNestedPreScroll(View, int, int, int[]) pre-scroll</c>, it may be appropriate for
            it to also consume the pre-fling to complete that same motion. By returning
            <c>true</c> from this method, the parent indicates that the child should not
            fling its own internal content as well.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedPreFling(android.view.View,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedPreFling(android.view.View, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPrePerformAccessibilityAction">
      <MemberSignature Language="C#" Value="public bool OnNestedPrePerformAccessibilityAction (Android.Views.View target, Android.Views.Accessibility.Action action, Android.OS.Bundle? arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPrePerformAccessibilityAction(class Android.Views.View target, valuetype Android.Views.Accessibility.Action action, class Android.OS.Bundle arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPrePerformAccessibilityAction(Android.Views.View,Android.Views.Accessibility.Action,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPrePerformAccessibilityAction : Android.Views.View * Android.Views.Accessibility.Action * Android.OS.Bundle -&gt; bool" Usage="iViewParent.OnNestedPrePerformAccessibilityAction (target, action, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPrePerformAccessibilityAction", "(Landroid/view/View;ILandroid/os/Bundle;)Z", "GetOnNestedPrePerformAccessibilityAction_Landroid_view_View_ILandroid_os_Bundle_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=22)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedPrePerformAccessibilityAction", "(Landroid/view/View;ILandroid/os/Bundle;)Z", "GetOnNestedPrePerformAccessibilityAction_Landroid_view_View_ILandroid_os_Bundle_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=22)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android22.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android22.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="action" Type="Android.Views.Accessibility.Action">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="target">The target view dispatching this action</param>
        <param name="action">Action being performed; see
                          <c>android.view.accessibility.AccessibilityNodeInfo</c></param>
        <param name="arguments">Optional action arguments</param>
        <summary>React to an accessibility action delegated by a target descendant view before the target
            processes it.</summary>
        <returns>true if the action was consumed by this ViewParent</returns>
        <remarks>
          <para>React to an accessibility action delegated by a target descendant view before the target
            processes it.</para>
          <para>This method may be called by a target descendant view if the target wishes to give
            a view in its parent chain a chance to react to the event before normal processing occurs.
            Most commonly this will be a scroll event such as
            <c>android.view.accessibility.AccessibilityNodeInfo#ACTION_SCROLL_FORWARD</c>.
            A ViewParent that supports acting as a nested scrolling parent should override this
            method and act accordingly to implement scrolling via accesibility systems.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedPrePerformAccessibilityAction(android.view.View,%20int,%20android.os.Bundle)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreScroll">
      <MemberSignature Language="C#" Value="public void OnNestedPreScroll (Android.Views.View target, int dx, int dy, int[] consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedPreScroll(class Android.Views.View target, int32 dx, int32 dy, int32[] consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPreScroll(Android.Views.View,System.Int32,System.Int32,System.Int32[])" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPreScroll : Android.Views.View * int * int * int[] -&gt; unit" Usage="iViewParent.OnNestedPreScroll (target, dx, dy, consumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedPreScroll", "(Landroid/view/View;II[I)V", "GetOnNestedPreScroll_Landroid_view_View_IIarrayIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedPreScroll", "(Landroid/view/View;II[I)V", "GetOnNestedPreScroll_Landroid_view_View_IIarrayIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
        <Parameter Name="consumed" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="dx">Horizontal scroll distance in pixels</param>
        <param name="dy">Vertical scroll distance in pixels</param>
        <param name="consumed">Output. The horizontal and vertical scroll distance consumed by this parent</param>
        <summary>React to a nested scroll in progress before the target view consumes a portion of the scroll.</summary>
        <remarks>
          <para>React to a nested scroll in progress before the target view consumes a portion of the scroll.</para>
          <para>When working with nested scrolling often the parent view may want an opportunity
            to consume the scroll before the nested scrolling child does. An example of this is a
            drawer that contains a scrollable list. The user will want to be able to scroll the list
            fully into view before the list itself begins scrolling.</para>
          <para>
            <c>onNestedPreScroll</c> is called when a nested scrolling child invokes
            <c>View#dispatchNestedPreScroll(int, int, int[], int[])</c>. The implementation should
            report how any pixels of the scroll reported by dx, dy were consumed in the
            <c>consumed</c> array. Index 0 corresponds to dx and index 1 corresponds to dy.
            This parameter will never be null. Initial values for consumed[0] and consumed[1]
            will always be 0.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedPreScroll(android.view.View,%20int,%20int,%20int[])" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedPreScroll(android.view.View, int, int, int[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScroll">
      <MemberSignature Language="C#" Value="public void OnNestedScroll (Android.Views.View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScroll(class Android.Views.View target, int32 dxConsumed, int32 dyConsumed, int32 dxUnconsumed, int32 dyUnconsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedScroll(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedScroll : Android.Views.View * int * int * int * int -&gt; unit" Usage="iViewParent.OnNestedScroll (target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedScroll", "(Landroid/view/View;IIII)V", "GetOnNestedScroll_Landroid_view_View_IIIIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedScroll", "(Landroid/view/View;IIII)V", "GetOnNestedScroll_Landroid_view_View_IIIIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dxConsumed" Type="System.Int32" />
        <Parameter Name="dyConsumed" Type="System.Int32" />
        <Parameter Name="dxUnconsumed" Type="System.Int32" />
        <Parameter Name="dyUnconsumed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="target">The descendent view controlling the nested scroll</param>
        <param name="dxConsumed">Horizontal scroll distance in pixels already consumed by target</param>
        <param name="dyConsumed">Vertical scroll distance in pixels already consumed by target</param>
        <param name="dxUnconsumed">Horizontal scroll distance in pixels not consumed by target</param>
        <param name="dyUnconsumed">Vertical scroll distance in pixels not consumed by target</param>
        <summary>React to a nested scroll in progress.</summary>
        <remarks>
          <para>React to a nested scroll in progress.</para>
          <para>This method will be called when the ViewParent's current nested scrolling child view
            dispatches a nested scroll event. To receive calls to this method the ViewParent must have
            previously returned <c>true</c> for a call to
            <c>#onStartNestedScroll(View, View, int)</c>.</para>
          <para>Both the consumed and unconsumed portions of the scroll distance are reported to the
            ViewParent. An implementation may choose to use the consumed portion to match or chase scroll
            position of multiple child elements, for example. The unconsumed portion may be used to
            allow continuous dragging of multiple scrolling or draggable elements, such as scrolling
            a list within a vertical drawer where the drawer begins dragging once the edge of inner
            scrolling content is reached.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedScroll(android.view.View,%20int,%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedScroll(android.view.View, int, int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScrollAccepted">
      <MemberSignature Language="C#" Value="public void OnNestedScrollAccepted (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScrollAccepted(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedScrollAccepted(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedScrollAccepted : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; unit" Usage="iViewParent.OnNestedScrollAccepted (child, target, nestedScrollAxes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onNestedScrollAccepted", "(Landroid/view/View;Landroid/view/View;I)V", "GetOnNestedScrollAccepted_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onNestedScrollAccepted", "(Landroid/view/View;Landroid/view/View;I)V", "GetOnNestedScrollAccepted_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c>View#SCROLL_AXIS_HORIZONTAL</c>,
                                    <c>View#SCROLL_AXIS_VERTICAL</c> or both</param>
        <summary>React to the successful claiming of a nested scroll operation.</summary>
        <remarks>
          <para>React to the successful claiming of a nested scroll operation.</para>
          <para>This method will be called after
            <c>#onStartNestedScroll(View, View, int) onStartNestedScroll</c> returns true. It offers
            an opportunity for the view and its superclasses to perform initial configuration
            for the nested scroll. Implementations of this method should always call their superclass's
            implementation of this method if one is present.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onNestedScrollAccepted(android.view.View,%20android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onNestedScrollAccepted(android.view.View, android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View, Android.Views.View, Android.Views.View)" />
        <altmember cref="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="OnStartNestedScroll">
      <MemberSignature Language="C#" Value="public bool OnStartNestedScroll (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStartNestedScroll(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberSignature Language="F#" Value="abstract member OnStartNestedScroll : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; bool" Usage="iViewParent.OnStartNestedScroll (child, target, nestedScrollAxes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStartNestedScroll", "(Landroid/view/View;Landroid/view/View;I)Z", "GetOnStartNestedScroll_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStartNestedScroll", "(Landroid/view/View;Landroid/view/View;I)Z", "GetOnStartNestedScroll_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c>View#SCROLL_AXIS_HORIZONTAL</c>,
                                    <c>View#SCROLL_AXIS_VERTICAL</c> or both</param>
        <summary>React to a descendant view initiating a nestable scroll operation, claiming the
            nested scroll operation if appropriate.</summary>
        <returns>true if this ViewParent accepts the nested scroll operation</returns>
        <remarks>
          <para>React to a descendant view initiating a nestable scroll operation, claiming the
            nested scroll operation if appropriate.</para>
          <para>This method will be called in response to a descendant view invoking
            <c>View#startNestedScroll(int)</c>. Each parent up the view hierarchy will be
            given an opportunity to respond and claim the nested scrolling operation by returning
            <c>true</c>.</para>
          <para>This method may be overridden by ViewParent implementations to indicate when the view
            is willing to support a nested scrolling operation that is about to begin. If it returns
            true, this ViewParent will become the target view's nested scrolling parent for the duration
            of the scroll operation in progress. When the nested scroll is finished this ViewParent
            will receive a call to <c>#onStopNestedScroll(View)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onStartNestedScroll(android.view.View,%20android.view.View,%20int)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onStartNestedScroll(android.view.View, android.view.View, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopNestedScroll">
      <MemberSignature Language="C#" Value="public void OnStopNestedScroll (Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStopNestedScroll(class Android.Views.View target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member OnStopNestedScroll : Android.Views.View -&gt; unit" Usage="iViewParent.OnStopNestedScroll target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onStopNestedScroll", "(Landroid/view/View;)V", "GetOnStopNestedScroll_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onStopNestedScroll", "(Landroid/view/View;)V", "GetOnStopNestedScroll_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <summary>React to a nested scroll operation ending.</summary>
        <remarks>
          <para>React to a nested scroll operation ending.</para>
          <para>Perform cleanup after a nested scrolling operation.
            This method will be called when a nested scroll stops, for example when a nested touch
            scroll ends with a <c>MotionEvent#ACTION_UP</c> or <c>MotionEvent#ACTION_CANCEL</c> event.
            Implementations of this method should always call their superclass's implementation of this
            method if one is present.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#onStopNestedScroll(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.onStopNestedScroll(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent? Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent Parent" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Android.Views.IViewParent" Usage="Android.Views.IViewParent.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParent", "()Landroid/view/ViewParent;", "GetGetParentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParent", "()Landroid/view/ViewParent;", "GetGetParentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the parent if it exists, or null.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentForAccessibility">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent? ParentForAccessibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent ParentForAccessibility" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.ParentForAccessibility" />
      <MemberSignature Language="F#" Value="member this.ParentForAccessibility : Android.Views.IViewParent" Usage="Android.Views.IViewParent.ParentForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParentForAccessibility", "()Landroid/view/ViewParent;", "GetGetParentForAccessibilityHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParentForAccessibility", "()Landroid/view/ViewParent;", "GetGetParentForAccessibilityHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of a given View for accessibility.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RecomputeViewAttributes">
      <MemberSignature Language="C#" Value="public void RecomputeViewAttributes (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecomputeViewAttributes(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RecomputeViewAttributes(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RecomputeViewAttributes : Android.Views.View -&gt; unit" Usage="iViewParent.RecomputeViewAttributes child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View whose attributes have changed.</param>
        <summary>Tell view hierarchy that the global view attributes need to be
            re-evaluated.</summary>
        <remarks>
          <para>Tell view hierarchy that the global view attributes need to be
            re-evaluated.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#recomputeViewAttributes(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.recomputeViewAttributes(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildFocus">
      <MemberSignature Language="C#" Value="public void RequestChildFocus (Android.Views.View? child, Android.Views.View? focused);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestChildFocus(class Android.Views.View child, class Android.Views.View focused) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestChildFocus(Android.Views.View,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RequestChildFocus : Android.Views.View * Android.Views.View -&gt; unit" Usage="iViewParent.RequestChildFocus (child, focused)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="focused" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child of this ViewParent that wants focus. This view
                   will contain the focused view. It is not necessarily the view that
                   actually has focus.</param>
        <param name="focused">The view that is a descendant of child that actually has
                   focus</param>
        <summary>Called when a child of this parent wants focus</summary>
        <remarks>
          <para>Called when a child of this parent wants focus</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestChildFocus(android.view.View,%20android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestChildFocus(android.view.View, android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildRectangleOnScreen">
      <MemberSignature Language="C#" Value="public bool RequestChildRectangleOnScreen (Android.Views.View child, Android.Graphics.Rect? rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestChildRectangleOnScreen(class Android.Views.View child, class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RequestChildRectangleOnScreen : Android.Views.View * Android.Graphics.Rect * bool -&gt; bool" Usage="iViewParent.RequestChildRectangleOnScreen (child, rectangle, immediate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The direct child making the request.</param>
        <param name="rectangle">The rectangle in the child's coordinates the child
                   wishes to be on the screen.</param>
        <param name="immediate">True to forbid animated or delayed scrolling,
                   false otherwise</param>
        <summary>Called when a child of this group wants a particular rectangle to be
            positioned onto the screen.</summary>
        <returns>Whether the group scrolled to handle the operation</returns>
        <remarks>
          <para>Called when a child of this group wants a particular rectangle to be
            positioned onto the screen.  <c>ViewGroup</c>s overriding this can trust
            that:
            &lt;ul&gt;
              &lt;li&gt;child will be a direct child of this group&lt;/li&gt;
              &lt;li&gt;rectangle will be in the child's content coordinates&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>
            <c>ViewGroup</c>s overriding this should uphold the contract:</para>
          <para>&lt;ul&gt;
              &lt;li&gt;nothing will change if the rectangle is already visible&lt;/li&gt;
              &lt;li&gt;the view port will be scrolled only just enough to make the
                  rectangle visible&lt;/li&gt;
            &lt;ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestChildRectangleOnScreen(android.view.View,%20android.graphics.Rect,%20boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestDisallowInterceptTouchEvent">
      <MemberSignature Language="C#" Value="public void RequestDisallowInterceptTouchEvent (bool disallowIntercept);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestDisallowInterceptTouchEvent(bool disallowIntercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestDisallowInterceptTouchEvent(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RequestDisallowInterceptTouchEvent : bool -&gt; unit" Usage="iViewParent.RequestDisallowInterceptTouchEvent disallowIntercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disallowIntercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disallowIntercept">True if the child does not want the parent to
                       intercept touch events.</param>
        <summary>Called when a child does not want this parent and its ancestors to
            intercept touch events with
            <c>ViewGroup#onInterceptTouchEvent(MotionEvent)</c>.</summary>
        <remarks>
          <para>Called when a child does not want this parent and its ancestors to
            intercept touch events with
            <c>ViewGroup#onInterceptTouchEvent(MotionEvent)</c>.</para>
          <para>This parent should pass this call onto its parents. This parent must obey
            this request for the duration of the touch (that is, only clear the flag
            after this parent has received an up or a cancel.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestDisallowInterceptTouchEvent(boolean)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestDisallowInterceptTouchEvent(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFitSystemWindows">
      <MemberSignature Language="C#" Value="public void RequestFitSystemWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestFitSystemWindows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestFitSystemWindows" />
      <MemberSignature Language="F#" Value="abstract member RequestFitSystemWindows : unit -&gt; unit" Usage="iViewParent.RequestFitSystemWindows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestFitSystemWindows", "()V", "GetRequestFitSystemWindowsHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestFitSystemWindows", "()V", "GetRequestFitSystemWindowsHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that a new dispatch of <c>View#fitSystemWindows(Rect)
            View.fitSystemWindows(Rect)</c> be performed.</summary>
        <remarks>
          <para>Ask that a new dispatch of <c>View#fitSystemWindows(Rect)
            View.fitSystemWindows(Rect)</c> be performed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestFitSystemWindows()" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestFitSystemWindows()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RequestLayout">
      <MemberSignature Language="C#" Value="public void RequestLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestLayout" />
      <MemberSignature Language="F#" Value="abstract member RequestLayout : unit -&gt; unit" Usage="iViewParent.RequestLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestLayout", "()V", "GetRequestLayoutHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestLayout", "()V", "GetRequestLayoutHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when something has changed which has invalidated the layout of a
            child of this view parent.</summary>
        <remarks>
          <para>Called when something has changed which has invalidated the layout of a
            child of this view parent. This will schedule a layout pass of the view
            tree.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestLayout()" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestLayout()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public bool RequestSendAccessibilityEvent (Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent? e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" />
      <MemberSignature Language="F#" Value="abstract member RequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool" Usage="iViewParent.RequestSendAccessibilityEvent (child, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event to be sent.</param>
        <param name="child">The child which requests sending the event.</param>
        <param name="event">The event to be sent.</param>
        <summary>Called by a child to request from its parent to send an <c>AccessibilityEvent</c>.</summary>
        <returns>True if the event was sent.</returns>
        <remarks>
          <para>Called by a child to request from its parent to send an <c>AccessibilityEvent</c>.
            The child has already populated a record for itself in the event and is delegating
            to its parent to send the event. The parent can optionally add a record for itself.</para>
          <para>Note: An accessibility event is fired by an individual view which populates the
                  event with a record for its state and requests from its parent to perform
                  the sending. The parent can optionally add a record for itself before
                  dispatching the request to its parent. A parent can also choose not to
                  respect the request for sending the event. The accessibility event is sent
                  by the topmost view in the view tree.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestSendAccessibilityEvent(android.view.View,%20android.view.accessibility.AccessibilityEvent)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="RequestTransparentRegion">
      <MemberSignature Language="C#" Value="public void RequestTransparentRegion (Android.Views.View? child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTransparentRegion(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestTransparentRegion(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RequestTransparentRegion : Android.Views.View -&gt; unit" Usage="iViewParent.RequestTransparentRegion child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view requesting the transparent region computation</param>
        <summary>Called when a child wants the view hierarchy to gather and report
            transparent regions to the window compositor.</summary>
        <remarks>
          <para>Called when a child wants the view hierarchy to gather and report
            transparent regions to the window compositor. Views that "punch" holes in
            the view hierarchy, such as SurfaceView can use this API to improve
            performance of the system. When no such a view is present in the
            hierarchy, this optimization in unnecessary and might slightly reduce the
            view hierarchy performance.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#requestTransparentRegion(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.requestTransparentRegion(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public bool ShowContextMenuForChild (Android.Views.View? originalView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View -&gt; bool" Usage="iViewParent.ShowContextMenuForChild originalView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="originalView">the source view where the context menu was first
                                invoked</param>
        <summary>Shows the context menu for the specified view or its ancestors.</summary>
        <returns>
          <c>true</c> if the context menu was shown, <c>false</c>
                    otherwise</returns>
        <remarks>
          <para>Shows the context menu for the specified view or its ancestors.</para>
          <para>In most cases, a subclass does not need to override this. However, if
            the subclass is added directly to the window manager (for example,
            <c>ViewManager#addView(View, android.view.ViewGroup.LayoutParams)</c>)
            then it should override this and show the context menu.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#showContextMenuForChild(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.showContextMenuForChild(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public bool ShowContextMenuForChild (Android.Views.View? originalView, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View * single * single -&gt; bool" Usage="iViewParent.ShowContextMenuForChild (originalView, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;FF)Z", "GetShowContextMenuForChild_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;FF)Z", "GetShowContextMenuForChild_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="originalView">the source view where the context menu was first
                                invoked</param>
        <param name="x">the X coordinate in pixels relative to the original view to
                     which the menu should be anchored, or <c>Float#NaN</c> to
                     disable anchoring</param>
        <param name="y">the Y coordinate in pixels relative to the original view to
                     which the menu should be anchored, or <c>Float#NaN</c> to
                     disable anchoring</param>
        <summary>Shows the context menu for the specified view or its ancestors anchored
            to the specified view-relative coordinate.</summary>
        <returns>
          <c>true</c> if the context menu was shown, <c>false</c>
                    otherwise</returns>
        <remarks>
          <para>Shows the context menu for the specified view or its ancestors anchored
            to the specified view-relative coordinate.</para>
          <para>In most cases, a subclass does not need to override this. However, if
            the subclass is added directly to the window manager (for example,
            <c>ViewManager#addView(View, android.view.ViewGroup.LayoutParams)</c>)
            then it should override this and show the context menu.</para>
          <para>If a subclass overrides this method it should also override
            <c>#showContextMenuForChild(View)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#showContextMenuForChild(android.view.View,%20float,%20float)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.showContextMenuForChild(android.view.View, float, float)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public Android.Views.ActionMode? StartActionModeForChild (Android.Views.View? originalView, Android.Views.ActionMode.ICallback? callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)" />
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode" Usage="iViewParent.StartActionModeForChild (originalView, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <summary>Start an action mode for the specified view with the default type
            <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The new action mode if it was started, null otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#startActionModeForChild(android.view.View,%20android.view.Callback)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.startActionModeForChild(android.view.View, android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View, .ICallback, .ICallback)" />
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public Android.Views.ActionMode? StartActionModeForChild (Android.Views.View? originalView, Android.Views.ActionMode.ICallback? callback, Android.Views.ActionModeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback, valuetype Android.Views.ActionModeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)" />
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode" Usage="iViewParent.StartActionModeForChild (originalView, callback, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=23)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=23)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android23.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android23.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
        <Parameter Name="type" Type="Android.Views.ActionModeType">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <param name="type">To be added.</param>
        <summary>Start an action mode for the specified view with the default type
            <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The new action mode if it was started, null otherwise</returns>
        <remarks>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/ViewParent#startActionModeForChild(android.view.View,%20android.view.Callback)" title="Reference documentation">Java documentation for <code>android.view.ViewParent.startActionModeForChild(android.view.View, android.view.Callback)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public Android.Views.TextAlignment TextAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.TextAlignment" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : Android.Views.TextAlignment" Usage="Android.Views.IViewParent.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTextAlignment", "()I", "GetGetTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTextAlignment", "()I", "GetGetTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text alignment.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDirection">
      <MemberSignature Language="C#" Value="public Android.Views.TextDirection TextDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextDirection TextDirection" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.TextDirection" />
      <MemberSignature Language="F#" Value="member this.TextDirection : Android.Views.TextDirection" Usage="Android.Views.IViewParent.TextDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTextDirection", "()I", "GetGetTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTextDirection", "()I", "GetGetTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
