<Type Name="IViewParent" FullName="Android.Views.IViewParent">
  <TypeSignature Language="C#" Value="public interface IViewParent : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IViewParent implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ViewParent", "", "Android.Views.IViewParentInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Defines the responsibilities for a class that will be a parent of a View.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Defines the responsibilities for a class that will be a parent of a View.
 This is the API that a view sees when it wants to interact with its parent.
 
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/ViewParent.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="BringChildToFront">
      <MemberSignature Language="C#" Value="public void BringChildToFront (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringChildToFront(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child to bring to the top of the z order
</param>
        <summary>Change the z order of the child so it's on top of all other children.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Change the z order of the child so it's on top of all other children.
 This ordering change may affect layout, if this container
 uses an order-dependent layout scheme (e.g., LinearLayout). Prior
 to <c><see cref="F:Android.OS.Build+VERSION_CODES.KitKat" tool="ReplaceLinkValue" /></c> this
 method should be followed by calls to <c><see cref="M:Android.Views.IViewParent.RequestLayout" /></c> and
 <c><see cref="M:Android.Views.View.Invalidate" /></c> on this parent to force the parent to redraw
 with the new child ordering.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#bringChildToFront(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveLayoutDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveLayoutDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveLayoutDirection", "()Z", "GetCanResolveLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the layout direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent can resolve the layout direction.
 See <c><see cref="P:Android.Views.View.LayoutDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#canResolveLayoutDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextAlignment">
      <MemberSignature Language="C#" Value="public bool CanResolveTextAlignment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextAlignment() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextAlignment", "()Z", "GetCanResolveTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text alignment.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent can resolve the text alignment.
 See <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#canResolveTextAlignment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextDirection", "()Z", "GetCanResolveTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text direction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent can resolve the text direction.
 See <c><see cref="P:Android.Views.View.TextDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#canResolveTextDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildDrawableStateChanged">
      <MemberSignature Language="C#" Value="public void ChildDrawableStateChanged (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildDrawableStateChanged(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child whose drawable state has changed.
</param>
        <summary>This method is called on the parent when a child's drawable state
 has changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This method is called on the parent when a child's drawable state
 has changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#childDrawableStateChanged(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildHasTransientStateChanged">
      <MemberSignature Language="C#" Value="public void ChildHasTransientStateChanged (Android.Views.View child, bool hasTransientState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildHasTransientStateChanged(class Android.Views.View child, bool hasTransientState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="hasTransientState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Child view whose state has changed</param>
        <param name="hasTransientState">true if this child has transient state
</param>
        <summary>Called when a child view now has or no longer is tracking transient state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child view now has or no longer is tracking transient state.

 </para>
          <para tool="javadoc-to-mdoc">"Transient state" is any state that a View might hold that is not expected to
 be reflected in the data model that the View currently presents. This state only
 affects the presentation to the user within the View itself, such as the current
 state of animations in progress or the state of a text selection operation.</para>
          <para tool="javadoc-to-mdoc">Transient state is useful for hinting to other components of the View system
 that a particular view is tracking something complex but encapsulated.
 A <c>ListView</c> for example may acknowledge that list item Views
 with transient state should be preserved within their position or stable item ID
 instead of treating that view as trivially replaceable by the backing adapter.
 This allows adapter implementations to be simpler instead of needing to track
 the state of item view animations in progress such that they could be restored
 in the event of an unexpected recycling and rebinding of attached item views.</para>
          <para tool="javadoc-to-mdoc">This method is called on a parent view when a child view or a view within
 its subtree begins or ends tracking of internal transient state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#childHasTransientStateChanged(android.view.View, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearChildFocus">
      <MemberSignature Language="C#" Value="public void ClearChildFocus (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearChildFocus(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The view that is giving up focus
</param>
        <summary>Called when a child of this parent is giving up focus</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child of this parent is giving up focus</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#clearChildFocus(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateContextMenu">
      <MemberSignature Language="C#" Value="public void CreateContextMenu (Android.Views.IContextMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateContextMenu(class Android.Views.IContextMenu menu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createContextMenu", "(Landroid/view/ContextMenu;)V", "GetCreateContextMenu_Landroid_view_ContextMenu_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The menu to populate
</param>
        <summary>Have the parent populate the specified context menu if it has anything to
 add (and then recurse on its parent).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Have the parent populate the specified context menu if it has anything to
 add (and then recurse on its parent).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#createContextMenu(android.view.ContextMenu)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusableViewAvailable">
      <MemberSignature Language="C#" Value="public void FocusableViewAvailable (Android.Views.View v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FocusableViewAvailable(class Android.Views.View v) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="v">The view that has become newly focusable
</param>
        <summary>Tells the parent that a new focusable view has become available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells the parent that a new focusable view has become available. This is
 to handle transitions from the case where there are no focusable views to
 the case where the first focusable view appears.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#focusableViewAvailable(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="C#" Value="public Android.Views.View FocusSearch (Android.Views.View v, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(class Android.Views.View v, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="v">The view that currently has focus</param>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT
</param>
        <summary>Find the nearest view in the specified direction that wants to take focus</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Find the nearest view in the specified direction that wants to take focus</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#focusSearch(android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildVisibleRect">
      <MemberSignature Language="C#" Value="public bool GetChildVisibleRect (Android.Views.View child, Android.Graphics.Rect r, Android.Graphics.Point offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetChildVisibleRect(class Android.Views.View child, class Android.Graphics.Rect r, class Android.Graphics.Point offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="offset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="child">A child View, whose rectangular visible region we want to compute</param>
        <param name="r">The input rectangle, defined in the child coordinate system. Will be overwritten to
 contain the resulting visible rectangle, expressed in global (root) coordinates</param>
        <param name="offset">The input coordinates of a point, defined in the child coordinate system.
 As with the <c>r</c> parameter, this will be overwritten to contain the global (root)
 coordinates of that point.
 A <c>null</c> value is valid (in case you are not interested in this result)</param>
        <summary>Compute the visible part of a rectangular region defined in terms of a child view's
 coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compute the visible part of a rectangular region defined in terms of a child view's
 coordinates.

 </para>
          <para tool="javadoc-to-mdoc">Returns the clipped visible part of the rectangle <c>r</c>, defined in the
 <c>child</c>'s local coordinate system. <c>r</c> is modified by this method to
 contain the result, expressed in the global (root) coordinate system.</para>
          <para tool="javadoc-to-mdoc">The resulting rectangle is always axis aligned. If a rotation is applied to a node in the
 View hierarchy, the result is the axis-aligned bounding box of the visible rectangle.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChild">
      <MemberSignature Language="C#" Value="public void InvalidateChild (Android.Views.View child, Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateChild(class Android.Views.View child, class Android.Graphics.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "GetInvalidateChild_Landroid_view_View_Landroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="child">The child which is dirty</param>
        <param name="r">The area within the child that is invalid
</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">All or part of a child is dirty and needs to be redrawn.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#invalidateChild(android.view.View, android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChildInParent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent InvalidateChildInParent (int[] location, Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.IViewParent InvalidateChildInParent(int32[] location, class Android.Graphics.Rect r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="location">An array of 2 ints containing the left and top
        coordinates of the child to invalidate</param>
        <param name="r">The area within the child that is invalid</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">All or part of a child is dirty and needs to be redrawn.

 </para>
          <para tool="javadoc-to-mdoc">The location array is an array of two int values which respectively
 define the left and the top position of the dirty child.</para>
          <para tool="javadoc-to-mdoc">This method must return the parent of this ViewParent if the specified
 rectangle must be invalidated in the parent. If the specified rectangle
 does not require invalidation in the parent or if the parent does not
 exist, this method must return null.</para>
          <para tool="javadoc-to-mdoc">When this method returns a non-null value, the location array must
 have been updated with the left and top coordinates of this ViewParent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#invalidateChildInParent(int[], android.graphics.Rect)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsLayoutDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutDirectionResolved", "()Z", "GetIsLayoutDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent layout direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent layout direction is resolved.
 See <c><see cref="P:Android.Views.View.LayoutDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#isLayoutDirectionResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutRequested">
      <MemberSignature Language="C#" Value="public bool IsLayoutRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutRequested", "()Z", "GetIsLayoutRequestedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether layout was requested on this view parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether layout was requested on this view parent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#isLayoutRequested()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTextAlignmentResolved">
      <MemberSignature Language="C#" Value="public bool IsTextAlignmentResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextAlignmentResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextAlignmentResolved", "()Z", "GetIsTextAlignmentResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text alignment is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent text alignment is resolved.
 See <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#isTextAlignmentResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsTextDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextDirectionResolved", "()Z", "GetIsTextDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Tells if this view parent text direction is resolved.
 See <c><see cref="P:Android.Views.View.TextDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#isTextDirectionResolved()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDirection">
      <MemberSignature Language="C#" Value="public Android.Views.LayoutDirection LayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.LayoutDirection LayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutDirection", "()I", "GetGetLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent layout direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return this view parent layout direction. See <c><see cref="P:Android.Views.View.LayoutDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getLayoutDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifySubtreeAccessibilityStateChanged">
      <MemberSignature Language="C#" Value="public void NotifySubtreeAccessibilityStateChanged (Android.Views.View child, Android.Views.View source, Android.Views.Accessibility.ContentChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySubtreeAccessibilityStateChanged(class Android.Views.View child, class Android.Views.View source, valuetype Android.Views.Accessibility.ContentChangeTypes changeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="source" Type="Android.Views.View" />
        <Parameter Name="changeType" Type="Android.Views.Accessibility.ContentChangeTypes">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">The direct child whose subtree has changed.</param>
        <param name="source">The descendant view that changed.</param>
        <param name="changeType">A bit mask of the types of changes that occurred. One
            or more of:
            <list type="bullet"><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeContentDescription" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeSubtree" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeText" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeUndefined" /></c></term></item></term></item></term></item></term></item></list></param>
        <summary>Notifies a view parent that the accessibility state of one of its
 descendants has changed and that the structure of the subtree is
 different.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies a view parent that the accessibility state of one of its
 descendants has changed and that the structure of the subtree is
 different.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedFling">
      <MemberSignature Language="C#" Value="public bool OnNestedFling (Android.Views.View target, float velocityX, float velocityY, bool consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedFling(class Android.Views.View target, float32 velocityX, float32 velocityY, bool consumed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedFling", "(Landroid/view/View;FFZ)Z", "GetOnNestedFling_Landroid_view_View_FFZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
        <Parameter Name="consumed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <param name="consumed">true if the child consumed the fling, false otherwise</param>
        <summary>Request a fling from a nested scroll.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Request a fling from a nested scroll.

 </para>
          <para tool="javadoc-to-mdoc">This method signifies that a nested scrolling child has detected suitable conditions
 for a fling. Generally this means that a touch scroll has ended with a
 <c><see cref="T:Android.Views.VelocityTracker" /></c> in the direction of scrolling that meets or exceeds
 the <c><see cref="P:Android.Views.ViewConfiguration.ScaledMinimumFlingVelocity" /></c>
 along a scrollable axis.</para>
          <para tool="javadoc-to-mdoc">If a nested scrolling child view would normally fling but it is at the edge of
 its own content, it can use this method to delegate the fling to its nested scrolling
 parent instead. The parent may optionally consume the fling or observe a child fling.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onNestedFling(android.view.View, float, float, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreFling">
      <MemberSignature Language="C#" Value="public bool OnNestedPreFling (Android.Views.View target, float velocityX, float velocityY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPreFling(class Android.Views.View target, float32 velocityX, float32 velocityY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedPreFling", "(Landroid/view/View;FF)Z", "GetOnNestedPreFling_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <summary>React to a nested fling before the target view consumes it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">React to a nested fling before the target view consumes it.

 </para>
          <para tool="javadoc-to-mdoc">This method siginfies that a nested scrolling child has detected a fling with the given
 velocity along each axis. Generally this means that a touch scroll has ended with a
 <c><see cref="T:Android.Views.VelocityTracker" /></c> in the direction of scrolling that meets or exceeds
 the <c><see cref="P:Android.Views.ViewConfiguration.ScaledMinimumFlingVelocity" /></c>
 along a scrollable axis.</para>
          <para tool="javadoc-to-mdoc">If a nested scrolling parent is consuming motion as part of a
 <c><see cref="M:Android.Views.IViewParent.OnNestedPreScroll(Android.Views.View,System.Int32,System.Int32,System.Int32)" /></c>, it may be appropriate for
 it to also consume the pre-fling to complete that same motion. By returning
 <c>true</c> from this method, the parent indicates that the child should not
 fling its own internal content as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onNestedPreFling(android.view.View, float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreScroll">
      <MemberSignature Language="C#" Value="public void OnNestedPreScroll (Android.Views.View target, int dx, int dy, int[] consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedPreScroll(class Android.Views.View target, int32 dx, int32 dy, int32[] consumed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedPreScroll", "(Landroid/view/View;II[I)V", "GetOnNestedPreScroll_Landroid_view_View_IIarrayIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
        <Parameter Name="consumed" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="dx">Horizontal scroll distance in pixels</param>
        <param name="dy">Vertical scroll distance in pixels</param>
        <param name="consumed">Output. The horizontal and vertical scroll distance consumed by this parent
</param>
        <summary>React to a nested scroll in progress before the target view consumes a portion of the scroll.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">React to a nested scroll in progress before the target view consumes a portion of the scroll.

 </para>
          <para tool="javadoc-to-mdoc">When working with nested scrolling often the parent view may want an opportunity
 to consume the scroll before the nested scrolling child does. An example of this is a
 drawer that contains a scrollable list. The user will want to be able to scroll the list
 fully into view before the list itself begins scrolling.</para>
          <para tool="javadoc-to-mdoc">
            <c>onNestedPreScroll</c> is called when a nested scrolling child invokes
 <c><see cref="M:Android.Views.View.DispatchNestedPreScroll(System.Int32,System.Int32,System.Int32,System.Int32)" /></c>. The implementation should
 report how any pixels of the scroll reported by dx, dy were consumed in the
 <c>consumed</c> array. Index 0 corresponds to dx and index 1 corresponds to dy.
 This parameter will never be null. Initial values for consumed[0] and consumed[1]
 will always be 0.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onNestedPreScroll(android.view.View, int, int, int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScroll">
      <MemberSignature Language="C#" Value="public void OnNestedScroll (Android.Views.View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScroll(class Android.Views.View target, int32 dxConsumed, int32 dyConsumed, int32 dxUnconsumed, int32 dyUnconsumed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedScroll", "(Landroid/view/View;IIII)V", "GetOnNestedScroll_Landroid_view_View_IIIIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dxConsumed" Type="System.Int32" />
        <Parameter Name="dyConsumed" Type="System.Int32" />
        <Parameter Name="dxUnconsumed" Type="System.Int32" />
        <Parameter Name="dyUnconsumed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="target">The descendent view controlling the nested scroll</param>
        <param name="dxConsumed">Horizontal scroll distance in pixels already consumed by target</param>
        <param name="dyConsumed">Vertical scroll distance in pixels already consumed by target</param>
        <param name="dxUnconsumed">Horizontal scroll distance in pixels not consumed by target</param>
        <param name="dyUnconsumed">Vertical scroll distance in pixels not consumed by target
</param>
        <summary>React to a nested scroll in progress.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">React to a nested scroll in progress.

 </para>
          <para tool="javadoc-to-mdoc">This method will be called when the ViewParent's current nested scrolling child view
 dispatches a nested scroll event. To receive calls to this method the ViewParent must have
 previously returned <c>true</c> for a call to
 <c><see cref="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.View)" /></c>.</para>
          <para tool="javadoc-to-mdoc">Both the consumed and unconsumed portions of the scroll distance are reported to the
 ViewParent. An implementation may choose to use the consumed portion to match or chase scroll
 position of multiple child elements, for example. The unconsumed portion may be used to
 allow continuous dragging of multiple scrolling or draggable elements, such as scrolling
 a list within a vertical drawer where the drawer begins dragging once the edge of inner
 scrolling content is reached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onNestedScroll(android.view.View, int, int, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScrollAccepted">
      <MemberSignature Language="C#" Value="public void OnNestedScrollAccepted (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScrollAccepted(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedScrollAccepted", "(Landroid/view/View;Landroid/view/View;I)V", "GetOnNestedScrollAccepted_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c><see cref="F:Android.Views.View.ScrollAxisHorizontal" /></c>,
                         <c><see cref="F:Android.Views.View.ScrollAxisVertical" /></c> or both</param>
        <summary>React to the successful claiming of a nested scroll operation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">React to the successful claiming of a nested scroll operation.

 </para>
          <para tool="javadoc-to-mdoc">This method will be called after
 <c><see cref="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.View)" /></c> returns true. It offers
 an opportunity for the view and its superclasses to perform initial configuration
 for the nested scroll. Implementations of this method should always call their superclass's
 implementation of this method if one is present.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onNestedScrollAccepted(android.view.View, android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View, Android.Views.View, Android.Views.View)" />
        <altmember cref="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="OnStartNestedScroll">
      <MemberSignature Language="C#" Value="public bool OnStartNestedScroll (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStartNestedScroll(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartNestedScroll", "(Landroid/view/View;Landroid/view/View;I)Z", "GetOnStartNestedScroll_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c><see cref="F:Android.Views.View.ScrollAxisHorizontal" /></c>,
                         <c><see cref="F:Android.Views.View.ScrollAxisVertical" /></c> or both</param>
        <summary>React to a descendant view initiating a nestable scroll operation, claiming the
 nested scroll operation if appropriate.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">React to a descendant view initiating a nestable scroll operation, claiming the
 nested scroll operation if appropriate.

 </para>
          <para tool="javadoc-to-mdoc">This method will be called in response to a descendant view invoking
 <c><see cref="M:Android.Views.View.StartNestedScroll(Android.Views.ScrollAxis)" /></c>. Each parent up the view hierarchy will be
 given an opportunity to respond and claim the nested scrolling operation by returning
 <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">This method may be overridden by ViewParent implementations to indicate when the view
 is willing to support a nested scrolling operation that is about to begin. If it returns
 true, this ViewParent will become the target view's nested scrolling parent for the duration
 of the scroll operation in progress. When the nested scroll is finished this ViewParent
 will receive a call to <c><see cref="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onStartNestedScroll(android.view.View, android.view.View, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopNestedScroll">
      <MemberSignature Language="C#" Value="public void OnStopNestedScroll (Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStopNestedScroll(class Android.Views.View target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStopNestedScroll", "(Landroid/view/View;)V", "GetOnStopNestedScroll_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll
</param>
        <summary>React to a nested scroll operation ending.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">React to a nested scroll operation ending.

 </para>
          <para tool="javadoc-to-mdoc">Perform cleanup after a nested scrolling operation.
 This method will be called when a nested scroll stops, for example when a nested touch
 scroll ends with a <c><see cref="!:Android.Views.MotionEvent.ACTION_UP" /></c> or <c><see cref="!:Android.Views.MotionEvent.ACTION_CANCEL" /></c> event.
 Implementations of this method should always call their superclass's implementation of this
 method if one is present.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#onStopNestedScroll(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParent", "()Landroid/view/ViewParent;", "GetGetParentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the parent if it exists, or null.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the parent if it exists, or null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getParent()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentForAccessibility">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent ParentForAccessibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent ParentForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParentForAccessibility", "()Landroid/view/ViewParent;", "GetGetParentForAccessibilityHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of a given View for accessibility.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the parent of a given View for accessibility. Since some Views are not
 exposed to the accessibility layer the parent for accessibility is not
 necessarily the direct parent of the View, rather it is a predecessor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getParentForAccessibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RecomputeViewAttributes">
      <MemberSignature Language="C#" Value="public void RecomputeViewAttributes (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecomputeViewAttributes(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View whose attributes have changed.
</param>
        <summary>Tell view hierarchy that the global view attributes need to be
 re-evaluated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Tell view hierarchy that the global view attributes need to be
 re-evaluated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#recomputeViewAttributes(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildFocus">
      <MemberSignature Language="C#" Value="public void RequestChildFocus (Android.Views.View child, Android.Views.View focused);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestChildFocus(class Android.Views.View child, class Android.Views.View focused) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="focused" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child of this ViewParent that wants focus. This view
        will contain the focused view. It is not necessarily the view that
        actually has focus.</param>
        <param name="focused">The view that is a descendant of child that actually has
        focus
</param>
        <summary>Called when a child of this parent wants focus</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child of this parent wants focus</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestChildFocus(android.view.View, android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildRectangleOnScreen">
      <MemberSignature Language="C#" Value="public bool RequestChildRectangleOnScreen (Android.Views.View child, Android.Graphics.Rect rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestChildRectangleOnScreen(class Android.Views.View child, class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The direct child making the request.</param>
        <param name="rectangle">The rectangle in the child's coordinates the child
        wishes to be on the screen.</param>
        <param name="immediate">True to forbid animated or delayed scrolling,
        false otherwise</param>
        <summary>Called when a child of this group wants a particular rectangle to be
 positioned onto the screen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child of this group wants a particular rectangle to be
 positioned onto the screen.  <c><see cref="T:Android.Views.ViewGroup" /></c>s overriding this can trust
 that:
 <list type="bullet"><item><term>child will be a direct child of this group</term></item><item><term>rectangle will be in the child's coordinates</term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="T:Android.Views.ViewGroup" />
            </c>s overriding this should uphold the contract:</para>
          <list type="bullet">
            <item>
              <term>nothing will change if the rectangle is already visible</term>
            </item>
            <item>
              <term>the view port will be scrolled only just enough to make the
       rectangle visible</term>
            </item>
            <list type="bullet" />
          </list>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestDisallowInterceptTouchEvent">
      <MemberSignature Language="C#" Value="public void RequestDisallowInterceptTouchEvent (bool disallowIntercept);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestDisallowInterceptTouchEvent(bool disallowIntercept) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disallowIntercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disallowIntercept">True if the child does not want the parent to
            intercept touch events.
</param>
        <summary>Called when a child does not want this parent and its ancestors to
 intercept touch events with
 <c><see cref="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child does not want this parent and its ancestors to
 intercept touch events with
 <c><see cref="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This parent should pass this call onto its parents. This parent must obey
 this request for the duration of the touch (that is, only clear the flag
 after this parent has received an up or a cancel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFitSystemWindows">
      <MemberSignature Language="C#" Value="public void RequestFitSystemWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestFitSystemWindows() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFitSystemWindows", "()V", "GetRequestFitSystemWindowsHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that a new dispatch of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> be performed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Ask that a new dispatch of <c><see cref="M:Android.Views.View.FitSystemWindows(Android.Graphics.Rect)" /></c> be performed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestFitSystemWindows()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RequestLayout">
      <MemberSignature Language="C#" Value="public void RequestLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestLayout", "()V", "GetRequestLayoutHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when something has changed which has invalidated the layout of a
 child of this view parent.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when something has changed which has invalidated the layout of a
 child of this view parent. This will schedule a layout pass of the view
 tree.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public bool RequestSendAccessibilityEvent (Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called by a child to request from its parent to send an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by a child to request from its parent to send an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>.
 The child has already populated a record for itself in the event and is delegating
 to its parent to send the event. The parent can optionally add a record for itself.
 </para>
          <para tool="javadoc-to-mdoc">
 Note: An accessibility event is fired by an individual view which populates the
       event with a record for its state and requests from its parent to perform
       the sending. The parent can optionally add a record for itself before
       dispatching the request to its parent. A parent can also choose not to
       respect the request for sending the event. The accessibility event is sent
       by the topmost view in the view tree.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="RequestTransparentRegion">
      <MemberSignature Language="C#" Value="public void RequestTransparentRegion (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTransparentRegion(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view requesting the transparent region computation
 
</param>
        <summary>Called when a child wants the view hierarchy to gather and report
 transparent regions to the window compositor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a child wants the view hierarchy to gather and report
 transparent regions to the window compositor. Views that "punch" holes in
 the view hierarchy, such as SurfaceView can use this API to improve
 performance of the system. When no such a view is present in the
 hierarchy, this optimization in unnecessary and might slightly reduce the
 view hierarchy performance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestTransparentRegion(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public bool ShowContextMenuForChild (Android.Views.View originalView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the context menu was first invoked</param>
        <summary>Bring up a context menu for the specified view or its ancestors.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Bring up a context menu for the specified view or its ancestors.

 </para>
          <para tool="javadoc-to-mdoc">In most cases, a subclass does not need to override this.  However, if
 the subclass is added directly to the window manager (for example,
 <c><see cref="M:Android.Views.IViewManager.AddView(Android.Views.View,.LayoutParams)" /></c>)
 then it should override this and show the context menu.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#showContextMenuForChild(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public Android.Views.ActionMode StartActionModeForChild (Android.Views.View originalView, Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <summary>Start an action mode for the specified view with the default type
 <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start an action mode for the specified view with the default type
 <c><see cref="!:Android.Views.ActionMode.TYPE_PRIMARY" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">In most cases, a subclass does not need to override this. However, if the
 subclass is added directly to the window manager (for example,
 <c><see cref="M:Android.Views.IViewManager.AddView(Android.Views.View,.LayoutParams)" /></c>)
 then it should override this and start the action mode.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#startActionModeForChild(android.view.View, android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View, .ICallback, .ICallback)" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public Android.Views.TextAlignment TextAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextAlignment TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextAlignment", "()I", "GetGetTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text alignment.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return this view parent text alignment. See <c><see cref="P:Android.Views.View.TextAlignment" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getTextAlignment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDirection">
      <MemberSignature Language="C#" Value="public Android.Views.TextDirection TextDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextDirection TextDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextDirection", "()I", "GetGetTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return this view parent text direction. See <c><see cref="P:Android.Views.View.TextDirection" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewParent.html#getTextDirection()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
