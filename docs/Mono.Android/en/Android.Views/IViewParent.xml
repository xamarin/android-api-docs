<Type Name="IViewParent" FullName="Android.Views.IViewParent">
  <TypeSignature Language="C#" Value="public interface IViewParent : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IViewParent implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.IViewParent" />
  <TypeSignature Language="F#" Value="type IViewParent = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ViewParent", "", "Android.Views.IViewParentInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Defines the responsibilities for a class that will be a parent of a View.</summary>
    <remarks>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/ViewParent" title="Reference documentation">Android platform documentation</a>
        </format>
      </para>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="BringChildToFront">
      <MemberSignature Language="C#" Value="public void BringChildToFront (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringChildToFront(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.BringChildToFront(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member BringChildToFront : Android.Views.View -&gt; unit" Usage="iViewParent.BringChildToFront child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child to bring to the top of the z order</param>
        <summary>Change the z order of the child so it's on top of all other children.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveLayoutDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveLayoutDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveLayoutDirection" />
      <MemberSignature Language="F#" Value="abstract member CanResolveLayoutDirection : unit -&gt; bool" Usage="iViewParent.CanResolveLayoutDirection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveLayoutDirection", "()Z", "GetCanResolveLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the layout direction.</summary>
        <returns>True if this view parent can resolve the layout direction.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextAlignment">
      <MemberSignature Language="C#" Value="public bool CanResolveTextAlignment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextAlignment() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveTextAlignment" />
      <MemberSignature Language="F#" Value="abstract member CanResolveTextAlignment : unit -&gt; bool" Usage="iViewParent.CanResolveTextAlignment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextAlignment", "()Z", "GetCanResolveTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text alignment.</summary>
        <returns>True if this view parent can resolve the text alignment.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResolveTextDirection">
      <MemberSignature Language="C#" Value="public bool CanResolveTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResolveTextDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CanResolveTextDirection" />
      <MemberSignature Language="F#" Value="abstract member CanResolveTextDirection : unit -&gt; bool" Usage="iViewParent.CanResolveTextDirection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canResolveTextDirection", "()Z", "GetCanResolveTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells if this view parent can resolve the text direction.</summary>
        <returns>True if this view parent can resolve the text direction.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildDrawableStateChanged">
      <MemberSignature Language="C#" Value="public void ChildDrawableStateChanged (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildDrawableStateChanged(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ChildDrawableStateChanged(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ChildDrawableStateChanged : Android.Views.View -&gt; unit" Usage="iViewParent.ChildDrawableStateChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child whose drawable state has changed.</param>
        <summary>This method is called on the parent when a child's drawable state
            has changed.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildHasTransientStateChanged">
      <MemberSignature Language="C#" Value="public void ChildHasTransientStateChanged (Android.Views.View child, bool hasTransientState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildHasTransientStateChanged(class Android.Views.View child, bool hasTransientState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ChildHasTransientStateChanged(Android.Views.View,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ChildHasTransientStateChanged : Android.Views.View * bool -&gt; unit" Usage="iViewParent.ChildHasTransientStateChanged (child, hasTransientState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="hasTransientState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Child view whose state has changed</param>
        <param name="hasTransientState">true if this child has transient state</param>
        <summary>Called when a child view now has or no longer is tracking transient state.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearChildFocus">
      <MemberSignature Language="C#" Value="public void ClearChildFocus (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearChildFocus(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ClearChildFocus(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ClearChildFocus : Android.Views.View -&gt; unit" Usage="iViewParent.ClearChildFocus child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The view that is giving up focus</param>
        <summary>Called when a child of this parent is giving up focus</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CreateContextMenu">
      <MemberSignature Language="C#" Value="public void CreateContextMenu (Android.Views.IContextMenu menu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateContextMenu(class Android.Views.IContextMenu menu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.CreateContextMenu(Android.Views.IContextMenu)" />
      <MemberSignature Language="F#" Value="abstract member CreateContextMenu : Android.Views.IContextMenu -&gt; unit" Usage="iViewParent.CreateContextMenu menu" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createContextMenu", "(Landroid/view/ContextMenu;)V", "GetCreateContextMenu_Landroid_view_ContextMenu_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menu" Type="Android.Views.IContextMenu" />
      </Parameters>
      <Docs>
        <param name="menu">The menu to populate</param>
        <summary>Have the parent populate the specified context menu if it has anything to
            add (and then recurse on its parent).</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusableViewAvailable">
      <MemberSignature Language="C#" Value="public void FocusableViewAvailable (Android.Views.View v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FocusableViewAvailable(class Android.Views.View v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.FocusableViewAvailable(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member FocusableViewAvailable : Android.Views.View -&gt; unit" Usage="iViewParent.FocusableViewAvailable v" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="v">The view that has become newly focusable</param>
        <summary>Tells the parent that a new focusable view has become available.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="C#" Value="public Android.Views.View FocusSearch (Android.Views.View v, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(class Android.Views.View v, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)" />
      <MemberSignature Language="F#" Value="abstract member FocusSearch : Android.Views.View * Android.Views.FocusSearchDirection -&gt; Android.Views.View" Usage="iViewParent.FocusSearch (v, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="v">The view that currently has focus</param>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <summary>Find the nearest view in the specified direction that wants to take focus</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildVisibleRect">
      <MemberSignature Language="C#" Value="public bool GetChildVisibleRect (Android.Views.View child, Android.Graphics.Rect r, Android.Graphics.Point offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetChildVisibleRect(class Android.Views.View child, class Android.Graphics.Rect r, class Android.Graphics.Point offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)" />
      <MemberSignature Language="F#" Value="abstract member GetChildVisibleRect : Android.Views.View * Android.Graphics.Rect * Android.Graphics.Point -&gt; bool" Usage="iViewParent.GetChildVisibleRect (child, r, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="offset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="child">A child View, whose rectangular visible region we want to compute</param>
        <param name="r">The input rectangle, defined in the child coordinate system. Will be overwritten to
            contain the resulting visible rectangle, expressed in global (root) coordinates</param>
        <param name="offset">The input coordinates of a point, defined in the child coordinate system.
            As with the &lt;code&gt;r&lt;/code&gt; parameter, this will be overwritten to contain the global (root)
            coordinates of that point.
            A &lt;code&gt;null&lt;/code&gt; value is valid (in case you are not interested in this result)</param>
        <summary>Compute the visible part of a rectangular region defined in terms of a child view's
            coordinates.</summary>
        <returns>true if the resulting rectangle is not empty, false otherwise</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChild">
      <MemberSignature Language="C#" Value="public void InvalidateChild (Android.Views.View child, Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateChild(class Android.Views.View child, class Android.Graphics.Rect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.InvalidateChild(Android.Views.View,Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateChild : Android.Views.View * Android.Graphics.Rect -&gt; unit" Usage="iViewParent.InvalidateChild (child, r)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "GetInvalidateChild_Landroid_view_View_Landroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="child">The child which is dirty</param>
        <param name="r">The area within the child that is invalid</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChildInParent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent InvalidateChildInParent (int[] location, Android.Graphics.Rect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.IViewParent InvalidateChildInParent(int32[] location, class Android.Graphics.Rect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateChildInParent : int[] * Android.Graphics.Rect -&gt; Android.Views.IViewParent" Usage="iViewParent.InvalidateChildInParent (location, r)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="location">An array of 2 ints containing the left and top
                   coordinates of the child to invalidate</param>
        <param name="r">The area within the child that is invalid</param>
        <summary>All or part of a child is dirty and needs to be redrawn.</summary>
        <returns>the parent of this ViewParent or null</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsLayoutDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutDirectionResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsLayoutDirectionResolved" />
      <MemberSignature Language="F#" Value="member this.IsLayoutDirectionResolved : bool" Usage="Android.Views.IViewParent.IsLayoutDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutDirectionResolved", "()Z", "GetIsLayoutDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent layout direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutRequested">
      <MemberSignature Language="C#" Value="public bool IsLayoutRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutRequested" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsLayoutRequested" />
      <MemberSignature Language="F#" Value="member this.IsLayoutRequested : bool" Usage="Android.Views.IViewParent.IsLayoutRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLayoutRequested", "()Z", "GetIsLayoutRequestedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether layout was requested on this view parent.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTextAlignmentResolved">
      <MemberSignature Language="C#" Value="public bool IsTextAlignmentResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextAlignmentResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsTextAlignmentResolved" />
      <MemberSignature Language="F#" Value="member this.IsTextAlignmentResolved : bool" Usage="Android.Views.IViewParent.IsTextAlignmentResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextAlignmentResolved", "()Z", "GetIsTextAlignmentResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text alignment is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTextDirectionResolved">
      <MemberSignature Language="C#" Value="public bool IsTextDirectionResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTextDirectionResolved" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.IsTextDirectionResolved" />
      <MemberSignature Language="F#" Value="member this.IsTextDirectionResolved : bool" Usage="Android.Views.IViewParent.IsTextDirectionResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTextDirectionResolved", "()Z", "GetIsTextDirectionResolvedHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tells if this view parent text direction is resolved.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardNavigationClusterSearch">
      <MemberSignature Language="C#" Value="public Android.Views.View KeyboardNavigationClusterSearch (Android.Views.View currentCluster, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View KeyboardNavigationClusterSearch(class Android.Views.View currentCluster, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.KeyboardNavigationClusterSearch(Android.Views.View,Android.Views.FocusSearchDirection)" />
      <MemberSignature Language="F#" Value="abstract member KeyboardNavigationClusterSearch : Android.Views.View * Android.Views.FocusSearchDirection -&gt; Android.Views.View" Usage="iViewParent.KeyboardNavigationClusterSearch (currentCluster, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("keyboardNavigationClusterSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetKeyboardNavigationClusterSearch_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentCluster" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="currentCluster">The starting point of the search. Null means the current cluster is not
                                  found yet</param>
        <param name="direction">Direction to look</param>
        <summary>Find the nearest keyboard navigation cluster in the specified direction.</summary>
        <returns>The nearest keyboard navigation cluster in the specified direction, or null if none
                    can be found</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDirection">
      <MemberSignature Language="C#" Value="public Android.Views.LayoutDirection LayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.LayoutDirection LayoutDirection" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.LayoutDirection" />
      <MemberSignature Language="F#" Value="member this.LayoutDirection : Android.Views.LayoutDirection" Usage="Android.Views.IViewParent.LayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutDirection", "()I", "GetGetLayoutDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.LayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent layout direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifySubtreeAccessibilityStateChanged">
      <MemberSignature Language="C#" Value="public void NotifySubtreeAccessibilityStateChanged (Android.Views.View child, Android.Views.View source, Android.Views.Accessibility.ContentChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySubtreeAccessibilityStateChanged(class Android.Views.View child, class Android.Views.View source, valuetype Android.Views.Accessibility.ContentChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.NotifySubtreeAccessibilityStateChanged(Android.Views.View,Android.Views.View,Android.Views.Accessibility.ContentChangeTypes)" />
      <MemberSignature Language="F#" Value="abstract member NotifySubtreeAccessibilityStateChanged : Android.Views.View * Android.Views.View * Android.Views.Accessibility.ContentChangeTypes -&gt; unit" Usage="iViewParent.NotifySubtreeAccessibilityStateChanged (child, source, changeType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="source" Type="Android.Views.View" />
        <Parameter Name="changeType" Type="Android.Views.Accessibility.ContentChangeTypes">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">The direct child whose subtree has changed.</param>
        <param name="source">The descendant view that changed. May not be <c>null</c>.</param>
        <param name="changeType">A bit mask of the types of changes that occurred. One
                       or more of:
                       &lt;ul&gt;
                       &lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_STATE_DESCRIPTION</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_SUBTREE</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_TEXT</c>&lt;li&gt;<c>AccessibilityEvent#CONTENT_CHANGE_TYPE_UNDEFINED</c>&lt;/ul&gt;</param>
        <summary>Notifies a view parent that the accessibility state of one of its
            descendants has changed and that the structure of the subtree is
            different.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDescendantInvalidated">
      <MemberSignature Language="C#" Value="public virtual void OnDescendantInvalidated (Android.Views.View child, Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDescendantInvalidated(class Android.Views.View child, class Android.Views.View target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnDescendantInvalidated(Android.Views.View,Android.Views.View)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDescendantInvalidated", "(Landroid/view/View;Landroid/view/View;)V", "GetOnDescendantInvalidated_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParent, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">The view that needs to redraw</param>
        <summary>The target View has been invalidated, or has had a drawing property changed that
            requires the hierarchy to re-render.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedFling">
      <MemberSignature Language="C#" Value="public bool OnNestedFling (Android.Views.View target, float velocityX, float velocityY, bool consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedFling(class Android.Views.View target, float32 velocityX, float32 velocityY, bool consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedFling(Android.Views.View,System.Single,System.Single,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedFling : Android.Views.View * single * single * bool -&gt; bool" Usage="iViewParent.OnNestedFling (target, velocityX, velocityY, consumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedFling", "(Landroid/view/View;FFZ)Z", "GetOnNestedFling_Landroid_view_View_FFZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
        <Parameter Name="consumed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <param name="consumed">true if the child consumed the fling, false otherwise</param>
        <summary>Request a fling from a nested scroll.</summary>
        <returns>true if this parent consumed or otherwise reacted to the fling</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreFling">
      <MemberSignature Language="C#" Value="public bool OnNestedPreFling (Android.Views.View target, float velocityX, float velocityY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPreFling(class Android.Views.View target, float32 velocityX, float32 velocityY) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPreFling(Android.Views.View,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPreFling : Android.Views.View * single * single -&gt; bool" Usage="iViewParent.OnNestedPreFling (target, velocityX, velocityY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedPreFling", "(Landroid/view/View;FF)Z", "GetOnNestedPreFling_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="velocityX" Type="System.Single" />
        <Parameter Name="velocityY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="velocityX">Horizontal velocity in pixels per second</param>
        <param name="velocityY">Vertical velocity in pixels per second</param>
        <summary>React to a nested fling before the target view consumes it.</summary>
        <returns>true if this parent consumed the fling ahead of the target view</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPrePerformAccessibilityAction">
      <MemberSignature Language="C#" Value="public bool OnNestedPrePerformAccessibilityAction (Android.Views.View target, Android.Views.Accessibility.Action action, Android.OS.Bundle arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnNestedPrePerformAccessibilityAction(class Android.Views.View target, valuetype Android.Views.Accessibility.Action action, class Android.OS.Bundle arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPrePerformAccessibilityAction(Android.Views.View,Android.Views.Accessibility.Action,Android.OS.Bundle)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPrePerformAccessibilityAction : Android.Views.View * Android.Views.Accessibility.Action * Android.OS.Bundle -&gt; bool" Usage="iViewParent.OnNestedPrePerformAccessibilityAction (target, action, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedPrePerformAccessibilityAction", "(Landroid/view/View;ILandroid/os/Bundle;)Z", "GetOnNestedPrePerformAccessibilityAction_Landroid_view_View_ILandroid_os_Bundle_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=22)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="action" Type="Android.Views.Accessibility.Action">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="target">The target view dispatching this action</param>
        <param name="action">Action being performed; see
                          <c>android.view.accessibility.AccessibilityNodeInfo</c></param>
        <param name="arguments">Optional action arguments</param>
        <summary>React to an accessibility action delegated by a target descendant view before the target
            processes it.</summary>
        <returns>true if the action was consumed by this ViewParent</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedPreScroll">
      <MemberSignature Language="C#" Value="public void OnNestedPreScroll (Android.Views.View target, int dx, int dy, int[] consumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedPreScroll(class Android.Views.View target, int32 dx, int32 dy, int32[] consumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedPreScroll(Android.Views.View,System.Int32,System.Int32,System.Int32[])" />
      <MemberSignature Language="F#" Value="abstract member OnNestedPreScroll : Android.Views.View * int * int * int[] -&gt; unit" Usage="iViewParent.OnNestedPreScroll (target, dx, dy, consumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedPreScroll", "(Landroid/view/View;II[I)V", "GetOnNestedPreScroll_Landroid_view_View_IIarrayIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
        <Parameter Name="consumed" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <param name="dx">Horizontal scroll distance in pixels</param>
        <param name="dy">Vertical scroll distance in pixels</param>
        <param name="consumed">Output. The horizontal and vertical scroll distance consumed by this parent</param>
        <summary>React to a nested scroll in progress before the target view consumes a portion of the scroll.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScroll">
      <MemberSignature Language="C#" Value="public void OnNestedScroll (Android.Views.View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScroll(class Android.Views.View target, int32 dxConsumed, int32 dyConsumed, int32 dxUnconsumed, int32 dyUnconsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedScroll(Android.Views.View,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedScroll : Android.Views.View * int * int * int * int -&gt; unit" Usage="iViewParent.OnNestedScroll (target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedScroll", "(Landroid/view/View;IIII)V", "GetOnNestedScroll_Landroid_view_View_IIIIHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="dxConsumed" Type="System.Int32" />
        <Parameter Name="dyConsumed" Type="System.Int32" />
        <Parameter Name="dxUnconsumed" Type="System.Int32" />
        <Parameter Name="dyUnconsumed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="target">The descendent view controlling the nested scroll</param>
        <param name="dxConsumed">Horizontal scroll distance in pixels already consumed by target</param>
        <param name="dyConsumed">Vertical scroll distance in pixels already consumed by target</param>
        <param name="dxUnconsumed">Horizontal scroll distance in pixels not consumed by target</param>
        <param name="dyUnconsumed">Vertical scroll distance in pixels not consumed by target</param>
        <summary>React to a nested scroll in progress.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNestedScrollAccepted">
      <MemberSignature Language="C#" Value="public void OnNestedScrollAccepted (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNestedScrollAccepted(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnNestedScrollAccepted(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberSignature Language="F#" Value="abstract member OnNestedScrollAccepted : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; unit" Usage="iViewParent.OnNestedScrollAccepted (child, target, nestedScrollAxes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onNestedScrollAccepted", "(Landroid/view/View;Landroid/view/View;I)V", "GetOnNestedScrollAccepted_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c>View#SCROLL_AXIS_HORIZONTAL</c>,
                                    <c>View#SCROLL_AXIS_VERTICAL</c> or both</param>
        <summary>React to the successful claiming of a nested scroll operation.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <altmember cref="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View, Android.Views.View, Android.Views.View)" />
        <altmember cref="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" />
      </Docs>
    </Member>
    <Member MemberName="OnStartNestedScroll">
      <MemberSignature Language="C#" Value="public bool OnStartNestedScroll (Android.Views.View child, Android.Views.View target, Android.Views.ScrollAxis nestedScrollAxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnStartNestedScroll(class Android.Views.View child, class Android.Views.View target, valuetype Android.Views.ScrollAxis nestedScrollAxes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnStartNestedScroll(Android.Views.View,Android.Views.View,Android.Views.ScrollAxis)" />
      <MemberSignature Language="F#" Value="abstract member OnStartNestedScroll : Android.Views.View * Android.Views.View * Android.Views.ScrollAxis -&gt; bool" Usage="iViewParent.OnStartNestedScroll (child, target, nestedScrollAxes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartNestedScroll", "(Landroid/view/View;Landroid/view/View;I)Z", "GetOnStartNestedScroll_Landroid_view_View_Landroid_view_View_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="target" Type="Android.Views.View" />
        <Parameter Name="nestedScrollAxes" Type="Android.Views.ScrollAxis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="child">Direct child of this ViewParent containing target</param>
        <param name="target">View that initiated the nested scroll</param>
        <param name="nestedScrollAxes">Flags consisting of <c>View#SCROLL_AXIS_HORIZONTAL</c>,
                                    <c>View#SCROLL_AXIS_VERTICAL</c> or both</param>
        <summary>React to a descendant view initiating a nestable scroll operation, claiming the
            nested scroll operation if appropriate.</summary>
        <returns>true if this ViewParent accepts the nested scroll operation</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopNestedScroll">
      <MemberSignature Language="C#" Value="public void OnStopNestedScroll (Android.Views.View target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStopNestedScroll(class Android.Views.View target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.OnStopNestedScroll(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member OnStopNestedScroll : Android.Views.View -&gt; unit" Usage="iViewParent.OnStopNestedScroll target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStopNestedScroll", "(Landroid/view/View;)V", "GetOnStopNestedScroll_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="target">View that initiated the nested scroll</param>
        <summary>React to a nested scroll operation ending.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent Parent" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : Android.Views.IViewParent" Usage="Android.Views.IViewParent.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParent", "()Landroid/view/ViewParent;", "GetGetParentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the parent if it exists, or null.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParentForAccessibility">
      <MemberSignature Language="C#" Value="public Android.Views.IViewParent ParentForAccessibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.IViewParent ParentForAccessibility" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.ParentForAccessibility" />
      <MemberSignature Language="F#" Value="member this.ParentForAccessibility : Android.Views.IViewParent" Usage="Android.Views.IViewParent.ParentForAccessibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParentForAccessibility", "()Landroid/view/ViewParent;", "GetGetParentForAccessibilityHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of a given View for accessibility.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RecomputeViewAttributes">
      <MemberSignature Language="C#" Value="public void RecomputeViewAttributes (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecomputeViewAttributes(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RecomputeViewAttributes(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RecomputeViewAttributes : Android.Views.View -&gt; unit" Usage="iViewParent.RecomputeViewAttributes child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View whose attributes have changed.</param>
        <summary>Tell view hierarchy that the global view attributes need to be
            re-evaluated.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildFocus">
      <MemberSignature Language="C#" Value="public void RequestChildFocus (Android.Views.View child, Android.Views.View focused);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestChildFocus(class Android.Views.View child, class Android.Views.View focused) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestChildFocus(Android.Views.View,Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RequestChildFocus : Android.Views.View * Android.Views.View -&gt; unit" Usage="iViewParent.RequestChildFocus (child, focused)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="focused" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child of this ViewParent that wants focus. This view
                   will contain the focused view. It is not necessarily the view that
                   actually has focus.</param>
        <param name="focused">The view that is a descendant of child that actually has
                   focus</param>
        <summary>Called when a child of this parent wants focus</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildRectangleOnScreen">
      <MemberSignature Language="C#" Value="public bool RequestChildRectangleOnScreen (Android.Views.View child, Android.Graphics.Rect rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestChildRectangleOnScreen(class Android.Views.View child, class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RequestChildRectangleOnScreen : Android.Views.View * Android.Graphics.Rect * bool -&gt; bool" Usage="iViewParent.RequestChildRectangleOnScreen (child, rectangle, immediate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The direct child making the request.</param>
        <param name="rectangle">The rectangle in the child's coordinates the child
                   wishes to be on the screen.</param>
        <param name="immediate">True to forbid animated or delayed scrolling,
                   false otherwise</param>
        <summary>Called when a child of this group wants a particular rectangle to be
            positioned onto the screen.</summary>
        <returns>Whether the group scrolled to handle the operation</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestDisallowInterceptTouchEvent">
      <MemberSignature Language="C#" Value="public void RequestDisallowInterceptTouchEvent (bool disallowIntercept);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestDisallowInterceptTouchEvent(bool disallowIntercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestDisallowInterceptTouchEvent(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RequestDisallowInterceptTouchEvent : bool -&gt; unit" Usage="iViewParent.RequestDisallowInterceptTouchEvent disallowIntercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disallowIntercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disallowIntercept">True if the child does not want the parent to
                       intercept touch events.</param>
        <summary>Called when a child does not want this parent and its ancestors to
            intercept touch events with
            <c>ViewGroup#onInterceptTouchEvent(MotionEvent)</c>.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestFitSystemWindows">
      <MemberSignature Language="C#" Value="public void RequestFitSystemWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestFitSystemWindows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestFitSystemWindows" />
      <MemberSignature Language="F#" Value="abstract member RequestFitSystemWindows : unit -&gt; unit" Usage="iViewParent.RequestFitSystemWindows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestFitSystemWindows", "()V", "GetRequestFitSystemWindowsHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ask that a new dispatch of <c>View#fitSystemWindows(Rect)
            View.fitSystemWindows(Rect)</c> be performed.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="RequestLayout">
      <MemberSignature Language="C#" Value="public void RequestLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestLayout" />
      <MemberSignature Language="F#" Value="abstract member RequestLayout : unit -&gt; unit" Usage="iViewParent.RequestLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestLayout", "()V", "GetRequestLayoutHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when something has changed which has invalidated the layout of a
            child of this view parent.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public bool RequestSendAccessibilityEvent (Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)" />
      <MemberSignature Language="F#" Value="abstract member RequestSendAccessibilityEvent : Android.Views.View * Android.Views.Accessibility.AccessibilityEvent -&gt; bool" Usage="iViewParent.RequestSendAccessibilityEvent (child, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called by a child to request from its parent to send an <c>AccessibilityEvent</c>.</summary>
        <returns>True if the event was sent.</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="RequestTransparentRegion">
      <MemberSignature Language="C#" Value="public void RequestTransparentRegion (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTransparentRegion(class Android.Views.View child) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.RequestTransparentRegion(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RequestTransparentRegion : Android.Views.View -&gt; unit" Usage="iViewParent.RequestTransparentRegion child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view requesting the transparent region computation</param>
        <summary>Called when a child wants the view hierarchy to gather and report
            transparent regions to the window compositor.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public bool ShowContextMenuForChild (Android.Views.View originalView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View -&gt; bool" Usage="iViewParent.ShowContextMenuForChild originalView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="originalView">the source view where the context menu was first
                                invoked</param>
        <summary>Shows the context menu for the specified view or its ancestors.</summary>
        <returns>
          <c>true</c> if the context menu was shown, <c>false</c>
                    otherwise</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public bool ShowContextMenuForChild (Android.Views.View originalView, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.ShowContextMenuForChild(Android.Views.View,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenuForChild : Android.Views.View * single * single -&gt; bool" Usage="iViewParent.ShowContextMenuForChild (originalView, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;FF)Z", "GetShowContextMenuForChild_Landroid_view_View_FFHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="originalView">the source view where the context menu was first
                                invoked</param>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Shows the context menu for the specified view or its ancestors.</summary>
        <returns>
          <c>true</c> if the context menu was shown, <c>false</c>
                    otherwise</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public Android.Views.ActionMode StartActionModeForChild (Android.Views.View originalView, Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)" />
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback -&gt; Android.Views.ActionMode" Usage="iViewParent.StartActionModeForChild (originalView, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <summary>Start an action mode for the specified view with the default type
            <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The new action mode if it was started, null otherwise</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View, .ICallback, .ICallback)" />
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public Android.Views.ActionMode StartActionModeForChild (Android.Views.View originalView, Android.Views.ActionMode.ICallback callback, Android.Views.ActionModeType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback, valuetype Android.Views.ActionModeType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IViewParent.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback,Android.Views.ActionModeType)" />
      <MemberSignature Language="F#" Value="abstract member StartActionModeForChild : Android.Views.View * Android.Views.ActionMode.ICallback * Android.Views.ActionModeType -&gt; Android.Views.ActionMode" Usage="iViewParent.StartActionModeForChild (originalView, callback, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_IHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=23)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
        <Parameter Name="type" Type="Android.Views.ActionModeType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <param name="type">To be added.</param>
        <summary>Start an action mode for the specified view with the default type
            <c>ActionMode#TYPE_PRIMARY</c>.</summary>
        <returns>The new action mode if it was started, null otherwise</returns>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public Android.Views.TextAlignment TextAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.TextAlignment" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : Android.Views.TextAlignment" Usage="Android.Views.IViewParent.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextAlignment", "()I", "GetGetTextAlignmentHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text alignment.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDirection">
      <MemberSignature Language="C#" Value="public Android.Views.TextDirection TextDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.TextDirection TextDirection" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IViewParent.TextDirection" />
      <MemberSignature Language="F#" Value="member this.TextDirection : Android.Views.TextDirection" Usage="Android.Views.IViewParent.TextDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTextDirection", "()I", "GetGetTextDirectionHandler:Android.Views.IViewParentInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return this view parent text direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
